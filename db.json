{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"themes/pacman/source/fancybox/fancybox_loading.gif","path":"fancybox/fancybox_loading.gif","modified":0,"renderable":1},{"_id":"themes/pacman/source/fancybox/blank.gif","path":"fancybox/blank.gif","modified":0,"renderable":1},{"_id":"themes/pacman/source/css/style.styl","path":"css/style.styl","modified":0,"renderable":1},{"_id":"themes/pacman/source/fancybox/fancybox_overlay.png","path":"fancybox/fancybox_overlay.png","modified":0,"renderable":1},{"_id":"themes/pacman/source/fancybox/fancybox_loading@2x.gif","path":"fancybox/fancybox_loading@2x.gif","modified":0,"renderable":1},{"_id":"themes/pacman/source/fancybox/fancybox_sprite.png","path":"fancybox/fancybox_sprite.png","modified":0,"renderable":1},{"_id":"themes/pacman/source/fancybox/fancybox_sprite@2x.png","path":"fancybox/fancybox_sprite@2x.png","modified":0,"renderable":1},{"_id":"themes/pacman/source/fancybox/jquery.fancybox.css","path":"fancybox/jquery.fancybox.css","modified":0,"renderable":1},{"_id":"themes/pacman/source/fancybox/jquery.fancybox.pack.js","path":"fancybox/jquery.fancybox.pack.js","modified":0,"renderable":1},{"_id":"themes/pacman/source/fancybox/jquery.fancybox.js","path":"fancybox/jquery.fancybox.js","modified":0,"renderable":1},{"_id":"themes/pacman/source/font/coveredbyyourgrace-webfont.eot","path":"font/coveredbyyourgrace-webfont.eot","modified":0,"renderable":1},{"_id":"themes/pacman/source/font/FontAwesome.otf","path":"font/FontAwesome.otf","modified":0,"renderable":1},{"_id":"themes/pacman/source/font/coveredbyyourgrace-webfont.ttf","path":"font/coveredbyyourgrace-webfont.ttf","modified":0,"renderable":1},{"_id":"themes/pacman/source/font/coveredbyyourgrace-webfont.woff","path":"font/coveredbyyourgrace-webfont.woff","modified":0,"renderable":1},{"_id":"themes/pacman/source/font/fontawesome-webfont.eot","path":"font/fontawesome-webfont.eot","modified":0,"renderable":1},{"_id":"themes/pacman/source/font/fontawesome-webfont.woff","path":"font/fontawesome-webfont.woff","modified":0,"renderable":1},{"_id":"themes/pacman/source/img/author.jpg","path":"img/author.jpg","modified":0,"renderable":1},{"_id":"themes/pacman/source/img/sun.png","path":"img/sun.png","modified":0,"renderable":1},{"_id":"themes/pacman/source/img/favicon.ico","path":"img/favicon.ico","modified":0,"renderable":1},{"_id":"themes/pacman/source/img/logo.svg","path":"img/logo.svg","modified":0,"renderable":1},{"_id":"themes/pacman/source/font/coveredbyyourgrace-webfont.svg","path":"font/coveredbyyourgrace-webfont.svg","modified":0,"renderable":1},{"_id":"themes/pacman/source/font/fontawesome-webfont.ttf","path":"font/fontawesome-webfont.ttf","modified":0,"renderable":1},{"_id":"themes/pacman/source/fancybox/helpers/fancybox_buttons.png","path":"fancybox/helpers/fancybox_buttons.png","modified":0,"renderable":1},{"_id":"themes/pacman/source/fancybox/helpers/jquery.fancybox-buttons.css","path":"fancybox/helpers/jquery.fancybox-buttons.css","modified":0,"renderable":1},{"_id":"themes/pacman/source/fancybox/helpers/jquery.fancybox-media.js","path":"fancybox/helpers/jquery.fancybox-media.js","modified":0,"renderable":1},{"_id":"themes/pacman/source/fancybox/helpers/jquery.fancybox-buttons.js","path":"fancybox/helpers/jquery.fancybox-buttons.js","modified":0,"renderable":1},{"_id":"themes/pacman/source/js/jquery-2.1.0.min.js","path":"js/jquery-2.1.0.min.js","modified":0,"renderable":1},{"_id":"themes/pacman/source/fancybox/helpers/jquery.fancybox-thumbs.css","path":"fancybox/helpers/jquery.fancybox-thumbs.css","modified":0,"renderable":1},{"_id":"themes/pacman/source/fancybox/helpers/jquery.fancybox-thumbs.js","path":"fancybox/helpers/jquery.fancybox-thumbs.js","modified":0,"renderable":1},{"_id":"themes/pacman/source/font/fontawesome-webfont.svg","path":"font/fontawesome-webfont.svg","modified":0,"renderable":1}],"Cache":[{"_id":"themes/pacman/LICENSE","hash":"4847e5a63399a0ef85af6844fd19a48c69a8869c","modified":1466187524397},{"_id":"themes/pacman/_config.yml","hash":"458584e72993769c9eb1ec6a9da3d460f39088db","modified":1466513387455},{"_id":"themes/pacman/README.md","hash":"9f0be78dbd1f34f44a955cf02bbe03f979c7a1e6","modified":1466187524398},{"_id":"source/_posts/about-display.md","hash":"157cb07623630caa80cd9a7208772ea1b55c9251","modified":1471690461031},{"_id":"source/_posts/about-position.md","hash":"89f9f724c5503a5d74c91906246e50fb488cd7a6","modified":1471690461034},{"_id":"source/_posts/angular-note-1-create-angular-project.md","hash":"9b4793407c35567465c1ef723f64be5a918037fc","modified":1471690461037},{"_id":"source/_posts/angular-note-10-route-and-controller-conmunitaion.md","hash":"5f581657af4eda3fefbf0c68da48dc5e72eec688","modified":1471690461039},{"_id":"source/_posts/angular-note-11-karma-jasmine-test-create.md","hash":"c48688aa21232c42c15bc981d7bd2b9f1729b990","modified":1471690461042},{"_id":"source/_posts/angular-note-12-karma-config.md","hash":"1eb2618c6f3631fe9f56ce9e9383a0c44f45a5f3","modified":1471690461045},{"_id":"source/_posts/angular-note-15-use-echarts.md","hash":"bd68b51f8ca3e756c68b049a16986063fdafa8a5","modified":1474084630235},{"_id":"source/_posts/angular-note-14-use-bmap.md","hash":"a3b1143e0b2285701a9745e998885c4abd6c89d7","modified":1474031453306},{"_id":"source/_posts/angular-note-13-unit-test-directive.md","hash":"7f1adfbc4107bfa29c3a8f878856e04a13457bc8","modified":1471690461047},{"_id":"source/_posts/angular-note-2-create-login.md","hash":"6950dd75eb86bc01a41d7c8e3e6b28251b08ddc4","modified":1471690461051},{"_id":"source/_posts/angular-note-4-make-header-directive.md","hash":"f4a948b4d347a253f490ec141c1869175a514347","modified":1471690461056},{"_id":"source/_posts/angular-note-3-common-info-manage.md","hash":"c5c34c527ebc71e2f7c1b7d3e8d28c1237701794","modified":1471690461054},{"_id":"source/_posts/angular-note-5-fullfill-index.md","hash":"38f9d04007e34c2ff28ffcd4c27d3483e45a376d","modified":1471690461060},{"_id":"source/_posts/angular-note-6-asyncchronous-submit-form.md","hash":"4096ef0376fba664e17d56abc465b1b28c075d2f","modified":1471690461063},{"_id":"source/_posts/angular-note-7-load-image.md","hash":"d639a07ab2593328bf7902b68386d4ac9ca485a8","modified":1471690461066},{"_id":"source/_posts/angular-note-8-create-filter.md","hash":"5df71364dd2ebfdc0d9625533f59956ac83ed5dc","modified":1471690461069},{"_id":"source/_posts/angular-note-9-session-commit.md","hash":"5b57e22a25931fcf75d8fc8136308e361392075e","modified":1471690461072},{"_id":"source/_posts/angular2-notes-1-create-angular2-project.md","hash":"0b94c03f577b40696f4ada3f16b89f06cded0cd4","modified":1474771364400},{"_id":"source/_posts/angular2-notes-3-create-header.md","hash":"0edda3b0da3c3cc012286eba3724d5e4f2cf631b","modified":1475810306815},{"_id":"source/_posts/angular2-notes-2-create-login.md","hash":"2c1d60e16a98aba5860c910beb748157ab133088","modified":1478916748245},{"_id":"source/_posts/angular2-notes-4-route-component.md","hash":"aec532f0b9a996bca874bd6d46575b336ddef4a1","modified":1476627693907},{"_id":"source/_posts/angular2-notes-7-basic-concept-in-angular2.md","hash":"da00db3a41e591bcc62110f0d7f2dc4cacdd7aac","modified":1478317322125},{"_id":"source/_posts/angular2-notes-6-use-service-class.md","hash":"8dfef3adb3537ef47b40762d152151dd14931879","modified":1477762871391},{"_id":"source/_posts/angular2-notes-8-rxjs-in-angular2.md","hash":"f27081629ec9360e809430f948f3253755f72998","modified":1478396842642},{"_id":"source/_posts/angular2-notes-5-animation-and-create-index.md","hash":"2dbccc38a43c390ab4c3bae31ed002a64813c4d4","modified":1477762813120},{"_id":"source/_posts/angular2-notes-9-websocket-service-with-rxjs.md","hash":"97ca4ea19020722695982b2395db92d6e5bc9d88","modified":1478917010801},{"_id":"source/_posts/drag-and-drop.md","hash":"8a239dc87519d20561492e2741059691bc954337","modified":1471690461075},{"_id":"source/_posts/first-blog.md","hash":"ba3c6de6a6854b44554cd12b620f702cef77894e","modified":1471690461077},{"_id":"source/_posts/front-end-getting-started.md","hash":"987ac031d74bd1054fdbb28218b12803fec2941e","modified":1471690461080},{"_id":"source/_posts/js-closure.md","hash":"3a243461e0b1ecea37fea986c819eb7a3c3f7466","modified":1471690461083},{"_id":"source/_posts/js-this.md","hash":"dff6ab39fa6d68a70bdb5fe5a4ec84a70d53d510","modified":1471690461086},{"_id":"source/_posts/json-to-html-1-use-string-regular.md","hash":"bc5961250a933418bfda345af1fe7ea084c06a10","modified":1478966953062},{"_id":"source/_posts/picture-align.md","hash":"a5156021f5cc28229ecf98a2f17d2b7d4f7e9526","modified":1471690461090},{"_id":"source/_posts/json-to-html-2-use-object.md","hash":"39cc5e7ad097227d04e619df533040082148918e","modified":1478967137673},{"_id":"source/_posts/picture-cut.md","hash":"65d7e82df2f3d81fa2823d44b414aaac3b71d065","modified":1471690461093},{"_id":"source/_posts/position-object.md","hash":"20ae84dffeeb77aeb2f1a951fe9ebb0958ab71d9","modified":1471690461096},{"_id":"source/_posts/react-notes-2-create-login.md","hash":"12201f1598e1c167752ef59bfa7bc8c5e833e337","modified":1471690461103},{"_id":"source/_posts/react-notes-3-props-state-lifecycle.md","hash":"cc8a7eeb2a4b4bb98655339ca2a19bf3db10826f","modified":1471690461106},{"_id":"source/_posts/react-notes-4-create-header.md","hash":"d1adedd13d90527c88fcd16769effee2bfedf35a","modified":1471690461110},{"_id":"source/_posts/react-notes-5-fullfill-index.md","hash":"bf15ea2ab42fbc9491460d91e67b2253f93315bb","modified":1471718705881},{"_id":"source/_posts/react-notes-1-build-react-project.md","hash":"d0b63267f5ecc5b3be2455e3133ef67b720b8369","modified":1471690461098},{"_id":"source/_posts/react-notes-6-use-flux.md","hash":"df550e01fed29af8c2fee7c1337376db8984719a","modified":1471717416901},{"_id":"source/_posts/react-notes-7-form-and-ref.md","hash":"7e6d8cb2f09a9bdac9d4e1935fcd5f9c8b2f0a7f","modified":1472374181106},{"_id":"source/_posts/react-notes-8-conmunicate-in-react.md","hash":"f8a1407b7549d938524cf173309e9ffb1b3336cb","modified":1472350562229},{"_id":"source/_posts/react-redux-notes-1-build-react-project.md","hash":"5dda2b5b6991cc17af8ef82017ea7fdb97b6ed4b","modified":1482552584756},{"_id":"source/_posts/react-redux-notes-2-complete-publish.md","hash":"1798e15ac218c3e5b31aa942e8b47836d684cba7","modified":1482639816992},{"_id":"source/_posts/responsive-waterfall.md","hash":"fb91d8b2f31e3b7fcfb1a64848e60f9f672849b7","modified":1471690461113},{"_id":"source/_posts/vue-notes-2-create-login.md","hash":"ec776006f10bb1951006e6ec7d14447dbb506482","modified":1472920008871},{"_id":"source/_posts/vue-notes-3-create-header.md","hash":"9fbe3ff557d85ef1390380cc3a2e860de4f76ce3","modified":1473453192173},{"_id":"source/_posts/vue-notes-4-fullfill-index.md","hash":"970bed038d4bb353a09c4c438dfe0745cbd4c7a3","modified":1473562907354},{"_id":"source/_posts/vue-notes-1-build-vue-project.md","hash":"72a9acb8b5ee79c669a2fac3990e48dd5771aead","modified":1477762715350},{"_id":"source/_posts/vue2-notes-2-create-sidebar-componnet.md","hash":"2a89c5c879f67e088316e5c85de811877fe75c76","modified":1479613061577},{"_id":"source/_posts/vue2-notes-1-build-vue2-project.md","hash":"83b56a668d27697b57195c3400f60500064c626c","modified":1479550476772},{"_id":"source/_posts/vue2-notes-3-parent-child-component.md","hash":"4600ff12ebf96ae4339b1f20b045f9232314eda0","modified":1480145641547},{"_id":"source/_posts/vue2-notes-5-transition-animation.md","hash":"66c7e9eae7e65599f99f13a6bf2dbfc0fdc0720d","modified":1480773092861},{"_id":"source/_posts/vue2-notes-4-vue-router.md","hash":"4c068ea94ce4b726d5eb792626a4a002fb4afbda","modified":1480220249739},{"_id":"source/_posts/vue2-notes-6-form-with-some-plugins.md","hash":"69107af1c6a67f36de0621348f7906891a1120ad","modified":1480809977965},{"_id":"source/_posts/vue2-notes-7-use-datatable-with-html.md","hash":"caf1c242295f12912864aba0b2e6b685e78a4a4c","modified":1481299296369},{"_id":"source/categories/index.md","hash":"7e72d4c975af110f873dced94051790dc0e5fa62","modified":1471690461119},{"_id":"source/_posts/vue2-notes-8-use-datatable-with-server.md","hash":"ff5a9a086b9248375bbf3b2fc7a693d1981cfac9","modified":1481447259607},{"_id":"source/tags/index.md","hash":"9d568e751d6f2644eba1b67e52db5339974544a9","modified":1471690461122},{"_id":"source/_posts/vue2-notes-9-watch-router.md","hash":"575da87b83b6052476800014f7e4c9fbe34e8ae7","modified":1481932728731},{"_id":"themes/pacman/layout/archive.ejs","hash":"a18842e3d719fe3ca9b977a6995f8facc75c8673","modified":1466187524426},{"_id":"themes/pacman/layout/category.ejs","hash":"9b740fc33f6f028df60f0bc4312bf3ebd03aa8ea","modified":1466230271427},{"_id":"themes/pacman/layout/page.ejs","hash":"bd6bbf2ea8e183bd835867ff617dc6366b56748c","modified":1466187524429},{"_id":"source/about/index.md","hash":"9b3fb4ad22e44b61735a9ab7a637a4c4bb486574","modified":1471690461116},{"_id":"themes/pacman/scripts/fancybox.js","hash":"4c130fc242cf9b59b5df6ca5eae3b14302311e8c","modified":1466187524431},{"_id":"themes/pacman/layout/index.ejs","hash":"335172db243f1410a858e3efadf5b5d773b571b1","modified":1466318839686},{"_id":"themes/pacman/layout/post.ejs","hash":"3114134775bdde5a83cf14feb019606fa2b2b2be","modified":1466187524429},{"_id":"themes/pacman/layout/tag.ejs","hash":"45150a2365768b6b67880193c9264ad2bb4814db","modified":1466187524430},{"_id":"themes/pacman/languages/default.yml","hash":"9ffaaf4dbe83f1f343ea702e59493dc6f3f46877","modified":1466187524401},{"_id":"themes/pacman/languages/zh-CN.yml","hash":"680d877a531f8df04b30b462a5131b5d3a8ca372","modified":1466187524402},{"_id":"themes/pacman/languages/zh-TW.yml","hash":"08a6eae3c1e48f96690ca4c29ce67f8d6ff9a8bd","modified":1466187524402},{"_id":"themes/pacman/layout/_partial/article.ejs","hash":"8e446ec97c30774807657fc9fb7bceb6905699aa","modified":1466187524406},{"_id":"themes/pacman/layout/_partial/archive.ejs","hash":"ac0ce2ca7f4f361b2ae886ec8c6fb77f41527097","modified":1466515191424},{"_id":"themes/pacman/layout/layout.ejs","hash":"47ec9adc95f5734fd1f7ed170fc5103fc4ae74b2","modified":1466258418000},{"_id":"themes/pacman/layout/_partial/footer.ejs","hash":"abca156f1474f13978487ad11d73dbbb67327e81","modified":1466196790977},{"_id":"themes/pacman/layout/_partial/baidu_tongji.ejs","hash":"a982a478cb21c2110afa5d4e1a1aac738d403a9e","modified":1466195273885},{"_id":"themes/pacman/layout/_partial/categories.ejs","hash":"69ac84c3c44231cb5570e1f0e089a857ae7cf60d","modified":1466514908499},{"_id":"themes/pacman/layout/_partial/google_analytics.ejs","hash":"7ebccafcfdaca5cb5b8f4f06548f1d50958726ef","modified":1466187524409},{"_id":"themes/pacman/layout/_partial/header.ejs","hash":"d49468a4c87dd4f6e20719ec1a3e6d945aaa7033","modified":1466197356282},{"_id":"themes/pacman/layout/_partial/head.ejs","hash":"4cbf45c319b1a92725f538b9f48d0e21c767517e","modified":1466195307514},{"_id":"themes/pacman/layout/_partial/pagination.ejs","hash":"6cf37f844f150af4bbe212610da61e5140317de9","modified":1466187524411},{"_id":"themes/pacman/layout/_partial/tags.ejs","hash":"c5c858742b29e6364da2e1d098e7d6cd8cef038f","modified":1466187524421},{"_id":"themes/pacman/layout/_widget/about.ejs","hash":"18318a3639d872966f3d6442102f353895606e26","modified":1466325396431},{"_id":"themes/pacman/layout/_partial/search.ejs","hash":"5f1c22e78158cdb77f2af28517b6cbe96150fdd5","modified":1466187524419},{"_id":"themes/pacman/layout/_widget/links.ejs","hash":"0d5ef5c05694fb61020fedffbdebe02cb6361c8d","modified":1466187524423},{"_id":"themes/pacman/layout/_partial/sidebar.ejs","hash":"565979955cecaab9105b23f668aa63bf97e9c20e","modified":1466187524420},{"_id":"themes/pacman/layout/_widget/archive.ejs","hash":"b82d7fb0d1119738a9f9bb747d415e8c99e454ae","modified":1466187524422},{"_id":"themes/pacman/layout/_widget/category.ejs","hash":"690b340f317e348f1e89ef291c4f2461ba953437","modified":1466322702036},{"_id":"themes/pacman/layout/_widget/article.ejs","hash":"ec401c47f2b9962e5147d4db0be79e7e52ba3ec0","modified":1469325505421},{"_id":"themes/pacman/layout/_widget/rss.ejs","hash":"ebfb11bdd603cd6e4dcf3949cc52e38009615c25","modified":1466187524424},{"_id":"themes/pacman/layout/_widget/tagcloud.ejs","hash":"317d420f5448c7452290e37f0ed8516cb73f4068","modified":1466187524425},{"_id":"themes/pacman/source/fancybox/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1466187524447},{"_id":"themes/pacman/source/fancybox/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1466187524446},{"_id":"themes/pacman/layout/_partial/after_footer.ejs","hash":"db09ae62aa29b4c6495c698f9bb14d718a637423","modified":1466187524404},{"_id":"themes/pacman/layout/_widget/tag.ejs","hash":"ec62e051dc8bb8b4ab3add0f597e9826e02df998","modified":1466513374491},{"_id":"themes/pacman/source/css/style.styl","hash":"fd9224ce13feac0a9b406c28d9bafbd4deda42f5","modified":1466264663585},{"_id":"themes/pacman/source/fancybox/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1466187524449},{"_id":"themes/pacman/source/fancybox/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1466187524447},{"_id":"themes/pacman/source/fancybox/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1466187524449},{"_id":"themes/pacman/source/fancybox/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1466187524450},{"_id":"themes/pacman/source/fancybox/jquery.fancybox.css","hash":"2e54d51d21e68ebc4bb870f6e57d3bfb660d4f9c","modified":1466187524459},{"_id":"themes/pacman/source/fancybox/jquery.fancybox.pack.js","hash":"2da892a02778236b64076e5e8802ef0566e1d9e8","modified":1466187524461},{"_id":"themes/pacman/source/fancybox/jquery.fancybox.js","hash":"58193c802f307ec9bc9e586c0e8a13ebef45d2f8","modified":1466187524460},{"_id":"themes/pacman/source/font/coveredbyyourgrace-webfont.eot","hash":"a17d0f10534303e40f210c506ebb8703fa23b7de","modified":1466187524465},{"_id":"themes/pacman/source/font/FontAwesome.otf","hash":"b5b4f9be85f91f10799e87a083da1d050f842734","modified":1466187524464},{"_id":"themes/pacman/source/font/coveredbyyourgrace-webfont.ttf","hash":"194ccb4acf77a03dc25bcc174edb266143704fec","modified":1466187524468},{"_id":"themes/pacman/source/font/coveredbyyourgrace-webfont.woff","hash":"c6f8dc1a2f6ce914f120e80a876b8fd77b98888e","modified":1466187524470},{"_id":"themes/pacman/source/font/fontawesome-webfont.eot","hash":"7619748fe34c64fb157a57f6d4ef3678f63a8f5e","modified":1466187524470},{"_id":"themes/pacman/source/font/fontawesome-webfont.woff","hash":"04c3bf56d87a0828935bd6b4aee859995f321693","modified":1466187524476},{"_id":"themes/pacman/source/img/author.jpg","hash":"caa1bf1ac1aec5052d6cce57955daef13ed1aa49","modified":1466237336308},{"_id":"themes/pacman/source/img/sun.png","hash":"de4408b898c023ec01bbd0801f253fcbf29afc5a","modified":1466234828436},{"_id":"themes/pacman/source/img/favicon.ico","hash":"8be13e6581cdd811db96c2c30f04d37fc2663647","modified":1466236351504},{"_id":"themes/pacman/source/img/logo.svg","hash":"cef3f0bb4bf3661dd3a58c81b9a7be79601a0bfb","modified":1466187524479},{"_id":"themes/pacman/source/font/coveredbyyourgrace-webfont.svg","hash":"739808e56a56e10a03bc93d03eb55abd19590942","modified":1466187524467},{"_id":"themes/pacman/source/font/fontawesome-webfont.ttf","hash":"7f09c97f333917034ad08fa7295e916c9f72fd3f","modified":1466187524475},{"_id":"themes/pacman/layout/_partial/post/comment.ejs","hash":"f0e21c685c0e3fe78c9b5f5f6d4eb9c1b5cf036f","modified":1466193899610},{"_id":"themes/pacman/layout/_partial/post/article.ejs","hash":"0eb8eb6bca7303c400411f9a28d5aee0b7145e81","modified":1466319010920},{"_id":"themes/pacman/layout/_partial/post/footer.ejs","hash":"a4dc14cd47d22f1b73860bc3c7f424eae3d282dd","modified":1466187524414},{"_id":"themes/pacman/layout/_partial/post/catetags.ejs","hash":"fa03892b35dc344de7a722b9393978286c0376fe","modified":1466187524413},{"_id":"themes/pacman/layout/_partial/post/gallery.ejs","hash":"6bd8723f24b192158e6e840bf14028503ad50045","modified":1466187524414},{"_id":"themes/pacman/layout/_partial/post/header.ejs","hash":"953e6feaf7b156fab79165342e9bca0ef54384ba","modified":1466187524416},{"_id":"themes/pacman/layout/_partial/post/pagination.ejs","hash":"7b2c70d381d6d6f8a55d89180a9bc0f27118812e","modified":1466187524418},{"_id":"themes/pacman/layout/_partial/post/jiathis.ejs","hash":"5043a5058887cf6ad15182cfde345d36cb6ab323","modified":1466187524418},{"_id":"themes/pacman/source/css/_partial/aside.styl","hash":"f0b0b125fd5cb96a1b82473704bad5e22cf8b958","modified":1466514811347},{"_id":"themes/pacman/source/css/_partial/duoshuo.styl","hash":"3ec423b734639614fbd11ec2c3445d3a03f5231d","modified":1466187524441},{"_id":"themes/pacman/source/css/_partial/article.styl","hash":"a2f9b88cc70f602b1159cb13dceb30da92e54c07","modified":1466845686892},{"_id":"themes/pacman/source/css/_partial/gallery.styl","hash":"b85a32c4bc71f720d74143a17a202fe8fa067950","modified":1466187524442},{"_id":"themes/pacman/source/css/_partial/footer.styl","hash":"feab5937c488345cdb5919bec7272cf036e209d3","modified":1466197005602},{"_id":"themes/pacman/source/css/_partial/helper.styl","hash":"016bb83fd19e1ea0e8279e77f87829837e172a62","modified":1466777393773},{"_id":"themes/pacman/source/css/_partial/header.styl","hash":"ccefcb427c687f92b7fcd3b5c430a1bb306e2168","modified":1466197481849},{"_id":"themes/pacman/source/css/_partial/index.styl","hash":"a00aafe86d0238bf58f093834b6ae7406e918ec0","modified":1466228966140},{"_id":"themes/pacman/source/css/_base/font.styl","hash":"772749cc7c6a47410bb667f8127b37767d029283","modified":1466187524434},{"_id":"themes/pacman/source/css/_base/code.styl","hash":"577798b3c101be20b7ceb3d1e0421b4c4426d0ce","modified":1466187524433},{"_id":"themes/pacman/source/fancybox/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1466187524452},{"_id":"themes/pacman/source/css/_base/variable.styl","hash":"0e2781381b966936c806545a3f248131bc67f5bf","modified":1466195942675},{"_id":"themes/pacman/source/css/_base/public.styl","hash":"769199fe3c23ac349a4e99cd66bad696d6f5e4e2","modified":1466846126595},{"_id":"themes/pacman/source/fancybox/helpers/jquery.fancybox-buttons.css","hash":"6394c48092085788a8c0ef72670b0652006231a1","modified":1466187524453},{"_id":"themes/pacman/source/fancybox/helpers/jquery.fancybox-media.js","hash":"e14c32cc6823b81b2f758512f13ed8eb9ef2b454","modified":1466187524457},{"_id":"themes/pacman/source/fancybox/helpers/jquery.fancybox-buttons.js","hash":"4c9c395d705d22af7da06870d18f434e2a2eeaf9","modified":1466187524456},{"_id":"themes/pacman/source/js/jquery-2.1.0.min.js","hash":"0faaa0c56f563693cdeafa299f97e3d5bd6fcdd8","modified":1466187524482},{"_id":"themes/pacman/source/fancybox/helpers/jquery.fancybox-thumbs.css","hash":"b88b589f5f1aa1b3d87cc7eef34c281ff749b1ae","modified":1466187524458},{"_id":"themes/pacman/source/fancybox/helpers/jquery.fancybox-thumbs.js","hash":"83cdfea43632b613771691a11f56f99d85fb6dbd","modified":1466187524458},{"_id":"themes/pacman/source/font/fontawesome-webfont.svg","hash":"a275426daefd3716c53561fad121d258a7f05b47","modified":1466187524473},{"_id":"public/categories/index.html","hash":"af9ffbdf194b6a1e59a98176318faea4d72224fe","modified":1482639913906},{"_id":"public/tags/index.html","hash":"b3fdc9f0d1148e57ce1359b489cc2da8344c282a","modified":1482639913920},{"_id":"public/about/index.html","hash":"113cd12f3a83293a24a767476024fe2b0f4fae03","modified":1482639913921},{"_id":"public/archives/index.html","hash":"56f0fd498e1d95e83864aa7f4ba6c2c14dc007db","modified":1482639913921},{"_id":"public/archives/page/2/index.html","hash":"d2020b131cf18f2305117f15f6f99be9205ba77b","modified":1482639913921},{"_id":"public/archives/page/3/index.html","hash":"a57968fa199d380be68352a02b77e6e368bb3f35","modified":1482639913921},{"_id":"public/archives/page/4/index.html","hash":"e433b6373cc81ccaa4477ca6a300d9cd783e40c9","modified":1482639913921},{"_id":"public/archives/page/5/index.html","hash":"831fb6bde3b2b511ef6c043f3224b40f6cade54e","modified":1482639913921},{"_id":"public/archives/page/6/index.html","hash":"06cfb61dc370eb9a1c220ed2680145268cc4c727","modified":1482639913922},{"_id":"public/archives/2016/index.html","hash":"6a6178b80cefa7dd57206ed37195621574c5f046","modified":1482639913922},{"_id":"public/archives/2016/page/2/index.html","hash":"d5048ffd291c4d39861059e1700d3233ae2968b7","modified":1482639913922},{"_id":"public/archives/2016/page/5/index.html","hash":"daf5ed41e00586c55f501b1611d5971a468d790f","modified":1482639913922},{"_id":"public/archives/2016/page/6/index.html","hash":"c62273fe608758822eba58c53c96c09d08c16a57","modified":1482639913922},{"_id":"public/archives/2016/06/index.html","hash":"516ef136b0ee57102c53390d50f5aeed7683ad24","modified":1482639913922},{"_id":"public/archives/2016/07/index.html","hash":"8a707d50cb8d9d275f0c1a0d50c470212b949fba","modified":1482639913922},{"_id":"public/archives/2016/07/page/2/index.html","hash":"d19ad91d4b0db91403c857e6c10c2fbf5c61a17c","modified":1482639913922},{"_id":"public/archives/2016/page/4/index.html","hash":"fc97d521d98f23ee6dade3ebe0fe23571a0d1fc7","modified":1482639913922},{"_id":"public/archives/2016/08/index.html","hash":"4aa9cc37d6581f840e7da96e77eb0f3dcb75fb2d","modified":1482639913922},{"_id":"public/archives/2016/page/3/index.html","hash":"62b2af65d6c8cabf0366b49642b4a2973bcc85a6","modified":1482639913922},{"_id":"public/archives/2016/09/index.html","hash":"4ce89b93c6cd1781798c9c5daa89a081ee0f5424","modified":1482639913922},{"_id":"public/archives/2016/10/index.html","hash":"96f8cc1480bce358e779fbccebe42fbed6423615","modified":1482639913923},{"_id":"public/archives/2016/12/index.html","hash":"f53cf58539961b5aea0fc75977065f26daca067f","modified":1482639913923},{"_id":"public/archives/2016/11/index.html","hash":"d145039fc47daf8fa785736e38ec0f53f6673df0","modified":1482639913923},{"_id":"public/categories/CSS炒饭/index.html","hash":"2cd16a513bcacd4837f110e51326e03faaef73a8","modified":1482639913923},{"_id":"public/categories/angular混搭/index.html","hash":"30105c62cb04a4838df3610b2e9729e605361cc5","modified":1482639913923},{"_id":"public/categories/angular2火锅/index.html","hash":"d27e925a0b04dfa04bf814a411888432636a71fe","modified":1482639913923},{"_id":"public/categories/js什锦/index.html","hash":"811fb51a60483a64546d9c85574856ba3d636184","modified":1482639913923},{"_id":"public/categories/web乱炖/index.html","hash":"dfe93429650801f36d52b784d14f04ced0e4a00c","modified":1482639913923},{"_id":"public/categories/angular混搭/page/2/index.html","hash":"36f1903f1124025a8b7aba3f2b5a1c704287a8d1","modified":1482639913923},{"_id":"public/categories/jQuery杂烩/index.html","hash":"c4c91154f3fa1c6a2a9a61232732f33f71ee7b1a","modified":1482639913923},{"_id":"public/categories/react沙拉/index.html","hash":"fe928461c44017a329b28aaab043453416233801","modified":1482639913923},{"_id":"public/categories/vue八宝粥/index.html","hash":"0d3d6fb928e32a3f5e950db1e128293ed6f6f518","modified":1482639913923},{"_id":"public/categories/vue八宝粥/page/2/index.html","hash":"a0b9715bc27a3826da6d0fe2295f3f324decaaf6","modified":1482639913924},{"_id":"public/tags/笔记/index.html","hash":"61f1fbc59c3405f7d9f468fc7a1035c47ebe17d6","modified":1482639913924},{"_id":"public/tags/分享/index.html","hash":"98deb694d20d3829405acf4b468a9e86c5b53063","modified":1482639913924},{"_id":"public/tags/笔记/page/2/index.html","hash":"056ca16cf6186781663f8bdb18029cbc67205e3c","modified":1482639913924},{"_id":"public/tags/笔记/page/3/index.html","hash":"d6f68618fdc830bdd7b2524c25aa1ec955ba3da9","modified":1482639913924},{"_id":"public/tags/笔记/page/4/index.html","hash":"7c2e50db72d180935da22a59c0280c6662b23e3e","modified":1482639913925},{"_id":"public/tags/笔记/page/5/index.html","hash":"e36f250fd56bde4a7fd07a0447896dfe30dd56dd","modified":1482639913925},{"_id":"public/tags/原创部件/index.html","hash":"d1e2f4abd792a8a21501faeae4c70a0c15884367","modified":1482639913925},{"_id":"public/tags/教程/index.html","hash":"d7d3d838f47f72009703b11c0605305061780e31","modified":1482639913925},{"_id":"public/tags/逻辑实现/index.html","hash":"e59f75d051358ea17e29a43660d45e537cf0c7f0","modified":1482639913925},{"_id":"public/tags/自制插件/index.html","hash":"571cb98112db02c9d59ce0d5b738ae86ef446264","modified":1482639913925},{"_id":"public/2016/12/17/vue2-notes-9-watch-router/index.html","hash":"ccc2cd51b0c01a8d77c0961b4b30fcef9cd040f1","modified":1482639913925},{"_id":"public/2016/12/11/vue2-notes-8-use-datatable-with-server/index.html","hash":"0360bb707dfe7f7230a3f2a31bbd85ce044ec30a","modified":1482639913925},{"_id":"public/2016/12/10/vue2-notes-7-use-datatable-with-html/index.html","hash":"b0b7f6108d3f040228c954cfc4dad9dffb1b2b68","modified":1482639913925},{"_id":"public/2016/11/27/vue2-notes-4-vue-router/index.html","hash":"8120f9d1083d4d7daab476234fe3d1d5ff9fcdcb","modified":1482639913925},{"_id":"public/2016/12/24/react-redux-notes-1-build-react-project/index.html","hash":"c9f1c6ceb9562d5d9e4ba31992ad8f737a3b09c7","modified":1482639913925},{"_id":"public/2016/12/04/vue2-notes-6-form-with-some-plugins/index.html","hash":"6181df17ade82bd97aced58b1261caf025cc527e","modified":1482639913925},{"_id":"public/2016/12/03/vue2-notes-5-transition-animation/index.html","hash":"43cbc8449cd22cc4bd200cf1ad369f8708c89365","modified":1482639913925},{"_id":"public/2016/11/26/vue2-notes-3-parent-child-component/index.html","hash":"3bd04b105da0fd417291e5bbd078948901eb2d4e","modified":1482639913926},{"_id":"public/2016/11/20/vue2-notes-2-create-sidebar-componnet/index.html","hash":"51412ab53342d59b66bd173eacf0a4c5771fa49c","modified":1482639913926},{"_id":"public/2016/11/13/json-to-html-2-use-object/index.html","hash":"ad6a6bd3a557cbd7ea7d076344c667f42e5e5683","modified":1482639913926},{"_id":"public/2016/11/13/json-to-html-1-use-string-regular/index.html","hash":"5345fb906b23cb16aa77d8e5da688016e8ebe1fb","modified":1482639913926},{"_id":"public/2016/11/19/vue2-notes-1-build-vue2-project/index.html","hash":"8ba50c9cbd6a0c41e8560474a79af4d7e1c6dae7","modified":1482639913926},{"_id":"public/2016/11/06/angular2-notes-8-rxjs-in-angular2/index.html","hash":"5ae4717340abb208afe6558f55c3e63e769d0d2c","modified":1482639913926},{"_id":"public/2016/10/30/angular2-notes-6-use-service-class/index.html","hash":"7de2590414886d3c700902bcd2c8ad4dc3be4566","modified":1482639913926},{"_id":"public/2016/11/05/angular2-notes-7-basic-concept-in-angular2/index.html","hash":"89351ada1680d4f4ffeab3e90802ec5d127c0722","modified":1482639913926},{"_id":"public/2016/10/29/angular2-notes-5-animation-and-create-index/index.html","hash":"f0efc0b1093b47eac0cb1560dba6eafddf3e965b","modified":1482639913926},{"_id":"public/2016/11/12/angular2-notes-9-websocket-service-with-rxjs/index.html","hash":"71e8a9717eab97e57cc6ac3750fec574ee8144c8","modified":1482639913926},{"_id":"public/2016/10/07/angular2-notes-3-create-header/index.html","hash":"856d595c66acb244d369e72211e16ad00f34f695","modified":1482639913926},{"_id":"public/2016/09/17/angular-note-15-use-echarts/index.html","hash":"68b48bac37c9729d0521e9916db963721eca75fe","modified":1482639913926},{"_id":"public/2016/09/16/angular-note-14-use-bmap/index.html","hash":"65024265830fe7b10722178ede365316d297d986","modified":1482639913926},{"_id":"public/2016/09/11/vue-notes-4-fullfill-index/index.html","hash":"e8cddacbe6b589d9443ae87bb026f7438805f1ce","modified":1482639913926},{"_id":"public/2016/09/10/vue-notes-3-create-header/index.html","hash":"5500c306999df779751a56cbe5d1900b296bd705","modified":1482639913926},{"_id":"public/2016/09/25/angular2-notes-1-create-angular2-project/index.html","hash":"cb496e0c130d3b8de5fe7f8b4b1f82869730f220","modified":1482639913927},{"_id":"public/2016/09/04/vue-notes-2-create-login/index.html","hash":"d0dd7b15079d5c39a9cc8a3de9609762ea466a3a","modified":1482639913927},{"_id":"public/2016/10/16/angular2-notes-4-route-component/index.html","hash":"b88126f9e5f62e4fa882b9cc057437da147a3700","modified":1482639913927},{"_id":"public/2016/10/05/angular2-notes-2-create-login/index.html","hash":"ba6513ff843478d21d641a5d7d34876210eae123","modified":1482639913927},{"_id":"public/2016/09/03/vue-notes-1-build-vue-project/index.html","hash":"3e10fbc73e57e0b97b6a30bbbfcd76b52720df7a","modified":1482639913927},{"_id":"public/2016/08/28/react-notes-8-conmunicate-in-react/index.html","hash":"6d393c019f8c40bf4ec7e40c00d18c9d84049403","modified":1482639913927},{"_id":"public/2016/08/20/react-notes-5-fullfill-index/index.html","hash":"7c86b6022ad820b462e959a3a4aa8b3d34d861c7","modified":1482639913927},{"_id":"public/2016/08/21/react-notes-6-use-flux/index.html","hash":"3d6c6e654c66984b3159d165eda160b07c40aeb3","modified":1482639913927},{"_id":"public/2016/08/27/react-notes-7-form-and-ref/index.html","hash":"8daf3bb82b79a3bb20557e896f57cebcccde95b0","modified":1482639913927},{"_id":"public/2016/08/13/react-notes-3-props-state-lifecycle/index.html","hash":"315c3aafcb99290fe21ea101b72ea80a2a6682d6","modified":1482639913928},{"_id":"public/2016/08/14/react-notes-4-create-header/index.html","hash":"2af79a99140d240f95b2f1f855f3a445bdca982c","modified":1482639913928},{"_id":"public/2016/08/12/react-notes-2-create-login/index.html","hash":"b45ed00059d84b18da6666e58468ea99ae3c5b5a","modified":1482639913928},{"_id":"public/2016/07/31/angular-note-12-karma-config/index.html","hash":"617dde3a5a1ffac71a140fac2ba9fc57a385b172","modified":1482639913928},{"_id":"public/2016/08/06/react-notes-1-build-react-project/index.html","hash":"259055da9a84d0658e0ef98334136f2e3782d156","modified":1482639913928},{"_id":"public/2016/07/30/angular-note-11-karma-jasmine-test-create/index.html","hash":"79b930f5093faf0f0aa7e70ef28eb8fb99ffa684","modified":1482639913928},{"_id":"public/2016/07/29/angular-note-10-route-and-controller-conmunitaion/index.html","hash":"dfabb6094e91f1d7675c6d25d9c2f1199550c917","modified":1482639913928},{"_id":"public/2016/08/05/angular-note-13-unit-test-directive/index.html","hash":"e5eaa0f3621c5765821cd9a37af0eeae5f0c593e","modified":1482639913929},{"_id":"public/2016/07/24/angular-note-9-session-commit/index.html","hash":"887a029a3ee5f9ff949a1d5b989f6e9565c1174a","modified":1482639913929},{"_id":"public/2016/07/22/angular-note-7-load-image/index.html","hash":"0e0e59717938d61ba285d98bd21839d505a2332b","modified":1482639913929},{"_id":"public/2016/07/23/angular-note-8-create-filter/index.html","hash":"18eb38fc0a4ba18d0f62a5a3ae3970cc6caeec48","modified":1482639913929},{"_id":"public/2016/07/17/angular-note-6-asyncchronous-submit-form/index.html","hash":"5fe230a245c2ed381e0116db240101ee29938bb1","modified":1482639913929},{"_id":"public/2016/07/10/angular-note-4-make-header-directive/index.html","hash":"14521549ed4c39af38fa8391ecc11a9ad74dbbee","modified":1482639913929},{"_id":"public/2016/07/16/angular-note-5-fullfill-index/index.html","hash":"0a7eefd86562231320bb3dcd5dea35096a8145ad","modified":1482639913929},{"_id":"public/2016/07/09/angular-note-3-common-info-manage/index.html","hash":"5d973a272db9a16bc37a1c5237cf1ce055ba723b","modified":1482639913929},{"_id":"public/2016/07/08/angular-note-2-create-login/index.html","hash":"d06c764b75f9d2d8a621f4c4b160afdfdf3d952c","modified":1482639913929},{"_id":"public/2016/07/03/js-closure/index.html","hash":"2a7c8d4b0748689c145d6059529abb5ecaff5d0d","modified":1482639913929},{"_id":"public/2016/07/02/js-this/index.html","hash":"c1d234fdc80eaaf3d4f4fa7832a146bc9ab2f3ce","modified":1482639913929},{"_id":"public/2016/06/26/about-display/index.html","hash":"ab3fbeee381ae16257b879ea0d01b9ab6af7e927","modified":1482639913929},{"_id":"public/2016/06/24/front-end-getting-started/index.html","hash":"aae94a726e09e19641ad81a84ce13afe37548617","modified":1482639913929},{"_id":"public/2016/07/01/angular-note-1-create-angular-project/index.html","hash":"e8db7f53e127630c9f1c97d8c1f03093a2cfc450","modified":1482639913929},{"_id":"public/2016/06/25/about-position/index.html","hash":"9528ee082155b4184b2c642526df9f3e55bdd9a6","modified":1482639913930},{"_id":"public/2016/06/22/picture-cut/index.html","hash":"69e79c894b904f2a854ff06a218ed7de8b59ed30","modified":1482639913930},{"_id":"public/2016/06/20/responsive-waterfall/index.html","hash":"78bcd47334c2a4016fa3c8d66fb30d36f3b25e74","modified":1482639913930},{"_id":"public/2016/06/21/picture-align/index.html","hash":"b43b941c34528207f1551b3342f48d3f82fbbc11","modified":1482639913930},{"_id":"public/2016/06/19/drag-and-drop/index.html","hash":"9b9817d192954f7f15bbfd9e99180c6fe48c502d","modified":1482639913930},{"_id":"public/2016/06/18/first-blog/index.html","hash":"72025a541429150c5d89c91a2be8a5e04d309196","modified":1482639913930},{"_id":"public/2016/06/19/position-object/index.html","hash":"99e19e745033de838a140c8d0e320107c6e8130d","modified":1482639913930},{"_id":"public/index.html","hash":"28ad77a97a60342d476e327cc99d314e0d4135c0","modified":1482639913931},{"_id":"public/page/2/index.html","hash":"597553080f90fa18cacb46ebec10189c3ad72eb0","modified":1482639913931},{"_id":"public/page/3/index.html","hash":"b20784845723f1edeed1519b13506d539ae24a13","modified":1482639913932},{"_id":"public/page/4/index.html","hash":"abab2d13bfc12ea3c032ed8aaab82134fec85694","modified":1482639913932},{"_id":"public/page/6/index.html","hash":"dff6e2a4acb4792f8233f24960803d65bc58edbc","modified":1482639913932},{"_id":"public/page/5/index.html","hash":"f756b542063addf8550a882056f551fc6556a6eb","modified":1482639913932},{"_id":"public/2016/12/25/react-redux-notes-2-complete-publish/index.html","hash":"08ee3f4b738b450f3a168498f64f771b77232593","modified":1482639913934}],"Category":[{"name":"CSS炒饭","_id":"cix45hue00002xotuupr64fui"},{"name":"angular混搭","_id":"cix45hueg000dxotug5x9p61v"},{"name":"angular2火锅","_id":"cix45huff001kxotum82rnung"},{"name":"js什锦","_id":"cix45hug4002exotuquogd6ii"},{"name":"web乱炖","_id":"cix45hugb002oxotudducgjbi"},{"name":"jQuery杂烩","_id":"cix45huh6003fxotuxhbcexhv"},{"name":"react沙拉","_id":"cix45huhg003uxotujtb2mvvk"},{"name":"vue八宝粥","_id":"cix45hui5004qxotujeyu12my"}],"Data":[],"Page":[{"title":"categories","date":"2016-06-18T06:13:19.000Z","layout":"categories","_content":"","source":"categories/index.md","raw":"---\ntitle: categories\ndate: 2016-06-18 14:13:19\nlayout: categories\n---\n","updated":"2016-08-20T10:54:21.119Z","path":"categories/index.html","comments":1,"_id":"cix45hugx0036xotu3klu9gn4","content":"","excerpt":"","more":""},{"title":"tags","date":"2016-06-21T12:42:19.000Z","layout":"tags","_content":"","source":"tags/index.md","raw":"---\ntitle: tags\ndate: 2016-06-21 20:42:19\nlayout: tags\n---\n","updated":"2016-08-20T10:54:21.122Z","path":"tags/index.html","comments":1,"_id":"cix45hugz0038xotuuzsh4iwm","content":"","excerpt":"","more":""},{"title":"关于我","date":"2016-06-18T03:11:52.000Z","_content":"### 热爱前端，热爱生活\n\n也思考过为什么自己这么热爱前端，而不是其他任何语言。\n<!---->\n但不管原因是什么，本骚年爱这样无拘无束的语言，爱这种容许无限大脑洞的平台。\n<!---->\n骚年热爱钻研原理，像jQuery源码解析、AngularJs的实现原理、解剖React虚拟DOM等等。但毕竟还不是老司机，只能膜拜大神们的大作，然后写点学习笔记，又或是项目遇到的问题记下来呗。\n<!---->\n热爱生活呀，即使现在少了发现幸福片段、记录喜悦心情的时候，但依然爱这个世界，死心塌地哈哈。\n\n### 欢迎大牛指导，以及小伙伴们切磋\n\n一直抱着期盼在某年某月某日会遇到一些前端的大牛们，看看他们是如何架构、使用些什么工具、写代码的时候都在考虑些什么。\n<!---->\n也一直期待着有一堆志气相投的小伙伴们，一起分享各自的想法，一起切磋，一起解决问题。\n<!---->\n> 邮箱：wangbeishan@163.com\n> QQ: 1780096742\n> Github: [https://github.com/godbasin](https://github.com/godbasin)\n\n### 许个愿吧\n\n互联网的世界，是允许弱小的人许下大愿望的呀。\n:)","source":"about/index.md","raw":"---\ntitle: 关于我\ndate: 2016-06-18 11:11:52\n---\n### 热爱前端，热爱生活\n\n也思考过为什么自己这么热爱前端，而不是其他任何语言。\n<!---->\n但不管原因是什么，本骚年爱这样无拘无束的语言，爱这种容许无限大脑洞的平台。\n<!---->\n骚年热爱钻研原理，像jQuery源码解析、AngularJs的实现原理、解剖React虚拟DOM等等。但毕竟还不是老司机，只能膜拜大神们的大作，然后写点学习笔记，又或是项目遇到的问题记下来呗。\n<!---->\n热爱生活呀，即使现在少了发现幸福片段、记录喜悦心情的时候，但依然爱这个世界，死心塌地哈哈。\n\n### 欢迎大牛指导，以及小伙伴们切磋\n\n一直抱着期盼在某年某月某日会遇到一些前端的大牛们，看看他们是如何架构、使用些什么工具、写代码的时候都在考虑些什么。\n<!---->\n也一直期待着有一堆志气相投的小伙伴们，一起分享各自的想法，一起切磋，一起解决问题。\n<!---->\n> 邮箱：wangbeishan@163.com\n> QQ: 1780096742\n> Github: [https://github.com/godbasin](https://github.com/godbasin)\n\n### 许个愿吧\n\n互联网的世界，是允许弱小的人许下大愿望的呀。\n:)","updated":"2016-08-20T10:54:21.116Z","path":"about/index.html","comments":1,"layout":"page","_id":"cix45huh2003bxotuhu6owfyy","content":"<h3 id=\"热爱前端，热爱生活\"><a href=\"#热爱前端，热爱生活\" class=\"headerlink\" title=\"热爱前端，热爱生活\"></a>热爱前端，热爱生活</h3><p>也思考过为什么自己这么热爱前端，而不是其他任何语言。<br><!----><br>但不管原因是什么，本骚年爱这样无拘无束的语言，爱这种容许无限大脑洞的平台。<br><!----><br>骚年热爱钻研原理，像jQuery源码解析、AngularJs的实现原理、解剖React虚拟DOM等等。但毕竟还不是老司机，只能膜拜大神们的大作，然后写点学习笔记，又或是项目遇到的问题记下来呗。<br><!----><br>热爱生活呀，即使现在少了发现幸福片段、记录喜悦心情的时候，但依然爱这个世界，死心塌地哈哈。</p>\n<h3 id=\"欢迎大牛指导，以及小伙伴们切磋\"><a href=\"#欢迎大牛指导，以及小伙伴们切磋\" class=\"headerlink\" title=\"欢迎大牛指导，以及小伙伴们切磋\"></a>欢迎大牛指导，以及小伙伴们切磋</h3><p>一直抱着期盼在某年某月某日会遇到一些前端的大牛们，看看他们是如何架构、使用些什么工具、写代码的时候都在考虑些什么。<br><!----><br>也一直期待着有一堆志气相投的小伙伴们，一起分享各自的想法，一起切磋，一起解决问题。<br><!----></p>\n<blockquote>\n<p>邮箱：wangbeishan@163.com<br>QQ: 1780096742<br>Github: <a href=\"https://github.com/godbasin\" target=\"_blank\" rel=\"external\">https://github.com/godbasin</a></p>\n</blockquote>\n<h3 id=\"许个愿吧\"><a href=\"#许个愿吧\" class=\"headerlink\" title=\"许个愿吧\"></a>许个愿吧</h3><p>互联网的世界，是允许弱小的人许下大愿望的呀。<br>:)</p>\n","excerpt":"","more":"<h3 id=\"热爱前端，热爱生活\"><a href=\"#热爱前端，热爱生活\" class=\"headerlink\" title=\"热爱前端，热爱生活\"></a>热爱前端，热爱生活</h3><p>也思考过为什么自己这么热爱前端，而不是其他任何语言。<br><!----><br>但不管原因是什么，本骚年爱这样无拘无束的语言，爱这种容许无限大脑洞的平台。<br><!----><br>骚年热爱钻研原理，像jQuery源码解析、AngularJs的实现原理、解剖React虚拟DOM等等。但毕竟还不是老司机，只能膜拜大神们的大作，然后写点学习笔记，又或是项目遇到的问题记下来呗。<br><!----><br>热爱生活呀，即使现在少了发现幸福片段、记录喜悦心情的时候，但依然爱这个世界，死心塌地哈哈。</p>\n<h3 id=\"欢迎大牛指导，以及小伙伴们切磋\"><a href=\"#欢迎大牛指导，以及小伙伴们切磋\" class=\"headerlink\" title=\"欢迎大牛指导，以及小伙伴们切磋\"></a>欢迎大牛指导，以及小伙伴们切磋</h3><p>一直抱着期盼在某年某月某日会遇到一些前端的大牛们，看看他们是如何架构、使用些什么工具、写代码的时候都在考虑些什么。<br><!----><br>也一直期待着有一堆志气相投的小伙伴们，一起分享各自的想法，一起切磋，一起解决问题。<br><!----></p>\n<blockquote>\n<p>邮箱：wangbeishan@163.com<br>QQ: 1780096742<br>Github: <a href=\"https://github.com/godbasin\">https://github.com/godbasin</a></p>\n</blockquote>\n<h3 id=\"许个愿吧\"><a href=\"#许个愿吧\" class=\"headerlink\" title=\"许个愿吧\"></a>许个愿吧</h3><p>互联网的世界，是允许弱小的人许下大愿望的呀。<br>:)</p>\n"}],"Post":[{"title":"CSS的position和z-index有关","date":"2016-06-25T04:03:10.000Z","_content":"今天刚好kk妹子问我关于position的一些问题，就打算整理一下，希望用比较清晰明了的方式解释一下CSS的position是怎么个玩法。\n顺便也进行一下z-index相关的说明。\n<!--more-->\n## CSS position属性\n-----\n### w3c的position\n这里借用[w3c](http://www.w3school.com.cn/cssref/pr_class_position.asp)上的说明\n- absolute\t\n  - 生成绝对定位的元素，相对于static定位以外的第一个父元素进行定位。\n  - 元素的位置通过\"left\", \"top\", \"right\"以及\"bottom\"属性进行规定。\n- fixed\t\n  - 生成绝对定位的元素，相对于浏览器窗口进行定位。\n  - 元素的位置通过\"left\", \"top\", \"right\"以及\"bottom\"属性进行规定。\n- relative\t\n  - 生成相对定位的元素，相对于其正常位置进行定位。\n  - 因此，\"left:20\"会向元素的 LEFT位置添加 20像素。\n- static\t\n  - 默认值。没有定位，元素出现在正常的流中（忽略top, bottom, left, right或者z-index声明）。\n- inherit\t\n  - 规定应该从父元素继承position属性的值。\n\n### 文档流\n- 什么是文档流\n相信大家刚开始接触position属性的时候，都会被“文档流”、“流”这样的概念给吓坏了。\n- 正常的文档流也叫普通流，在HTML里面的写法就是从上到下，从左到右的排版布局\n\n### static与文档流\n\n如图，[查看页面效果](http://o9bc2k1st.bkt.clouddn.com/position-static.html)\n``` css\na, p, div { border: solid 1px red; }\n.static { position: static; left: 100px; top: 100px; }\n```\n![image](http://o905ne85q.bkt.clouddn.com/53ETM3GNX7ZV65W%5DW~%28%7BZK3.png)\n可见，此时添加定位（left: 100px; top: 100px;）是无效的\n\n### relative与文档流\nrelative保持原有文档流，但相对本身的原始位置发生位移，且占空间\n如图，[查看页面效果](http://o9bc2k1st.bkt.clouddn.com/position-relative.html)\n``` css\na, p, div { border: solid 1px red; }\n.relative { position: relative; left: 100px; top: 100px; }\n```\n![image](http://o905ne85q.bkt.clouddn.com/PN1G~%5DQFF@E7AVRQJ9Z8%28JH.png)\n可见：\n- relative元素也遵循从上到下，从左到右的排版布局\n- relative相对于其正常位置进行定位，在这里设置了relative的元素相对其原本位置（position=static）进行位移\n- relative元素占有原本位置，因此下一个元素会排到该元素后方\n- relative元素占位不会随着定位的改变而改变。也就是说relative在文档流中占有的位置与其原本位置（position=static）相同\n这里有个需要注意的地方： 虽然relative元素占位与static相同，但会溢出父元素，撑开整个页面（document）。\n如图，[查看页面效果](http://o9bc2k1st.bkt.clouddn.com/position-relative-occupation.html)\n![image](http://o905ne85q.bkt.clouddn.com/LHRK4@9K$YE1%25KMB%29G9%60~%7B8.png)\n可以relative元素撑开父元素看到页面底部有滚动条。\n此时给父元素设置overflow: hidden;则可以隐藏溢出部分，如图\n![image](http://o905ne85q.bkt.clouddn.com/KGE~71FX8H7DW6VNYC1T00M.png)\n\n### absolute与文档流\nabsolute脱离文档流，相对于其包含块来定位，且不占位\n如图\n``` css\n.parent{ border: solid 1px blue; width: 300px; } \n.parent > div{ border: solid 1px red; height: 100px; width: 300px; } \n.absolute{ position: absolute; left: 100px; height: 100px; }\n```\n![image](http://o905ne85q.bkt.clouddn.com/75%5D1@NRTQ8$U9KTQ66SPL2A.png)\n可见：\n- absolute元素脱离文档流\n- absolute元素不占位，因此下一个符合普通流的元素会略过absolute元素排到其上一个元素的后方\n\n此时对于absolute元素的占位依然不大清晰，接下来我们给父元素添加margin-left: 200px的样式，如图\n![image](http://o905ne85q.bkt.clouddn.com/07J25Y0F~@O%5D@ZAGZ~%25%60%28%29Y.png)\n很明显，absolute元素位置没有发生改变，这是因为该元素相对于document进行定位。\n\n- absolute元素的定位是相对于static定位以外的第一个父元素进行定位\n- 当absolute的父元素position为static，则会继续往上查找，直到找到一个为relative/absolute/fixed的父元素作为定位参照物\n- 当absolute没有position为非static的父元素时，则会进行全局定位，即相对于文档document进行定位\n\n所以我们可以给父元素加上position=relative的样式，如图\n![image](http://o905ne85q.bkt.clouddn.com/~NPVE%7D%7DZFR3$PH%609%5DFJQF2Y.png)\n此时absolute元素则相对于父元素进行定位，[查看页面效果](http://o9bc2k1st.bkt.clouddn.com/position-absolute.html)。\n\n### 无定位的absolute\n在使用absolute进行定位时，若我们只是将元素设置为position: absolute，而不对其进行定位（top, bottom, left, right），会是怎样的情况呢？\n如图，[查看页面效果](http://o9bc2k1st.bkt.clouddn.com/position-absolute-without-position.html)\n![image](http://o905ne85q.bkt.clouddn.com/CG_14%7DVI%28TDCYFK%7BE$8SC%287.png)\n可见：\n- 未设置定位的absolute元素，其定位与其原本位置（position=static）相同\n- 此时absolute元素依然不占位，因此下一个符合普通流的元素会略过absolute元素排到其上一个元素的后方\n\n### fixed与文档流\nfixed脱离文档流，相对于浏览器窗口来定位，且不占位\n如图\n``` css\n.parent { border: solid 1px blue; width: 300px; } \n.parent > div { border: solid 1px red; height: 100px; width: 300px; } \n.fixed { position: fixed; left: 100px; top: 100px; background: yellow; }\n```\n![image](http://o905ne85q.bkt.clouddn.com/%28FNOAFPIA%5B80%25F%7D6%5B0CQ2%7DE.png)\n似乎跟相对于文档定位时的absolute元素没什么两样，即\n- fixed元素脱离文档流\n- fixed元素不占位\n\n接来下我们将页面填充满，如图，[查看页面效果](http://o9bc2k1st.bkt.clouddn.com/position-fixed-absolute.html)\n![image](http://o905ne85q.bkt.clouddn.com/K4OGL%5BF5~XP9NLRW%254X%7B55X.png)\n当我们进行页面滚动的时候，fixed元素位置没有发生变化，可见：\n\n- fixed相对于浏览器窗口来定位，不管是否有static定位以外的父元素\n- absolute元素会随着页面的滚动而滚动，而fixed不会\n\n也就是说，fixed元素相对于浏览器窗口进行定位，而无有static定位以外的父元素的absolute，则相对于document进行定位\n\n## z-index\n-----\n### z-index简述\n- z-index属性定义了第三维度，默认为0\n- z-index属性设置元素的堆叠顺序，拥有更高堆叠顺序的元素总是会处于堆叠顺序较低的元素的前面\n- z-index只能在position属性值为relative或absolute或fixed的元素上有效\n-\n\n### z-index在同级元素下的效果\n如图，[查看页面效果](http://o9bc2k1st.bkt.clouddn.com/position-z-index-same-level.html)\n![image](http://o905ne85q.bkt.clouddn.com/%60X74TE9%7D%28OFY%7BUK$MAW%5B%7B5O.png)\n可见：\n- 当同级元素不设置z-index或者z-index相等时，后面的元素会叠在前面的元素上方\n- 当同级元素z-index不同时，z-index大的元素会叠在z-index小的元素上方\n\n### z-index在不同级元素下的效果\n如图，[查看页面效果](http://o9bc2k1st.bkt.clouddn.com/position-z-index-diff-level-1.html)\n![image](http://o905ne85q.bkt.clouddn.com/Q%7BFVVGE6NSP8WB~_3P7SZ$G.png)\n仔细看会发现个很有意思的现象，parent1和parent2为同级元素，parent2叠在parent1上方，但是parent2子元素却位于parent1子元素的下方。\nparent1和parent2的position均为relative，是不是有些难以理解？这是因为：\n- 当向上追溯找不到含有z-index值的父元素的情况下，则可以视为自由的z-index元素\n- 自由的z-index元素可以与其他自由的定位元素来比较z-index的值，决定其堆叠顺序\n\n在这里，parent1和parent2均无设置z-index值，故在这里子元素的堆叠顺序是由自己的z-index值决定的。\n接下来我们为两个parent均加上z-index，如图，[查看页面效果](http://o9bc2k1st.bkt.clouddn.com/position-z-index-diff-level-2.html)\n![image](http://o905ne85q.bkt.clouddn.com/PMVG4833%60U%29JC9%5BWK5W%601NC.png)\n\n经测试，在parent2的z-index大于或者等于parent1的z-index的时候，parent2以及它的子元素均位于parent1以及其子元素的上方。\n而当我们设置parent2的z-index小于parent1的z-index的时候，如图\n![image](http://o905ne85q.bkt.clouddn.com/@22C%5D%5D9~A7%28%29%5B%60LZLD@%29%7BRF.png)\n此时parent2以及它的子元素均位于parent1以及其子元素的下方。\n可见：\n- z-index值只决定同一父元素中的同级子元素的堆叠顺序\n- 父元素的z-index值为子元素定义了堆叠顺序，即子元素依赖于父元素z-index值来获得页面中的堆叠顺序\n\n现在我们将parent2的z-index值取消，留下parent1的z-index值为2。\n如图，[查看页面效果](http://o9bc2k1st.bkt.clouddn.com/position-z-index-diff-level-3.html)\n![image](http://o905ne85q.bkt.clouddn.com/G%5D6CTV7PXO%28UD7B%5B%7B%60%28U693.png)\n可见：\n- 自由的z-index元素可以与父元素的同级兄弟定位元素来比较z-index的值，决定其堆叠顺序\n\n### z-index与position: fixed\n当初一直认为fixed的元素有种优先级特别高的感觉，但在z-index比较上却有了新发现，如图\n![image](http://o905ne85q.bkt.clouddn.com/IN7X7L4FJ%5DYT%7DZPG~8_I%60@R.png)\n经测试，在不设置z-index值或者z-index值相等时，fixed元素和absolute元素堆叠顺序均由元素在文档中的先后位置决定，后出现的会在上面。\n接下来我们给这几个子元素加上z-index值，如图\n![image](http://o905ne85q.bkt.clouddn.com/FMC%60R%25%25LLKVM9OQ1~5~%29GQ3.png)\n这时候我们会有种想法，会不会fixed元素和absolute元素的堆叠规则一样呢？\n现在我们将fixed元素移到parent元素外面，且parent元素z-index值依然为空，如图，[查看页面效果](http://o9bc2k1st.bkt.clouddn.com/position-z-index-fixed.html)\n![image](http://o905ne85q.bkt.clouddn.com/A%284RG%7BTP~2$%29%29ZE5Y2HW%7BOD.png)\n可见：\n- 尽管fixed定位方式与absolute不一致，它们的堆叠规则是一致的\n\n### z-index总结\n- 无z-index或者z-index值相等时，堆叠顺序均由元素在文档中的先后位置决定，后出现的会在上面\n- 当向上追溯找不到含有z-index值的父元素的情况下，则可以视为自由的z-index元素\n- 自由的z-index元素可以与其他自由的定位元素或者父元素的同级兄弟定位元素来比较z-index的值，决定其堆叠顺序\n- z-index值只决定同一父元素中的同级子元素的堆叠顺序\n- 父元素的z-index值为子元素定义了堆叠顺序，即子元素依赖于父元素z-index值来获得页面中的堆叠顺序\n\n- 参考\n[浅析CSS——元素重叠及position定位的z-index顺序](http://www.cnblogs.com/mind/archive/2012/04/01/2198995.html)\n\n- 相关代码保存在[about-position](https://github.com/godbasin/godbasin.github.io/tree/blog-codes/about-position)\n\n## 结束语\n不得不说，写这篇文章的过程自己对position和z-index相关的原理和规则也熟悉了很多，总结也是一种学习的方式呢。\n\n","source":"_posts/about-position.md","raw":"---\ntitle: CSS的position和z-index有关\ndate: 2016-06-25 12:03:10\ncategories: CSS炒饭\ntags: 分享\n---\n今天刚好kk妹子问我关于position的一些问题，就打算整理一下，希望用比较清晰明了的方式解释一下CSS的position是怎么个玩法。\n顺便也进行一下z-index相关的说明。\n<!--more-->\n## CSS position属性\n-----\n### w3c的position\n这里借用[w3c](http://www.w3school.com.cn/cssref/pr_class_position.asp)上的说明\n- absolute\t\n  - 生成绝对定位的元素，相对于static定位以外的第一个父元素进行定位。\n  - 元素的位置通过\"left\", \"top\", \"right\"以及\"bottom\"属性进行规定。\n- fixed\t\n  - 生成绝对定位的元素，相对于浏览器窗口进行定位。\n  - 元素的位置通过\"left\", \"top\", \"right\"以及\"bottom\"属性进行规定。\n- relative\t\n  - 生成相对定位的元素，相对于其正常位置进行定位。\n  - 因此，\"left:20\"会向元素的 LEFT位置添加 20像素。\n- static\t\n  - 默认值。没有定位，元素出现在正常的流中（忽略top, bottom, left, right或者z-index声明）。\n- inherit\t\n  - 规定应该从父元素继承position属性的值。\n\n### 文档流\n- 什么是文档流\n相信大家刚开始接触position属性的时候，都会被“文档流”、“流”这样的概念给吓坏了。\n- 正常的文档流也叫普通流，在HTML里面的写法就是从上到下，从左到右的排版布局\n\n### static与文档流\n\n如图，[查看页面效果](http://o9bc2k1st.bkt.clouddn.com/position-static.html)\n``` css\na, p, div { border: solid 1px red; }\n.static { position: static; left: 100px; top: 100px; }\n```\n![image](http://o905ne85q.bkt.clouddn.com/53ETM3GNX7ZV65W%5DW~%28%7BZK3.png)\n可见，此时添加定位（left: 100px; top: 100px;）是无效的\n\n### relative与文档流\nrelative保持原有文档流，但相对本身的原始位置发生位移，且占空间\n如图，[查看页面效果](http://o9bc2k1st.bkt.clouddn.com/position-relative.html)\n``` css\na, p, div { border: solid 1px red; }\n.relative { position: relative; left: 100px; top: 100px; }\n```\n![image](http://o905ne85q.bkt.clouddn.com/PN1G~%5DQFF@E7AVRQJ9Z8%28JH.png)\n可见：\n- relative元素也遵循从上到下，从左到右的排版布局\n- relative相对于其正常位置进行定位，在这里设置了relative的元素相对其原本位置（position=static）进行位移\n- relative元素占有原本位置，因此下一个元素会排到该元素后方\n- relative元素占位不会随着定位的改变而改变。也就是说relative在文档流中占有的位置与其原本位置（position=static）相同\n这里有个需要注意的地方： 虽然relative元素占位与static相同，但会溢出父元素，撑开整个页面（document）。\n如图，[查看页面效果](http://o9bc2k1st.bkt.clouddn.com/position-relative-occupation.html)\n![image](http://o905ne85q.bkt.clouddn.com/LHRK4@9K$YE1%25KMB%29G9%60~%7B8.png)\n可以relative元素撑开父元素看到页面底部有滚动条。\n此时给父元素设置overflow: hidden;则可以隐藏溢出部分，如图\n![image](http://o905ne85q.bkt.clouddn.com/KGE~71FX8H7DW6VNYC1T00M.png)\n\n### absolute与文档流\nabsolute脱离文档流，相对于其包含块来定位，且不占位\n如图\n``` css\n.parent{ border: solid 1px blue; width: 300px; } \n.parent > div{ border: solid 1px red; height: 100px; width: 300px; } \n.absolute{ position: absolute; left: 100px; height: 100px; }\n```\n![image](http://o905ne85q.bkt.clouddn.com/75%5D1@NRTQ8$U9KTQ66SPL2A.png)\n可见：\n- absolute元素脱离文档流\n- absolute元素不占位，因此下一个符合普通流的元素会略过absolute元素排到其上一个元素的后方\n\n此时对于absolute元素的占位依然不大清晰，接下来我们给父元素添加margin-left: 200px的样式，如图\n![image](http://o905ne85q.bkt.clouddn.com/07J25Y0F~@O%5D@ZAGZ~%25%60%28%29Y.png)\n很明显，absolute元素位置没有发生改变，这是因为该元素相对于document进行定位。\n\n- absolute元素的定位是相对于static定位以外的第一个父元素进行定位\n- 当absolute的父元素position为static，则会继续往上查找，直到找到一个为relative/absolute/fixed的父元素作为定位参照物\n- 当absolute没有position为非static的父元素时，则会进行全局定位，即相对于文档document进行定位\n\n所以我们可以给父元素加上position=relative的样式，如图\n![image](http://o905ne85q.bkt.clouddn.com/~NPVE%7D%7DZFR3$PH%609%5DFJQF2Y.png)\n此时absolute元素则相对于父元素进行定位，[查看页面效果](http://o9bc2k1st.bkt.clouddn.com/position-absolute.html)。\n\n### 无定位的absolute\n在使用absolute进行定位时，若我们只是将元素设置为position: absolute，而不对其进行定位（top, bottom, left, right），会是怎样的情况呢？\n如图，[查看页面效果](http://o9bc2k1st.bkt.clouddn.com/position-absolute-without-position.html)\n![image](http://o905ne85q.bkt.clouddn.com/CG_14%7DVI%28TDCYFK%7BE$8SC%287.png)\n可见：\n- 未设置定位的absolute元素，其定位与其原本位置（position=static）相同\n- 此时absolute元素依然不占位，因此下一个符合普通流的元素会略过absolute元素排到其上一个元素的后方\n\n### fixed与文档流\nfixed脱离文档流，相对于浏览器窗口来定位，且不占位\n如图\n``` css\n.parent { border: solid 1px blue; width: 300px; } \n.parent > div { border: solid 1px red; height: 100px; width: 300px; } \n.fixed { position: fixed; left: 100px; top: 100px; background: yellow; }\n```\n![image](http://o905ne85q.bkt.clouddn.com/%28FNOAFPIA%5B80%25F%7D6%5B0CQ2%7DE.png)\n似乎跟相对于文档定位时的absolute元素没什么两样，即\n- fixed元素脱离文档流\n- fixed元素不占位\n\n接来下我们将页面填充满，如图，[查看页面效果](http://o9bc2k1st.bkt.clouddn.com/position-fixed-absolute.html)\n![image](http://o905ne85q.bkt.clouddn.com/K4OGL%5BF5~XP9NLRW%254X%7B55X.png)\n当我们进行页面滚动的时候，fixed元素位置没有发生变化，可见：\n\n- fixed相对于浏览器窗口来定位，不管是否有static定位以外的父元素\n- absolute元素会随着页面的滚动而滚动，而fixed不会\n\n也就是说，fixed元素相对于浏览器窗口进行定位，而无有static定位以外的父元素的absolute，则相对于document进行定位\n\n## z-index\n-----\n### z-index简述\n- z-index属性定义了第三维度，默认为0\n- z-index属性设置元素的堆叠顺序，拥有更高堆叠顺序的元素总是会处于堆叠顺序较低的元素的前面\n- z-index只能在position属性值为relative或absolute或fixed的元素上有效\n-\n\n### z-index在同级元素下的效果\n如图，[查看页面效果](http://o9bc2k1st.bkt.clouddn.com/position-z-index-same-level.html)\n![image](http://o905ne85q.bkt.clouddn.com/%60X74TE9%7D%28OFY%7BUK$MAW%5B%7B5O.png)\n可见：\n- 当同级元素不设置z-index或者z-index相等时，后面的元素会叠在前面的元素上方\n- 当同级元素z-index不同时，z-index大的元素会叠在z-index小的元素上方\n\n### z-index在不同级元素下的效果\n如图，[查看页面效果](http://o9bc2k1st.bkt.clouddn.com/position-z-index-diff-level-1.html)\n![image](http://o905ne85q.bkt.clouddn.com/Q%7BFVVGE6NSP8WB~_3P7SZ$G.png)\n仔细看会发现个很有意思的现象，parent1和parent2为同级元素，parent2叠在parent1上方，但是parent2子元素却位于parent1子元素的下方。\nparent1和parent2的position均为relative，是不是有些难以理解？这是因为：\n- 当向上追溯找不到含有z-index值的父元素的情况下，则可以视为自由的z-index元素\n- 自由的z-index元素可以与其他自由的定位元素来比较z-index的值，决定其堆叠顺序\n\n在这里，parent1和parent2均无设置z-index值，故在这里子元素的堆叠顺序是由自己的z-index值决定的。\n接下来我们为两个parent均加上z-index，如图，[查看页面效果](http://o9bc2k1st.bkt.clouddn.com/position-z-index-diff-level-2.html)\n![image](http://o905ne85q.bkt.clouddn.com/PMVG4833%60U%29JC9%5BWK5W%601NC.png)\n\n经测试，在parent2的z-index大于或者等于parent1的z-index的时候，parent2以及它的子元素均位于parent1以及其子元素的上方。\n而当我们设置parent2的z-index小于parent1的z-index的时候，如图\n![image](http://o905ne85q.bkt.clouddn.com/@22C%5D%5D9~A7%28%29%5B%60LZLD@%29%7BRF.png)\n此时parent2以及它的子元素均位于parent1以及其子元素的下方。\n可见：\n- z-index值只决定同一父元素中的同级子元素的堆叠顺序\n- 父元素的z-index值为子元素定义了堆叠顺序，即子元素依赖于父元素z-index值来获得页面中的堆叠顺序\n\n现在我们将parent2的z-index值取消，留下parent1的z-index值为2。\n如图，[查看页面效果](http://o9bc2k1st.bkt.clouddn.com/position-z-index-diff-level-3.html)\n![image](http://o905ne85q.bkt.clouddn.com/G%5D6CTV7PXO%28UD7B%5B%7B%60%28U693.png)\n可见：\n- 自由的z-index元素可以与父元素的同级兄弟定位元素来比较z-index的值，决定其堆叠顺序\n\n### z-index与position: fixed\n当初一直认为fixed的元素有种优先级特别高的感觉，但在z-index比较上却有了新发现，如图\n![image](http://o905ne85q.bkt.clouddn.com/IN7X7L4FJ%5DYT%7DZPG~8_I%60@R.png)\n经测试，在不设置z-index值或者z-index值相等时，fixed元素和absolute元素堆叠顺序均由元素在文档中的先后位置决定，后出现的会在上面。\n接下来我们给这几个子元素加上z-index值，如图\n![image](http://o905ne85q.bkt.clouddn.com/FMC%60R%25%25LLKVM9OQ1~5~%29GQ3.png)\n这时候我们会有种想法，会不会fixed元素和absolute元素的堆叠规则一样呢？\n现在我们将fixed元素移到parent元素外面，且parent元素z-index值依然为空，如图，[查看页面效果](http://o9bc2k1st.bkt.clouddn.com/position-z-index-fixed.html)\n![image](http://o905ne85q.bkt.clouddn.com/A%284RG%7BTP~2$%29%29ZE5Y2HW%7BOD.png)\n可见：\n- 尽管fixed定位方式与absolute不一致，它们的堆叠规则是一致的\n\n### z-index总结\n- 无z-index或者z-index值相等时，堆叠顺序均由元素在文档中的先后位置决定，后出现的会在上面\n- 当向上追溯找不到含有z-index值的父元素的情况下，则可以视为自由的z-index元素\n- 自由的z-index元素可以与其他自由的定位元素或者父元素的同级兄弟定位元素来比较z-index的值，决定其堆叠顺序\n- z-index值只决定同一父元素中的同级子元素的堆叠顺序\n- 父元素的z-index值为子元素定义了堆叠顺序，即子元素依赖于父元素z-index值来获得页面中的堆叠顺序\n\n- 参考\n[浅析CSS——元素重叠及position定位的z-index顺序](http://www.cnblogs.com/mind/archive/2012/04/01/2198995.html)\n\n- 相关代码保存在[about-position](https://github.com/godbasin/godbasin.github.io/tree/blog-codes/about-position)\n\n## 结束语\n不得不说，写这篇文章的过程自己对position和z-index相关的原理和规则也熟悉了很多，总结也是一种学习的方式呢。\n\n","slug":"about-position","published":1,"updated":"2016-08-20T10:54:21.034Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cix45hudt0000xotuoi3yw25t","content":"<p>今天刚好kk妹子问我关于position的一些问题，就打算整理一下，希望用比较清晰明了的方式解释一下CSS的position是怎么个玩法。<br>顺便也进行一下z-index相关的说明。<br><a id=\"more\"></a></p>\n<h2 id=\"CSS-position属性\"><a href=\"#CSS-position属性\" class=\"headerlink\" title=\"CSS position属性\"></a>CSS position属性</h2><hr>\n<h3 id=\"w3c的position\"><a href=\"#w3c的position\" class=\"headerlink\" title=\"w3c的position\"></a>w3c的position</h3><p>这里借用<a href=\"http://www.w3school.com.cn/cssref/pr_class_position.asp\" target=\"_blank\" rel=\"external\">w3c</a>上的说明</p>\n<ul>\n<li>absolute    <ul>\n<li>生成绝对定位的元素，相对于static定位以外的第一个父元素进行定位。</li>\n<li>元素的位置通过”left”, “top”, “right”以及”bottom”属性进行规定。</li>\n</ul>\n</li>\n<li>fixed    <ul>\n<li>生成绝对定位的元素，相对于浏览器窗口进行定位。</li>\n<li>元素的位置通过”left”, “top”, “right”以及”bottom”属性进行规定。</li>\n</ul>\n</li>\n<li>relative    <ul>\n<li>生成相对定位的元素，相对于其正常位置进行定位。</li>\n<li>因此，”left:20”会向元素的 LEFT位置添加 20像素。</li>\n</ul>\n</li>\n<li>static    <ul>\n<li>默认值。没有定位，元素出现在正常的流中（忽略top, bottom, left, right或者z-index声明）。</li>\n</ul>\n</li>\n<li>inherit    <ul>\n<li>规定应该从父元素继承position属性的值。</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"文档流\"><a href=\"#文档流\" class=\"headerlink\" title=\"文档流\"></a>文档流</h3><ul>\n<li>什么是文档流<br>相信大家刚开始接触position属性的时候，都会被“文档流”、“流”这样的概念给吓坏了。</li>\n<li>正常的文档流也叫普通流，在HTML里面的写法就是从上到下，从左到右的排版布局</li>\n</ul>\n<h3 id=\"static与文档流\"><a href=\"#static与文档流\" class=\"headerlink\" title=\"static与文档流\"></a>static与文档流</h3><p>如图，<a href=\"http://o9bc2k1st.bkt.clouddn.com/position-static.html\" target=\"_blank\" rel=\"external\">查看页面效果</a><br><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"selector-tag\">a</span>, <span class=\"selector-tag\">p</span>, <span class=\"selector-tag\">div</span> &#123; <span class=\"attribute\">border</span>: solid <span class=\"number\">1px</span> red; &#125;</div><div class=\"line\"><span class=\"selector-class\">.static</span> &#123; <span class=\"attribute\">position</span>: static; <span class=\"attribute\">left</span>: <span class=\"number\">100px</span>; <span class=\"attribute\">top</span>: <span class=\"number\">100px</span>; &#125;</div></pre></td></tr></table></figure></p>\n<p><img src=\"http://o905ne85q.bkt.clouddn.com/53ETM3GNX7ZV65W%5DW~%28%7BZK3.png\" alt=\"image\"><br>可见，此时添加定位（left: 100px; top: 100px;）是无效的</p>\n<h3 id=\"relative与文档流\"><a href=\"#relative与文档流\" class=\"headerlink\" title=\"relative与文档流\"></a>relative与文档流</h3><p>relative保持原有文档流，但相对本身的原始位置发生位移，且占空间<br>如图，<a href=\"http://o9bc2k1st.bkt.clouddn.com/position-relative.html\" target=\"_blank\" rel=\"external\">查看页面效果</a><br><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"selector-tag\">a</span>, <span class=\"selector-tag\">p</span>, <span class=\"selector-tag\">div</span> &#123; <span class=\"attribute\">border</span>: solid <span class=\"number\">1px</span> red; &#125;</div><div class=\"line\"><span class=\"selector-class\">.relative</span> &#123; <span class=\"attribute\">position</span>: relative; <span class=\"attribute\">left</span>: <span class=\"number\">100px</span>; <span class=\"attribute\">top</span>: <span class=\"number\">100px</span>; &#125;</div></pre></td></tr></table></figure></p>\n<p><img src=\"http://o905ne85q.bkt.clouddn.com/PN1G~%5DQFF@E7AVRQJ9Z8%28JH.png\" alt=\"image\"><br>可见：</p>\n<ul>\n<li>relative元素也遵循从上到下，从左到右的排版布局</li>\n<li>relative相对于其正常位置进行定位，在这里设置了relative的元素相对其原本位置（position=static）进行位移</li>\n<li>relative元素占有原本位置，因此下一个元素会排到该元素后方</li>\n<li>relative元素占位不会随着定位的改变而改变。也就是说relative在文档流中占有的位置与其原本位置（position=static）相同<br>这里有个需要注意的地方： 虽然relative元素占位与static相同，但会溢出父元素，撑开整个页面（document）。<br>如图，<a href=\"http://o9bc2k1st.bkt.clouddn.com/position-relative-occupation.html\" target=\"_blank\" rel=\"external\">查看页面效果</a><br><img src=\"http://o905ne85q.bkt.clouddn.com/LHRK4@9K$YE1%25KMB%29G9%60~%7B8.png\" alt=\"image\"><br>可以relative元素撑开父元素看到页面底部有滚动条。<br>此时给父元素设置overflow: hidden;则可以隐藏溢出部分，如图<br><img src=\"http://o905ne85q.bkt.clouddn.com/KGE~71FX8H7DW6VNYC1T00M.png\" alt=\"image\"></li>\n</ul>\n<h3 id=\"absolute与文档流\"><a href=\"#absolute与文档流\" class=\"headerlink\" title=\"absolute与文档流\"></a>absolute与文档流</h3><p>absolute脱离文档流，相对于其包含块来定位，且不占位<br>如图<br><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"selector-class\">.parent</span>&#123; <span class=\"attribute\">border</span>: solid <span class=\"number\">1px</span> blue; <span class=\"attribute\">width</span>: <span class=\"number\">300px</span>; &#125; </div><div class=\"line\"><span class=\"selector-class\">.parent</span> &gt; <span class=\"selector-tag\">div</span>&#123; <span class=\"attribute\">border</span>: solid <span class=\"number\">1px</span> red; <span class=\"attribute\">height</span>: <span class=\"number\">100px</span>; <span class=\"attribute\">width</span>: <span class=\"number\">300px</span>; &#125; </div><div class=\"line\"><span class=\"selector-class\">.absolute</span>&#123; <span class=\"attribute\">position</span>: absolute; <span class=\"attribute\">left</span>: <span class=\"number\">100px</span>; <span class=\"attribute\">height</span>: <span class=\"number\">100px</span>; &#125;</div></pre></td></tr></table></figure></p>\n<p><img src=\"http://o905ne85q.bkt.clouddn.com/75%5D1@NRTQ8$U9KTQ66SPL2A.png\" alt=\"image\"><br>可见：</p>\n<ul>\n<li>absolute元素脱离文档流</li>\n<li>absolute元素不占位，因此下一个符合普通流的元素会略过absolute元素排到其上一个元素的后方</li>\n</ul>\n<p>此时对于absolute元素的占位依然不大清晰，接下来我们给父元素添加margin-left: 200px的样式，如图<br><img src=\"http://o905ne85q.bkt.clouddn.com/07J25Y0F~@O%5D@ZAGZ~%25%60%28%29Y.png\" alt=\"image\"><br>很明显，absolute元素位置没有发生改变，这是因为该元素相对于document进行定位。</p>\n<ul>\n<li>absolute元素的定位是相对于static定位以外的第一个父元素进行定位</li>\n<li>当absolute的父元素position为static，则会继续往上查找，直到找到一个为relative/absolute/fixed的父元素作为定位参照物</li>\n<li>当absolute没有position为非static的父元素时，则会进行全局定位，即相对于文档document进行定位</li>\n</ul>\n<p>所以我们可以给父元素加上position=relative的样式，如图<br><img src=\"http://o905ne85q.bkt.clouddn.com/~NPVE%7D%7DZFR3$PH%609%5DFJQF2Y.png\" alt=\"image\"><br>此时absolute元素则相对于父元素进行定位，<a href=\"http://o9bc2k1st.bkt.clouddn.com/position-absolute.html\" target=\"_blank\" rel=\"external\">查看页面效果</a>。</p>\n<h3 id=\"无定位的absolute\"><a href=\"#无定位的absolute\" class=\"headerlink\" title=\"无定位的absolute\"></a>无定位的absolute</h3><p>在使用absolute进行定位时，若我们只是将元素设置为position: absolute，而不对其进行定位（top, bottom, left, right），会是怎样的情况呢？<br>如图，<a href=\"http://o9bc2k1st.bkt.clouddn.com/position-absolute-without-position.html\" target=\"_blank\" rel=\"external\">查看页面效果</a><br><img src=\"http://o905ne85q.bkt.clouddn.com/CG_14%7DVI%28TDCYFK%7BE$8SC%287.png\" alt=\"image\"><br>可见：</p>\n<ul>\n<li>未设置定位的absolute元素，其定位与其原本位置（position=static）相同</li>\n<li>此时absolute元素依然不占位，因此下一个符合普通流的元素会略过absolute元素排到其上一个元素的后方</li>\n</ul>\n<h3 id=\"fixed与文档流\"><a href=\"#fixed与文档流\" class=\"headerlink\" title=\"fixed与文档流\"></a>fixed与文档流</h3><p>fixed脱离文档流，相对于浏览器窗口来定位，且不占位<br>如图<br><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"selector-class\">.parent</span> &#123; <span class=\"attribute\">border</span>: solid <span class=\"number\">1px</span> blue; <span class=\"attribute\">width</span>: <span class=\"number\">300px</span>; &#125; </div><div class=\"line\"><span class=\"selector-class\">.parent</span> &gt; <span class=\"selector-tag\">div</span> &#123; <span class=\"attribute\">border</span>: solid <span class=\"number\">1px</span> red; <span class=\"attribute\">height</span>: <span class=\"number\">100px</span>; <span class=\"attribute\">width</span>: <span class=\"number\">300px</span>; &#125; </div><div class=\"line\"><span class=\"selector-class\">.fixed</span> &#123; <span class=\"attribute\">position</span>: fixed; <span class=\"attribute\">left</span>: <span class=\"number\">100px</span>; <span class=\"attribute\">top</span>: <span class=\"number\">100px</span>; <span class=\"attribute\">background</span>: yellow; &#125;</div></pre></td></tr></table></figure></p>\n<p><img src=\"http://o905ne85q.bkt.clouddn.com/%28FNOAFPIA%5B80%25F%7D6%5B0CQ2%7DE.png\" alt=\"image\"><br>似乎跟相对于文档定位时的absolute元素没什么两样，即</p>\n<ul>\n<li>fixed元素脱离文档流</li>\n<li>fixed元素不占位</li>\n</ul>\n<p>接来下我们将页面填充满，如图，<a href=\"http://o9bc2k1st.bkt.clouddn.com/position-fixed-absolute.html\" target=\"_blank\" rel=\"external\">查看页面效果</a><br><img src=\"http://o905ne85q.bkt.clouddn.com/K4OGL%5BF5~XP9NLRW%254X%7B55X.png\" alt=\"image\"><br>当我们进行页面滚动的时候，fixed元素位置没有发生变化，可见：</p>\n<ul>\n<li>fixed相对于浏览器窗口来定位，不管是否有static定位以外的父元素</li>\n<li>absolute元素会随着页面的滚动而滚动，而fixed不会</li>\n</ul>\n<p>也就是说，fixed元素相对于浏览器窗口进行定位，而无有static定位以外的父元素的absolute，则相对于document进行定位</p>\n<h2 id=\"z-index\"><a href=\"#z-index\" class=\"headerlink\" title=\"z-index\"></a>z-index</h2><hr>\n<h3 id=\"z-index简述\"><a href=\"#z-index简述\" class=\"headerlink\" title=\"z-index简述\"></a>z-index简述</h3><ul>\n<li>z-index属性定义了第三维度，默认为0</li>\n<li>z-index属性设置元素的堆叠顺序，拥有更高堆叠顺序的元素总是会处于堆叠顺序较低的元素的前面</li>\n<li>z-index只能在position属性值为relative或absolute或fixed的元素上有效<br>-</li>\n</ul>\n<h3 id=\"z-index在同级元素下的效果\"><a href=\"#z-index在同级元素下的效果\" class=\"headerlink\" title=\"z-index在同级元素下的效果\"></a>z-index在同级元素下的效果</h3><p>如图，<a href=\"http://o9bc2k1st.bkt.clouddn.com/position-z-index-same-level.html\" target=\"_blank\" rel=\"external\">查看页面效果</a><br><img src=\"http://o905ne85q.bkt.clouddn.com/%60X74TE9%7D%28OFY%7BUK$MAW%5B%7B5O.png\" alt=\"image\"><br>可见：</p>\n<ul>\n<li>当同级元素不设置z-index或者z-index相等时，后面的元素会叠在前面的元素上方</li>\n<li>当同级元素z-index不同时，z-index大的元素会叠在z-index小的元素上方</li>\n</ul>\n<h3 id=\"z-index在不同级元素下的效果\"><a href=\"#z-index在不同级元素下的效果\" class=\"headerlink\" title=\"z-index在不同级元素下的效果\"></a>z-index在不同级元素下的效果</h3><p>如图，<a href=\"http://o9bc2k1st.bkt.clouddn.com/position-z-index-diff-level-1.html\" target=\"_blank\" rel=\"external\">查看页面效果</a><br><img src=\"http://o905ne85q.bkt.clouddn.com/Q%7BFVVGE6NSP8WB~_3P7SZ$G.png\" alt=\"image\"><br>仔细看会发现个很有意思的现象，parent1和parent2为同级元素，parent2叠在parent1上方，但是parent2子元素却位于parent1子元素的下方。<br>parent1和parent2的position均为relative，是不是有些难以理解？这是因为：</p>\n<ul>\n<li>当向上追溯找不到含有z-index值的父元素的情况下，则可以视为自由的z-index元素</li>\n<li>自由的z-index元素可以与其他自由的定位元素来比较z-index的值，决定其堆叠顺序</li>\n</ul>\n<p>在这里，parent1和parent2均无设置z-index值，故在这里子元素的堆叠顺序是由自己的z-index值决定的。<br>接下来我们为两个parent均加上z-index，如图，<a href=\"http://o9bc2k1st.bkt.clouddn.com/position-z-index-diff-level-2.html\" target=\"_blank\" rel=\"external\">查看页面效果</a><br><img src=\"http://o905ne85q.bkt.clouddn.com/PMVG4833%60U%29JC9%5BWK5W%601NC.png\" alt=\"image\"></p>\n<p>经测试，在parent2的z-index大于或者等于parent1的z-index的时候，parent2以及它的子元素均位于parent1以及其子元素的上方。<br>而当我们设置parent2的z-index小于parent1的z-index的时候，如图<br><img src=\"http://o905ne85q.bkt.clouddn.com/@22C%5D%5D9~A7%28%29%5B%60LZLD@%29%7BRF.png\" alt=\"image\"><br>此时parent2以及它的子元素均位于parent1以及其子元素的下方。<br>可见：</p>\n<ul>\n<li>z-index值只决定同一父元素中的同级子元素的堆叠顺序</li>\n<li>父元素的z-index值为子元素定义了堆叠顺序，即子元素依赖于父元素z-index值来获得页面中的堆叠顺序</li>\n</ul>\n<p>现在我们将parent2的z-index值取消，留下parent1的z-index值为2。<br>如图，<a href=\"http://o9bc2k1st.bkt.clouddn.com/position-z-index-diff-level-3.html\" target=\"_blank\" rel=\"external\">查看页面效果</a><br><img src=\"http://o905ne85q.bkt.clouddn.com/G%5D6CTV7PXO%28UD7B%5B%7B%60%28U693.png\" alt=\"image\"><br>可见：</p>\n<ul>\n<li>自由的z-index元素可以与父元素的同级兄弟定位元素来比较z-index的值，决定其堆叠顺序</li>\n</ul>\n<h3 id=\"z-index与position-fixed\"><a href=\"#z-index与position-fixed\" class=\"headerlink\" title=\"z-index与position: fixed\"></a>z-index与position: fixed</h3><p>当初一直认为fixed的元素有种优先级特别高的感觉，但在z-index比较上却有了新发现，如图<br><img src=\"http://o905ne85q.bkt.clouddn.com/IN7X7L4FJ%5DYT%7DZPG~8_I%60@R.png\" alt=\"image\"><br>经测试，在不设置z-index值或者z-index值相等时，fixed元素和absolute元素堆叠顺序均由元素在文档中的先后位置决定，后出现的会在上面。<br>接下来我们给这几个子元素加上z-index值，如图<br><img src=\"http://o905ne85q.bkt.clouddn.com/FMC%60R%25%25LLKVM9OQ1~5~%29GQ3.png\" alt=\"image\"><br>这时候我们会有种想法，会不会fixed元素和absolute元素的堆叠规则一样呢？<br>现在我们将fixed元素移到parent元素外面，且parent元素z-index值依然为空，如图，<a href=\"http://o9bc2k1st.bkt.clouddn.com/position-z-index-fixed.html\" target=\"_blank\" rel=\"external\">查看页面效果</a><br><img src=\"http://o905ne85q.bkt.clouddn.com/A%284RG%7BTP~2$%29%29ZE5Y2HW%7BOD.png\" alt=\"image\"><br>可见：</p>\n<ul>\n<li>尽管fixed定位方式与absolute不一致，它们的堆叠规则是一致的</li>\n</ul>\n<h3 id=\"z-index总结\"><a href=\"#z-index总结\" class=\"headerlink\" title=\"z-index总结\"></a>z-index总结</h3><ul>\n<li>无z-index或者z-index值相等时，堆叠顺序均由元素在文档中的先后位置决定，后出现的会在上面</li>\n<li>当向上追溯找不到含有z-index值的父元素的情况下，则可以视为自由的z-index元素</li>\n<li>自由的z-index元素可以与其他自由的定位元素或者父元素的同级兄弟定位元素来比较z-index的值，决定其堆叠顺序</li>\n<li>z-index值只决定同一父元素中的同级子元素的堆叠顺序</li>\n<li><p>父元素的z-index值为子元素定义了堆叠顺序，即子元素依赖于父元素z-index值来获得页面中的堆叠顺序</p>\n</li>\n<li><p>参考<br><a href=\"http://www.cnblogs.com/mind/archive/2012/04/01/2198995.html\" target=\"_blank\" rel=\"external\">浅析CSS——元素重叠及position定位的z-index顺序</a></p>\n</li>\n<li><p>相关代码保存在<a href=\"https://github.com/godbasin/godbasin.github.io/tree/blog-codes/about-position\" target=\"_blank\" rel=\"external\">about-position</a></p>\n</li>\n</ul>\n<h2 id=\"结束语\"><a href=\"#结束语\" class=\"headerlink\" title=\"结束语\"></a>结束语</h2><p>不得不说，写这篇文章的过程自己对position和z-index相关的原理和规则也熟悉了很多，总结也是一种学习的方式呢。</p>\n","excerpt":"<p>今天刚好kk妹子问我关于position的一些问题，就打算整理一下，希望用比较清晰明了的方式解释一下CSS的position是怎么个玩法。<br>顺便也进行一下z-index相关的说明。<br>","more":"</p>\n<h2 id=\"CSS-position属性\"><a href=\"#CSS-position属性\" class=\"headerlink\" title=\"CSS position属性\"></a>CSS position属性</h2><hr>\n<h3 id=\"w3c的position\"><a href=\"#w3c的position\" class=\"headerlink\" title=\"w3c的position\"></a>w3c的position</h3><p>这里借用<a href=\"http://www.w3school.com.cn/cssref/pr_class_position.asp\">w3c</a>上的说明</p>\n<ul>\n<li>absolute    <ul>\n<li>生成绝对定位的元素，相对于static定位以外的第一个父元素进行定位。</li>\n<li>元素的位置通过”left”, “top”, “right”以及”bottom”属性进行规定。</li>\n</ul>\n</li>\n<li>fixed    <ul>\n<li>生成绝对定位的元素，相对于浏览器窗口进行定位。</li>\n<li>元素的位置通过”left”, “top”, “right”以及”bottom”属性进行规定。</li>\n</ul>\n</li>\n<li>relative    <ul>\n<li>生成相对定位的元素，相对于其正常位置进行定位。</li>\n<li>因此，”left:20”会向元素的 LEFT位置添加 20像素。</li>\n</ul>\n</li>\n<li>static    <ul>\n<li>默认值。没有定位，元素出现在正常的流中（忽略top, bottom, left, right或者z-index声明）。</li>\n</ul>\n</li>\n<li>inherit    <ul>\n<li>规定应该从父元素继承position属性的值。</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"文档流\"><a href=\"#文档流\" class=\"headerlink\" title=\"文档流\"></a>文档流</h3><ul>\n<li>什么是文档流<br>相信大家刚开始接触position属性的时候，都会被“文档流”、“流”这样的概念给吓坏了。</li>\n<li>正常的文档流也叫普通流，在HTML里面的写法就是从上到下，从左到右的排版布局</li>\n</ul>\n<h3 id=\"static与文档流\"><a href=\"#static与文档流\" class=\"headerlink\" title=\"static与文档流\"></a>static与文档流</h3><p>如图，<a href=\"http://o9bc2k1st.bkt.clouddn.com/position-static.html\">查看页面效果</a><br><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"selector-tag\">a</span>, <span class=\"selector-tag\">p</span>, <span class=\"selector-tag\">div</span> &#123; <span class=\"attribute\">border</span>: solid <span class=\"number\">1px</span> red; &#125;</div><div class=\"line\"><span class=\"selector-class\">.static</span> &#123; <span class=\"attribute\">position</span>: static; <span class=\"attribute\">left</span>: <span class=\"number\">100px</span>; <span class=\"attribute\">top</span>: <span class=\"number\">100px</span>; &#125;</div></pre></td></tr></table></figure></p>\n<p><img src=\"http://o905ne85q.bkt.clouddn.com/53ETM3GNX7ZV65W%5DW~%28%7BZK3.png\" alt=\"image\"><br>可见，此时添加定位（left: 100px; top: 100px;）是无效的</p>\n<h3 id=\"relative与文档流\"><a href=\"#relative与文档流\" class=\"headerlink\" title=\"relative与文档流\"></a>relative与文档流</h3><p>relative保持原有文档流，但相对本身的原始位置发生位移，且占空间<br>如图，<a href=\"http://o9bc2k1st.bkt.clouddn.com/position-relative.html\">查看页面效果</a><br><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"selector-tag\">a</span>, <span class=\"selector-tag\">p</span>, <span class=\"selector-tag\">div</span> &#123; <span class=\"attribute\">border</span>: solid <span class=\"number\">1px</span> red; &#125;</div><div class=\"line\"><span class=\"selector-class\">.relative</span> &#123; <span class=\"attribute\">position</span>: relative; <span class=\"attribute\">left</span>: <span class=\"number\">100px</span>; <span class=\"attribute\">top</span>: <span class=\"number\">100px</span>; &#125;</div></pre></td></tr></table></figure></p>\n<p><img src=\"http://o905ne85q.bkt.clouddn.com/PN1G~%5DQFF@E7AVRQJ9Z8%28JH.png\" alt=\"image\"><br>可见：</p>\n<ul>\n<li>relative元素也遵循从上到下，从左到右的排版布局</li>\n<li>relative相对于其正常位置进行定位，在这里设置了relative的元素相对其原本位置（position=static）进行位移</li>\n<li>relative元素占有原本位置，因此下一个元素会排到该元素后方</li>\n<li>relative元素占位不会随着定位的改变而改变。也就是说relative在文档流中占有的位置与其原本位置（position=static）相同<br>这里有个需要注意的地方： 虽然relative元素占位与static相同，但会溢出父元素，撑开整个页面（document）。<br>如图，<a href=\"http://o9bc2k1st.bkt.clouddn.com/position-relative-occupation.html\">查看页面效果</a><br><img src=\"http://o905ne85q.bkt.clouddn.com/LHRK4@9K$YE1%25KMB%29G9%60~%7B8.png\" alt=\"image\"><br>可以relative元素撑开父元素看到页面底部有滚动条。<br>此时给父元素设置overflow: hidden;则可以隐藏溢出部分，如图<br><img src=\"http://o905ne85q.bkt.clouddn.com/KGE~71FX8H7DW6VNYC1T00M.png\" alt=\"image\"></li>\n</ul>\n<h3 id=\"absolute与文档流\"><a href=\"#absolute与文档流\" class=\"headerlink\" title=\"absolute与文档流\"></a>absolute与文档流</h3><p>absolute脱离文档流，相对于其包含块来定位，且不占位<br>如图<br><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"selector-class\">.parent</span>&#123; <span class=\"attribute\">border</span>: solid <span class=\"number\">1px</span> blue; <span class=\"attribute\">width</span>: <span class=\"number\">300px</span>; &#125; </div><div class=\"line\"><span class=\"selector-class\">.parent</span> &gt; <span class=\"selector-tag\">div</span>&#123; <span class=\"attribute\">border</span>: solid <span class=\"number\">1px</span> red; <span class=\"attribute\">height</span>: <span class=\"number\">100px</span>; <span class=\"attribute\">width</span>: <span class=\"number\">300px</span>; &#125; </div><div class=\"line\"><span class=\"selector-class\">.absolute</span>&#123; <span class=\"attribute\">position</span>: absolute; <span class=\"attribute\">left</span>: <span class=\"number\">100px</span>; <span class=\"attribute\">height</span>: <span class=\"number\">100px</span>; &#125;</div></pre></td></tr></table></figure></p>\n<p><img src=\"http://o905ne85q.bkt.clouddn.com/75%5D1@NRTQ8$U9KTQ66SPL2A.png\" alt=\"image\"><br>可见：</p>\n<ul>\n<li>absolute元素脱离文档流</li>\n<li>absolute元素不占位，因此下一个符合普通流的元素会略过absolute元素排到其上一个元素的后方</li>\n</ul>\n<p>此时对于absolute元素的占位依然不大清晰，接下来我们给父元素添加margin-left: 200px的样式，如图<br><img src=\"http://o905ne85q.bkt.clouddn.com/07J25Y0F~@O%5D@ZAGZ~%25%60%28%29Y.png\" alt=\"image\"><br>很明显，absolute元素位置没有发生改变，这是因为该元素相对于document进行定位。</p>\n<ul>\n<li>absolute元素的定位是相对于static定位以外的第一个父元素进行定位</li>\n<li>当absolute的父元素position为static，则会继续往上查找，直到找到一个为relative/absolute/fixed的父元素作为定位参照物</li>\n<li>当absolute没有position为非static的父元素时，则会进行全局定位，即相对于文档document进行定位</li>\n</ul>\n<p>所以我们可以给父元素加上position=relative的样式，如图<br><img src=\"http://o905ne85q.bkt.clouddn.com/~NPVE%7D%7DZFR3$PH%609%5DFJQF2Y.png\" alt=\"image\"><br>此时absolute元素则相对于父元素进行定位，<a href=\"http://o9bc2k1st.bkt.clouddn.com/position-absolute.html\">查看页面效果</a>。</p>\n<h3 id=\"无定位的absolute\"><a href=\"#无定位的absolute\" class=\"headerlink\" title=\"无定位的absolute\"></a>无定位的absolute</h3><p>在使用absolute进行定位时，若我们只是将元素设置为position: absolute，而不对其进行定位（top, bottom, left, right），会是怎样的情况呢？<br>如图，<a href=\"http://o9bc2k1st.bkt.clouddn.com/position-absolute-without-position.html\">查看页面效果</a><br><img src=\"http://o905ne85q.bkt.clouddn.com/CG_14%7DVI%28TDCYFK%7BE$8SC%287.png\" alt=\"image\"><br>可见：</p>\n<ul>\n<li>未设置定位的absolute元素，其定位与其原本位置（position=static）相同</li>\n<li>此时absolute元素依然不占位，因此下一个符合普通流的元素会略过absolute元素排到其上一个元素的后方</li>\n</ul>\n<h3 id=\"fixed与文档流\"><a href=\"#fixed与文档流\" class=\"headerlink\" title=\"fixed与文档流\"></a>fixed与文档流</h3><p>fixed脱离文档流，相对于浏览器窗口来定位，且不占位<br>如图<br><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"selector-class\">.parent</span> &#123; <span class=\"attribute\">border</span>: solid <span class=\"number\">1px</span> blue; <span class=\"attribute\">width</span>: <span class=\"number\">300px</span>; &#125; </div><div class=\"line\"><span class=\"selector-class\">.parent</span> &gt; <span class=\"selector-tag\">div</span> &#123; <span class=\"attribute\">border</span>: solid <span class=\"number\">1px</span> red; <span class=\"attribute\">height</span>: <span class=\"number\">100px</span>; <span class=\"attribute\">width</span>: <span class=\"number\">300px</span>; &#125; </div><div class=\"line\"><span class=\"selector-class\">.fixed</span> &#123; <span class=\"attribute\">position</span>: fixed; <span class=\"attribute\">left</span>: <span class=\"number\">100px</span>; <span class=\"attribute\">top</span>: <span class=\"number\">100px</span>; <span class=\"attribute\">background</span>: yellow; &#125;</div></pre></td></tr></table></figure></p>\n<p><img src=\"http://o905ne85q.bkt.clouddn.com/%28FNOAFPIA%5B80%25F%7D6%5B0CQ2%7DE.png\" alt=\"image\"><br>似乎跟相对于文档定位时的absolute元素没什么两样，即</p>\n<ul>\n<li>fixed元素脱离文档流</li>\n<li>fixed元素不占位</li>\n</ul>\n<p>接来下我们将页面填充满，如图，<a href=\"http://o9bc2k1st.bkt.clouddn.com/position-fixed-absolute.html\">查看页面效果</a><br><img src=\"http://o905ne85q.bkt.clouddn.com/K4OGL%5BF5~XP9NLRW%254X%7B55X.png\" alt=\"image\"><br>当我们进行页面滚动的时候，fixed元素位置没有发生变化，可见：</p>\n<ul>\n<li>fixed相对于浏览器窗口来定位，不管是否有static定位以外的父元素</li>\n<li>absolute元素会随着页面的滚动而滚动，而fixed不会</li>\n</ul>\n<p>也就是说，fixed元素相对于浏览器窗口进行定位，而无有static定位以外的父元素的absolute，则相对于document进行定位</p>\n<h2 id=\"z-index\"><a href=\"#z-index\" class=\"headerlink\" title=\"z-index\"></a>z-index</h2><hr>\n<h3 id=\"z-index简述\"><a href=\"#z-index简述\" class=\"headerlink\" title=\"z-index简述\"></a>z-index简述</h3><ul>\n<li>z-index属性定义了第三维度，默认为0</li>\n<li>z-index属性设置元素的堆叠顺序，拥有更高堆叠顺序的元素总是会处于堆叠顺序较低的元素的前面</li>\n<li>z-index只能在position属性值为relative或absolute或fixed的元素上有效<br>-</li>\n</ul>\n<h3 id=\"z-index在同级元素下的效果\"><a href=\"#z-index在同级元素下的效果\" class=\"headerlink\" title=\"z-index在同级元素下的效果\"></a>z-index在同级元素下的效果</h3><p>如图，<a href=\"http://o9bc2k1st.bkt.clouddn.com/position-z-index-same-level.html\">查看页面效果</a><br><img src=\"http://o905ne85q.bkt.clouddn.com/%60X74TE9%7D%28OFY%7BUK$MAW%5B%7B5O.png\" alt=\"image\"><br>可见：</p>\n<ul>\n<li>当同级元素不设置z-index或者z-index相等时，后面的元素会叠在前面的元素上方</li>\n<li>当同级元素z-index不同时，z-index大的元素会叠在z-index小的元素上方</li>\n</ul>\n<h3 id=\"z-index在不同级元素下的效果\"><a href=\"#z-index在不同级元素下的效果\" class=\"headerlink\" title=\"z-index在不同级元素下的效果\"></a>z-index在不同级元素下的效果</h3><p>如图，<a href=\"http://o9bc2k1st.bkt.clouddn.com/position-z-index-diff-level-1.html\">查看页面效果</a><br><img src=\"http://o905ne85q.bkt.clouddn.com/Q%7BFVVGE6NSP8WB~_3P7SZ$G.png\" alt=\"image\"><br>仔细看会发现个很有意思的现象，parent1和parent2为同级元素，parent2叠在parent1上方，但是parent2子元素却位于parent1子元素的下方。<br>parent1和parent2的position均为relative，是不是有些难以理解？这是因为：</p>\n<ul>\n<li>当向上追溯找不到含有z-index值的父元素的情况下，则可以视为自由的z-index元素</li>\n<li>自由的z-index元素可以与其他自由的定位元素来比较z-index的值，决定其堆叠顺序</li>\n</ul>\n<p>在这里，parent1和parent2均无设置z-index值，故在这里子元素的堆叠顺序是由自己的z-index值决定的。<br>接下来我们为两个parent均加上z-index，如图，<a href=\"http://o9bc2k1st.bkt.clouddn.com/position-z-index-diff-level-2.html\">查看页面效果</a><br><img src=\"http://o905ne85q.bkt.clouddn.com/PMVG4833%60U%29JC9%5BWK5W%601NC.png\" alt=\"image\"></p>\n<p>经测试，在parent2的z-index大于或者等于parent1的z-index的时候，parent2以及它的子元素均位于parent1以及其子元素的上方。<br>而当我们设置parent2的z-index小于parent1的z-index的时候，如图<br><img src=\"http://o905ne85q.bkt.clouddn.com/@22C%5D%5D9~A7%28%29%5B%60LZLD@%29%7BRF.png\" alt=\"image\"><br>此时parent2以及它的子元素均位于parent1以及其子元素的下方。<br>可见：</p>\n<ul>\n<li>z-index值只决定同一父元素中的同级子元素的堆叠顺序</li>\n<li>父元素的z-index值为子元素定义了堆叠顺序，即子元素依赖于父元素z-index值来获得页面中的堆叠顺序</li>\n</ul>\n<p>现在我们将parent2的z-index值取消，留下parent1的z-index值为2。<br>如图，<a href=\"http://o9bc2k1st.bkt.clouddn.com/position-z-index-diff-level-3.html\">查看页面效果</a><br><img src=\"http://o905ne85q.bkt.clouddn.com/G%5D6CTV7PXO%28UD7B%5B%7B%60%28U693.png\" alt=\"image\"><br>可见：</p>\n<ul>\n<li>自由的z-index元素可以与父元素的同级兄弟定位元素来比较z-index的值，决定其堆叠顺序</li>\n</ul>\n<h3 id=\"z-index与position-fixed\"><a href=\"#z-index与position-fixed\" class=\"headerlink\" title=\"z-index与position: fixed\"></a>z-index与position: fixed</h3><p>当初一直认为fixed的元素有种优先级特别高的感觉，但在z-index比较上却有了新发现，如图<br><img src=\"http://o905ne85q.bkt.clouddn.com/IN7X7L4FJ%5DYT%7DZPG~8_I%60@R.png\" alt=\"image\"><br>经测试，在不设置z-index值或者z-index值相等时，fixed元素和absolute元素堆叠顺序均由元素在文档中的先后位置决定，后出现的会在上面。<br>接下来我们给这几个子元素加上z-index值，如图<br><img src=\"http://o905ne85q.bkt.clouddn.com/FMC%60R%25%25LLKVM9OQ1~5~%29GQ3.png\" alt=\"image\"><br>这时候我们会有种想法，会不会fixed元素和absolute元素的堆叠规则一样呢？<br>现在我们将fixed元素移到parent元素外面，且parent元素z-index值依然为空，如图，<a href=\"http://o9bc2k1st.bkt.clouddn.com/position-z-index-fixed.html\">查看页面效果</a><br><img src=\"http://o905ne85q.bkt.clouddn.com/A%284RG%7BTP~2$%29%29ZE5Y2HW%7BOD.png\" alt=\"image\"><br>可见：</p>\n<ul>\n<li>尽管fixed定位方式与absolute不一致，它们的堆叠规则是一致的</li>\n</ul>\n<h3 id=\"z-index总结\"><a href=\"#z-index总结\" class=\"headerlink\" title=\"z-index总结\"></a>z-index总结</h3><ul>\n<li>无z-index或者z-index值相等时，堆叠顺序均由元素在文档中的先后位置决定，后出现的会在上面</li>\n<li>当向上追溯找不到含有z-index值的父元素的情况下，则可以视为自由的z-index元素</li>\n<li>自由的z-index元素可以与其他自由的定位元素或者父元素的同级兄弟定位元素来比较z-index的值，决定其堆叠顺序</li>\n<li>z-index值只决定同一父元素中的同级子元素的堆叠顺序</li>\n<li><p>父元素的z-index值为子元素定义了堆叠顺序，即子元素依赖于父元素z-index值来获得页面中的堆叠顺序</p>\n</li>\n<li><p>参考<br><a href=\"http://www.cnblogs.com/mind/archive/2012/04/01/2198995.html\">浅析CSS——元素重叠及position定位的z-index顺序</a></p>\n</li>\n<li><p>相关代码保存在<a href=\"https://github.com/godbasin/godbasin.github.io/tree/blog-codes/about-position\">about-position</a></p>\n</li>\n</ul>\n<h2 id=\"结束语\"><a href=\"#结束语\" class=\"headerlink\" title=\"结束语\"></a>结束语</h2><p>不得不说，写这篇文章的过程自己对position和z-index相关的原理和规则也熟悉了很多，总结也是一种学习的方式呢。</p>"},{"title":"CSS的display有关","date":"2016-06-26T12:03:10.000Z","_content":"上一篇主要讲[CSS的position和z-index](https://godbasin.github.io/2016/06/25/about-position/)，刚好想到了display。\n本文主要讲述块状元素和内联元素的说明，并补充float浮动相关。\n<!--more-->\n## CSS display属性\n-----\n### w3c的display\n这里借用[w3c](http://www.w3school.com.cn/cssref/pr_class_display.asp)上的说明\n- display属性规定元素应该生成的框的类型\n- 这个属性用于定义建立布局时元素生成的显示框类型\n\n### 内联元素和块状元素\n- 内联元素\n  - 内联元素又称行内元素等，表示位于行内的元素\n  - 内联元素只能容纳文本或者其他内联元素，它允许其他内联元素与其位于同一行\n  - 内联元素的宽度高度不起作用\n- 块状元素\n  - 块状元素一般是其他元素的容器，可容纳内联元素和其他块状元素\n  - 块状元素排斥其他元素与其位于同一行\n  - 块状元素的宽度高度起作用\n\n## 常用的display属性\n-----\n### block：块状元素\n- 常见的默认display: block元素\n  - div/p/h1/h2...h6/ul/ol\n  - html5新元素: section/article/header/footer等\n\n- 可容纳其他块状元素或内联元素\n此时我们可以在block元素里添加其他块状元素和内联元素。\n常见的就是在div内添加div/p，在p内添加a/span等。\n``` html\n<div><p><a></a></p></div>\n```\n\n- 排斥其他元素与其位于同一行\n一个block元素占位一行，不管其宽度和高度多少，都不允许其他元素（包括内联元素和块状元素）与其位于同一行。\n此时若要使多个block位于同一行，可以选择使用float浮动。后续会讲到。\n\n- 宽度高度起作用\nblock元素可以设置宽度width和高度height，有效。\n\n### inline：内联元素\n- 常见的默认display: inline元素\n  - a/span/i/strong/sub等\n\n- 位于行内，即位于块状元素或者其他内联元素内\n此时我们可以将inline元素放置于块状元素或者其他内联元素内。\n常见的就是在p内添加a/span等。\n``` html\n<p><a></a><span></span></p>\n```\n\n- 只能容纳文本或者其他内联元素\n请注意，inline元素里面无法放置block元素，这也是为什么我们将div/p放在a内，在浏览器中却依然显示在外面的原因。\n此时若要在元素内放置块状元素，可以选择设置display为block。\n\n- 允许其他内联元素与其位于同一行\n\n- inline元素的宽度高度不起作用\n即使给inline元素设置了宽高，也是无效的，这也是个常见的失误。\n此时若要给元素设置宽高，可以选择设置display为block或者inline-block。\n\n### inline-block元素\n- 与inline元素相似的地方\n  - 位于行内，即位于块状元素或者其他内联元素内\n  - 允许其他内联元素与其位于同一行\n- 与block元素相似的地方\n  - 可容纳其他块状元素或内联元素\n  - 宽度高度起作用\n- 使用inline-block\n其实，使用inline-block可以很方便解决一些问题：\n  - 使元素居中\n    - 考虑下面情况，在块状元素parent内添加了另外一个块状元素child\n    - 可以将child设置display: inline-block，同时配合parent设置text-align: center，就可以设置child在parent内横向居中\n    - 此时将parent的height和line-height设置相等，就可以轻松实现child在parent内纵向居中啦\n    - 当然child元素设置margin: auto也是可以实现横向居中的\n  - inline元素a/span设置宽高\n    - 考虑下面情况，我们需要给多个a元素设置为宽高一致\n    - 由于a元素内文字长度可能不一样，若使用padding也达不到想要的效果\n    - 此时将a元素设置display: inline-block，然后就可以添加有效的width和height进行设置啦\n  - 将多个块状元素放在一行\n    - 考虑下面情况，我们需要将多个block块状元素放在一行\n    - 由于block元素占位一行，即使设置宽度很小，后面的元素也会出现在下一行\n    - 此时将块状元素设置display: inline-block，解决问题\n\n### 其他display属性\n- table/table-cell等\n以前table也常被用来解决元素纵向居中的问题。\n但table样式还会导致很多的问题，这里就不再一一赘述。\n- inherite\n规定应该从父元素继承 display 属性的值。\n\n## float浮动\n-----\n说到block元素，当然不能少了float浮动啦\n- float属性\n  - float属性定义元素在哪个方向浮动\n  - float属性可应用于图像，使文本围绕在图像周围\n\n这里我们又得拿起文档流来讲讲了。\n给元素的float属性赋值后，就是脱离文档流，进行左右浮动，紧贴着父元素的边框或者是上一个同级同浮动元素的边框。\n\n- float与block\n  - 设置float浮动的元素自动获取display: block样式\n  - 当一个元素浮动之后，不会影响到块级框的布局\n如图：\nHTML\n``` html\n<div>1</div>\n<div class=\"float\">2</div>\n<div class=\"float\">3</div>\n<div>4</div>\n<div>5</div>\n<div class=\"float\">6</div>\n```\nCSS\n``` css\ndiv { border: solid 1px red; width: 50px; height: 50px; } \n.float { float: left; }\n```\n![image](http://o905ne85q.bkt.clouddn.com/KSQKV%7D%253L%25Z6XE_C4FWXCRI.png)\n\n- float与inline-block\n  - 当一个元素浮动之后，会影响内联框（通常是文本）的排列和布局\n  - float浮动若未指明宽度会尽可能地窄，而inline-block元素会带来空白问题\n\n如图：\nCSS(给div添加display=inline-block)\n``` css\ndiv { border: solid 1px red; width: 50px; height: 50px; display: display: inline-block;} \n```\n![image](http://o905ne85q.bkt.clouddn.com/O1%297R8%7BZ%7DAH%25C0F%28U%25M%7D8XX.png)\n\n- float撑开父元素的方法\n本属于普通流中的元素浮动之后，包含框内部由于不存在其他普通流元素了，也就表现出高度为0（高度塌陷）\n相信使用float的童鞋们都遇到过父元素高度塌陷的问题，这是因为浮动元素不占位的问题引起的。本骚年用过的解决办法如下：\n  - 父元素使用overflow: hidden（此时高度为auto）\n  父元素overflow:hidden后，首先会计算height: auto的真实高度，由于其触发了BFC，需要包含子元素，所以高度不是0，而是子元素高度。\n    - 这里补充BFC的三个特性\n    - 1.BFC会阻止垂直外边距（margin-top、margin-bottom）折叠\n    - 2.BFC不会重叠浮动元素\n    - 3.BFC可以包含浮动\n  - 使父元素也成为浮动float元素\n  将父容器也改成浮动定位，这样它就可以带着子元素一起浮动了\n  - 使用clear清除浮动\n  在浮动元素后方加入clear: both的元素，就可以清除浮动撑开父元素\n    - 简述clear原理\n    - 在样式中添加clear:right，理解为不允许右边有浮动元素，由于上一个元素是浮动元素，因此该元素会自动下移一行来满足规则\n    - 添加clear:both，则可以清除左右两边的浮动了\n\n- 参考\n[《浮动从何而来 我们为何要清除浮动 清除浮动的原理是什么》](http://www.jb51.net/css/67471.html) \n\n## 结束语\n虽然说这些很简单也很基础的东西，但对于写页面的时候解决各种不明bug和现象很有帮助的哦。","source":"_posts/about-display.md","raw":"---\ntitle: CSS的display有关\ndate: 2016-06-26 20:03:10\ncategories: CSS炒饭\ntags: 分享\n---\n上一篇主要讲[CSS的position和z-index](https://godbasin.github.io/2016/06/25/about-position/)，刚好想到了display。\n本文主要讲述块状元素和内联元素的说明，并补充float浮动相关。\n<!--more-->\n## CSS display属性\n-----\n### w3c的display\n这里借用[w3c](http://www.w3school.com.cn/cssref/pr_class_display.asp)上的说明\n- display属性规定元素应该生成的框的类型\n- 这个属性用于定义建立布局时元素生成的显示框类型\n\n### 内联元素和块状元素\n- 内联元素\n  - 内联元素又称行内元素等，表示位于行内的元素\n  - 内联元素只能容纳文本或者其他内联元素，它允许其他内联元素与其位于同一行\n  - 内联元素的宽度高度不起作用\n- 块状元素\n  - 块状元素一般是其他元素的容器，可容纳内联元素和其他块状元素\n  - 块状元素排斥其他元素与其位于同一行\n  - 块状元素的宽度高度起作用\n\n## 常用的display属性\n-----\n### block：块状元素\n- 常见的默认display: block元素\n  - div/p/h1/h2...h6/ul/ol\n  - html5新元素: section/article/header/footer等\n\n- 可容纳其他块状元素或内联元素\n此时我们可以在block元素里添加其他块状元素和内联元素。\n常见的就是在div内添加div/p，在p内添加a/span等。\n``` html\n<div><p><a></a></p></div>\n```\n\n- 排斥其他元素与其位于同一行\n一个block元素占位一行，不管其宽度和高度多少，都不允许其他元素（包括内联元素和块状元素）与其位于同一行。\n此时若要使多个block位于同一行，可以选择使用float浮动。后续会讲到。\n\n- 宽度高度起作用\nblock元素可以设置宽度width和高度height，有效。\n\n### inline：内联元素\n- 常见的默认display: inline元素\n  - a/span/i/strong/sub等\n\n- 位于行内，即位于块状元素或者其他内联元素内\n此时我们可以将inline元素放置于块状元素或者其他内联元素内。\n常见的就是在p内添加a/span等。\n``` html\n<p><a></a><span></span></p>\n```\n\n- 只能容纳文本或者其他内联元素\n请注意，inline元素里面无法放置block元素，这也是为什么我们将div/p放在a内，在浏览器中却依然显示在外面的原因。\n此时若要在元素内放置块状元素，可以选择设置display为block。\n\n- 允许其他内联元素与其位于同一行\n\n- inline元素的宽度高度不起作用\n即使给inline元素设置了宽高，也是无效的，这也是个常见的失误。\n此时若要给元素设置宽高，可以选择设置display为block或者inline-block。\n\n### inline-block元素\n- 与inline元素相似的地方\n  - 位于行内，即位于块状元素或者其他内联元素内\n  - 允许其他内联元素与其位于同一行\n- 与block元素相似的地方\n  - 可容纳其他块状元素或内联元素\n  - 宽度高度起作用\n- 使用inline-block\n其实，使用inline-block可以很方便解决一些问题：\n  - 使元素居中\n    - 考虑下面情况，在块状元素parent内添加了另外一个块状元素child\n    - 可以将child设置display: inline-block，同时配合parent设置text-align: center，就可以设置child在parent内横向居中\n    - 此时将parent的height和line-height设置相等，就可以轻松实现child在parent内纵向居中啦\n    - 当然child元素设置margin: auto也是可以实现横向居中的\n  - inline元素a/span设置宽高\n    - 考虑下面情况，我们需要给多个a元素设置为宽高一致\n    - 由于a元素内文字长度可能不一样，若使用padding也达不到想要的效果\n    - 此时将a元素设置display: inline-block，然后就可以添加有效的width和height进行设置啦\n  - 将多个块状元素放在一行\n    - 考虑下面情况，我们需要将多个block块状元素放在一行\n    - 由于block元素占位一行，即使设置宽度很小，后面的元素也会出现在下一行\n    - 此时将块状元素设置display: inline-block，解决问题\n\n### 其他display属性\n- table/table-cell等\n以前table也常被用来解决元素纵向居中的问题。\n但table样式还会导致很多的问题，这里就不再一一赘述。\n- inherite\n规定应该从父元素继承 display 属性的值。\n\n## float浮动\n-----\n说到block元素，当然不能少了float浮动啦\n- float属性\n  - float属性定义元素在哪个方向浮动\n  - float属性可应用于图像，使文本围绕在图像周围\n\n这里我们又得拿起文档流来讲讲了。\n给元素的float属性赋值后，就是脱离文档流，进行左右浮动，紧贴着父元素的边框或者是上一个同级同浮动元素的边框。\n\n- float与block\n  - 设置float浮动的元素自动获取display: block样式\n  - 当一个元素浮动之后，不会影响到块级框的布局\n如图：\nHTML\n``` html\n<div>1</div>\n<div class=\"float\">2</div>\n<div class=\"float\">3</div>\n<div>4</div>\n<div>5</div>\n<div class=\"float\">6</div>\n```\nCSS\n``` css\ndiv { border: solid 1px red; width: 50px; height: 50px; } \n.float { float: left; }\n```\n![image](http://o905ne85q.bkt.clouddn.com/KSQKV%7D%253L%25Z6XE_C4FWXCRI.png)\n\n- float与inline-block\n  - 当一个元素浮动之后，会影响内联框（通常是文本）的排列和布局\n  - float浮动若未指明宽度会尽可能地窄，而inline-block元素会带来空白问题\n\n如图：\nCSS(给div添加display=inline-block)\n``` css\ndiv { border: solid 1px red; width: 50px; height: 50px; display: display: inline-block;} \n```\n![image](http://o905ne85q.bkt.clouddn.com/O1%297R8%7BZ%7DAH%25C0F%28U%25M%7D8XX.png)\n\n- float撑开父元素的方法\n本属于普通流中的元素浮动之后，包含框内部由于不存在其他普通流元素了，也就表现出高度为0（高度塌陷）\n相信使用float的童鞋们都遇到过父元素高度塌陷的问题，这是因为浮动元素不占位的问题引起的。本骚年用过的解决办法如下：\n  - 父元素使用overflow: hidden（此时高度为auto）\n  父元素overflow:hidden后，首先会计算height: auto的真实高度，由于其触发了BFC，需要包含子元素，所以高度不是0，而是子元素高度。\n    - 这里补充BFC的三个特性\n    - 1.BFC会阻止垂直外边距（margin-top、margin-bottom）折叠\n    - 2.BFC不会重叠浮动元素\n    - 3.BFC可以包含浮动\n  - 使父元素也成为浮动float元素\n  将父容器也改成浮动定位，这样它就可以带着子元素一起浮动了\n  - 使用clear清除浮动\n  在浮动元素后方加入clear: both的元素，就可以清除浮动撑开父元素\n    - 简述clear原理\n    - 在样式中添加clear:right，理解为不允许右边有浮动元素，由于上一个元素是浮动元素，因此该元素会自动下移一行来满足规则\n    - 添加clear:both，则可以清除左右两边的浮动了\n\n- 参考\n[《浮动从何而来 我们为何要清除浮动 清除浮动的原理是什么》](http://www.jb51.net/css/67471.html) \n\n## 结束语\n虽然说这些很简单也很基础的东西，但对于写页面的时候解决各种不明bug和现象很有帮助的哦。","slug":"about-display","published":1,"updated":"2016-08-20T10:54:21.031Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cix45hudy0001xotus3fg1u9k","content":"<p>上一篇主要讲<a href=\"https://godbasin.github.io/2016/06/25/about-position/\">CSS的position和z-index</a>，刚好想到了display。<br>本文主要讲述块状元素和内联元素的说明，并补充float浮动相关。<br><a id=\"more\"></a></p>\n<h2 id=\"CSS-display属性\"><a href=\"#CSS-display属性\" class=\"headerlink\" title=\"CSS display属性\"></a>CSS display属性</h2><hr>\n<h3 id=\"w3c的display\"><a href=\"#w3c的display\" class=\"headerlink\" title=\"w3c的display\"></a>w3c的display</h3><p>这里借用<a href=\"http://www.w3school.com.cn/cssref/pr_class_display.asp\" target=\"_blank\" rel=\"external\">w3c</a>上的说明</p>\n<ul>\n<li>display属性规定元素应该生成的框的类型</li>\n<li>这个属性用于定义建立布局时元素生成的显示框类型</li>\n</ul>\n<h3 id=\"内联元素和块状元素\"><a href=\"#内联元素和块状元素\" class=\"headerlink\" title=\"内联元素和块状元素\"></a>内联元素和块状元素</h3><ul>\n<li>内联元素<ul>\n<li>内联元素又称行内元素等，表示位于行内的元素</li>\n<li>内联元素只能容纳文本或者其他内联元素，它允许其他内联元素与其位于同一行</li>\n<li>内联元素的宽度高度不起作用</li>\n</ul>\n</li>\n<li>块状元素<ul>\n<li>块状元素一般是其他元素的容器，可容纳内联元素和其他块状元素</li>\n<li>块状元素排斥其他元素与其位于同一行</li>\n<li>块状元素的宽度高度起作用</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"常用的display属性\"><a href=\"#常用的display属性\" class=\"headerlink\" title=\"常用的display属性\"></a>常用的display属性</h2><hr>\n<h3 id=\"block：块状元素\"><a href=\"#block：块状元素\" class=\"headerlink\" title=\"block：块状元素\"></a>block：块状元素</h3><ul>\n<li><p>常见的默认display: block元素</p>\n<ul>\n<li>div/p/h1/h2…h6/ul/ol</li>\n<li>html5新元素: section/article/header/footer等</li>\n</ul>\n</li>\n<li><p>可容纳其他块状元素或内联元素<br>此时我们可以在block元素里添加其他块状元素和内联元素。<br>常见的就是在div内添加div/p，在p内添加a/span等。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">a</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div></pre></td></tr></table></figure>\n</li>\n<li><p>排斥其他元素与其位于同一行<br>一个block元素占位一行，不管其宽度和高度多少，都不允许其他元素（包括内联元素和块状元素）与其位于同一行。<br>此时若要使多个block位于同一行，可以选择使用float浮动。后续会讲到。</p>\n</li>\n<li><p>宽度高度起作用<br>block元素可以设置宽度width和高度height，有效。</p>\n</li>\n</ul>\n<h3 id=\"inline：内联元素\"><a href=\"#inline：内联元素\" class=\"headerlink\" title=\"inline：内联元素\"></a>inline：内联元素</h3><ul>\n<li><p>常见的默认display: inline元素</p>\n<ul>\n<li>a/span/i/strong/sub等</li>\n</ul>\n</li>\n<li><p>位于行内，即位于块状元素或者其他内联元素内<br>此时我们可以将inline元素放置于块状元素或者其他内联元素内。<br>常见的就是在p内添加a/span等。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">a</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">span</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></div></pre></td></tr></table></figure>\n</li>\n<li><p>只能容纳文本或者其他内联元素<br>请注意，inline元素里面无法放置block元素，这也是为什么我们将div/p放在a内，在浏览器中却依然显示在外面的原因。<br>此时若要在元素内放置块状元素，可以选择设置display为block。</p>\n</li>\n<li><p>允许其他内联元素与其位于同一行</p>\n</li>\n<li><p>inline元素的宽度高度不起作用<br>即使给inline元素设置了宽高，也是无效的，这也是个常见的失误。<br>此时若要给元素设置宽高，可以选择设置display为block或者inline-block。</p>\n</li>\n</ul>\n<h3 id=\"inline-block元素\"><a href=\"#inline-block元素\" class=\"headerlink\" title=\"inline-block元素\"></a>inline-block元素</h3><ul>\n<li>与inline元素相似的地方<ul>\n<li>位于行内，即位于块状元素或者其他内联元素内</li>\n<li>允许其他内联元素与其位于同一行</li>\n</ul>\n</li>\n<li>与block元素相似的地方<ul>\n<li>可容纳其他块状元素或内联元素</li>\n<li>宽度高度起作用</li>\n</ul>\n</li>\n<li>使用inline-block<br>其实，使用inline-block可以很方便解决一些问题：<ul>\n<li>使元素居中<ul>\n<li>考虑下面情况，在块状元素parent内添加了另外一个块状元素child</li>\n<li>可以将child设置display: inline-block，同时配合parent设置text-align: center，就可以设置child在parent内横向居中</li>\n<li>此时将parent的height和line-height设置相等，就可以轻松实现child在parent内纵向居中啦</li>\n<li>当然child元素设置margin: auto也是可以实现横向居中的</li>\n</ul>\n</li>\n<li>inline元素a/span设置宽高<ul>\n<li>考虑下面情况，我们需要给多个a元素设置为宽高一致</li>\n<li>由于a元素内文字长度可能不一样，若使用padding也达不到想要的效果</li>\n<li>此时将a元素设置display: inline-block，然后就可以添加有效的width和height进行设置啦</li>\n</ul>\n</li>\n<li>将多个块状元素放在一行<ul>\n<li>考虑下面情况，我们需要将多个block块状元素放在一行</li>\n<li>由于block元素占位一行，即使设置宽度很小，后面的元素也会出现在下一行</li>\n<li>此时将块状元素设置display: inline-block，解决问题</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"其他display属性\"><a href=\"#其他display属性\" class=\"headerlink\" title=\"其他display属性\"></a>其他display属性</h3><ul>\n<li>table/table-cell等<br>以前table也常被用来解决元素纵向居中的问题。<br>但table样式还会导致很多的问题，这里就不再一一赘述。</li>\n<li>inherite<br>规定应该从父元素继承 display 属性的值。</li>\n</ul>\n<h2 id=\"float浮动\"><a href=\"#float浮动\" class=\"headerlink\" title=\"float浮动\"></a>float浮动</h2><hr>\n<p>说到block元素，当然不能少了float浮动啦</p>\n<ul>\n<li>float属性<ul>\n<li>float属性定义元素在哪个方向浮动</li>\n<li>float属性可应用于图像，使文本围绕在图像周围</li>\n</ul>\n</li>\n</ul>\n<p>这里我们又得拿起文档流来讲讲了。<br>给元素的float属性赋值后，就是脱离文档流，进行左右浮动，紧贴着父元素的边框或者是上一个同级同浮动元素的边框。</p>\n<ul>\n<li>float与block<ul>\n<li>设置float浮动的元素自动获取display: block样式</li>\n<li>当一个元素浮动之后，不会影响到块级框的布局<br>如图：<br>HTML<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span>1<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"float\"</span>&gt;</span>2<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"float\"</span>&gt;</span>3<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span>4<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span>5<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"float\"</span>&gt;</span>6<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n</ul>\n<p>CSS<br><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"selector-tag\">div</span> &#123; <span class=\"attribute\">border</span>: solid <span class=\"number\">1px</span> red; <span class=\"attribute\">width</span>: <span class=\"number\">50px</span>; <span class=\"attribute\">height</span>: <span class=\"number\">50px</span>; &#125; </div><div class=\"line\"><span class=\"selector-class\">.float</span> &#123; <span class=\"attribute\">float</span>: left; &#125;</div></pre></td></tr></table></figure></p>\n<p><img src=\"http://o905ne85q.bkt.clouddn.com/KSQKV%7D%253L%25Z6XE_C4FWXCRI.png\" alt=\"image\"></p>\n<ul>\n<li>float与inline-block<ul>\n<li>当一个元素浮动之后，会影响内联框（通常是文本）的排列和布局</li>\n<li>float浮动若未指明宽度会尽可能地窄，而inline-block元素会带来空白问题</li>\n</ul>\n</li>\n</ul>\n<p>如图：<br>CSS(给div添加display=inline-block)<br><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"selector-tag\">div</span> &#123; <span class=\"attribute\">border</span>: solid <span class=\"number\">1px</span> red; <span class=\"attribute\">width</span>: <span class=\"number\">50px</span>; <span class=\"attribute\">height</span>: <span class=\"number\">50px</span>; <span class=\"attribute\">display</span>: display: inline-block;&#125;</div></pre></td></tr></table></figure></p>\n<p><img src=\"http://o905ne85q.bkt.clouddn.com/O1%297R8%7BZ%7DAH%25C0F%28U%25M%7D8XX.png\" alt=\"image\"></p>\n<ul>\n<li><p>float撑开父元素的方法<br>本属于普通流中的元素浮动之后，包含框内部由于不存在其他普通流元素了，也就表现出高度为0（高度塌陷）<br>相信使用float的童鞋们都遇到过父元素高度塌陷的问题，这是因为浮动元素不占位的问题引起的。本骚年用过的解决办法如下：</p>\n<ul>\n<li>父元素使用overflow: hidden（此时高度为auto）<br>父元素overflow:hidden后，首先会计算height: auto的真实高度，由于其触发了BFC，需要包含子元素，所以高度不是0，而是子元素高度。<ul>\n<li>这里补充BFC的三个特性</li>\n<li>1.BFC会阻止垂直外边距（margin-top、margin-bottom）折叠</li>\n<li>2.BFC不会重叠浮动元素</li>\n<li>3.BFC可以包含浮动</li>\n</ul>\n</li>\n<li>使父元素也成为浮动float元素<br>将父容器也改成浮动定位，这样它就可以带着子元素一起浮动了</li>\n<li>使用clear清除浮动<br>在浮动元素后方加入clear: both的元素，就可以清除浮动撑开父元素<ul>\n<li>简述clear原理</li>\n<li>在样式中添加clear:right，理解为不允许右边有浮动元素，由于上一个元素是浮动元素，因此该元素会自动下移一行来满足规则</li>\n<li>添加clear:both，则可以清除左右两边的浮动了</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>参考<br><a href=\"http://www.jb51.net/css/67471.html\" target=\"_blank\" rel=\"external\">《浮动从何而来 我们为何要清除浮动 清除浮动的原理是什么》</a> </p>\n</li>\n</ul>\n<h2 id=\"结束语\"><a href=\"#结束语\" class=\"headerlink\" title=\"结束语\"></a>结束语</h2><p>虽然说这些很简单也很基础的东西，但对于写页面的时候解决各种不明bug和现象很有帮助的哦。</p>\n","excerpt":"<p>上一篇主要讲<a href=\"https://godbasin.github.io/2016/06/25/about-position/\">CSS的position和z-index</a>，刚好想到了display。<br>本文主要讲述块状元素和内联元素的说明，并补充float浮动相关。<br>","more":"</p>\n<h2 id=\"CSS-display属性\"><a href=\"#CSS-display属性\" class=\"headerlink\" title=\"CSS display属性\"></a>CSS display属性</h2><hr>\n<h3 id=\"w3c的display\"><a href=\"#w3c的display\" class=\"headerlink\" title=\"w3c的display\"></a>w3c的display</h3><p>这里借用<a href=\"http://www.w3school.com.cn/cssref/pr_class_display.asp\">w3c</a>上的说明</p>\n<ul>\n<li>display属性规定元素应该生成的框的类型</li>\n<li>这个属性用于定义建立布局时元素生成的显示框类型</li>\n</ul>\n<h3 id=\"内联元素和块状元素\"><a href=\"#内联元素和块状元素\" class=\"headerlink\" title=\"内联元素和块状元素\"></a>内联元素和块状元素</h3><ul>\n<li>内联元素<ul>\n<li>内联元素又称行内元素等，表示位于行内的元素</li>\n<li>内联元素只能容纳文本或者其他内联元素，它允许其他内联元素与其位于同一行</li>\n<li>内联元素的宽度高度不起作用</li>\n</ul>\n</li>\n<li>块状元素<ul>\n<li>块状元素一般是其他元素的容器，可容纳内联元素和其他块状元素</li>\n<li>块状元素排斥其他元素与其位于同一行</li>\n<li>块状元素的宽度高度起作用</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"常用的display属性\"><a href=\"#常用的display属性\" class=\"headerlink\" title=\"常用的display属性\"></a>常用的display属性</h2><hr>\n<h3 id=\"block：块状元素\"><a href=\"#block：块状元素\" class=\"headerlink\" title=\"block：块状元素\"></a>block：块状元素</h3><ul>\n<li><p>常见的默认display: block元素</p>\n<ul>\n<li>div/p/h1/h2…h6/ul/ol</li>\n<li>html5新元素: section/article/header/footer等</li>\n</ul>\n</li>\n<li><p>可容纳其他块状元素或内联元素<br>此时我们可以在block元素里添加其他块状元素和内联元素。<br>常见的就是在div内添加div/p，在p内添加a/span等。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">a</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div></pre></td></tr></table></figure>\n</li>\n<li><p>排斥其他元素与其位于同一行<br>一个block元素占位一行，不管其宽度和高度多少，都不允许其他元素（包括内联元素和块状元素）与其位于同一行。<br>此时若要使多个block位于同一行，可以选择使用float浮动。后续会讲到。</p>\n</li>\n<li><p>宽度高度起作用<br>block元素可以设置宽度width和高度height，有效。</p>\n</li>\n</ul>\n<h3 id=\"inline：内联元素\"><a href=\"#inline：内联元素\" class=\"headerlink\" title=\"inline：内联元素\"></a>inline：内联元素</h3><ul>\n<li><p>常见的默认display: inline元素</p>\n<ul>\n<li>a/span/i/strong/sub等</li>\n</ul>\n</li>\n<li><p>位于行内，即位于块状元素或者其他内联元素内<br>此时我们可以将inline元素放置于块状元素或者其他内联元素内。<br>常见的就是在p内添加a/span等。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">a</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">span</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></div></pre></td></tr></table></figure>\n</li>\n<li><p>只能容纳文本或者其他内联元素<br>请注意，inline元素里面无法放置block元素，这也是为什么我们将div/p放在a内，在浏览器中却依然显示在外面的原因。<br>此时若要在元素内放置块状元素，可以选择设置display为block。</p>\n</li>\n<li><p>允许其他内联元素与其位于同一行</p>\n</li>\n<li><p>inline元素的宽度高度不起作用<br>即使给inline元素设置了宽高，也是无效的，这也是个常见的失误。<br>此时若要给元素设置宽高，可以选择设置display为block或者inline-block。</p>\n</li>\n</ul>\n<h3 id=\"inline-block元素\"><a href=\"#inline-block元素\" class=\"headerlink\" title=\"inline-block元素\"></a>inline-block元素</h3><ul>\n<li>与inline元素相似的地方<ul>\n<li>位于行内，即位于块状元素或者其他内联元素内</li>\n<li>允许其他内联元素与其位于同一行</li>\n</ul>\n</li>\n<li>与block元素相似的地方<ul>\n<li>可容纳其他块状元素或内联元素</li>\n<li>宽度高度起作用</li>\n</ul>\n</li>\n<li>使用inline-block<br>其实，使用inline-block可以很方便解决一些问题：<ul>\n<li>使元素居中<ul>\n<li>考虑下面情况，在块状元素parent内添加了另外一个块状元素child</li>\n<li>可以将child设置display: inline-block，同时配合parent设置text-align: center，就可以设置child在parent内横向居中</li>\n<li>此时将parent的height和line-height设置相等，就可以轻松实现child在parent内纵向居中啦</li>\n<li>当然child元素设置margin: auto也是可以实现横向居中的</li>\n</ul>\n</li>\n<li>inline元素a/span设置宽高<ul>\n<li>考虑下面情况，我们需要给多个a元素设置为宽高一致</li>\n<li>由于a元素内文字长度可能不一样，若使用padding也达不到想要的效果</li>\n<li>此时将a元素设置display: inline-block，然后就可以添加有效的width和height进行设置啦</li>\n</ul>\n</li>\n<li>将多个块状元素放在一行<ul>\n<li>考虑下面情况，我们需要将多个block块状元素放在一行</li>\n<li>由于block元素占位一行，即使设置宽度很小，后面的元素也会出现在下一行</li>\n<li>此时将块状元素设置display: inline-block，解决问题</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"其他display属性\"><a href=\"#其他display属性\" class=\"headerlink\" title=\"其他display属性\"></a>其他display属性</h3><ul>\n<li>table/table-cell等<br>以前table也常被用来解决元素纵向居中的问题。<br>但table样式还会导致很多的问题，这里就不再一一赘述。</li>\n<li>inherite<br>规定应该从父元素继承 display 属性的值。</li>\n</ul>\n<h2 id=\"float浮动\"><a href=\"#float浮动\" class=\"headerlink\" title=\"float浮动\"></a>float浮动</h2><hr>\n<p>说到block元素，当然不能少了float浮动啦</p>\n<ul>\n<li>float属性<ul>\n<li>float属性定义元素在哪个方向浮动</li>\n<li>float属性可应用于图像，使文本围绕在图像周围</li>\n</ul>\n</li>\n</ul>\n<p>这里我们又得拿起文档流来讲讲了。<br>给元素的float属性赋值后，就是脱离文档流，进行左右浮动，紧贴着父元素的边框或者是上一个同级同浮动元素的边框。</p>\n<ul>\n<li>float与block<ul>\n<li>设置float浮动的元素自动获取display: block样式</li>\n<li>当一个元素浮动之后，不会影响到块级框的布局<br>如图：<br>HTML<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span>1<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"float\"</span>&gt;</span>2<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"float\"</span>&gt;</span>3<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span>4<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span>5<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"float\"</span>&gt;</span>6<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n</ul>\n<p>CSS<br><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"selector-tag\">div</span> &#123; <span class=\"attribute\">border</span>: solid <span class=\"number\">1px</span> red; <span class=\"attribute\">width</span>: <span class=\"number\">50px</span>; <span class=\"attribute\">height</span>: <span class=\"number\">50px</span>; &#125; </div><div class=\"line\"><span class=\"selector-class\">.float</span> &#123; <span class=\"attribute\">float</span>: left; &#125;</div></pre></td></tr></table></figure></p>\n<p><img src=\"http://o905ne85q.bkt.clouddn.com/KSQKV%7D%253L%25Z6XE_C4FWXCRI.png\" alt=\"image\"></p>\n<ul>\n<li>float与inline-block<ul>\n<li>当一个元素浮动之后，会影响内联框（通常是文本）的排列和布局</li>\n<li>float浮动若未指明宽度会尽可能地窄，而inline-block元素会带来空白问题</li>\n</ul>\n</li>\n</ul>\n<p>如图：<br>CSS(给div添加display=inline-block)<br><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"selector-tag\">div</span> &#123; <span class=\"attribute\">border</span>: solid <span class=\"number\">1px</span> red; <span class=\"attribute\">width</span>: <span class=\"number\">50px</span>; <span class=\"attribute\">height</span>: <span class=\"number\">50px</span>; <span class=\"attribute\">display</span>: display: inline-block;&#125;</div></pre></td></tr></table></figure></p>\n<p><img src=\"http://o905ne85q.bkt.clouddn.com/O1%297R8%7BZ%7DAH%25C0F%28U%25M%7D8XX.png\" alt=\"image\"></p>\n<ul>\n<li><p>float撑开父元素的方法<br>本属于普通流中的元素浮动之后，包含框内部由于不存在其他普通流元素了，也就表现出高度为0（高度塌陷）<br>相信使用float的童鞋们都遇到过父元素高度塌陷的问题，这是因为浮动元素不占位的问题引起的。本骚年用过的解决办法如下：</p>\n<ul>\n<li>父元素使用overflow: hidden（此时高度为auto）<br>父元素overflow:hidden后，首先会计算height: auto的真实高度，由于其触发了BFC，需要包含子元素，所以高度不是0，而是子元素高度。<ul>\n<li>这里补充BFC的三个特性</li>\n<li>1.BFC会阻止垂直外边距（margin-top、margin-bottom）折叠</li>\n<li>2.BFC不会重叠浮动元素</li>\n<li>3.BFC可以包含浮动</li>\n</ul>\n</li>\n<li>使父元素也成为浮动float元素<br>将父容器也改成浮动定位，这样它就可以带着子元素一起浮动了</li>\n<li>使用clear清除浮动<br>在浮动元素后方加入clear: both的元素，就可以清除浮动撑开父元素<ul>\n<li>简述clear原理</li>\n<li>在样式中添加clear:right，理解为不允许右边有浮动元素，由于上一个元素是浮动元素，因此该元素会自动下移一行来满足规则</li>\n<li>添加clear:both，则可以清除左右两边的浮动了</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>参考<br><a href=\"http://www.jb51.net/css/67471.html\">《浮动从何而来 我们为何要清除浮动 清除浮动的原理是什么》</a> </p>\n</li>\n</ul>\n<h2 id=\"结束语\"><a href=\"#结束语\" class=\"headerlink\" title=\"结束语\"></a>结束语</h2><p>虽然说这些很简单也很基础的东西，但对于写页面的时候解决各种不明bug和现象很有帮助的哦。</p>"},{"title":"Angular使用笔记11-使用Karma和Jasmine进行单元测试","date":"2016-07-30T03:32:35.000Z","_content":"最近的一个项目使用AngularJS(v1.2.6)作为前端的框架，《Angular使用笔记》系列用于记录过程中的一些使用和解决方法。\n本文记录使用Karma和Jasmine搭建测试环境的过程。\n<!--more-->\n\n## TDD和BDD\n-----\n### TDD\nTest Drive Development，测试驱动开发。\n大概的流程是先针对每个功能点抽象出接口代码，然后编写单元测试代码，接下来实现接口，运行单元测试代码，循环此过程，直到整个单元测试都通过。\n- 优点：\n  - 1.能驱使系统最终的实现代码，都可以被测试代码所覆盖到，也即“每一行代码都可测”。\n  - 2.测试代码作为实现代码的正确导向，最终演变为正确系统的行为，能让整个开发过程更加高效。\n- 不足\n  - 1.项目的需求必须足够清晰。\n  - 2.对于一个业务模型及其复杂、内部模块之间的相互依赖性非常强的项目，采用TDD反而会得不尝失，这会导致程序员在拆分接口和写测试代码的时候工作量非常大。\n\n### BDD\nBehavior Drive Development，行为驱动开发。\n把TDD中模糊的那一部分给明确了，强调开发、测试、BA、客户等所有项目相关人员都用自然语言来描述系统的行为。\n大家看到的描述一致，读到的内容一致，于是最终测试驱动开发产出的结果也应该是最符合用户期望的。\n\n### 参考\n- [《[转]关于TDD、BDD和DDD的一些看法》](http://www.cnblogs.com/wangshenhe/archive/2013/02/16/2913431.html)\n\n### 单元测试\n单元测试是一种测试你的项目中每个最小单元代码的艺术，是使你的程序思路清晰的基础。一旦所有的测试通过，这些零散的单元组合在一起也会运行的很好，因为这些单元的行为已经被独立的验证过了。\n\n## Jasmine\n-----\nJasmine是一个用来编写Javascript测试的框架，它不依赖于任何其它的javascript框架，也不需要对DOM。它有拥有灵巧而明确的语法可以让你轻松的编写测试代码。\n\n### jasmine基础语法\njasmine单元测试有两个核心的部分：describe函数块和it函数块。\n\n- Suites\nSuites可以理解为一组测试用例，使用全局的Jasmin函数describe创建。describe函数接受两个参数，一个字符串和一个函数。字符串是这个Suites的名字或标题（通常描述下测试内容），函数是实现Suites的代码块。\n\n- Specs\nSpecs可以理解为一个测试用例，使用全局的Jasmin函数it创建。和describe一样接受两个参数，一个字符串和一个函数，函数就是要执行的测试代码，字符串就是测试用例的名字。一个Spec可以包含多个expectations来测试代码。\n\n- Expectations\nExpectations由expect函数创建。接受一个参数。和Matcher一起联用，设置测试的预期值。\n\n在分组(describe)中可以写多个测试用例(it)，也可以再进行分组(describe)，在测试用例(it)中定义期望表达式(expect)和匹配判断(toBe*)。\n\n- 内置Matchers\n\n``` javascript\nexpect(a).toBe(true);//期望变量a为true  \nexpect(a).toEqual(true);//期望变量a等于true  \nexpect(a).toMatch(/reg/);//期望变量a匹配reg正则表达式，也可以是字符串  \nexpect(a.foo).toBeDefined();//期望a.foo已定义  \nexpect(a.foo).toBeUndefined();//期望a.foo未定义  \nexpect(a).toBeNull();//期望变量a为null  \nexpect(a.isMale).toBeTruthy();//期望a.isMale为真  \nexpect(a.isMale).toBeFalsy();//期望a.isMale为假  \nexpect(true).toEqual(true);//期望true等于true  \nexpect(a).toBeLessThan(b);//期望a小于b  \nexpect(a).toBeGreaterThan(b);//期望a大于b  \nexpect(a).toThrowError(/reg/);//期望a方法抛出异常，异常信息可以是字符串、正则表达式、错误类型以及错误类型和错误信息  \nexpect(a).toThrow();//期望a方法抛出异常  \nexpect(a).toContain(b);//期望a(数组或者对象)包含b  \n```\n\n- Setup and Teardown\n为了在复杂的测试用例中更加便于组装和拆卸，Jasmine提供了四个函数：\n``` javascript\nbeforeEach(function)  //在每一个测试用例(it)执行之前都执行一遍beforeEach函数；  \nafterEach(function)  //在每一个测试用例(it)执行完成之后都执行一遍afterEach函数；  \nbeforeAll(function)  //在所有测试用例执行之前执行一遍beforeAll函数；  \nafterAll(function)  //在所有测试用例执行完成之后执行一遍afterAll函数；\n```\n\n- this关键字\n可以通过this关键字在beforeEach、afterEach和it之间共享变量，在beforeEach/afterEach/it中有一个共同的this对象。\n\n- 参考\n[《JavaScript单元测试框架——Jasmine入门》](http://ued.fanxing.com/javascriptdan-yuan-ce-shi-kuang-jia-jasmine/)\n\n### jasmine环境配置\njasmine运行需要4个部分：\n1.运行时环境：基于浏览器，通过HTML作为javascript载体\n2.源文件：用于实现某种业务逻辑的文件，就是我们平时写的js脚本\n3.测试文件：符合jasmineAPI的测试js脚本\n4.输出结果：jasmine提供了基于网页的输出结果\n\n## Karma\n-----\n### Karma介绍\nKarma是一个基于Node.js的JavaScript测试执行过程管理工具（Test Runner）。\n该工具可用于测试所有主流Web浏览器，也可集成到CI（Continuous integration）工具，也可和其他代码编辑器一起使用。\n这个测试工具的一个强大特性就是，它可以监控(Watch)文件的变化，然后自行执行，通过console.log显示测试结果。\n\n### Karma安装\n安装karma和相关插件。\n``` cmd\nnpm install karma --save-dev\nnpm install karma-jasmine karma-chrome-launcher --save-dev\n```\n\n## 编写测试代码\n-----\n项目中有关测试环境的搭建在我们之前[Yaomen](http://blog.jobbole.com/65399/)的时候就解决了呢。\n\n### 控制器测试\n这里我们简述一下编写IndexCtrl控制器的代码：\n``` javascript\ndescribe('Controller: IndexCtrl', function () {\n  beforeEach(module('angularTestApp')); //注入module\n  var IndexCtrl, scope, rootscope;\n  beforeEach(inject(function ($controller, $rootScope) { //注入控制器和作用域\n    scope = $rootScope.$new();\n    IndexCtrl = $controller('IndexCtrl', {\n      $scope: scope\n    });\n  }));\n  it('should have loading to be init', function () {\n    expect(scope.loading).toBe('init');\n  });\n  it('should have 4 asidemenus', function () {\n    expect(scope.asidemenus.length).toBe(4);\n  });\n  it('should load photo', function () {\n  \texpect(scope.avatar).toBeUndefined();\n    scope.loadphoto('123');\n    expect(scope.avatar.length).toBe(3);\n  });\n});\n```\n\n## 结束语\n-----\n其它像Directive、Service等也是可以进行单元测试的哦，测试方法跟控制器，注入服务然后测试，小伙伴们也可以试试。","source":"_posts/angular-note-11-karma-jasmine-test-create.md","raw":"---\ntitle: Angular使用笔记11-使用Karma和Jasmine进行单元测试\ndate: 2016-07-30 11:32:35\ncategories: angular混搭\ntags: 笔记\n---\n最近的一个项目使用AngularJS(v1.2.6)作为前端的框架，《Angular使用笔记》系列用于记录过程中的一些使用和解决方法。\n本文记录使用Karma和Jasmine搭建测试环境的过程。\n<!--more-->\n\n## TDD和BDD\n-----\n### TDD\nTest Drive Development，测试驱动开发。\n大概的流程是先针对每个功能点抽象出接口代码，然后编写单元测试代码，接下来实现接口，运行单元测试代码，循环此过程，直到整个单元测试都通过。\n- 优点：\n  - 1.能驱使系统最终的实现代码，都可以被测试代码所覆盖到，也即“每一行代码都可测”。\n  - 2.测试代码作为实现代码的正确导向，最终演变为正确系统的行为，能让整个开发过程更加高效。\n- 不足\n  - 1.项目的需求必须足够清晰。\n  - 2.对于一个业务模型及其复杂、内部模块之间的相互依赖性非常强的项目，采用TDD反而会得不尝失，这会导致程序员在拆分接口和写测试代码的时候工作量非常大。\n\n### BDD\nBehavior Drive Development，行为驱动开发。\n把TDD中模糊的那一部分给明确了，强调开发、测试、BA、客户等所有项目相关人员都用自然语言来描述系统的行为。\n大家看到的描述一致，读到的内容一致，于是最终测试驱动开发产出的结果也应该是最符合用户期望的。\n\n### 参考\n- [《[转]关于TDD、BDD和DDD的一些看法》](http://www.cnblogs.com/wangshenhe/archive/2013/02/16/2913431.html)\n\n### 单元测试\n单元测试是一种测试你的项目中每个最小单元代码的艺术，是使你的程序思路清晰的基础。一旦所有的测试通过，这些零散的单元组合在一起也会运行的很好，因为这些单元的行为已经被独立的验证过了。\n\n## Jasmine\n-----\nJasmine是一个用来编写Javascript测试的框架，它不依赖于任何其它的javascript框架，也不需要对DOM。它有拥有灵巧而明确的语法可以让你轻松的编写测试代码。\n\n### jasmine基础语法\njasmine单元测试有两个核心的部分：describe函数块和it函数块。\n\n- Suites\nSuites可以理解为一组测试用例，使用全局的Jasmin函数describe创建。describe函数接受两个参数，一个字符串和一个函数。字符串是这个Suites的名字或标题（通常描述下测试内容），函数是实现Suites的代码块。\n\n- Specs\nSpecs可以理解为一个测试用例，使用全局的Jasmin函数it创建。和describe一样接受两个参数，一个字符串和一个函数，函数就是要执行的测试代码，字符串就是测试用例的名字。一个Spec可以包含多个expectations来测试代码。\n\n- Expectations\nExpectations由expect函数创建。接受一个参数。和Matcher一起联用，设置测试的预期值。\n\n在分组(describe)中可以写多个测试用例(it)，也可以再进行分组(describe)，在测试用例(it)中定义期望表达式(expect)和匹配判断(toBe*)。\n\n- 内置Matchers\n\n``` javascript\nexpect(a).toBe(true);//期望变量a为true  \nexpect(a).toEqual(true);//期望变量a等于true  \nexpect(a).toMatch(/reg/);//期望变量a匹配reg正则表达式，也可以是字符串  \nexpect(a.foo).toBeDefined();//期望a.foo已定义  \nexpect(a.foo).toBeUndefined();//期望a.foo未定义  \nexpect(a).toBeNull();//期望变量a为null  \nexpect(a.isMale).toBeTruthy();//期望a.isMale为真  \nexpect(a.isMale).toBeFalsy();//期望a.isMale为假  \nexpect(true).toEqual(true);//期望true等于true  \nexpect(a).toBeLessThan(b);//期望a小于b  \nexpect(a).toBeGreaterThan(b);//期望a大于b  \nexpect(a).toThrowError(/reg/);//期望a方法抛出异常，异常信息可以是字符串、正则表达式、错误类型以及错误类型和错误信息  \nexpect(a).toThrow();//期望a方法抛出异常  \nexpect(a).toContain(b);//期望a(数组或者对象)包含b  \n```\n\n- Setup and Teardown\n为了在复杂的测试用例中更加便于组装和拆卸，Jasmine提供了四个函数：\n``` javascript\nbeforeEach(function)  //在每一个测试用例(it)执行之前都执行一遍beforeEach函数；  \nafterEach(function)  //在每一个测试用例(it)执行完成之后都执行一遍afterEach函数；  \nbeforeAll(function)  //在所有测试用例执行之前执行一遍beforeAll函数；  \nafterAll(function)  //在所有测试用例执行完成之后执行一遍afterAll函数；\n```\n\n- this关键字\n可以通过this关键字在beforeEach、afterEach和it之间共享变量，在beforeEach/afterEach/it中有一个共同的this对象。\n\n- 参考\n[《JavaScript单元测试框架——Jasmine入门》](http://ued.fanxing.com/javascriptdan-yuan-ce-shi-kuang-jia-jasmine/)\n\n### jasmine环境配置\njasmine运行需要4个部分：\n1.运行时环境：基于浏览器，通过HTML作为javascript载体\n2.源文件：用于实现某种业务逻辑的文件，就是我们平时写的js脚本\n3.测试文件：符合jasmineAPI的测试js脚本\n4.输出结果：jasmine提供了基于网页的输出结果\n\n## Karma\n-----\n### Karma介绍\nKarma是一个基于Node.js的JavaScript测试执行过程管理工具（Test Runner）。\n该工具可用于测试所有主流Web浏览器，也可集成到CI（Continuous integration）工具，也可和其他代码编辑器一起使用。\n这个测试工具的一个强大特性就是，它可以监控(Watch)文件的变化，然后自行执行，通过console.log显示测试结果。\n\n### Karma安装\n安装karma和相关插件。\n``` cmd\nnpm install karma --save-dev\nnpm install karma-jasmine karma-chrome-launcher --save-dev\n```\n\n## 编写测试代码\n-----\n项目中有关测试环境的搭建在我们之前[Yaomen](http://blog.jobbole.com/65399/)的时候就解决了呢。\n\n### 控制器测试\n这里我们简述一下编写IndexCtrl控制器的代码：\n``` javascript\ndescribe('Controller: IndexCtrl', function () {\n  beforeEach(module('angularTestApp')); //注入module\n  var IndexCtrl, scope, rootscope;\n  beforeEach(inject(function ($controller, $rootScope) { //注入控制器和作用域\n    scope = $rootScope.$new();\n    IndexCtrl = $controller('IndexCtrl', {\n      $scope: scope\n    });\n  }));\n  it('should have loading to be init', function () {\n    expect(scope.loading).toBe('init');\n  });\n  it('should have 4 asidemenus', function () {\n    expect(scope.asidemenus.length).toBe(4);\n  });\n  it('should load photo', function () {\n  \texpect(scope.avatar).toBeUndefined();\n    scope.loadphoto('123');\n    expect(scope.avatar.length).toBe(3);\n  });\n});\n```\n\n## 结束语\n-----\n其它像Directive、Service等也是可以进行单元测试的哦，测试方法跟控制器，注入服务然后测试，小伙伴们也可以试试。","slug":"angular-note-11-karma-jasmine-test-create","published":1,"updated":"2016-08-20T10:54:21.042Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cix45hue30004xotuqyetckzs","content":"<p>最近的一个项目使用AngularJS(v1.2.6)作为前端的框架，《Angular使用笔记》系列用于记录过程中的一些使用和解决方法。<br>本文记录使用Karma和Jasmine搭建测试环境的过程。<br><a id=\"more\"></a></p>\n<h2 id=\"TDD和BDD\"><a href=\"#TDD和BDD\" class=\"headerlink\" title=\"TDD和BDD\"></a>TDD和BDD</h2><hr>\n<h3 id=\"TDD\"><a href=\"#TDD\" class=\"headerlink\" title=\"TDD\"></a>TDD</h3><p>Test Drive Development，测试驱动开发。<br>大概的流程是先针对每个功能点抽象出接口代码，然后编写单元测试代码，接下来实现接口，运行单元测试代码，循环此过程，直到整个单元测试都通过。</p>\n<ul>\n<li>优点：<ul>\n<li>1.能驱使系统最终的实现代码，都可以被测试代码所覆盖到，也即“每一行代码都可测”。</li>\n<li>2.测试代码作为实现代码的正确导向，最终演变为正确系统的行为，能让整个开发过程更加高效。</li>\n</ul>\n</li>\n<li>不足<ul>\n<li>1.项目的需求必须足够清晰。</li>\n<li>2.对于一个业务模型及其复杂、内部模块之间的相互依赖性非常强的项目，采用TDD反而会得不尝失，这会导致程序员在拆分接口和写测试代码的时候工作量非常大。</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"BDD\"><a href=\"#BDD\" class=\"headerlink\" title=\"BDD\"></a>BDD</h3><p>Behavior Drive Development，行为驱动开发。<br>把TDD中模糊的那一部分给明确了，强调开发、测试、BA、客户等所有项目相关人员都用自然语言来描述系统的行为。<br>大家看到的描述一致，读到的内容一致，于是最终测试驱动开发产出的结果也应该是最符合用户期望的。</p>\n<h3 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h3><ul>\n<li><a href=\"http://www.cnblogs.com/wangshenhe/archive/2013/02/16/2913431.html\" target=\"_blank\" rel=\"external\">《[转]关于TDD、BDD和DDD的一些看法》</a></li>\n</ul>\n<h3 id=\"单元测试\"><a href=\"#单元测试\" class=\"headerlink\" title=\"单元测试\"></a>单元测试</h3><p>单元测试是一种测试你的项目中每个最小单元代码的艺术，是使你的程序思路清晰的基础。一旦所有的测试通过，这些零散的单元组合在一起也会运行的很好，因为这些单元的行为已经被独立的验证过了。</p>\n<h2 id=\"Jasmine\"><a href=\"#Jasmine\" class=\"headerlink\" title=\"Jasmine\"></a>Jasmine</h2><hr>\n<p>Jasmine是一个用来编写Javascript测试的框架，它不依赖于任何其它的javascript框架，也不需要对DOM。它有拥有灵巧而明确的语法可以让你轻松的编写测试代码。</p>\n<h3 id=\"jasmine基础语法\"><a href=\"#jasmine基础语法\" class=\"headerlink\" title=\"jasmine基础语法\"></a>jasmine基础语法</h3><p>jasmine单元测试有两个核心的部分：describe函数块和it函数块。</p>\n<ul>\n<li><p>Suites<br>Suites可以理解为一组测试用例，使用全局的Jasmin函数describe创建。describe函数接受两个参数，一个字符串和一个函数。字符串是这个Suites的名字或标题（通常描述下测试内容），函数是实现Suites的代码块。</p>\n</li>\n<li><p>Specs<br>Specs可以理解为一个测试用例，使用全局的Jasmin函数it创建。和describe一样接受两个参数，一个字符串和一个函数，函数就是要执行的测试代码，字符串就是测试用例的名字。一个Spec可以包含多个expectations来测试代码。</p>\n</li>\n<li><p>Expectations<br>Expectations由expect函数创建。接受一个参数。和Matcher一起联用，设置测试的预期值。</p>\n</li>\n</ul>\n<p>在分组(describe)中可以写多个测试用例(it)，也可以再进行分组(describe)，在测试用例(it)中定义期望表达式(expect)和匹配判断(toBe*)。</p>\n<ul>\n<li>内置Matchers</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\">expect(a).toBe(<span class=\"literal\">true</span>);<span class=\"comment\">//期望变量a为true  </span></div><div class=\"line\">expect(a).toEqual(<span class=\"literal\">true</span>);<span class=\"comment\">//期望变量a等于true  </span></div><div class=\"line\">expect(a).toMatch(<span class=\"regexp\">/reg/</span>);<span class=\"comment\">//期望变量a匹配reg正则表达式，也可以是字符串  </span></div><div class=\"line\">expect(a.foo).toBeDefined();<span class=\"comment\">//期望a.foo已定义  </span></div><div class=\"line\">expect(a.foo).toBeUndefined();<span class=\"comment\">//期望a.foo未定义  </span></div><div class=\"line\">expect(a).toBeNull();<span class=\"comment\">//期望变量a为null  </span></div><div class=\"line\">expect(a.isMale).toBeTruthy();<span class=\"comment\">//期望a.isMale为真  </span></div><div class=\"line\">expect(a.isMale).toBeFalsy();<span class=\"comment\">//期望a.isMale为假  </span></div><div class=\"line\">expect(<span class=\"literal\">true</span>).toEqual(<span class=\"literal\">true</span>);<span class=\"comment\">//期望true等于true  </span></div><div class=\"line\">expect(a).toBeLessThan(b);<span class=\"comment\">//期望a小于b  </span></div><div class=\"line\">expect(a).toBeGreaterThan(b);<span class=\"comment\">//期望a大于b  </span></div><div class=\"line\">expect(a).toThrowError(<span class=\"regexp\">/reg/</span>);<span class=\"comment\">//期望a方法抛出异常，异常信息可以是字符串、正则表达式、错误类型以及错误类型和错误信息  </span></div><div class=\"line\">expect(a).toThrow();<span class=\"comment\">//期望a方法抛出异常  </span></div><div class=\"line\">expect(a).toContain(b);<span class=\"comment\">//期望a(数组或者对象)包含b</span></div></pre></td></tr></table></figure>\n<ul>\n<li><p>Setup and Teardown<br>为了在复杂的测试用例中更加便于组装和拆卸，Jasmine提供了四个函数：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">beforeEach(<span class=\"function\"><span class=\"keyword\">function</span>)  //在每一个测试用例(<span class=\"params\">it</span>)执行之前都执行一遍<span class=\"title\">beforeEach</span>函数；  </span></div><div class=\"line\"><span class=\"title\">afterEach</span>(<span class=\"params\">function</span>)  //在每一个测试用例(<span class=\"params\">it</span>)执行完成之后都执行一遍<span class=\"title\">afterEach</span>函数；  </div><div class=\"line\"><span class=\"title\">beforeAll</span>(<span class=\"params\">function</span>)  //在所有测试用例执行之前执行一遍<span class=\"title\">beforeAll</span>函数；  </div><div class=\"line\"><span class=\"title\">afterAll</span>(<span class=\"params\">function</span>)  //在所有测试用例执行完成之后执行一遍<span class=\"title\">afterAll</span>函数；</div></pre></td></tr></table></figure>\n</li>\n<li><p>this关键字<br>可以通过this关键字在beforeEach、afterEach和it之间共享变量，在beforeEach/afterEach/it中有一个共同的this对象。</p>\n</li>\n<li><p>参考<br><a href=\"http://ued.fanxing.com/javascriptdan-yuan-ce-shi-kuang-jia-jasmine/\" target=\"_blank\" rel=\"external\">《JavaScript单元测试框架——Jasmine入门》</a></p>\n</li>\n</ul>\n<h3 id=\"jasmine环境配置\"><a href=\"#jasmine环境配置\" class=\"headerlink\" title=\"jasmine环境配置\"></a>jasmine环境配置</h3><p>jasmine运行需要4个部分：<br>1.运行时环境：基于浏览器，通过HTML作为javascript载体<br>2.源文件：用于实现某种业务逻辑的文件，就是我们平时写的js脚本<br>3.测试文件：符合jasmineAPI的测试js脚本<br>4.输出结果：jasmine提供了基于网页的输出结果</p>\n<h2 id=\"Karma\"><a href=\"#Karma\" class=\"headerlink\" title=\"Karma\"></a>Karma</h2><hr>\n<h3 id=\"Karma介绍\"><a href=\"#Karma介绍\" class=\"headerlink\" title=\"Karma介绍\"></a>Karma介绍</h3><p>Karma是一个基于Node.js的JavaScript测试执行过程管理工具（Test Runner）。<br>该工具可用于测试所有主流Web浏览器，也可集成到CI（Continuous integration）工具，也可和其他代码编辑器一起使用。<br>这个测试工具的一个强大特性就是，它可以监控(Watch)文件的变化，然后自行执行，通过console.log显示测试结果。</p>\n<h3 id=\"Karma安装\"><a href=\"#Karma安装\" class=\"headerlink\" title=\"Karma安装\"></a>Karma安装</h3><p>安装karma和相关插件。<br><figure class=\"highlight cmd\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">npm install karma --save-dev</div><div class=\"line\">npm install karma-jasmine karma-chrome-launcher --save-dev</div></pre></td></tr></table></figure></p>\n<h2 id=\"编写测试代码\"><a href=\"#编写测试代码\" class=\"headerlink\" title=\"编写测试代码\"></a>编写测试代码</h2><hr>\n<p>项目中有关测试环境的搭建在我们之前<a href=\"http://blog.jobbole.com/65399/\" target=\"_blank\" rel=\"external\">Yaomen</a>的时候就解决了呢。</p>\n<h3 id=\"控制器测试\"><a href=\"#控制器测试\" class=\"headerlink\" title=\"控制器测试\"></a>控制器测试</h3><p>这里我们简述一下编写IndexCtrl控制器的代码：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\">describe(<span class=\"string\">'Controller: IndexCtrl'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">  beforeEach(<span class=\"built_in\">module</span>(<span class=\"string\">'angularTestApp'</span>)); <span class=\"comment\">//注入module</span></div><div class=\"line\">  <span class=\"keyword\">var</span> IndexCtrl, scope, rootscope;</div><div class=\"line\">  beforeEach(inject(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">$controller, $rootScope</span>) </span>&#123; <span class=\"comment\">//注入控制器和作用域</span></div><div class=\"line\">    scope = $rootScope.$<span class=\"keyword\">new</span>();</div><div class=\"line\">    IndexCtrl = $controller(<span class=\"string\">'IndexCtrl'</span>, &#123;</div><div class=\"line\">      <span class=\"attr\">$scope</span>: scope</div><div class=\"line\">    &#125;);</div><div class=\"line\">  &#125;));</div><div class=\"line\">  it(<span class=\"string\">'should have loading to be init'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    expect(scope.loading).toBe(<span class=\"string\">'init'</span>);</div><div class=\"line\">  &#125;);</div><div class=\"line\">  it(<span class=\"string\">'should have 4 asidemenus'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    expect(scope.asidemenus.length).toBe(<span class=\"number\">4</span>);</div><div class=\"line\">  &#125;);</div><div class=\"line\">  it(<span class=\"string\">'should load photo'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">  \texpect(scope.avatar).toBeUndefined();</div><div class=\"line\">    scope.loadphoto(<span class=\"string\">'123'</span>);</div><div class=\"line\">    expect(scope.avatar.length).toBe(<span class=\"number\">3</span>);</div><div class=\"line\">  &#125;);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure></p>\n<h2 id=\"结束语\"><a href=\"#结束语\" class=\"headerlink\" title=\"结束语\"></a>结束语</h2><hr>\n<p>其它像Directive、Service等也是可以进行单元测试的哦，测试方法跟控制器，注入服务然后测试，小伙伴们也可以试试。</p>\n","excerpt":"<p>最近的一个项目使用AngularJS(v1.2.6)作为前端的框架，《Angular使用笔记》系列用于记录过程中的一些使用和解决方法。<br>本文记录使用Karma和Jasmine搭建测试环境的过程。<br>","more":"</p>\n<h2 id=\"TDD和BDD\"><a href=\"#TDD和BDD\" class=\"headerlink\" title=\"TDD和BDD\"></a>TDD和BDD</h2><hr>\n<h3 id=\"TDD\"><a href=\"#TDD\" class=\"headerlink\" title=\"TDD\"></a>TDD</h3><p>Test Drive Development，测试驱动开发。<br>大概的流程是先针对每个功能点抽象出接口代码，然后编写单元测试代码，接下来实现接口，运行单元测试代码，循环此过程，直到整个单元测试都通过。</p>\n<ul>\n<li>优点：<ul>\n<li>1.能驱使系统最终的实现代码，都可以被测试代码所覆盖到，也即“每一行代码都可测”。</li>\n<li>2.测试代码作为实现代码的正确导向，最终演变为正确系统的行为，能让整个开发过程更加高效。</li>\n</ul>\n</li>\n<li>不足<ul>\n<li>1.项目的需求必须足够清晰。</li>\n<li>2.对于一个业务模型及其复杂、内部模块之间的相互依赖性非常强的项目，采用TDD反而会得不尝失，这会导致程序员在拆分接口和写测试代码的时候工作量非常大。</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"BDD\"><a href=\"#BDD\" class=\"headerlink\" title=\"BDD\"></a>BDD</h3><p>Behavior Drive Development，行为驱动开发。<br>把TDD中模糊的那一部分给明确了，强调开发、测试、BA、客户等所有项目相关人员都用自然语言来描述系统的行为。<br>大家看到的描述一致，读到的内容一致，于是最终测试驱动开发产出的结果也应该是最符合用户期望的。</p>\n<h3 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h3><ul>\n<li><a href=\"http://www.cnblogs.com/wangshenhe/archive/2013/02/16/2913431.html\">《[转]关于TDD、BDD和DDD的一些看法》</a></li>\n</ul>\n<h3 id=\"单元测试\"><a href=\"#单元测试\" class=\"headerlink\" title=\"单元测试\"></a>单元测试</h3><p>单元测试是一种测试你的项目中每个最小单元代码的艺术，是使你的程序思路清晰的基础。一旦所有的测试通过，这些零散的单元组合在一起也会运行的很好，因为这些单元的行为已经被独立的验证过了。</p>\n<h2 id=\"Jasmine\"><a href=\"#Jasmine\" class=\"headerlink\" title=\"Jasmine\"></a>Jasmine</h2><hr>\n<p>Jasmine是一个用来编写Javascript测试的框架，它不依赖于任何其它的javascript框架，也不需要对DOM。它有拥有灵巧而明确的语法可以让你轻松的编写测试代码。</p>\n<h3 id=\"jasmine基础语法\"><a href=\"#jasmine基础语法\" class=\"headerlink\" title=\"jasmine基础语法\"></a>jasmine基础语法</h3><p>jasmine单元测试有两个核心的部分：describe函数块和it函数块。</p>\n<ul>\n<li><p>Suites<br>Suites可以理解为一组测试用例，使用全局的Jasmin函数describe创建。describe函数接受两个参数，一个字符串和一个函数。字符串是这个Suites的名字或标题（通常描述下测试内容），函数是实现Suites的代码块。</p>\n</li>\n<li><p>Specs<br>Specs可以理解为一个测试用例，使用全局的Jasmin函数it创建。和describe一样接受两个参数，一个字符串和一个函数，函数就是要执行的测试代码，字符串就是测试用例的名字。一个Spec可以包含多个expectations来测试代码。</p>\n</li>\n<li><p>Expectations<br>Expectations由expect函数创建。接受一个参数。和Matcher一起联用，设置测试的预期值。</p>\n</li>\n</ul>\n<p>在分组(describe)中可以写多个测试用例(it)，也可以再进行分组(describe)，在测试用例(it)中定义期望表达式(expect)和匹配判断(toBe*)。</p>\n<ul>\n<li>内置Matchers</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\">expect(a).toBe(<span class=\"literal\">true</span>);<span class=\"comment\">//期望变量a为true  </span></div><div class=\"line\">expect(a).toEqual(<span class=\"literal\">true</span>);<span class=\"comment\">//期望变量a等于true  </span></div><div class=\"line\">expect(a).toMatch(<span class=\"regexp\">/reg/</span>);<span class=\"comment\">//期望变量a匹配reg正则表达式，也可以是字符串  </span></div><div class=\"line\">expect(a.foo).toBeDefined();<span class=\"comment\">//期望a.foo已定义  </span></div><div class=\"line\">expect(a.foo).toBeUndefined();<span class=\"comment\">//期望a.foo未定义  </span></div><div class=\"line\">expect(a).toBeNull();<span class=\"comment\">//期望变量a为null  </span></div><div class=\"line\">expect(a.isMale).toBeTruthy();<span class=\"comment\">//期望a.isMale为真  </span></div><div class=\"line\">expect(a.isMale).toBeFalsy();<span class=\"comment\">//期望a.isMale为假  </span></div><div class=\"line\">expect(<span class=\"literal\">true</span>).toEqual(<span class=\"literal\">true</span>);<span class=\"comment\">//期望true等于true  </span></div><div class=\"line\">expect(a).toBeLessThan(b);<span class=\"comment\">//期望a小于b  </span></div><div class=\"line\">expect(a).toBeGreaterThan(b);<span class=\"comment\">//期望a大于b  </span></div><div class=\"line\">expect(a).toThrowError(<span class=\"regexp\">/reg/</span>);<span class=\"comment\">//期望a方法抛出异常，异常信息可以是字符串、正则表达式、错误类型以及错误类型和错误信息  </span></div><div class=\"line\">expect(a).toThrow();<span class=\"comment\">//期望a方法抛出异常  </span></div><div class=\"line\">expect(a).toContain(b);<span class=\"comment\">//期望a(数组或者对象)包含b</span></div></pre></td></tr></table></figure>\n<ul>\n<li><p>Setup and Teardown<br>为了在复杂的测试用例中更加便于组装和拆卸，Jasmine提供了四个函数：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">beforeEach(<span class=\"function\"><span class=\"keyword\">function</span>)  //在每一个测试用例(<span class=\"params\">it</span>)执行之前都执行一遍<span class=\"title\">beforeEach</span>函数；  </div><div class=\"line\"><span class=\"title\">afterEach</span>(<span class=\"params\">function</span>)  //在每一个测试用例(<span class=\"params\">it</span>)执行完成之后都执行一遍<span class=\"title\">afterEach</span>函数；  </div><div class=\"line\"><span class=\"title\">beforeAll</span>(<span class=\"params\">function</span>)  //在所有测试用例执行之前执行一遍<span class=\"title\">beforeAll</span>函数；  </div><div class=\"line\"><span class=\"title\">afterAll</span>(<span class=\"params\">function</span>)  //在所有测试用例执行完成之后执行一遍<span class=\"title\">afterAll</span>函数；</span></div></pre></td></tr></table></figure>\n</li>\n<li><p>this关键字<br>可以通过this关键字在beforeEach、afterEach和it之间共享变量，在beforeEach/afterEach/it中有一个共同的this对象。</p>\n</li>\n<li><p>参考<br><a href=\"http://ued.fanxing.com/javascriptdan-yuan-ce-shi-kuang-jia-jasmine/\">《JavaScript单元测试框架——Jasmine入门》</a></p>\n</li>\n</ul>\n<h3 id=\"jasmine环境配置\"><a href=\"#jasmine环境配置\" class=\"headerlink\" title=\"jasmine环境配置\"></a>jasmine环境配置</h3><p>jasmine运行需要4个部分：<br>1.运行时环境：基于浏览器，通过HTML作为javascript载体<br>2.源文件：用于实现某种业务逻辑的文件，就是我们平时写的js脚本<br>3.测试文件：符合jasmineAPI的测试js脚本<br>4.输出结果：jasmine提供了基于网页的输出结果</p>\n<h2 id=\"Karma\"><a href=\"#Karma\" class=\"headerlink\" title=\"Karma\"></a>Karma</h2><hr>\n<h3 id=\"Karma介绍\"><a href=\"#Karma介绍\" class=\"headerlink\" title=\"Karma介绍\"></a>Karma介绍</h3><p>Karma是一个基于Node.js的JavaScript测试执行过程管理工具（Test Runner）。<br>该工具可用于测试所有主流Web浏览器，也可集成到CI（Continuous integration）工具，也可和其他代码编辑器一起使用。<br>这个测试工具的一个强大特性就是，它可以监控(Watch)文件的变化，然后自行执行，通过console.log显示测试结果。</p>\n<h3 id=\"Karma安装\"><a href=\"#Karma安装\" class=\"headerlink\" title=\"Karma安装\"></a>Karma安装</h3><p>安装karma和相关插件。<br><figure class=\"highlight cmd\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">npm install karma --save-dev</div><div class=\"line\">npm install karma-jasmine karma-chrome-launcher --save-dev</div></pre></td></tr></table></figure></p>\n<h2 id=\"编写测试代码\"><a href=\"#编写测试代码\" class=\"headerlink\" title=\"编写测试代码\"></a>编写测试代码</h2><hr>\n<p>项目中有关测试环境的搭建在我们之前<a href=\"http://blog.jobbole.com/65399/\">Yaomen</a>的时候就解决了呢。</p>\n<h3 id=\"控制器测试\"><a href=\"#控制器测试\" class=\"headerlink\" title=\"控制器测试\"></a>控制器测试</h3><p>这里我们简述一下编写IndexCtrl控制器的代码：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\">describe(<span class=\"string\">'Controller: IndexCtrl'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">  beforeEach(<span class=\"built_in\">module</span>(<span class=\"string\">'angularTestApp'</span>)); <span class=\"comment\">//注入module</span></div><div class=\"line\">  <span class=\"keyword\">var</span> IndexCtrl, scope, rootscope;</div><div class=\"line\">  beforeEach(inject(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">$controller, $rootScope</span>) </span>&#123; <span class=\"comment\">//注入控制器和作用域</span></div><div class=\"line\">    scope = $rootScope.$<span class=\"keyword\">new</span>();</div><div class=\"line\">    IndexCtrl = $controller(<span class=\"string\">'IndexCtrl'</span>, &#123;</div><div class=\"line\">      <span class=\"attr\">$scope</span>: scope</div><div class=\"line\">    &#125;);</div><div class=\"line\">  &#125;));</div><div class=\"line\">  it(<span class=\"string\">'should have loading to be init'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    expect(scope.loading).toBe(<span class=\"string\">'init'</span>);</div><div class=\"line\">  &#125;);</div><div class=\"line\">  it(<span class=\"string\">'should have 4 asidemenus'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    expect(scope.asidemenus.length).toBe(<span class=\"number\">4</span>);</div><div class=\"line\">  &#125;);</div><div class=\"line\">  it(<span class=\"string\">'should load photo'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">  \texpect(scope.avatar).toBeUndefined();</div><div class=\"line\">    scope.loadphoto(<span class=\"string\">'123'</span>);</div><div class=\"line\">    expect(scope.avatar.length).toBe(<span class=\"number\">3</span>);</div><div class=\"line\">  &#125;);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure></p>\n<h2 id=\"结束语\"><a href=\"#结束语\" class=\"headerlink\" title=\"结束语\"></a>结束语</h2><hr>\n<p>其它像Directive、Service等也是可以进行单元测试的哦，测试方法跟控制器，注入服务然后测试，小伙伴们也可以试试。</p>"},{"title":"Angular使用笔记1--搭建Angular项目","date":"2016-07-01T11:52:43.000Z","_content":"最近的一个项目使用AngularJS(v1.2.6)作为前端的框架，《Angular使用笔记》系列用于记录过程中的一些使用和解决方法。\n本文记录初步搭建项目的过程。\n<!--more-->\n\n## 使用Yeoman自动生成初步完整功能的AngularJS应用\n\n### 使用AngularJS的方法\n- 1.下载AngularJS源代码，引入到页面内，然后按照[官方教程](http://www.apjs.net/)进行启动app。\n- 2.使用自动化构建Grunt/Gulp搭建项目。\n\n### 自动化搭建\n- 本骚念使用的是Yeoman自动搭建，这里有详细教程[《Yeoman官方教程：用Yeoman和AngularJS做Web应用》](http://blog.jobbole.com/65399/)\n- 自动化搭建的好处：\n  - 1.对框架的目录组织有个大概的了解\n  - 2.可选择自动引入Bootstrap或者SASS\n  - 3.可选择自动引入需要使用的Angular模块，如下\n![image](http://o905ne85q.bkt.clouddn.com/CF95.tmp.png)\n  - 4.对首次使用AngularJS的小伙伴们来说，可以直观看到如何启用ng-app，以及路由ng-route的使用方式\n  - 5.启动一个基于Node的http服务，通过一系列的Grunt任务来监视你的文件的更改情况，一旦发现文件被改动了，'live reloading'就会自动刷新应用，并更新到浏览器上\n  - 6.可使用grunt命令自动执行规范代码、跑测试、压缩JS和CSS代码（减少网络请求）、优化图片还有编译使用了预处理的代码\n\n### Gulp/Grunt/Bower/NPM/Yeoman\n这里简单介绍一下这些工具\n- Grunt: Javascript任务运行器。常用来执行需要重复执行的任务，例如压缩、编译、单元测试等。\n- Gulp: gulp.js是一种基于流的，代码优于配置的新一代构建工具。Gulp和Grunt 类似。但相比于Grunt的频繁的IO操作，Gulp的流操作，能更快地完成构建。\n- Bower: Bower是一个客户端技术的软件包管理器，它可用于搜索、安装和卸载如JavaScript、HTML、CSS之类的网络资源。如YeoMan和Grunt等开发工具则是建立在Bower基础之上。\n- NPM: NPM是随同NodeJS一起安装的包管理工具，能解决NodeJS代码部署上的很多问题。是node.js常用来下载以及安装套件的工具。\n- Node.js: Node.js是一个事件驱动I/O服务端JavaScript环境，基于Google的V8引擎，简单的说就是运行在服务端的JavaScript。\n- Yeoman: Yeoman的目标是通过Grunt和Bower的包装为开发者创建一个易用的工作流，同时可解决前端开发所面临的诸多严重问题，例如零散的依赖关系。主要有三部分组成：yo（脚手架工具）、grunt（构建工具）、bower（包管理器）。\n- yo是一个用于构建特定框架的生态系统的代码工具，我们称之为生成器(generator)。\n\n## 目录组织\n-----\n搭建好初始化的项目，目录组织如下：\n![image](http://o905ne85q.bkt.clouddn.com/5C4E.tmp.png)\n当然，涉及angular项目的文件在app目录下，其他主要用于自动化构建、生成的环境和管理包引用。\n现在我们查看一下app目录下文件：\n![image](http://o905ne85q.bkt.clouddn.com/E558.tmp.png)\n\n当然项目发展文件数量肯定多很多的呢，在js文件成倍增长的时候，该怎么去管理呢？\n\n### 按照功能分类\n- 将directive/controller/service/filter等不同功能的js放置不同的文件夹管理\n![image](http://o905ne85q.bkt.clouddn.com/1350.tmp.png)\n\n### 按模块分类\n- 将每个模块的文件放置在一个文件夹内管理\n![image](http://o905ne85q.bkt.clouddn.com/14A2.tmp.png)\n\n本骚年用的是按照功能划分的，这种方式相对本骚年来说比较容易管理。\n或者你们如果有更好的管理目录组织方式，当然也欢迎分享啦。\n\n## Angular基本概念\n-----\n此处稍微介绍一下本骚年用的比较多的angular部分\n\n### AngularJS模块\n- ng-app: 模块用于单独的逻辑表示服务，控制器，应用程序等，并保持代码的整洁\n- 一般一个项目中只会用到一个ng-app，而angular自动启动也仅限于第一个ng-app，故使用多个模块的小伙伴们需要手动启动剩余的模块啦\n- 使用angular.bootstrap()可启用多个ng-app，[参考](http://www.cnblogs.com/whitewolf/archive/2012/08/13/2637262.html)\n\n### AngualrJS视图\n- ng-view: 标记只是简单地创建一个占位符，是一个相应的视图(HTML或ng-template视图)，可以根据配置来放置\n- 配合ng-route路由可以实现单页应用哦\n\n### AngularJS表达式\n``` html\n{{ expression | filter }}\n```\n- 其中filter为过滤器，常用于格式转换等\n- ng-bind与双大括号表达式差不多，但可以防止页面未加载完全时出现不必要的字符\n\n### AngularJS控制器\n- ng-controller: 控制AngularJS应用程序的数据\n- 常配合路由使用，也可以创建局部作用域来管理其中数据\n\n### AngularJS指令\n- angular.directive: 常用来拓展HTML\n- 对可复用的控件可进行封装，可创建独立作用域，可管理特定DOM事件\n- DOM操作尽量封装在指令内部哦\n\n### AngularJS HTML DOM常用事件和指令\n- ng-repeat: 通过数组来循环HTML代码\n- ng-show/ng-hide: 隐藏和显示相应元素\n- ng-if: 是否加载相应元素\n- ng-click: 绑定元素点击事件\n- ng-model: 双向绑定，多用于表单\n- ng-change/ng-keyup/ng-focus: 绑定事件，多用于表单\n\n此外还有路由、表单验证、作用域等，这里就不详细介绍啦。\n虽然说配合实践是高效学习的一种方式，但是基础和概念也是很重要的哦。\n下面是一些教程：\n[《AngularJS中文网》](http://www.apjs.net/)\n[《w3c菜鸟：AngularJS教程》](http://www.runoob.com/angularjs/angularjs-tutorial.html)\n\n## 结束语\n-----\n自动化搭建对AngularJS应用整体上的了解很有帮助哦，不妨尝试一下啦。\n[此处查看项目代码（仅包含app部分）](https://github.com/godbasin/godbasin.github.io/tree/blog-codes/angular-notes/1-create-angular-project)\n[此处查看页面效果](http://o9grhhyar.bkt.clouddn.com/1-create-angular-project/index.html#/)","source":"_posts/angular-note-1-create-angular-project.md","raw":"---\ntitle: Angular使用笔记1--搭建Angular项目\ndate: 2016-07-01 19:52:43\ncategories: angular混搭\ntags: 笔记\n---\n最近的一个项目使用AngularJS(v1.2.6)作为前端的框架，《Angular使用笔记》系列用于记录过程中的一些使用和解决方法。\n本文记录初步搭建项目的过程。\n<!--more-->\n\n## 使用Yeoman自动生成初步完整功能的AngularJS应用\n\n### 使用AngularJS的方法\n- 1.下载AngularJS源代码，引入到页面内，然后按照[官方教程](http://www.apjs.net/)进行启动app。\n- 2.使用自动化构建Grunt/Gulp搭建项目。\n\n### 自动化搭建\n- 本骚念使用的是Yeoman自动搭建，这里有详细教程[《Yeoman官方教程：用Yeoman和AngularJS做Web应用》](http://blog.jobbole.com/65399/)\n- 自动化搭建的好处：\n  - 1.对框架的目录组织有个大概的了解\n  - 2.可选择自动引入Bootstrap或者SASS\n  - 3.可选择自动引入需要使用的Angular模块，如下\n![image](http://o905ne85q.bkt.clouddn.com/CF95.tmp.png)\n  - 4.对首次使用AngularJS的小伙伴们来说，可以直观看到如何启用ng-app，以及路由ng-route的使用方式\n  - 5.启动一个基于Node的http服务，通过一系列的Grunt任务来监视你的文件的更改情况，一旦发现文件被改动了，'live reloading'就会自动刷新应用，并更新到浏览器上\n  - 6.可使用grunt命令自动执行规范代码、跑测试、压缩JS和CSS代码（减少网络请求）、优化图片还有编译使用了预处理的代码\n\n### Gulp/Grunt/Bower/NPM/Yeoman\n这里简单介绍一下这些工具\n- Grunt: Javascript任务运行器。常用来执行需要重复执行的任务，例如压缩、编译、单元测试等。\n- Gulp: gulp.js是一种基于流的，代码优于配置的新一代构建工具。Gulp和Grunt 类似。但相比于Grunt的频繁的IO操作，Gulp的流操作，能更快地完成构建。\n- Bower: Bower是一个客户端技术的软件包管理器，它可用于搜索、安装和卸载如JavaScript、HTML、CSS之类的网络资源。如YeoMan和Grunt等开发工具则是建立在Bower基础之上。\n- NPM: NPM是随同NodeJS一起安装的包管理工具，能解决NodeJS代码部署上的很多问题。是node.js常用来下载以及安装套件的工具。\n- Node.js: Node.js是一个事件驱动I/O服务端JavaScript环境，基于Google的V8引擎，简单的说就是运行在服务端的JavaScript。\n- Yeoman: Yeoman的目标是通过Grunt和Bower的包装为开发者创建一个易用的工作流，同时可解决前端开发所面临的诸多严重问题，例如零散的依赖关系。主要有三部分组成：yo（脚手架工具）、grunt（构建工具）、bower（包管理器）。\n- yo是一个用于构建特定框架的生态系统的代码工具，我们称之为生成器(generator)。\n\n## 目录组织\n-----\n搭建好初始化的项目，目录组织如下：\n![image](http://o905ne85q.bkt.clouddn.com/5C4E.tmp.png)\n当然，涉及angular项目的文件在app目录下，其他主要用于自动化构建、生成的环境和管理包引用。\n现在我们查看一下app目录下文件：\n![image](http://o905ne85q.bkt.clouddn.com/E558.tmp.png)\n\n当然项目发展文件数量肯定多很多的呢，在js文件成倍增长的时候，该怎么去管理呢？\n\n### 按照功能分类\n- 将directive/controller/service/filter等不同功能的js放置不同的文件夹管理\n![image](http://o905ne85q.bkt.clouddn.com/1350.tmp.png)\n\n### 按模块分类\n- 将每个模块的文件放置在一个文件夹内管理\n![image](http://o905ne85q.bkt.clouddn.com/14A2.tmp.png)\n\n本骚年用的是按照功能划分的，这种方式相对本骚年来说比较容易管理。\n或者你们如果有更好的管理目录组织方式，当然也欢迎分享啦。\n\n## Angular基本概念\n-----\n此处稍微介绍一下本骚年用的比较多的angular部分\n\n### AngularJS模块\n- ng-app: 模块用于单独的逻辑表示服务，控制器，应用程序等，并保持代码的整洁\n- 一般一个项目中只会用到一个ng-app，而angular自动启动也仅限于第一个ng-app，故使用多个模块的小伙伴们需要手动启动剩余的模块啦\n- 使用angular.bootstrap()可启用多个ng-app，[参考](http://www.cnblogs.com/whitewolf/archive/2012/08/13/2637262.html)\n\n### AngualrJS视图\n- ng-view: 标记只是简单地创建一个占位符，是一个相应的视图(HTML或ng-template视图)，可以根据配置来放置\n- 配合ng-route路由可以实现单页应用哦\n\n### AngularJS表达式\n``` html\n{{ expression | filter }}\n```\n- 其中filter为过滤器，常用于格式转换等\n- ng-bind与双大括号表达式差不多，但可以防止页面未加载完全时出现不必要的字符\n\n### AngularJS控制器\n- ng-controller: 控制AngularJS应用程序的数据\n- 常配合路由使用，也可以创建局部作用域来管理其中数据\n\n### AngularJS指令\n- angular.directive: 常用来拓展HTML\n- 对可复用的控件可进行封装，可创建独立作用域，可管理特定DOM事件\n- DOM操作尽量封装在指令内部哦\n\n### AngularJS HTML DOM常用事件和指令\n- ng-repeat: 通过数组来循环HTML代码\n- ng-show/ng-hide: 隐藏和显示相应元素\n- ng-if: 是否加载相应元素\n- ng-click: 绑定元素点击事件\n- ng-model: 双向绑定，多用于表单\n- ng-change/ng-keyup/ng-focus: 绑定事件，多用于表单\n\n此外还有路由、表单验证、作用域等，这里就不详细介绍啦。\n虽然说配合实践是高效学习的一种方式，但是基础和概念也是很重要的哦。\n下面是一些教程：\n[《AngularJS中文网》](http://www.apjs.net/)\n[《w3c菜鸟：AngularJS教程》](http://www.runoob.com/angularjs/angularjs-tutorial.html)\n\n## 结束语\n-----\n自动化搭建对AngularJS应用整体上的了解很有帮助哦，不妨尝试一下啦。\n[此处查看项目代码（仅包含app部分）](https://github.com/godbasin/godbasin.github.io/tree/blog-codes/angular-notes/1-create-angular-project)\n[此处查看页面效果](http://o9grhhyar.bkt.clouddn.com/1-create-angular-project/index.html#/)","slug":"angular-note-1-create-angular-project","published":1,"updated":"2016-08-20T10:54:21.037Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cix45hue50005xotu0fzre19e","content":"<p>最近的一个项目使用AngularJS(v1.2.6)作为前端的框架，《Angular使用笔记》系列用于记录过程中的一些使用和解决方法。<br>本文记录初步搭建项目的过程。<br><a id=\"more\"></a></p>\n<h2 id=\"使用Yeoman自动生成初步完整功能的AngularJS应用\"><a href=\"#使用Yeoman自动生成初步完整功能的AngularJS应用\" class=\"headerlink\" title=\"使用Yeoman自动生成初步完整功能的AngularJS应用\"></a>使用Yeoman自动生成初步完整功能的AngularJS应用</h2><h3 id=\"使用AngularJS的方法\"><a href=\"#使用AngularJS的方法\" class=\"headerlink\" title=\"使用AngularJS的方法\"></a>使用AngularJS的方法</h3><ul>\n<li>1.下载AngularJS源代码，引入到页面内，然后按照<a href=\"http://www.apjs.net/\" target=\"_blank\" rel=\"external\">官方教程</a>进行启动app。</li>\n<li>2.使用自动化构建Grunt/Gulp搭建项目。</li>\n</ul>\n<h3 id=\"自动化搭建\"><a href=\"#自动化搭建\" class=\"headerlink\" title=\"自动化搭建\"></a>自动化搭建</h3><ul>\n<li>本骚念使用的是Yeoman自动搭建，这里有详细教程<a href=\"http://blog.jobbole.com/65399/\" target=\"_blank\" rel=\"external\">《Yeoman官方教程：用Yeoman和AngularJS做Web应用》</a></li>\n<li>自动化搭建的好处：<ul>\n<li>1.对框架的目录组织有个大概的了解</li>\n<li>2.可选择自动引入Bootstrap或者SASS</li>\n<li>3.可选择自动引入需要使用的Angular模块，如下<br><img src=\"http://o905ne85q.bkt.clouddn.com/CF95.tmp.png\" alt=\"image\"></li>\n<li>4.对首次使用AngularJS的小伙伴们来说，可以直观看到如何启用ng-app，以及路由ng-route的使用方式</li>\n<li>5.启动一个基于Node的http服务，通过一系列的Grunt任务来监视你的文件的更改情况，一旦发现文件被改动了，’live reloading’就会自动刷新应用，并更新到浏览器上</li>\n<li>6.可使用grunt命令自动执行规范代码、跑测试、压缩JS和CSS代码（减少网络请求）、优化图片还有编译使用了预处理的代码</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"Gulp-Grunt-Bower-NPM-Yeoman\"><a href=\"#Gulp-Grunt-Bower-NPM-Yeoman\" class=\"headerlink\" title=\"Gulp/Grunt/Bower/NPM/Yeoman\"></a>Gulp/Grunt/Bower/NPM/Yeoman</h3><p>这里简单介绍一下这些工具</p>\n<ul>\n<li>Grunt: Javascript任务运行器。常用来执行需要重复执行的任务，例如压缩、编译、单元测试等。</li>\n<li>Gulp: gulp.js是一种基于流的，代码优于配置的新一代构建工具。Gulp和Grunt 类似。但相比于Grunt的频繁的IO操作，Gulp的流操作，能更快地完成构建。</li>\n<li>Bower: Bower是一个客户端技术的软件包管理器，它可用于搜索、安装和卸载如JavaScript、HTML、CSS之类的网络资源。如YeoMan和Grunt等开发工具则是建立在Bower基础之上。</li>\n<li>NPM: NPM是随同NodeJS一起安装的包管理工具，能解决NodeJS代码部署上的很多问题。是node.js常用来下载以及安装套件的工具。</li>\n<li>Node.js: Node.js是一个事件驱动I/O服务端JavaScript环境，基于Google的V8引擎，简单的说就是运行在服务端的JavaScript。</li>\n<li>Yeoman: Yeoman的目标是通过Grunt和Bower的包装为开发者创建一个易用的工作流，同时可解决前端开发所面临的诸多严重问题，例如零散的依赖关系。主要有三部分组成：yo（脚手架工具）、grunt（构建工具）、bower（包管理器）。</li>\n<li>yo是一个用于构建特定框架的生态系统的代码工具，我们称之为生成器(generator)。</li>\n</ul>\n<h2 id=\"目录组织\"><a href=\"#目录组织\" class=\"headerlink\" title=\"目录组织\"></a>目录组织</h2><hr>\n<p>搭建好初始化的项目，目录组织如下：<br><img src=\"http://o905ne85q.bkt.clouddn.com/5C4E.tmp.png\" alt=\"image\"><br>当然，涉及angular项目的文件在app目录下，其他主要用于自动化构建、生成的环境和管理包引用。<br>现在我们查看一下app目录下文件：<br><img src=\"http://o905ne85q.bkt.clouddn.com/E558.tmp.png\" alt=\"image\"></p>\n<p>当然项目发展文件数量肯定多很多的呢，在js文件成倍增长的时候，该怎么去管理呢？</p>\n<h3 id=\"按照功能分类\"><a href=\"#按照功能分类\" class=\"headerlink\" title=\"按照功能分类\"></a>按照功能分类</h3><ul>\n<li>将directive/controller/service/filter等不同功能的js放置不同的文件夹管理<br><img src=\"http://o905ne85q.bkt.clouddn.com/1350.tmp.png\" alt=\"image\"></li>\n</ul>\n<h3 id=\"按模块分类\"><a href=\"#按模块分类\" class=\"headerlink\" title=\"按模块分类\"></a>按模块分类</h3><ul>\n<li>将每个模块的文件放置在一个文件夹内管理<br><img src=\"http://o905ne85q.bkt.clouddn.com/14A2.tmp.png\" alt=\"image\"></li>\n</ul>\n<p>本骚年用的是按照功能划分的，这种方式相对本骚年来说比较容易管理。<br>或者你们如果有更好的管理目录组织方式，当然也欢迎分享啦。</p>\n<h2 id=\"Angular基本概念\"><a href=\"#Angular基本概念\" class=\"headerlink\" title=\"Angular基本概念\"></a>Angular基本概念</h2><hr>\n<p>此处稍微介绍一下本骚年用的比较多的angular部分</p>\n<h3 id=\"AngularJS模块\"><a href=\"#AngularJS模块\" class=\"headerlink\" title=\"AngularJS模块\"></a>AngularJS模块</h3><ul>\n<li>ng-app: 模块用于单独的逻辑表示服务，控制器，应用程序等，并保持代码的整洁</li>\n<li>一般一个项目中只会用到一个ng-app，而angular自动启动也仅限于第一个ng-app，故使用多个模块的小伙伴们需要手动启动剩余的模块啦</li>\n<li>使用angular.bootstrap()可启用多个ng-app，<a href=\"http://www.cnblogs.com/whitewolf/archive/2012/08/13/2637262.html\" target=\"_blank\" rel=\"external\">参考</a></li>\n</ul>\n<h3 id=\"AngualrJS视图\"><a href=\"#AngualrJS视图\" class=\"headerlink\" title=\"AngualrJS视图\"></a>AngualrJS视图</h3><ul>\n<li>ng-view: 标记只是简单地创建一个占位符，是一个相应的视图(HTML或ng-template视图)，可以根据配置来放置</li>\n<li>配合ng-route路由可以实现单页应用哦</li>\n</ul>\n<h3 id=\"AngularJS表达式\"><a href=\"#AngularJS表达式\" class=\"headerlink\" title=\"AngularJS表达式\"></a>AngularJS表达式</h3><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;&#123; expression | filter &#125;&#125;</div></pre></td></tr></table></figure>\n<ul>\n<li>其中filter为过滤器，常用于格式转换等</li>\n<li>ng-bind与双大括号表达式差不多，但可以防止页面未加载完全时出现不必要的字符</li>\n</ul>\n<h3 id=\"AngularJS控制器\"><a href=\"#AngularJS控制器\" class=\"headerlink\" title=\"AngularJS控制器\"></a>AngularJS控制器</h3><ul>\n<li>ng-controller: 控制AngularJS应用程序的数据</li>\n<li>常配合路由使用，也可以创建局部作用域来管理其中数据</li>\n</ul>\n<h3 id=\"AngularJS指令\"><a href=\"#AngularJS指令\" class=\"headerlink\" title=\"AngularJS指令\"></a>AngularJS指令</h3><ul>\n<li>angular.directive: 常用来拓展HTML</li>\n<li>对可复用的控件可进行封装，可创建独立作用域，可管理特定DOM事件</li>\n<li>DOM操作尽量封装在指令内部哦</li>\n</ul>\n<h3 id=\"AngularJS-HTML-DOM常用事件和指令\"><a href=\"#AngularJS-HTML-DOM常用事件和指令\" class=\"headerlink\" title=\"AngularJS HTML DOM常用事件和指令\"></a>AngularJS HTML DOM常用事件和指令</h3><ul>\n<li>ng-repeat: 通过数组来循环HTML代码</li>\n<li>ng-show/ng-hide: 隐藏和显示相应元素</li>\n<li>ng-if: 是否加载相应元素</li>\n<li>ng-click: 绑定元素点击事件</li>\n<li>ng-model: 双向绑定，多用于表单</li>\n<li>ng-change/ng-keyup/ng-focus: 绑定事件，多用于表单</li>\n</ul>\n<p>此外还有路由、表单验证、作用域等，这里就不详细介绍啦。<br>虽然说配合实践是高效学习的一种方式，但是基础和概念也是很重要的哦。<br>下面是一些教程：<br><a href=\"http://www.apjs.net/\" target=\"_blank\" rel=\"external\">《AngularJS中文网》</a><br><a href=\"http://www.runoob.com/angularjs/angularjs-tutorial.html\" target=\"_blank\" rel=\"external\">《w3c菜鸟：AngularJS教程》</a></p>\n<h2 id=\"结束语\"><a href=\"#结束语\" class=\"headerlink\" title=\"结束语\"></a>结束语</h2><hr>\n<p>自动化搭建对AngularJS应用整体上的了解很有帮助哦，不妨尝试一下啦。<br><a href=\"https://github.com/godbasin/godbasin.github.io/tree/blog-codes/angular-notes/1-create-angular-project\" target=\"_blank\" rel=\"external\">此处查看项目代码（仅包含app部分）</a><br><a href=\"http://o9grhhyar.bkt.clouddn.com/1-create-angular-project/index.html#/\" target=\"_blank\" rel=\"external\">此处查看页面效果</a></p>\n","excerpt":"<p>最近的一个项目使用AngularJS(v1.2.6)作为前端的框架，《Angular使用笔记》系列用于记录过程中的一些使用和解决方法。<br>本文记录初步搭建项目的过程。<br>","more":"</p>\n<h2 id=\"使用Yeoman自动生成初步完整功能的AngularJS应用\"><a href=\"#使用Yeoman自动生成初步完整功能的AngularJS应用\" class=\"headerlink\" title=\"使用Yeoman自动生成初步完整功能的AngularJS应用\"></a>使用Yeoman自动生成初步完整功能的AngularJS应用</h2><h3 id=\"使用AngularJS的方法\"><a href=\"#使用AngularJS的方法\" class=\"headerlink\" title=\"使用AngularJS的方法\"></a>使用AngularJS的方法</h3><ul>\n<li>1.下载AngularJS源代码，引入到页面内，然后按照<a href=\"http://www.apjs.net/\">官方教程</a>进行启动app。</li>\n<li>2.使用自动化构建Grunt/Gulp搭建项目。</li>\n</ul>\n<h3 id=\"自动化搭建\"><a href=\"#自动化搭建\" class=\"headerlink\" title=\"自动化搭建\"></a>自动化搭建</h3><ul>\n<li>本骚念使用的是Yeoman自动搭建，这里有详细教程<a href=\"http://blog.jobbole.com/65399/\">《Yeoman官方教程：用Yeoman和AngularJS做Web应用》</a></li>\n<li>自动化搭建的好处：<ul>\n<li>1.对框架的目录组织有个大概的了解</li>\n<li>2.可选择自动引入Bootstrap或者SASS</li>\n<li>3.可选择自动引入需要使用的Angular模块，如下<br><img src=\"http://o905ne85q.bkt.clouddn.com/CF95.tmp.png\" alt=\"image\"></li>\n<li>4.对首次使用AngularJS的小伙伴们来说，可以直观看到如何启用ng-app，以及路由ng-route的使用方式</li>\n<li>5.启动一个基于Node的http服务，通过一系列的Grunt任务来监视你的文件的更改情况，一旦发现文件被改动了，’live reloading’就会自动刷新应用，并更新到浏览器上</li>\n<li>6.可使用grunt命令自动执行规范代码、跑测试、压缩JS和CSS代码（减少网络请求）、优化图片还有编译使用了预处理的代码</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"Gulp-Grunt-Bower-NPM-Yeoman\"><a href=\"#Gulp-Grunt-Bower-NPM-Yeoman\" class=\"headerlink\" title=\"Gulp/Grunt/Bower/NPM/Yeoman\"></a>Gulp/Grunt/Bower/NPM/Yeoman</h3><p>这里简单介绍一下这些工具</p>\n<ul>\n<li>Grunt: Javascript任务运行器。常用来执行需要重复执行的任务，例如压缩、编译、单元测试等。</li>\n<li>Gulp: gulp.js是一种基于流的，代码优于配置的新一代构建工具。Gulp和Grunt 类似。但相比于Grunt的频繁的IO操作，Gulp的流操作，能更快地完成构建。</li>\n<li>Bower: Bower是一个客户端技术的软件包管理器，它可用于搜索、安装和卸载如JavaScript、HTML、CSS之类的网络资源。如YeoMan和Grunt等开发工具则是建立在Bower基础之上。</li>\n<li>NPM: NPM是随同NodeJS一起安装的包管理工具，能解决NodeJS代码部署上的很多问题。是node.js常用来下载以及安装套件的工具。</li>\n<li>Node.js: Node.js是一个事件驱动I/O服务端JavaScript环境，基于Google的V8引擎，简单的说就是运行在服务端的JavaScript。</li>\n<li>Yeoman: Yeoman的目标是通过Grunt和Bower的包装为开发者创建一个易用的工作流，同时可解决前端开发所面临的诸多严重问题，例如零散的依赖关系。主要有三部分组成：yo（脚手架工具）、grunt（构建工具）、bower（包管理器）。</li>\n<li>yo是一个用于构建特定框架的生态系统的代码工具，我们称之为生成器(generator)。</li>\n</ul>\n<h2 id=\"目录组织\"><a href=\"#目录组织\" class=\"headerlink\" title=\"目录组织\"></a>目录组织</h2><hr>\n<p>搭建好初始化的项目，目录组织如下：<br><img src=\"http://o905ne85q.bkt.clouddn.com/5C4E.tmp.png\" alt=\"image\"><br>当然，涉及angular项目的文件在app目录下，其他主要用于自动化构建、生成的环境和管理包引用。<br>现在我们查看一下app目录下文件：<br><img src=\"http://o905ne85q.bkt.clouddn.com/E558.tmp.png\" alt=\"image\"></p>\n<p>当然项目发展文件数量肯定多很多的呢，在js文件成倍增长的时候，该怎么去管理呢？</p>\n<h3 id=\"按照功能分类\"><a href=\"#按照功能分类\" class=\"headerlink\" title=\"按照功能分类\"></a>按照功能分类</h3><ul>\n<li>将directive/controller/service/filter等不同功能的js放置不同的文件夹管理<br><img src=\"http://o905ne85q.bkt.clouddn.com/1350.tmp.png\" alt=\"image\"></li>\n</ul>\n<h3 id=\"按模块分类\"><a href=\"#按模块分类\" class=\"headerlink\" title=\"按模块分类\"></a>按模块分类</h3><ul>\n<li>将每个模块的文件放置在一个文件夹内管理<br><img src=\"http://o905ne85q.bkt.clouddn.com/14A2.tmp.png\" alt=\"image\"></li>\n</ul>\n<p>本骚年用的是按照功能划分的，这种方式相对本骚年来说比较容易管理。<br>或者你们如果有更好的管理目录组织方式，当然也欢迎分享啦。</p>\n<h2 id=\"Angular基本概念\"><a href=\"#Angular基本概念\" class=\"headerlink\" title=\"Angular基本概念\"></a>Angular基本概念</h2><hr>\n<p>此处稍微介绍一下本骚年用的比较多的angular部分</p>\n<h3 id=\"AngularJS模块\"><a href=\"#AngularJS模块\" class=\"headerlink\" title=\"AngularJS模块\"></a>AngularJS模块</h3><ul>\n<li>ng-app: 模块用于单独的逻辑表示服务，控制器，应用程序等，并保持代码的整洁</li>\n<li>一般一个项目中只会用到一个ng-app，而angular自动启动也仅限于第一个ng-app，故使用多个模块的小伙伴们需要手动启动剩余的模块啦</li>\n<li>使用angular.bootstrap()可启用多个ng-app，<a href=\"http://www.cnblogs.com/whitewolf/archive/2012/08/13/2637262.html\">参考</a></li>\n</ul>\n<h3 id=\"AngualrJS视图\"><a href=\"#AngualrJS视图\" class=\"headerlink\" title=\"AngualrJS视图\"></a>AngualrJS视图</h3><ul>\n<li>ng-view: 标记只是简单地创建一个占位符，是一个相应的视图(HTML或ng-template视图)，可以根据配置来放置</li>\n<li>配合ng-route路由可以实现单页应用哦</li>\n</ul>\n<h3 id=\"AngularJS表达式\"><a href=\"#AngularJS表达式\" class=\"headerlink\" title=\"AngularJS表达式\"></a>AngularJS表达式</h3><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;&#123; expression | filter &#125;&#125;</div></pre></td></tr></table></figure>\n<ul>\n<li>其中filter为过滤器，常用于格式转换等</li>\n<li>ng-bind与双大括号表达式差不多，但可以防止页面未加载完全时出现不必要的字符</li>\n</ul>\n<h3 id=\"AngularJS控制器\"><a href=\"#AngularJS控制器\" class=\"headerlink\" title=\"AngularJS控制器\"></a>AngularJS控制器</h3><ul>\n<li>ng-controller: 控制AngularJS应用程序的数据</li>\n<li>常配合路由使用，也可以创建局部作用域来管理其中数据</li>\n</ul>\n<h3 id=\"AngularJS指令\"><a href=\"#AngularJS指令\" class=\"headerlink\" title=\"AngularJS指令\"></a>AngularJS指令</h3><ul>\n<li>angular.directive: 常用来拓展HTML</li>\n<li>对可复用的控件可进行封装，可创建独立作用域，可管理特定DOM事件</li>\n<li>DOM操作尽量封装在指令内部哦</li>\n</ul>\n<h3 id=\"AngularJS-HTML-DOM常用事件和指令\"><a href=\"#AngularJS-HTML-DOM常用事件和指令\" class=\"headerlink\" title=\"AngularJS HTML DOM常用事件和指令\"></a>AngularJS HTML DOM常用事件和指令</h3><ul>\n<li>ng-repeat: 通过数组来循环HTML代码</li>\n<li>ng-show/ng-hide: 隐藏和显示相应元素</li>\n<li>ng-if: 是否加载相应元素</li>\n<li>ng-click: 绑定元素点击事件</li>\n<li>ng-model: 双向绑定，多用于表单</li>\n<li>ng-change/ng-keyup/ng-focus: 绑定事件，多用于表单</li>\n</ul>\n<p>此外还有路由、表单验证、作用域等，这里就不详细介绍啦。<br>虽然说配合实践是高效学习的一种方式，但是基础和概念也是很重要的哦。<br>下面是一些教程：<br><a href=\"http://www.apjs.net/\">《AngularJS中文网》</a><br><a href=\"http://www.runoob.com/angularjs/angularjs-tutorial.html\">《w3c菜鸟：AngularJS教程》</a></p>\n<h2 id=\"结束语\"><a href=\"#结束语\" class=\"headerlink\" title=\"结束语\"></a>结束语</h2><hr>\n<p>自动化搭建对AngularJS应用整体上的了解很有帮助哦，不妨尝试一下啦。<br><a href=\"https://github.com/godbasin/godbasin.github.io/tree/blog-codes/angular-notes/1-create-angular-project\">此处查看项目代码（仅包含app部分）</a><br><a href=\"http://o9grhhyar.bkt.clouddn.com/1-create-angular-project/index.html#/\">此处查看页面效果</a></p>"},{"title":"Angular使用笔记10-有关路由以及控制器间通信","date":"2016-07-29T14:02:47.000Z","_content":"最近的一个项目使用AngularJS(v1.2.6)作为前端的框架，《Angular使用笔记》系列用于记录过程中的一些使用和解决方法。\n本文记录使用有关路由以及控制器间通信的过程。\n<!--more-->\n\n## ngRoute\n-----\n前面篇章我们已经讲述过路由的简单使用方法，这里我们将对路由传参等进行更详细的介绍。\n### ngRoute包括的内容\nng的路由机制是靠ngRoute提供的，通过hash和history两种方式实现了路由，可以检测浏览器是否支持history来灵活调用相应的方式。\n- 服务$routeProvider用来定义一个路由表，即地址栏与视图模板的映射\n- 服务$routeParams保存了地址栏中的参数，例如{id : 1, name : 'tom'}\n- 服务$route完成路由匹配，并且提供路由相关的属性访问及事件，如访问当前路由对应的controller\n- 指令ngView用来在主视图中指定加载子视图的区域\nng-view的实现原理，是根据路由的切换，动态编译html模板——$compile(html)(scope)\n\n以上内容再加上$location服务，则可实现一个单页面应用。\n\n### $routeProvider\n$routeProvider服务提供两种方法：\n- when()：配置路径和参数\n  - when的第二个参数\n    - controller： 对应路径的控制器函数，或者名称\n    - controllerAs： 给控制器起个别名\n    - template： 对应路径的页面模板，会出现在ng-view处\n    - templateUrl： 对应模板的路径\n    - resolve： 该属性会以键值对对象的形式，给路由相关的控制器绑定服务或者值。然后把执行的结果值或者对应的服务引用，注入到控制器中。如果resolve中是一个promise对象，那么会等它执行成功后，才注入到控制器中，此时控制器会等待resolve中的执行结果\n    - redirectTo：重定向地址\n    - reloadOnSearch：设置是否在只有地址改变时，才加载对应的模板;search和params改变都不会加载模板\n    - caseInsensitiveMatch ：路径区分大小写\n\n``` javascript\nresolve: {\n\t//设置三秒的延迟Promise，该页面在3秒后才会加载成功\n\tdelay: function($q, $timeout) {\n\t\tvar delay = $q.defer();\n\t\t$timeout(delay.resolve, 3000);\n\t\treturn delay.promise;\n\t}\n}\n```\n- otherwise：配置其他的路径跳转，即default\n\n### $route\n- $route.reload()方法可以实现刷新路由\n- $route服务提供了current和routes属性\n- $route服务提供以下几个事件：\n使用$on来调用事件\n  - $routeChangeStart 路由发生变化时被触发\n  - $routeChangesSuccess 路由成功时被触发\n  - $routeChangeError 路由异常时被触发\n  - $routeUpdate 路由更新时被触发\n\n### $routeParams\n$routeParams服务可获取路由中的参数，当路由成功后才能获取。\n``` javascript\n.when('/example/:id',{}) //设置路由参数id\n//控制器中获取参数\napp.controller('ExampleController', ['$routeParams', function($routeParams){\n    var id = $routeParams.id;\n    //使用id获取相关id值\n}]);\n```\n- $routeParams和$route.current.params\n\t> $route.current.params在路由发生变化时会改变\n\t> $routeParams只有当路由成功时才会改变\n\t> 这里有个很好的[例子](https://docs.angularjs.org/api/ngRoute/service/$route#example)\n\n### $location\n$location服务解析地址栏中的URL（基于window.location），可在应用代码中获取到。\n- 暴露当前地址栏的URL，可获取并监听或改变URL\n- 当出现以下情况时同步URL\n  - 改变地址栏\n  - 点击了后退按钮（或者点击了历史链接）\n  - 点击了一个链接\n- 可用（protocol, host, port, path, search, hash）获取URL对象的具体内容\n\n### 参考\n- [《走进AngularJs(八) ng的路由机制》](http://www.2cto.com/kf/201312/265979.html)\n- [《AngularJs ng-route路由详解》](http://www.cnblogs.com/xing901022/p/5154358.html?utm_source=tuicool&utm_medium=referral)\n- [《AngularJS开发指南27：使用$location》](http://www.angularjs.cn/A00M)\n\n## Controller间通信\n-----\n### angular控制器通信的方式\n- 1.利用作用域继承的方式\n即子控制器继承父控制器中的内容。\n- 2.基于事件的方式\n即$on,$emit,$boardcast这三种方式。\n- 3.服务方式\n写一个服务的单例然后通过注入来使用。\n\n### 利用作用域的继承方式\n作用域的继承是基于javascript的原型继承方式。\n- 当作用域上面的值为基本类型的时候，修改父作用域上面的值会影响到子作用域，修改子作用域只会影响子作用域的值，不会影响父作用域上面的值\n- 作用域上的值为对象（引用类型），任何一方的修改都能影响另一方\n\n### 基于事件的方式\nAngularjs为在scope中为我们提供了冒泡和隧道机制。\n- $broadcast会把事件广播给所有子级以下的作用域\n- $emit则会将事件冒泡传递给父级以上的作用域\n- $on则是angularjs的事件注册函数，表示事件监听\n> 兄弟控制间进行通信：\n> 兄弟控制中向父作用域触发一个事件，然后在父作用域中监听事件，再广播给子作用域。\n\n### angular服务的方式\nangular服务中生成一个对象，该对象就可以利用依赖注入的方式在所有的控制器中共享。\n\n### 参考\n[《AngularJS控制器controller如何通信？》](https://segmentfault.com/a/1190000000639592)\n\n## 结束语\n-----\n路由参数的传递以及控制器直接的通信，配合使用能获得更多的功能呢。","source":"_posts/angular-note-10-route-and-controller-conmunitaion.md","raw":"---\ntitle: Angular使用笔记10-有关路由以及控制器间通信\ndate: 2016-07-29 22:02:47\ncategories: angular混搭\ntags: 笔记\n---\n最近的一个项目使用AngularJS(v1.2.6)作为前端的框架，《Angular使用笔记》系列用于记录过程中的一些使用和解决方法。\n本文记录使用有关路由以及控制器间通信的过程。\n<!--more-->\n\n## ngRoute\n-----\n前面篇章我们已经讲述过路由的简单使用方法，这里我们将对路由传参等进行更详细的介绍。\n### ngRoute包括的内容\nng的路由机制是靠ngRoute提供的，通过hash和history两种方式实现了路由，可以检测浏览器是否支持history来灵活调用相应的方式。\n- 服务$routeProvider用来定义一个路由表，即地址栏与视图模板的映射\n- 服务$routeParams保存了地址栏中的参数，例如{id : 1, name : 'tom'}\n- 服务$route完成路由匹配，并且提供路由相关的属性访问及事件，如访问当前路由对应的controller\n- 指令ngView用来在主视图中指定加载子视图的区域\nng-view的实现原理，是根据路由的切换，动态编译html模板——$compile(html)(scope)\n\n以上内容再加上$location服务，则可实现一个单页面应用。\n\n### $routeProvider\n$routeProvider服务提供两种方法：\n- when()：配置路径和参数\n  - when的第二个参数\n    - controller： 对应路径的控制器函数，或者名称\n    - controllerAs： 给控制器起个别名\n    - template： 对应路径的页面模板，会出现在ng-view处\n    - templateUrl： 对应模板的路径\n    - resolve： 该属性会以键值对对象的形式，给路由相关的控制器绑定服务或者值。然后把执行的结果值或者对应的服务引用，注入到控制器中。如果resolve中是一个promise对象，那么会等它执行成功后，才注入到控制器中，此时控制器会等待resolve中的执行结果\n    - redirectTo：重定向地址\n    - reloadOnSearch：设置是否在只有地址改变时，才加载对应的模板;search和params改变都不会加载模板\n    - caseInsensitiveMatch ：路径区分大小写\n\n``` javascript\nresolve: {\n\t//设置三秒的延迟Promise，该页面在3秒后才会加载成功\n\tdelay: function($q, $timeout) {\n\t\tvar delay = $q.defer();\n\t\t$timeout(delay.resolve, 3000);\n\t\treturn delay.promise;\n\t}\n}\n```\n- otherwise：配置其他的路径跳转，即default\n\n### $route\n- $route.reload()方法可以实现刷新路由\n- $route服务提供了current和routes属性\n- $route服务提供以下几个事件：\n使用$on来调用事件\n  - $routeChangeStart 路由发生变化时被触发\n  - $routeChangesSuccess 路由成功时被触发\n  - $routeChangeError 路由异常时被触发\n  - $routeUpdate 路由更新时被触发\n\n### $routeParams\n$routeParams服务可获取路由中的参数，当路由成功后才能获取。\n``` javascript\n.when('/example/:id',{}) //设置路由参数id\n//控制器中获取参数\napp.controller('ExampleController', ['$routeParams', function($routeParams){\n    var id = $routeParams.id;\n    //使用id获取相关id值\n}]);\n```\n- $routeParams和$route.current.params\n\t> $route.current.params在路由发生变化时会改变\n\t> $routeParams只有当路由成功时才会改变\n\t> 这里有个很好的[例子](https://docs.angularjs.org/api/ngRoute/service/$route#example)\n\n### $location\n$location服务解析地址栏中的URL（基于window.location），可在应用代码中获取到。\n- 暴露当前地址栏的URL，可获取并监听或改变URL\n- 当出现以下情况时同步URL\n  - 改变地址栏\n  - 点击了后退按钮（或者点击了历史链接）\n  - 点击了一个链接\n- 可用（protocol, host, port, path, search, hash）获取URL对象的具体内容\n\n### 参考\n- [《走进AngularJs(八) ng的路由机制》](http://www.2cto.com/kf/201312/265979.html)\n- [《AngularJs ng-route路由详解》](http://www.cnblogs.com/xing901022/p/5154358.html?utm_source=tuicool&utm_medium=referral)\n- [《AngularJS开发指南27：使用$location》](http://www.angularjs.cn/A00M)\n\n## Controller间通信\n-----\n### angular控制器通信的方式\n- 1.利用作用域继承的方式\n即子控制器继承父控制器中的内容。\n- 2.基于事件的方式\n即$on,$emit,$boardcast这三种方式。\n- 3.服务方式\n写一个服务的单例然后通过注入来使用。\n\n### 利用作用域的继承方式\n作用域的继承是基于javascript的原型继承方式。\n- 当作用域上面的值为基本类型的时候，修改父作用域上面的值会影响到子作用域，修改子作用域只会影响子作用域的值，不会影响父作用域上面的值\n- 作用域上的值为对象（引用类型），任何一方的修改都能影响另一方\n\n### 基于事件的方式\nAngularjs为在scope中为我们提供了冒泡和隧道机制。\n- $broadcast会把事件广播给所有子级以下的作用域\n- $emit则会将事件冒泡传递给父级以上的作用域\n- $on则是angularjs的事件注册函数，表示事件监听\n> 兄弟控制间进行通信：\n> 兄弟控制中向父作用域触发一个事件，然后在父作用域中监听事件，再广播给子作用域。\n\n### angular服务的方式\nangular服务中生成一个对象，该对象就可以利用依赖注入的方式在所有的控制器中共享。\n\n### 参考\n[《AngularJS控制器controller如何通信？》](https://segmentfault.com/a/1190000000639592)\n\n## 结束语\n-----\n路由参数的传递以及控制器直接的通信，配合使用能获得更多的功能呢。","slug":"angular-note-10-route-and-controller-conmunitaion","published":1,"updated":"2016-08-20T10:54:21.039Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cix45hue70006xotu7se1p92h","content":"<p>最近的一个项目使用AngularJS(v1.2.6)作为前端的框架，《Angular使用笔记》系列用于记录过程中的一些使用和解决方法。<br>本文记录使用有关路由以及控制器间通信的过程。<br><a id=\"more\"></a></p>\n<h2 id=\"ngRoute\"><a href=\"#ngRoute\" class=\"headerlink\" title=\"ngRoute\"></a>ngRoute</h2><hr>\n<p>前面篇章我们已经讲述过路由的简单使用方法，这里我们将对路由传参等进行更详细的介绍。</p>\n<h3 id=\"ngRoute包括的内容\"><a href=\"#ngRoute包括的内容\" class=\"headerlink\" title=\"ngRoute包括的内容\"></a>ngRoute包括的内容</h3><p>ng的路由机制是靠ngRoute提供的，通过hash和history两种方式实现了路由，可以检测浏览器是否支持history来灵活调用相应的方式。</p>\n<ul>\n<li>服务$routeProvider用来定义一个路由表，即地址栏与视图模板的映射</li>\n<li>服务$routeParams保存了地址栏中的参数，例如{id : 1, name : ‘tom’}</li>\n<li>服务$route完成路由匹配，并且提供路由相关的属性访问及事件，如访问当前路由对应的controller</li>\n<li>指令ngView用来在主视图中指定加载子视图的区域<br>ng-view的实现原理，是根据路由的切换，动态编译html模板——$compile(html)(scope)</li>\n</ul>\n<p>以上内容再加上$location服务，则可实现一个单页面应用。</p>\n<h3 id=\"routeProvider\"><a href=\"#routeProvider\" class=\"headerlink\" title=\"$routeProvider\"></a>$routeProvider</h3><p>$routeProvider服务提供两种方法：</p>\n<ul>\n<li>when()：配置路径和参数<ul>\n<li>when的第二个参数<ul>\n<li>controller： 对应路径的控制器函数，或者名称</li>\n<li>controllerAs： 给控制器起个别名</li>\n<li>template： 对应路径的页面模板，会出现在ng-view处</li>\n<li>templateUrl： 对应模板的路径</li>\n<li>resolve： 该属性会以键值对对象的形式，给路由相关的控制器绑定服务或者值。然后把执行的结果值或者对应的服务引用，注入到控制器中。如果resolve中是一个promise对象，那么会等它执行成功后，才注入到控制器中，此时控制器会等待resolve中的执行结果</li>\n<li>redirectTo：重定向地址</li>\n<li>reloadOnSearch：设置是否在只有地址改变时，才加载对应的模板;search和params改变都不会加载模板</li>\n<li>caseInsensitiveMatch ：路径区分大小写</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">resolve: &#123;</div><div class=\"line\">  <span class=\"comment\">//设置三秒的延迟Promise，该页面在3秒后才会加载成功</span></div><div class=\"line\">  delay: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">$q, $timeout</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> delay = $q.defer();</div><div class=\"line\">    $timeout(delay.resolve, <span class=\"number\">3000</span>);</div><div class=\"line\">    <span class=\"keyword\">return</span> delay.promise;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<ul>\n<li>otherwise：配置其他的路径跳转，即default</li>\n</ul>\n<h3 id=\"route\"><a href=\"#route\" class=\"headerlink\" title=\"$route\"></a>$route</h3><ul>\n<li>$route.reload()方法可以实现刷新路由</li>\n<li>$route服务提供了current和routes属性</li>\n<li>$route服务提供以下几个事件：<br>使用$on来调用事件<ul>\n<li>$routeChangeStart 路由发生变化时被触发</li>\n<li>$routeChangesSuccess 路由成功时被触发</li>\n<li>$routeChangeError 路由异常时被触发</li>\n<li>$routeUpdate 路由更新时被触发</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"routeParams\"><a href=\"#routeParams\" class=\"headerlink\" title=\"$routeParams\"></a>$routeParams</h3><p>$routeParams服务可获取路由中的参数，当路由成功后才能获取。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">.when(<span class=\"string\">'/example/:id'</span>,&#123;&#125;) <span class=\"comment\">//设置路由参数id</span></div><div class=\"line\"><span class=\"comment\">//控制器中获取参数</span></div><div class=\"line\">app.controller(<span class=\"string\">'ExampleController'</span>, [<span class=\"string\">'$routeParams'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">$routeParams</span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> id = $routeParams.id;</div><div class=\"line\">    <span class=\"comment\">//使用id获取相关id值</span></div><div class=\"line\">&#125;]);</div></pre></td></tr></table></figure></p>\n<ul>\n<li>$routeParams和$route.current.params<blockquote>\n<p>$route.current.params在路由发生变化时会改变<br>$routeParams只有当路由成功时才会改变<br>这里有个很好的<a href=\"https://docs.angularjs.org/api/ngRoute/service/$route#example\" target=\"_blank\" rel=\"external\">例子</a></p>\n</blockquote>\n</li>\n</ul>\n<h3 id=\"location\"><a href=\"#location\" class=\"headerlink\" title=\"$location\"></a>$location</h3><p>$location服务解析地址栏中的URL（基于window.location），可在应用代码中获取到。</p>\n<ul>\n<li>暴露当前地址栏的URL，可获取并监听或改变URL</li>\n<li>当出现以下情况时同步URL<ul>\n<li>改变地址栏</li>\n<li>点击了后退按钮（或者点击了历史链接）</li>\n<li>点击了一个链接</li>\n</ul>\n</li>\n<li>可用（protocol, host, port, path, search, hash）获取URL对象的具体内容</li>\n</ul>\n<h3 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h3><ul>\n<li><a href=\"http://www.2cto.com/kf/201312/265979.html\" target=\"_blank\" rel=\"external\">《走进AngularJs(八) ng的路由机制》</a></li>\n<li><a href=\"http://www.cnblogs.com/xing901022/p/5154358.html?utm_source=tuicool&amp;utm_medium=referral\" target=\"_blank\" rel=\"external\">《AngularJs ng-route路由详解》</a></li>\n<li><a href=\"http://www.angularjs.cn/A00M\" target=\"_blank\" rel=\"external\">《AngularJS开发指南27：使用$location》</a></li>\n</ul>\n<h2 id=\"Controller间通信\"><a href=\"#Controller间通信\" class=\"headerlink\" title=\"Controller间通信\"></a>Controller间通信</h2><hr>\n<h3 id=\"angular控制器通信的方式\"><a href=\"#angular控制器通信的方式\" class=\"headerlink\" title=\"angular控制器通信的方式\"></a>angular控制器通信的方式</h3><ul>\n<li>1.利用作用域继承的方式<br>即子控制器继承父控制器中的内容。</li>\n<li>2.基于事件的方式<br>即$on,$emit,$boardcast这三种方式。</li>\n<li>3.服务方式<br>写一个服务的单例然后通过注入来使用。</li>\n</ul>\n<h3 id=\"利用作用域的继承方式\"><a href=\"#利用作用域的继承方式\" class=\"headerlink\" title=\"利用作用域的继承方式\"></a>利用作用域的继承方式</h3><p>作用域的继承是基于javascript的原型继承方式。</p>\n<ul>\n<li>当作用域上面的值为基本类型的时候，修改父作用域上面的值会影响到子作用域，修改子作用域只会影响子作用域的值，不会影响父作用域上面的值</li>\n<li>作用域上的值为对象（引用类型），任何一方的修改都能影响另一方</li>\n</ul>\n<h3 id=\"基于事件的方式\"><a href=\"#基于事件的方式\" class=\"headerlink\" title=\"基于事件的方式\"></a>基于事件的方式</h3><p>Angularjs为在scope中为我们提供了冒泡和隧道机制。</p>\n<ul>\n<li>$broadcast会把事件广播给所有子级以下的作用域</li>\n<li>$emit则会将事件冒泡传递给父级以上的作用域</li>\n<li>$on则是angularjs的事件注册函数，表示事件监听<blockquote>\n<p>兄弟控制间进行通信：<br>兄弟控制中向父作用域触发一个事件，然后在父作用域中监听事件，再广播给子作用域。</p>\n</blockquote>\n</li>\n</ul>\n<h3 id=\"angular服务的方式\"><a href=\"#angular服务的方式\" class=\"headerlink\" title=\"angular服务的方式\"></a>angular服务的方式</h3><p>angular服务中生成一个对象，该对象就可以利用依赖注入的方式在所有的控制器中共享。</p>\n<h3 id=\"参考-1\"><a href=\"#参考-1\" class=\"headerlink\" title=\"参考\"></a>参考</h3><p><a href=\"https://segmentfault.com/a/1190000000639592\" target=\"_blank\" rel=\"external\">《AngularJS控制器controller如何通信？》</a></p>\n<h2 id=\"结束语\"><a href=\"#结束语\" class=\"headerlink\" title=\"结束语\"></a>结束语</h2><hr>\n<p>路由参数的传递以及控制器直接的通信，配合使用能获得更多的功能呢。</p>\n","excerpt":"<p>最近的一个项目使用AngularJS(v1.2.6)作为前端的框架，《Angular使用笔记》系列用于记录过程中的一些使用和解决方法。<br>本文记录使用有关路由以及控制器间通信的过程。<br>","more":"</p>\n<h2 id=\"ngRoute\"><a href=\"#ngRoute\" class=\"headerlink\" title=\"ngRoute\"></a>ngRoute</h2><hr>\n<p>前面篇章我们已经讲述过路由的简单使用方法，这里我们将对路由传参等进行更详细的介绍。</p>\n<h3 id=\"ngRoute包括的内容\"><a href=\"#ngRoute包括的内容\" class=\"headerlink\" title=\"ngRoute包括的内容\"></a>ngRoute包括的内容</h3><p>ng的路由机制是靠ngRoute提供的，通过hash和history两种方式实现了路由，可以检测浏览器是否支持history来灵活调用相应的方式。</p>\n<ul>\n<li>服务$routeProvider用来定义一个路由表，即地址栏与视图模板的映射</li>\n<li>服务$routeParams保存了地址栏中的参数，例如{id : 1, name : ‘tom’}</li>\n<li>服务$route完成路由匹配，并且提供路由相关的属性访问及事件，如访问当前路由对应的controller</li>\n<li>指令ngView用来在主视图中指定加载子视图的区域<br>ng-view的实现原理，是根据路由的切换，动态编译html模板——$compile(html)(scope)</li>\n</ul>\n<p>以上内容再加上$location服务，则可实现一个单页面应用。</p>\n<h3 id=\"routeProvider\"><a href=\"#routeProvider\" class=\"headerlink\" title=\"$routeProvider\"></a>$routeProvider</h3><p>$routeProvider服务提供两种方法：</p>\n<ul>\n<li>when()：配置路径和参数<ul>\n<li>when的第二个参数<ul>\n<li>controller： 对应路径的控制器函数，或者名称</li>\n<li>controllerAs： 给控制器起个别名</li>\n<li>template： 对应路径的页面模板，会出现在ng-view处</li>\n<li>templateUrl： 对应模板的路径</li>\n<li>resolve： 该属性会以键值对对象的形式，给路由相关的控制器绑定服务或者值。然后把执行的结果值或者对应的服务引用，注入到控制器中。如果resolve中是一个promise对象，那么会等它执行成功后，才注入到控制器中，此时控制器会等待resolve中的执行结果</li>\n<li>redirectTo：重定向地址</li>\n<li>reloadOnSearch：设置是否在只有地址改变时，才加载对应的模板;search和params改变都不会加载模板</li>\n<li>caseInsensitiveMatch ：路径区分大小写</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">resolve: &#123;</div><div class=\"line\">  <span class=\"comment\">//设置三秒的延迟Promise，该页面在3秒后才会加载成功</span></div><div class=\"line\">  delay: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">$q, $timeout</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> delay = $q.defer();</div><div class=\"line\">    $timeout(delay.resolve, <span class=\"number\">3000</span>);</div><div class=\"line\">    <span class=\"keyword\">return</span> delay.promise;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<ul>\n<li>otherwise：配置其他的路径跳转，即default</li>\n</ul>\n<h3 id=\"route\"><a href=\"#route\" class=\"headerlink\" title=\"$route\"></a>$route</h3><ul>\n<li>$route.reload()方法可以实现刷新路由</li>\n<li>$route服务提供了current和routes属性</li>\n<li>$route服务提供以下几个事件：<br>使用$on来调用事件<ul>\n<li>$routeChangeStart 路由发生变化时被触发</li>\n<li>$routeChangesSuccess 路由成功时被触发</li>\n<li>$routeChangeError 路由异常时被触发</li>\n<li>$routeUpdate 路由更新时被触发</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"routeParams\"><a href=\"#routeParams\" class=\"headerlink\" title=\"$routeParams\"></a>$routeParams</h3><p>$routeParams服务可获取路由中的参数，当路由成功后才能获取。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">.when(<span class=\"string\">'/example/:id'</span>,&#123;&#125;) <span class=\"comment\">//设置路由参数id</span></div><div class=\"line\"><span class=\"comment\">//控制器中获取参数</span></div><div class=\"line\">app.controller(<span class=\"string\">'ExampleController'</span>, [<span class=\"string\">'$routeParams'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">$routeParams</span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> id = $routeParams.id;</div><div class=\"line\">    <span class=\"comment\">//使用id获取相关id值</span></div><div class=\"line\">&#125;]);</div></pre></td></tr></table></figure></p>\n<ul>\n<li>$routeParams和$route.current.params<blockquote>\n<p>$route.current.params在路由发生变化时会改变<br>$routeParams只有当路由成功时才会改变<br>这里有个很好的<a href=\"https://docs.angularjs.org/api/ngRoute/service/$route#example\">例子</a></p>\n</blockquote>\n</li>\n</ul>\n<h3 id=\"location\"><a href=\"#location\" class=\"headerlink\" title=\"$location\"></a>$location</h3><p>$location服务解析地址栏中的URL（基于window.location），可在应用代码中获取到。</p>\n<ul>\n<li>暴露当前地址栏的URL，可获取并监听或改变URL</li>\n<li>当出现以下情况时同步URL<ul>\n<li>改变地址栏</li>\n<li>点击了后退按钮（或者点击了历史链接）</li>\n<li>点击了一个链接</li>\n</ul>\n</li>\n<li>可用（protocol, host, port, path, search, hash）获取URL对象的具体内容</li>\n</ul>\n<h3 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h3><ul>\n<li><a href=\"http://www.2cto.com/kf/201312/265979.html\">《走进AngularJs(八) ng的路由机制》</a></li>\n<li><a href=\"http://www.cnblogs.com/xing901022/p/5154358.html?utm_source=tuicool&amp;utm_medium=referral\">《AngularJs ng-route路由详解》</a></li>\n<li><a href=\"http://www.angularjs.cn/A00M\">《AngularJS开发指南27：使用$location》</a></li>\n</ul>\n<h2 id=\"Controller间通信\"><a href=\"#Controller间通信\" class=\"headerlink\" title=\"Controller间通信\"></a>Controller间通信</h2><hr>\n<h3 id=\"angular控制器通信的方式\"><a href=\"#angular控制器通信的方式\" class=\"headerlink\" title=\"angular控制器通信的方式\"></a>angular控制器通信的方式</h3><ul>\n<li>1.利用作用域继承的方式<br>即子控制器继承父控制器中的内容。</li>\n<li>2.基于事件的方式<br>即$on,$emit,$boardcast这三种方式。</li>\n<li>3.服务方式<br>写一个服务的单例然后通过注入来使用。</li>\n</ul>\n<h3 id=\"利用作用域的继承方式\"><a href=\"#利用作用域的继承方式\" class=\"headerlink\" title=\"利用作用域的继承方式\"></a>利用作用域的继承方式</h3><p>作用域的继承是基于javascript的原型继承方式。</p>\n<ul>\n<li>当作用域上面的值为基本类型的时候，修改父作用域上面的值会影响到子作用域，修改子作用域只会影响子作用域的值，不会影响父作用域上面的值</li>\n<li>作用域上的值为对象（引用类型），任何一方的修改都能影响另一方</li>\n</ul>\n<h3 id=\"基于事件的方式\"><a href=\"#基于事件的方式\" class=\"headerlink\" title=\"基于事件的方式\"></a>基于事件的方式</h3><p>Angularjs为在scope中为我们提供了冒泡和隧道机制。</p>\n<ul>\n<li>$broadcast会把事件广播给所有子级以下的作用域</li>\n<li>$emit则会将事件冒泡传递给父级以上的作用域</li>\n<li>$on则是angularjs的事件注册函数，表示事件监听<blockquote>\n<p>兄弟控制间进行通信：<br>兄弟控制中向父作用域触发一个事件，然后在父作用域中监听事件，再广播给子作用域。</p>\n</blockquote>\n</li>\n</ul>\n<h3 id=\"angular服务的方式\"><a href=\"#angular服务的方式\" class=\"headerlink\" title=\"angular服务的方式\"></a>angular服务的方式</h3><p>angular服务中生成一个对象，该对象就可以利用依赖注入的方式在所有的控制器中共享。</p>\n<h3 id=\"参考-1\"><a href=\"#参考-1\" class=\"headerlink\" title=\"参考\"></a>参考</h3><p><a href=\"https://segmentfault.com/a/1190000000639592\">《AngularJS控制器controller如何通信？》</a></p>\n<h2 id=\"结束语\"><a href=\"#结束语\" class=\"headerlink\" title=\"结束语\"></a>结束语</h2><hr>\n<p>路由参数的传递以及控制器直接的通信，配合使用能获得更多的功能呢。</p>"},{"title":"Angular使用笔记12-Karma的一些配置项","date":"2016-07-31T02:32:41.000Z","_content":"最近的一个项目使用AngularJS(v1.2.6)作为前端的框架，《Angular使用笔记》系列用于记录过程中的一些使用和解决方法。\n本文记录Angular中会使用到Karma的一些配置项。\n<!--more-->\n\n## Karma基本配置\n-----\n### karma.conf.js\n这里我们先直接查看yaomen工程生成的配置文件：\n``` js\nmodule.exports = function(config) {\n  'use strict';\n\n  config.set({\n    // 是否启动热部署，且当文件改变时自动进行测试\n    autoWatch: true,\n\n    // 解析文件和运行的根地址\n    basePath: '../',\n\n    // 使用的测试框架，如jasmine/mocha/qunit/...\n    // 以及其他框架，如requirejs/chai/sinon/...\n    frameworks: [\n      'jasmine'\n    ],\n\n    // 在浏览器中加载的文件/模式\n    files: [\n   'app/bower_components/angular/angular.js',\n   'app/bower_components/angular-mocks/angular-mocks.js',\n   'app/scripts/*.js',\n   'app/scripts/**/*.js',\n   //'test/mock/**/*.js',\n   'test/spec/**/*.js',\n   'app/bower_components/angular-resource/angular-resource.js',\n   'app/bower_components/angular-cookies/angular-cookies.js',\n   'app/bower_components/angular-sanitize/angular-sanitize.js',\n   'app/bower_components/angular-route/angular-route.js'\n    ],\n\n    // 运行的文件/模式\n    exclude: [\n    ],\n\n    // 服务端口\n    port: 8080,\n\n    // 启动的浏览器，可选如下:\n    // - Chrome\n    // - ChromeCanary\n    // - Firefox\n    // - Opera\n    // - Safari (only Mac)\n    // - PhantomJS\n    // - IE (only Windows)\n    browsers: [\n      'PhantomJS'\n    ],\n\n    // 启用的插件\n    plugins: [\n      'karma-phantomjs-launcher',\n      'karma-jasmine'\n    ],\n\n    // 持续积累模式\n    // 若为true捕获浏览器运行测试然后离开\n    singleRun: false,\n\n\t// 输出的日志和报告是启用颜色标注\n    colors: true,\n\n    // 日志的级别\n    // 可使用的值: LOG_DISABLE || LOG_ERROR || LOG_WARN || LOG_INFO || LOG_DEBUG\n    logLevel: config.LOG_INFO,\n\n    // 如果你在使用grunt服务进行测试，可取消注释以下的代码\n    // proxies: {\n    //   '/': 'http://localhost:9000/'\n    // },\n    // 根路径，防止与站点根目录冲突\n    // urlRoot: '_karma_'\n  });\n};\n```\n\n## 完善Angular单元测试\n-----\n\n### 优化测试报告\n上一节我们已经简单说过控制器的单元测试了，运行结果如下：\n![image](http://o905ne85q.bkt.clouddn.com/F184.tmp.png)\n这样的结果显示并不是很清晰，我们下面将使用mocha的测试报告，这里使用插件[karma-mocha-reporter](https://github.com/litixsoft/karma-mocha-reporter)。\n- 安装依赖\n\n``` cmd\nnpm install karma-mocha-reporter --save-dev\n```\n- karma.conf.js配置\n我们需要在karma配置文件中添加相关的配置：\n\n``` js\n// 使用的测试结果报告\n// 可选的值: 'dots', 'progress', 'mocha'\nreporters: ['mocha'],\n// 添加插件\nplugins: [\n\t'karma-phantomjs-launcher',\n\t'karma-jasmine'，\n\t'karma-mocha-reporter'\n],\n```\n\n现在运行我们的测试，可以看到测试结果如下：\n![image](http://o905ne85q.bkt.clouddn.com/36EE.tmp.png)\n这样的测试报告会比之前的清晰多了呢。\n\n### 测试覆盖率\nkarma的插件[karma-coverage](https://github.com/karma-runner/karma-coverage)提供了测试代码覆盖率的支持。\n- 安装依赖\n\n``` cmd\nnpm install karma karma-coverage --save-dev\n```\n- karma.conf.js配置\n我们需要在karma配置文件中添加相关的配置：\n\n``` js\n// 激活覆盖率报告器\nreporters: ['mocha', 'coverage'],\n// 配置预处理器\npreprocessors: {\n\t// 需要统计测试覆盖率的源文件\n\t// 不要添加测试文件和库文件\n\t'app/scripts/*.js': ['coverage'],\n\t'app/scripts/**/*.js': ['coverage']\n},\n// 配置报告选项\ncoverageReporter: {\n\ttype : 'html',\n\tdir : 'test/coverage/' // 生成报告的位置\n},\n// 添加插件\nplugins: [\n\t'karma-coverage',\n\t'karma-phantomjs-launcher',\n\t'karma-jasmine'，\n\t'karma-mocha-reporter'\n],\n```\n运行`grunt test`进行测试之后，会自动生成代码覆盖率测试报告：\n![image](http://o905ne85q.bkt.clouddn.com/40E2.tmp.png)\n生成的目录如下：\n![image](http://o905ne85q.bkt.clouddn.com/80EB.tmp.png)\n\n### 添加Chrome浏览器测试\n如果需要增加对不同浏览器的测试，需要按照对应的插件，以及进行一些配置。\n这里我们介绍一下添加Chrome浏览器测试的步骤，这里使用[karma-chrome-launcher](https://github.com/karma-runner/karma-chrome-launcher)。\n- 安装依赖\n\n``` cmd\nnpm install karma-chrome-launcher --save-dev\n```\n- karma.conf.js配置\n我们需要在karma配置文件中添加相关的配置：\n\n``` js\n// 添加测试的浏览器\nbrowsers: [\n\t'PhantomJS',\n\t'Chrome'\n],\n// 添加插件\nplugins: [\n\t'karma-phantomjs-launcher',\n\t'karma-chrome-launcher',\n\t'karma-jasmine'，\n\t'karma-mocha-reporter'\n],\n```\n测试中，chrome浏览器会自动打开并运行测试，完毕之后自动关闭。我们可以看到coverage中也新增了Chrome的测试覆盖率报告。\n![image](http://o905ne85q.bkt.clouddn.com/4B40.tmp.png)\n\n## 结束语\n-----\n这里我们介绍了一些Karma相关的配置，karma.conf.js这个文件也需要耐心折腾呢。不过对核心代码进行单元测试的确是个不错的选择，这样我们就能放心去优化代码，知道产品的功能是否受损了呢。\n[此处查看项目代码（仅包含test部分）](https://github.com/godbasin/godbasin.github.io/tree/blog-codes/angular-notes/12-karma-config)\n","source":"_posts/angular-note-12-karma-config.md","raw":"---\ntitle: Angular使用笔记12-Karma的一些配置项\ndate: 2016-07-31 10:32:41\ncategories: angular混搭\ntags: 笔记\n---\n最近的一个项目使用AngularJS(v1.2.6)作为前端的框架，《Angular使用笔记》系列用于记录过程中的一些使用和解决方法。\n本文记录Angular中会使用到Karma的一些配置项。\n<!--more-->\n\n## Karma基本配置\n-----\n### karma.conf.js\n这里我们先直接查看yaomen工程生成的配置文件：\n``` js\nmodule.exports = function(config) {\n  'use strict';\n\n  config.set({\n    // 是否启动热部署，且当文件改变时自动进行测试\n    autoWatch: true,\n\n    // 解析文件和运行的根地址\n    basePath: '../',\n\n    // 使用的测试框架，如jasmine/mocha/qunit/...\n    // 以及其他框架，如requirejs/chai/sinon/...\n    frameworks: [\n      'jasmine'\n    ],\n\n    // 在浏览器中加载的文件/模式\n    files: [\n   'app/bower_components/angular/angular.js',\n   'app/bower_components/angular-mocks/angular-mocks.js',\n   'app/scripts/*.js',\n   'app/scripts/**/*.js',\n   //'test/mock/**/*.js',\n   'test/spec/**/*.js',\n   'app/bower_components/angular-resource/angular-resource.js',\n   'app/bower_components/angular-cookies/angular-cookies.js',\n   'app/bower_components/angular-sanitize/angular-sanitize.js',\n   'app/bower_components/angular-route/angular-route.js'\n    ],\n\n    // 运行的文件/模式\n    exclude: [\n    ],\n\n    // 服务端口\n    port: 8080,\n\n    // 启动的浏览器，可选如下:\n    // - Chrome\n    // - ChromeCanary\n    // - Firefox\n    // - Opera\n    // - Safari (only Mac)\n    // - PhantomJS\n    // - IE (only Windows)\n    browsers: [\n      'PhantomJS'\n    ],\n\n    // 启用的插件\n    plugins: [\n      'karma-phantomjs-launcher',\n      'karma-jasmine'\n    ],\n\n    // 持续积累模式\n    // 若为true捕获浏览器运行测试然后离开\n    singleRun: false,\n\n\t// 输出的日志和报告是启用颜色标注\n    colors: true,\n\n    // 日志的级别\n    // 可使用的值: LOG_DISABLE || LOG_ERROR || LOG_WARN || LOG_INFO || LOG_DEBUG\n    logLevel: config.LOG_INFO,\n\n    // 如果你在使用grunt服务进行测试，可取消注释以下的代码\n    // proxies: {\n    //   '/': 'http://localhost:9000/'\n    // },\n    // 根路径，防止与站点根目录冲突\n    // urlRoot: '_karma_'\n  });\n};\n```\n\n## 完善Angular单元测试\n-----\n\n### 优化测试报告\n上一节我们已经简单说过控制器的单元测试了，运行结果如下：\n![image](http://o905ne85q.bkt.clouddn.com/F184.tmp.png)\n这样的结果显示并不是很清晰，我们下面将使用mocha的测试报告，这里使用插件[karma-mocha-reporter](https://github.com/litixsoft/karma-mocha-reporter)。\n- 安装依赖\n\n``` cmd\nnpm install karma-mocha-reporter --save-dev\n```\n- karma.conf.js配置\n我们需要在karma配置文件中添加相关的配置：\n\n``` js\n// 使用的测试结果报告\n// 可选的值: 'dots', 'progress', 'mocha'\nreporters: ['mocha'],\n// 添加插件\nplugins: [\n\t'karma-phantomjs-launcher',\n\t'karma-jasmine'，\n\t'karma-mocha-reporter'\n],\n```\n\n现在运行我们的测试，可以看到测试结果如下：\n![image](http://o905ne85q.bkt.clouddn.com/36EE.tmp.png)\n这样的测试报告会比之前的清晰多了呢。\n\n### 测试覆盖率\nkarma的插件[karma-coverage](https://github.com/karma-runner/karma-coverage)提供了测试代码覆盖率的支持。\n- 安装依赖\n\n``` cmd\nnpm install karma karma-coverage --save-dev\n```\n- karma.conf.js配置\n我们需要在karma配置文件中添加相关的配置：\n\n``` js\n// 激活覆盖率报告器\nreporters: ['mocha', 'coverage'],\n// 配置预处理器\npreprocessors: {\n\t// 需要统计测试覆盖率的源文件\n\t// 不要添加测试文件和库文件\n\t'app/scripts/*.js': ['coverage'],\n\t'app/scripts/**/*.js': ['coverage']\n},\n// 配置报告选项\ncoverageReporter: {\n\ttype : 'html',\n\tdir : 'test/coverage/' // 生成报告的位置\n},\n// 添加插件\nplugins: [\n\t'karma-coverage',\n\t'karma-phantomjs-launcher',\n\t'karma-jasmine'，\n\t'karma-mocha-reporter'\n],\n```\n运行`grunt test`进行测试之后，会自动生成代码覆盖率测试报告：\n![image](http://o905ne85q.bkt.clouddn.com/40E2.tmp.png)\n生成的目录如下：\n![image](http://o905ne85q.bkt.clouddn.com/80EB.tmp.png)\n\n### 添加Chrome浏览器测试\n如果需要增加对不同浏览器的测试，需要按照对应的插件，以及进行一些配置。\n这里我们介绍一下添加Chrome浏览器测试的步骤，这里使用[karma-chrome-launcher](https://github.com/karma-runner/karma-chrome-launcher)。\n- 安装依赖\n\n``` cmd\nnpm install karma-chrome-launcher --save-dev\n```\n- karma.conf.js配置\n我们需要在karma配置文件中添加相关的配置：\n\n``` js\n// 添加测试的浏览器\nbrowsers: [\n\t'PhantomJS',\n\t'Chrome'\n],\n// 添加插件\nplugins: [\n\t'karma-phantomjs-launcher',\n\t'karma-chrome-launcher',\n\t'karma-jasmine'，\n\t'karma-mocha-reporter'\n],\n```\n测试中，chrome浏览器会自动打开并运行测试，完毕之后自动关闭。我们可以看到coverage中也新增了Chrome的测试覆盖率报告。\n![image](http://o905ne85q.bkt.clouddn.com/4B40.tmp.png)\n\n## 结束语\n-----\n这里我们介绍了一些Karma相关的配置，karma.conf.js这个文件也需要耐心折腾呢。不过对核心代码进行单元测试的确是个不错的选择，这样我们就能放心去优化代码，知道产品的功能是否受损了呢。\n[此处查看项目代码（仅包含test部分）](https://github.com/godbasin/godbasin.github.io/tree/blog-codes/angular-notes/12-karma-config)\n","slug":"angular-note-12-karma-config","published":1,"updated":"2016-08-20T10:54:21.045Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cix45huec000axotu4eq56a2r","content":"<p>最近的一个项目使用AngularJS(v1.2.6)作为前端的框架，《Angular使用笔记》系列用于记录过程中的一些使用和解决方法。<br>本文记录Angular中会使用到Karma的一些配置项。<br><a id=\"more\"></a></p>\n<h2 id=\"Karma基本配置\"><a href=\"#Karma基本配置\" class=\"headerlink\" title=\"Karma基本配置\"></a>Karma基本配置</h2><hr>\n<h3 id=\"karma-conf-js\"><a href=\"#karma-conf-js\" class=\"headerlink\" title=\"karma.conf.js\"></a>karma.conf.js</h3><p>这里我们先直接查看yaomen工程生成的配置文件：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">module</span>.exports = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">config</span>) </span>&#123;</div><div class=\"line\"><span class=\"meta\">  'use strict'</span>;</div><div class=\"line\"></div><div class=\"line\">  config.set(&#123;</div><div class=\"line\">    <span class=\"comment\">// 是否启动热部署，且当文件改变时自动进行测试</span></div><div class=\"line\">    autoWatch: <span class=\"literal\">true</span>,</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// 解析文件和运行的根地址</span></div><div class=\"line\">    basePath: <span class=\"string\">'../'</span>,</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// 使用的测试框架，如jasmine/mocha/qunit/...</span></div><div class=\"line\">    <span class=\"comment\">// 以及其他框架，如requirejs/chai/sinon/...</span></div><div class=\"line\">    frameworks: [</div><div class=\"line\">      <span class=\"string\">'jasmine'</span></div><div class=\"line\">    ],</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// 在浏览器中加载的文件/模式</span></div><div class=\"line\">    files: [</div><div class=\"line\">   <span class=\"string\">'app/bower_components/angular/angular.js'</span>,</div><div class=\"line\">   <span class=\"string\">'app/bower_components/angular-mocks/angular-mocks.js'</span>,</div><div class=\"line\">   <span class=\"string\">'app/scripts/*.js'</span>,</div><div class=\"line\">   <span class=\"string\">'app/scripts/**/*.js'</span>,</div><div class=\"line\">   <span class=\"comment\">//'test/mock/**/*.js',</span></div><div class=\"line\">   <span class=\"string\">'test/spec/**/*.js'</span>,</div><div class=\"line\">   <span class=\"string\">'app/bower_components/angular-resource/angular-resource.js'</span>,</div><div class=\"line\">   <span class=\"string\">'app/bower_components/angular-cookies/angular-cookies.js'</span>,</div><div class=\"line\">   <span class=\"string\">'app/bower_components/angular-sanitize/angular-sanitize.js'</span>,</div><div class=\"line\">   <span class=\"string\">'app/bower_components/angular-route/angular-route.js'</span></div><div class=\"line\">    ],</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// 运行的文件/模式</span></div><div class=\"line\">    exclude: [</div><div class=\"line\">    ],</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// 服务端口</span></div><div class=\"line\">    port: <span class=\"number\">8080</span>,</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// 启动的浏览器，可选如下:</span></div><div class=\"line\">    <span class=\"comment\">// - Chrome</span></div><div class=\"line\">    <span class=\"comment\">// - ChromeCanary</span></div><div class=\"line\">    <span class=\"comment\">// - Firefox</span></div><div class=\"line\">    <span class=\"comment\">// - Opera</span></div><div class=\"line\">    <span class=\"comment\">// - Safari (only Mac)</span></div><div class=\"line\">    <span class=\"comment\">// - PhantomJS</span></div><div class=\"line\">    <span class=\"comment\">// - IE (only Windows)</span></div><div class=\"line\">    browsers: [</div><div class=\"line\">      <span class=\"string\">'PhantomJS'</span></div><div class=\"line\">    ],</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// 启用的插件</span></div><div class=\"line\">    plugins: [</div><div class=\"line\">      <span class=\"string\">'karma-phantomjs-launcher'</span>,</div><div class=\"line\">      <span class=\"string\">'karma-jasmine'</span></div><div class=\"line\">    ],</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// 持续积累模式</span></div><div class=\"line\">    <span class=\"comment\">// 若为true捕获浏览器运行测试然后离开</span></div><div class=\"line\">    singleRun: <span class=\"literal\">false</span>,</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">// 输出的日志和报告是启用颜色标注</span></div><div class=\"line\">    colors: <span class=\"literal\">true</span>,</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// 日志的级别</span></div><div class=\"line\">    <span class=\"comment\">// 可使用的值: LOG_DISABLE || LOG_ERROR || LOG_WARN || LOG_INFO || LOG_DEBUG</span></div><div class=\"line\">    logLevel: config.LOG_INFO,</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// 如果你在使用grunt服务进行测试，可取消注释以下的代码</span></div><div class=\"line\">    <span class=\"comment\">// proxies: &#123;</span></div><div class=\"line\">    <span class=\"comment\">//   '/': 'http://localhost:9000/'</span></div><div class=\"line\">    <span class=\"comment\">// &#125;,</span></div><div class=\"line\">    <span class=\"comment\">// 根路径，防止与站点根目录冲突</span></div><div class=\"line\">    <span class=\"comment\">// urlRoot: '_karma_'</span></div><div class=\"line\">  &#125;);</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure></p>\n<h2 id=\"完善Angular单元测试\"><a href=\"#完善Angular单元测试\" class=\"headerlink\" title=\"完善Angular单元测试\"></a>完善Angular单元测试</h2><hr>\n<h3 id=\"优化测试报告\"><a href=\"#优化测试报告\" class=\"headerlink\" title=\"优化测试报告\"></a>优化测试报告</h3><p>上一节我们已经简单说过控制器的单元测试了，运行结果如下：<br><img src=\"http://o905ne85q.bkt.clouddn.com/F184.tmp.png\" alt=\"image\"><br>这样的结果显示并不是很清晰，我们下面将使用mocha的测试报告，这里使用插件<a href=\"https://github.com/litixsoft/karma-mocha-reporter\" target=\"_blank\" rel=\"external\">karma-mocha-reporter</a>。</p>\n<ul>\n<li>安装依赖</li>\n</ul>\n<figure class=\"highlight cmd\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">npm install karma-mocha-reporter --save-dev</div></pre></td></tr></table></figure>\n<ul>\n<li>karma.conf.js配置<br>我们需要在karma配置文件中添加相关的配置：</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 使用的测试结果报告</span></div><div class=\"line\"><span class=\"comment\">// 可选的值: 'dots', 'progress', 'mocha'</span></div><div class=\"line\">reporters: [<span class=\"string\">'mocha'</span>],</div><div class=\"line\"><span class=\"comment\">// 添加插件</span></div><div class=\"line\">plugins: [</div><div class=\"line\">  <span class=\"string\">'karma-phantomjs-launcher'</span>,</div><div class=\"line\">  <span class=\"string\">'karma-jasmine'</span>，</div><div class=\"line\">  <span class=\"string\">'karma-mocha-reporter'</span></div><div class=\"line\">],</div></pre></td></tr></table></figure>\n<p>现在运行我们的测试，可以看到测试结果如下：<br><img src=\"http://o905ne85q.bkt.clouddn.com/36EE.tmp.png\" alt=\"image\"><br>这样的测试报告会比之前的清晰多了呢。</p>\n<h3 id=\"测试覆盖率\"><a href=\"#测试覆盖率\" class=\"headerlink\" title=\"测试覆盖率\"></a>测试覆盖率</h3><p>karma的插件<a href=\"https://github.com/karma-runner/karma-coverage\" target=\"_blank\" rel=\"external\">karma-coverage</a>提供了测试代码覆盖率的支持。</p>\n<ul>\n<li>安装依赖</li>\n</ul>\n<figure class=\"highlight cmd\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">npm install karma karma-coverage --save-dev</div></pre></td></tr></table></figure>\n<ul>\n<li>karma.conf.js配置<br>我们需要在karma配置文件中添加相关的配置：</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 激活覆盖率报告器</span></div><div class=\"line\">reporters: [<span class=\"string\">'mocha'</span>, <span class=\"string\">'coverage'</span>],</div><div class=\"line\"><span class=\"comment\">// 配置预处理器</span></div><div class=\"line\">preprocessors: &#123;</div><div class=\"line\">  <span class=\"comment\">// 需要统计测试覆盖率的源文件</span></div><div class=\"line\">  <span class=\"comment\">// 不要添加测试文件和库文件</span></div><div class=\"line\">  <span class=\"string\">'app/scripts/*.js'</span>: [<span class=\"string\">'coverage'</span>],</div><div class=\"line\">  <span class=\"string\">'app/scripts/**/*.js'</span>: [<span class=\"string\">'coverage'</span>]</div><div class=\"line\">&#125;,</div><div class=\"line\"><span class=\"comment\">// 配置报告选项</span></div><div class=\"line\">coverageReporter: &#123;</div><div class=\"line\">  <span class=\"attr\">type</span> : <span class=\"string\">'html'</span>,</div><div class=\"line\">  <span class=\"attr\">dir</span> : <span class=\"string\">'test/coverage/'</span> <span class=\"comment\">// 生成报告的位置</span></div><div class=\"line\">&#125;,</div><div class=\"line\"><span class=\"comment\">// 添加插件</span></div><div class=\"line\">plugins: [</div><div class=\"line\">  <span class=\"string\">'karma-coverage'</span>,</div><div class=\"line\">  <span class=\"string\">'karma-phantomjs-launcher'</span>,</div><div class=\"line\">  <span class=\"string\">'karma-jasmine'</span>，</div><div class=\"line\">  <span class=\"string\">'karma-mocha-reporter'</span></div><div class=\"line\">],</div></pre></td></tr></table></figure>\n<p>运行<code>grunt test</code>进行测试之后，会自动生成代码覆盖率测试报告：<br><img src=\"http://o905ne85q.bkt.clouddn.com/40E2.tmp.png\" alt=\"image\"><br>生成的目录如下：<br><img src=\"http://o905ne85q.bkt.clouddn.com/80EB.tmp.png\" alt=\"image\"></p>\n<h3 id=\"添加Chrome浏览器测试\"><a href=\"#添加Chrome浏览器测试\" class=\"headerlink\" title=\"添加Chrome浏览器测试\"></a>添加Chrome浏览器测试</h3><p>如果需要增加对不同浏览器的测试，需要按照对应的插件，以及进行一些配置。<br>这里我们介绍一下添加Chrome浏览器测试的步骤，这里使用<a href=\"https://github.com/karma-runner/karma-chrome-launcher\" target=\"_blank\" rel=\"external\">karma-chrome-launcher</a>。</p>\n<ul>\n<li>安装依赖</li>\n</ul>\n<figure class=\"highlight cmd\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">npm install karma-chrome-launcher --save-dev</div></pre></td></tr></table></figure>\n<ul>\n<li>karma.conf.js配置<br>我们需要在karma配置文件中添加相关的配置：</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 添加测试的浏览器</span></div><div class=\"line\">browsers: [</div><div class=\"line\">  <span class=\"string\">'PhantomJS'</span>,</div><div class=\"line\">  <span class=\"string\">'Chrome'</span></div><div class=\"line\">],</div><div class=\"line\"><span class=\"comment\">// 添加插件</span></div><div class=\"line\">plugins: [</div><div class=\"line\">  <span class=\"string\">'karma-phantomjs-launcher'</span>,</div><div class=\"line\">  <span class=\"string\">'karma-chrome-launcher'</span>,</div><div class=\"line\">  <span class=\"string\">'karma-jasmine'</span>，</div><div class=\"line\">  <span class=\"string\">'karma-mocha-reporter'</span></div><div class=\"line\">],</div></pre></td></tr></table></figure>\n<p>测试中，chrome浏览器会自动打开并运行测试，完毕之后自动关闭。我们可以看到coverage中也新增了Chrome的测试覆盖率报告。<br><img src=\"http://o905ne85q.bkt.clouddn.com/4B40.tmp.png\" alt=\"image\"></p>\n<h2 id=\"结束语\"><a href=\"#结束语\" class=\"headerlink\" title=\"结束语\"></a>结束语</h2><hr>\n<p>这里我们介绍了一些Karma相关的配置，karma.conf.js这个文件也需要耐心折腾呢。不过对核心代码进行单元测试的确是个不错的选择，这样我们就能放心去优化代码，知道产品的功能是否受损了呢。<br><a href=\"https://github.com/godbasin/godbasin.github.io/tree/blog-codes/angular-notes/12-karma-config\" target=\"_blank\" rel=\"external\">此处查看项目代码（仅包含test部分）</a></p>\n","excerpt":"<p>最近的一个项目使用AngularJS(v1.2.6)作为前端的框架，《Angular使用笔记》系列用于记录过程中的一些使用和解决方法。<br>本文记录Angular中会使用到Karma的一些配置项。<br>","more":"</p>\n<h2 id=\"Karma基本配置\"><a href=\"#Karma基本配置\" class=\"headerlink\" title=\"Karma基本配置\"></a>Karma基本配置</h2><hr>\n<h3 id=\"karma-conf-js\"><a href=\"#karma-conf-js\" class=\"headerlink\" title=\"karma.conf.js\"></a>karma.conf.js</h3><p>这里我们先直接查看yaomen工程生成的配置文件：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">module</span>.exports = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">config</span>) </span>&#123;</div><div class=\"line\"><span class=\"meta\">  'use strict'</span>;</div><div class=\"line\"></div><div class=\"line\">  config.set(&#123;</div><div class=\"line\">    <span class=\"comment\">// 是否启动热部署，且当文件改变时自动进行测试</span></div><div class=\"line\">    autoWatch: <span class=\"literal\">true</span>,</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// 解析文件和运行的根地址</span></div><div class=\"line\">    basePath: <span class=\"string\">'../'</span>,</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// 使用的测试框架，如jasmine/mocha/qunit/...</span></div><div class=\"line\">    <span class=\"comment\">// 以及其他框架，如requirejs/chai/sinon/...</span></div><div class=\"line\">    frameworks: [</div><div class=\"line\">      <span class=\"string\">'jasmine'</span></div><div class=\"line\">    ],</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// 在浏览器中加载的文件/模式</span></div><div class=\"line\">    files: [</div><div class=\"line\">   <span class=\"string\">'app/bower_components/angular/angular.js'</span>,</div><div class=\"line\">   <span class=\"string\">'app/bower_components/angular-mocks/angular-mocks.js'</span>,</div><div class=\"line\">   <span class=\"string\">'app/scripts/*.js'</span>,</div><div class=\"line\">   <span class=\"string\">'app/scripts/**/*.js'</span>,</div><div class=\"line\">   <span class=\"comment\">//'test/mock/**/*.js',</span></div><div class=\"line\">   <span class=\"string\">'test/spec/**/*.js'</span>,</div><div class=\"line\">   <span class=\"string\">'app/bower_components/angular-resource/angular-resource.js'</span>,</div><div class=\"line\">   <span class=\"string\">'app/bower_components/angular-cookies/angular-cookies.js'</span>,</div><div class=\"line\">   <span class=\"string\">'app/bower_components/angular-sanitize/angular-sanitize.js'</span>,</div><div class=\"line\">   <span class=\"string\">'app/bower_components/angular-route/angular-route.js'</span></div><div class=\"line\">    ],</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// 运行的文件/模式</span></div><div class=\"line\">    exclude: [</div><div class=\"line\">    ],</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// 服务端口</span></div><div class=\"line\">    port: <span class=\"number\">8080</span>,</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// 启动的浏览器，可选如下:</span></div><div class=\"line\">    <span class=\"comment\">// - Chrome</span></div><div class=\"line\">    <span class=\"comment\">// - ChromeCanary</span></div><div class=\"line\">    <span class=\"comment\">// - Firefox</span></div><div class=\"line\">    <span class=\"comment\">// - Opera</span></div><div class=\"line\">    <span class=\"comment\">// - Safari (only Mac)</span></div><div class=\"line\">    <span class=\"comment\">// - PhantomJS</span></div><div class=\"line\">    <span class=\"comment\">// - IE (only Windows)</span></div><div class=\"line\">    browsers: [</div><div class=\"line\">      <span class=\"string\">'PhantomJS'</span></div><div class=\"line\">    ],</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// 启用的插件</span></div><div class=\"line\">    plugins: [</div><div class=\"line\">      <span class=\"string\">'karma-phantomjs-launcher'</span>,</div><div class=\"line\">      <span class=\"string\">'karma-jasmine'</span></div><div class=\"line\">    ],</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// 持续积累模式</span></div><div class=\"line\">    <span class=\"comment\">// 若为true捕获浏览器运行测试然后离开</span></div><div class=\"line\">    singleRun: <span class=\"literal\">false</span>,</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">// 输出的日志和报告是启用颜色标注</span></div><div class=\"line\">    colors: <span class=\"literal\">true</span>,</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// 日志的级别</span></div><div class=\"line\">    <span class=\"comment\">// 可使用的值: LOG_DISABLE || LOG_ERROR || LOG_WARN || LOG_INFO || LOG_DEBUG</span></div><div class=\"line\">    logLevel: config.LOG_INFO,</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// 如果你在使用grunt服务进行测试，可取消注释以下的代码</span></div><div class=\"line\">    <span class=\"comment\">// proxies: &#123;</span></div><div class=\"line\">    <span class=\"comment\">//   '/': 'http://localhost:9000/'</span></div><div class=\"line\">    <span class=\"comment\">// &#125;,</span></div><div class=\"line\">    <span class=\"comment\">// 根路径，防止与站点根目录冲突</span></div><div class=\"line\">    <span class=\"comment\">// urlRoot: '_karma_'</span></div><div class=\"line\">  &#125;);</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure></p>\n<h2 id=\"完善Angular单元测试\"><a href=\"#完善Angular单元测试\" class=\"headerlink\" title=\"完善Angular单元测试\"></a>完善Angular单元测试</h2><hr>\n<h3 id=\"优化测试报告\"><a href=\"#优化测试报告\" class=\"headerlink\" title=\"优化测试报告\"></a>优化测试报告</h3><p>上一节我们已经简单说过控制器的单元测试了，运行结果如下：<br><img src=\"http://o905ne85q.bkt.clouddn.com/F184.tmp.png\" alt=\"image\"><br>这样的结果显示并不是很清晰，我们下面将使用mocha的测试报告，这里使用插件<a href=\"https://github.com/litixsoft/karma-mocha-reporter\">karma-mocha-reporter</a>。</p>\n<ul>\n<li>安装依赖</li>\n</ul>\n<figure class=\"highlight cmd\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">npm install karma-mocha-reporter --save-dev</div></pre></td></tr></table></figure>\n<ul>\n<li>karma.conf.js配置<br>我们需要在karma配置文件中添加相关的配置：</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 使用的测试结果报告</span></div><div class=\"line\"><span class=\"comment\">// 可选的值: 'dots', 'progress', 'mocha'</span></div><div class=\"line\">reporters: [<span class=\"string\">'mocha'</span>],</div><div class=\"line\"><span class=\"comment\">// 添加插件</span></div><div class=\"line\">plugins: [</div><div class=\"line\">  <span class=\"string\">'karma-phantomjs-launcher'</span>,</div><div class=\"line\">  <span class=\"string\">'karma-jasmine'</span>，</div><div class=\"line\">  <span class=\"string\">'karma-mocha-reporter'</span></div><div class=\"line\">],</div></pre></td></tr></table></figure>\n<p>现在运行我们的测试，可以看到测试结果如下：<br><img src=\"http://o905ne85q.bkt.clouddn.com/36EE.tmp.png\" alt=\"image\"><br>这样的测试报告会比之前的清晰多了呢。</p>\n<h3 id=\"测试覆盖率\"><a href=\"#测试覆盖率\" class=\"headerlink\" title=\"测试覆盖率\"></a>测试覆盖率</h3><p>karma的插件<a href=\"https://github.com/karma-runner/karma-coverage\">karma-coverage</a>提供了测试代码覆盖率的支持。</p>\n<ul>\n<li>安装依赖</li>\n</ul>\n<figure class=\"highlight cmd\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">npm install karma karma-coverage --save-dev</div></pre></td></tr></table></figure>\n<ul>\n<li>karma.conf.js配置<br>我们需要在karma配置文件中添加相关的配置：</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 激活覆盖率报告器</span></div><div class=\"line\">reporters: [<span class=\"string\">'mocha'</span>, <span class=\"string\">'coverage'</span>],</div><div class=\"line\"><span class=\"comment\">// 配置预处理器</span></div><div class=\"line\">preprocessors: &#123;</div><div class=\"line\">  <span class=\"comment\">// 需要统计测试覆盖率的源文件</span></div><div class=\"line\">  <span class=\"comment\">// 不要添加测试文件和库文件</span></div><div class=\"line\">  <span class=\"string\">'app/scripts/*.js'</span>: [<span class=\"string\">'coverage'</span>],</div><div class=\"line\">  <span class=\"string\">'app/scripts/**/*.js'</span>: [<span class=\"string\">'coverage'</span>]</div><div class=\"line\">&#125;,</div><div class=\"line\"><span class=\"comment\">// 配置报告选项</span></div><div class=\"line\">coverageReporter: &#123;</div><div class=\"line\">  <span class=\"attr\">type</span> : <span class=\"string\">'html'</span>,</div><div class=\"line\">  <span class=\"attr\">dir</span> : <span class=\"string\">'test/coverage/'</span> <span class=\"comment\">// 生成报告的位置</span></div><div class=\"line\">&#125;,</div><div class=\"line\"><span class=\"comment\">// 添加插件</span></div><div class=\"line\">plugins: [</div><div class=\"line\">  <span class=\"string\">'karma-coverage'</span>,</div><div class=\"line\">  <span class=\"string\">'karma-phantomjs-launcher'</span>,</div><div class=\"line\">  <span class=\"string\">'karma-jasmine'</span>，</div><div class=\"line\">  <span class=\"string\">'karma-mocha-reporter'</span></div><div class=\"line\">],</div></pre></td></tr></table></figure>\n<p>运行<code>grunt test</code>进行测试之后，会自动生成代码覆盖率测试报告：<br><img src=\"http://o905ne85q.bkt.clouddn.com/40E2.tmp.png\" alt=\"image\"><br>生成的目录如下：<br><img src=\"http://o905ne85q.bkt.clouddn.com/80EB.tmp.png\" alt=\"image\"></p>\n<h3 id=\"添加Chrome浏览器测试\"><a href=\"#添加Chrome浏览器测试\" class=\"headerlink\" title=\"添加Chrome浏览器测试\"></a>添加Chrome浏览器测试</h3><p>如果需要增加对不同浏览器的测试，需要按照对应的插件，以及进行一些配置。<br>这里我们介绍一下添加Chrome浏览器测试的步骤，这里使用<a href=\"https://github.com/karma-runner/karma-chrome-launcher\">karma-chrome-launcher</a>。</p>\n<ul>\n<li>安装依赖</li>\n</ul>\n<figure class=\"highlight cmd\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">npm install karma-chrome-launcher --save-dev</div></pre></td></tr></table></figure>\n<ul>\n<li>karma.conf.js配置<br>我们需要在karma配置文件中添加相关的配置：</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 添加测试的浏览器</span></div><div class=\"line\">browsers: [</div><div class=\"line\">  <span class=\"string\">'PhantomJS'</span>,</div><div class=\"line\">  <span class=\"string\">'Chrome'</span></div><div class=\"line\">],</div><div class=\"line\"><span class=\"comment\">// 添加插件</span></div><div class=\"line\">plugins: [</div><div class=\"line\">  <span class=\"string\">'karma-phantomjs-launcher'</span>,</div><div class=\"line\">  <span class=\"string\">'karma-chrome-launcher'</span>,</div><div class=\"line\">  <span class=\"string\">'karma-jasmine'</span>，</div><div class=\"line\">  <span class=\"string\">'karma-mocha-reporter'</span></div><div class=\"line\">],</div></pre></td></tr></table></figure>\n<p>测试中，chrome浏览器会自动打开并运行测试，完毕之后自动关闭。我们可以看到coverage中也新增了Chrome的测试覆盖率报告。<br><img src=\"http://o905ne85q.bkt.clouddn.com/4B40.tmp.png\" alt=\"image\"></p>\n<h2 id=\"结束语\"><a href=\"#结束语\" class=\"headerlink\" title=\"结束语\"></a>结束语</h2><hr>\n<p>这里我们介绍了一些Karma相关的配置，karma.conf.js这个文件也需要耐心折腾呢。不过对核心代码进行单元测试的确是个不错的选择，这样我们就能放心去优化代码，知道产品的功能是否受损了呢。<br><a href=\"https://github.com/godbasin/godbasin.github.io/tree/blog-codes/angular-notes/12-karma-config\">此处查看项目代码（仅包含test部分）</a></p>"},{"title":"Angular使用笔记15-在Angular中使用Echarts","date":"2016-09-17T03:56:28.000Z","_content":"最近的一个项目使用AngularJS(v1.2.6)作为前端的框架，《Angular使用笔记》系列用于记录过程中的一些使用和解决方法。\n本文记录在Angular中使用Echarts的过程。\n<!--more-->\n\n## Echarts\n-----\n### 简单介绍\nECharts，一个纯Javascript的图表库，可以流畅的运行在PC和移动设备上，兼容当前绝大部分浏览器（IE8/9/10/11，Chrome，Firefox，Safari等），底层依赖轻量级的Canvas类库ZRender，提供直观，生动，可交互，可高度个性化定制的数据可视化图表。\n\n开发者文档见：[echarts3 API](http://echarts.baidu.com/api.html#echarts)\n\n### echarts的使用\n全局echarts对象，在script标签引入echarts.js文件后获得，或者在AMD环境中通过require('echarts')获得。\n\n## 在Angular中使用echarts\n-----\n### 基本步骤\n- bower安装echarts\n\n``` cmd\nbower install echarts --save\n```\n\n安装后我们可在bower_components文件夹中看到echarts，如图：\n![image](http://o905ne85q.bkt.clouddn.com/E400.tmp.png)\n\n- 引入echarts文件\n我们在index.html文件中引入两个文件：\n\n``` html\n<!--引入echarts-->\n<script src=\"bower_components/echarts/dist/echarts.js\"></script>\n<!--引入bmap文件，用于echarts和百度地图结合使用-->\n<script src=\"bower_components/echarts/dist/extension/bmap.js\"></script>\n```\n\n### 添加echarts模块\n这里我们增加一个地图模块，用于展示百度地图相关服务。\n\n- 添加echarts.html模板\n\n``` html\n<!--添加头部菜单模块-->\n<header app-header></header>\n<div class=\"container echarts\">\n\t<h2>Echarts的使用</h2>\n\t<section>\n\t\t<h3>柱状图</h3>\n\t\t<div echarts-histogram></div>\n\t</section>\n\t<section>\n\t\t<h3>结合百度地图的热力分布图</h3>\n\t\t<div echarts-bmap></div>\n\t</section>\n\n</div>\n```\n\n用于展示Echaets服务的相关页面准备完毕，从上面的Html中可看到我们将创建的指令echartsHistogram和echartsBmap的使用。\n\n这里我们并没使用到什么逻辑，故不添加相应的控制器了。\n\n- 添加echarts路由\n在app.js文件中：\n\n``` javascript\n.when('/echarts', {\n\ttemplateUrl: 'views/echarts.html' //other的html页面\n})\n```\n\n### 添加echartsHistogram指令\n在directives文件夹中添加echartsDir.js文件，用于存放echarts相关指令。\n该柱状图示例可从[官网示例](http://echarts.baidu.com/demo.html#bar-tick-align)直接获取。\n``` javascrpit\n/*柱状图示例加载*/\n.directive('echartsHistogram', function() {\n    return {\n        restrict: 'AE',\n        template: '<div></div>',\n        replace: true,\n        link: function(scope, element, attrs) {\n            // 基于准备好的dom，初始化echarts实例\n            var myChart = echarts.init(element[0]);\n\n            var option = {\n                title: {\n                    text: '坐标轴刻度与标签对齐'\n                },\n                color: ['#3398DB'],\n                tooltip: {\n                    trigger: 'axis',\n                    axisPointer: { // 坐标轴指示器，坐标轴触发有效\n                        type: 'shadow' // 默认为直线，可选为：'line' | 'shadow'\n                    }\n                },\n                legend: {\n                    data: ['直接访问']\n                },\n                grid: {\n                    left: '3%',\n                    right: '4%',\n                    bottom: '3%',\n                    containLabel: true\n                },\n                xAxis: [{\n                    type: 'category',\n                    data: ['Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat', 'Sun'],\n                    axisTick: {\n                        alignWithLabel: true\n                    }\n                }],\n                yAxis: [{\n                    type: 'value'\n                }],\n                series: [{\n                    name: '直接访问',\n                    type: 'bar',\n                    barWidth: '60%',\n                    data: [10, 52, 200, 334, 390, 330, 220]\n                }]\n            };\n\n            // 使用刚指定的配置项和数据显示图表。\n            myChart.setOption(option);\n        }\n    };\n});\n```\n\n### 添加echartsBmap指令\n上面我们已经引入了bmap.js文件了，所以可以在指令中直接使用。\n该热力图示例可从[官网示例](http://echarts.baidu.com/demo.html#heatmap-bmap)直接获取。\n- 添加test.json文件用于模拟数据\n- 创建echartsBmap指令\n\n``` javascript\n/*百度地图示例加载*/\n.directive('echartsBmap', ['$http', function($http) {\n    return {\n        restrict: 'AE',\n        template: '<div></div>',\n        replace: true,\n        link: function(scope, element, attrs) {\n            // 基于准备好的dom，初始化echarts实例\n            var myChart = echarts.init(element[0]);\n\n            $http({\n                method: 'GET',\n                url: './scripts/test.json'\n            }).then(function(data) {\n\n                var data = data.data.data;\n                console.log(data);\n\n                var points = [].concat.apply([], data.map(function(track) {\n                    return track.map(function(seg) {\n                        return seg.coord.concat([1]);\n                    });\n                }));\n                var option = {\n                    animation: false,\n                    bmap: {\n                        center: [120.13066322374, 30.240018034923],\n                        zoom: 14,\n                        roam: true\n                    },\n                    visualMap: {\n                        show: false,\n                        top: 'top',\n                        min: 0,\n                        max: 5,\n                        seriesIndex: 0,\n                        calculable: true,\n                        inRange: {\n                            color: ['blue', 'blue', 'green', 'yellow', 'red']\n                        }\n                    },\n                    series: [{\n                        type: 'heatmap',\n                        coordinateSystem: 'bmap',\n                        data: points,\n                        pointSize: 5,\n                        blurSize: 6\n                    }]\n                };\n                // 使用刚指定的配置项和数据显示图表。\n                myChart.setOption(option);\n                if (!app.inNode) {\n                    // 添加百度地图插件\n                    var bmap = myChart.getModel().getComponent('bmap').getBMap();\n                    bmap.addControl(new BMap.MapTypeControl());\n                }\n            });\n        }\n    };\n}]);\n```\n\n### 最终效果\n如图：\n![image](http://o905ne85q.bkt.clouddn.com/365E.tmp.png)\n\n## 结束语\n-----\n在实例中本骚年还创建了另外一个地图服务，用于展示路径，感兴趣的小伙伴也可以自行查看相关的代码呀。\n[此处查看项目代码（仅包含app部分）](https://github.com/godbasin/godbasin.github.io/tree/blog-codes/angular-notes/15-use-echarts)\n[此处查看页面效果](http://o9grhhyar.bkt.clouddn.com/15-use-echarts/index.html#/echarts)","source":"_posts/angular-note-15-use-echarts.md","raw":"---\ntitle: Angular使用笔记15-在Angular中使用Echarts\ndate: 2016-09-17 11:56:28\ncategories: angular混搭\ntags: 笔记\n---\n最近的一个项目使用AngularJS(v1.2.6)作为前端的框架，《Angular使用笔记》系列用于记录过程中的一些使用和解决方法。\n本文记录在Angular中使用Echarts的过程。\n<!--more-->\n\n## Echarts\n-----\n### 简单介绍\nECharts，一个纯Javascript的图表库，可以流畅的运行在PC和移动设备上，兼容当前绝大部分浏览器（IE8/9/10/11，Chrome，Firefox，Safari等），底层依赖轻量级的Canvas类库ZRender，提供直观，生动，可交互，可高度个性化定制的数据可视化图表。\n\n开发者文档见：[echarts3 API](http://echarts.baidu.com/api.html#echarts)\n\n### echarts的使用\n全局echarts对象，在script标签引入echarts.js文件后获得，或者在AMD环境中通过require('echarts')获得。\n\n## 在Angular中使用echarts\n-----\n### 基本步骤\n- bower安装echarts\n\n``` cmd\nbower install echarts --save\n```\n\n安装后我们可在bower_components文件夹中看到echarts，如图：\n![image](http://o905ne85q.bkt.clouddn.com/E400.tmp.png)\n\n- 引入echarts文件\n我们在index.html文件中引入两个文件：\n\n``` html\n<!--引入echarts-->\n<script src=\"bower_components/echarts/dist/echarts.js\"></script>\n<!--引入bmap文件，用于echarts和百度地图结合使用-->\n<script src=\"bower_components/echarts/dist/extension/bmap.js\"></script>\n```\n\n### 添加echarts模块\n这里我们增加一个地图模块，用于展示百度地图相关服务。\n\n- 添加echarts.html模板\n\n``` html\n<!--添加头部菜单模块-->\n<header app-header></header>\n<div class=\"container echarts\">\n\t<h2>Echarts的使用</h2>\n\t<section>\n\t\t<h3>柱状图</h3>\n\t\t<div echarts-histogram></div>\n\t</section>\n\t<section>\n\t\t<h3>结合百度地图的热力分布图</h3>\n\t\t<div echarts-bmap></div>\n\t</section>\n\n</div>\n```\n\n用于展示Echaets服务的相关页面准备完毕，从上面的Html中可看到我们将创建的指令echartsHistogram和echartsBmap的使用。\n\n这里我们并没使用到什么逻辑，故不添加相应的控制器了。\n\n- 添加echarts路由\n在app.js文件中：\n\n``` javascript\n.when('/echarts', {\n\ttemplateUrl: 'views/echarts.html' //other的html页面\n})\n```\n\n### 添加echartsHistogram指令\n在directives文件夹中添加echartsDir.js文件，用于存放echarts相关指令。\n该柱状图示例可从[官网示例](http://echarts.baidu.com/demo.html#bar-tick-align)直接获取。\n``` javascrpit\n/*柱状图示例加载*/\n.directive('echartsHistogram', function() {\n    return {\n        restrict: 'AE',\n        template: '<div></div>',\n        replace: true,\n        link: function(scope, element, attrs) {\n            // 基于准备好的dom，初始化echarts实例\n            var myChart = echarts.init(element[0]);\n\n            var option = {\n                title: {\n                    text: '坐标轴刻度与标签对齐'\n                },\n                color: ['#3398DB'],\n                tooltip: {\n                    trigger: 'axis',\n                    axisPointer: { // 坐标轴指示器，坐标轴触发有效\n                        type: 'shadow' // 默认为直线，可选为：'line' | 'shadow'\n                    }\n                },\n                legend: {\n                    data: ['直接访问']\n                },\n                grid: {\n                    left: '3%',\n                    right: '4%',\n                    bottom: '3%',\n                    containLabel: true\n                },\n                xAxis: [{\n                    type: 'category',\n                    data: ['Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat', 'Sun'],\n                    axisTick: {\n                        alignWithLabel: true\n                    }\n                }],\n                yAxis: [{\n                    type: 'value'\n                }],\n                series: [{\n                    name: '直接访问',\n                    type: 'bar',\n                    barWidth: '60%',\n                    data: [10, 52, 200, 334, 390, 330, 220]\n                }]\n            };\n\n            // 使用刚指定的配置项和数据显示图表。\n            myChart.setOption(option);\n        }\n    };\n});\n```\n\n### 添加echartsBmap指令\n上面我们已经引入了bmap.js文件了，所以可以在指令中直接使用。\n该热力图示例可从[官网示例](http://echarts.baidu.com/demo.html#heatmap-bmap)直接获取。\n- 添加test.json文件用于模拟数据\n- 创建echartsBmap指令\n\n``` javascript\n/*百度地图示例加载*/\n.directive('echartsBmap', ['$http', function($http) {\n    return {\n        restrict: 'AE',\n        template: '<div></div>',\n        replace: true,\n        link: function(scope, element, attrs) {\n            // 基于准备好的dom，初始化echarts实例\n            var myChart = echarts.init(element[0]);\n\n            $http({\n                method: 'GET',\n                url: './scripts/test.json'\n            }).then(function(data) {\n\n                var data = data.data.data;\n                console.log(data);\n\n                var points = [].concat.apply([], data.map(function(track) {\n                    return track.map(function(seg) {\n                        return seg.coord.concat([1]);\n                    });\n                }));\n                var option = {\n                    animation: false,\n                    bmap: {\n                        center: [120.13066322374, 30.240018034923],\n                        zoom: 14,\n                        roam: true\n                    },\n                    visualMap: {\n                        show: false,\n                        top: 'top',\n                        min: 0,\n                        max: 5,\n                        seriesIndex: 0,\n                        calculable: true,\n                        inRange: {\n                            color: ['blue', 'blue', 'green', 'yellow', 'red']\n                        }\n                    },\n                    series: [{\n                        type: 'heatmap',\n                        coordinateSystem: 'bmap',\n                        data: points,\n                        pointSize: 5,\n                        blurSize: 6\n                    }]\n                };\n                // 使用刚指定的配置项和数据显示图表。\n                myChart.setOption(option);\n                if (!app.inNode) {\n                    // 添加百度地图插件\n                    var bmap = myChart.getModel().getComponent('bmap').getBMap();\n                    bmap.addControl(new BMap.MapTypeControl());\n                }\n            });\n        }\n    };\n}]);\n```\n\n### 最终效果\n如图：\n![image](http://o905ne85q.bkt.clouddn.com/365E.tmp.png)\n\n## 结束语\n-----\n在实例中本骚年还创建了另外一个地图服务，用于展示路径，感兴趣的小伙伴也可以自行查看相关的代码呀。\n[此处查看项目代码（仅包含app部分）](https://github.com/godbasin/godbasin.github.io/tree/blog-codes/angular-notes/15-use-echarts)\n[此处查看页面效果](http://o9grhhyar.bkt.clouddn.com/15-use-echarts/index.html#/echarts)","slug":"angular-note-15-use-echarts","published":1,"updated":"2016-09-17T03:57:10.235Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cix45huef000cxotut886hvur","content":"<p>最近的一个项目使用AngularJS(v1.2.6)作为前端的框架，《Angular使用笔记》系列用于记录过程中的一些使用和解决方法。<br>本文记录在Angular中使用Echarts的过程。<br><a id=\"more\"></a></p>\n<h2 id=\"Echarts\"><a href=\"#Echarts\" class=\"headerlink\" title=\"Echarts\"></a>Echarts</h2><hr>\n<h3 id=\"简单介绍\"><a href=\"#简单介绍\" class=\"headerlink\" title=\"简单介绍\"></a>简单介绍</h3><p>ECharts，一个纯Javascript的图表库，可以流畅的运行在PC和移动设备上，兼容当前绝大部分浏览器（IE8/9/10/11，Chrome，Firefox，Safari等），底层依赖轻量级的Canvas类库ZRender，提供直观，生动，可交互，可高度个性化定制的数据可视化图表。</p>\n<p>开发者文档见：<a href=\"http://echarts.baidu.com/api.html#echarts\" target=\"_blank\" rel=\"external\">echarts3 API</a></p>\n<h3 id=\"echarts的使用\"><a href=\"#echarts的使用\" class=\"headerlink\" title=\"echarts的使用\"></a>echarts的使用</h3><p>全局echarts对象，在script标签引入echarts.js文件后获得，或者在AMD环境中通过require(‘echarts’)获得。</p>\n<h2 id=\"在Angular中使用echarts\"><a href=\"#在Angular中使用echarts\" class=\"headerlink\" title=\"在Angular中使用echarts\"></a>在Angular中使用echarts</h2><hr>\n<h3 id=\"基本步骤\"><a href=\"#基本步骤\" class=\"headerlink\" title=\"基本步骤\"></a>基本步骤</h3><ul>\n<li>bower安装echarts</li>\n</ul>\n<figure class=\"highlight cmd\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">bower install echarts --save</div></pre></td></tr></table></figure>\n<p>安装后我们可在bower_components文件夹中看到echarts，如图：<br><img src=\"http://o905ne85q.bkt.clouddn.com/E400.tmp.png\" alt=\"image\"></p>\n<ul>\n<li>引入echarts文件<br>我们在index.html文件中引入两个文件：</li>\n</ul>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">&lt;!--引入echarts--&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"bower_components/echarts/dist/echarts.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div><div class=\"line\"><span class=\"comment\">&lt;!--引入bmap文件，用于echarts和百度地图结合使用--&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"bower_components/echarts/dist/extension/bmap.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div></pre></td></tr></table></figure>\n<h3 id=\"添加echarts模块\"><a href=\"#添加echarts模块\" class=\"headerlink\" title=\"添加echarts模块\"></a>添加echarts模块</h3><p>这里我们增加一个地图模块，用于展示百度地图相关服务。</p>\n<ul>\n<li>添加echarts.html模板</li>\n</ul>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">&lt;!--添加头部菜单模块--&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">header</span> <span class=\"attr\">app-header</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">header</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"container echarts\"</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">h2</span>&gt;</span>Echarts的使用<span class=\"tag\">&lt;/<span class=\"name\">h2</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">section</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">h3</span>&gt;</span>柱状图<span class=\"tag\">&lt;/<span class=\"name\">h3</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">echarts-histogram</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">section</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">section</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">h3</span>&gt;</span>结合百度地图的热力分布图<span class=\"tag\">&lt;/<span class=\"name\">h3</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">echarts-bmap</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">section</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>用于展示Echaets服务的相关页面准备完毕，从上面的Html中可看到我们将创建的指令echartsHistogram和echartsBmap的使用。</p>\n<p>这里我们并没使用到什么逻辑，故不添加相应的控制器了。</p>\n<ul>\n<li>添加echarts路由<br>在app.js文件中：</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">.when(<span class=\"string\">'/echarts'</span>, &#123;</div><div class=\"line\">  <span class=\"attr\">templateUrl</span>: <span class=\"string\">'views/echarts.html'</span> <span class=\"comment\">//other的html页面</span></div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<h3 id=\"添加echartsHistogram指令\"><a href=\"#添加echartsHistogram指令\" class=\"headerlink\" title=\"添加echartsHistogram指令\"></a>添加echartsHistogram指令</h3><p>在directives文件夹中添加echartsDir.js文件，用于存放echarts相关指令。<br>该柱状图示例可从<a href=\"http://echarts.baidu.com/demo.html#bar-tick-align\" target=\"_blank\" rel=\"external\">官网示例</a>直接获取。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div></pre></td><td class=\"code\"><pre><div class=\"line\">/*柱状图示例加载*/</div><div class=\"line\">.directive(&apos;echartsHistogram&apos;, function() &#123;</div><div class=\"line\">    return &#123;</div><div class=\"line\">        restrict: &apos;AE&apos;,</div><div class=\"line\">        template: &apos;&lt;div&gt;&lt;/div&gt;&apos;,</div><div class=\"line\">        replace: true,</div><div class=\"line\">        link: function(scope, element, attrs) &#123;</div><div class=\"line\">            // 基于准备好的dom，初始化echarts实例</div><div class=\"line\">            var myChart = echarts.init(element[0]);</div><div class=\"line\"></div><div class=\"line\">            var option = &#123;</div><div class=\"line\">                title: &#123;</div><div class=\"line\">                    text: &apos;坐标轴刻度与标签对齐&apos;</div><div class=\"line\">                &#125;,</div><div class=\"line\">                color: [&apos;#3398DB&apos;],</div><div class=\"line\">                tooltip: &#123;</div><div class=\"line\">                    trigger: &apos;axis&apos;,</div><div class=\"line\">                    axisPointer: &#123; // 坐标轴指示器，坐标轴触发有效</div><div class=\"line\">                        type: &apos;shadow&apos; // 默认为直线，可选为：&apos;line&apos; | &apos;shadow&apos;</div><div class=\"line\">                    &#125;</div><div class=\"line\">                &#125;,</div><div class=\"line\">                legend: &#123;</div><div class=\"line\">                    data: [&apos;直接访问&apos;]</div><div class=\"line\">                &#125;,</div><div class=\"line\">                grid: &#123;</div><div class=\"line\">                    left: &apos;3%&apos;,</div><div class=\"line\">                    right: &apos;4%&apos;,</div><div class=\"line\">                    bottom: &apos;3%&apos;,</div><div class=\"line\">                    containLabel: true</div><div class=\"line\">                &#125;,</div><div class=\"line\">                xAxis: [&#123;</div><div class=\"line\">                    type: &apos;category&apos;,</div><div class=\"line\">                    data: [&apos;Mon&apos;, &apos;Tue&apos;, &apos;Wed&apos;, &apos;Thu&apos;, &apos;Fri&apos;, &apos;Sat&apos;, &apos;Sun&apos;],</div><div class=\"line\">                    axisTick: &#123;</div><div class=\"line\">                        alignWithLabel: true</div><div class=\"line\">                    &#125;</div><div class=\"line\">                &#125;],</div><div class=\"line\">                yAxis: [&#123;</div><div class=\"line\">                    type: &apos;value&apos;</div><div class=\"line\">                &#125;],</div><div class=\"line\">                series: [&#123;</div><div class=\"line\">                    name: &apos;直接访问&apos;,</div><div class=\"line\">                    type: &apos;bar&apos;,</div><div class=\"line\">                    barWidth: &apos;60%&apos;,</div><div class=\"line\">                    data: [10, 52, 200, 334, 390, 330, 220]</div><div class=\"line\">                &#125;]</div><div class=\"line\">            &#125;;</div><div class=\"line\"></div><div class=\"line\">            // 使用刚指定的配置项和数据显示图表。</div><div class=\"line\">            myChart.setOption(option);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;;</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure></p>\n<h3 id=\"添加echartsBmap指令\"><a href=\"#添加echartsBmap指令\" class=\"headerlink\" title=\"添加echartsBmap指令\"></a>添加echartsBmap指令</h3><p>上面我们已经引入了bmap.js文件了，所以可以在指令中直接使用。<br>该热力图示例可从<a href=\"http://echarts.baidu.com/demo.html#heatmap-bmap\" target=\"_blank\" rel=\"external\">官网示例</a>直接获取。</p>\n<ul>\n<li>添加test.json文件用于模拟数据</li>\n<li>创建echartsBmap指令</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/*百度地图示例加载*/</span></div><div class=\"line\">.directive(<span class=\"string\">'echartsBmap'</span>, [<span class=\"string\">'$http'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">$http</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> &#123;</div><div class=\"line\">        <span class=\"attr\">restrict</span>: <span class=\"string\">'AE'</span>,</div><div class=\"line\">        <span class=\"attr\">template</span>: <span class=\"string\">'&lt;div&gt;&lt;/div&gt;'</span>,</div><div class=\"line\">        <span class=\"attr\">replace</span>: <span class=\"literal\">true</span>,</div><div class=\"line\">        <span class=\"attr\">link</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">scope, element, attrs</span>) </span>&#123;</div><div class=\"line\">            <span class=\"comment\">// 基于准备好的dom，初始化echarts实例</span></div><div class=\"line\">            <span class=\"keyword\">var</span> myChart = echarts.init(element[<span class=\"number\">0</span>]);</div><div class=\"line\"></div><div class=\"line\">            $http(&#123;</div><div class=\"line\">                <span class=\"attr\">method</span>: <span class=\"string\">'GET'</span>,</div><div class=\"line\">                <span class=\"attr\">url</span>: <span class=\"string\">'./scripts/test.json'</span></div><div class=\"line\">            &#125;).then(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">data</span>) </span>&#123;</div><div class=\"line\"></div><div class=\"line\">                <span class=\"keyword\">var</span> data = data.data.data;</div><div class=\"line\">                <span class=\"built_in\">console</span>.log(data);</div><div class=\"line\"></div><div class=\"line\">                <span class=\"keyword\">var</span> points = [].concat.apply([], data.map(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">track</span>) </span>&#123;</div><div class=\"line\">                    <span class=\"keyword\">return</span> track.map(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">seg</span>) </span>&#123;</div><div class=\"line\">                        <span class=\"keyword\">return</span> seg.coord.concat([<span class=\"number\">1</span>]);</div><div class=\"line\">                    &#125;);</div><div class=\"line\">                &#125;));</div><div class=\"line\">                <span class=\"keyword\">var</span> option = &#123;</div><div class=\"line\">                    <span class=\"attr\">animation</span>: <span class=\"literal\">false</span>,</div><div class=\"line\">                    <span class=\"attr\">bmap</span>: &#123;</div><div class=\"line\">                        <span class=\"attr\">center</span>: [<span class=\"number\">120.13066322374</span>, <span class=\"number\">30.240018034923</span>],</div><div class=\"line\">                        <span class=\"attr\">zoom</span>: <span class=\"number\">14</span>,</div><div class=\"line\">                        <span class=\"attr\">roam</span>: <span class=\"literal\">true</span></div><div class=\"line\">                    &#125;,</div><div class=\"line\">                    <span class=\"attr\">visualMap</span>: &#123;</div><div class=\"line\">                        <span class=\"attr\">show</span>: <span class=\"literal\">false</span>,</div><div class=\"line\">                        <span class=\"attr\">top</span>: <span class=\"string\">'top'</span>,</div><div class=\"line\">                        <span class=\"attr\">min</span>: <span class=\"number\">0</span>,</div><div class=\"line\">                        <span class=\"attr\">max</span>: <span class=\"number\">5</span>,</div><div class=\"line\">                        <span class=\"attr\">seriesIndex</span>: <span class=\"number\">0</span>,</div><div class=\"line\">                        <span class=\"attr\">calculable</span>: <span class=\"literal\">true</span>,</div><div class=\"line\">                        <span class=\"attr\">inRange</span>: &#123;</div><div class=\"line\">                            <span class=\"attr\">color</span>: [<span class=\"string\">'blue'</span>, <span class=\"string\">'blue'</span>, <span class=\"string\">'green'</span>, <span class=\"string\">'yellow'</span>, <span class=\"string\">'red'</span>]</div><div class=\"line\">                        &#125;</div><div class=\"line\">                    &#125;,</div><div class=\"line\">                    <span class=\"attr\">series</span>: [&#123;</div><div class=\"line\">                        <span class=\"attr\">type</span>: <span class=\"string\">'heatmap'</span>,</div><div class=\"line\">                        <span class=\"attr\">coordinateSystem</span>: <span class=\"string\">'bmap'</span>,</div><div class=\"line\">                        <span class=\"attr\">data</span>: points,</div><div class=\"line\">                        <span class=\"attr\">pointSize</span>: <span class=\"number\">5</span>,</div><div class=\"line\">                        <span class=\"attr\">blurSize</span>: <span class=\"number\">6</span></div><div class=\"line\">                    &#125;]</div><div class=\"line\">                &#125;;</div><div class=\"line\">                <span class=\"comment\">// 使用刚指定的配置项和数据显示图表。</span></div><div class=\"line\">                myChart.setOption(option);</div><div class=\"line\">                <span class=\"keyword\">if</span> (!app.inNode) &#123;</div><div class=\"line\">                    <span class=\"comment\">// 添加百度地图插件</span></div><div class=\"line\">                    <span class=\"keyword\">var</span> bmap = myChart.getModel().getComponent(<span class=\"string\">'bmap'</span>).getBMap();</div><div class=\"line\">                    bmap.addControl(<span class=\"keyword\">new</span> BMap.MapTypeControl());</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;;</div><div class=\"line\">&#125;]);</div></pre></td></tr></table></figure>\n<h3 id=\"最终效果\"><a href=\"#最终效果\" class=\"headerlink\" title=\"最终效果\"></a>最终效果</h3><p>如图：<br><img src=\"http://o905ne85q.bkt.clouddn.com/365E.tmp.png\" alt=\"image\"></p>\n<h2 id=\"结束语\"><a href=\"#结束语\" class=\"headerlink\" title=\"结束语\"></a>结束语</h2><hr>\n<p>在实例中本骚年还创建了另外一个地图服务，用于展示路径，感兴趣的小伙伴也可以自行查看相关的代码呀。<br><a href=\"https://github.com/godbasin/godbasin.github.io/tree/blog-codes/angular-notes/15-use-echarts\" target=\"_blank\" rel=\"external\">此处查看项目代码（仅包含app部分）</a><br><a href=\"http://o9grhhyar.bkt.clouddn.com/15-use-echarts/index.html#/echarts\" target=\"_blank\" rel=\"external\">此处查看页面效果</a></p>\n","excerpt":"<p>最近的一个项目使用AngularJS(v1.2.6)作为前端的框架，《Angular使用笔记》系列用于记录过程中的一些使用和解决方法。<br>本文记录在Angular中使用Echarts的过程。<br>","more":"</p>\n<h2 id=\"Echarts\"><a href=\"#Echarts\" class=\"headerlink\" title=\"Echarts\"></a>Echarts</h2><hr>\n<h3 id=\"简单介绍\"><a href=\"#简单介绍\" class=\"headerlink\" title=\"简单介绍\"></a>简单介绍</h3><p>ECharts，一个纯Javascript的图表库，可以流畅的运行在PC和移动设备上，兼容当前绝大部分浏览器（IE8/9/10/11，Chrome，Firefox，Safari等），底层依赖轻量级的Canvas类库ZRender，提供直观，生动，可交互，可高度个性化定制的数据可视化图表。</p>\n<p>开发者文档见：<a href=\"http://echarts.baidu.com/api.html#echarts\">echarts3 API</a></p>\n<h3 id=\"echarts的使用\"><a href=\"#echarts的使用\" class=\"headerlink\" title=\"echarts的使用\"></a>echarts的使用</h3><p>全局echarts对象，在script标签引入echarts.js文件后获得，或者在AMD环境中通过require(‘echarts’)获得。</p>\n<h2 id=\"在Angular中使用echarts\"><a href=\"#在Angular中使用echarts\" class=\"headerlink\" title=\"在Angular中使用echarts\"></a>在Angular中使用echarts</h2><hr>\n<h3 id=\"基本步骤\"><a href=\"#基本步骤\" class=\"headerlink\" title=\"基本步骤\"></a>基本步骤</h3><ul>\n<li>bower安装echarts</li>\n</ul>\n<figure class=\"highlight cmd\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">bower install echarts --save</div></pre></td></tr></table></figure>\n<p>安装后我们可在bower_components文件夹中看到echarts，如图：<br><img src=\"http://o905ne85q.bkt.clouddn.com/E400.tmp.png\" alt=\"image\"></p>\n<ul>\n<li>引入echarts文件<br>我们在index.html文件中引入两个文件：</li>\n</ul>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">&lt;!--引入echarts--&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"bower_components/echarts/dist/echarts.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div><div class=\"line\"><span class=\"comment\">&lt;!--引入bmap文件，用于echarts和百度地图结合使用--&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"bower_components/echarts/dist/extension/bmap.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div></pre></td></tr></table></figure>\n<h3 id=\"添加echarts模块\"><a href=\"#添加echarts模块\" class=\"headerlink\" title=\"添加echarts模块\"></a>添加echarts模块</h3><p>这里我们增加一个地图模块，用于展示百度地图相关服务。</p>\n<ul>\n<li>添加echarts.html模板</li>\n</ul>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">&lt;!--添加头部菜单模块--&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">header</span> <span class=\"attr\">app-header</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">header</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"container echarts\"</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">h2</span>&gt;</span>Echarts的使用<span class=\"tag\">&lt;/<span class=\"name\">h2</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">section</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">h3</span>&gt;</span>柱状图<span class=\"tag\">&lt;/<span class=\"name\">h3</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">echarts-histogram</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">section</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">section</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">h3</span>&gt;</span>结合百度地图的热力分布图<span class=\"tag\">&lt;/<span class=\"name\">h3</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">echarts-bmap</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">section</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>用于展示Echaets服务的相关页面准备完毕，从上面的Html中可看到我们将创建的指令echartsHistogram和echartsBmap的使用。</p>\n<p>这里我们并没使用到什么逻辑，故不添加相应的控制器了。</p>\n<ul>\n<li>添加echarts路由<br>在app.js文件中：</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">.when(<span class=\"string\">'/echarts'</span>, &#123;</div><div class=\"line\">  <span class=\"attr\">templateUrl</span>: <span class=\"string\">'views/echarts.html'</span> <span class=\"comment\">//other的html页面</span></div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<h3 id=\"添加echartsHistogram指令\"><a href=\"#添加echartsHistogram指令\" class=\"headerlink\" title=\"添加echartsHistogram指令\"></a>添加echartsHistogram指令</h3><p>在directives文件夹中添加echartsDir.js文件，用于存放echarts相关指令。<br>该柱状图示例可从<a href=\"http://echarts.baidu.com/demo.html#bar-tick-align\">官网示例</a>直接获取。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div></pre></td><td class=\"code\"><pre><div class=\"line\">/*柱状图示例加载*/</div><div class=\"line\">.directive(&apos;echartsHistogram&apos;, function() &#123;</div><div class=\"line\">    return &#123;</div><div class=\"line\">        restrict: &apos;AE&apos;,</div><div class=\"line\">        template: &apos;&lt;div&gt;&lt;/div&gt;&apos;,</div><div class=\"line\">        replace: true,</div><div class=\"line\">        link: function(scope, element, attrs) &#123;</div><div class=\"line\">            // 基于准备好的dom，初始化echarts实例</div><div class=\"line\">            var myChart = echarts.init(element[0]);</div><div class=\"line\"></div><div class=\"line\">            var option = &#123;</div><div class=\"line\">                title: &#123;</div><div class=\"line\">                    text: &apos;坐标轴刻度与标签对齐&apos;</div><div class=\"line\">                &#125;,</div><div class=\"line\">                color: [&apos;#3398DB&apos;],</div><div class=\"line\">                tooltip: &#123;</div><div class=\"line\">                    trigger: &apos;axis&apos;,</div><div class=\"line\">                    axisPointer: &#123; // 坐标轴指示器，坐标轴触发有效</div><div class=\"line\">                        type: &apos;shadow&apos; // 默认为直线，可选为：&apos;line&apos; | &apos;shadow&apos;</div><div class=\"line\">                    &#125;</div><div class=\"line\">                &#125;,</div><div class=\"line\">                legend: &#123;</div><div class=\"line\">                    data: [&apos;直接访问&apos;]</div><div class=\"line\">                &#125;,</div><div class=\"line\">                grid: &#123;</div><div class=\"line\">                    left: &apos;3%&apos;,</div><div class=\"line\">                    right: &apos;4%&apos;,</div><div class=\"line\">                    bottom: &apos;3%&apos;,</div><div class=\"line\">                    containLabel: true</div><div class=\"line\">                &#125;,</div><div class=\"line\">                xAxis: [&#123;</div><div class=\"line\">                    type: &apos;category&apos;,</div><div class=\"line\">                    data: [&apos;Mon&apos;, &apos;Tue&apos;, &apos;Wed&apos;, &apos;Thu&apos;, &apos;Fri&apos;, &apos;Sat&apos;, &apos;Sun&apos;],</div><div class=\"line\">                    axisTick: &#123;</div><div class=\"line\">                        alignWithLabel: true</div><div class=\"line\">                    &#125;</div><div class=\"line\">                &#125;],</div><div class=\"line\">                yAxis: [&#123;</div><div class=\"line\">                    type: &apos;value&apos;</div><div class=\"line\">                &#125;],</div><div class=\"line\">                series: [&#123;</div><div class=\"line\">                    name: &apos;直接访问&apos;,</div><div class=\"line\">                    type: &apos;bar&apos;,</div><div class=\"line\">                    barWidth: &apos;60%&apos;,</div><div class=\"line\">                    data: [10, 52, 200, 334, 390, 330, 220]</div><div class=\"line\">                &#125;]</div><div class=\"line\">            &#125;;</div><div class=\"line\"></div><div class=\"line\">            // 使用刚指定的配置项和数据显示图表。</div><div class=\"line\">            myChart.setOption(option);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;;</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure></p>\n<h3 id=\"添加echartsBmap指令\"><a href=\"#添加echartsBmap指令\" class=\"headerlink\" title=\"添加echartsBmap指令\"></a>添加echartsBmap指令</h3><p>上面我们已经引入了bmap.js文件了，所以可以在指令中直接使用。<br>该热力图示例可从<a href=\"http://echarts.baidu.com/demo.html#heatmap-bmap\">官网示例</a>直接获取。</p>\n<ul>\n<li>添加test.json文件用于模拟数据</li>\n<li>创建echartsBmap指令</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/*百度地图示例加载*/</span></div><div class=\"line\">.directive(<span class=\"string\">'echartsBmap'</span>, [<span class=\"string\">'$http'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">$http</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> &#123;</div><div class=\"line\">        <span class=\"attr\">restrict</span>: <span class=\"string\">'AE'</span>,</div><div class=\"line\">        <span class=\"attr\">template</span>: <span class=\"string\">'&lt;div&gt;&lt;/div&gt;'</span>,</div><div class=\"line\">        <span class=\"attr\">replace</span>: <span class=\"literal\">true</span>,</div><div class=\"line\">        <span class=\"attr\">link</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">scope, element, attrs</span>) </span>&#123;</div><div class=\"line\">            <span class=\"comment\">// 基于准备好的dom，初始化echarts实例</span></div><div class=\"line\">            <span class=\"keyword\">var</span> myChart = echarts.init(element[<span class=\"number\">0</span>]);</div><div class=\"line\"></div><div class=\"line\">            $http(&#123;</div><div class=\"line\">                <span class=\"attr\">method</span>: <span class=\"string\">'GET'</span>,</div><div class=\"line\">                <span class=\"attr\">url</span>: <span class=\"string\">'./scripts/test.json'</span></div><div class=\"line\">            &#125;).then(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">data</span>) </span>&#123;</div><div class=\"line\"></div><div class=\"line\">                <span class=\"keyword\">var</span> data = data.data.data;</div><div class=\"line\">                <span class=\"built_in\">console</span>.log(data);</div><div class=\"line\"></div><div class=\"line\">                <span class=\"keyword\">var</span> points = [].concat.apply([], data.map(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">track</span>) </span>&#123;</div><div class=\"line\">                    <span class=\"keyword\">return</span> track.map(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">seg</span>) </span>&#123;</div><div class=\"line\">                        <span class=\"keyword\">return</span> seg.coord.concat([<span class=\"number\">1</span>]);</div><div class=\"line\">                    &#125;);</div><div class=\"line\">                &#125;));</div><div class=\"line\">                <span class=\"keyword\">var</span> option = &#123;</div><div class=\"line\">                    <span class=\"attr\">animation</span>: <span class=\"literal\">false</span>,</div><div class=\"line\">                    <span class=\"attr\">bmap</span>: &#123;</div><div class=\"line\">                        <span class=\"attr\">center</span>: [<span class=\"number\">120.13066322374</span>, <span class=\"number\">30.240018034923</span>],</div><div class=\"line\">                        <span class=\"attr\">zoom</span>: <span class=\"number\">14</span>,</div><div class=\"line\">                        <span class=\"attr\">roam</span>: <span class=\"literal\">true</span></div><div class=\"line\">                    &#125;,</div><div class=\"line\">                    <span class=\"attr\">visualMap</span>: &#123;</div><div class=\"line\">                        <span class=\"attr\">show</span>: <span class=\"literal\">false</span>,</div><div class=\"line\">                        <span class=\"attr\">top</span>: <span class=\"string\">'top'</span>,</div><div class=\"line\">                        <span class=\"attr\">min</span>: <span class=\"number\">0</span>,</div><div class=\"line\">                        <span class=\"attr\">max</span>: <span class=\"number\">5</span>,</div><div class=\"line\">                        <span class=\"attr\">seriesIndex</span>: <span class=\"number\">0</span>,</div><div class=\"line\">                        <span class=\"attr\">calculable</span>: <span class=\"literal\">true</span>,</div><div class=\"line\">                        <span class=\"attr\">inRange</span>: &#123;</div><div class=\"line\">                            <span class=\"attr\">color</span>: [<span class=\"string\">'blue'</span>, <span class=\"string\">'blue'</span>, <span class=\"string\">'green'</span>, <span class=\"string\">'yellow'</span>, <span class=\"string\">'red'</span>]</div><div class=\"line\">                        &#125;</div><div class=\"line\">                    &#125;,</div><div class=\"line\">                    <span class=\"attr\">series</span>: [&#123;</div><div class=\"line\">                        <span class=\"attr\">type</span>: <span class=\"string\">'heatmap'</span>,</div><div class=\"line\">                        <span class=\"attr\">coordinateSystem</span>: <span class=\"string\">'bmap'</span>,</div><div class=\"line\">                        <span class=\"attr\">data</span>: points,</div><div class=\"line\">                        <span class=\"attr\">pointSize</span>: <span class=\"number\">5</span>,</div><div class=\"line\">                        <span class=\"attr\">blurSize</span>: <span class=\"number\">6</span></div><div class=\"line\">                    &#125;]</div><div class=\"line\">                &#125;;</div><div class=\"line\">                <span class=\"comment\">// 使用刚指定的配置项和数据显示图表。</span></div><div class=\"line\">                myChart.setOption(option);</div><div class=\"line\">                <span class=\"keyword\">if</span> (!app.inNode) &#123;</div><div class=\"line\">                    <span class=\"comment\">// 添加百度地图插件</span></div><div class=\"line\">                    <span class=\"keyword\">var</span> bmap = myChart.getModel().getComponent(<span class=\"string\">'bmap'</span>).getBMap();</div><div class=\"line\">                    bmap.addControl(<span class=\"keyword\">new</span> BMap.MapTypeControl());</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;;</div><div class=\"line\">&#125;]);</div></pre></td></tr></table></figure>\n<h3 id=\"最终效果\"><a href=\"#最终效果\" class=\"headerlink\" title=\"最终效果\"></a>最终效果</h3><p>如图：<br><img src=\"http://o905ne85q.bkt.clouddn.com/365E.tmp.png\" alt=\"image\"></p>\n<h2 id=\"结束语\"><a href=\"#结束语\" class=\"headerlink\" title=\"结束语\"></a>结束语</h2><hr>\n<p>在实例中本骚年还创建了另外一个地图服务，用于展示路径，感兴趣的小伙伴也可以自行查看相关的代码呀。<br><a href=\"https://github.com/godbasin/godbasin.github.io/tree/blog-codes/angular-notes/15-use-echarts\">此处查看项目代码（仅包含app部分）</a><br><a href=\"http://o9grhhyar.bkt.clouddn.com/15-use-echarts/index.html#/echarts\">此处查看页面效果</a></p>"},{"title":"Angular使用笔记14-在Angular中使用百度地图","date":"2016-09-16T13:09:52.000Z","_content":"最近的一个项目使用AngularJS(v1.2.6)作为前端的框架，《Angular使用笔记》系列用于记录过程中的一些使用和解决方法。\n本文记录在Angular中使用百度地图（封装成指令）的过程。\n<!--more-->\n\n## 百度地图Javascript API\n-----\n### 简单介绍\n百度地图JavaScript API是一套由JavaScript语言编写的应用程序接口，可帮助您在网站中构建功能丰富、交互性强的地图应用，支持PC端和移动端基于浏览器的地图应用开发，且支持HTML5特性的地图开发。\n\n开发者文档见：[JavaScript API v2.0](http://lbsyun.baidu.com/index.php?title=jspopular)\n\n### 百度地图的使用\n- 申请密钥\n该套API免费对外开放。自v1.5版本起，需先申请密钥（ak）才可使用，接口（除发送短信功能外）无使用次数限制\n\n- 引入api文件\n\n``` html\n<script type=\"text/javascript\" src=\"http://api.map.baidu.com/api?v=2.0&ak=您的密钥\"></script>\n```\n\n- 创建地图实例\n\n``` javascript\n// 位于BMap命名空间下的Map类表示地图，通过new操作符可以创建一个地图实例。其参数可以是元素id也可以是元素对象。\nvar map = new BMap.Map(\"container\");\n```\n\n## 在Angular中使用百度地图\n-----\n这里我们将简单使用指令创建一个地图服务，具体包括以下功能：\n- 可输入关键字搜索地图位置\n- 可通过点击地图获取该位置的经纬度并反馈\n- 可通过手动设置经纬度获取地图位置\n\n### 基本步骤\n- 申请密钥&引入api文件\n请查看上文\"百度地图的使用\"\n- 通过指令创建地图实例\n``` javascript\n.directive('setLocation', function() {\n    return {\n        restrict: 'AE',\n        replace: true,\n        template: `<div class=\"l-map\"></div>`,\n        link: function(scope, element, attrs) {\n            var map = new BMap.Map(element[0]); // 创建Map实例   \n        }\n    };\n})\n```\n\n### 添加地图模块\n这里我们增加一个地图模块，用于展示百度地图相关服务。\n\n- 添加bmap.html模板\n\n``` html\n<!--添加头部菜单模块-->\n<header app-header></header>\n<div class=\"container bmap\">\n\t<h2>百度地图的使用</h2>\n\t<section>\n\t\t<h3>位置设置</h3>\n\t\t<p>输入搜索位置，或点击地图获取位置，或手动输入经纬度</p>\n\t\t<article>\n\t\t\t<header>\n\t\t\t\t<input type=\"text\" class=\"form-control\" ng-model=\"search\" placeholder=\"输入关键词搜索位置\" />\n\t\t\t\t<a class=\"btn btn-primary\" ng-click=\"location.searchText = search;\">搜索</a>\n\t\t\t</header>\n\t\t\t<!--插入地图服务指令set-location-->\n\t\t\t<div set-location search-text=\"{{ location.searchText }}\" location=\"location\" location-str=\"{{ location.locationStr }}\"></div>\n\t\t\t<div>\n\t\t\t\t<p>经度<input type=\"number\" class=\"form-control\" ng-model=\"location.longitude\" /></p>\n\t\t\t\t<p>维度<input type=\"number\" class=\"form-control\" ng-model=\"location.latitude\" /></p>\n\t\t\t\t<a ng-click=\"location.locationStr = location.longitude + ' ' + location.latitude;\" class=\"btn btn-default\">设置</a>\n\t\t\t</div>\n\t\t</article>\n\t</section>\n</div>\n```\n\n- 添加bmapCtrl.js控制器\n\n``` javascript\n.controller('BmapCtrl', ['$scope',  function($scope) {\n\t$scope.location = {\n            searchText: '', // 保存搜索输入\n            longitude: undefined, // 保存位置经度信息\n            latitude: undefined, // 保存位置纬度信息\n        };\n}]);\n```\n\n- 添加bmap路由\n在app.js文件中：\n\n``` javascript\n.when('/bmap', {\n\ttemplateUrl: 'views/bmap.html', //bmap的html页面\n\tcontroller: 'BmapCtrl' //bmap的控制器\n})\n```\n\n### 添加地图服务指令\n用于展示地图服务的相关页面和逻辑准备完毕，从上面的Html中可看到我们将创建的指令setLocation的使用。\n在directives文件夹中添加mapDir.js文件，用于存放地图相关指令。\n``` javascrpit\n.directive('setLocation', function() {\n    return {\n        restrict: 'AE',\n        scope: {\n            'searchText': '@searchText', // 用于保存搜索关键词\n            'locationStr': '@locationStr', // 用于监视经纬度\n            'location': '=location' // 用于保存位置信息\n        },\n        replace: true,\n        template: `<div class=\"l-map\"></div>`,\n        link: function(scope, element, attrs) {\n            // 百度地图API功能\n            var map = new BMap.Map(element[0]); // 创建Map实例\n            var marker; // 用来保存选中的点\n            map.enableScrollWheelZoom();\n            var searchClick = {\n                state: false,\n                lng: null,\n                lat: null\n            };\n            var myKeys = scope.searchText ? scope.searchText.split(' ') : '';\n            var local = new BMap.LocalSearch(map, {\n                renderOptions: { map: map, panel: \"r-result\" },\n                pageCapacity: 10,\n                onInfoHtmlSet: data => {\n                    // 选择某个标志物后\n                    searchClick.state = true;\n                    searchClick.lng = data.marker.point.lng;\n                    searchClick.lat = data.marker.point.lat;\n                }\n            });\n            map.centerAndZoom(new BMap.Point(114.063821, 22.549535), 11);\n            // 监听搜索输入变化\n            var watch = scope.$watch('searchText', function(newValue, oldValue, scope) {\n                if (!scope.searchText) {\n                    return;\n                }\n                myKeys = scope.searchText.split(' ');\n                local.search(myKeys);\n            });\n\n            // 监听经纬度变化\n            var watch = scope.$watch('locationStr', function(newValue, oldValue, scope) {\n                if (!scope.locationStr) {\n                    return;\n                }\n                var lat = scope.locationStr.split(' ')[1];\n                var lng = scope.locationStr.split(' ')[0];\n                // 移除点\n                map.removeOverlay(marker);\n                // 创建点\n                var p = new BMap.Point(lng, lat);\n                marker = new BMap.Marker(p);\n                // 添加点\n                map.addOverlay(marker);\n                // 设置中心\n                map.panTo(p);\n            });\n\n            // 单击地图时返回坐标(longitude, latitude)\n            map.addEventListener(\"click\", function(e) {\n                // 移除点\n                map.removeOverlay(marker);\n                // 创建点\n                var p = new BMap.Point(e.point.lng, e.point.lat);\n                if (searchClick.state) {\n                    p = new BMap.Point(searchClick.lng, searchClick.lat);\n                    searchClick.state = false;\n                } else {\n                    marker = new BMap.Marker(p);\n                    // 添加点\n                    map.addOverlay(marker);\n                }\n                // 设置中心\n                map.panTo(p);\n                // 更改经纬度\n                scope.location.longitude = e.point.lng;\n                scope.location.latitude = e.point.lat;\n            });\n        },\n    };\n});\n```\n\n### 最终效果\n如图：\n![image](http://o905ne85q.bkt.clouddn.com/F7EE.tmp.png)\n\n## 结束语\n-----\n在实例中本骚年还创建了另外一个地图服务，用于展示路径，感兴趣的小伙伴也可以自行查看相关的代码呀。\n[此处查看项目代码（仅包含app部分）](https://github.com/godbasin/godbasin.github.io/tree/blog-codes/angular-notes/14-use-bmap)\n[此处查看页面效果](http://o9grhhyar.bkt.clouddn.com/14-use-bmap/index.html#/bmap)","source":"_posts/angular-note-14-use-bmap.md","raw":"---\ntitle: Angular使用笔记14-在Angular中使用百度地图\ndate: 2016-09-16 21:09:52\ncategories: angular混搭\ntags: 笔记\n---\n最近的一个项目使用AngularJS(v1.2.6)作为前端的框架，《Angular使用笔记》系列用于记录过程中的一些使用和解决方法。\n本文记录在Angular中使用百度地图（封装成指令）的过程。\n<!--more-->\n\n## 百度地图Javascript API\n-----\n### 简单介绍\n百度地图JavaScript API是一套由JavaScript语言编写的应用程序接口，可帮助您在网站中构建功能丰富、交互性强的地图应用，支持PC端和移动端基于浏览器的地图应用开发，且支持HTML5特性的地图开发。\n\n开发者文档见：[JavaScript API v2.0](http://lbsyun.baidu.com/index.php?title=jspopular)\n\n### 百度地图的使用\n- 申请密钥\n该套API免费对外开放。自v1.5版本起，需先申请密钥（ak）才可使用，接口（除发送短信功能外）无使用次数限制\n\n- 引入api文件\n\n``` html\n<script type=\"text/javascript\" src=\"http://api.map.baidu.com/api?v=2.0&ak=您的密钥\"></script>\n```\n\n- 创建地图实例\n\n``` javascript\n// 位于BMap命名空间下的Map类表示地图，通过new操作符可以创建一个地图实例。其参数可以是元素id也可以是元素对象。\nvar map = new BMap.Map(\"container\");\n```\n\n## 在Angular中使用百度地图\n-----\n这里我们将简单使用指令创建一个地图服务，具体包括以下功能：\n- 可输入关键字搜索地图位置\n- 可通过点击地图获取该位置的经纬度并反馈\n- 可通过手动设置经纬度获取地图位置\n\n### 基本步骤\n- 申请密钥&引入api文件\n请查看上文\"百度地图的使用\"\n- 通过指令创建地图实例\n``` javascript\n.directive('setLocation', function() {\n    return {\n        restrict: 'AE',\n        replace: true,\n        template: `<div class=\"l-map\"></div>`,\n        link: function(scope, element, attrs) {\n            var map = new BMap.Map(element[0]); // 创建Map实例   \n        }\n    };\n})\n```\n\n### 添加地图模块\n这里我们增加一个地图模块，用于展示百度地图相关服务。\n\n- 添加bmap.html模板\n\n``` html\n<!--添加头部菜单模块-->\n<header app-header></header>\n<div class=\"container bmap\">\n\t<h2>百度地图的使用</h2>\n\t<section>\n\t\t<h3>位置设置</h3>\n\t\t<p>输入搜索位置，或点击地图获取位置，或手动输入经纬度</p>\n\t\t<article>\n\t\t\t<header>\n\t\t\t\t<input type=\"text\" class=\"form-control\" ng-model=\"search\" placeholder=\"输入关键词搜索位置\" />\n\t\t\t\t<a class=\"btn btn-primary\" ng-click=\"location.searchText = search;\">搜索</a>\n\t\t\t</header>\n\t\t\t<!--插入地图服务指令set-location-->\n\t\t\t<div set-location search-text=\"{{ location.searchText }}\" location=\"location\" location-str=\"{{ location.locationStr }}\"></div>\n\t\t\t<div>\n\t\t\t\t<p>经度<input type=\"number\" class=\"form-control\" ng-model=\"location.longitude\" /></p>\n\t\t\t\t<p>维度<input type=\"number\" class=\"form-control\" ng-model=\"location.latitude\" /></p>\n\t\t\t\t<a ng-click=\"location.locationStr = location.longitude + ' ' + location.latitude;\" class=\"btn btn-default\">设置</a>\n\t\t\t</div>\n\t\t</article>\n\t</section>\n</div>\n```\n\n- 添加bmapCtrl.js控制器\n\n``` javascript\n.controller('BmapCtrl', ['$scope',  function($scope) {\n\t$scope.location = {\n            searchText: '', // 保存搜索输入\n            longitude: undefined, // 保存位置经度信息\n            latitude: undefined, // 保存位置纬度信息\n        };\n}]);\n```\n\n- 添加bmap路由\n在app.js文件中：\n\n``` javascript\n.when('/bmap', {\n\ttemplateUrl: 'views/bmap.html', //bmap的html页面\n\tcontroller: 'BmapCtrl' //bmap的控制器\n})\n```\n\n### 添加地图服务指令\n用于展示地图服务的相关页面和逻辑准备完毕，从上面的Html中可看到我们将创建的指令setLocation的使用。\n在directives文件夹中添加mapDir.js文件，用于存放地图相关指令。\n``` javascrpit\n.directive('setLocation', function() {\n    return {\n        restrict: 'AE',\n        scope: {\n            'searchText': '@searchText', // 用于保存搜索关键词\n            'locationStr': '@locationStr', // 用于监视经纬度\n            'location': '=location' // 用于保存位置信息\n        },\n        replace: true,\n        template: `<div class=\"l-map\"></div>`,\n        link: function(scope, element, attrs) {\n            // 百度地图API功能\n            var map = new BMap.Map(element[0]); // 创建Map实例\n            var marker; // 用来保存选中的点\n            map.enableScrollWheelZoom();\n            var searchClick = {\n                state: false,\n                lng: null,\n                lat: null\n            };\n            var myKeys = scope.searchText ? scope.searchText.split(' ') : '';\n            var local = new BMap.LocalSearch(map, {\n                renderOptions: { map: map, panel: \"r-result\" },\n                pageCapacity: 10,\n                onInfoHtmlSet: data => {\n                    // 选择某个标志物后\n                    searchClick.state = true;\n                    searchClick.lng = data.marker.point.lng;\n                    searchClick.lat = data.marker.point.lat;\n                }\n            });\n            map.centerAndZoom(new BMap.Point(114.063821, 22.549535), 11);\n            // 监听搜索输入变化\n            var watch = scope.$watch('searchText', function(newValue, oldValue, scope) {\n                if (!scope.searchText) {\n                    return;\n                }\n                myKeys = scope.searchText.split(' ');\n                local.search(myKeys);\n            });\n\n            // 监听经纬度变化\n            var watch = scope.$watch('locationStr', function(newValue, oldValue, scope) {\n                if (!scope.locationStr) {\n                    return;\n                }\n                var lat = scope.locationStr.split(' ')[1];\n                var lng = scope.locationStr.split(' ')[0];\n                // 移除点\n                map.removeOverlay(marker);\n                // 创建点\n                var p = new BMap.Point(lng, lat);\n                marker = new BMap.Marker(p);\n                // 添加点\n                map.addOverlay(marker);\n                // 设置中心\n                map.panTo(p);\n            });\n\n            // 单击地图时返回坐标(longitude, latitude)\n            map.addEventListener(\"click\", function(e) {\n                // 移除点\n                map.removeOverlay(marker);\n                // 创建点\n                var p = new BMap.Point(e.point.lng, e.point.lat);\n                if (searchClick.state) {\n                    p = new BMap.Point(searchClick.lng, searchClick.lat);\n                    searchClick.state = false;\n                } else {\n                    marker = new BMap.Marker(p);\n                    // 添加点\n                    map.addOverlay(marker);\n                }\n                // 设置中心\n                map.panTo(p);\n                // 更改经纬度\n                scope.location.longitude = e.point.lng;\n                scope.location.latitude = e.point.lat;\n            });\n        },\n    };\n});\n```\n\n### 最终效果\n如图：\n![image](http://o905ne85q.bkt.clouddn.com/F7EE.tmp.png)\n\n## 结束语\n-----\n在实例中本骚年还创建了另外一个地图服务，用于展示路径，感兴趣的小伙伴也可以自行查看相关的代码呀。\n[此处查看项目代码（仅包含app部分）](https://github.com/godbasin/godbasin.github.io/tree/blog-codes/angular-notes/14-use-bmap)\n[此处查看页面效果](http://o9grhhyar.bkt.clouddn.com/14-use-bmap/index.html#/bmap)","slug":"angular-note-14-use-bmap","published":1,"updated":"2016-09-16T13:10:53.306Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cix45huei000gxotuqv7atp3f","content":"<p>最近的一个项目使用AngularJS(v1.2.6)作为前端的框架，《Angular使用笔记》系列用于记录过程中的一些使用和解决方法。<br>本文记录在Angular中使用百度地图（封装成指令）的过程。<br><a id=\"more\"></a></p>\n<h2 id=\"百度地图Javascript-API\"><a href=\"#百度地图Javascript-API\" class=\"headerlink\" title=\"百度地图Javascript API\"></a>百度地图Javascript API</h2><hr>\n<h3 id=\"简单介绍\"><a href=\"#简单介绍\" class=\"headerlink\" title=\"简单介绍\"></a>简单介绍</h3><p>百度地图JavaScript API是一套由JavaScript语言编写的应用程序接口，可帮助您在网站中构建功能丰富、交互性强的地图应用，支持PC端和移动端基于浏览器的地图应用开发，且支持HTML5特性的地图开发。</p>\n<p>开发者文档见：<a href=\"http://lbsyun.baidu.com/index.php?title=jspopular\" target=\"_blank\" rel=\"external\">JavaScript API v2.0</a></p>\n<h3 id=\"百度地图的使用\"><a href=\"#百度地图的使用\" class=\"headerlink\" title=\"百度地图的使用\"></a>百度地图的使用</h3><ul>\n<li><p>申请密钥<br>该套API免费对外开放。自v1.5版本起，需先申请密钥（ak）才可使用，接口（除发送短信功能外）无使用次数限制</p>\n</li>\n<li><p>引入api文件</p>\n</li>\n</ul>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/javascript\"</span> <span class=\"attr\">src</span>=<span class=\"string\">\"http://api.map.baidu.com/api?v=2.0&amp;ak=您的密钥\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div></pre></td></tr></table></figure>\n<ul>\n<li>创建地图实例</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 位于BMap命名空间下的Map类表示地图，通过new操作符可以创建一个地图实例。其参数可以是元素id也可以是元素对象。</span></div><div class=\"line\"><span class=\"keyword\">var</span> map = <span class=\"keyword\">new</span> BMap.Map(<span class=\"string\">\"container\"</span>);</div></pre></td></tr></table></figure>\n<h2 id=\"在Angular中使用百度地图\"><a href=\"#在Angular中使用百度地图\" class=\"headerlink\" title=\"在Angular中使用百度地图\"></a>在Angular中使用百度地图</h2><hr>\n<p>这里我们将简单使用指令创建一个地图服务，具体包括以下功能：</p>\n<ul>\n<li>可输入关键字搜索地图位置</li>\n<li>可通过点击地图获取该位置的经纬度并反馈</li>\n<li>可通过手动设置经纬度获取地图位置</li>\n</ul>\n<h3 id=\"基本步骤\"><a href=\"#基本步骤\" class=\"headerlink\" title=\"基本步骤\"></a>基本步骤</h3><ul>\n<li>申请密钥&amp;引入api文件<br>请查看上文”百度地图的使用”</li>\n<li>通过指令创建地图实例<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">.directive(<span class=\"string\">'setLocation'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> &#123;</div><div class=\"line\">        <span class=\"attr\">restrict</span>: <span class=\"string\">'AE'</span>,</div><div class=\"line\">        <span class=\"attr\">replace</span>: <span class=\"literal\">true</span>,</div><div class=\"line\">        <span class=\"attr\">template</span>: <span class=\"string\">`&lt;div class=\"l-map\"&gt;&lt;/div&gt;`</span>,</div><div class=\"line\">        <span class=\"attr\">link</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">scope, element, attrs</span>) </span>&#123;</div><div class=\"line\">            <span class=\"keyword\">var</span> map = <span class=\"keyword\">new</span> BMap.Map(element[<span class=\"number\">0</span>]); <span class=\"comment\">// 创建Map实例   </span></div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;;</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3 id=\"添加地图模块\"><a href=\"#添加地图模块\" class=\"headerlink\" title=\"添加地图模块\"></a>添加地图模块</h3><p>这里我们增加一个地图模块，用于展示百度地图相关服务。</p>\n<ul>\n<li>添加bmap.html模板</li>\n</ul>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">&lt;!--添加头部菜单模块--&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">header</span> <span class=\"attr\">app-header</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">header</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"container bmap\"</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">h2</span>&gt;</span>百度地图的使用<span class=\"tag\">&lt;/<span class=\"name\">h2</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">section</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">h3</span>&gt;</span>位置设置<span class=\"tag\">&lt;/<span class=\"name\">h3</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>输入搜索位置，或点击地图获取位置，或手动输入经纬度<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">article</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">header</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"form-control\"</span> <span class=\"attr\">ng-model</span>=<span class=\"string\">\"search\"</span> <span class=\"attr\">placeholder</span>=<span class=\"string\">\"输入关键词搜索位置\"</span> /&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">class</span>=<span class=\"string\">\"btn btn-primary\"</span> <span class=\"attr\">ng-click</span>=<span class=\"string\">\"location.searchText = search;\"</span>&gt;</span>搜索<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">header</span>&gt;</span></div><div class=\"line\">      <span class=\"comment\">&lt;!--插入地图服务指令set-location--&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">set-location</span> <span class=\"attr\">search-text</span>=<span class=\"string\">\"&#123;&#123; location.searchText &#125;&#125;\"</span> <span class=\"attr\">location</span>=<span class=\"string\">\"location\"</span> <span class=\"attr\">location-str</span>=<span class=\"string\">\"&#123;&#123; location.locationStr &#125;&#125;\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>经度<span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"number\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"form-control\"</span> <span class=\"attr\">ng-model</span>=<span class=\"string\">\"location.longitude\"</span> /&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>维度<span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"number\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"form-control\"</span> <span class=\"attr\">ng-model</span>=<span class=\"string\">\"location.latitude\"</span> /&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">ng-click</span>=<span class=\"string\">\"location.locationStr = location.longitude + ' ' + location.latitude;\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"btn btn-default\"</span>&gt;</span>设置<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">article</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">section</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div></pre></td></tr></table></figure>\n<ul>\n<li>添加bmapCtrl.js控制器</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">.controller(<span class=\"string\">'BmapCtrl'</span>, [<span class=\"string\">'$scope'</span>,  <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">$scope</span>) </span>&#123;</div><div class=\"line\">  $scope.location = &#123;</div><div class=\"line\">            <span class=\"attr\">searchText</span>: <span class=\"string\">''</span>, <span class=\"comment\">// 保存搜索输入</span></div><div class=\"line\">            longitude: <span class=\"literal\">undefined</span>, <span class=\"comment\">// 保存位置经度信息</span></div><div class=\"line\">            latitude: <span class=\"literal\">undefined</span>, <span class=\"comment\">// 保存位置纬度信息</span></div><div class=\"line\">        &#125;;</div><div class=\"line\">&#125;]);</div></pre></td></tr></table></figure>\n<ul>\n<li>添加bmap路由<br>在app.js文件中：</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">.when(<span class=\"string\">'/bmap'</span>, &#123;</div><div class=\"line\">  <span class=\"attr\">templateUrl</span>: <span class=\"string\">'views/bmap.html'</span>, <span class=\"comment\">//bmap的html页面</span></div><div class=\"line\">  controller: <span class=\"string\">'BmapCtrl'</span> <span class=\"comment\">//bmap的控制器</span></div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<h3 id=\"添加地图服务指令\"><a href=\"#添加地图服务指令\" class=\"headerlink\" title=\"添加地图服务指令\"></a>添加地图服务指令</h3><p>用于展示地图服务的相关页面和逻辑准备完毕，从上面的Html中可看到我们将创建的指令setLocation的使用。<br>在directives文件夹中添加mapDir.js文件，用于存放地图相关指令。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div></pre></td><td class=\"code\"><pre><div class=\"line\">.directive(&apos;setLocation&apos;, function() &#123;</div><div class=\"line\">    return &#123;</div><div class=\"line\">        restrict: &apos;AE&apos;,</div><div class=\"line\">        scope: &#123;</div><div class=\"line\">            &apos;searchText&apos;: &apos;@searchText&apos;, // 用于保存搜索关键词</div><div class=\"line\">            &apos;locationStr&apos;: &apos;@locationStr&apos;, // 用于监视经纬度</div><div class=\"line\">            &apos;location&apos;: &apos;=location&apos; // 用于保存位置信息</div><div class=\"line\">        &#125;,</div><div class=\"line\">        replace: true,</div><div class=\"line\">        template: `&lt;div class=&quot;l-map&quot;&gt;&lt;/div&gt;`,</div><div class=\"line\">        link: function(scope, element, attrs) &#123;</div><div class=\"line\">            // 百度地图API功能</div><div class=\"line\">            var map = new BMap.Map(element[0]); // 创建Map实例</div><div class=\"line\">            var marker; // 用来保存选中的点</div><div class=\"line\">            map.enableScrollWheelZoom();</div><div class=\"line\">            var searchClick = &#123;</div><div class=\"line\">                state: false,</div><div class=\"line\">                lng: null,</div><div class=\"line\">                lat: null</div><div class=\"line\">            &#125;;</div><div class=\"line\">            var myKeys = scope.searchText ? scope.searchText.split(&apos; &apos;) : &apos;&apos;;</div><div class=\"line\">            var local = new BMap.LocalSearch(map, &#123;</div><div class=\"line\">                renderOptions: &#123; map: map, panel: &quot;r-result&quot; &#125;,</div><div class=\"line\">                pageCapacity: 10,</div><div class=\"line\">                onInfoHtmlSet: data =&gt; &#123;</div><div class=\"line\">                    // 选择某个标志物后</div><div class=\"line\">                    searchClick.state = true;</div><div class=\"line\">                    searchClick.lng = data.marker.point.lng;</div><div class=\"line\">                    searchClick.lat = data.marker.point.lat;</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;);</div><div class=\"line\">            map.centerAndZoom(new BMap.Point(114.063821, 22.549535), 11);</div><div class=\"line\">            // 监听搜索输入变化</div><div class=\"line\">            var watch = scope.$watch(&apos;searchText&apos;, function(newValue, oldValue, scope) &#123;</div><div class=\"line\">                if (!scope.searchText) &#123;</div><div class=\"line\">                    return;</div><div class=\"line\">                &#125;</div><div class=\"line\">                myKeys = scope.searchText.split(&apos; &apos;);</div><div class=\"line\">                local.search(myKeys);</div><div class=\"line\">            &#125;);</div><div class=\"line\"></div><div class=\"line\">            // 监听经纬度变化</div><div class=\"line\">            var watch = scope.$watch(&apos;locationStr&apos;, function(newValue, oldValue, scope) &#123;</div><div class=\"line\">                if (!scope.locationStr) &#123;</div><div class=\"line\">                    return;</div><div class=\"line\">                &#125;</div><div class=\"line\">                var lat = scope.locationStr.split(&apos; &apos;)[1];</div><div class=\"line\">                var lng = scope.locationStr.split(&apos; &apos;)[0];</div><div class=\"line\">                // 移除点</div><div class=\"line\">                map.removeOverlay(marker);</div><div class=\"line\">                // 创建点</div><div class=\"line\">                var p = new BMap.Point(lng, lat);</div><div class=\"line\">                marker = new BMap.Marker(p);</div><div class=\"line\">                // 添加点</div><div class=\"line\">                map.addOverlay(marker);</div><div class=\"line\">                // 设置中心</div><div class=\"line\">                map.panTo(p);</div><div class=\"line\">            &#125;);</div><div class=\"line\"></div><div class=\"line\">            // 单击地图时返回坐标(longitude, latitude)</div><div class=\"line\">            map.addEventListener(&quot;click&quot;, function(e) &#123;</div><div class=\"line\">                // 移除点</div><div class=\"line\">                map.removeOverlay(marker);</div><div class=\"line\">                // 创建点</div><div class=\"line\">                var p = new BMap.Point(e.point.lng, e.point.lat);</div><div class=\"line\">                if (searchClick.state) &#123;</div><div class=\"line\">                    p = new BMap.Point(searchClick.lng, searchClick.lat);</div><div class=\"line\">                    searchClick.state = false;</div><div class=\"line\">                &#125; else &#123;</div><div class=\"line\">                    marker = new BMap.Marker(p);</div><div class=\"line\">                    // 添加点</div><div class=\"line\">                    map.addOverlay(marker);</div><div class=\"line\">                &#125;</div><div class=\"line\">                // 设置中心</div><div class=\"line\">                map.panTo(p);</div><div class=\"line\">                // 更改经纬度</div><div class=\"line\">                scope.location.longitude = e.point.lng;</div><div class=\"line\">                scope.location.latitude = e.point.lat;</div><div class=\"line\">            &#125;);</div><div class=\"line\">        &#125;,</div><div class=\"line\">    &#125;;</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure></p>\n<h3 id=\"最终效果\"><a href=\"#最终效果\" class=\"headerlink\" title=\"最终效果\"></a>最终效果</h3><p>如图：<br><img src=\"http://o905ne85q.bkt.clouddn.com/F7EE.tmp.png\" alt=\"image\"></p>\n<h2 id=\"结束语\"><a href=\"#结束语\" class=\"headerlink\" title=\"结束语\"></a>结束语</h2><hr>\n<p>在实例中本骚年还创建了另外一个地图服务，用于展示路径，感兴趣的小伙伴也可以自行查看相关的代码呀。<br><a href=\"https://github.com/godbasin/godbasin.github.io/tree/blog-codes/angular-notes/14-use-bmap\" target=\"_blank\" rel=\"external\">此处查看项目代码（仅包含app部分）</a><br><a href=\"http://o9grhhyar.bkt.clouddn.com/14-use-bmap/index.html#/bmap\" target=\"_blank\" rel=\"external\">此处查看页面效果</a></p>\n","excerpt":"<p>最近的一个项目使用AngularJS(v1.2.6)作为前端的框架，《Angular使用笔记》系列用于记录过程中的一些使用和解决方法。<br>本文记录在Angular中使用百度地图（封装成指令）的过程。<br>","more":"</p>\n<h2 id=\"百度地图Javascript-API\"><a href=\"#百度地图Javascript-API\" class=\"headerlink\" title=\"百度地图Javascript API\"></a>百度地图Javascript API</h2><hr>\n<h3 id=\"简单介绍\"><a href=\"#简单介绍\" class=\"headerlink\" title=\"简单介绍\"></a>简单介绍</h3><p>百度地图JavaScript API是一套由JavaScript语言编写的应用程序接口，可帮助您在网站中构建功能丰富、交互性强的地图应用，支持PC端和移动端基于浏览器的地图应用开发，且支持HTML5特性的地图开发。</p>\n<p>开发者文档见：<a href=\"http://lbsyun.baidu.com/index.php?title=jspopular\">JavaScript API v2.0</a></p>\n<h3 id=\"百度地图的使用\"><a href=\"#百度地图的使用\" class=\"headerlink\" title=\"百度地图的使用\"></a>百度地图的使用</h3><ul>\n<li><p>申请密钥<br>该套API免费对外开放。自v1.5版本起，需先申请密钥（ak）才可使用，接口（除发送短信功能外）无使用次数限制</p>\n</li>\n<li><p>引入api文件</p>\n</li>\n</ul>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/javascript\"</span> <span class=\"attr\">src</span>=<span class=\"string\">\"http://api.map.baidu.com/api?v=2.0&amp;ak=您的密钥\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div></pre></td></tr></table></figure>\n<ul>\n<li>创建地图实例</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 位于BMap命名空间下的Map类表示地图，通过new操作符可以创建一个地图实例。其参数可以是元素id也可以是元素对象。</span></div><div class=\"line\"><span class=\"keyword\">var</span> map = <span class=\"keyword\">new</span> BMap.Map(<span class=\"string\">\"container\"</span>);</div></pre></td></tr></table></figure>\n<h2 id=\"在Angular中使用百度地图\"><a href=\"#在Angular中使用百度地图\" class=\"headerlink\" title=\"在Angular中使用百度地图\"></a>在Angular中使用百度地图</h2><hr>\n<p>这里我们将简单使用指令创建一个地图服务，具体包括以下功能：</p>\n<ul>\n<li>可输入关键字搜索地图位置</li>\n<li>可通过点击地图获取该位置的经纬度并反馈</li>\n<li>可通过手动设置经纬度获取地图位置</li>\n</ul>\n<h3 id=\"基本步骤\"><a href=\"#基本步骤\" class=\"headerlink\" title=\"基本步骤\"></a>基本步骤</h3><ul>\n<li>申请密钥&amp;引入api文件<br>请查看上文”百度地图的使用”</li>\n<li>通过指令创建地图实例<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">.directive(<span class=\"string\">'setLocation'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> &#123;</div><div class=\"line\">        <span class=\"attr\">restrict</span>: <span class=\"string\">'AE'</span>,</div><div class=\"line\">        <span class=\"attr\">replace</span>: <span class=\"literal\">true</span>,</div><div class=\"line\">        <span class=\"attr\">template</span>: <span class=\"string\">`&lt;div class=\"l-map\"&gt;&lt;/div&gt;`</span>,</div><div class=\"line\">        <span class=\"attr\">link</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">scope, element, attrs</span>) </span>&#123;</div><div class=\"line\">            <span class=\"keyword\">var</span> map = <span class=\"keyword\">new</span> BMap.Map(element[<span class=\"number\">0</span>]); <span class=\"comment\">// 创建Map实例   </span></div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;;</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3 id=\"添加地图模块\"><a href=\"#添加地图模块\" class=\"headerlink\" title=\"添加地图模块\"></a>添加地图模块</h3><p>这里我们增加一个地图模块，用于展示百度地图相关服务。</p>\n<ul>\n<li>添加bmap.html模板</li>\n</ul>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">&lt;!--添加头部菜单模块--&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">header</span> <span class=\"attr\">app-header</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">header</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"container bmap\"</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">h2</span>&gt;</span>百度地图的使用<span class=\"tag\">&lt;/<span class=\"name\">h2</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">section</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">h3</span>&gt;</span>位置设置<span class=\"tag\">&lt;/<span class=\"name\">h3</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>输入搜索位置，或点击地图获取位置，或手动输入经纬度<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">article</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">header</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"form-control\"</span> <span class=\"attr\">ng-model</span>=<span class=\"string\">\"search\"</span> <span class=\"attr\">placeholder</span>=<span class=\"string\">\"输入关键词搜索位置\"</span> /&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">class</span>=<span class=\"string\">\"btn btn-primary\"</span> <span class=\"attr\">ng-click</span>=<span class=\"string\">\"location.searchText = search;\"</span>&gt;</span>搜索<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">header</span>&gt;</span></div><div class=\"line\">      <span class=\"comment\">&lt;!--插入地图服务指令set-location--&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">set-location</span> <span class=\"attr\">search-text</span>=<span class=\"string\">\"&#123;&#123; location.searchText &#125;&#125;\"</span> <span class=\"attr\">location</span>=<span class=\"string\">\"location\"</span> <span class=\"attr\">location-str</span>=<span class=\"string\">\"&#123;&#123; location.locationStr &#125;&#125;\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>经度<span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"number\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"form-control\"</span> <span class=\"attr\">ng-model</span>=<span class=\"string\">\"location.longitude\"</span> /&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>维度<span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"number\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"form-control\"</span> <span class=\"attr\">ng-model</span>=<span class=\"string\">\"location.latitude\"</span> /&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">ng-click</span>=<span class=\"string\">\"location.locationStr = location.longitude + ' ' + location.latitude;\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"btn btn-default\"</span>&gt;</span>设置<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">article</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">section</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div></pre></td></tr></table></figure>\n<ul>\n<li>添加bmapCtrl.js控制器</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">.controller(<span class=\"string\">'BmapCtrl'</span>, [<span class=\"string\">'$scope'</span>,  <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">$scope</span>) </span>&#123;</div><div class=\"line\">  $scope.location = &#123;</div><div class=\"line\">            <span class=\"attr\">searchText</span>: <span class=\"string\">''</span>, <span class=\"comment\">// 保存搜索输入</span></div><div class=\"line\">            longitude: <span class=\"literal\">undefined</span>, <span class=\"comment\">// 保存位置经度信息</span></div><div class=\"line\">            latitude: <span class=\"literal\">undefined</span>, <span class=\"comment\">// 保存位置纬度信息</span></div><div class=\"line\">        &#125;;</div><div class=\"line\">&#125;]);</div></pre></td></tr></table></figure>\n<ul>\n<li>添加bmap路由<br>在app.js文件中：</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">.when(<span class=\"string\">'/bmap'</span>, &#123;</div><div class=\"line\">  <span class=\"attr\">templateUrl</span>: <span class=\"string\">'views/bmap.html'</span>, <span class=\"comment\">//bmap的html页面</span></div><div class=\"line\">  controller: <span class=\"string\">'BmapCtrl'</span> <span class=\"comment\">//bmap的控制器</span></div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<h3 id=\"添加地图服务指令\"><a href=\"#添加地图服务指令\" class=\"headerlink\" title=\"添加地图服务指令\"></a>添加地图服务指令</h3><p>用于展示地图服务的相关页面和逻辑准备完毕，从上面的Html中可看到我们将创建的指令setLocation的使用。<br>在directives文件夹中添加mapDir.js文件，用于存放地图相关指令。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div></pre></td><td class=\"code\"><pre><div class=\"line\">.directive(&apos;setLocation&apos;, function() &#123;</div><div class=\"line\">    return &#123;</div><div class=\"line\">        restrict: &apos;AE&apos;,</div><div class=\"line\">        scope: &#123;</div><div class=\"line\">            &apos;searchText&apos;: &apos;@searchText&apos;, // 用于保存搜索关键词</div><div class=\"line\">            &apos;locationStr&apos;: &apos;@locationStr&apos;, // 用于监视经纬度</div><div class=\"line\">            &apos;location&apos;: &apos;=location&apos; // 用于保存位置信息</div><div class=\"line\">        &#125;,</div><div class=\"line\">        replace: true,</div><div class=\"line\">        template: `&lt;div class=&quot;l-map&quot;&gt;&lt;/div&gt;`,</div><div class=\"line\">        link: function(scope, element, attrs) &#123;</div><div class=\"line\">            // 百度地图API功能</div><div class=\"line\">            var map = new BMap.Map(element[0]); // 创建Map实例</div><div class=\"line\">            var marker; // 用来保存选中的点</div><div class=\"line\">            map.enableScrollWheelZoom();</div><div class=\"line\">            var searchClick = &#123;</div><div class=\"line\">                state: false,</div><div class=\"line\">                lng: null,</div><div class=\"line\">                lat: null</div><div class=\"line\">            &#125;;</div><div class=\"line\">            var myKeys = scope.searchText ? scope.searchText.split(&apos; &apos;) : &apos;&apos;;</div><div class=\"line\">            var local = new BMap.LocalSearch(map, &#123;</div><div class=\"line\">                renderOptions: &#123; map: map, panel: &quot;r-result&quot; &#125;,</div><div class=\"line\">                pageCapacity: 10,</div><div class=\"line\">                onInfoHtmlSet: data =&gt; &#123;</div><div class=\"line\">                    // 选择某个标志物后</div><div class=\"line\">                    searchClick.state = true;</div><div class=\"line\">                    searchClick.lng = data.marker.point.lng;</div><div class=\"line\">                    searchClick.lat = data.marker.point.lat;</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;);</div><div class=\"line\">            map.centerAndZoom(new BMap.Point(114.063821, 22.549535), 11);</div><div class=\"line\">            // 监听搜索输入变化</div><div class=\"line\">            var watch = scope.$watch(&apos;searchText&apos;, function(newValue, oldValue, scope) &#123;</div><div class=\"line\">                if (!scope.searchText) &#123;</div><div class=\"line\">                    return;</div><div class=\"line\">                &#125;</div><div class=\"line\">                myKeys = scope.searchText.split(&apos; &apos;);</div><div class=\"line\">                local.search(myKeys);</div><div class=\"line\">            &#125;);</div><div class=\"line\"></div><div class=\"line\">            // 监听经纬度变化</div><div class=\"line\">            var watch = scope.$watch(&apos;locationStr&apos;, function(newValue, oldValue, scope) &#123;</div><div class=\"line\">                if (!scope.locationStr) &#123;</div><div class=\"line\">                    return;</div><div class=\"line\">                &#125;</div><div class=\"line\">                var lat = scope.locationStr.split(&apos; &apos;)[1];</div><div class=\"line\">                var lng = scope.locationStr.split(&apos; &apos;)[0];</div><div class=\"line\">                // 移除点</div><div class=\"line\">                map.removeOverlay(marker);</div><div class=\"line\">                // 创建点</div><div class=\"line\">                var p = new BMap.Point(lng, lat);</div><div class=\"line\">                marker = new BMap.Marker(p);</div><div class=\"line\">                // 添加点</div><div class=\"line\">                map.addOverlay(marker);</div><div class=\"line\">                // 设置中心</div><div class=\"line\">                map.panTo(p);</div><div class=\"line\">            &#125;);</div><div class=\"line\"></div><div class=\"line\">            // 单击地图时返回坐标(longitude, latitude)</div><div class=\"line\">            map.addEventListener(&quot;click&quot;, function(e) &#123;</div><div class=\"line\">                // 移除点</div><div class=\"line\">                map.removeOverlay(marker);</div><div class=\"line\">                // 创建点</div><div class=\"line\">                var p = new BMap.Point(e.point.lng, e.point.lat);</div><div class=\"line\">                if (searchClick.state) &#123;</div><div class=\"line\">                    p = new BMap.Point(searchClick.lng, searchClick.lat);</div><div class=\"line\">                    searchClick.state = false;</div><div class=\"line\">                &#125; else &#123;</div><div class=\"line\">                    marker = new BMap.Marker(p);</div><div class=\"line\">                    // 添加点</div><div class=\"line\">                    map.addOverlay(marker);</div><div class=\"line\">                &#125;</div><div class=\"line\">                // 设置中心</div><div class=\"line\">                map.panTo(p);</div><div class=\"line\">                // 更改经纬度</div><div class=\"line\">                scope.location.longitude = e.point.lng;</div><div class=\"line\">                scope.location.latitude = e.point.lat;</div><div class=\"line\">            &#125;);</div><div class=\"line\">        &#125;,</div><div class=\"line\">    &#125;;</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure></p>\n<h3 id=\"最终效果\"><a href=\"#最终效果\" class=\"headerlink\" title=\"最终效果\"></a>最终效果</h3><p>如图：<br><img src=\"http://o905ne85q.bkt.clouddn.com/F7EE.tmp.png\" alt=\"image\"></p>\n<h2 id=\"结束语\"><a href=\"#结束语\" class=\"headerlink\" title=\"结束语\"></a>结束语</h2><hr>\n<p>在实例中本骚年还创建了另外一个地图服务，用于展示路径，感兴趣的小伙伴也可以自行查看相关的代码呀。<br><a href=\"https://github.com/godbasin/godbasin.github.io/tree/blog-codes/angular-notes/14-use-bmap\">此处查看项目代码（仅包含app部分）</a><br><a href=\"http://o9grhhyar.bkt.clouddn.com/14-use-bmap/index.html#/bmap\">此处查看页面效果</a></p>"},{"title":"Angular使用笔记13-对指令Directive进行单元测试","date":"2016-08-05T14:30:27.000Z","_content":"最近的一个项目使用AngularJS(v1.2.6)作为前端的框架，《Angular使用笔记》系列用于记录过程中的一些使用和解决方法。\n本文记录对指令Directive进行单元测试的过程。\n<!--more-->\n\n## Directive的单元测试\n-----\n### 注入模块和依赖\n首先我们需要注入模块和依赖，在这里分别是angularTestApp和$compile/$rootScope：\n``` js\n//注入应用\nbeforeEach(module('angularTestApp'));\nvar element, scope;\n//注入依赖（指令）\nbeforeEach(inject(function ($compile, $rootScope) {\n\tscope = $rootScope.$new();\n\t// 使用compile编译指令\n\telement =  $compile(\"<header app-header></header>\")(scope);    \n\t// 作用域运行\n\tscope.$digest();\n}));\n```\n\n### 测试指令生成的模板\n对指令生成的模板，可对其包含元素进行测试，例如多少个按钮、有什么文字、等等。\n``` js\n// 头部指令中，有一个样式为navbar-brand的元素，其内容为Godbasin\nit('should contains 1 Godbasin brand', function () {\n\t// Check that the compiled element contains the templated content\n\texpect(element[0].querySelectorAll('.navbar-brand').length).toEqual(1);\n\texpect(element.html()).toContain(\"Godbasin\");\n});\n// 头部指令中，有一个样式为navbar-header和一个样式为navbar-collapse的元素\nit('should have 1 navbar-header and 1 navbar-collapse', function () {    \n\texpect(element[0].querySelectorAll('.navbar-header').length).toEqual(1);\n\texpect(element[0].querySelectorAll('.navbar-collapse').length).toEqual(1);\n});\n```\n\n### 使用jasmine-jquery测试元素\n- 安装jasmine-jquery\n使用[jasmine-jquery插件](https://github.com/velesin/jasmine-jquery)将有效帮助我们测试指令的元素。这里我们使用bower安装：\n``` cmd\nbower install jasmine-jquery --save\n```\n注意：安装jasmine-jquery对jquery的版本有一定要求（jasmine-jquery依赖jquery），可能导致安装失败，提示如下：\n![image](http://o905ne85q.bkt.clouddn.com/2B17.tmp.png)\n这里我们将bower文件中的jquery版本修改一下：\n``` cmd\n\"jquery\": \">=2.0.0\",\n```\n然后重新执行`bower install`，此时便可以成功安装jasmine-jquery了。\n\n- 配置karma.conf.js\nKarma的配置很简单，只需要将相关的文件添加进加载的文件中便可以：\n``` cmd\nfiles: [\n\t...\n\t'app/bower_components/jquery/dist/jquery.min.js',\n\t'app/bower_components/jasmine-jquery/lib/jasmine-jquery.js',\n\t...\n],\n```\n\n- 使用jasmine-jquery\n这样，我们的元素相关操作变得简单了。\n``` javascript\nit('should contains 1 Godbasin brand', function () {\n\texpect($(element).find('.navbar-brand').length).toEqual(1);\n\texpect($(element).find('.navbar-brand').text()).toContain(\"Godbasin\");\n});\nit('should have 1 navbar-header and 1 navbar-collapse', function () {    \n\texpect($(element).find('.navbar-header').length).toEqual(1);\n\texpect($(element).find('.navbar-collapse').length).toEqual(1);\n});\n```\n\n### 测试作用域scope\n这里我们简单测试Header指令的菜单。\n``` javascript\nit('should have 2 menus and 1 usermenu', function () {\n\texpect(scope.menus.length).toEqual(2);\n\texpect(scope.usermenus.length).toEqual(1);\n});\n```\n\n### 测试事件触发\n这里我们测试按钮的点击。\n``` javascript\nit('should show asidemenus when click .dropdown-toggle', function () {\n\tvar toggle = $(element).find('.dropdown-toggle');\n\tvar spyEvent = spyOnEvent(toggle, 'click');\n\t$(element).find('.dropdown-toggle').trigger('click');\n\texpect(spyEvent).toHaveBeenTriggered();\n});\n```\n\n## 使用ng-html2js测试指令\n-----\n当我们的指令中模板使用templateUrl时，我们进行测试会得到以下结果：\n![image](http://o905ne85q.bkt.clouddn.com/430D.tmp.png)\n这时候我们可以使用ng-html2js进行处理。\n\n### 安装配置\n这里使用插件[karma-ng-html2js-preprocessor](https://github.com/karma-runner/karma-ng-html2js-preprocessor)。\n- 安装依赖\n``` cmd\nnpm install karma-ng-html2js-preprocessor --save-dev\n```\n- karma.conf.js配置\n我们需要在karma配置文件中添加相关的配置：\n\n``` javascript\n// 添加加载的文件\nfiles: [\n\t...\n\t'app/views/**/*.html',\n\t'app/views/*.html'\n],\n// 添加预处理\npreprocessors: {\n\t...\n\t'app/views/*.html': 'ng-html2js',\n\t'app/views/**/*.html': 'ng-html2js'\n},\n// 预处理相关配置\nngHtml2JsPreprocessor: { \n\tstripPrefix: 'app/', \n\tmoduleName: 'views' // 生成的模块名字\n},\n// 添加插件\nplugins: [\n\t...\n\t'karma-ng-html2js-preprocessor'\n],\n```\n\n### 注入模块\n测试文件中，我们可以在注入模块的同时注入指令模板，这里使用名字注入：\n``` javascript\nbeforeEach(module('views'));\n```\n现在运行我们的测试，可以看到测试结果如下：\n![image](http://o905ne85q.bkt.clouddn.com/7334.tmp.png)\n完成！\n\n## 结束语\n-----\n刚开始接触Karma的配置也很是复杂呢，用多了之后就好多啦，自动化和工程化也是个不简单的事情呢。\n[此处查看项目代码（包含app以及test部分）](https://github.com/godbasin/godbasin.github.io/tree/blog-codes/angular-notes/13-unit-test-directive)\n\n","source":"_posts/angular-note-13-unit-test-directive.md","raw":"---\ntitle: Angular使用笔记13-对指令Directive进行单元测试\ndate: 2016-08-05 22:30:27\ncategories: angular混搭\ntags: 笔记\n---\n最近的一个项目使用AngularJS(v1.2.6)作为前端的框架，《Angular使用笔记》系列用于记录过程中的一些使用和解决方法。\n本文记录对指令Directive进行单元测试的过程。\n<!--more-->\n\n## Directive的单元测试\n-----\n### 注入模块和依赖\n首先我们需要注入模块和依赖，在这里分别是angularTestApp和$compile/$rootScope：\n``` js\n//注入应用\nbeforeEach(module('angularTestApp'));\nvar element, scope;\n//注入依赖（指令）\nbeforeEach(inject(function ($compile, $rootScope) {\n\tscope = $rootScope.$new();\n\t// 使用compile编译指令\n\telement =  $compile(\"<header app-header></header>\")(scope);    \n\t// 作用域运行\n\tscope.$digest();\n}));\n```\n\n### 测试指令生成的模板\n对指令生成的模板，可对其包含元素进行测试，例如多少个按钮、有什么文字、等等。\n``` js\n// 头部指令中，有一个样式为navbar-brand的元素，其内容为Godbasin\nit('should contains 1 Godbasin brand', function () {\n\t// Check that the compiled element contains the templated content\n\texpect(element[0].querySelectorAll('.navbar-brand').length).toEqual(1);\n\texpect(element.html()).toContain(\"Godbasin\");\n});\n// 头部指令中，有一个样式为navbar-header和一个样式为navbar-collapse的元素\nit('should have 1 navbar-header and 1 navbar-collapse', function () {    \n\texpect(element[0].querySelectorAll('.navbar-header').length).toEqual(1);\n\texpect(element[0].querySelectorAll('.navbar-collapse').length).toEqual(1);\n});\n```\n\n### 使用jasmine-jquery测试元素\n- 安装jasmine-jquery\n使用[jasmine-jquery插件](https://github.com/velesin/jasmine-jquery)将有效帮助我们测试指令的元素。这里我们使用bower安装：\n``` cmd\nbower install jasmine-jquery --save\n```\n注意：安装jasmine-jquery对jquery的版本有一定要求（jasmine-jquery依赖jquery），可能导致安装失败，提示如下：\n![image](http://o905ne85q.bkt.clouddn.com/2B17.tmp.png)\n这里我们将bower文件中的jquery版本修改一下：\n``` cmd\n\"jquery\": \">=2.0.0\",\n```\n然后重新执行`bower install`，此时便可以成功安装jasmine-jquery了。\n\n- 配置karma.conf.js\nKarma的配置很简单，只需要将相关的文件添加进加载的文件中便可以：\n``` cmd\nfiles: [\n\t...\n\t'app/bower_components/jquery/dist/jquery.min.js',\n\t'app/bower_components/jasmine-jquery/lib/jasmine-jquery.js',\n\t...\n],\n```\n\n- 使用jasmine-jquery\n这样，我们的元素相关操作变得简单了。\n``` javascript\nit('should contains 1 Godbasin brand', function () {\n\texpect($(element).find('.navbar-brand').length).toEqual(1);\n\texpect($(element).find('.navbar-brand').text()).toContain(\"Godbasin\");\n});\nit('should have 1 navbar-header and 1 navbar-collapse', function () {    \n\texpect($(element).find('.navbar-header').length).toEqual(1);\n\texpect($(element).find('.navbar-collapse').length).toEqual(1);\n});\n```\n\n### 测试作用域scope\n这里我们简单测试Header指令的菜单。\n``` javascript\nit('should have 2 menus and 1 usermenu', function () {\n\texpect(scope.menus.length).toEqual(2);\n\texpect(scope.usermenus.length).toEqual(1);\n});\n```\n\n### 测试事件触发\n这里我们测试按钮的点击。\n``` javascript\nit('should show asidemenus when click .dropdown-toggle', function () {\n\tvar toggle = $(element).find('.dropdown-toggle');\n\tvar spyEvent = spyOnEvent(toggle, 'click');\n\t$(element).find('.dropdown-toggle').trigger('click');\n\texpect(spyEvent).toHaveBeenTriggered();\n});\n```\n\n## 使用ng-html2js测试指令\n-----\n当我们的指令中模板使用templateUrl时，我们进行测试会得到以下结果：\n![image](http://o905ne85q.bkt.clouddn.com/430D.tmp.png)\n这时候我们可以使用ng-html2js进行处理。\n\n### 安装配置\n这里使用插件[karma-ng-html2js-preprocessor](https://github.com/karma-runner/karma-ng-html2js-preprocessor)。\n- 安装依赖\n``` cmd\nnpm install karma-ng-html2js-preprocessor --save-dev\n```\n- karma.conf.js配置\n我们需要在karma配置文件中添加相关的配置：\n\n``` javascript\n// 添加加载的文件\nfiles: [\n\t...\n\t'app/views/**/*.html',\n\t'app/views/*.html'\n],\n// 添加预处理\npreprocessors: {\n\t...\n\t'app/views/*.html': 'ng-html2js',\n\t'app/views/**/*.html': 'ng-html2js'\n},\n// 预处理相关配置\nngHtml2JsPreprocessor: { \n\tstripPrefix: 'app/', \n\tmoduleName: 'views' // 生成的模块名字\n},\n// 添加插件\nplugins: [\n\t...\n\t'karma-ng-html2js-preprocessor'\n],\n```\n\n### 注入模块\n测试文件中，我们可以在注入模块的同时注入指令模板，这里使用名字注入：\n``` javascript\nbeforeEach(module('views'));\n```\n现在运行我们的测试，可以看到测试结果如下：\n![image](http://o905ne85q.bkt.clouddn.com/7334.tmp.png)\n完成！\n\n## 结束语\n-----\n刚开始接触Karma的配置也很是复杂呢，用多了之后就好多啦，自动化和工程化也是个不简单的事情呢。\n[此处查看项目代码（包含app以及test部分）](https://github.com/godbasin/godbasin.github.io/tree/blog-codes/angular-notes/13-unit-test-directive)\n\n","slug":"angular-note-13-unit-test-directive","published":1,"updated":"2016-08-20T10:54:21.047Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cix45huek000ixotunxdtl07a","content":"<p>最近的一个项目使用AngularJS(v1.2.6)作为前端的框架，《Angular使用笔记》系列用于记录过程中的一些使用和解决方法。<br>本文记录对指令Directive进行单元测试的过程。<br><a id=\"more\"></a></p>\n<h2 id=\"Directive的单元测试\"><a href=\"#Directive的单元测试\" class=\"headerlink\" title=\"Directive的单元测试\"></a>Directive的单元测试</h2><hr>\n<h3 id=\"注入模块和依赖\"><a href=\"#注入模块和依赖\" class=\"headerlink\" title=\"注入模块和依赖\"></a>注入模块和依赖</h3><p>首先我们需要注入模块和依赖，在这里分别是angularTestApp和$compile/$rootScope：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//注入应用</span></div><div class=\"line\">beforeEach(<span class=\"built_in\">module</span>(<span class=\"string\">'angularTestApp'</span>));</div><div class=\"line\"><span class=\"keyword\">var</span> element, scope;</div><div class=\"line\"><span class=\"comment\">//注入依赖（指令）</span></div><div class=\"line\">beforeEach(inject(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">$compile, $rootScope</span>) </span>&#123;</div><div class=\"line\">  scope = $rootScope.$<span class=\"keyword\">new</span>();</div><div class=\"line\">  <span class=\"comment\">// 使用compile编译指令</span></div><div class=\"line\">  element =  $compile(<span class=\"string\">\"&lt;header app-header&gt;&lt;/header&gt;\"</span>)(scope);    </div><div class=\"line\">  <span class=\"comment\">// 作用域运行</span></div><div class=\"line\">  scope.$digest();</div><div class=\"line\">&#125;));</div></pre></td></tr></table></figure></p>\n<h3 id=\"测试指令生成的模板\"><a href=\"#测试指令生成的模板\" class=\"headerlink\" title=\"测试指令生成的模板\"></a>测试指令生成的模板</h3><p>对指令生成的模板，可对其包含元素进行测试，例如多少个按钮、有什么文字、等等。<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 头部指令中，有一个样式为navbar-brand的元素，其内容为Godbasin</span></div><div class=\"line\">it(<span class=\"string\">'should contains 1 Godbasin brand'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">  <span class=\"comment\">// Check that the compiled element contains the templated content</span></div><div class=\"line\">  expect(element[<span class=\"number\">0</span>].querySelectorAll(<span class=\"string\">'.navbar-brand'</span>).length).toEqual(<span class=\"number\">1</span>);</div><div class=\"line\">  expect(element.html()).toContain(<span class=\"string\">\"Godbasin\"</span>);</div><div class=\"line\">&#125;);</div><div class=\"line\"><span class=\"comment\">// 头部指令中，有一个样式为navbar-header和一个样式为navbar-collapse的元素</span></div><div class=\"line\">it(<span class=\"string\">'should have 1 navbar-header and 1 navbar-collapse'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;    </div><div class=\"line\">  expect(element[<span class=\"number\">0</span>].querySelectorAll(<span class=\"string\">'.navbar-header'</span>).length).toEqual(<span class=\"number\">1</span>);</div><div class=\"line\">  expect(element[<span class=\"number\">0</span>].querySelectorAll(<span class=\"string\">'.navbar-collapse'</span>).length).toEqual(<span class=\"number\">1</span>);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure></p>\n<h3 id=\"使用jasmine-jquery测试元素\"><a href=\"#使用jasmine-jquery测试元素\" class=\"headerlink\" title=\"使用jasmine-jquery测试元素\"></a>使用jasmine-jquery测试元素</h3><ul>\n<li>安装jasmine-jquery<br>使用<a href=\"https://github.com/velesin/jasmine-jquery\" target=\"_blank\" rel=\"external\">jasmine-jquery插件</a>将有效帮助我们测试指令的元素。这里我们使用bower安装：<figure class=\"highlight cmd\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">bower install jasmine-jquery --save</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>注意：安装jasmine-jquery对jquery的版本有一定要求（jasmine-jquery依赖jquery），可能导致安装失败，提示如下：<br><img src=\"http://o905ne85q.bkt.clouddn.com/2B17.tmp.png\" alt=\"image\"><br>这里我们将bower文件中的jquery版本修改一下：<br><figure class=\"highlight cmd\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">\"jquery\": \"&gt;=<span class=\"number\">2</span>.<span class=\"number\">0</span>.<span class=\"number\">0</span>\",</div></pre></td></tr></table></figure></p>\n<p>然后重新执行<code>bower install</code>，此时便可以成功安装jasmine-jquery了。</p>\n<ul>\n<li><p>配置karma.conf.js<br>Karma的配置很简单，只需要将相关的文件添加进加载的文件中便可以：</p>\n<figure class=\"highlight cmd\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\">files: [</span></div><div class=\"line\">  ...</div><div class=\"line\">  '<span class=\"title\">app</span>/<span class=\"title\">bower_components</span>/<span class=\"title\">jquery</span>/<span class=\"title\">dist</span>/<span class=\"title\">jquery.min.js</span>',</div><div class=\"line\">  '<span class=\"title\">app</span>/<span class=\"title\">bower_components</span>/<span class=\"title\">jasmine</span>-<span class=\"title\">jquery</span>/<span class=\"title\">lib</span>/<span class=\"title\">jasmine</span>-<span class=\"title\">jquery.js</span>',</div><div class=\"line\">  ...</div><div class=\"line\">],</div></pre></td></tr></table></figure>\n</li>\n<li><p>使用jasmine-jquery<br>这样，我们的元素相关操作变得简单了。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">it(<span class=\"string\">'should contains 1 Godbasin brand'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">  expect($(element).find(<span class=\"string\">'.navbar-brand'</span>).length).toEqual(<span class=\"number\">1</span>);</div><div class=\"line\">  expect($(element).find(<span class=\"string\">'.navbar-brand'</span>).text()).toContain(<span class=\"string\">\"Godbasin\"</span>);</div><div class=\"line\">&#125;);</div><div class=\"line\">it(<span class=\"string\">'should have 1 navbar-header and 1 navbar-collapse'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;    </div><div class=\"line\">  expect($(element).find(<span class=\"string\">'.navbar-header'</span>).length).toEqual(<span class=\"number\">1</span>);</div><div class=\"line\">  expect($(element).find(<span class=\"string\">'.navbar-collapse'</span>).length).toEqual(<span class=\"number\">1</span>);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3 id=\"测试作用域scope\"><a href=\"#测试作用域scope\" class=\"headerlink\" title=\"测试作用域scope\"></a>测试作用域scope</h3><p>这里我们简单测试Header指令的菜单。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">it(<span class=\"string\">'should have 2 menus and 1 usermenu'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">  expect(scope.menus.length).toEqual(<span class=\"number\">2</span>);</div><div class=\"line\">  expect(scope.usermenus.length).toEqual(<span class=\"number\">1</span>);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure></p>\n<h3 id=\"测试事件触发\"><a href=\"#测试事件触发\" class=\"headerlink\" title=\"测试事件触发\"></a>测试事件触发</h3><p>这里我们测试按钮的点击。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">it(<span class=\"string\">'should show asidemenus when click .dropdown-toggle'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">var</span> toggle = $(element).find(<span class=\"string\">'.dropdown-toggle'</span>);</div><div class=\"line\">  <span class=\"keyword\">var</span> spyEvent = spyOnEvent(toggle, <span class=\"string\">'click'</span>);</div><div class=\"line\">  $(element).find(<span class=\"string\">'.dropdown-toggle'</span>).trigger(<span class=\"string\">'click'</span>);</div><div class=\"line\">  expect(spyEvent).toHaveBeenTriggered();</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure></p>\n<h2 id=\"使用ng-html2js测试指令\"><a href=\"#使用ng-html2js测试指令\" class=\"headerlink\" title=\"使用ng-html2js测试指令\"></a>使用ng-html2js测试指令</h2><hr>\n<p>当我们的指令中模板使用templateUrl时，我们进行测试会得到以下结果：<br><img src=\"http://o905ne85q.bkt.clouddn.com/430D.tmp.png\" alt=\"image\"><br>这时候我们可以使用ng-html2js进行处理。</p>\n<h3 id=\"安装配置\"><a href=\"#安装配置\" class=\"headerlink\" title=\"安装配置\"></a>安装配置</h3><p>这里使用插件<a href=\"https://github.com/karma-runner/karma-ng-html2js-preprocessor\" target=\"_blank\" rel=\"external\">karma-ng-html2js-preprocessor</a>。</p>\n<ul>\n<li><p>安装依赖</p>\n<figure class=\"highlight cmd\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">npm install karma-ng-html2js-preprocessor --save-dev</div></pre></td></tr></table></figure>\n</li>\n<li><p>karma.conf.js配置<br>我们需要在karma配置文件中添加相关的配置：</p>\n</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 添加加载的文件</span></div><div class=\"line\">files: [</div><div class=\"line\">  ...</div><div class=\"line\">  <span class=\"string\">'app/views/**/*.html'</span>,</div><div class=\"line\">  <span class=\"string\">'app/views/*.html'</span></div><div class=\"line\">],</div><div class=\"line\"><span class=\"comment\">// 添加预处理</span></div><div class=\"line\">preprocessors: &#123;</div><div class=\"line\">  ...</div><div class=\"line\">  <span class=\"string\">'app/views/*.html'</span>: <span class=\"string\">'ng-html2js'</span>,</div><div class=\"line\">  <span class=\"string\">'app/views/**/*.html'</span>: <span class=\"string\">'ng-html2js'</span></div><div class=\"line\">&#125;,</div><div class=\"line\"><span class=\"comment\">// 预处理相关配置</span></div><div class=\"line\">ngHtml2JsPreprocessor: &#123; </div><div class=\"line\">  <span class=\"attr\">stripPrefix</span>: <span class=\"string\">'app/'</span>, </div><div class=\"line\">  <span class=\"attr\">moduleName</span>: <span class=\"string\">'views'</span> <span class=\"comment\">// 生成的模块名字</span></div><div class=\"line\">&#125;,</div><div class=\"line\"><span class=\"comment\">// 添加插件</span></div><div class=\"line\">plugins: [</div><div class=\"line\">  ...</div><div class=\"line\">  <span class=\"string\">'karma-ng-html2js-preprocessor'</span></div><div class=\"line\">],</div></pre></td></tr></table></figure>\n<h3 id=\"注入模块\"><a href=\"#注入模块\" class=\"headerlink\" title=\"注入模块\"></a>注入模块</h3><p>测试文件中，我们可以在注入模块的同时注入指令模板，这里使用名字注入：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">beforeEach(<span class=\"built_in\">module</span>(<span class=\"string\">'views'</span>));</div></pre></td></tr></table></figure></p>\n<p>现在运行我们的测试，可以看到测试结果如下：<br><img src=\"http://o905ne85q.bkt.clouddn.com/7334.tmp.png\" alt=\"image\"><br>完成！</p>\n<h2 id=\"结束语\"><a href=\"#结束语\" class=\"headerlink\" title=\"结束语\"></a>结束语</h2><hr>\n<p>刚开始接触Karma的配置也很是复杂呢，用多了之后就好多啦，自动化和工程化也是个不简单的事情呢。<br><a href=\"https://github.com/godbasin/godbasin.github.io/tree/blog-codes/angular-notes/13-unit-test-directive\" target=\"_blank\" rel=\"external\">此处查看项目代码（包含app以及test部分）</a></p>\n","excerpt":"<p>最近的一个项目使用AngularJS(v1.2.6)作为前端的框架，《Angular使用笔记》系列用于记录过程中的一些使用和解决方法。<br>本文记录对指令Directive进行单元测试的过程。<br>","more":"</p>\n<h2 id=\"Directive的单元测试\"><a href=\"#Directive的单元测试\" class=\"headerlink\" title=\"Directive的单元测试\"></a>Directive的单元测试</h2><hr>\n<h3 id=\"注入模块和依赖\"><a href=\"#注入模块和依赖\" class=\"headerlink\" title=\"注入模块和依赖\"></a>注入模块和依赖</h3><p>首先我们需要注入模块和依赖，在这里分别是angularTestApp和$compile/$rootScope：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//注入应用</span></div><div class=\"line\">beforeEach(<span class=\"built_in\">module</span>(<span class=\"string\">'angularTestApp'</span>));</div><div class=\"line\"><span class=\"keyword\">var</span> element, scope;</div><div class=\"line\"><span class=\"comment\">//注入依赖（指令）</span></div><div class=\"line\">beforeEach(inject(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">$compile, $rootScope</span>) </span>&#123;</div><div class=\"line\">  scope = $rootScope.$<span class=\"keyword\">new</span>();</div><div class=\"line\">  <span class=\"comment\">// 使用compile编译指令</span></div><div class=\"line\">  element =  $compile(<span class=\"string\">\"&lt;header app-header&gt;&lt;/header&gt;\"</span>)(scope);    </div><div class=\"line\">  <span class=\"comment\">// 作用域运行</span></div><div class=\"line\">  scope.$digest();</div><div class=\"line\">&#125;));</div></pre></td></tr></table></figure></p>\n<h3 id=\"测试指令生成的模板\"><a href=\"#测试指令生成的模板\" class=\"headerlink\" title=\"测试指令生成的模板\"></a>测试指令生成的模板</h3><p>对指令生成的模板，可对其包含元素进行测试，例如多少个按钮、有什么文字、等等。<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 头部指令中，有一个样式为navbar-brand的元素，其内容为Godbasin</span></div><div class=\"line\">it(<span class=\"string\">'should contains 1 Godbasin brand'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">  <span class=\"comment\">// Check that the compiled element contains the templated content</span></div><div class=\"line\">  expect(element[<span class=\"number\">0</span>].querySelectorAll(<span class=\"string\">'.navbar-brand'</span>).length).toEqual(<span class=\"number\">1</span>);</div><div class=\"line\">  expect(element.html()).toContain(<span class=\"string\">\"Godbasin\"</span>);</div><div class=\"line\">&#125;);</div><div class=\"line\"><span class=\"comment\">// 头部指令中，有一个样式为navbar-header和一个样式为navbar-collapse的元素</span></div><div class=\"line\">it(<span class=\"string\">'should have 1 navbar-header and 1 navbar-collapse'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;    </div><div class=\"line\">  expect(element[<span class=\"number\">0</span>].querySelectorAll(<span class=\"string\">'.navbar-header'</span>).length).toEqual(<span class=\"number\">1</span>);</div><div class=\"line\">  expect(element[<span class=\"number\">0</span>].querySelectorAll(<span class=\"string\">'.navbar-collapse'</span>).length).toEqual(<span class=\"number\">1</span>);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure></p>\n<h3 id=\"使用jasmine-jquery测试元素\"><a href=\"#使用jasmine-jquery测试元素\" class=\"headerlink\" title=\"使用jasmine-jquery测试元素\"></a>使用jasmine-jquery测试元素</h3><ul>\n<li>安装jasmine-jquery<br>使用<a href=\"https://github.com/velesin/jasmine-jquery\">jasmine-jquery插件</a>将有效帮助我们测试指令的元素。这里我们使用bower安装：<figure class=\"highlight cmd\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">bower install jasmine-jquery --save</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>注意：安装jasmine-jquery对jquery的版本有一定要求（jasmine-jquery依赖jquery），可能导致安装失败，提示如下：<br><img src=\"http://o905ne85q.bkt.clouddn.com/2B17.tmp.png\" alt=\"image\"><br>这里我们将bower文件中的jquery版本修改一下：<br><figure class=\"highlight cmd\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">\"jquery\": \"&gt;=<span class=\"number\">2</span>.<span class=\"number\">0</span>.<span class=\"number\">0</span>\",</div></pre></td></tr></table></figure></p>\n<p>然后重新执行<code>bower install</code>，此时便可以成功安装jasmine-jquery了。</p>\n<ul>\n<li><p>配置karma.conf.js<br>Karma的配置很简单，只需要将相关的文件添加进加载的文件中便可以：</p>\n<figure class=\"highlight cmd\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\">files: [</div><div class=\"line\">  ...</div><div class=\"line\">  '<span class=\"title\">app</span>/<span class=\"title\">bower_components</span>/<span class=\"title\">jquery</span>/<span class=\"title\">dist</span>/<span class=\"title\">jquery.min.js</span>',</div><div class=\"line\">  '<span class=\"title\">app</span>/<span class=\"title\">bower_components</span>/<span class=\"title\">jasmine</span>-<span class=\"title\">jquery</span>/<span class=\"title\">lib</span>/<span class=\"title\">jasmine</span>-<span class=\"title\">jquery.js</span>',</div><div class=\"line\">  ...</div><div class=\"line\">],</span></div></pre></td></tr></table></figure>\n</li>\n<li><p>使用jasmine-jquery<br>这样，我们的元素相关操作变得简单了。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">it(<span class=\"string\">'should contains 1 Godbasin brand'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">  expect($(element).find(<span class=\"string\">'.navbar-brand'</span>).length).toEqual(<span class=\"number\">1</span>);</div><div class=\"line\">  expect($(element).find(<span class=\"string\">'.navbar-brand'</span>).text()).toContain(<span class=\"string\">\"Godbasin\"</span>);</div><div class=\"line\">&#125;);</div><div class=\"line\">it(<span class=\"string\">'should have 1 navbar-header and 1 navbar-collapse'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;    </div><div class=\"line\">  expect($(element).find(<span class=\"string\">'.navbar-header'</span>).length).toEqual(<span class=\"number\">1</span>);</div><div class=\"line\">  expect($(element).find(<span class=\"string\">'.navbar-collapse'</span>).length).toEqual(<span class=\"number\">1</span>);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3 id=\"测试作用域scope\"><a href=\"#测试作用域scope\" class=\"headerlink\" title=\"测试作用域scope\"></a>测试作用域scope</h3><p>这里我们简单测试Header指令的菜单。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">it(<span class=\"string\">'should have 2 menus and 1 usermenu'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">  expect(scope.menus.length).toEqual(<span class=\"number\">2</span>);</div><div class=\"line\">  expect(scope.usermenus.length).toEqual(<span class=\"number\">1</span>);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure></p>\n<h3 id=\"测试事件触发\"><a href=\"#测试事件触发\" class=\"headerlink\" title=\"测试事件触发\"></a>测试事件触发</h3><p>这里我们测试按钮的点击。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">it(<span class=\"string\">'should show asidemenus when click .dropdown-toggle'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">var</span> toggle = $(element).find(<span class=\"string\">'.dropdown-toggle'</span>);</div><div class=\"line\">  <span class=\"keyword\">var</span> spyEvent = spyOnEvent(toggle, <span class=\"string\">'click'</span>);</div><div class=\"line\">  $(element).find(<span class=\"string\">'.dropdown-toggle'</span>).trigger(<span class=\"string\">'click'</span>);</div><div class=\"line\">  expect(spyEvent).toHaveBeenTriggered();</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure></p>\n<h2 id=\"使用ng-html2js测试指令\"><a href=\"#使用ng-html2js测试指令\" class=\"headerlink\" title=\"使用ng-html2js测试指令\"></a>使用ng-html2js测试指令</h2><hr>\n<p>当我们的指令中模板使用templateUrl时，我们进行测试会得到以下结果：<br><img src=\"http://o905ne85q.bkt.clouddn.com/430D.tmp.png\" alt=\"image\"><br>这时候我们可以使用ng-html2js进行处理。</p>\n<h3 id=\"安装配置\"><a href=\"#安装配置\" class=\"headerlink\" title=\"安装配置\"></a>安装配置</h3><p>这里使用插件<a href=\"https://github.com/karma-runner/karma-ng-html2js-preprocessor\">karma-ng-html2js-preprocessor</a>。</p>\n<ul>\n<li><p>安装依赖</p>\n<figure class=\"highlight cmd\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">npm install karma-ng-html2js-preprocessor --save-dev</div></pre></td></tr></table></figure>\n</li>\n<li><p>karma.conf.js配置<br>我们需要在karma配置文件中添加相关的配置：</p>\n</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 添加加载的文件</span></div><div class=\"line\">files: [</div><div class=\"line\">  ...</div><div class=\"line\">  <span class=\"string\">'app/views/**/*.html'</span>,</div><div class=\"line\">  <span class=\"string\">'app/views/*.html'</span></div><div class=\"line\">],</div><div class=\"line\"><span class=\"comment\">// 添加预处理</span></div><div class=\"line\">preprocessors: &#123;</div><div class=\"line\">  ...</div><div class=\"line\">  <span class=\"string\">'app/views/*.html'</span>: <span class=\"string\">'ng-html2js'</span>,</div><div class=\"line\">  <span class=\"string\">'app/views/**/*.html'</span>: <span class=\"string\">'ng-html2js'</span></div><div class=\"line\">&#125;,</div><div class=\"line\"><span class=\"comment\">// 预处理相关配置</span></div><div class=\"line\">ngHtml2JsPreprocessor: &#123; </div><div class=\"line\">  <span class=\"attr\">stripPrefix</span>: <span class=\"string\">'app/'</span>, </div><div class=\"line\">  <span class=\"attr\">moduleName</span>: <span class=\"string\">'views'</span> <span class=\"comment\">// 生成的模块名字</span></div><div class=\"line\">&#125;,</div><div class=\"line\"><span class=\"comment\">// 添加插件</span></div><div class=\"line\">plugins: [</div><div class=\"line\">  ...</div><div class=\"line\">  <span class=\"string\">'karma-ng-html2js-preprocessor'</span></div><div class=\"line\">],</div></pre></td></tr></table></figure>\n<h3 id=\"注入模块\"><a href=\"#注入模块\" class=\"headerlink\" title=\"注入模块\"></a>注入模块</h3><p>测试文件中，我们可以在注入模块的同时注入指令模板，这里使用名字注入：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">beforeEach(<span class=\"built_in\">module</span>(<span class=\"string\">'views'</span>));</div></pre></td></tr></table></figure></p>\n<p>现在运行我们的测试，可以看到测试结果如下：<br><img src=\"http://o905ne85q.bkt.clouddn.com/7334.tmp.png\" alt=\"image\"><br>完成！</p>\n<h2 id=\"结束语\"><a href=\"#结束语\" class=\"headerlink\" title=\"结束语\"></a>结束语</h2><hr>\n<p>刚开始接触Karma的配置也很是复杂呢，用多了之后就好多啦，自动化和工程化也是个不简单的事情呢。<br><a href=\"https://github.com/godbasin/godbasin.github.io/tree/blog-codes/angular-notes/13-unit-test-directive\">此处查看项目代码（包含app以及test部分）</a></p>"},{"title":"Angular使用笔记2--创建登录页面","date":"2016-07-08T14:45:32.000Z","_content":"最近的一个项目使用AngularJS(v1.2.6)作为前端的框架，《Angular使用笔记》系列用于记录过程中的一些使用和解决方法。\n本文记录搭建登录页面的过程。\n<!--more-->\n## 根据产品规划划分模块\n-----\n### 主要页面逻辑\n在这里，本骚年就建一个比较简单的项目。\n- 我们的主要页面逻辑如下：\n  - 1.登录页面，输入账号和密码即可\n  - 2.模块页面\n\n本项目主要用于展示Angular使用过程，故这里使用了Bootstrap简单构建项目。\n使用Bootatrap有个不好的地方就是需要引入jQuery(Angular中不建议使用jQuery，同时本人也有这样的洁癖)，而页面大小也增加了不少。\n\n### 创建登录页面\n- 首先我们在views文件夹内添加一个login.html\n\n``` html\n<div class=\"container\" id=\"login\">\n\t<!--ng-submit绑定登录事件-->\n\t<form id=\"login-form\" ng-submit=\"submit()\">\n\t\t<h3 class=\"text-center\">login</h3>\n\t\t<div class=\"form-group\">\n\t\t\t<label>account</label>\n\t\t\t<!--ng-model双向绑定账号-->\n\t\t\t<input type=\"text\" class=\"form-control\" placeholder=\"Account\" ng-model=\"username\" required />\n\t\t</div>\n\t\t<div class=\"form-group\">\n\t\t\t<label>Password</label>\n\t\t\t<!--ng-model双向绑定密码-->\n\t\t\t<input type=\"password\" class=\"form-control\" placeholder=\"Password\" ng-model=\"password\" required>\n\t\t</div>\n\t\t<button type=\"submit\"  class=\"btn btn-default\">登录</button>\n\t</form>\n</div>\n```\n\n### 添加路由\n- 设置路由\n在scripts文件夹内打开app.js，设置如下路由\n``` javascript\n.config(function($routeProvider) {\n\t$routeProvider\n\t//login路由\n\t\t.when('/login', {\n\t\t\ttemplateUrl: 'views/login.html', //login的html页面\n\t\t\tcontroller: 'LoginCtrl' //login的控制器，稍后提到\n\t\t})\n\t\t//页面重定向\n\t\t.otherwise({\n\t\t\tredirectTo: '/login'\n\t\t});\n});\n```\n\n- 路由功能的实现原理\n这里补充一下一般路由功能的实现原理\n  - 1.通过hash（location.href.hash）获取位置\n  - 2.设置全局拦截器\n    - 匹配路径：通配/string/:number\n    - 判断后加载对应模块\n  - 3.通过window.onhashchange监听路由变化\n\n### 添加登录页面的控制器\n- 在scripts文件夹中的controller目录下增加loginCtrl.js\n- 在index中引入该js文件\n\n``` javascript\napp.controller('LoginCtrl', ['$scope', '$http', function($scope, $http) {\n\t//定义submit事件，对应html中ng-submit\n\t$scope.submit = function() {\n\t\t//http服务POST账户密码\n\t\t$http({\n\t\t\t\tmethod: 'POST',\n\t\t\t\turl: 'your url',\n\t\t\t\tparams: {\n\t\t\t\t\t\"username\": $scope.username, //ng-model双向绑定的用户名\n\t\t\t\t\t\"password\": $scope.password //ng-model双向绑定的密码\n\t\t\t\t}, \n\t\t\t})\n\t\t\t.success(function(data) {\t\t\t\t\n\t\t\t\tif (data.result === 'success') {\t\t\t\n\t\t\t\t\twindow.location.href = 'index.html#/index'; //判断登录成功，跳转\n\t\t\t\t} else {\t\t\t\t\t\n\t\t\t\t\talert(\"error\"); //登录失败提示\n\t\t\t\t}\t\t\t\t\t\n\t\t\t})\n\t\t\t//连接服务失败\n\t\t\t.error(function() {\n\t\t\t\talert(\"connecting fail\");\n\t\t\t});\n\t};\n}]);\n```\n\n### 不需要在html页面加入ng-controller\n由于路由中已经引用了controller，故在路由跳转的同时已经启用了对应的控制器，若在view中再次引入会导致控制器加载两遍的哦\n\n## 保存用户信息\n-----\n### 登录成功返回用户信息\n- 通过登录成功服务端返回的用户信息，在需要用的时候取出\n- 可通过该项检查用户是否登录，或者根据用户权限加载不同的视图\n- 可通过sessionstorage、$rootscope、angular.service等方式保存，后续章节会提到\n\n## $http服务后台获取不到值\n-----\n通常从jQuery的ajax转用angular的$http服务的时候，会遇到后台获取不到值的情况，这是因为\n### post请求的请求体的两种格式\n- 1.字符串: 'name=name&password=password'\n这种格式的请求体,需要配置请求头 'Content-Type':'application/x-www-form-urlencoded'\n- 2.json: {name:'name',password:'password'}\n这种格式的请求体,需要配置请求头 'Content-Type':'application/json;charset=UTF-8'\n\n### ajax和$http区别\n- 在jquery中，官方文档解释contentType默认是 application/x-www-form-urlencoded; charset=UTF-8，即第一种\n- 在angular的$http中，默认是第二种，所以使用$http(config)提交请求体，config中的data项必须是json格式的值。\n\n### 解决办法\n- 此时我们可以配置$http(config)中的headers中的Content-Type值为'application/x-www-form-urlencoded'，然后就能按照ajax的用法尽情使用$http服务啦\n\n``` javascript\nvar app = angular.module('angularTestApp', [\n\t'ngCookies',\n\t'ngResource',\n\t'ngSanitize',\n\t'ngRoute',\n], function($httpProvider) {\n\t// Use x-www-form-urlencoded Content-Type\n\t$httpProvider.defaults.headers.post['Content-Type'] = 'application/x-www-form-urlencoded;charset=utf-8';\n\tvar param = function(obj) {\n\t\tvar query = '',\n\t\t\tname, value, fullSubName, subName, subValue, innerObj, i;\n\t\tfor (name in obj) {\n\t\t\tvalue = obj[name];\n\n\t\t\tif (value instanceof Array) {\n\t\t\t\tfor (i = 0; i < value.length; ++i) {\n\t\t\t\t\tsubValue = value[i];\n\t\t\t\t\t/*fullSubName = name + '[' + i + ']';*/\n\t\t\t\t\tfullSubName = name;\n\t\t\t\t\tinnerObj = {};\n\t\t\t\t\tinnerObj[fullSubName] = subValue;\n\t\t\t\t\tquery += param(innerObj) + '&';\n\t\t\t\t}\n\t\t\t} else if (value instanceof Object) {\n\t\t\t\tfor (subName in value) {\n\t\t\t\t\tsubValue = value[subName];\n\t\t\t\t\tfullSubName = name /* + '[' + subName + ']'*/ ;\n\t\t\t\t\tinnerObj = {};\n\t\t\t\t\tinnerObj[fullSubName] = subValue;\n\t\t\t\t\tquery += param(innerObj) + '&';\n\t\t\t\t}\n\t\t\t} else if (value !== undefined && value !== null)\n\t\t\t\tquery += encodeURIComponent(name) + '=' + encodeURIComponent(value) + '&';\n\t\t}\n\t\treturn query.length ? query.substr(0, query.length - 1) : query;\n\t};\n\t// Override $http service's default transformRequest\n\t$httpProvider.defaults.transformRequest = [function(data) {\n\t\treturn angular.isObject(data) && String(data) !== '[object File]' ? param(data) : data;\n\t}];\n});\n```\n\n### 参考\n[《http请求头中的Content-Type属性在angular 和 node中的用法》](http://www.cnblogs.com/liulangmao/p/3889568.html)\n[《jquery和angular的ajax请求的区别》](https://segmentfault.com/a/1190000000396306)\n[《Make AngularJS $http service behave like jQuery.ajax()》](http://victorblog.com/2012/12/20/make-angularjs-http-service-behave-like-jquery-ajax/)\n\n## 结束语\n-----\n本骚年也是AngularJS的初体验者，如果小伙伴们有好的资源请千万千万要分享呀。\n[此处查看项目代码（仅包含app部分）](https://github.com/godbasin/godbasin.github.io/tree/blog-codes/angular-notes/2-create-login)\n[此处查看页面效果](http://o9grhhyar.bkt.clouddn.com/2-create-login/index.html#/)\n","source":"_posts/angular-note-2-create-login.md","raw":"---\ntitle: Angular使用笔记2--创建登录页面\ndate: 2016-07-08 22:45:32\ncategories: angular混搭\ntags: 笔记\n---\n最近的一个项目使用AngularJS(v1.2.6)作为前端的框架，《Angular使用笔记》系列用于记录过程中的一些使用和解决方法。\n本文记录搭建登录页面的过程。\n<!--more-->\n## 根据产品规划划分模块\n-----\n### 主要页面逻辑\n在这里，本骚年就建一个比较简单的项目。\n- 我们的主要页面逻辑如下：\n  - 1.登录页面，输入账号和密码即可\n  - 2.模块页面\n\n本项目主要用于展示Angular使用过程，故这里使用了Bootstrap简单构建项目。\n使用Bootatrap有个不好的地方就是需要引入jQuery(Angular中不建议使用jQuery，同时本人也有这样的洁癖)，而页面大小也增加了不少。\n\n### 创建登录页面\n- 首先我们在views文件夹内添加一个login.html\n\n``` html\n<div class=\"container\" id=\"login\">\n\t<!--ng-submit绑定登录事件-->\n\t<form id=\"login-form\" ng-submit=\"submit()\">\n\t\t<h3 class=\"text-center\">login</h3>\n\t\t<div class=\"form-group\">\n\t\t\t<label>account</label>\n\t\t\t<!--ng-model双向绑定账号-->\n\t\t\t<input type=\"text\" class=\"form-control\" placeholder=\"Account\" ng-model=\"username\" required />\n\t\t</div>\n\t\t<div class=\"form-group\">\n\t\t\t<label>Password</label>\n\t\t\t<!--ng-model双向绑定密码-->\n\t\t\t<input type=\"password\" class=\"form-control\" placeholder=\"Password\" ng-model=\"password\" required>\n\t\t</div>\n\t\t<button type=\"submit\"  class=\"btn btn-default\">登录</button>\n\t</form>\n</div>\n```\n\n### 添加路由\n- 设置路由\n在scripts文件夹内打开app.js，设置如下路由\n``` javascript\n.config(function($routeProvider) {\n\t$routeProvider\n\t//login路由\n\t\t.when('/login', {\n\t\t\ttemplateUrl: 'views/login.html', //login的html页面\n\t\t\tcontroller: 'LoginCtrl' //login的控制器，稍后提到\n\t\t})\n\t\t//页面重定向\n\t\t.otherwise({\n\t\t\tredirectTo: '/login'\n\t\t});\n});\n```\n\n- 路由功能的实现原理\n这里补充一下一般路由功能的实现原理\n  - 1.通过hash（location.href.hash）获取位置\n  - 2.设置全局拦截器\n    - 匹配路径：通配/string/:number\n    - 判断后加载对应模块\n  - 3.通过window.onhashchange监听路由变化\n\n### 添加登录页面的控制器\n- 在scripts文件夹中的controller目录下增加loginCtrl.js\n- 在index中引入该js文件\n\n``` javascript\napp.controller('LoginCtrl', ['$scope', '$http', function($scope, $http) {\n\t//定义submit事件，对应html中ng-submit\n\t$scope.submit = function() {\n\t\t//http服务POST账户密码\n\t\t$http({\n\t\t\t\tmethod: 'POST',\n\t\t\t\turl: 'your url',\n\t\t\t\tparams: {\n\t\t\t\t\t\"username\": $scope.username, //ng-model双向绑定的用户名\n\t\t\t\t\t\"password\": $scope.password //ng-model双向绑定的密码\n\t\t\t\t}, \n\t\t\t})\n\t\t\t.success(function(data) {\t\t\t\t\n\t\t\t\tif (data.result === 'success') {\t\t\t\n\t\t\t\t\twindow.location.href = 'index.html#/index'; //判断登录成功，跳转\n\t\t\t\t} else {\t\t\t\t\t\n\t\t\t\t\talert(\"error\"); //登录失败提示\n\t\t\t\t}\t\t\t\t\t\n\t\t\t})\n\t\t\t//连接服务失败\n\t\t\t.error(function() {\n\t\t\t\talert(\"connecting fail\");\n\t\t\t});\n\t};\n}]);\n```\n\n### 不需要在html页面加入ng-controller\n由于路由中已经引用了controller，故在路由跳转的同时已经启用了对应的控制器，若在view中再次引入会导致控制器加载两遍的哦\n\n## 保存用户信息\n-----\n### 登录成功返回用户信息\n- 通过登录成功服务端返回的用户信息，在需要用的时候取出\n- 可通过该项检查用户是否登录，或者根据用户权限加载不同的视图\n- 可通过sessionstorage、$rootscope、angular.service等方式保存，后续章节会提到\n\n## $http服务后台获取不到值\n-----\n通常从jQuery的ajax转用angular的$http服务的时候，会遇到后台获取不到值的情况，这是因为\n### post请求的请求体的两种格式\n- 1.字符串: 'name=name&password=password'\n这种格式的请求体,需要配置请求头 'Content-Type':'application/x-www-form-urlencoded'\n- 2.json: {name:'name',password:'password'}\n这种格式的请求体,需要配置请求头 'Content-Type':'application/json;charset=UTF-8'\n\n### ajax和$http区别\n- 在jquery中，官方文档解释contentType默认是 application/x-www-form-urlencoded; charset=UTF-8，即第一种\n- 在angular的$http中，默认是第二种，所以使用$http(config)提交请求体，config中的data项必须是json格式的值。\n\n### 解决办法\n- 此时我们可以配置$http(config)中的headers中的Content-Type值为'application/x-www-form-urlencoded'，然后就能按照ajax的用法尽情使用$http服务啦\n\n``` javascript\nvar app = angular.module('angularTestApp', [\n\t'ngCookies',\n\t'ngResource',\n\t'ngSanitize',\n\t'ngRoute',\n], function($httpProvider) {\n\t// Use x-www-form-urlencoded Content-Type\n\t$httpProvider.defaults.headers.post['Content-Type'] = 'application/x-www-form-urlencoded;charset=utf-8';\n\tvar param = function(obj) {\n\t\tvar query = '',\n\t\t\tname, value, fullSubName, subName, subValue, innerObj, i;\n\t\tfor (name in obj) {\n\t\t\tvalue = obj[name];\n\n\t\t\tif (value instanceof Array) {\n\t\t\t\tfor (i = 0; i < value.length; ++i) {\n\t\t\t\t\tsubValue = value[i];\n\t\t\t\t\t/*fullSubName = name + '[' + i + ']';*/\n\t\t\t\t\tfullSubName = name;\n\t\t\t\t\tinnerObj = {};\n\t\t\t\t\tinnerObj[fullSubName] = subValue;\n\t\t\t\t\tquery += param(innerObj) + '&';\n\t\t\t\t}\n\t\t\t} else if (value instanceof Object) {\n\t\t\t\tfor (subName in value) {\n\t\t\t\t\tsubValue = value[subName];\n\t\t\t\t\tfullSubName = name /* + '[' + subName + ']'*/ ;\n\t\t\t\t\tinnerObj = {};\n\t\t\t\t\tinnerObj[fullSubName] = subValue;\n\t\t\t\t\tquery += param(innerObj) + '&';\n\t\t\t\t}\n\t\t\t} else if (value !== undefined && value !== null)\n\t\t\t\tquery += encodeURIComponent(name) + '=' + encodeURIComponent(value) + '&';\n\t\t}\n\t\treturn query.length ? query.substr(0, query.length - 1) : query;\n\t};\n\t// Override $http service's default transformRequest\n\t$httpProvider.defaults.transformRequest = [function(data) {\n\t\treturn angular.isObject(data) && String(data) !== '[object File]' ? param(data) : data;\n\t}];\n});\n```\n\n### 参考\n[《http请求头中的Content-Type属性在angular 和 node中的用法》](http://www.cnblogs.com/liulangmao/p/3889568.html)\n[《jquery和angular的ajax请求的区别》](https://segmentfault.com/a/1190000000396306)\n[《Make AngularJS $http service behave like jQuery.ajax()》](http://victorblog.com/2012/12/20/make-angularjs-http-service-behave-like-jquery-ajax/)\n\n## 结束语\n-----\n本骚年也是AngularJS的初体验者，如果小伙伴们有好的资源请千万千万要分享呀。\n[此处查看项目代码（仅包含app部分）](https://github.com/godbasin/godbasin.github.io/tree/blog-codes/angular-notes/2-create-login)\n[此处查看页面效果](http://o9grhhyar.bkt.clouddn.com/2-create-login/index.html#/)\n","slug":"angular-note-2-create-login","published":1,"updated":"2016-08-20T10:54:21.051Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cix45huem000mxotu0rj83ynw","content":"<p>最近的一个项目使用AngularJS(v1.2.6)作为前端的框架，《Angular使用笔记》系列用于记录过程中的一些使用和解决方法。<br>本文记录搭建登录页面的过程。<br><a id=\"more\"></a></p>\n<h2 id=\"根据产品规划划分模块\"><a href=\"#根据产品规划划分模块\" class=\"headerlink\" title=\"根据产品规划划分模块\"></a>根据产品规划划分模块</h2><hr>\n<h3 id=\"主要页面逻辑\"><a href=\"#主要页面逻辑\" class=\"headerlink\" title=\"主要页面逻辑\"></a>主要页面逻辑</h3><p>在这里，本骚年就建一个比较简单的项目。</p>\n<ul>\n<li>我们的主要页面逻辑如下：<ul>\n<li>1.登录页面，输入账号和密码即可</li>\n<li>2.模块页面</li>\n</ul>\n</li>\n</ul>\n<p>本项目主要用于展示Angular使用过程，故这里使用了Bootstrap简单构建项目。<br>使用Bootatrap有个不好的地方就是需要引入jQuery(Angular中不建议使用jQuery，同时本人也有这样的洁癖)，而页面大小也增加了不少。</p>\n<h3 id=\"创建登录页面\"><a href=\"#创建登录页面\" class=\"headerlink\" title=\"创建登录页面\"></a>创建登录页面</h3><ul>\n<li>首先我们在views文件夹内添加一个login.html</li>\n</ul>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"container\"</span> <span class=\"attr\">id</span>=<span class=\"string\">\"login\"</span>&gt;</span></div><div class=\"line\">  <span class=\"comment\">&lt;!--ng-submit绑定登录事件--&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">form</span> <span class=\"attr\">id</span>=<span class=\"string\">\"login-form\"</span> <span class=\"attr\">ng-submit</span>=<span class=\"string\">\"submit()\"</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">h3</span> <span class=\"attr\">class</span>=<span class=\"string\">\"text-center\"</span>&gt;</span>login<span class=\"tag\">&lt;/<span class=\"name\">h3</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"form-group\"</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">label</span>&gt;</span>account<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></div><div class=\"line\">      <span class=\"comment\">&lt;!--ng-model双向绑定账号--&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"form-control\"</span> <span class=\"attr\">placeholder</span>=<span class=\"string\">\"Account\"</span> <span class=\"attr\">ng-model</span>=<span class=\"string\">\"username\"</span> <span class=\"attr\">required</span> /&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"form-group\"</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">label</span>&gt;</span>Password<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></div><div class=\"line\">      <span class=\"comment\">&lt;!--ng-model双向绑定密码--&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"password\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"form-control\"</span> <span class=\"attr\">placeholder</span>=<span class=\"string\">\"Password\"</span> <span class=\"attr\">ng-model</span>=<span class=\"string\">\"password\"</span> <span class=\"attr\">required</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">type</span>=<span class=\"string\">\"submit\"</span>  <span class=\"attr\">class</span>=<span class=\"string\">\"btn btn-default\"</span>&gt;</span>登录<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">form</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div></pre></td></tr></table></figure>\n<h3 id=\"添加路由\"><a href=\"#添加路由\" class=\"headerlink\" title=\"添加路由\"></a>添加路由</h3><ul>\n<li><p>设置路由<br>在scripts文件夹内打开app.js，设置如下路由</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">.config(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">$routeProvider</span>) </span>&#123;</div><div class=\"line\">  $routeProvider</div><div class=\"line\">  <span class=\"comment\">//login路由</span></div><div class=\"line\">    .when(<span class=\"string\">'/login'</span>, &#123;</div><div class=\"line\">      <span class=\"attr\">templateUrl</span>: <span class=\"string\">'views/login.html'</span>, <span class=\"comment\">//login的html页面</span></div><div class=\"line\">      controller: <span class=\"string\">'LoginCtrl'</span> <span class=\"comment\">//login的控制器，稍后提到</span></div><div class=\"line\">    &#125;)</div><div class=\"line\">    <span class=\"comment\">//页面重定向</span></div><div class=\"line\">    .otherwise(&#123;</div><div class=\"line\">      <span class=\"attr\">redirectTo</span>: <span class=\"string\">'/login'</span></div><div class=\"line\">    &#125;);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n</li>\n<li><p>路由功能的实现原理<br>这里补充一下一般路由功能的实现原理</p>\n<ul>\n<li>1.通过hash（location.href.hash）获取位置</li>\n<li>2.设置全局拦截器<ul>\n<li>匹配路径：通配/string/:number</li>\n<li>判断后加载对应模块</li>\n</ul>\n</li>\n<li>3.通过window.onhashchange监听路由变化</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"添加登录页面的控制器\"><a href=\"#添加登录页面的控制器\" class=\"headerlink\" title=\"添加登录页面的控制器\"></a>添加登录页面的控制器</h3><ul>\n<li>在scripts文件夹中的controller目录下增加loginCtrl.js</li>\n<li>在index中引入该js文件</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div></pre></td><td class=\"code\"><pre><div class=\"line\">app.controller(<span class=\"string\">'LoginCtrl'</span>, [<span class=\"string\">'$scope'</span>, <span class=\"string\">'$http'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">$scope, $http</span>) </span>&#123;</div><div class=\"line\">  <span class=\"comment\">//定义submit事件，对应html中ng-submit</span></div><div class=\"line\">  $scope.submit = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"comment\">//http服务POST账户密码</span></div><div class=\"line\">    $http(&#123;</div><div class=\"line\">        <span class=\"attr\">method</span>: <span class=\"string\">'POST'</span>,</div><div class=\"line\">        <span class=\"attr\">url</span>: <span class=\"string\">'your url'</span>,</div><div class=\"line\">        <span class=\"attr\">params</span>: &#123;</div><div class=\"line\">          <span class=\"string\">\"username\"</span>: $scope.username, <span class=\"comment\">//ng-model双向绑定的用户名</span></div><div class=\"line\">          <span class=\"string\">\"password\"</span>: $scope.password <span class=\"comment\">//ng-model双向绑定的密码</span></div><div class=\"line\">        &#125;, </div><div class=\"line\">      &#125;)</div><div class=\"line\">      .success(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">data</span>) </span>&#123;\t\t\t\t</div><div class=\"line\">        <span class=\"keyword\">if</span> (data.result === <span class=\"string\">'success'</span>) &#123;\t\t\t</div><div class=\"line\">          <span class=\"built_in\">window</span>.location.href = <span class=\"string\">'index.html#/index'</span>; <span class=\"comment\">//判断登录成功，跳转</span></div><div class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;\t\t\t\t\t</div><div class=\"line\">          alert(<span class=\"string\">\"error\"</span>); <span class=\"comment\">//登录失败提示</span></div><div class=\"line\">        &#125;\t\t\t\t\t</div><div class=\"line\">      &#125;)</div><div class=\"line\">      <span class=\"comment\">//连接服务失败</span></div><div class=\"line\">      .error(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">        alert(<span class=\"string\">\"connecting fail\"</span>);</div><div class=\"line\">      &#125;);</div><div class=\"line\">  &#125;;</div><div class=\"line\">&#125;]);</div></pre></td></tr></table></figure>\n<h3 id=\"不需要在html页面加入ng-controller\"><a href=\"#不需要在html页面加入ng-controller\" class=\"headerlink\" title=\"不需要在html页面加入ng-controller\"></a>不需要在html页面加入ng-controller</h3><p>由于路由中已经引用了controller，故在路由跳转的同时已经启用了对应的控制器，若在view中再次引入会导致控制器加载两遍的哦</p>\n<h2 id=\"保存用户信息\"><a href=\"#保存用户信息\" class=\"headerlink\" title=\"保存用户信息\"></a>保存用户信息</h2><hr>\n<h3 id=\"登录成功返回用户信息\"><a href=\"#登录成功返回用户信息\" class=\"headerlink\" title=\"登录成功返回用户信息\"></a>登录成功返回用户信息</h3><ul>\n<li>通过登录成功服务端返回的用户信息，在需要用的时候取出</li>\n<li>可通过该项检查用户是否登录，或者根据用户权限加载不同的视图</li>\n<li>可通过sessionstorage、$rootscope、angular.service等方式保存，后续章节会提到</li>\n</ul>\n<h2 id=\"http服务后台获取不到值\"><a href=\"#http服务后台获取不到值\" class=\"headerlink\" title=\"$http服务后台获取不到值\"></a>$http服务后台获取不到值</h2><hr>\n<p>通常从jQuery的ajax转用angular的$http服务的时候，会遇到后台获取不到值的情况，这是因为</p>\n<h3 id=\"post请求的请求体的两种格式\"><a href=\"#post请求的请求体的两种格式\" class=\"headerlink\" title=\"post请求的请求体的两种格式\"></a>post请求的请求体的两种格式</h3><ul>\n<li>1.字符串: ‘name=name&amp;password=password’<br>这种格式的请求体,需要配置请求头 ‘Content-Type’:’application/x-www-form-urlencoded’</li>\n<li>2.json: {name:’name’,password:’password’}<br>这种格式的请求体,需要配置请求头 ‘Content-Type’:’application/json;charset=UTF-8’</li>\n</ul>\n<h3 id=\"ajax和-http区别\"><a href=\"#ajax和-http区别\" class=\"headerlink\" title=\"ajax和$http区别\"></a>ajax和$http区别</h3><ul>\n<li>在jquery中，官方文档解释contentType默认是 application/x-www-form-urlencoded; charset=UTF-8，即第一种</li>\n<li>在angular的$http中，默认是第二种，所以使用$http(config)提交请求体，config中的data项必须是json格式的值。</li>\n</ul>\n<h3 id=\"解决办法\"><a href=\"#解决办法\" class=\"headerlink\" title=\"解决办法\"></a>解决办法</h3><ul>\n<li>此时我们可以配置$http(config)中的headers中的Content-Type值为’application/x-www-form-urlencoded’，然后就能按照ajax的用法尽情使用$http服务啦</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> app = angular.module(<span class=\"string\">'angularTestApp'</span>, [</div><div class=\"line\">  <span class=\"string\">'ngCookies'</span>,</div><div class=\"line\">  <span class=\"string\">'ngResource'</span>,</div><div class=\"line\">  <span class=\"string\">'ngSanitize'</span>,</div><div class=\"line\">  <span class=\"string\">'ngRoute'</span>,</div><div class=\"line\">], <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">$httpProvider</span>) </span>&#123;</div><div class=\"line\">  <span class=\"comment\">// Use x-www-form-urlencoded Content-Type</span></div><div class=\"line\">  $httpProvider.defaults.headers.post[<span class=\"string\">'Content-Type'</span>] = <span class=\"string\">'application/x-www-form-urlencoded;charset=utf-8'</span>;</div><div class=\"line\">  <span class=\"keyword\">var</span> param = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">obj</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> query = <span class=\"string\">''</span>,</div><div class=\"line\">      name, value, fullSubName, subName, subValue, innerObj, i;</div><div class=\"line\">    <span class=\"keyword\">for</span> (name <span class=\"keyword\">in</span> obj) &#123;</div><div class=\"line\">      value = obj[name];</div><div class=\"line\"></div><div class=\"line\">      <span class=\"keyword\">if</span> (value <span class=\"keyword\">instanceof</span> <span class=\"built_in\">Array</span>) &#123;</div><div class=\"line\">        <span class=\"keyword\">for</span> (i = <span class=\"number\">0</span>; i &lt; value.length; ++i) &#123;</div><div class=\"line\">          subValue = value[i];</div><div class=\"line\">          <span class=\"comment\">/*fullSubName = name + '[' + i + ']';*/</span></div><div class=\"line\">          fullSubName = name;</div><div class=\"line\">          innerObj = &#123;&#125;;</div><div class=\"line\">          innerObj[fullSubName] = subValue;</div><div class=\"line\">          query += param(innerObj) + <span class=\"string\">'&amp;'</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">      &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (value <span class=\"keyword\">instanceof</span> <span class=\"built_in\">Object</span>) &#123;</div><div class=\"line\">        <span class=\"keyword\">for</span> (subName <span class=\"keyword\">in</span> value) &#123;</div><div class=\"line\">          subValue = value[subName];</div><div class=\"line\">          fullSubName = name <span class=\"comment\">/* + '[' + subName + ']'*/</span> ;</div><div class=\"line\">          innerObj = &#123;&#125;;</div><div class=\"line\">          innerObj[fullSubName] = subValue;</div><div class=\"line\">          query += param(innerObj) + <span class=\"string\">'&amp;'</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">      &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (value !== <span class=\"literal\">undefined</span> &amp;&amp; value !== <span class=\"literal\">null</span>)</div><div class=\"line\">        query += <span class=\"built_in\">encodeURIComponent</span>(name) + <span class=\"string\">'='</span> + <span class=\"built_in\">encodeURIComponent</span>(value) + <span class=\"string\">'&amp;'</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> query.length ? query.substr(<span class=\"number\">0</span>, query.length - <span class=\"number\">1</span>) : query;</div><div class=\"line\">  &#125;;</div><div class=\"line\">  <span class=\"comment\">// Override $http service's default transformRequest</span></div><div class=\"line\">  $httpProvider.defaults.transformRequest = [<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">data</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> angular.isObject(data) &amp;&amp; <span class=\"built_in\">String</span>(data) !== <span class=\"string\">'[object File]'</span> ? param(data) : data;</div><div class=\"line\">  &#125;];</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<h3 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h3><p><a href=\"http://www.cnblogs.com/liulangmao/p/3889568.html\" target=\"_blank\" rel=\"external\">《http请求头中的Content-Type属性在angular 和 node中的用法》</a><br><a href=\"https://segmentfault.com/a/1190000000396306\" target=\"_blank\" rel=\"external\">《jquery和angular的ajax请求的区别》</a><br><a href=\"http://victorblog.com/2012/12/20/make-angularjs-http-service-behave-like-jquery-ajax/\" target=\"_blank\" rel=\"external\">《Make AngularJS $http service behave like jQuery.ajax()》</a></p>\n<h2 id=\"结束语\"><a href=\"#结束语\" class=\"headerlink\" title=\"结束语\"></a>结束语</h2><hr>\n<p>本骚年也是AngularJS的初体验者，如果小伙伴们有好的资源请千万千万要分享呀。<br><a href=\"https://github.com/godbasin/godbasin.github.io/tree/blog-codes/angular-notes/2-create-login\" target=\"_blank\" rel=\"external\">此处查看项目代码（仅包含app部分）</a><br><a href=\"http://o9grhhyar.bkt.clouddn.com/2-create-login/index.html#/\" target=\"_blank\" rel=\"external\">此处查看页面效果</a></p>\n","excerpt":"<p>最近的一个项目使用AngularJS(v1.2.6)作为前端的框架，《Angular使用笔记》系列用于记录过程中的一些使用和解决方法。<br>本文记录搭建登录页面的过程。<br>","more":"</p>\n<h2 id=\"根据产品规划划分模块\"><a href=\"#根据产品规划划分模块\" class=\"headerlink\" title=\"根据产品规划划分模块\"></a>根据产品规划划分模块</h2><hr>\n<h3 id=\"主要页面逻辑\"><a href=\"#主要页面逻辑\" class=\"headerlink\" title=\"主要页面逻辑\"></a>主要页面逻辑</h3><p>在这里，本骚年就建一个比较简单的项目。</p>\n<ul>\n<li>我们的主要页面逻辑如下：<ul>\n<li>1.登录页面，输入账号和密码即可</li>\n<li>2.模块页面</li>\n</ul>\n</li>\n</ul>\n<p>本项目主要用于展示Angular使用过程，故这里使用了Bootstrap简单构建项目。<br>使用Bootatrap有个不好的地方就是需要引入jQuery(Angular中不建议使用jQuery，同时本人也有这样的洁癖)，而页面大小也增加了不少。</p>\n<h3 id=\"创建登录页面\"><a href=\"#创建登录页面\" class=\"headerlink\" title=\"创建登录页面\"></a>创建登录页面</h3><ul>\n<li>首先我们在views文件夹内添加一个login.html</li>\n</ul>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"container\"</span> <span class=\"attr\">id</span>=<span class=\"string\">\"login\"</span>&gt;</span></div><div class=\"line\">  <span class=\"comment\">&lt;!--ng-submit绑定登录事件--&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">form</span> <span class=\"attr\">id</span>=<span class=\"string\">\"login-form\"</span> <span class=\"attr\">ng-submit</span>=<span class=\"string\">\"submit()\"</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">h3</span> <span class=\"attr\">class</span>=<span class=\"string\">\"text-center\"</span>&gt;</span>login<span class=\"tag\">&lt;/<span class=\"name\">h3</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"form-group\"</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">label</span>&gt;</span>account<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></div><div class=\"line\">      <span class=\"comment\">&lt;!--ng-model双向绑定账号--&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"form-control\"</span> <span class=\"attr\">placeholder</span>=<span class=\"string\">\"Account\"</span> <span class=\"attr\">ng-model</span>=<span class=\"string\">\"username\"</span> <span class=\"attr\">required</span> /&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"form-group\"</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">label</span>&gt;</span>Password<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></div><div class=\"line\">      <span class=\"comment\">&lt;!--ng-model双向绑定密码--&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"password\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"form-control\"</span> <span class=\"attr\">placeholder</span>=<span class=\"string\">\"Password\"</span> <span class=\"attr\">ng-model</span>=<span class=\"string\">\"password\"</span> <span class=\"attr\">required</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">type</span>=<span class=\"string\">\"submit\"</span>  <span class=\"attr\">class</span>=<span class=\"string\">\"btn btn-default\"</span>&gt;</span>登录<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">form</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div></pre></td></tr></table></figure>\n<h3 id=\"添加路由\"><a href=\"#添加路由\" class=\"headerlink\" title=\"添加路由\"></a>添加路由</h3><ul>\n<li><p>设置路由<br>在scripts文件夹内打开app.js，设置如下路由</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">.config(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">$routeProvider</span>) </span>&#123;</div><div class=\"line\">  $routeProvider</div><div class=\"line\">  <span class=\"comment\">//login路由</span></div><div class=\"line\">    .when(<span class=\"string\">'/login'</span>, &#123;</div><div class=\"line\">      <span class=\"attr\">templateUrl</span>: <span class=\"string\">'views/login.html'</span>, <span class=\"comment\">//login的html页面</span></div><div class=\"line\">      controller: <span class=\"string\">'LoginCtrl'</span> <span class=\"comment\">//login的控制器，稍后提到</span></div><div class=\"line\">    &#125;)</div><div class=\"line\">    <span class=\"comment\">//页面重定向</span></div><div class=\"line\">    .otherwise(&#123;</div><div class=\"line\">      <span class=\"attr\">redirectTo</span>: <span class=\"string\">'/login'</span></div><div class=\"line\">    &#125;);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n</li>\n<li><p>路由功能的实现原理<br>这里补充一下一般路由功能的实现原理</p>\n<ul>\n<li>1.通过hash（location.href.hash）获取位置</li>\n<li>2.设置全局拦截器<ul>\n<li>匹配路径：通配/string/:number</li>\n<li>判断后加载对应模块</li>\n</ul>\n</li>\n<li>3.通过window.onhashchange监听路由变化</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"添加登录页面的控制器\"><a href=\"#添加登录页面的控制器\" class=\"headerlink\" title=\"添加登录页面的控制器\"></a>添加登录页面的控制器</h3><ul>\n<li>在scripts文件夹中的controller目录下增加loginCtrl.js</li>\n<li>在index中引入该js文件</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div></pre></td><td class=\"code\"><pre><div class=\"line\">app.controller(<span class=\"string\">'LoginCtrl'</span>, [<span class=\"string\">'$scope'</span>, <span class=\"string\">'$http'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">$scope, $http</span>) </span>&#123;</div><div class=\"line\">  <span class=\"comment\">//定义submit事件，对应html中ng-submit</span></div><div class=\"line\">  $scope.submit = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"comment\">//http服务POST账户密码</span></div><div class=\"line\">    $http(&#123;</div><div class=\"line\">        <span class=\"attr\">method</span>: <span class=\"string\">'POST'</span>,</div><div class=\"line\">        <span class=\"attr\">url</span>: <span class=\"string\">'your url'</span>,</div><div class=\"line\">        <span class=\"attr\">params</span>: &#123;</div><div class=\"line\">          <span class=\"string\">\"username\"</span>: $scope.username, <span class=\"comment\">//ng-model双向绑定的用户名</span></div><div class=\"line\">          <span class=\"string\">\"password\"</span>: $scope.password <span class=\"comment\">//ng-model双向绑定的密码</span></div><div class=\"line\">        &#125;, </div><div class=\"line\">      &#125;)</div><div class=\"line\">      .success(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">data</span>) </span>&#123;\t\t\t\t</div><div class=\"line\">        <span class=\"keyword\">if</span> (data.result === <span class=\"string\">'success'</span>) &#123;\t\t\t</div><div class=\"line\">          <span class=\"built_in\">window</span>.location.href = <span class=\"string\">'index.html#/index'</span>; <span class=\"comment\">//判断登录成功，跳转</span></div><div class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;\t\t\t\t\t</div><div class=\"line\">          alert(<span class=\"string\">\"error\"</span>); <span class=\"comment\">//登录失败提示</span></div><div class=\"line\">        &#125;\t\t\t\t\t</div><div class=\"line\">      &#125;)</div><div class=\"line\">      <span class=\"comment\">//连接服务失败</span></div><div class=\"line\">      .error(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">        alert(<span class=\"string\">\"connecting fail\"</span>);</div><div class=\"line\">      &#125;);</div><div class=\"line\">  &#125;;</div><div class=\"line\">&#125;]);</div></pre></td></tr></table></figure>\n<h3 id=\"不需要在html页面加入ng-controller\"><a href=\"#不需要在html页面加入ng-controller\" class=\"headerlink\" title=\"不需要在html页面加入ng-controller\"></a>不需要在html页面加入ng-controller</h3><p>由于路由中已经引用了controller，故在路由跳转的同时已经启用了对应的控制器，若在view中再次引入会导致控制器加载两遍的哦</p>\n<h2 id=\"保存用户信息\"><a href=\"#保存用户信息\" class=\"headerlink\" title=\"保存用户信息\"></a>保存用户信息</h2><hr>\n<h3 id=\"登录成功返回用户信息\"><a href=\"#登录成功返回用户信息\" class=\"headerlink\" title=\"登录成功返回用户信息\"></a>登录成功返回用户信息</h3><ul>\n<li>通过登录成功服务端返回的用户信息，在需要用的时候取出</li>\n<li>可通过该项检查用户是否登录，或者根据用户权限加载不同的视图</li>\n<li>可通过sessionstorage、$rootscope、angular.service等方式保存，后续章节会提到</li>\n</ul>\n<h2 id=\"http服务后台获取不到值\"><a href=\"#http服务后台获取不到值\" class=\"headerlink\" title=\"$http服务后台获取不到值\"></a>$http服务后台获取不到值</h2><hr>\n<p>通常从jQuery的ajax转用angular的$http服务的时候，会遇到后台获取不到值的情况，这是因为</p>\n<h3 id=\"post请求的请求体的两种格式\"><a href=\"#post请求的请求体的两种格式\" class=\"headerlink\" title=\"post请求的请求体的两种格式\"></a>post请求的请求体的两种格式</h3><ul>\n<li>1.字符串: ‘name=name&amp;password=password’<br>这种格式的请求体,需要配置请求头 ‘Content-Type’:’application/x-www-form-urlencoded’</li>\n<li>2.json: {name:’name’,password:’password’}<br>这种格式的请求体,需要配置请求头 ‘Content-Type’:’application/json;charset=UTF-8’</li>\n</ul>\n<h3 id=\"ajax和-http区别\"><a href=\"#ajax和-http区别\" class=\"headerlink\" title=\"ajax和$http区别\"></a>ajax和$http区别</h3><ul>\n<li>在jquery中，官方文档解释contentType默认是 application/x-www-form-urlencoded; charset=UTF-8，即第一种</li>\n<li>在angular的$http中，默认是第二种，所以使用$http(config)提交请求体，config中的data项必须是json格式的值。</li>\n</ul>\n<h3 id=\"解决办法\"><a href=\"#解决办法\" class=\"headerlink\" title=\"解决办法\"></a>解决办法</h3><ul>\n<li>此时我们可以配置$http(config)中的headers中的Content-Type值为’application/x-www-form-urlencoded’，然后就能按照ajax的用法尽情使用$http服务啦</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> app = angular.module(<span class=\"string\">'angularTestApp'</span>, [</div><div class=\"line\">  <span class=\"string\">'ngCookies'</span>,</div><div class=\"line\">  <span class=\"string\">'ngResource'</span>,</div><div class=\"line\">  <span class=\"string\">'ngSanitize'</span>,</div><div class=\"line\">  <span class=\"string\">'ngRoute'</span>,</div><div class=\"line\">], <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">$httpProvider</span>) </span>&#123;</div><div class=\"line\">  <span class=\"comment\">// Use x-www-form-urlencoded Content-Type</span></div><div class=\"line\">  $httpProvider.defaults.headers.post[<span class=\"string\">'Content-Type'</span>] = <span class=\"string\">'application/x-www-form-urlencoded;charset=utf-8'</span>;</div><div class=\"line\">  <span class=\"keyword\">var</span> param = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">obj</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> query = <span class=\"string\">''</span>,</div><div class=\"line\">      name, value, fullSubName, subName, subValue, innerObj, i;</div><div class=\"line\">    <span class=\"keyword\">for</span> (name <span class=\"keyword\">in</span> obj) &#123;</div><div class=\"line\">      value = obj[name];</div><div class=\"line\"></div><div class=\"line\">      <span class=\"keyword\">if</span> (value <span class=\"keyword\">instanceof</span> <span class=\"built_in\">Array</span>) &#123;</div><div class=\"line\">        <span class=\"keyword\">for</span> (i = <span class=\"number\">0</span>; i &lt; value.length; ++i) &#123;</div><div class=\"line\">          subValue = value[i];</div><div class=\"line\">          <span class=\"comment\">/*fullSubName = name + '[' + i + ']';*/</span></div><div class=\"line\">          fullSubName = name;</div><div class=\"line\">          innerObj = &#123;&#125;;</div><div class=\"line\">          innerObj[fullSubName] = subValue;</div><div class=\"line\">          query += param(innerObj) + <span class=\"string\">'&amp;'</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">      &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (value <span class=\"keyword\">instanceof</span> <span class=\"built_in\">Object</span>) &#123;</div><div class=\"line\">        <span class=\"keyword\">for</span> (subName <span class=\"keyword\">in</span> value) &#123;</div><div class=\"line\">          subValue = value[subName];</div><div class=\"line\">          fullSubName = name <span class=\"comment\">/* + '[' + subName + ']'*/</span> ;</div><div class=\"line\">          innerObj = &#123;&#125;;</div><div class=\"line\">          innerObj[fullSubName] = subValue;</div><div class=\"line\">          query += param(innerObj) + <span class=\"string\">'&amp;'</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">      &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (value !== <span class=\"literal\">undefined</span> &amp;&amp; value !== <span class=\"literal\">null</span>)</div><div class=\"line\">        query += <span class=\"built_in\">encodeURIComponent</span>(name) + <span class=\"string\">'='</span> + <span class=\"built_in\">encodeURIComponent</span>(value) + <span class=\"string\">'&amp;'</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> query.length ? query.substr(<span class=\"number\">0</span>, query.length - <span class=\"number\">1</span>) : query;</div><div class=\"line\">  &#125;;</div><div class=\"line\">  <span class=\"comment\">// Override $http service's default transformRequest</span></div><div class=\"line\">  $httpProvider.defaults.transformRequest = [<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">data</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> angular.isObject(data) &amp;&amp; <span class=\"built_in\">String</span>(data) !== <span class=\"string\">'[object File]'</span> ? param(data) : data;</div><div class=\"line\">  &#125;];</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<h3 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h3><p><a href=\"http://www.cnblogs.com/liulangmao/p/3889568.html\">《http请求头中的Content-Type属性在angular 和 node中的用法》</a><br><a href=\"https://segmentfault.com/a/1190000000396306\">《jquery和angular的ajax请求的区别》</a><br><a href=\"http://victorblog.com/2012/12/20/make-angularjs-http-service-behave-like-jquery-ajax/\">《Make AngularJS $http service behave like jQuery.ajax()》</a></p>\n<h2 id=\"结束语\"><a href=\"#结束语\" class=\"headerlink\" title=\"结束语\"></a>结束语</h2><hr>\n<p>本骚年也是AngularJS的初体验者，如果小伙伴们有好的资源请千万千万要分享呀。<br><a href=\"https://github.com/godbasin/godbasin.github.io/tree/blog-codes/angular-notes/2-create-login\">此处查看项目代码（仅包含app部分）</a><br><a href=\"http://o9grhhyar.bkt.clouddn.com/2-create-login/index.html#/\">此处查看页面效果</a></p>"},{"title":"Angular使用笔记4--制作头部指令","date":"2016-07-10T03:32:37.000Z","_content":"最近的一个项目使用AngularJS(v1.2.6)作为前端的框架，《Angular使用笔记》系列用于记录过程中的一些使用和解决方法。\n本文记录简单介绍指令，以及制作头部指令的过程。\n<!--more-->\n## 有关angularJS指令\n-----\n### 指令要求\n- 指令作为一种服务，其定义有几个特殊要求\n  - 1.必须使用模块的directive方法定义\n  - 2.必须提供factory方法\n  - 3.factory方法返回的对象必须返回一个指令定义的对象\n\n### 指令常用属性\n- restrict\n- 可以是EAMC这四个字母的任意组合，来限定指令的应用场景\n  - E: 只限元素名使用\n  - A: 只限属性使用\n  - C: 只限类名使用\n  - M: 只限注释使用\n\n- template/templateUrl\n  - 指定HTML标记替换指令内容（或指令自身）\n  - 可使用templateUrl指定模板位置\n\n- transclude\n  - 包裹指令的内容，如果transclude属性为true\n  - 模板中使用ng-transclude定位\n\n- replace\n  - 如果replace=true，那么用HTML片段替换指令本身\n\n- scope作用域\n  - 如果设置为true \n    - 将为这个指令创建一个新的作用域\n    - 如果在同一个元素中有多个指令需要新的作用域的话，它还是只会创建一个作用域\n    - 新的作用域规则不适用于根模版（root of the template），因此根模版往往会获得一个新的作用域\n  - 如果设置为{}(object hash)\n    - 将创建一个新的、独立(isolate)的作用域\n    - @或@attr: 建立一个local scope property到DOM属性的绑定\n    - =或=expression: 在本地作用域属性与父作用域属性之间设置双向的绑定\n    - &或&attr: 提供一个在父作用域上下文中执行一个表达式的途径\n\n- require\n  - 请求另外的controller，传入当前directive的link函数中\n  - require需要传入一个指令controller的名称\n\n- link函数\n  - link函数负责实现DOM和Scope的数据绑定\n  - 通常在link里执行DOM事件监听和数据变化监听\n  - link函数在template执行后被调用\n\n- controller函数\n  - 指令可以有controller，因为指令可以创建scope\n  - controller在所有的同一scope的指令中共享，同时可以作为link函数的第四个参数被访问到\n  - 在同一层级的scope上，这些controller是指令间的一个可用的通信信道，也可能包含指令自身\n\n- compile函数\n  - 在所有module都装载完毕在之后，compile(element)(scope)\n  - 这句开始编译和链接整个dom树（其实就是调用dom上出现的指令）\n\n### 解析指令编译过程\n首先，controller会在prelink步骤之前进行初始化，并允许其他directive通过指定名称的require进行共享\n接下来，angular在解析指令的时候，其实会先按一定的顺序执行所有指令的compile函数，然后执行所有指令的preLink函数（如果存在的话），最后执行所有指令的postLink函数\n- compile过程如下：\n  - 1.传递应用根节点给$compile函数，开始编译，返回link函数\n  - 2.传递根作用域给link函数，开始链接（每个指令分为pre link 和 post link两个过程）\n\n- 关于link和compile\n  由于在compile函数最后返回link函数，故有compile函数时指令设置link函数无效，将自动使用compile返回的link函数\n\n- 关于link和controller\n  控制器可以暴露一个API，而link可以通过require与其他的指令控制器交互。所以如果要开放出一个API给其他指令用就写在controller中，否则写在link中\n\n### 参考\n- [《angularjs directive实例详解》](http://blog.51yip.com/jsjquery/1607.html)\n- [《angularjs1.3.0源码解析之directive》](http://www.html-js.com/article/Front-end-source-code-analysis-directive-angularjs130-source-code-analysis-of-the-original)\n\n## 制作头部菜单栏\n-----\n头部菜单栏包括，主菜单，侧边下拉菜单和时钟。如图：\n![image](http://o905ne85q.bkt.clouddn.com/753B.tmp.png)\n\n### 添加index页面\n- 在views文件夹内添加一个index.html\n- 在app.js文件中添加路由\n\n``` javascript\n.when('/index', {\n\ttemplateUrl: 'views/index.html', //index的html页面\n\tcontroller: '' //index的控制器，现在暂时不加\n})\n```\n- 设置login登录后跳转至index页面\n\n``` javascript\nwindow.location.href = 'index.html#/index';\n```\n### 添加头部菜单指令\n- 在scripts文件夹中添加directives文件夹，然后新增headerDir.js文件\n- 创建指令header\n\n``` javascript\napp.directive('appheader', ['$timeout', function($timeout) {\n\treturn {\n\t\trestrict: 'AE', \n\t\ttemplateUrl: './views/directive/header.html',\n\t\tcontroller: function($scope, $element){},\n\t};\n}]);\n```\n- 在index.html页面内引入headerDir.js文件\n\n### 添加头部菜单模板\n- 若模板比较长，为了方便维护可将其放在views中，然后使用templateUrl进行引用\n- 模板架构\n  - 这里使用bootstrap的导航条作为头部\n  - 使用ng-repeat来加载菜单，则可将菜单相关设置放置到scope中，方便维护\n- 这里直接使用template编写模板，具体代码可到项目源码中查看，这里就不放出来了\n\n### 添加控制器\n- 若控制器逻辑比较多，可新增一个controller的js文件来储存逻辑，然后使用require注入或者模板添加ng-controller引用即可\n- 这里直接使用指令的controller来进行逻辑整理\n- 主要逻辑\n  - 设置主菜单和侧边下拉菜单内容\n  - 判断当前路径，并点亮对应菜单（使其active）\n  - 加载和格式化时钟，并定时刷新时间\n\n``` javascript\ncontroller: function($scope, $element, $timeout) {\n\t//$scope.menus用于储存主菜单\n\t$scope.menus = [{\n\t\ttitle: 'index', //title用于储存路由对应的路径\n\t\thref: 'index.html#/index', //href用于设定该菜单跳转路由\n\t\ttext: '首页', //text用于储存该菜单显示名称\n\t}, {\n\t\ttitle: 'others',\n\t\thref: 'index.html#/other',\n\t\ttext: '其他',\n\t}];\n\t//$scope.usermenus用于储存侧边下拉菜单\n\t$scope.usermenus = [{\n\t\thref: 'index.html#/login', //href用于设定该菜单跳转路由\n\t\ttext: '退出', //text用于储存该菜单显示名称\n\t}];\n\t//判断当前路径，点亮对应模块\n\tvar _location = location.hash.split('/')[1];\n\tfor (var i in $scope.menus) {\n\t\t//current用于储存当前菜单是否与当前路径符合，符合则点亮(active)菜单\n\t\tif ($scope.menus[i].title == _location){$scope.menus[i].current = true;}\n\t\telse{$scope.menus[i].current = false;}\n\t}\n\t//用于格式化时间（少于10在前面增加0）\n\tvar numberStandard = function(num) {\n\t\tvar _val = Number(num),\n\t\t\t_num;\n\t\t_num = (_val < 10) ? ('0' + _val) : ('' + _val);\n\t\treturn _num;\n\t};\n\t//用于渲染时钟\n\tvar renderClock = function() {\n\t\tvar _date = new Date();\n\t\t$scope.clock = '';\n\t\t$scope.clock += _date.getFullYear() + '年' + (_date.getMonth() + 1) + '月' +\n\t\t\t_date.getDate() + '日';\n\t\t$scope.clock += ' ' + numberStandard(_date.getHours()) + ':' + numberStandard(_date.getMinutes()) +\n\t\t\t':' + numberStandard(_date.getSeconds());\n\t\t//此处已通过参数注入$timeout服务，若需要注入自定义服务需要require\n\t\t$timeout(function() {\n\t\t\trenderClock();\n\t\t}, 500);\n\t};\n\trenderClock();\n}\n```\n\n### 在index页面中引入头部指令\n``` html\n<header app-header></header>\n```\n\n### 最终效果\n如图：\n![image](http://o905ne85q.bkt.clouddn.com/C902.tmp.png)\n\n## 结束语\n-----\nAngularJS指令的使用过程中可能会出现一些莫名的问题，主要是因为对指令的了解不够深入，大家可以结合使用多去熟悉一下指令过程。\n[此处查看项目代码（仅包含app部分）](https://github.com/godbasin/godbasin.github.io/tree/blog-codes/angular-notes/4-create-header)\n[此处查看页面效果](http://o9grhhyar.bkt.clouddn.com/4-create-header/index.html#/)","source":"_posts/angular-note-4-make-header-directive.md","raw":"---\ntitle: Angular使用笔记4--制作头部指令\ndate: 2016-07-10 11:32:37\ncategories: angular混搭\ntags: 笔记\n---\n最近的一个项目使用AngularJS(v1.2.6)作为前端的框架，《Angular使用笔记》系列用于记录过程中的一些使用和解决方法。\n本文记录简单介绍指令，以及制作头部指令的过程。\n<!--more-->\n## 有关angularJS指令\n-----\n### 指令要求\n- 指令作为一种服务，其定义有几个特殊要求\n  - 1.必须使用模块的directive方法定义\n  - 2.必须提供factory方法\n  - 3.factory方法返回的对象必须返回一个指令定义的对象\n\n### 指令常用属性\n- restrict\n- 可以是EAMC这四个字母的任意组合，来限定指令的应用场景\n  - E: 只限元素名使用\n  - A: 只限属性使用\n  - C: 只限类名使用\n  - M: 只限注释使用\n\n- template/templateUrl\n  - 指定HTML标记替换指令内容（或指令自身）\n  - 可使用templateUrl指定模板位置\n\n- transclude\n  - 包裹指令的内容，如果transclude属性为true\n  - 模板中使用ng-transclude定位\n\n- replace\n  - 如果replace=true，那么用HTML片段替换指令本身\n\n- scope作用域\n  - 如果设置为true \n    - 将为这个指令创建一个新的作用域\n    - 如果在同一个元素中有多个指令需要新的作用域的话，它还是只会创建一个作用域\n    - 新的作用域规则不适用于根模版（root of the template），因此根模版往往会获得一个新的作用域\n  - 如果设置为{}(object hash)\n    - 将创建一个新的、独立(isolate)的作用域\n    - @或@attr: 建立一个local scope property到DOM属性的绑定\n    - =或=expression: 在本地作用域属性与父作用域属性之间设置双向的绑定\n    - &或&attr: 提供一个在父作用域上下文中执行一个表达式的途径\n\n- require\n  - 请求另外的controller，传入当前directive的link函数中\n  - require需要传入一个指令controller的名称\n\n- link函数\n  - link函数负责实现DOM和Scope的数据绑定\n  - 通常在link里执行DOM事件监听和数据变化监听\n  - link函数在template执行后被调用\n\n- controller函数\n  - 指令可以有controller，因为指令可以创建scope\n  - controller在所有的同一scope的指令中共享，同时可以作为link函数的第四个参数被访问到\n  - 在同一层级的scope上，这些controller是指令间的一个可用的通信信道，也可能包含指令自身\n\n- compile函数\n  - 在所有module都装载完毕在之后，compile(element)(scope)\n  - 这句开始编译和链接整个dom树（其实就是调用dom上出现的指令）\n\n### 解析指令编译过程\n首先，controller会在prelink步骤之前进行初始化，并允许其他directive通过指定名称的require进行共享\n接下来，angular在解析指令的时候，其实会先按一定的顺序执行所有指令的compile函数，然后执行所有指令的preLink函数（如果存在的话），最后执行所有指令的postLink函数\n- compile过程如下：\n  - 1.传递应用根节点给$compile函数，开始编译，返回link函数\n  - 2.传递根作用域给link函数，开始链接（每个指令分为pre link 和 post link两个过程）\n\n- 关于link和compile\n  由于在compile函数最后返回link函数，故有compile函数时指令设置link函数无效，将自动使用compile返回的link函数\n\n- 关于link和controller\n  控制器可以暴露一个API，而link可以通过require与其他的指令控制器交互。所以如果要开放出一个API给其他指令用就写在controller中，否则写在link中\n\n### 参考\n- [《angularjs directive实例详解》](http://blog.51yip.com/jsjquery/1607.html)\n- [《angularjs1.3.0源码解析之directive》](http://www.html-js.com/article/Front-end-source-code-analysis-directive-angularjs130-source-code-analysis-of-the-original)\n\n## 制作头部菜单栏\n-----\n头部菜单栏包括，主菜单，侧边下拉菜单和时钟。如图：\n![image](http://o905ne85q.bkt.clouddn.com/753B.tmp.png)\n\n### 添加index页面\n- 在views文件夹内添加一个index.html\n- 在app.js文件中添加路由\n\n``` javascript\n.when('/index', {\n\ttemplateUrl: 'views/index.html', //index的html页面\n\tcontroller: '' //index的控制器，现在暂时不加\n})\n```\n- 设置login登录后跳转至index页面\n\n``` javascript\nwindow.location.href = 'index.html#/index';\n```\n### 添加头部菜单指令\n- 在scripts文件夹中添加directives文件夹，然后新增headerDir.js文件\n- 创建指令header\n\n``` javascript\napp.directive('appheader', ['$timeout', function($timeout) {\n\treturn {\n\t\trestrict: 'AE', \n\t\ttemplateUrl: './views/directive/header.html',\n\t\tcontroller: function($scope, $element){},\n\t};\n}]);\n```\n- 在index.html页面内引入headerDir.js文件\n\n### 添加头部菜单模板\n- 若模板比较长，为了方便维护可将其放在views中，然后使用templateUrl进行引用\n- 模板架构\n  - 这里使用bootstrap的导航条作为头部\n  - 使用ng-repeat来加载菜单，则可将菜单相关设置放置到scope中，方便维护\n- 这里直接使用template编写模板，具体代码可到项目源码中查看，这里就不放出来了\n\n### 添加控制器\n- 若控制器逻辑比较多，可新增一个controller的js文件来储存逻辑，然后使用require注入或者模板添加ng-controller引用即可\n- 这里直接使用指令的controller来进行逻辑整理\n- 主要逻辑\n  - 设置主菜单和侧边下拉菜单内容\n  - 判断当前路径，并点亮对应菜单（使其active）\n  - 加载和格式化时钟，并定时刷新时间\n\n``` javascript\ncontroller: function($scope, $element, $timeout) {\n\t//$scope.menus用于储存主菜单\n\t$scope.menus = [{\n\t\ttitle: 'index', //title用于储存路由对应的路径\n\t\thref: 'index.html#/index', //href用于设定该菜单跳转路由\n\t\ttext: '首页', //text用于储存该菜单显示名称\n\t}, {\n\t\ttitle: 'others',\n\t\thref: 'index.html#/other',\n\t\ttext: '其他',\n\t}];\n\t//$scope.usermenus用于储存侧边下拉菜单\n\t$scope.usermenus = [{\n\t\thref: 'index.html#/login', //href用于设定该菜单跳转路由\n\t\ttext: '退出', //text用于储存该菜单显示名称\n\t}];\n\t//判断当前路径，点亮对应模块\n\tvar _location = location.hash.split('/')[1];\n\tfor (var i in $scope.menus) {\n\t\t//current用于储存当前菜单是否与当前路径符合，符合则点亮(active)菜单\n\t\tif ($scope.menus[i].title == _location){$scope.menus[i].current = true;}\n\t\telse{$scope.menus[i].current = false;}\n\t}\n\t//用于格式化时间（少于10在前面增加0）\n\tvar numberStandard = function(num) {\n\t\tvar _val = Number(num),\n\t\t\t_num;\n\t\t_num = (_val < 10) ? ('0' + _val) : ('' + _val);\n\t\treturn _num;\n\t};\n\t//用于渲染时钟\n\tvar renderClock = function() {\n\t\tvar _date = new Date();\n\t\t$scope.clock = '';\n\t\t$scope.clock += _date.getFullYear() + '年' + (_date.getMonth() + 1) + '月' +\n\t\t\t_date.getDate() + '日';\n\t\t$scope.clock += ' ' + numberStandard(_date.getHours()) + ':' + numberStandard(_date.getMinutes()) +\n\t\t\t':' + numberStandard(_date.getSeconds());\n\t\t//此处已通过参数注入$timeout服务，若需要注入自定义服务需要require\n\t\t$timeout(function() {\n\t\t\trenderClock();\n\t\t}, 500);\n\t};\n\trenderClock();\n}\n```\n\n### 在index页面中引入头部指令\n``` html\n<header app-header></header>\n```\n\n### 最终效果\n如图：\n![image](http://o905ne85q.bkt.clouddn.com/C902.tmp.png)\n\n## 结束语\n-----\nAngularJS指令的使用过程中可能会出现一些莫名的问题，主要是因为对指令的了解不够深入，大家可以结合使用多去熟悉一下指令过程。\n[此处查看项目代码（仅包含app部分）](https://github.com/godbasin/godbasin.github.io/tree/blog-codes/angular-notes/4-create-header)\n[此处查看页面效果](http://o9grhhyar.bkt.clouddn.com/4-create-header/index.html#/)","slug":"angular-note-4-make-header-directive","published":1,"updated":"2016-08-20T10:54:21.056Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cix45hueo000pxotu4l0esauk","content":"<p>最近的一个项目使用AngularJS(v1.2.6)作为前端的框架，《Angular使用笔记》系列用于记录过程中的一些使用和解决方法。<br>本文记录简单介绍指令，以及制作头部指令的过程。<br><a id=\"more\"></a></p>\n<h2 id=\"有关angularJS指令\"><a href=\"#有关angularJS指令\" class=\"headerlink\" title=\"有关angularJS指令\"></a>有关angularJS指令</h2><hr>\n<h3 id=\"指令要求\"><a href=\"#指令要求\" class=\"headerlink\" title=\"指令要求\"></a>指令要求</h3><ul>\n<li>指令作为一种服务，其定义有几个特殊要求<ul>\n<li>1.必须使用模块的directive方法定义</li>\n<li>2.必须提供factory方法</li>\n<li>3.factory方法返回的对象必须返回一个指令定义的对象</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"指令常用属性\"><a href=\"#指令常用属性\" class=\"headerlink\" title=\"指令常用属性\"></a>指令常用属性</h3><ul>\n<li>restrict</li>\n<li><p>可以是EAMC这四个字母的任意组合，来限定指令的应用场景</p>\n<ul>\n<li>E: 只限元素名使用</li>\n<li>A: 只限属性使用</li>\n<li>C: 只限类名使用</li>\n<li>M: 只限注释使用</li>\n</ul>\n</li>\n<li><p>template/templateUrl</p>\n<ul>\n<li>指定HTML标记替换指令内容（或指令自身）</li>\n<li>可使用templateUrl指定模板位置</li>\n</ul>\n</li>\n<li><p>transclude</p>\n<ul>\n<li>包裹指令的内容，如果transclude属性为true</li>\n<li>模板中使用ng-transclude定位</li>\n</ul>\n</li>\n<li><p>replace</p>\n<ul>\n<li>如果replace=true，那么用HTML片段替换指令本身</li>\n</ul>\n</li>\n<li><p>scope作用域</p>\n<ul>\n<li>如果设置为true <ul>\n<li>将为这个指令创建一个新的作用域</li>\n<li>如果在同一个元素中有多个指令需要新的作用域的话，它还是只会创建一个作用域</li>\n<li>新的作用域规则不适用于根模版（root of the template），因此根模版往往会获得一个新的作用域</li>\n</ul>\n</li>\n<li>如果设置为{}(object hash)<ul>\n<li>将创建一个新的、独立(isolate)的作用域</li>\n<li>@或@attr: 建立一个local scope property到DOM属性的绑定</li>\n<li>=或=expression: 在本地作用域属性与父作用域属性之间设置双向的绑定</li>\n<li>&amp;或&amp;attr: 提供一个在父作用域上下文中执行一个表达式的途径</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>require</p>\n<ul>\n<li>请求另外的controller，传入当前directive的link函数中</li>\n<li>require需要传入一个指令controller的名称</li>\n</ul>\n</li>\n<li><p>link函数</p>\n<ul>\n<li>link函数负责实现DOM和Scope的数据绑定</li>\n<li>通常在link里执行DOM事件监听和数据变化监听</li>\n<li>link函数在template执行后被调用</li>\n</ul>\n</li>\n<li><p>controller函数</p>\n<ul>\n<li>指令可以有controller，因为指令可以创建scope</li>\n<li>controller在所有的同一scope的指令中共享，同时可以作为link函数的第四个参数被访问到</li>\n<li>在同一层级的scope上，这些controller是指令间的一个可用的通信信道，也可能包含指令自身</li>\n</ul>\n</li>\n<li><p>compile函数</p>\n<ul>\n<li>在所有module都装载完毕在之后，compile(element)(scope)</li>\n<li>这句开始编译和链接整个dom树（其实就是调用dom上出现的指令）</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"解析指令编译过程\"><a href=\"#解析指令编译过程\" class=\"headerlink\" title=\"解析指令编译过程\"></a>解析指令编译过程</h3><p>首先，controller会在prelink步骤之前进行初始化，并允许其他directive通过指定名称的require进行共享<br>接下来，angular在解析指令的时候，其实会先按一定的顺序执行所有指令的compile函数，然后执行所有指令的preLink函数（如果存在的话），最后执行所有指令的postLink函数</p>\n<ul>\n<li><p>compile过程如下：</p>\n<ul>\n<li>1.传递应用根节点给$compile函数，开始编译，返回link函数</li>\n<li>2.传递根作用域给link函数，开始链接（每个指令分为pre link 和 post link两个过程）</li>\n</ul>\n</li>\n<li><p>关于link和compile<br>由于在compile函数最后返回link函数，故有compile函数时指令设置link函数无效，将自动使用compile返回的link函数</p>\n</li>\n<li><p>关于link和controller<br>控制器可以暴露一个API，而link可以通过require与其他的指令控制器交互。所以如果要开放出一个API给其他指令用就写在controller中，否则写在link中</p>\n</li>\n</ul>\n<h3 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h3><ul>\n<li><a href=\"http://blog.51yip.com/jsjquery/1607.html\" target=\"_blank\" rel=\"external\">《angularjs directive实例详解》</a></li>\n<li><a href=\"http://www.html-js.com/article/Front-end-source-code-analysis-directive-angularjs130-source-code-analysis-of-the-original\" target=\"_blank\" rel=\"external\">《angularjs1.3.0源码解析之directive》</a></li>\n</ul>\n<h2 id=\"制作头部菜单栏\"><a href=\"#制作头部菜单栏\" class=\"headerlink\" title=\"制作头部菜单栏\"></a>制作头部菜单栏</h2><hr>\n<p>头部菜单栏包括，主菜单，侧边下拉菜单和时钟。如图：<br><img src=\"http://o905ne85q.bkt.clouddn.com/753B.tmp.png\" alt=\"image\"></p>\n<h3 id=\"添加index页面\"><a href=\"#添加index页面\" class=\"headerlink\" title=\"添加index页面\"></a>添加index页面</h3><ul>\n<li>在views文件夹内添加一个index.html</li>\n<li>在app.js文件中添加路由</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">.when(<span class=\"string\">'/index'</span>, &#123;</div><div class=\"line\">  <span class=\"attr\">templateUrl</span>: <span class=\"string\">'views/index.html'</span>, <span class=\"comment\">//index的html页面</span></div><div class=\"line\">  controller: <span class=\"string\">''</span> <span class=\"comment\">//index的控制器，现在暂时不加</span></div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<ul>\n<li>设置login登录后跳转至index页面</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">window</span>.location.href = <span class=\"string\">'index.html#/index'</span>;</div></pre></td></tr></table></figure>\n<h3 id=\"添加头部菜单指令\"><a href=\"#添加头部菜单指令\" class=\"headerlink\" title=\"添加头部菜单指令\"></a>添加头部菜单指令</h3><ul>\n<li>在scripts文件夹中添加directives文件夹，然后新增headerDir.js文件</li>\n<li>创建指令header</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">app.directive(<span class=\"string\">'appheader'</span>, [<span class=\"string\">'$timeout'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">$timeout</span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> &#123;</div><div class=\"line\">    <span class=\"attr\">restrict</span>: <span class=\"string\">'AE'</span>, </div><div class=\"line\">    <span class=\"attr\">templateUrl</span>: <span class=\"string\">'./views/directive/header.html'</span>,</div><div class=\"line\">    <span class=\"attr\">controller</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">$scope, $element</span>)</span>&#123;&#125;,</div><div class=\"line\">  &#125;;</div><div class=\"line\">&#125;]);</div></pre></td></tr></table></figure>\n<ul>\n<li>在index.html页面内引入headerDir.js文件</li>\n</ul>\n<h3 id=\"添加头部菜单模板\"><a href=\"#添加头部菜单模板\" class=\"headerlink\" title=\"添加头部菜单模板\"></a>添加头部菜单模板</h3><ul>\n<li>若模板比较长，为了方便维护可将其放在views中，然后使用templateUrl进行引用</li>\n<li>模板架构<ul>\n<li>这里使用bootstrap的导航条作为头部</li>\n<li>使用ng-repeat来加载菜单，则可将菜单相关设置放置到scope中，方便维护</li>\n</ul>\n</li>\n<li>这里直接使用template编写模板，具体代码可到项目源码中查看，这里就不放出来了</li>\n</ul>\n<h3 id=\"添加控制器\"><a href=\"#添加控制器\" class=\"headerlink\" title=\"添加控制器\"></a>添加控制器</h3><ul>\n<li>若控制器逻辑比较多，可新增一个controller的js文件来储存逻辑，然后使用require注入或者模板添加ng-controller引用即可</li>\n<li>这里直接使用指令的controller来进行逻辑整理</li>\n<li>主要逻辑<ul>\n<li>设置主菜单和侧边下拉菜单内容</li>\n<li>判断当前路径，并点亮对应菜单（使其active）</li>\n<li>加载和格式化时钟，并定时刷新时间</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div></pre></td><td class=\"code\"><pre><div class=\"line\">controller: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">$scope, $element, $timeout</span>) </span>&#123;</div><div class=\"line\">  <span class=\"comment\">//$scope.menus用于储存主菜单</span></div><div class=\"line\">  $scope.menus = [&#123;</div><div class=\"line\">    <span class=\"attr\">title</span>: <span class=\"string\">'index'</span>, <span class=\"comment\">//title用于储存路由对应的路径</span></div><div class=\"line\">    href: <span class=\"string\">'index.html#/index'</span>, <span class=\"comment\">//href用于设定该菜单跳转路由</span></div><div class=\"line\">    text: <span class=\"string\">'首页'</span>, <span class=\"comment\">//text用于储存该菜单显示名称</span></div><div class=\"line\">  &#125;, &#123;</div><div class=\"line\">    <span class=\"attr\">title</span>: <span class=\"string\">'others'</span>,</div><div class=\"line\">    <span class=\"attr\">href</span>: <span class=\"string\">'index.html#/other'</span>,</div><div class=\"line\">    <span class=\"attr\">text</span>: <span class=\"string\">'其他'</span>,</div><div class=\"line\">  &#125;];</div><div class=\"line\">  <span class=\"comment\">//$scope.usermenus用于储存侧边下拉菜单</span></div><div class=\"line\">  $scope.usermenus = [&#123;</div><div class=\"line\">    <span class=\"attr\">href</span>: <span class=\"string\">'index.html#/login'</span>, <span class=\"comment\">//href用于设定该菜单跳转路由</span></div><div class=\"line\">    text: <span class=\"string\">'退出'</span>, <span class=\"comment\">//text用于储存该菜单显示名称</span></div><div class=\"line\">  &#125;];</div><div class=\"line\">  <span class=\"comment\">//判断当前路径，点亮对应模块</span></div><div class=\"line\">  <span class=\"keyword\">var</span> _location = location.hash.split(<span class=\"string\">'/'</span>)[<span class=\"number\">1</span>];</div><div class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i <span class=\"keyword\">in</span> $scope.menus) &#123;</div><div class=\"line\">    <span class=\"comment\">//current用于储存当前菜单是否与当前路径符合，符合则点亮(active)菜单</span></div><div class=\"line\">    <span class=\"keyword\">if</span> ($scope.menus[i].title == _location)&#123;$scope.menus[i].current = <span class=\"literal\">true</span>;&#125;</div><div class=\"line\">    <span class=\"keyword\">else</span>&#123;$scope.menus[i].current = <span class=\"literal\">false</span>;&#125;</div><div class=\"line\">  &#125;</div><div class=\"line\">  <span class=\"comment\">//用于格式化时间（少于10在前面增加0）</span></div><div class=\"line\">  <span class=\"keyword\">var</span> numberStandard = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">num</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> _val = <span class=\"built_in\">Number</span>(num),</div><div class=\"line\">      _num;</div><div class=\"line\">    _num = (_val &lt; <span class=\"number\">10</span>) ? (<span class=\"string\">'0'</span> + _val) : (<span class=\"string\">''</span> + _val);</div><div class=\"line\">    <span class=\"keyword\">return</span> _num;</div><div class=\"line\">  &#125;;</div><div class=\"line\">  <span class=\"comment\">//用于渲染时钟</span></div><div class=\"line\">  <span class=\"keyword\">var</span> renderClock = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> _date = <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>();</div><div class=\"line\">    $scope.clock = <span class=\"string\">''</span>;</div><div class=\"line\">    $scope.clock += _date.getFullYear() + <span class=\"string\">'年'</span> + (_date.getMonth() + <span class=\"number\">1</span>) + <span class=\"string\">'月'</span> +</div><div class=\"line\">      _date.getDate() + <span class=\"string\">'日'</span>;</div><div class=\"line\">    $scope.clock += <span class=\"string\">' '</span> + numberStandard(_date.getHours()) + <span class=\"string\">':'</span> + numberStandard(_date.getMinutes()) +</div><div class=\"line\">      <span class=\"string\">':'</span> + numberStandard(_date.getSeconds());</div><div class=\"line\">    <span class=\"comment\">//此处已通过参数注入$timeout服务，若需要注入自定义服务需要require</span></div><div class=\"line\">    $timeout(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">      renderClock();</div><div class=\"line\">    &#125;, <span class=\"number\">500</span>);</div><div class=\"line\">  &#125;;</div><div class=\"line\">  renderClock();</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"在index页面中引入头部指令\"><a href=\"#在index页面中引入头部指令\" class=\"headerlink\" title=\"在index页面中引入头部指令\"></a>在index页面中引入头部指令</h3><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">header</span> <span class=\"attr\">app-header</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">header</span>&gt;</span></div></pre></td></tr></table></figure>\n<h3 id=\"最终效果\"><a href=\"#最终效果\" class=\"headerlink\" title=\"最终效果\"></a>最终效果</h3><p>如图：<br><img src=\"http://o905ne85q.bkt.clouddn.com/C902.tmp.png\" alt=\"image\"></p>\n<h2 id=\"结束语\"><a href=\"#结束语\" class=\"headerlink\" title=\"结束语\"></a>结束语</h2><hr>\n<p>AngularJS指令的使用过程中可能会出现一些莫名的问题，主要是因为对指令的了解不够深入，大家可以结合使用多去熟悉一下指令过程。<br><a href=\"https://github.com/godbasin/godbasin.github.io/tree/blog-codes/angular-notes/4-create-header\" target=\"_blank\" rel=\"external\">此处查看项目代码（仅包含app部分）</a><br><a href=\"http://o9grhhyar.bkt.clouddn.com/4-create-header/index.html#/\" target=\"_blank\" rel=\"external\">此处查看页面效果</a></p>\n","excerpt":"<p>最近的一个项目使用AngularJS(v1.2.6)作为前端的框架，《Angular使用笔记》系列用于记录过程中的一些使用和解决方法。<br>本文记录简单介绍指令，以及制作头部指令的过程。<br>","more":"</p>\n<h2 id=\"有关angularJS指令\"><a href=\"#有关angularJS指令\" class=\"headerlink\" title=\"有关angularJS指令\"></a>有关angularJS指令</h2><hr>\n<h3 id=\"指令要求\"><a href=\"#指令要求\" class=\"headerlink\" title=\"指令要求\"></a>指令要求</h3><ul>\n<li>指令作为一种服务，其定义有几个特殊要求<ul>\n<li>1.必须使用模块的directive方法定义</li>\n<li>2.必须提供factory方法</li>\n<li>3.factory方法返回的对象必须返回一个指令定义的对象</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"指令常用属性\"><a href=\"#指令常用属性\" class=\"headerlink\" title=\"指令常用属性\"></a>指令常用属性</h3><ul>\n<li>restrict</li>\n<li><p>可以是EAMC这四个字母的任意组合，来限定指令的应用场景</p>\n<ul>\n<li>E: 只限元素名使用</li>\n<li>A: 只限属性使用</li>\n<li>C: 只限类名使用</li>\n<li>M: 只限注释使用</li>\n</ul>\n</li>\n<li><p>template/templateUrl</p>\n<ul>\n<li>指定HTML标记替换指令内容（或指令自身）</li>\n<li>可使用templateUrl指定模板位置</li>\n</ul>\n</li>\n<li><p>transclude</p>\n<ul>\n<li>包裹指令的内容，如果transclude属性为true</li>\n<li>模板中使用ng-transclude定位</li>\n</ul>\n</li>\n<li><p>replace</p>\n<ul>\n<li>如果replace=true，那么用HTML片段替换指令本身</li>\n</ul>\n</li>\n<li><p>scope作用域</p>\n<ul>\n<li>如果设置为true <ul>\n<li>将为这个指令创建一个新的作用域</li>\n<li>如果在同一个元素中有多个指令需要新的作用域的话，它还是只会创建一个作用域</li>\n<li>新的作用域规则不适用于根模版（root of the template），因此根模版往往会获得一个新的作用域</li>\n</ul>\n</li>\n<li>如果设置为{}(object hash)<ul>\n<li>将创建一个新的、独立(isolate)的作用域</li>\n<li>@或@attr: 建立一个local scope property到DOM属性的绑定</li>\n<li>=或=expression: 在本地作用域属性与父作用域属性之间设置双向的绑定</li>\n<li>&amp;或&amp;attr: 提供一个在父作用域上下文中执行一个表达式的途径</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>require</p>\n<ul>\n<li>请求另外的controller，传入当前directive的link函数中</li>\n<li>require需要传入一个指令controller的名称</li>\n</ul>\n</li>\n<li><p>link函数</p>\n<ul>\n<li>link函数负责实现DOM和Scope的数据绑定</li>\n<li>通常在link里执行DOM事件监听和数据变化监听</li>\n<li>link函数在template执行后被调用</li>\n</ul>\n</li>\n<li><p>controller函数</p>\n<ul>\n<li>指令可以有controller，因为指令可以创建scope</li>\n<li>controller在所有的同一scope的指令中共享，同时可以作为link函数的第四个参数被访问到</li>\n<li>在同一层级的scope上，这些controller是指令间的一个可用的通信信道，也可能包含指令自身</li>\n</ul>\n</li>\n<li><p>compile函数</p>\n<ul>\n<li>在所有module都装载完毕在之后，compile(element)(scope)</li>\n<li>这句开始编译和链接整个dom树（其实就是调用dom上出现的指令）</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"解析指令编译过程\"><a href=\"#解析指令编译过程\" class=\"headerlink\" title=\"解析指令编译过程\"></a>解析指令编译过程</h3><p>首先，controller会在prelink步骤之前进行初始化，并允许其他directive通过指定名称的require进行共享<br>接下来，angular在解析指令的时候，其实会先按一定的顺序执行所有指令的compile函数，然后执行所有指令的preLink函数（如果存在的话），最后执行所有指令的postLink函数</p>\n<ul>\n<li><p>compile过程如下：</p>\n<ul>\n<li>1.传递应用根节点给$compile函数，开始编译，返回link函数</li>\n<li>2.传递根作用域给link函数，开始链接（每个指令分为pre link 和 post link两个过程）</li>\n</ul>\n</li>\n<li><p>关于link和compile<br>由于在compile函数最后返回link函数，故有compile函数时指令设置link函数无效，将自动使用compile返回的link函数</p>\n</li>\n<li><p>关于link和controller<br>控制器可以暴露一个API，而link可以通过require与其他的指令控制器交互。所以如果要开放出一个API给其他指令用就写在controller中，否则写在link中</p>\n</li>\n</ul>\n<h3 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h3><ul>\n<li><a href=\"http://blog.51yip.com/jsjquery/1607.html\">《angularjs directive实例详解》</a></li>\n<li><a href=\"http://www.html-js.com/article/Front-end-source-code-analysis-directive-angularjs130-source-code-analysis-of-the-original\">《angularjs1.3.0源码解析之directive》</a></li>\n</ul>\n<h2 id=\"制作头部菜单栏\"><a href=\"#制作头部菜单栏\" class=\"headerlink\" title=\"制作头部菜单栏\"></a>制作头部菜单栏</h2><hr>\n<p>头部菜单栏包括，主菜单，侧边下拉菜单和时钟。如图：<br><img src=\"http://o905ne85q.bkt.clouddn.com/753B.tmp.png\" alt=\"image\"></p>\n<h3 id=\"添加index页面\"><a href=\"#添加index页面\" class=\"headerlink\" title=\"添加index页面\"></a>添加index页面</h3><ul>\n<li>在views文件夹内添加一个index.html</li>\n<li>在app.js文件中添加路由</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">.when(<span class=\"string\">'/index'</span>, &#123;</div><div class=\"line\">  <span class=\"attr\">templateUrl</span>: <span class=\"string\">'views/index.html'</span>, <span class=\"comment\">//index的html页面</span></div><div class=\"line\">  controller: <span class=\"string\">''</span> <span class=\"comment\">//index的控制器，现在暂时不加</span></div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<ul>\n<li>设置login登录后跳转至index页面</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">window</span>.location.href = <span class=\"string\">'index.html#/index'</span>;</div></pre></td></tr></table></figure>\n<h3 id=\"添加头部菜单指令\"><a href=\"#添加头部菜单指令\" class=\"headerlink\" title=\"添加头部菜单指令\"></a>添加头部菜单指令</h3><ul>\n<li>在scripts文件夹中添加directives文件夹，然后新增headerDir.js文件</li>\n<li>创建指令header</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">app.directive(<span class=\"string\">'appheader'</span>, [<span class=\"string\">'$timeout'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">$timeout</span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> &#123;</div><div class=\"line\">    <span class=\"attr\">restrict</span>: <span class=\"string\">'AE'</span>, </div><div class=\"line\">    <span class=\"attr\">templateUrl</span>: <span class=\"string\">'./views/directive/header.html'</span>,</div><div class=\"line\">    <span class=\"attr\">controller</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">$scope, $element</span>)</span>&#123;&#125;,</div><div class=\"line\">  &#125;;</div><div class=\"line\">&#125;]);</div></pre></td></tr></table></figure>\n<ul>\n<li>在index.html页面内引入headerDir.js文件</li>\n</ul>\n<h3 id=\"添加头部菜单模板\"><a href=\"#添加头部菜单模板\" class=\"headerlink\" title=\"添加头部菜单模板\"></a>添加头部菜单模板</h3><ul>\n<li>若模板比较长，为了方便维护可将其放在views中，然后使用templateUrl进行引用</li>\n<li>模板架构<ul>\n<li>这里使用bootstrap的导航条作为头部</li>\n<li>使用ng-repeat来加载菜单，则可将菜单相关设置放置到scope中，方便维护</li>\n</ul>\n</li>\n<li>这里直接使用template编写模板，具体代码可到项目源码中查看，这里就不放出来了</li>\n</ul>\n<h3 id=\"添加控制器\"><a href=\"#添加控制器\" class=\"headerlink\" title=\"添加控制器\"></a>添加控制器</h3><ul>\n<li>若控制器逻辑比较多，可新增一个controller的js文件来储存逻辑，然后使用require注入或者模板添加ng-controller引用即可</li>\n<li>这里直接使用指令的controller来进行逻辑整理</li>\n<li>主要逻辑<ul>\n<li>设置主菜单和侧边下拉菜单内容</li>\n<li>判断当前路径，并点亮对应菜单（使其active）</li>\n<li>加载和格式化时钟，并定时刷新时间</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div></pre></td><td class=\"code\"><pre><div class=\"line\">controller: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">$scope, $element, $timeout</span>) </span>&#123;</div><div class=\"line\">  <span class=\"comment\">//$scope.menus用于储存主菜单</span></div><div class=\"line\">  $scope.menus = [&#123;</div><div class=\"line\">    <span class=\"attr\">title</span>: <span class=\"string\">'index'</span>, <span class=\"comment\">//title用于储存路由对应的路径</span></div><div class=\"line\">    href: <span class=\"string\">'index.html#/index'</span>, <span class=\"comment\">//href用于设定该菜单跳转路由</span></div><div class=\"line\">    text: <span class=\"string\">'首页'</span>, <span class=\"comment\">//text用于储存该菜单显示名称</span></div><div class=\"line\">  &#125;, &#123;</div><div class=\"line\">    <span class=\"attr\">title</span>: <span class=\"string\">'others'</span>,</div><div class=\"line\">    <span class=\"attr\">href</span>: <span class=\"string\">'index.html#/other'</span>,</div><div class=\"line\">    <span class=\"attr\">text</span>: <span class=\"string\">'其他'</span>,</div><div class=\"line\">  &#125;];</div><div class=\"line\">  <span class=\"comment\">//$scope.usermenus用于储存侧边下拉菜单</span></div><div class=\"line\">  $scope.usermenus = [&#123;</div><div class=\"line\">    <span class=\"attr\">href</span>: <span class=\"string\">'index.html#/login'</span>, <span class=\"comment\">//href用于设定该菜单跳转路由</span></div><div class=\"line\">    text: <span class=\"string\">'退出'</span>, <span class=\"comment\">//text用于储存该菜单显示名称</span></div><div class=\"line\">  &#125;];</div><div class=\"line\">  <span class=\"comment\">//判断当前路径，点亮对应模块</span></div><div class=\"line\">  <span class=\"keyword\">var</span> _location = location.hash.split(<span class=\"string\">'/'</span>)[<span class=\"number\">1</span>];</div><div class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i <span class=\"keyword\">in</span> $scope.menus) &#123;</div><div class=\"line\">    <span class=\"comment\">//current用于储存当前菜单是否与当前路径符合，符合则点亮(active)菜单</span></div><div class=\"line\">    <span class=\"keyword\">if</span> ($scope.menus[i].title == _location)&#123;$scope.menus[i].current = <span class=\"literal\">true</span>;&#125;</div><div class=\"line\">    <span class=\"keyword\">else</span>&#123;$scope.menus[i].current = <span class=\"literal\">false</span>;&#125;</div><div class=\"line\">  &#125;</div><div class=\"line\">  <span class=\"comment\">//用于格式化时间（少于10在前面增加0）</span></div><div class=\"line\">  <span class=\"keyword\">var</span> numberStandard = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">num</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> _val = <span class=\"built_in\">Number</span>(num),</div><div class=\"line\">      _num;</div><div class=\"line\">    _num = (_val &lt; <span class=\"number\">10</span>) ? (<span class=\"string\">'0'</span> + _val) : (<span class=\"string\">''</span> + _val);</div><div class=\"line\">    <span class=\"keyword\">return</span> _num;</div><div class=\"line\">  &#125;;</div><div class=\"line\">  <span class=\"comment\">//用于渲染时钟</span></div><div class=\"line\">  <span class=\"keyword\">var</span> renderClock = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> _date = <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>();</div><div class=\"line\">    $scope.clock = <span class=\"string\">''</span>;</div><div class=\"line\">    $scope.clock += _date.getFullYear() + <span class=\"string\">'年'</span> + (_date.getMonth() + <span class=\"number\">1</span>) + <span class=\"string\">'月'</span> +</div><div class=\"line\">      _date.getDate() + <span class=\"string\">'日'</span>;</div><div class=\"line\">    $scope.clock += <span class=\"string\">' '</span> + numberStandard(_date.getHours()) + <span class=\"string\">':'</span> + numberStandard(_date.getMinutes()) +</div><div class=\"line\">      <span class=\"string\">':'</span> + numberStandard(_date.getSeconds());</div><div class=\"line\">    <span class=\"comment\">//此处已通过参数注入$timeout服务，若需要注入自定义服务需要require</span></div><div class=\"line\">    $timeout(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">      renderClock();</div><div class=\"line\">    &#125;, <span class=\"number\">500</span>);</div><div class=\"line\">  &#125;;</div><div class=\"line\">  renderClock();</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"在index页面中引入头部指令\"><a href=\"#在index页面中引入头部指令\" class=\"headerlink\" title=\"在index页面中引入头部指令\"></a>在index页面中引入头部指令</h3><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">header</span> <span class=\"attr\">app-header</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">header</span>&gt;</span></div></pre></td></tr></table></figure>\n<h3 id=\"最终效果\"><a href=\"#最终效果\" class=\"headerlink\" title=\"最终效果\"></a>最终效果</h3><p>如图：<br><img src=\"http://o905ne85q.bkt.clouddn.com/C902.tmp.png\" alt=\"image\"></p>\n<h2 id=\"结束语\"><a href=\"#结束语\" class=\"headerlink\" title=\"结束语\"></a>结束语</h2><hr>\n<p>AngularJS指令的使用过程中可能会出现一些莫名的问题，主要是因为对指令的了解不够深入，大家可以结合使用多去熟悉一下指令过程。<br><a href=\"https://github.com/godbasin/godbasin.github.io/tree/blog-codes/angular-notes/4-create-header\">此处查看项目代码（仅包含app部分）</a><br><a href=\"http://o9grhhyar.bkt.clouddn.com/4-create-header/index.html#/\">此处查看页面效果</a></p>"},{"title":"Angular使用笔记3--公用信息的管理","date":"2016-07-09T08:59:57.000Z","_content":"最近的一个项目使用AngularJS(v1.2.6)作为前端的框架，《Angular使用笔记》系列用于记录过程中的一些使用和解决方法。\n本文记录公共信息的管理方法。\n<!--more-->\n## 使用服务\n-----\n### 什么是服务\n- 在AngularJS中，服务是一个函数或对象，可在你的AngularJS应用中使用\n- AngularJS中有内置服务如$http, $route, $window, $location\n- 服务通过注入依赖方式进行使用\n\n### 创建自定义服务\n有若干方法来创建服务\n- 1.工厂(factory)\n- 2.服务(service)\n- 3.provider，唯一一种你可以传进.config()函数的service。当你想要在service对象启用之前，先进行模块范围的配置，那就应该用 provider\n\n### factory服务示例\n- 创建一个对象，为它添加属性，然后把这个对象返回出来\n\n``` javascript\napp.factory('CommonInfo', function() {\n\tvar data = '';\n\treturn {\n\t\tset: function(data) {\n\t\t\tdata = data;\n\t\t},\n\t\tget: function() {\n\t\t\treturn data;\n\t\t}\n\t};\n});\n```\n\n### service服务示例\n- 用\"new\"关键字实例化，给\"this\"添加属性，然后 service返回\"this\"\n- Angular中，Services和Factories几乎一样\n\n``` javascript\napp.service('CommonInfo', function() {\n\tvar data = '';\n\tthis.set = function(data) {\n\t\tdata = data;\n\t};\n\tthis.get: function() {\n\t\treturn data;\n\t};\n});\n```\n\n### provider\n- 使用Provider创建一个service的独特之处是，你可以在Provider对象传递到应用程序的其他部分之前在app.config函数对其进行修改\n\n``` javascript\napp.provider('CommonInfo', function() {\n\tvar data = '';\n\treturn {\n\t\tset: function(data) {\n\t\t\tdata = data;\n\t\t},\n\t\tget: function() {\n\t\t\treturn data;\n\t\t}\n\t};\n});\napp.config(function(CommonInfo) {\n\tCommonInfo.set('Config');\n});\n```\n\n### 参考\n- [《AngularJS中的Provider们：Service和Factory等的区别》](https://segmentfault.com/a/1190000003096933)\n- [《AngularJS之Factory vs Service vs Provider》](http://www.linuxidc.com/Linux/2014-05/101475.htm)\n- [《走进AngularJs(六) 服务》](http://www.cnblogs.com/lvdabao/p/3464015.html?utm_source=tuicool&utm_medium=referral)\n\n## 使用$rootscope\n-----\n### 什么是作用域Scope\n- Scope(作用域)是应用在HTML(视图)和JavaScript(控制器)之间的纽带\n- Scope是一个对象，有可用的方法和属性\n- Scope可应用在视图和控制器上\n\n### 什么是跟作用域$rootScope\n- $rootScope可作用于整个应用中。是各个controller中scope的桥梁。用rootscope定义的值，可以在各个controller中使用\n- $rootScope是由angularJS加载模块的时候自动创建的，每个模块只会有1个rootScope\n\n### 使用$rootscope保存公用信息\n- 使用$rootscope跟作用域保存公用信息，则在每个控制器中均可获取这些信息\n- 使用$rootscope需要引用'$rootscope'依赖\n\n``` javascript\napp.controller('SomeCtrl', ['$rootscope', '$scope', function($rootscope, $scope) {\n\t//设置$rootscope的信息\n\t$rootscope.data = data;\n\t//获取$rootscope的信息\n\t$scope.data = $rootscope.data;\n}]);\n```\n\n### 参考\n- [【原创】angularjs1.3.0源码解析之scope](http://www.html-js.com/article/2365)\n\n## 使用SessionStorage\n-----\n### HTML5新特性: SessionStorage\n- sessionStorage用于本地存储一个会话（session）中的数据，这些数据只有在同一个会话中的页面才能访问并且当会话结束后数据也随之销毁\n- sessionStorage不是一种持久化的本地存储，仅仅是会话级别的存储\n- 可利用SessionStorage保存一些会话类公共信息\n\n### 使用sessionStorage\n- 检测兼容性：window.sessionStorage\n- 设置session项：sessionStorage.setItem(key, value)\n- 获取session项：sessionStorage.getItem(key)\n- 删除session项：sessionStorage.removeItem(key)\n- 清除所有session信息：sessionStorage.clear()\n\n## 各种方法适用性\n-----\n### 服务的使用\n- 需通过http获取数据保存的信息\n- 公用方法的服务\n\n### $rootscope的使用\n- 在HTML DOM中直接使用的信息，如权限等\n- 可配合ng-if等绑定界面结构\n\n### sessionStorage的使用\n- 会话中的数据，如登录信息\n- 模块间跳转时需要携带数据信息\n  - 跳转前设置session\n  - location.href进行跳转\n  - 控制器加载时判断是否加载特定数据\n  - 加载数据后销毁相关session\n\n## 结束语\n-----\n以上方法均为本骚年脑洞出来的方法，若有不正确之处希望大家指出，又或者有更多的办法欢迎加入讨论呀。","source":"_posts/angular-note-3-common-info-manage.md","raw":"---\ntitle: Angular使用笔记3--公用信息的管理\ndate: 2016-07-09 16:59:57\ncategories: angular混搭\ntags: 笔记\n---\n最近的一个项目使用AngularJS(v1.2.6)作为前端的框架，《Angular使用笔记》系列用于记录过程中的一些使用和解决方法。\n本文记录公共信息的管理方法。\n<!--more-->\n## 使用服务\n-----\n### 什么是服务\n- 在AngularJS中，服务是一个函数或对象，可在你的AngularJS应用中使用\n- AngularJS中有内置服务如$http, $route, $window, $location\n- 服务通过注入依赖方式进行使用\n\n### 创建自定义服务\n有若干方法来创建服务\n- 1.工厂(factory)\n- 2.服务(service)\n- 3.provider，唯一一种你可以传进.config()函数的service。当你想要在service对象启用之前，先进行模块范围的配置，那就应该用 provider\n\n### factory服务示例\n- 创建一个对象，为它添加属性，然后把这个对象返回出来\n\n``` javascript\napp.factory('CommonInfo', function() {\n\tvar data = '';\n\treturn {\n\t\tset: function(data) {\n\t\t\tdata = data;\n\t\t},\n\t\tget: function() {\n\t\t\treturn data;\n\t\t}\n\t};\n});\n```\n\n### service服务示例\n- 用\"new\"关键字实例化，给\"this\"添加属性，然后 service返回\"this\"\n- Angular中，Services和Factories几乎一样\n\n``` javascript\napp.service('CommonInfo', function() {\n\tvar data = '';\n\tthis.set = function(data) {\n\t\tdata = data;\n\t};\n\tthis.get: function() {\n\t\treturn data;\n\t};\n});\n```\n\n### provider\n- 使用Provider创建一个service的独特之处是，你可以在Provider对象传递到应用程序的其他部分之前在app.config函数对其进行修改\n\n``` javascript\napp.provider('CommonInfo', function() {\n\tvar data = '';\n\treturn {\n\t\tset: function(data) {\n\t\t\tdata = data;\n\t\t},\n\t\tget: function() {\n\t\t\treturn data;\n\t\t}\n\t};\n});\napp.config(function(CommonInfo) {\n\tCommonInfo.set('Config');\n});\n```\n\n### 参考\n- [《AngularJS中的Provider们：Service和Factory等的区别》](https://segmentfault.com/a/1190000003096933)\n- [《AngularJS之Factory vs Service vs Provider》](http://www.linuxidc.com/Linux/2014-05/101475.htm)\n- [《走进AngularJs(六) 服务》](http://www.cnblogs.com/lvdabao/p/3464015.html?utm_source=tuicool&utm_medium=referral)\n\n## 使用$rootscope\n-----\n### 什么是作用域Scope\n- Scope(作用域)是应用在HTML(视图)和JavaScript(控制器)之间的纽带\n- Scope是一个对象，有可用的方法和属性\n- Scope可应用在视图和控制器上\n\n### 什么是跟作用域$rootScope\n- $rootScope可作用于整个应用中。是各个controller中scope的桥梁。用rootscope定义的值，可以在各个controller中使用\n- $rootScope是由angularJS加载模块的时候自动创建的，每个模块只会有1个rootScope\n\n### 使用$rootscope保存公用信息\n- 使用$rootscope跟作用域保存公用信息，则在每个控制器中均可获取这些信息\n- 使用$rootscope需要引用'$rootscope'依赖\n\n``` javascript\napp.controller('SomeCtrl', ['$rootscope', '$scope', function($rootscope, $scope) {\n\t//设置$rootscope的信息\n\t$rootscope.data = data;\n\t//获取$rootscope的信息\n\t$scope.data = $rootscope.data;\n}]);\n```\n\n### 参考\n- [【原创】angularjs1.3.0源码解析之scope](http://www.html-js.com/article/2365)\n\n## 使用SessionStorage\n-----\n### HTML5新特性: SessionStorage\n- sessionStorage用于本地存储一个会话（session）中的数据，这些数据只有在同一个会话中的页面才能访问并且当会话结束后数据也随之销毁\n- sessionStorage不是一种持久化的本地存储，仅仅是会话级别的存储\n- 可利用SessionStorage保存一些会话类公共信息\n\n### 使用sessionStorage\n- 检测兼容性：window.sessionStorage\n- 设置session项：sessionStorage.setItem(key, value)\n- 获取session项：sessionStorage.getItem(key)\n- 删除session项：sessionStorage.removeItem(key)\n- 清除所有session信息：sessionStorage.clear()\n\n## 各种方法适用性\n-----\n### 服务的使用\n- 需通过http获取数据保存的信息\n- 公用方法的服务\n\n### $rootscope的使用\n- 在HTML DOM中直接使用的信息，如权限等\n- 可配合ng-if等绑定界面结构\n\n### sessionStorage的使用\n- 会话中的数据，如登录信息\n- 模块间跳转时需要携带数据信息\n  - 跳转前设置session\n  - location.href进行跳转\n  - 控制器加载时判断是否加载特定数据\n  - 加载数据后销毁相关session\n\n## 结束语\n-----\n以上方法均为本骚年脑洞出来的方法，若有不正确之处希望大家指出，又或者有更多的办法欢迎加入讨论呀。","slug":"angular-note-3-common-info-manage","published":1,"updated":"2016-08-20T10:54:21.054Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cix45huer000uxotutjz983d8","content":"<p>最近的一个项目使用AngularJS(v1.2.6)作为前端的框架，《Angular使用笔记》系列用于记录过程中的一些使用和解决方法。<br>本文记录公共信息的管理方法。<br><a id=\"more\"></a></p>\n<h2 id=\"使用服务\"><a href=\"#使用服务\" class=\"headerlink\" title=\"使用服务\"></a>使用服务</h2><hr>\n<h3 id=\"什么是服务\"><a href=\"#什么是服务\" class=\"headerlink\" title=\"什么是服务\"></a>什么是服务</h3><ul>\n<li>在AngularJS中，服务是一个函数或对象，可在你的AngularJS应用中使用</li>\n<li>AngularJS中有内置服务如$http, $route, $window, $location</li>\n<li>服务通过注入依赖方式进行使用</li>\n</ul>\n<h3 id=\"创建自定义服务\"><a href=\"#创建自定义服务\" class=\"headerlink\" title=\"创建自定义服务\"></a>创建自定义服务</h3><p>有若干方法来创建服务</p>\n<ul>\n<li>1.工厂(factory)</li>\n<li>2.服务(service)</li>\n<li>3.provider，唯一一种你可以传进.config()函数的service。当你想要在service对象启用之前，先进行模块范围的配置，那就应该用 provider</li>\n</ul>\n<h3 id=\"factory服务示例\"><a href=\"#factory服务示例\" class=\"headerlink\" title=\"factory服务示例\"></a>factory服务示例</h3><ul>\n<li>创建一个对象，为它添加属性，然后把这个对象返回出来</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">app.factory(<span class=\"string\">'CommonInfo'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">var</span> data = <span class=\"string\">''</span>;</div><div class=\"line\">  <span class=\"keyword\">return</span> &#123;</div><div class=\"line\">    <span class=\"attr\">set</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">data</span>) </span>&#123;</div><div class=\"line\">      data = data;</div><div class=\"line\">    &#125;,</div><div class=\"line\">    <span class=\"attr\">get</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">      <span class=\"keyword\">return</span> data;</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;;</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<h3 id=\"service服务示例\"><a href=\"#service服务示例\" class=\"headerlink\" title=\"service服务示例\"></a>service服务示例</h3><ul>\n<li>用”new”关键字实例化，给”this”添加属性，然后 service返回”this”</li>\n<li>Angular中，Services和Factories几乎一样</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">app.service(<span class=\"string\">'CommonInfo'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">var</span> data = <span class=\"string\">''</span>;</div><div class=\"line\">  <span class=\"keyword\">this</span>.set = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">data</span>) </span>&#123;</div><div class=\"line\">    data = data;</div><div class=\"line\">  &#125;;</div><div class=\"line\">  <span class=\"keyword\">this</span>.get: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> data;</div><div class=\"line\">  &#125;;</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<h3 id=\"provider\"><a href=\"#provider\" class=\"headerlink\" title=\"provider\"></a>provider</h3><ul>\n<li>使用Provider创建一个service的独特之处是，你可以在Provider对象传递到应用程序的其他部分之前在app.config函数对其进行修改</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\">app.provider(<span class=\"string\">'CommonInfo'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">var</span> data = <span class=\"string\">''</span>;</div><div class=\"line\">  <span class=\"keyword\">return</span> &#123;</div><div class=\"line\">    <span class=\"attr\">set</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">data</span>) </span>&#123;</div><div class=\"line\">      data = data;</div><div class=\"line\">    &#125;,</div><div class=\"line\">    <span class=\"attr\">get</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">      <span class=\"keyword\">return</span> data;</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;;</div><div class=\"line\">&#125;);</div><div class=\"line\">app.config(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">CommonInfo</span>) </span>&#123;</div><div class=\"line\">  CommonInfo.set(<span class=\"string\">'Config'</span>);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<h3 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h3><ul>\n<li><a href=\"https://segmentfault.com/a/1190000003096933\" target=\"_blank\" rel=\"external\">《AngularJS中的Provider们：Service和Factory等的区别》</a></li>\n<li><a href=\"http://www.linuxidc.com/Linux/2014-05/101475.htm\" target=\"_blank\" rel=\"external\">《AngularJS之Factory vs Service vs Provider》</a></li>\n<li><a href=\"http://www.cnblogs.com/lvdabao/p/3464015.html?utm_source=tuicool&amp;utm_medium=referral\" target=\"_blank\" rel=\"external\">《走进AngularJs(六) 服务》</a></li>\n</ul>\n<h2 id=\"使用-rootscope\"><a href=\"#使用-rootscope\" class=\"headerlink\" title=\"使用$rootscope\"></a>使用$rootscope</h2><hr>\n<h3 id=\"什么是作用域Scope\"><a href=\"#什么是作用域Scope\" class=\"headerlink\" title=\"什么是作用域Scope\"></a>什么是作用域Scope</h3><ul>\n<li>Scope(作用域)是应用在HTML(视图)和JavaScript(控制器)之间的纽带</li>\n<li>Scope是一个对象，有可用的方法和属性</li>\n<li>Scope可应用在视图和控制器上</li>\n</ul>\n<h3 id=\"什么是跟作用域-rootScope\"><a href=\"#什么是跟作用域-rootScope\" class=\"headerlink\" title=\"什么是跟作用域$rootScope\"></a>什么是跟作用域$rootScope</h3><ul>\n<li>$rootScope可作用于整个应用中。是各个controller中scope的桥梁。用rootscope定义的值，可以在各个controller中使用</li>\n<li>$rootScope是由angularJS加载模块的时候自动创建的，每个模块只会有1个rootScope</li>\n</ul>\n<h3 id=\"使用-rootscope保存公用信息\"><a href=\"#使用-rootscope保存公用信息\" class=\"headerlink\" title=\"使用$rootscope保存公用信息\"></a>使用$rootscope保存公用信息</h3><ul>\n<li>使用$rootscope跟作用域保存公用信息，则在每个控制器中均可获取这些信息</li>\n<li>使用$rootscope需要引用’$rootscope’依赖</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">app.controller(<span class=\"string\">'SomeCtrl'</span>, [<span class=\"string\">'$rootscope'</span>, <span class=\"string\">'$scope'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">$rootscope, $scope</span>) </span>&#123;</div><div class=\"line\">  <span class=\"comment\">//设置$rootscope的信息</span></div><div class=\"line\">  $rootscope.data = data;</div><div class=\"line\">  <span class=\"comment\">//获取$rootscope的信息</span></div><div class=\"line\">  $scope.data = $rootscope.data;</div><div class=\"line\">&#125;]);</div></pre></td></tr></table></figure>\n<h3 id=\"参考-1\"><a href=\"#参考-1\" class=\"headerlink\" title=\"参考\"></a>参考</h3><ul>\n<li><a href=\"http://www.html-js.com/article/2365\" target=\"_blank\" rel=\"external\">【原创】angularjs1.3.0源码解析之scope</a></li>\n</ul>\n<h2 id=\"使用SessionStorage\"><a href=\"#使用SessionStorage\" class=\"headerlink\" title=\"使用SessionStorage\"></a>使用SessionStorage</h2><hr>\n<h3 id=\"HTML5新特性-SessionStorage\"><a href=\"#HTML5新特性-SessionStorage\" class=\"headerlink\" title=\"HTML5新特性: SessionStorage\"></a>HTML5新特性: SessionStorage</h3><ul>\n<li>sessionStorage用于本地存储一个会话（session）中的数据，这些数据只有在同一个会话中的页面才能访问并且当会话结束后数据也随之销毁</li>\n<li>sessionStorage不是一种持久化的本地存储，仅仅是会话级别的存储</li>\n<li>可利用SessionStorage保存一些会话类公共信息</li>\n</ul>\n<h3 id=\"使用sessionStorage\"><a href=\"#使用sessionStorage\" class=\"headerlink\" title=\"使用sessionStorage\"></a>使用sessionStorage</h3><ul>\n<li>检测兼容性：window.sessionStorage</li>\n<li>设置session项：sessionStorage.setItem(key, value)</li>\n<li>获取session项：sessionStorage.getItem(key)</li>\n<li>删除session项：sessionStorage.removeItem(key)</li>\n<li>清除所有session信息：sessionStorage.clear()</li>\n</ul>\n<h2 id=\"各种方法适用性\"><a href=\"#各种方法适用性\" class=\"headerlink\" title=\"各种方法适用性\"></a>各种方法适用性</h2><hr>\n<h3 id=\"服务的使用\"><a href=\"#服务的使用\" class=\"headerlink\" title=\"服务的使用\"></a>服务的使用</h3><ul>\n<li>需通过http获取数据保存的信息</li>\n<li>公用方法的服务</li>\n</ul>\n<h3 id=\"rootscope的使用\"><a href=\"#rootscope的使用\" class=\"headerlink\" title=\"$rootscope的使用\"></a>$rootscope的使用</h3><ul>\n<li>在HTML DOM中直接使用的信息，如权限等</li>\n<li>可配合ng-if等绑定界面结构</li>\n</ul>\n<h3 id=\"sessionStorage的使用\"><a href=\"#sessionStorage的使用\" class=\"headerlink\" title=\"sessionStorage的使用\"></a>sessionStorage的使用</h3><ul>\n<li>会话中的数据，如登录信息</li>\n<li>模块间跳转时需要携带数据信息<ul>\n<li>跳转前设置session</li>\n<li>location.href进行跳转</li>\n<li>控制器加载时判断是否加载特定数据</li>\n<li>加载数据后销毁相关session</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"结束语\"><a href=\"#结束语\" class=\"headerlink\" title=\"结束语\"></a>结束语</h2><hr>\n<p>以上方法均为本骚年脑洞出来的方法，若有不正确之处希望大家指出，又或者有更多的办法欢迎加入讨论呀。</p>\n","excerpt":"<p>最近的一个项目使用AngularJS(v1.2.6)作为前端的框架，《Angular使用笔记》系列用于记录过程中的一些使用和解决方法。<br>本文记录公共信息的管理方法。<br>","more":"</p>\n<h2 id=\"使用服务\"><a href=\"#使用服务\" class=\"headerlink\" title=\"使用服务\"></a>使用服务</h2><hr>\n<h3 id=\"什么是服务\"><a href=\"#什么是服务\" class=\"headerlink\" title=\"什么是服务\"></a>什么是服务</h3><ul>\n<li>在AngularJS中，服务是一个函数或对象，可在你的AngularJS应用中使用</li>\n<li>AngularJS中有内置服务如$http, $route, $window, $location</li>\n<li>服务通过注入依赖方式进行使用</li>\n</ul>\n<h3 id=\"创建自定义服务\"><a href=\"#创建自定义服务\" class=\"headerlink\" title=\"创建自定义服务\"></a>创建自定义服务</h3><p>有若干方法来创建服务</p>\n<ul>\n<li>1.工厂(factory)</li>\n<li>2.服务(service)</li>\n<li>3.provider，唯一一种你可以传进.config()函数的service。当你想要在service对象启用之前，先进行模块范围的配置，那就应该用 provider</li>\n</ul>\n<h3 id=\"factory服务示例\"><a href=\"#factory服务示例\" class=\"headerlink\" title=\"factory服务示例\"></a>factory服务示例</h3><ul>\n<li>创建一个对象，为它添加属性，然后把这个对象返回出来</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">app.factory(<span class=\"string\">'CommonInfo'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">var</span> data = <span class=\"string\">''</span>;</div><div class=\"line\">  <span class=\"keyword\">return</span> &#123;</div><div class=\"line\">    <span class=\"attr\">set</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">data</span>) </span>&#123;</div><div class=\"line\">      data = data;</div><div class=\"line\">    &#125;,</div><div class=\"line\">    <span class=\"attr\">get</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">      <span class=\"keyword\">return</span> data;</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;;</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<h3 id=\"service服务示例\"><a href=\"#service服务示例\" class=\"headerlink\" title=\"service服务示例\"></a>service服务示例</h3><ul>\n<li>用”new”关键字实例化，给”this”添加属性，然后 service返回”this”</li>\n<li>Angular中，Services和Factories几乎一样</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">app.service(<span class=\"string\">'CommonInfo'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">var</span> data = <span class=\"string\">''</span>;</div><div class=\"line\">  <span class=\"keyword\">this</span>.set = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">data</span>) </span>&#123;</div><div class=\"line\">    data = data;</div><div class=\"line\">  &#125;;</div><div class=\"line\">  <span class=\"keyword\">this</span>.get: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> data;</div><div class=\"line\">  &#125;;</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<h3 id=\"provider\"><a href=\"#provider\" class=\"headerlink\" title=\"provider\"></a>provider</h3><ul>\n<li>使用Provider创建一个service的独特之处是，你可以在Provider对象传递到应用程序的其他部分之前在app.config函数对其进行修改</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\">app.provider(<span class=\"string\">'CommonInfo'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">var</span> data = <span class=\"string\">''</span>;</div><div class=\"line\">  <span class=\"keyword\">return</span> &#123;</div><div class=\"line\">    <span class=\"attr\">set</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">data</span>) </span>&#123;</div><div class=\"line\">      data = data;</div><div class=\"line\">    &#125;,</div><div class=\"line\">    <span class=\"attr\">get</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">      <span class=\"keyword\">return</span> data;</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;;</div><div class=\"line\">&#125;);</div><div class=\"line\">app.config(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">CommonInfo</span>) </span>&#123;</div><div class=\"line\">  CommonInfo.set(<span class=\"string\">'Config'</span>);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<h3 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h3><ul>\n<li><a href=\"https://segmentfault.com/a/1190000003096933\">《AngularJS中的Provider们：Service和Factory等的区别》</a></li>\n<li><a href=\"http://www.linuxidc.com/Linux/2014-05/101475.htm\">《AngularJS之Factory vs Service vs Provider》</a></li>\n<li><a href=\"http://www.cnblogs.com/lvdabao/p/3464015.html?utm_source=tuicool&amp;utm_medium=referral\">《走进AngularJs(六) 服务》</a></li>\n</ul>\n<h2 id=\"使用-rootscope\"><a href=\"#使用-rootscope\" class=\"headerlink\" title=\"使用$rootscope\"></a>使用$rootscope</h2><hr>\n<h3 id=\"什么是作用域Scope\"><a href=\"#什么是作用域Scope\" class=\"headerlink\" title=\"什么是作用域Scope\"></a>什么是作用域Scope</h3><ul>\n<li>Scope(作用域)是应用在HTML(视图)和JavaScript(控制器)之间的纽带</li>\n<li>Scope是一个对象，有可用的方法和属性</li>\n<li>Scope可应用在视图和控制器上</li>\n</ul>\n<h3 id=\"什么是跟作用域-rootScope\"><a href=\"#什么是跟作用域-rootScope\" class=\"headerlink\" title=\"什么是跟作用域$rootScope\"></a>什么是跟作用域$rootScope</h3><ul>\n<li>$rootScope可作用于整个应用中。是各个controller中scope的桥梁。用rootscope定义的值，可以在各个controller中使用</li>\n<li>$rootScope是由angularJS加载模块的时候自动创建的，每个模块只会有1个rootScope</li>\n</ul>\n<h3 id=\"使用-rootscope保存公用信息\"><a href=\"#使用-rootscope保存公用信息\" class=\"headerlink\" title=\"使用$rootscope保存公用信息\"></a>使用$rootscope保存公用信息</h3><ul>\n<li>使用$rootscope跟作用域保存公用信息，则在每个控制器中均可获取这些信息</li>\n<li>使用$rootscope需要引用’$rootscope’依赖</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">app.controller(<span class=\"string\">'SomeCtrl'</span>, [<span class=\"string\">'$rootscope'</span>, <span class=\"string\">'$scope'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">$rootscope, $scope</span>) </span>&#123;</div><div class=\"line\">  <span class=\"comment\">//设置$rootscope的信息</span></div><div class=\"line\">  $rootscope.data = data;</div><div class=\"line\">  <span class=\"comment\">//获取$rootscope的信息</span></div><div class=\"line\">  $scope.data = $rootscope.data;</div><div class=\"line\">&#125;]);</div></pre></td></tr></table></figure>\n<h3 id=\"参考-1\"><a href=\"#参考-1\" class=\"headerlink\" title=\"参考\"></a>参考</h3><ul>\n<li><a href=\"http://www.html-js.com/article/2365\">【原创】angularjs1.3.0源码解析之scope</a></li>\n</ul>\n<h2 id=\"使用SessionStorage\"><a href=\"#使用SessionStorage\" class=\"headerlink\" title=\"使用SessionStorage\"></a>使用SessionStorage</h2><hr>\n<h3 id=\"HTML5新特性-SessionStorage\"><a href=\"#HTML5新特性-SessionStorage\" class=\"headerlink\" title=\"HTML5新特性: SessionStorage\"></a>HTML5新特性: SessionStorage</h3><ul>\n<li>sessionStorage用于本地存储一个会话（session）中的数据，这些数据只有在同一个会话中的页面才能访问并且当会话结束后数据也随之销毁</li>\n<li>sessionStorage不是一种持久化的本地存储，仅仅是会话级别的存储</li>\n<li>可利用SessionStorage保存一些会话类公共信息</li>\n</ul>\n<h3 id=\"使用sessionStorage\"><a href=\"#使用sessionStorage\" class=\"headerlink\" title=\"使用sessionStorage\"></a>使用sessionStorage</h3><ul>\n<li>检测兼容性：window.sessionStorage</li>\n<li>设置session项：sessionStorage.setItem(key, value)</li>\n<li>获取session项：sessionStorage.getItem(key)</li>\n<li>删除session项：sessionStorage.removeItem(key)</li>\n<li>清除所有session信息：sessionStorage.clear()</li>\n</ul>\n<h2 id=\"各种方法适用性\"><a href=\"#各种方法适用性\" class=\"headerlink\" title=\"各种方法适用性\"></a>各种方法适用性</h2><hr>\n<h3 id=\"服务的使用\"><a href=\"#服务的使用\" class=\"headerlink\" title=\"服务的使用\"></a>服务的使用</h3><ul>\n<li>需通过http获取数据保存的信息</li>\n<li>公用方法的服务</li>\n</ul>\n<h3 id=\"rootscope的使用\"><a href=\"#rootscope的使用\" class=\"headerlink\" title=\"$rootscope的使用\"></a>$rootscope的使用</h3><ul>\n<li>在HTML DOM中直接使用的信息，如权限等</li>\n<li>可配合ng-if等绑定界面结构</li>\n</ul>\n<h3 id=\"sessionStorage的使用\"><a href=\"#sessionStorage的使用\" class=\"headerlink\" title=\"sessionStorage的使用\"></a>sessionStorage的使用</h3><ul>\n<li>会话中的数据，如登录信息</li>\n<li>模块间跳转时需要携带数据信息<ul>\n<li>跳转前设置session</li>\n<li>location.href进行跳转</li>\n<li>控制器加载时判断是否加载特定数据</li>\n<li>加载数据后销毁相关session</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"结束语\"><a href=\"#结束语\" class=\"headerlink\" title=\"结束语\"></a>结束语</h2><hr>\n<p>以上方法均为本骚年脑洞出来的方法，若有不正确之处希望大家指出，又或者有更多的办法欢迎加入讨论呀。</p>"},{"title":"Angular使用笔记5--作用域简单分析以及制作index页面","date":"2016-07-16T00:49:21.000Z","_content":"最近的一个项目使用AngularJS(v1.2.6)作为前端的框架，《Angular使用笔记》系列用于记录过程中的一些使用和解决方法。\n本文记录简单介绍作用域，以及制作首页的过程。\n<!--more-->\n## 有关angularJS作用域\n-----\n### rootscope相关执行过程\n- 调用compile(element)(scope)\n- 开始编译dom树，传递的element是应用的根节点（有ng-app属性的节点或者手动bootstrap的节点）\n- 传递的scope则是唯一的根作用域rootscope，与根节点对应\n- 通过scope.$apply(..)进行digest进行脏检查，开始一些初始化工作\n\n### Scope对象\n- 简单的JavaScript对象\n- 可以像对其他对象一样添加属性\n- Scope对象是用构造函数创建的\n- 从原型方法包括$watch，$apply和$digest方法，以及处理自定义事件（消息传递）的$on, $emit和$broadcaset方法\n\n### 监控对象属性\n- $watch方法\n  - $watch方法监听作用域变化\n  - $watch函数所做的工作其实就是作用域中变量和关联的监听函数的存储\n  - $watch指定如下两个函数，就可以创建一个监听器\n    - 一个监控函数，用于指定所关注的那部分数据。\n    - 一个监听函数，用于在数据变更的时候接受提示\n\n- $digest方法\n  - $digest方法进行脏检查，它执行了所有在作用域上注册过的监听器\n  - 当作用域里的变量发生变化时，调用$digest方法便会执行该作用域以及它的所有子作用域上的相关的监听函数\n  - $digest函数的作用是调用这个监控函数，并且比较它返回的值和上一次返回值的差异\n  - 如果不相同，监听器就是脏的，它的监听函数就应当被调用\n  - 内置的directive和controller内部都已经做了$apply操作\n\n- $eval方法\n  - $eval在作用域的上下文上执行代码\n  - 使用一个函数作参数，所做的事情是立即执行这个传入的函数，并且把作用域自身当作参数传递给它，返回的是这个函数的返回值\n\n- $apply方法\n  - 使用一个函数作参数，用$eval执行这个函数，然后通过$digest触发digest循环\n  - 在$apply中，$digest的调用放置于finally块中，以确保即使函数抛出异常，也会执行digest\n\n### 作用域树\n- 普通的作用域通过原型链实现了继承关系，孤立作用域没有任何继承关系\n- 所有的作用域之间（也包括孤立作用域）根据自身所处的位置都存在以下这些关系\n  - $root来访问跟作用域\n  - $parent来访问父作用域\n  - $childHead（$childTail）访问头（尾）子作用域\n  - prevSibling（$nextSibling）访问前（后）一个兄弟作用域\n\n### 参考\n- [《构建自己的AngularJS，第一部分：作用域和digest》](http://www.ituring.com.cn/article/39865)\n- [《angularjs1.3.0源码解析之scope》](http://www.html-js.com/article/2365)\n\n## 制作index页面\n-----\n页面结构如下：\n![image](http://o905ne85q.bkt.clouddn.com/F3A2.tmp.png)\n\n### 添加index控制器\n- 在scripts文件夹内添加一个indexCtrl.js文件，并添加控制器\n\n``` javascript\napp.controller('IndexCtrl', ['$scope',function($scope) {}]);\n```\n- 在app.js文件中对应路由添加上控制器\n\n``` javascript\n.when('/index', {\n\ttemplateUrl: 'views/index.html', //index的html页面\n\tcontroller: 'IndexCtrl' //index的控制器，现在暂时不加\n})\n```\n- 在index.html页面内引入indexCtrl.js文件\n\n### 添加侧边菜单\n- 使用bootstrap的列表组作为侧边菜单\n- 使用bootstrap的Collapse插件实现展开和收缩菜单\n- 菜单使用ng-repeat遍历生成，故需在控制器中加入相关的内容使其生成相应菜单，此处使用scope.asidemenus\n\n### 添加页面内容\n- 在index页面中添加页面内容\n- 使用统一样式添加页面内容\n- 使用scope.loading设置当前内容\n- 使用ng-show绑定scope.loading设置相应显示内容\n- 使用ng-click绑定菜单事件，改变scope.loading来实现内容切换\n\n### 控制器逻辑\n- 使用$scope.loading储存当前位置\n- 使用$scope.asidemenus储存侧边菜单，包括以下参数\n  - title: string，一级菜单的名称\n  - click: function对象，点击菜单时绑定的事件\n  - menus: obj对象，一级菜单下的二级菜单\n    - title: string，二级菜单的名称\n    - click: function对象，点击菜单时绑定的事件\n``` javascript\napp.controller('IndexCtrl', ['$scope', function($scope) {\n\t$scope.loading = 'init'; //$scope.loading储存当前位置\n\t$scope.asidemenus = [{\n\t\ttitle: '', //一级菜单的名称\n\t\tclick: function() {}, //点击菜单时绑定的事件\n\t\tmenus: [{ //二级菜单\n\t\t\ttext: '', //二级菜单的名称\n\t\t\tclick: function() {} //点击菜单时绑定的事件\n\t\t}]\n\t}];\n}]);\n```\n\n## 结束语\n-----\nAngularJS中用得最爽的莫过于模板引擎的数据和事件绑定了，当你熟悉了angular之后你会喜欢上他的哦。\n[此处查看项目代码（仅包含app部分）](https://github.com/godbasin/godbasin.github.io/tree/blog-codes/angular-notes/5-fullfill-index)\n[此处查看页面效果](http://o9grhhyar.bkt.clouddn.com/5-fullfill-index/index.html#/index)","source":"_posts/angular-note-5-fullfill-index.md","raw":"---\ntitle: Angular使用笔记5--作用域简单分析以及制作index页面\ndate: 2016-07-16 08:49:21\ncategories: angular混搭\ntags: 笔记\n---\n最近的一个项目使用AngularJS(v1.2.6)作为前端的框架，《Angular使用笔记》系列用于记录过程中的一些使用和解决方法。\n本文记录简单介绍作用域，以及制作首页的过程。\n<!--more-->\n## 有关angularJS作用域\n-----\n### rootscope相关执行过程\n- 调用compile(element)(scope)\n- 开始编译dom树，传递的element是应用的根节点（有ng-app属性的节点或者手动bootstrap的节点）\n- 传递的scope则是唯一的根作用域rootscope，与根节点对应\n- 通过scope.$apply(..)进行digest进行脏检查，开始一些初始化工作\n\n### Scope对象\n- 简单的JavaScript对象\n- 可以像对其他对象一样添加属性\n- Scope对象是用构造函数创建的\n- 从原型方法包括$watch，$apply和$digest方法，以及处理自定义事件（消息传递）的$on, $emit和$broadcaset方法\n\n### 监控对象属性\n- $watch方法\n  - $watch方法监听作用域变化\n  - $watch函数所做的工作其实就是作用域中变量和关联的监听函数的存储\n  - $watch指定如下两个函数，就可以创建一个监听器\n    - 一个监控函数，用于指定所关注的那部分数据。\n    - 一个监听函数，用于在数据变更的时候接受提示\n\n- $digest方法\n  - $digest方法进行脏检查，它执行了所有在作用域上注册过的监听器\n  - 当作用域里的变量发生变化时，调用$digest方法便会执行该作用域以及它的所有子作用域上的相关的监听函数\n  - $digest函数的作用是调用这个监控函数，并且比较它返回的值和上一次返回值的差异\n  - 如果不相同，监听器就是脏的，它的监听函数就应当被调用\n  - 内置的directive和controller内部都已经做了$apply操作\n\n- $eval方法\n  - $eval在作用域的上下文上执行代码\n  - 使用一个函数作参数，所做的事情是立即执行这个传入的函数，并且把作用域自身当作参数传递给它，返回的是这个函数的返回值\n\n- $apply方法\n  - 使用一个函数作参数，用$eval执行这个函数，然后通过$digest触发digest循环\n  - 在$apply中，$digest的调用放置于finally块中，以确保即使函数抛出异常，也会执行digest\n\n### 作用域树\n- 普通的作用域通过原型链实现了继承关系，孤立作用域没有任何继承关系\n- 所有的作用域之间（也包括孤立作用域）根据自身所处的位置都存在以下这些关系\n  - $root来访问跟作用域\n  - $parent来访问父作用域\n  - $childHead（$childTail）访问头（尾）子作用域\n  - prevSibling（$nextSibling）访问前（后）一个兄弟作用域\n\n### 参考\n- [《构建自己的AngularJS，第一部分：作用域和digest》](http://www.ituring.com.cn/article/39865)\n- [《angularjs1.3.0源码解析之scope》](http://www.html-js.com/article/2365)\n\n## 制作index页面\n-----\n页面结构如下：\n![image](http://o905ne85q.bkt.clouddn.com/F3A2.tmp.png)\n\n### 添加index控制器\n- 在scripts文件夹内添加一个indexCtrl.js文件，并添加控制器\n\n``` javascript\napp.controller('IndexCtrl', ['$scope',function($scope) {}]);\n```\n- 在app.js文件中对应路由添加上控制器\n\n``` javascript\n.when('/index', {\n\ttemplateUrl: 'views/index.html', //index的html页面\n\tcontroller: 'IndexCtrl' //index的控制器，现在暂时不加\n})\n```\n- 在index.html页面内引入indexCtrl.js文件\n\n### 添加侧边菜单\n- 使用bootstrap的列表组作为侧边菜单\n- 使用bootstrap的Collapse插件实现展开和收缩菜单\n- 菜单使用ng-repeat遍历生成，故需在控制器中加入相关的内容使其生成相应菜单，此处使用scope.asidemenus\n\n### 添加页面内容\n- 在index页面中添加页面内容\n- 使用统一样式添加页面内容\n- 使用scope.loading设置当前内容\n- 使用ng-show绑定scope.loading设置相应显示内容\n- 使用ng-click绑定菜单事件，改变scope.loading来实现内容切换\n\n### 控制器逻辑\n- 使用$scope.loading储存当前位置\n- 使用$scope.asidemenus储存侧边菜单，包括以下参数\n  - title: string，一级菜单的名称\n  - click: function对象，点击菜单时绑定的事件\n  - menus: obj对象，一级菜单下的二级菜单\n    - title: string，二级菜单的名称\n    - click: function对象，点击菜单时绑定的事件\n``` javascript\napp.controller('IndexCtrl', ['$scope', function($scope) {\n\t$scope.loading = 'init'; //$scope.loading储存当前位置\n\t$scope.asidemenus = [{\n\t\ttitle: '', //一级菜单的名称\n\t\tclick: function() {}, //点击菜单时绑定的事件\n\t\tmenus: [{ //二级菜单\n\t\t\ttext: '', //二级菜单的名称\n\t\t\tclick: function() {} //点击菜单时绑定的事件\n\t\t}]\n\t}];\n}]);\n```\n\n## 结束语\n-----\nAngularJS中用得最爽的莫过于模板引擎的数据和事件绑定了，当你熟悉了angular之后你会喜欢上他的哦。\n[此处查看项目代码（仅包含app部分）](https://github.com/godbasin/godbasin.github.io/tree/blog-codes/angular-notes/5-fullfill-index)\n[此处查看页面效果](http://o9grhhyar.bkt.clouddn.com/5-fullfill-index/index.html#/index)","slug":"angular-note-5-fullfill-index","published":1,"updated":"2016-08-20T10:54:21.060Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cix45huet000xxotur4g578xx","content":"<p>最近的一个项目使用AngularJS(v1.2.6)作为前端的框架，《Angular使用笔记》系列用于记录过程中的一些使用和解决方法。<br>本文记录简单介绍作用域，以及制作首页的过程。<br><a id=\"more\"></a></p>\n<h2 id=\"有关angularJS作用域\"><a href=\"#有关angularJS作用域\" class=\"headerlink\" title=\"有关angularJS作用域\"></a>有关angularJS作用域</h2><hr>\n<h3 id=\"rootscope相关执行过程\"><a href=\"#rootscope相关执行过程\" class=\"headerlink\" title=\"rootscope相关执行过程\"></a>rootscope相关执行过程</h3><ul>\n<li>调用compile(element)(scope)</li>\n<li>开始编译dom树，传递的element是应用的根节点（有ng-app属性的节点或者手动bootstrap的节点）</li>\n<li>传递的scope则是唯一的根作用域rootscope，与根节点对应</li>\n<li>通过scope.$apply(..)进行digest进行脏检查，开始一些初始化工作</li>\n</ul>\n<h3 id=\"Scope对象\"><a href=\"#Scope对象\" class=\"headerlink\" title=\"Scope对象\"></a>Scope对象</h3><ul>\n<li>简单的JavaScript对象</li>\n<li>可以像对其他对象一样添加属性</li>\n<li>Scope对象是用构造函数创建的</li>\n<li>从原型方法包括$watch，$apply和$digest方法，以及处理自定义事件（消息传递）的$on, $emit和$broadcaset方法</li>\n</ul>\n<h3 id=\"监控对象属性\"><a href=\"#监控对象属性\" class=\"headerlink\" title=\"监控对象属性\"></a>监控对象属性</h3><ul>\n<li><p>$watch方法</p>\n<ul>\n<li>$watch方法监听作用域变化</li>\n<li>$watch函数所做的工作其实就是作用域中变量和关联的监听函数的存储</li>\n<li>$watch指定如下两个函数，就可以创建一个监听器<ul>\n<li>一个监控函数，用于指定所关注的那部分数据。</li>\n<li>一个监听函数，用于在数据变更的时候接受提示</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>$digest方法</p>\n<ul>\n<li>$digest方法进行脏检查，它执行了所有在作用域上注册过的监听器</li>\n<li>当作用域里的变量发生变化时，调用$digest方法便会执行该作用域以及它的所有子作用域上的相关的监听函数</li>\n<li>$digest函数的作用是调用这个监控函数，并且比较它返回的值和上一次返回值的差异</li>\n<li>如果不相同，监听器就是脏的，它的监听函数就应当被调用</li>\n<li>内置的directive和controller内部都已经做了$apply操作</li>\n</ul>\n</li>\n<li><p>$eval方法</p>\n<ul>\n<li>$eval在作用域的上下文上执行代码</li>\n<li>使用一个函数作参数，所做的事情是立即执行这个传入的函数，并且把作用域自身当作参数传递给它，返回的是这个函数的返回值</li>\n</ul>\n</li>\n<li><p>$apply方法</p>\n<ul>\n<li>使用一个函数作参数，用$eval执行这个函数，然后通过$digest触发digest循环</li>\n<li>在$apply中，$digest的调用放置于finally块中，以确保即使函数抛出异常，也会执行digest</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"作用域树\"><a href=\"#作用域树\" class=\"headerlink\" title=\"作用域树\"></a>作用域树</h3><ul>\n<li>普通的作用域通过原型链实现了继承关系，孤立作用域没有任何继承关系</li>\n<li>所有的作用域之间（也包括孤立作用域）根据自身所处的位置都存在以下这些关系<ul>\n<li>$root来访问跟作用域</li>\n<li>$parent来访问父作用域</li>\n<li>$childHead（$childTail）访问头（尾）子作用域</li>\n<li>prevSibling（$nextSibling）访问前（后）一个兄弟作用域</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h3><ul>\n<li><a href=\"http://www.ituring.com.cn/article/39865\" target=\"_blank\" rel=\"external\">《构建自己的AngularJS，第一部分：作用域和digest》</a></li>\n<li><a href=\"http://www.html-js.com/article/2365\" target=\"_blank\" rel=\"external\">《angularjs1.3.0源码解析之scope》</a></li>\n</ul>\n<h2 id=\"制作index页面\"><a href=\"#制作index页面\" class=\"headerlink\" title=\"制作index页面\"></a>制作index页面</h2><hr>\n<p>页面结构如下：<br><img src=\"http://o905ne85q.bkt.clouddn.com/F3A2.tmp.png\" alt=\"image\"></p>\n<h3 id=\"添加index控制器\"><a href=\"#添加index控制器\" class=\"headerlink\" title=\"添加index控制器\"></a>添加index控制器</h3><ul>\n<li>在scripts文件夹内添加一个indexCtrl.js文件，并添加控制器</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">app.controller(<span class=\"string\">'IndexCtrl'</span>, [<span class=\"string\">'$scope'</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">$scope</span>) </span>&#123;&#125;]);</div></pre></td></tr></table></figure>\n<ul>\n<li>在app.js文件中对应路由添加上控制器</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">.when(<span class=\"string\">'/index'</span>, &#123;</div><div class=\"line\">  <span class=\"attr\">templateUrl</span>: <span class=\"string\">'views/index.html'</span>, <span class=\"comment\">//index的html页面</span></div><div class=\"line\">  controller: <span class=\"string\">'IndexCtrl'</span> <span class=\"comment\">//index的控制器，现在暂时不加</span></div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<ul>\n<li>在index.html页面内引入indexCtrl.js文件</li>\n</ul>\n<h3 id=\"添加侧边菜单\"><a href=\"#添加侧边菜单\" class=\"headerlink\" title=\"添加侧边菜单\"></a>添加侧边菜单</h3><ul>\n<li>使用bootstrap的列表组作为侧边菜单</li>\n<li>使用bootstrap的Collapse插件实现展开和收缩菜单</li>\n<li>菜单使用ng-repeat遍历生成，故需在控制器中加入相关的内容使其生成相应菜单，此处使用scope.asidemenus</li>\n</ul>\n<h3 id=\"添加页面内容\"><a href=\"#添加页面内容\" class=\"headerlink\" title=\"添加页面内容\"></a>添加页面内容</h3><ul>\n<li>在index页面中添加页面内容</li>\n<li>使用统一样式添加页面内容</li>\n<li>使用scope.loading设置当前内容</li>\n<li>使用ng-show绑定scope.loading设置相应显示内容</li>\n<li>使用ng-click绑定菜单事件，改变scope.loading来实现内容切换</li>\n</ul>\n<h3 id=\"控制器逻辑\"><a href=\"#控制器逻辑\" class=\"headerlink\" title=\"控制器逻辑\"></a>控制器逻辑</h3><ul>\n<li>使用$scope.loading储存当前位置</li>\n<li>使用$scope.asidemenus储存侧边菜单，包括以下参数<ul>\n<li>title: string，一级菜单的名称</li>\n<li>click: function对象，点击菜单时绑定的事件</li>\n<li>menus: obj对象，一级菜单下的二级菜单<ul>\n<li>title: string，二级菜单的名称</li>\n<li>click: function对象，点击菜单时绑定的事件<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">app.controller(<span class=\"string\">'IndexCtrl'</span>, [<span class=\"string\">'$scope'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">$scope</span>) </span>&#123;</div><div class=\"line\">  $scope.loading = <span class=\"string\">'init'</span>; <span class=\"comment\">//$scope.loading储存当前位置</span></div><div class=\"line\">  $scope.asidemenus = [&#123;</div><div class=\"line\">    <span class=\"attr\">title</span>: <span class=\"string\">''</span>, <span class=\"comment\">//一级菜单的名称</span></div><div class=\"line\">    click: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;&#125;, <span class=\"comment\">//点击菜单时绑定的事件</span></div><div class=\"line\">    menus: [&#123; <span class=\"comment\">//二级菜单</span></div><div class=\"line\">      text: <span class=\"string\">''</span>, <span class=\"comment\">//二级菜单的名称</span></div><div class=\"line\">      click: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;&#125; <span class=\"comment\">//点击菜单时绑定的事件</span></div><div class=\"line\">    &#125;]</div><div class=\"line\">  &#125;];</div><div class=\"line\">&#125;]);</div></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"结束语\"><a href=\"#结束语\" class=\"headerlink\" title=\"结束语\"></a>结束语</h2><hr>\n<p>AngularJS中用得最爽的莫过于模板引擎的数据和事件绑定了，当你熟悉了angular之后你会喜欢上他的哦。<br><a href=\"https://github.com/godbasin/godbasin.github.io/tree/blog-codes/angular-notes/5-fullfill-index\" target=\"_blank\" rel=\"external\">此处查看项目代码（仅包含app部分）</a><br><a href=\"http://o9grhhyar.bkt.clouddn.com/5-fullfill-index/index.html#/index\" target=\"_blank\" rel=\"external\">此处查看页面效果</a></p>\n","excerpt":"<p>最近的一个项目使用AngularJS(v1.2.6)作为前端的框架，《Angular使用笔记》系列用于记录过程中的一些使用和解决方法。<br>本文记录简单介绍作用域，以及制作首页的过程。<br>","more":"</p>\n<h2 id=\"有关angularJS作用域\"><a href=\"#有关angularJS作用域\" class=\"headerlink\" title=\"有关angularJS作用域\"></a>有关angularJS作用域</h2><hr>\n<h3 id=\"rootscope相关执行过程\"><a href=\"#rootscope相关执行过程\" class=\"headerlink\" title=\"rootscope相关执行过程\"></a>rootscope相关执行过程</h3><ul>\n<li>调用compile(element)(scope)</li>\n<li>开始编译dom树，传递的element是应用的根节点（有ng-app属性的节点或者手动bootstrap的节点）</li>\n<li>传递的scope则是唯一的根作用域rootscope，与根节点对应</li>\n<li>通过scope.$apply(..)进行digest进行脏检查，开始一些初始化工作</li>\n</ul>\n<h3 id=\"Scope对象\"><a href=\"#Scope对象\" class=\"headerlink\" title=\"Scope对象\"></a>Scope对象</h3><ul>\n<li>简单的JavaScript对象</li>\n<li>可以像对其他对象一样添加属性</li>\n<li>Scope对象是用构造函数创建的</li>\n<li>从原型方法包括$watch，$apply和$digest方法，以及处理自定义事件（消息传递）的$on, $emit和$broadcaset方法</li>\n</ul>\n<h3 id=\"监控对象属性\"><a href=\"#监控对象属性\" class=\"headerlink\" title=\"监控对象属性\"></a>监控对象属性</h3><ul>\n<li><p>$watch方法</p>\n<ul>\n<li>$watch方法监听作用域变化</li>\n<li>$watch函数所做的工作其实就是作用域中变量和关联的监听函数的存储</li>\n<li>$watch指定如下两个函数，就可以创建一个监听器<ul>\n<li>一个监控函数，用于指定所关注的那部分数据。</li>\n<li>一个监听函数，用于在数据变更的时候接受提示</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>$digest方法</p>\n<ul>\n<li>$digest方法进行脏检查，它执行了所有在作用域上注册过的监听器</li>\n<li>当作用域里的变量发生变化时，调用$digest方法便会执行该作用域以及它的所有子作用域上的相关的监听函数</li>\n<li>$digest函数的作用是调用这个监控函数，并且比较它返回的值和上一次返回值的差异</li>\n<li>如果不相同，监听器就是脏的，它的监听函数就应当被调用</li>\n<li>内置的directive和controller内部都已经做了$apply操作</li>\n</ul>\n</li>\n<li><p>$eval方法</p>\n<ul>\n<li>$eval在作用域的上下文上执行代码</li>\n<li>使用一个函数作参数，所做的事情是立即执行这个传入的函数，并且把作用域自身当作参数传递给它，返回的是这个函数的返回值</li>\n</ul>\n</li>\n<li><p>$apply方法</p>\n<ul>\n<li>使用一个函数作参数，用$eval执行这个函数，然后通过$digest触发digest循环</li>\n<li>在$apply中，$digest的调用放置于finally块中，以确保即使函数抛出异常，也会执行digest</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"作用域树\"><a href=\"#作用域树\" class=\"headerlink\" title=\"作用域树\"></a>作用域树</h3><ul>\n<li>普通的作用域通过原型链实现了继承关系，孤立作用域没有任何继承关系</li>\n<li>所有的作用域之间（也包括孤立作用域）根据自身所处的位置都存在以下这些关系<ul>\n<li>$root来访问跟作用域</li>\n<li>$parent来访问父作用域</li>\n<li>$childHead（$childTail）访问头（尾）子作用域</li>\n<li>prevSibling（$nextSibling）访问前（后）一个兄弟作用域</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h3><ul>\n<li><a href=\"http://www.ituring.com.cn/article/39865\">《构建自己的AngularJS，第一部分：作用域和digest》</a></li>\n<li><a href=\"http://www.html-js.com/article/2365\">《angularjs1.3.0源码解析之scope》</a></li>\n</ul>\n<h2 id=\"制作index页面\"><a href=\"#制作index页面\" class=\"headerlink\" title=\"制作index页面\"></a>制作index页面</h2><hr>\n<p>页面结构如下：<br><img src=\"http://o905ne85q.bkt.clouddn.com/F3A2.tmp.png\" alt=\"image\"></p>\n<h3 id=\"添加index控制器\"><a href=\"#添加index控制器\" class=\"headerlink\" title=\"添加index控制器\"></a>添加index控制器</h3><ul>\n<li>在scripts文件夹内添加一个indexCtrl.js文件，并添加控制器</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">app.controller(<span class=\"string\">'IndexCtrl'</span>, [<span class=\"string\">'$scope'</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">$scope</span>) </span>&#123;&#125;]);</div></pre></td></tr></table></figure>\n<ul>\n<li>在app.js文件中对应路由添加上控制器</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">.when(<span class=\"string\">'/index'</span>, &#123;</div><div class=\"line\">  <span class=\"attr\">templateUrl</span>: <span class=\"string\">'views/index.html'</span>, <span class=\"comment\">//index的html页面</span></div><div class=\"line\">  controller: <span class=\"string\">'IndexCtrl'</span> <span class=\"comment\">//index的控制器，现在暂时不加</span></div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<ul>\n<li>在index.html页面内引入indexCtrl.js文件</li>\n</ul>\n<h3 id=\"添加侧边菜单\"><a href=\"#添加侧边菜单\" class=\"headerlink\" title=\"添加侧边菜单\"></a>添加侧边菜单</h3><ul>\n<li>使用bootstrap的列表组作为侧边菜单</li>\n<li>使用bootstrap的Collapse插件实现展开和收缩菜单</li>\n<li>菜单使用ng-repeat遍历生成，故需在控制器中加入相关的内容使其生成相应菜单，此处使用scope.asidemenus</li>\n</ul>\n<h3 id=\"添加页面内容\"><a href=\"#添加页面内容\" class=\"headerlink\" title=\"添加页面内容\"></a>添加页面内容</h3><ul>\n<li>在index页面中添加页面内容</li>\n<li>使用统一样式添加页面内容</li>\n<li>使用scope.loading设置当前内容</li>\n<li>使用ng-show绑定scope.loading设置相应显示内容</li>\n<li>使用ng-click绑定菜单事件，改变scope.loading来实现内容切换</li>\n</ul>\n<h3 id=\"控制器逻辑\"><a href=\"#控制器逻辑\" class=\"headerlink\" title=\"控制器逻辑\"></a>控制器逻辑</h3><ul>\n<li>使用$scope.loading储存当前位置</li>\n<li>使用$scope.asidemenus储存侧边菜单，包括以下参数<ul>\n<li>title: string，一级菜单的名称</li>\n<li>click: function对象，点击菜单时绑定的事件</li>\n<li>menus: obj对象，一级菜单下的二级菜单<ul>\n<li>title: string，二级菜单的名称</li>\n<li>click: function对象，点击菜单时绑定的事件<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">app.controller(<span class=\"string\">'IndexCtrl'</span>, [<span class=\"string\">'$scope'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">$scope</span>) </span>&#123;</div><div class=\"line\">  $scope.loading = <span class=\"string\">'init'</span>; <span class=\"comment\">//$scope.loading储存当前位置</span></div><div class=\"line\">  $scope.asidemenus = [&#123;</div><div class=\"line\">    <span class=\"attr\">title</span>: <span class=\"string\">''</span>, <span class=\"comment\">//一级菜单的名称</span></div><div class=\"line\">    click: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;&#125;, <span class=\"comment\">//点击菜单时绑定的事件</span></div><div class=\"line\">    menus: [&#123; <span class=\"comment\">//二级菜单</span></div><div class=\"line\">      text: <span class=\"string\">''</span>, <span class=\"comment\">//二级菜单的名称</span></div><div class=\"line\">      click: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;&#125; <span class=\"comment\">//点击菜单时绑定的事件</span></div><div class=\"line\">    &#125;]</div><div class=\"line\">  &#125;];</div><div class=\"line\">&#125;]);</div></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"结束语\"><a href=\"#结束语\" class=\"headerlink\" title=\"结束语\"></a>结束语</h2><hr>\n<p>AngularJS中用得最爽的莫过于模板引擎的数据和事件绑定了，当你熟悉了angular之后你会喜欢上他的哦。<br><a href=\"https://github.com/godbasin/godbasin.github.io/tree/blog-codes/angular-notes/5-fullfill-index\">此处查看项目代码（仅包含app部分）</a><br><a href=\"http://o9grhhyar.bkt.clouddn.com/5-fullfill-index/index.html#/index\">此处查看页面效果</a></p>"},{"title":"Angular使用笔记8--使用filter服务进行格式转换","date":"2016-07-23T14:42:23.000Z","_content":"最近的一个项目使用AngularJS(v1.2.6)作为前端的框架，《Angular使用笔记》系列用于记录过程中的一些使用和解决方法。\n本文记录使用filter服务进行格式转换的过程。\n<!--more-->\n## AngularJS Filter\n-----\nAngularJS 过滤器可用于转换数据。\n### ng内置过滤器\n- currency： 格式化数字为货币格式\n- filter： 从数组项中选择一个子集\n- lowercase： 格式化字符串为小写\n- orderBy： 根据某个表达式排列数组\n- uppercase： 格式化字符串为大写\n- date: 日期格式化\n- json: 格式化json对象\n- limitTo: 限制数组长度或字符串长度\n- number: 格式化数字（如千分位）\n\n### 在模板中使用filter\n- 过滤器可以通过一个管道字符（|）和一个过滤器添加到表达式中\n\n``` html\n{{ expression | filter }}\n```\n- 可以多个filter连用，上一个filter的输出将作为下一个filter的输入\n\n``` html\n{{ expression | filter1 | filter2 | ... }}\n```\n- filter可以接收参数，参数用 : 进行分割\n\n``` html\n{{ expression | filter:argument1:argument2:... }}\n```\n### 依赖注入使用filter\n- 需使用依赖注入方法将$filter注入到该controller中\n\n``` javascrpit\nvar new_value = $filter('filtername')(old_value);\n```\n\n### 参考\n[《AngularJS的Filter用法详解》](http://www.cnblogs.com/wushangjue/p/4516107.html?utm_source=tuicool&utm_medium=referral)\n\n## 自定义过滤器\n-----\n- 使用module的filter方法，返回一个函数\n- 该函数接收输入值，并返回处理后的结果\n\n这里我们自定义一个日期格式化的过滤器，可传入type参数进行设置格式(默认为xxxx.xx.xx，传入cn为中文日期xxxx年xx月xx日)。\n\n### 格式简介\n- xxxx.xx.xx格式\n> 该格式需要对月和日进行补全，即小于10表示为0x\n\n``` javascrpit\nvar numStd = function(num) {\n\tif (num === undefined) return; //若无传入值，则返回\n\tvar _val = parseInt(num), //数字化值，去除多余0\n\t\t_num;\n\t//判断小于10，则在前方添加0\n\t_num = (_val < 10) ? ('0' + _val) : ('' + _val);\n\treturn _num; //返回新值\n};\n```\n- xxxx年xx月xx日\n> 该格式需要对月和日数字化，即小于10表示为x\n\n``` javascrpit\nvar numUnstd = function(num) {\n\tif (num === undefined) return; //若无传入值，则返回\n\tvar _num = parseInt(num); //数字化值，去除多余0\n\treturn _num; //返回新值\n};\n```\n\n### 设置过滤器\n- 首先需要对传入值进行判断，若为undefined则返回\n- 使用正则判断当前值的格式，将其拆分取出年月日\n- 根据传入的type参数值，格式化为新的值，并返回\n\n``` javascript\n.filter('myDate', function() {\n\t/**此处略去上方提到的数字格式化***/\n\treturn function(str, type) {\n\t\tif (_str === undefined) return; //若无传入值，则返回\n\t\tvar _str = str + ''; //将该值转换为字符串格式\n\t\t//正则判断当前日期格式\n\t\t//是否为xxxx-xx-xx\n\t\tif (/\\d{4}-\\d{1,2}-\\d{1,2}/.test(_str)) {\n\t\t\tvar datearr = _str.split('-'); //取出年月日\n\t\t\t//若type为cn，则转换成xxxx年xx月xx日，否则为xxxx.xx.xx\n\t\t\tif (type && type.toLowerCase() == 'cn') {\n\t\t\t\t_str = numUnstd(datearr[0]) + '年' + numUnstd(datearr[1]) + '月' + numUnstd(datearr[2]) + '日';\n\t\t\t} else {\n\t\t\t\t_str = numStd(datearr[0]) + '.' + numStd(datearr[1]) + '.' + numStd(datearr[2]);\n\t\t\t}\n\t\t//是否为xxxx.xx.xx\n\t\t} else if (/\\d{4}\\.\\d{1,2}\\.\\d{1,2}/.test(_str)) {\n\t\t\tvar datearr = _str.split('.'); //取出年月日\n\t\t\t//若type为cn，则转换成xxxx年xx月xx日，否则为xxxx.xx.xx\n\t\t\tif (type && type.toLowerCase() == 'cn') {\n\t\t\t\t_str = numUnstd(datearr[0]) + '年' + numUnstd(datearr[1]) + '月' + numUnstd(datearr[2]) + '日';\n\t\t\t} else {\n\t\t\t\t_str = numStd(datearr[0]) + '.' + numStd(datearr[1]) + '.' + numStd(datearr[2]);\n\t\t\t}\n\t\t//是否为xxxx年xx月xx日\n\t\t} else if ((_str.indexOf('年') > -1) && (_str.indexOf('月') > -1) && (_str.indexOf('日') > -1)) {\n\t\t\t //取出年月日\n\t\t\tvar datearr = _str.split('年'),\n\t\t\t\tyear = datearr[0],\n\t\t\t\tmonth = datearr[1].split('月')[0],\n\t\t\t\tday = datearr[1].split('月')[1].replace('日', '');\n\t\t\t//若type为cn，则转换成xxxx年xx月xx日，否则为xxxx.xx.xx\n\t\t\tif (type && type.toLowerCase() == 'cn') {\n\t\t\t\t_str = numUnstd(year) + '年' + numUnstd(month) + '月' + numUnstd(day) + '日';\n\t\t\t} else {\n\t\t\t\t_str = numStd(year) + '.' + numStd(month) + '.' + numStd(day);\n\t\t\t}\t\n\t\t} else {\n\t\t\treturn str; //以上均不符合，返回原值\n\n\t\treturn _str; //返回新值\n\t};\n});\n```\n\n## 在other页面中使用\n-----\n### 添加filter.js\n- 在scripts文件夹新建filter文件夹\n- 在filter文件夹添加filter.js，并添加上述内容\n\n### 添加other页面\n- 在views文件夹内添加一个other.html\n- 在other.html页面内加入头部指令\n\n``` html\n<header app-header></header>\n```\n- 在app.js文件中添加路由\n\n``` javascript\n.when('/other', {\n\ttemplateUrl: 'views/other.html', //other的html页面\n\tcontroller: 'OtherCtrl' //other的控制器\n})\n```\n\n- 添加一些展示过滤器的信息\n\n### 添加控制器\n- 在controller文件夹内添加一个otherCtrl.js\n- 在index启动页面中添加该文件\n- 注入$filter服务\n- 设置一些用于展示的初始值\n\n``` javascript\napp.controller('OtherCtrl', ['$scope', '$filter',  function($scope, $filter) {\n\t$scope.string = 'This is a long long long long long long long long long long very long string.';\n\t$scope.date = new Date();\n\t$scope.number = 1263714072;\n\t$scope.number_with_currency = $filter('currency')($scope.number, '￥');\n}]);\n```\n### 最终效果\n如图：\n![image](http://o905ne85q.bkt.clouddn.com/511E.tmp.png)\n\n## 结束语\n-----\n使用filter服务可以很方便转换各种的数据格式哦，而且也方便统一管理呢。\n[此处查看项目代码（仅包含app部分）](https://github.com/godbasin/godbasin.github.io/tree/blog-codes/angular-notes/8-create-filter)\n[此处查看页面效果](http://o9grhhyar.bkt.clouddn.com/8-create-filter/index.html#/other)","source":"_posts/angular-note-8-create-filter.md","raw":"---\ntitle: Angular使用笔记8--使用filter服务进行格式转换\ndate: 2016-07-23 22:42:23\ncategories: angular混搭\ntags: 笔记\n---\n最近的一个项目使用AngularJS(v1.2.6)作为前端的框架，《Angular使用笔记》系列用于记录过程中的一些使用和解决方法。\n本文记录使用filter服务进行格式转换的过程。\n<!--more-->\n## AngularJS Filter\n-----\nAngularJS 过滤器可用于转换数据。\n### ng内置过滤器\n- currency： 格式化数字为货币格式\n- filter： 从数组项中选择一个子集\n- lowercase： 格式化字符串为小写\n- orderBy： 根据某个表达式排列数组\n- uppercase： 格式化字符串为大写\n- date: 日期格式化\n- json: 格式化json对象\n- limitTo: 限制数组长度或字符串长度\n- number: 格式化数字（如千分位）\n\n### 在模板中使用filter\n- 过滤器可以通过一个管道字符（|）和一个过滤器添加到表达式中\n\n``` html\n{{ expression | filter }}\n```\n- 可以多个filter连用，上一个filter的输出将作为下一个filter的输入\n\n``` html\n{{ expression | filter1 | filter2 | ... }}\n```\n- filter可以接收参数，参数用 : 进行分割\n\n``` html\n{{ expression | filter:argument1:argument2:... }}\n```\n### 依赖注入使用filter\n- 需使用依赖注入方法将$filter注入到该controller中\n\n``` javascrpit\nvar new_value = $filter('filtername')(old_value);\n```\n\n### 参考\n[《AngularJS的Filter用法详解》](http://www.cnblogs.com/wushangjue/p/4516107.html?utm_source=tuicool&utm_medium=referral)\n\n## 自定义过滤器\n-----\n- 使用module的filter方法，返回一个函数\n- 该函数接收输入值，并返回处理后的结果\n\n这里我们自定义一个日期格式化的过滤器，可传入type参数进行设置格式(默认为xxxx.xx.xx，传入cn为中文日期xxxx年xx月xx日)。\n\n### 格式简介\n- xxxx.xx.xx格式\n> 该格式需要对月和日进行补全，即小于10表示为0x\n\n``` javascrpit\nvar numStd = function(num) {\n\tif (num === undefined) return; //若无传入值，则返回\n\tvar _val = parseInt(num), //数字化值，去除多余0\n\t\t_num;\n\t//判断小于10，则在前方添加0\n\t_num = (_val < 10) ? ('0' + _val) : ('' + _val);\n\treturn _num; //返回新值\n};\n```\n- xxxx年xx月xx日\n> 该格式需要对月和日数字化，即小于10表示为x\n\n``` javascrpit\nvar numUnstd = function(num) {\n\tif (num === undefined) return; //若无传入值，则返回\n\tvar _num = parseInt(num); //数字化值，去除多余0\n\treturn _num; //返回新值\n};\n```\n\n### 设置过滤器\n- 首先需要对传入值进行判断，若为undefined则返回\n- 使用正则判断当前值的格式，将其拆分取出年月日\n- 根据传入的type参数值，格式化为新的值，并返回\n\n``` javascript\n.filter('myDate', function() {\n\t/**此处略去上方提到的数字格式化***/\n\treturn function(str, type) {\n\t\tif (_str === undefined) return; //若无传入值，则返回\n\t\tvar _str = str + ''; //将该值转换为字符串格式\n\t\t//正则判断当前日期格式\n\t\t//是否为xxxx-xx-xx\n\t\tif (/\\d{4}-\\d{1,2}-\\d{1,2}/.test(_str)) {\n\t\t\tvar datearr = _str.split('-'); //取出年月日\n\t\t\t//若type为cn，则转换成xxxx年xx月xx日，否则为xxxx.xx.xx\n\t\t\tif (type && type.toLowerCase() == 'cn') {\n\t\t\t\t_str = numUnstd(datearr[0]) + '年' + numUnstd(datearr[1]) + '月' + numUnstd(datearr[2]) + '日';\n\t\t\t} else {\n\t\t\t\t_str = numStd(datearr[0]) + '.' + numStd(datearr[1]) + '.' + numStd(datearr[2]);\n\t\t\t}\n\t\t//是否为xxxx.xx.xx\n\t\t} else if (/\\d{4}\\.\\d{1,2}\\.\\d{1,2}/.test(_str)) {\n\t\t\tvar datearr = _str.split('.'); //取出年月日\n\t\t\t//若type为cn，则转换成xxxx年xx月xx日，否则为xxxx.xx.xx\n\t\t\tif (type && type.toLowerCase() == 'cn') {\n\t\t\t\t_str = numUnstd(datearr[0]) + '年' + numUnstd(datearr[1]) + '月' + numUnstd(datearr[2]) + '日';\n\t\t\t} else {\n\t\t\t\t_str = numStd(datearr[0]) + '.' + numStd(datearr[1]) + '.' + numStd(datearr[2]);\n\t\t\t}\n\t\t//是否为xxxx年xx月xx日\n\t\t} else if ((_str.indexOf('年') > -1) && (_str.indexOf('月') > -1) && (_str.indexOf('日') > -1)) {\n\t\t\t //取出年月日\n\t\t\tvar datearr = _str.split('年'),\n\t\t\t\tyear = datearr[0],\n\t\t\t\tmonth = datearr[1].split('月')[0],\n\t\t\t\tday = datearr[1].split('月')[1].replace('日', '');\n\t\t\t//若type为cn，则转换成xxxx年xx月xx日，否则为xxxx.xx.xx\n\t\t\tif (type && type.toLowerCase() == 'cn') {\n\t\t\t\t_str = numUnstd(year) + '年' + numUnstd(month) + '月' + numUnstd(day) + '日';\n\t\t\t} else {\n\t\t\t\t_str = numStd(year) + '.' + numStd(month) + '.' + numStd(day);\n\t\t\t}\t\n\t\t} else {\n\t\t\treturn str; //以上均不符合，返回原值\n\n\t\treturn _str; //返回新值\n\t};\n});\n```\n\n## 在other页面中使用\n-----\n### 添加filter.js\n- 在scripts文件夹新建filter文件夹\n- 在filter文件夹添加filter.js，并添加上述内容\n\n### 添加other页面\n- 在views文件夹内添加一个other.html\n- 在other.html页面内加入头部指令\n\n``` html\n<header app-header></header>\n```\n- 在app.js文件中添加路由\n\n``` javascript\n.when('/other', {\n\ttemplateUrl: 'views/other.html', //other的html页面\n\tcontroller: 'OtherCtrl' //other的控制器\n})\n```\n\n- 添加一些展示过滤器的信息\n\n### 添加控制器\n- 在controller文件夹内添加一个otherCtrl.js\n- 在index启动页面中添加该文件\n- 注入$filter服务\n- 设置一些用于展示的初始值\n\n``` javascript\napp.controller('OtherCtrl', ['$scope', '$filter',  function($scope, $filter) {\n\t$scope.string = 'This is a long long long long long long long long long long very long string.';\n\t$scope.date = new Date();\n\t$scope.number = 1263714072;\n\t$scope.number_with_currency = $filter('currency')($scope.number, '￥');\n}]);\n```\n### 最终效果\n如图：\n![image](http://o905ne85q.bkt.clouddn.com/511E.tmp.png)\n\n## 结束语\n-----\n使用filter服务可以很方便转换各种的数据格式哦，而且也方便统一管理呢。\n[此处查看项目代码（仅包含app部分）](https://github.com/godbasin/godbasin.github.io/tree/blog-codes/angular-notes/8-create-filter)\n[此处查看页面效果](http://o9grhhyar.bkt.clouddn.com/8-create-filter/index.html#/other)","slug":"angular-note-8-create-filter","published":1,"updated":"2016-08-20T10:54:21.069Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cix45huf00012xotumf0ibb29","content":"<p>最近的一个项目使用AngularJS(v1.2.6)作为前端的框架，《Angular使用笔记》系列用于记录过程中的一些使用和解决方法。<br>本文记录使用filter服务进行格式转换的过程。<br><a id=\"more\"></a></p>\n<h2 id=\"AngularJS-Filter\"><a href=\"#AngularJS-Filter\" class=\"headerlink\" title=\"AngularJS Filter\"></a>AngularJS Filter</h2><hr>\n<p>AngularJS 过滤器可用于转换数据。</p>\n<h3 id=\"ng内置过滤器\"><a href=\"#ng内置过滤器\" class=\"headerlink\" title=\"ng内置过滤器\"></a>ng内置过滤器</h3><ul>\n<li>currency： 格式化数字为货币格式</li>\n<li>filter： 从数组项中选择一个子集</li>\n<li>lowercase： 格式化字符串为小写</li>\n<li>orderBy： 根据某个表达式排列数组</li>\n<li>uppercase： 格式化字符串为大写</li>\n<li>date: 日期格式化</li>\n<li>json: 格式化json对象</li>\n<li>limitTo: 限制数组长度或字符串长度</li>\n<li>number: 格式化数字（如千分位）</li>\n</ul>\n<h3 id=\"在模板中使用filter\"><a href=\"#在模板中使用filter\" class=\"headerlink\" title=\"在模板中使用filter\"></a>在模板中使用filter</h3><ul>\n<li>过滤器可以通过一个管道字符（|）和一个过滤器添加到表达式中</li>\n</ul>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;&#123; expression | filter &#125;&#125;</div></pre></td></tr></table></figure>\n<ul>\n<li>可以多个filter连用，上一个filter的输出将作为下一个filter的输入</li>\n</ul>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;&#123; expression | filter1 | filter2 | ... &#125;&#125;</div></pre></td></tr></table></figure>\n<ul>\n<li>filter可以接收参数，参数用 : 进行分割</li>\n</ul>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;&#123; expression | filter:argument1:argument2:... &#125;&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"依赖注入使用filter\"><a href=\"#依赖注入使用filter\" class=\"headerlink\" title=\"依赖注入使用filter\"></a>依赖注入使用filter</h3><ul>\n<li>需使用依赖注入方法将$filter注入到该controller中</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">var new_value = $filter(&apos;filtername&apos;)(old_value);</div></pre></td></tr></table></figure>\n<h3 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h3><p><a href=\"http://www.cnblogs.com/wushangjue/p/4516107.html?utm_source=tuicool&amp;utm_medium=referral\" target=\"_blank\" rel=\"external\">《AngularJS的Filter用法详解》</a></p>\n<h2 id=\"自定义过滤器\"><a href=\"#自定义过滤器\" class=\"headerlink\" title=\"自定义过滤器\"></a>自定义过滤器</h2><hr>\n<ul>\n<li>使用module的filter方法，返回一个函数</li>\n<li>该函数接收输入值，并返回处理后的结果</li>\n</ul>\n<p>这里我们自定义一个日期格式化的过滤器，可传入type参数进行设置格式(默认为xxxx.xx.xx，传入cn为中文日期xxxx年xx月xx日)。</p>\n<h3 id=\"格式简介\"><a href=\"#格式简介\" class=\"headerlink\" title=\"格式简介\"></a>格式简介</h3><ul>\n<li>xxxx.xx.xx格式<blockquote>\n<p>该格式需要对月和日进行补全，即小于10表示为0x</p>\n</blockquote>\n</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">var numStd = function(num) &#123;</div><div class=\"line\">  if (num === undefined) return; //若无传入值，则返回</div><div class=\"line\">  var _val = parseInt(num), //数字化值，去除多余0</div><div class=\"line\">    _num;</div><div class=\"line\">  //判断小于10，则在前方添加0</div><div class=\"line\">  _num = (_val &lt; 10) ? (&apos;0&apos; + _val) : (&apos;&apos; + _val);</div><div class=\"line\">  return _num; //返回新值</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<ul>\n<li>xxxx年xx月xx日<blockquote>\n<p>该格式需要对月和日数字化，即小于10表示为x</p>\n</blockquote>\n</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">var numUnstd = function(num) &#123;</div><div class=\"line\">  if (num === undefined) return; //若无传入值，则返回</div><div class=\"line\">  var _num = parseInt(num); //数字化值，去除多余0</div><div class=\"line\">  return _num; //返回新值</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<h3 id=\"设置过滤器\"><a href=\"#设置过滤器\" class=\"headerlink\" title=\"设置过滤器\"></a>设置过滤器</h3><ul>\n<li>首先需要对传入值进行判断，若为undefined则返回</li>\n<li>使用正则判断当前值的格式，将其拆分取出年月日</li>\n<li>根据传入的type参数值，格式化为新的值，并返回</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div></pre></td><td class=\"code\"><pre><div class=\"line\">.filter(<span class=\"string\">'myDate'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">  <span class=\"comment\">/**此处略去上方提到的数字格式化***/</span></div><div class=\"line\">  <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">str, type</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (_str === <span class=\"literal\">undefined</span>) <span class=\"keyword\">return</span>; <span class=\"comment\">//若无传入值，则返回</span></div><div class=\"line\">    <span class=\"keyword\">var</span> _str = str + <span class=\"string\">''</span>; <span class=\"comment\">//将该值转换为字符串格式</span></div><div class=\"line\">    <span class=\"comment\">//正则判断当前日期格式</span></div><div class=\"line\">    <span class=\"comment\">//是否为xxxx-xx-xx</span></div><div class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"regexp\">/\\d&#123;4&#125;-\\d&#123;1,2&#125;-\\d&#123;1,2&#125;/</span>.test(_str)) &#123;</div><div class=\"line\">      <span class=\"keyword\">var</span> datearr = _str.split(<span class=\"string\">'-'</span>); <span class=\"comment\">//取出年月日</span></div><div class=\"line\">      <span class=\"comment\">//若type为cn，则转换成xxxx年xx月xx日，否则为xxxx.xx.xx</span></div><div class=\"line\">      <span class=\"keyword\">if</span> (type &amp;&amp; type.toLowerCase() == <span class=\"string\">'cn'</span>) &#123;</div><div class=\"line\">        _str = numUnstd(datearr[<span class=\"number\">0</span>]) + <span class=\"string\">'年'</span> + numUnstd(datearr[<span class=\"number\">1</span>]) + <span class=\"string\">'月'</span> + numUnstd(datearr[<span class=\"number\">2</span>]) + <span class=\"string\">'日'</span>;</div><div class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">        _str = numStd(datearr[<span class=\"number\">0</span>]) + <span class=\"string\">'.'</span> + numStd(datearr[<span class=\"number\">1</span>]) + <span class=\"string\">'.'</span> + numStd(datearr[<span class=\"number\">2</span>]);</div><div class=\"line\">      &#125;</div><div class=\"line\">    <span class=\"comment\">//是否为xxxx.xx.xx</span></div><div class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (<span class=\"regexp\">/\\d&#123;4&#125;\\.\\d&#123;1,2&#125;\\.\\d&#123;1,2&#125;/</span>.test(_str)) &#123;</div><div class=\"line\">      <span class=\"keyword\">var</span> datearr = _str.split(<span class=\"string\">'.'</span>); <span class=\"comment\">//取出年月日</span></div><div class=\"line\">      <span class=\"comment\">//若type为cn，则转换成xxxx年xx月xx日，否则为xxxx.xx.xx</span></div><div class=\"line\">      <span class=\"keyword\">if</span> (type &amp;&amp; type.toLowerCase() == <span class=\"string\">'cn'</span>) &#123;</div><div class=\"line\">        _str = numUnstd(datearr[<span class=\"number\">0</span>]) + <span class=\"string\">'年'</span> + numUnstd(datearr[<span class=\"number\">1</span>]) + <span class=\"string\">'月'</span> + numUnstd(datearr[<span class=\"number\">2</span>]) + <span class=\"string\">'日'</span>;</div><div class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">        _str = numStd(datearr[<span class=\"number\">0</span>]) + <span class=\"string\">'.'</span> + numStd(datearr[<span class=\"number\">1</span>]) + <span class=\"string\">'.'</span> + numStd(datearr[<span class=\"number\">2</span>]);</div><div class=\"line\">      &#125;</div><div class=\"line\">    <span class=\"comment\">//是否为xxxx年xx月xx日</span></div><div class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> ((_str.indexOf(<span class=\"string\">'年'</span>) &gt; <span class=\"number\">-1</span>) &amp;&amp; (_str.indexOf(<span class=\"string\">'月'</span>) &gt; <span class=\"number\">-1</span>) &amp;&amp; (_str.indexOf(<span class=\"string\">'日'</span>) &gt; <span class=\"number\">-1</span>)) &#123;</div><div class=\"line\">       <span class=\"comment\">//取出年月日</span></div><div class=\"line\">      <span class=\"keyword\">var</span> datearr = _str.split(<span class=\"string\">'年'</span>),</div><div class=\"line\">        year = datearr[<span class=\"number\">0</span>],</div><div class=\"line\">        month = datearr[<span class=\"number\">1</span>].split(<span class=\"string\">'月'</span>)[<span class=\"number\">0</span>],</div><div class=\"line\">        day = datearr[<span class=\"number\">1</span>].split(<span class=\"string\">'月'</span>)[<span class=\"number\">1</span>].replace(<span class=\"string\">'日'</span>, <span class=\"string\">''</span>);</div><div class=\"line\">      <span class=\"comment\">//若type为cn，则转换成xxxx年xx月xx日，否则为xxxx.xx.xx</span></div><div class=\"line\">      <span class=\"keyword\">if</span> (type &amp;&amp; type.toLowerCase() == <span class=\"string\">'cn'</span>) &#123;</div><div class=\"line\">        _str = numUnstd(year) + <span class=\"string\">'年'</span> + numUnstd(month) + <span class=\"string\">'月'</span> + numUnstd(day) + <span class=\"string\">'日'</span>;</div><div class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">        _str = numStd(year) + <span class=\"string\">'.'</span> + numStd(month) + <span class=\"string\">'.'</span> + numStd(day);</div><div class=\"line\">      &#125;\t</div><div class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">      <span class=\"keyword\">return</span> str; <span class=\"comment\">//以上均不符合，返回原值</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">return</span> _str; <span class=\"comment\">//返回新值</span></div><div class=\"line\">  &#125;;</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<h2 id=\"在other页面中使用\"><a href=\"#在other页面中使用\" class=\"headerlink\" title=\"在other页面中使用\"></a>在other页面中使用</h2><hr>\n<h3 id=\"添加filter-js\"><a href=\"#添加filter-js\" class=\"headerlink\" title=\"添加filter.js\"></a>添加filter.js</h3><ul>\n<li>在scripts文件夹新建filter文件夹</li>\n<li>在filter文件夹添加filter.js，并添加上述内容</li>\n</ul>\n<h3 id=\"添加other页面\"><a href=\"#添加other页面\" class=\"headerlink\" title=\"添加other页面\"></a>添加other页面</h3><ul>\n<li>在views文件夹内添加一个other.html</li>\n<li>在other.html页面内加入头部指令</li>\n</ul>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">header</span> <span class=\"attr\">app-header</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">header</span>&gt;</span></div></pre></td></tr></table></figure>\n<ul>\n<li>在app.js文件中添加路由</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">.when(<span class=\"string\">'/other'</span>, &#123;</div><div class=\"line\">  <span class=\"attr\">templateUrl</span>: <span class=\"string\">'views/other.html'</span>, <span class=\"comment\">//other的html页面</span></div><div class=\"line\">  controller: <span class=\"string\">'OtherCtrl'</span> <span class=\"comment\">//other的控制器</span></div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<ul>\n<li>添加一些展示过滤器的信息</li>\n</ul>\n<h3 id=\"添加控制器\"><a href=\"#添加控制器\" class=\"headerlink\" title=\"添加控制器\"></a>添加控制器</h3><ul>\n<li>在controller文件夹内添加一个otherCtrl.js</li>\n<li>在index启动页面中添加该文件</li>\n<li>注入$filter服务</li>\n<li>设置一些用于展示的初始值</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">app.controller(<span class=\"string\">'OtherCtrl'</span>, [<span class=\"string\">'$scope'</span>, <span class=\"string\">'$filter'</span>,  <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">$scope, $filter</span>) </span>&#123;</div><div class=\"line\">  $scope.string = <span class=\"string\">'This is a long long long long long long long long long long very long string.'</span>;</div><div class=\"line\">  $scope.date = <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>();</div><div class=\"line\">  $scope.number = <span class=\"number\">1263714072</span>;</div><div class=\"line\">  $scope.number_with_currency = $filter(<span class=\"string\">'currency'</span>)($scope.number, <span class=\"string\">'￥'</span>);</div><div class=\"line\">&#125;]);</div></pre></td></tr></table></figure>\n<h3 id=\"最终效果\"><a href=\"#最终效果\" class=\"headerlink\" title=\"最终效果\"></a>最终效果</h3><p>如图：<br><img src=\"http://o905ne85q.bkt.clouddn.com/511E.tmp.png\" alt=\"image\"></p>\n<h2 id=\"结束语\"><a href=\"#结束语\" class=\"headerlink\" title=\"结束语\"></a>结束语</h2><hr>\n<p>使用filter服务可以很方便转换各种的数据格式哦，而且也方便统一管理呢。<br><a href=\"https://github.com/godbasin/godbasin.github.io/tree/blog-codes/angular-notes/8-create-filter\" target=\"_blank\" rel=\"external\">此处查看项目代码（仅包含app部分）</a><br><a href=\"http://o9grhhyar.bkt.clouddn.com/8-create-filter/index.html#/other\" target=\"_blank\" rel=\"external\">此处查看页面效果</a></p>\n","excerpt":"<p>最近的一个项目使用AngularJS(v1.2.6)作为前端的框架，《Angular使用笔记》系列用于记录过程中的一些使用和解决方法。<br>本文记录使用filter服务进行格式转换的过程。<br>","more":"</p>\n<h2 id=\"AngularJS-Filter\"><a href=\"#AngularJS-Filter\" class=\"headerlink\" title=\"AngularJS Filter\"></a>AngularJS Filter</h2><hr>\n<p>AngularJS 过滤器可用于转换数据。</p>\n<h3 id=\"ng内置过滤器\"><a href=\"#ng内置过滤器\" class=\"headerlink\" title=\"ng内置过滤器\"></a>ng内置过滤器</h3><ul>\n<li>currency： 格式化数字为货币格式</li>\n<li>filter： 从数组项中选择一个子集</li>\n<li>lowercase： 格式化字符串为小写</li>\n<li>orderBy： 根据某个表达式排列数组</li>\n<li>uppercase： 格式化字符串为大写</li>\n<li>date: 日期格式化</li>\n<li>json: 格式化json对象</li>\n<li>limitTo: 限制数组长度或字符串长度</li>\n<li>number: 格式化数字（如千分位）</li>\n</ul>\n<h3 id=\"在模板中使用filter\"><a href=\"#在模板中使用filter\" class=\"headerlink\" title=\"在模板中使用filter\"></a>在模板中使用filter</h3><ul>\n<li>过滤器可以通过一个管道字符（|）和一个过滤器添加到表达式中</li>\n</ul>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;&#123; expression | filter &#125;&#125;</div></pre></td></tr></table></figure>\n<ul>\n<li>可以多个filter连用，上一个filter的输出将作为下一个filter的输入</li>\n</ul>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;&#123; expression | filter1 | filter2 | ... &#125;&#125;</div></pre></td></tr></table></figure>\n<ul>\n<li>filter可以接收参数，参数用 : 进行分割</li>\n</ul>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;&#123; expression | filter:argument1:argument2:... &#125;&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"依赖注入使用filter\"><a href=\"#依赖注入使用filter\" class=\"headerlink\" title=\"依赖注入使用filter\"></a>依赖注入使用filter</h3><ul>\n<li>需使用依赖注入方法将$filter注入到该controller中</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">var new_value = $filter(&apos;filtername&apos;)(old_value);</div></pre></td></tr></table></figure>\n<h3 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h3><p><a href=\"http://www.cnblogs.com/wushangjue/p/4516107.html?utm_source=tuicool&amp;utm_medium=referral\">《AngularJS的Filter用法详解》</a></p>\n<h2 id=\"自定义过滤器\"><a href=\"#自定义过滤器\" class=\"headerlink\" title=\"自定义过滤器\"></a>自定义过滤器</h2><hr>\n<ul>\n<li>使用module的filter方法，返回一个函数</li>\n<li>该函数接收输入值，并返回处理后的结果</li>\n</ul>\n<p>这里我们自定义一个日期格式化的过滤器，可传入type参数进行设置格式(默认为xxxx.xx.xx，传入cn为中文日期xxxx年xx月xx日)。</p>\n<h3 id=\"格式简介\"><a href=\"#格式简介\" class=\"headerlink\" title=\"格式简介\"></a>格式简介</h3><ul>\n<li>xxxx.xx.xx格式<blockquote>\n<p>该格式需要对月和日进行补全，即小于10表示为0x</p>\n</blockquote>\n</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">var numStd = function(num) &#123;</div><div class=\"line\">  if (num === undefined) return; //若无传入值，则返回</div><div class=\"line\">  var _val = parseInt(num), //数字化值，去除多余0</div><div class=\"line\">    _num;</div><div class=\"line\">  //判断小于10，则在前方添加0</div><div class=\"line\">  _num = (_val &lt; 10) ? (&apos;0&apos; + _val) : (&apos;&apos; + _val);</div><div class=\"line\">  return _num; //返回新值</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<ul>\n<li>xxxx年xx月xx日<blockquote>\n<p>该格式需要对月和日数字化，即小于10表示为x</p>\n</blockquote>\n</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">var numUnstd = function(num) &#123;</div><div class=\"line\">  if (num === undefined) return; //若无传入值，则返回</div><div class=\"line\">  var _num = parseInt(num); //数字化值，去除多余0</div><div class=\"line\">  return _num; //返回新值</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<h3 id=\"设置过滤器\"><a href=\"#设置过滤器\" class=\"headerlink\" title=\"设置过滤器\"></a>设置过滤器</h3><ul>\n<li>首先需要对传入值进行判断，若为undefined则返回</li>\n<li>使用正则判断当前值的格式，将其拆分取出年月日</li>\n<li>根据传入的type参数值，格式化为新的值，并返回</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div></pre></td><td class=\"code\"><pre><div class=\"line\">.filter(<span class=\"string\">'myDate'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">  <span class=\"comment\">/**此处略去上方提到的数字格式化***/</span></div><div class=\"line\">  <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">str, type</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (_str === <span class=\"literal\">undefined</span>) <span class=\"keyword\">return</span>; <span class=\"comment\">//若无传入值，则返回</span></div><div class=\"line\">    <span class=\"keyword\">var</span> _str = str + <span class=\"string\">''</span>; <span class=\"comment\">//将该值转换为字符串格式</span></div><div class=\"line\">    <span class=\"comment\">//正则判断当前日期格式</span></div><div class=\"line\">    <span class=\"comment\">//是否为xxxx-xx-xx</span></div><div class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"regexp\">/\\d&#123;4&#125;-\\d&#123;1,2&#125;-\\d&#123;1,2&#125;/</span>.test(_str)) &#123;</div><div class=\"line\">      <span class=\"keyword\">var</span> datearr = _str.split(<span class=\"string\">'-'</span>); <span class=\"comment\">//取出年月日</span></div><div class=\"line\">      <span class=\"comment\">//若type为cn，则转换成xxxx年xx月xx日，否则为xxxx.xx.xx</span></div><div class=\"line\">      <span class=\"keyword\">if</span> (type &amp;&amp; type.toLowerCase() == <span class=\"string\">'cn'</span>) &#123;</div><div class=\"line\">        _str = numUnstd(datearr[<span class=\"number\">0</span>]) + <span class=\"string\">'年'</span> + numUnstd(datearr[<span class=\"number\">1</span>]) + <span class=\"string\">'月'</span> + numUnstd(datearr[<span class=\"number\">2</span>]) + <span class=\"string\">'日'</span>;</div><div class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">        _str = numStd(datearr[<span class=\"number\">0</span>]) + <span class=\"string\">'.'</span> + numStd(datearr[<span class=\"number\">1</span>]) + <span class=\"string\">'.'</span> + numStd(datearr[<span class=\"number\">2</span>]);</div><div class=\"line\">      &#125;</div><div class=\"line\">    <span class=\"comment\">//是否为xxxx.xx.xx</span></div><div class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (<span class=\"regexp\">/\\d&#123;4&#125;\\.\\d&#123;1,2&#125;\\.\\d&#123;1,2&#125;/</span>.test(_str)) &#123;</div><div class=\"line\">      <span class=\"keyword\">var</span> datearr = _str.split(<span class=\"string\">'.'</span>); <span class=\"comment\">//取出年月日</span></div><div class=\"line\">      <span class=\"comment\">//若type为cn，则转换成xxxx年xx月xx日，否则为xxxx.xx.xx</span></div><div class=\"line\">      <span class=\"keyword\">if</span> (type &amp;&amp; type.toLowerCase() == <span class=\"string\">'cn'</span>) &#123;</div><div class=\"line\">        _str = numUnstd(datearr[<span class=\"number\">0</span>]) + <span class=\"string\">'年'</span> + numUnstd(datearr[<span class=\"number\">1</span>]) + <span class=\"string\">'月'</span> + numUnstd(datearr[<span class=\"number\">2</span>]) + <span class=\"string\">'日'</span>;</div><div class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">        _str = numStd(datearr[<span class=\"number\">0</span>]) + <span class=\"string\">'.'</span> + numStd(datearr[<span class=\"number\">1</span>]) + <span class=\"string\">'.'</span> + numStd(datearr[<span class=\"number\">2</span>]);</div><div class=\"line\">      &#125;</div><div class=\"line\">    <span class=\"comment\">//是否为xxxx年xx月xx日</span></div><div class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> ((_str.indexOf(<span class=\"string\">'年'</span>) &gt; <span class=\"number\">-1</span>) &amp;&amp; (_str.indexOf(<span class=\"string\">'月'</span>) &gt; <span class=\"number\">-1</span>) &amp;&amp; (_str.indexOf(<span class=\"string\">'日'</span>) &gt; <span class=\"number\">-1</span>)) &#123;</div><div class=\"line\">       <span class=\"comment\">//取出年月日</span></div><div class=\"line\">      <span class=\"keyword\">var</span> datearr = _str.split(<span class=\"string\">'年'</span>),</div><div class=\"line\">        year = datearr[<span class=\"number\">0</span>],</div><div class=\"line\">        month = datearr[<span class=\"number\">1</span>].split(<span class=\"string\">'月'</span>)[<span class=\"number\">0</span>],</div><div class=\"line\">        day = datearr[<span class=\"number\">1</span>].split(<span class=\"string\">'月'</span>)[<span class=\"number\">1</span>].replace(<span class=\"string\">'日'</span>, <span class=\"string\">''</span>);</div><div class=\"line\">      <span class=\"comment\">//若type为cn，则转换成xxxx年xx月xx日，否则为xxxx.xx.xx</span></div><div class=\"line\">      <span class=\"keyword\">if</span> (type &amp;&amp; type.toLowerCase() == <span class=\"string\">'cn'</span>) &#123;</div><div class=\"line\">        _str = numUnstd(year) + <span class=\"string\">'年'</span> + numUnstd(month) + <span class=\"string\">'月'</span> + numUnstd(day) + <span class=\"string\">'日'</span>;</div><div class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">        _str = numStd(year) + <span class=\"string\">'.'</span> + numStd(month) + <span class=\"string\">'.'</span> + numStd(day);</div><div class=\"line\">      &#125;\t</div><div class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">      <span class=\"keyword\">return</span> str; <span class=\"comment\">//以上均不符合，返回原值</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">return</span> _str; <span class=\"comment\">//返回新值</span></div><div class=\"line\">  &#125;;</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<h2 id=\"在other页面中使用\"><a href=\"#在other页面中使用\" class=\"headerlink\" title=\"在other页面中使用\"></a>在other页面中使用</h2><hr>\n<h3 id=\"添加filter-js\"><a href=\"#添加filter-js\" class=\"headerlink\" title=\"添加filter.js\"></a>添加filter.js</h3><ul>\n<li>在scripts文件夹新建filter文件夹</li>\n<li>在filter文件夹添加filter.js，并添加上述内容</li>\n</ul>\n<h3 id=\"添加other页面\"><a href=\"#添加other页面\" class=\"headerlink\" title=\"添加other页面\"></a>添加other页面</h3><ul>\n<li>在views文件夹内添加一个other.html</li>\n<li>在other.html页面内加入头部指令</li>\n</ul>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">header</span> <span class=\"attr\">app-header</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">header</span>&gt;</span></div></pre></td></tr></table></figure>\n<ul>\n<li>在app.js文件中添加路由</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">.when(<span class=\"string\">'/other'</span>, &#123;</div><div class=\"line\">  <span class=\"attr\">templateUrl</span>: <span class=\"string\">'views/other.html'</span>, <span class=\"comment\">//other的html页面</span></div><div class=\"line\">  controller: <span class=\"string\">'OtherCtrl'</span> <span class=\"comment\">//other的控制器</span></div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<ul>\n<li>添加一些展示过滤器的信息</li>\n</ul>\n<h3 id=\"添加控制器\"><a href=\"#添加控制器\" class=\"headerlink\" title=\"添加控制器\"></a>添加控制器</h3><ul>\n<li>在controller文件夹内添加一个otherCtrl.js</li>\n<li>在index启动页面中添加该文件</li>\n<li>注入$filter服务</li>\n<li>设置一些用于展示的初始值</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">app.controller(<span class=\"string\">'OtherCtrl'</span>, [<span class=\"string\">'$scope'</span>, <span class=\"string\">'$filter'</span>,  <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">$scope, $filter</span>) </span>&#123;</div><div class=\"line\">  $scope.string = <span class=\"string\">'This is a long long long long long long long long long long very long string.'</span>;</div><div class=\"line\">  $scope.date = <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>();</div><div class=\"line\">  $scope.number = <span class=\"number\">1263714072</span>;</div><div class=\"line\">  $scope.number_with_currency = $filter(<span class=\"string\">'currency'</span>)($scope.number, <span class=\"string\">'￥'</span>);</div><div class=\"line\">&#125;]);</div></pre></td></tr></table></figure>\n<h3 id=\"最终效果\"><a href=\"#最终效果\" class=\"headerlink\" title=\"最终效果\"></a>最终效果</h3><p>如图：<br><img src=\"http://o905ne85q.bkt.clouddn.com/511E.tmp.png\" alt=\"image\"></p>\n<h2 id=\"结束语\"><a href=\"#结束语\" class=\"headerlink\" title=\"结束语\"></a>结束语</h2><hr>\n<p>使用filter服务可以很方便转换各种的数据格式哦，而且也方便统一管理呢。<br><a href=\"https://github.com/godbasin/godbasin.github.io/tree/blog-codes/angular-notes/8-create-filter\">此处查看项目代码（仅包含app部分）</a><br><a href=\"http://o9grhhyar.bkt.clouddn.com/8-create-filter/index.html#/other\">此处查看页面效果</a></p>"},{"title":"Angular使用笔记7--使用File API编写预览图片的指令","date":"2016-07-22T13:53:23.000Z","_content":"最近的一个项目使用AngularJS(v1.2.6)作为前端的框架，《Angular使用笔记》系列用于记录过程中的一些使用和解决方法。\n本文记录使用File API编写预览图片的指令的过程。\n<!--more-->\n## File API\n-----\n上一节我们已经稍微介绍了一下。\n### 有关File API\n- File接口提供了文件的信息，以及文件内容的存取方法\n- 对象可以用来获取某个文件的信息,还可以用来读取这个文件的内容\n- 通常情况下,File对象是来自用户在一个`<input>`元素上选择文件后返回的FileList对象,也可以是来自由拖放操作生成的 DataTransfer对象\n\n### 检查File API兼容性\n- window.File&&window.FileReader&&window.FileList&&window.Blob\n\n### 参考\n- [《HTML 5中的文件处理之FileAPI》](http://bulaoge.net/topic.blg?dmn=g3g4&tid=2344378#Content)\n- 以下内容主要来自该文章\n\n### FileList接口\n可以用来代表一组文件的JS对象，比如用户通过`input[type=\"file\"]`元素选中的本地文件列表\n``` javascript\n#FileList[index] // 得到第index个文件\n```\n\n### Blob接口\n用来代表一段二进制数据，并且允许我们通过JS对其数据以字节为单位进行“切割”\n``` javascript\n#Blob.size // 只读特性，数据的字节数  \n#Blob.slice(start, length) // 将当前文件切割并将结果返回 \n```\n\n### File接口\n用来代步一个文件，是从Blob接口继承而来的，并在此基础上增加了诸如文件名、MIME类型之类的特性\n``` javascript\n#File.size // 继承自Blob，意义同上  \n#File.slice(start, length) // 继承自Blob，意义同上  \n#File.name // 只读属性，文件名  \n#File.type // 只读属性，文件的MIME类型  \n#File.urn // 只读属性，代表该文件的URN，几乎用不到，暂且无视 \n```\n\n### FileReader\n提供读取文件的方法和事件，大多数情况下我们主要使用FileReader。\n- FileReader方法\n\n``` javascript\n#FileReader.readAsBinaryString(blob/file) // 以二进制格式读取文件内容  \n#FileReader.readAsText(file, [encoding]) // 以文本(及字符串)格式读取文件内容，并且可以强制选择文件编码  \n#FileReader.readAsDataURL(file) // 以DataURL格式读取文件内容  \n#FileReader.abort() // 终止读取操作 \n```\n\n- FileReader事件\n\n``` javascript\n#FileReader.onloadstart // 读取操作开始时触发  \n#FileReader.onload // 读取操作成功时触发  \n#FileReader.onloadend // 读取操作完成时触发(不论成功还是失败)  \n#FileReader.onprogress // 读取操作过程中触发  \n#FileReader.onabort // 读取操作被中断时触发  \n#FileReader.onerror // 读取操作失败时触发 \n```\n\n- FileReader属性\n\n``` javascript\n#FileReader.result // 读取的结果(二进制、文本或DataURL格式)  \n#FileReader.readyState // 读取操作的状态(EMPTY、LOADING、DONE)\n```\n\n## 编写预览图片的指令\n-----\n我们知道，在AngularJS中不推荐在控制器中添加DOM操作，所以我们将要把DOM封装到指令里面。\n在directives文件夹里添加otherDir.js文件，并在index启动页面中引入。\n\n### 添加模板\n模板很简单，也就是一个按钮。\n- 按钮的字可以自定义，这里使用了text变量\n- 该按钮里面需要将file input隐藏，故使用了样式input{display: none;}\n- 该按钮绑定了click事件，来触发选择图片的动作\n\n``` javascript\ntemplate: '<div class=\"file-input\" ng-click=\"click()\">' +\n\t'<a class=\"btn btn-default\">{{ text }}</a>' +\n\t'</div>',\n```\n\n### 设置作用域\n指令设置单独作用域，传入两个参数：\n- text: 使用@进行单向绑定，设置按钮显示的值\n- loadphoto： 使用=进行双向绑定，传入函数用于获取返回的图片url\n\n``` javascript\nscope: {\n\tloadphoto: \"=loadphoto\",\n\ttext: \"@text\",\n},\n```\n有关作用域可以参照[《Angular使用笔记5--作用域简单分析以及制作index页面》](https://godbasin.github.io/2016/07/16/angular-note-5-fullfill-index/)\n\n### 设置link函数\nlink函数里面主要为绑定click事件的处理。\n主要逻辑：\n- 从该指令根节点元素element中查找file input\n- 如果不存在则创建新的file input，如果已经存在则先移除再创建（使得可后续触发点击和change事件）\n- 给input绑定change事件，选中图片之后触发加载FileReader读取图片地址\n- 通过函数loadphoto返回图片地址\n- 设置好上述事件之后，即刻触发点击\n\n``` javascript\nlink: function(scope, element, attrs) {\n\tscope.click = function() {\n\t\t//从该指令根节点元素element中查找input\n\t\tvar $input = element[0].getElementsByTagName(\"input\");\n\t\t//如果已经存在则先移除input\n\t\tif ($input.length) {\n\t\t\telement[0].removeChild($input[0]);\n\t\t}\n\t\t//创建新的file input\n\t\t$input = document.createElement(\"input\");\n\t\t$input.setAttribute(\"type\", \"file\");\n\t\t$input.setAttribute(\"name\", \"file\");\n\t\t$input.setAttribute(\"accept\", \"image/*\");\n\t\t//将input添加进该指令根节点元素element中\n\t\telement[0].appendChild($input);\n\t\t//绑定click事件，取消事件的传播\n\t\t$input.addEventListener(\"click\", function() {\n\t\t\tevent.stopPropagation();\n\t\t});\n\t\t//绑定change事件，分析获取图片url\n\t\t$input.addEventListener(\"change\", function(e) {\n\t\t\tvar fReader = new FileReader(),\n\t\t\t\tfile = e.target.files[0];\n\t\t\tfReader.readAsDataURL(file); //获取图片url\n\t\t\tfReader.onload = function(e) {\n\t\t\t\tvar url = e.target.result;\n\t\t\t\tscope.loadphoto(url); //返回图片url\n\t\t\t};\n\t\t}, false);\n\t\t//即刻触发点击\n\t\t$timeout(function() {\n\t\t\t$input.click();\n\t\t});\n\n\t};\n},\n```\n\n## 使用预览图片的指令\n-----\n### 在index页面中添加指令\n- 在该页面设置头像对应模块添加该指令\n- 传入text参数以及loadphoto函数\n- 添加img用于展示图片，该img绑定ng-src，参数为avatar\n\n``` html\n<a file-input text=\"上传头像\" loadphoto=\"loadphoto\"></a>\n<img ng-src=\"{{ avatar }}\"  />\n```\n\n### 在IndexCtrl控制器中添加loadphoto函数逻辑\n``` javascript\n$scope.loadphoto = function(url){\n\t$scope.avatar = url; //将avatar变量设置为url\n}\n```\n\n### 最终效果\n如图：\n![image](http://o905ne85q.bkt.clouddn.com/DC13.tmp.png)\n\n## 结束语\n-----\n用file API实现图片预览已经成为一种流行方式了，可能如今对兼容性要求也没有很高的，当然对自己要求高的小伙伴们可以把兼容也做了，哈哈。\n[此处查看项目代码（仅包含app部分）](https://github.com/godbasin/godbasin.github.io/tree/blog-codes/angular-notes/7-load-image)\n[此处查看页面效果](http://o9grhhyar.bkt.clouddn.com/7-load-image/index.html#/index)","source":"_posts/angular-note-7-load-image.md","raw":"---\ntitle: Angular使用笔记7--使用File API编写预览图片的指令\ndate: 2016-07-22 21:53:23\ncategories: angular混搭\ntags: 笔记\n---\n最近的一个项目使用AngularJS(v1.2.6)作为前端的框架，《Angular使用笔记》系列用于记录过程中的一些使用和解决方法。\n本文记录使用File API编写预览图片的指令的过程。\n<!--more-->\n## File API\n-----\n上一节我们已经稍微介绍了一下。\n### 有关File API\n- File接口提供了文件的信息，以及文件内容的存取方法\n- 对象可以用来获取某个文件的信息,还可以用来读取这个文件的内容\n- 通常情况下,File对象是来自用户在一个`<input>`元素上选择文件后返回的FileList对象,也可以是来自由拖放操作生成的 DataTransfer对象\n\n### 检查File API兼容性\n- window.File&&window.FileReader&&window.FileList&&window.Blob\n\n### 参考\n- [《HTML 5中的文件处理之FileAPI》](http://bulaoge.net/topic.blg?dmn=g3g4&tid=2344378#Content)\n- 以下内容主要来自该文章\n\n### FileList接口\n可以用来代表一组文件的JS对象，比如用户通过`input[type=\"file\"]`元素选中的本地文件列表\n``` javascript\n#FileList[index] // 得到第index个文件\n```\n\n### Blob接口\n用来代表一段二进制数据，并且允许我们通过JS对其数据以字节为单位进行“切割”\n``` javascript\n#Blob.size // 只读特性，数据的字节数  \n#Blob.slice(start, length) // 将当前文件切割并将结果返回 \n```\n\n### File接口\n用来代步一个文件，是从Blob接口继承而来的，并在此基础上增加了诸如文件名、MIME类型之类的特性\n``` javascript\n#File.size // 继承自Blob，意义同上  \n#File.slice(start, length) // 继承自Blob，意义同上  \n#File.name // 只读属性，文件名  \n#File.type // 只读属性，文件的MIME类型  \n#File.urn // 只读属性，代表该文件的URN，几乎用不到，暂且无视 \n```\n\n### FileReader\n提供读取文件的方法和事件，大多数情况下我们主要使用FileReader。\n- FileReader方法\n\n``` javascript\n#FileReader.readAsBinaryString(blob/file) // 以二进制格式读取文件内容  \n#FileReader.readAsText(file, [encoding]) // 以文本(及字符串)格式读取文件内容，并且可以强制选择文件编码  \n#FileReader.readAsDataURL(file) // 以DataURL格式读取文件内容  \n#FileReader.abort() // 终止读取操作 \n```\n\n- FileReader事件\n\n``` javascript\n#FileReader.onloadstart // 读取操作开始时触发  \n#FileReader.onload // 读取操作成功时触发  \n#FileReader.onloadend // 读取操作完成时触发(不论成功还是失败)  \n#FileReader.onprogress // 读取操作过程中触发  \n#FileReader.onabort // 读取操作被中断时触发  \n#FileReader.onerror // 读取操作失败时触发 \n```\n\n- FileReader属性\n\n``` javascript\n#FileReader.result // 读取的结果(二进制、文本或DataURL格式)  \n#FileReader.readyState // 读取操作的状态(EMPTY、LOADING、DONE)\n```\n\n## 编写预览图片的指令\n-----\n我们知道，在AngularJS中不推荐在控制器中添加DOM操作，所以我们将要把DOM封装到指令里面。\n在directives文件夹里添加otherDir.js文件，并在index启动页面中引入。\n\n### 添加模板\n模板很简单，也就是一个按钮。\n- 按钮的字可以自定义，这里使用了text变量\n- 该按钮里面需要将file input隐藏，故使用了样式input{display: none;}\n- 该按钮绑定了click事件，来触发选择图片的动作\n\n``` javascript\ntemplate: '<div class=\"file-input\" ng-click=\"click()\">' +\n\t'<a class=\"btn btn-default\">{{ text }}</a>' +\n\t'</div>',\n```\n\n### 设置作用域\n指令设置单独作用域，传入两个参数：\n- text: 使用@进行单向绑定，设置按钮显示的值\n- loadphoto： 使用=进行双向绑定，传入函数用于获取返回的图片url\n\n``` javascript\nscope: {\n\tloadphoto: \"=loadphoto\",\n\ttext: \"@text\",\n},\n```\n有关作用域可以参照[《Angular使用笔记5--作用域简单分析以及制作index页面》](https://godbasin.github.io/2016/07/16/angular-note-5-fullfill-index/)\n\n### 设置link函数\nlink函数里面主要为绑定click事件的处理。\n主要逻辑：\n- 从该指令根节点元素element中查找file input\n- 如果不存在则创建新的file input，如果已经存在则先移除再创建（使得可后续触发点击和change事件）\n- 给input绑定change事件，选中图片之后触发加载FileReader读取图片地址\n- 通过函数loadphoto返回图片地址\n- 设置好上述事件之后，即刻触发点击\n\n``` javascript\nlink: function(scope, element, attrs) {\n\tscope.click = function() {\n\t\t//从该指令根节点元素element中查找input\n\t\tvar $input = element[0].getElementsByTagName(\"input\");\n\t\t//如果已经存在则先移除input\n\t\tif ($input.length) {\n\t\t\telement[0].removeChild($input[0]);\n\t\t}\n\t\t//创建新的file input\n\t\t$input = document.createElement(\"input\");\n\t\t$input.setAttribute(\"type\", \"file\");\n\t\t$input.setAttribute(\"name\", \"file\");\n\t\t$input.setAttribute(\"accept\", \"image/*\");\n\t\t//将input添加进该指令根节点元素element中\n\t\telement[0].appendChild($input);\n\t\t//绑定click事件，取消事件的传播\n\t\t$input.addEventListener(\"click\", function() {\n\t\t\tevent.stopPropagation();\n\t\t});\n\t\t//绑定change事件，分析获取图片url\n\t\t$input.addEventListener(\"change\", function(e) {\n\t\t\tvar fReader = new FileReader(),\n\t\t\t\tfile = e.target.files[0];\n\t\t\tfReader.readAsDataURL(file); //获取图片url\n\t\t\tfReader.onload = function(e) {\n\t\t\t\tvar url = e.target.result;\n\t\t\t\tscope.loadphoto(url); //返回图片url\n\t\t\t};\n\t\t}, false);\n\t\t//即刻触发点击\n\t\t$timeout(function() {\n\t\t\t$input.click();\n\t\t});\n\n\t};\n},\n```\n\n## 使用预览图片的指令\n-----\n### 在index页面中添加指令\n- 在该页面设置头像对应模块添加该指令\n- 传入text参数以及loadphoto函数\n- 添加img用于展示图片，该img绑定ng-src，参数为avatar\n\n``` html\n<a file-input text=\"上传头像\" loadphoto=\"loadphoto\"></a>\n<img ng-src=\"{{ avatar }}\"  />\n```\n\n### 在IndexCtrl控制器中添加loadphoto函数逻辑\n``` javascript\n$scope.loadphoto = function(url){\n\t$scope.avatar = url; //将avatar变量设置为url\n}\n```\n\n### 最终效果\n如图：\n![image](http://o905ne85q.bkt.clouddn.com/DC13.tmp.png)\n\n## 结束语\n-----\n用file API实现图片预览已经成为一种流行方式了，可能如今对兼容性要求也没有很高的，当然对自己要求高的小伙伴们可以把兼容也做了，哈哈。\n[此处查看项目代码（仅包含app部分）](https://github.com/godbasin/godbasin.github.io/tree/blog-codes/angular-notes/7-load-image)\n[此处查看页面效果](http://o9grhhyar.bkt.clouddn.com/7-load-image/index.html#/index)","slug":"angular-note-7-load-image","published":1,"updated":"2016-08-20T10:54:21.066Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cix45huf20015xotuafpt11hd","content":"<p>最近的一个项目使用AngularJS(v1.2.6)作为前端的框架，《Angular使用笔记》系列用于记录过程中的一些使用和解决方法。<br>本文记录使用File API编写预览图片的指令的过程。<br><a id=\"more\"></a></p>\n<h2 id=\"File-API\"><a href=\"#File-API\" class=\"headerlink\" title=\"File API\"></a>File API</h2><hr>\n<p>上一节我们已经稍微介绍了一下。</p>\n<h3 id=\"有关File-API\"><a href=\"#有关File-API\" class=\"headerlink\" title=\"有关File API\"></a>有关File API</h3><ul>\n<li>File接口提供了文件的信息，以及文件内容的存取方法</li>\n<li>对象可以用来获取某个文件的信息,还可以用来读取这个文件的内容</li>\n<li>通常情况下,File对象是来自用户在一个<code>&lt;input&gt;</code>元素上选择文件后返回的FileList对象,也可以是来自由拖放操作生成的 DataTransfer对象</li>\n</ul>\n<h3 id=\"检查File-API兼容性\"><a href=\"#检查File-API兼容性\" class=\"headerlink\" title=\"检查File API兼容性\"></a>检查File API兼容性</h3><ul>\n<li>window.File&amp;&amp;window.FileReader&amp;&amp;window.FileList&amp;&amp;window.Blob</li>\n</ul>\n<h3 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h3><ul>\n<li><a href=\"http://bulaoge.net/topic.blg?dmn=g3g4&amp;tid=2344378#Content\" target=\"_blank\" rel=\"external\">《HTML 5中的文件处理之FileAPI》</a></li>\n<li>以下内容主要来自该文章</li>\n</ul>\n<h3 id=\"FileList接口\"><a href=\"#FileList接口\" class=\"headerlink\" title=\"FileList接口\"></a>FileList接口</h3><p>可以用来代表一组文件的JS对象，比如用户通过<code>input[type=&quot;file&quot;]</code>元素选中的本地文件列表<br><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">#FileList[index] // 得到第index个文件</div></pre></td></tr></table></figure></p>\n<h3 id=\"Blob接口\"><a href=\"#Blob接口\" class=\"headerlink\" title=\"Blob接口\"></a>Blob接口</h3><p>用来代表一段二进制数据，并且允许我们通过JS对其数据以字节为单位进行“切割”<br><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">#Blob.size // 只读特性，数据的字节数  </div><div class=\"line\">#Blob.slice(start, length) // 将当前文件切割并将结果返回</div></pre></td></tr></table></figure></p>\n<h3 id=\"File接口\"><a href=\"#File接口\" class=\"headerlink\" title=\"File接口\"></a>File接口</h3><p>用来代步一个文件，是从Blob接口继承而来的，并在此基础上增加了诸如文件名、MIME类型之类的特性<br><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">#File.size // 继承自Blob，意义同上  </div><div class=\"line\">#File.slice(start, length) // 继承自Blob，意义同上  </div><div class=\"line\">#File.name // 只读属性，文件名  </div><div class=\"line\">#File.type // 只读属性，文件的MIME类型  </div><div class=\"line\">#File.urn // 只读属性，代表该文件的URN，几乎用不到，暂且无视</div></pre></td></tr></table></figure></p>\n<h3 id=\"FileReader\"><a href=\"#FileReader\" class=\"headerlink\" title=\"FileReader\"></a>FileReader</h3><p>提供读取文件的方法和事件，大多数情况下我们主要使用FileReader。</p>\n<ul>\n<li>FileReader方法</li>\n</ul>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">#FileReader.readAsBinaryString(blob/file) // 以二进制格式读取文件内容  </div><div class=\"line\">#FileReader.readAsText(file, [encoding]) // 以文本(及字符串)格式读取文件内容，并且可以强制选择文件编码  </div><div class=\"line\">#FileReader.readAsDataURL(file) // 以DataURL格式读取文件内容  </div><div class=\"line\">#FileReader.abort() // 终止读取操作</div></pre></td></tr></table></figure>\n<ul>\n<li>FileReader事件</li>\n</ul>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">#FileReader.onloadstart // 读取操作开始时触发  </div><div class=\"line\">#FileReader.onload // 读取操作成功时触发  </div><div class=\"line\">#FileReader.onloadend // 读取操作完成时触发(不论成功还是失败)  </div><div class=\"line\">#FileReader.onprogress // 读取操作过程中触发  </div><div class=\"line\">#FileReader.onabort // 读取操作被中断时触发  </div><div class=\"line\">#FileReader.onerror // 读取操作失败时触发</div></pre></td></tr></table></figure>\n<ul>\n<li>FileReader属性</li>\n</ul>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">#FileReader.result // 读取的结果(二进制、文本或DataURL格式)  </div><div class=\"line\">#FileReader.readyState // 读取操作的状态(EMPTY、LOADING、DONE)</div></pre></td></tr></table></figure>\n<h2 id=\"编写预览图片的指令\"><a href=\"#编写预览图片的指令\" class=\"headerlink\" title=\"编写预览图片的指令\"></a>编写预览图片的指令</h2><hr>\n<p>我们知道，在AngularJS中不推荐在控制器中添加DOM操作，所以我们将要把DOM封装到指令里面。<br>在directives文件夹里添加otherDir.js文件，并在index启动页面中引入。</p>\n<h3 id=\"添加模板\"><a href=\"#添加模板\" class=\"headerlink\" title=\"添加模板\"></a>添加模板</h3><p>模板很简单，也就是一个按钮。</p>\n<ul>\n<li>按钮的字可以自定义，这里使用了text变量</li>\n<li>该按钮里面需要将file input隐藏，故使用了样式input{display: none;}</li>\n<li>该按钮绑定了click事件，来触发选择图片的动作</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">template: <span class=\"string\">'&lt;div class=\"file-input\" ng-click=\"click()\"&gt;'</span> +</div><div class=\"line\">  <span class=\"string\">'&lt;a class=\"btn btn-default\"&gt;&#123;&#123; text &#125;&#125;&lt;/a&gt;'</span> +</div><div class=\"line\">  <span class=\"string\">'&lt;/div&gt;'</span>,</div></pre></td></tr></table></figure>\n<h3 id=\"设置作用域\"><a href=\"#设置作用域\" class=\"headerlink\" title=\"设置作用域\"></a>设置作用域</h3><p>指令设置单独作用域，传入两个参数：</p>\n<ul>\n<li>text: 使用@进行单向绑定，设置按钮显示的值</li>\n<li>loadphoto： 使用=进行双向绑定，传入函数用于获取返回的图片url</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">scope: &#123;</div><div class=\"line\">  <span class=\"attr\">loadphoto</span>: <span class=\"string\">\"=loadphoto\"</span>,</div><div class=\"line\">  <span class=\"attr\">text</span>: <span class=\"string\">\"@text\"</span>,</div><div class=\"line\">&#125;,</div></pre></td></tr></table></figure>\n<p>有关作用域可以参照<a href=\"https://godbasin.github.io/2016/07/16/angular-note-5-fullfill-index/\">《Angular使用笔记5–作用域简单分析以及制作index页面》</a></p>\n<h3 id=\"设置link函数\"><a href=\"#设置link函数\" class=\"headerlink\" title=\"设置link函数\"></a>设置link函数</h3><p>link函数里面主要为绑定click事件的处理。<br>主要逻辑：</p>\n<ul>\n<li>从该指令根节点元素element中查找file input</li>\n<li>如果不存在则创建新的file input，如果已经存在则先移除再创建（使得可后续触发点击和change事件）</li>\n<li>给input绑定change事件，选中图片之后触发加载FileReader读取图片地址</li>\n<li>通过函数loadphoto返回图片地址</li>\n<li>设置好上述事件之后，即刻触发点击</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div></pre></td><td class=\"code\"><pre><div class=\"line\">link: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">scope, element, attrs</span>) </span>&#123;</div><div class=\"line\">  scope.click = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"comment\">//从该指令根节点元素element中查找input</span></div><div class=\"line\">    <span class=\"keyword\">var</span> $input = element[<span class=\"number\">0</span>].getElementsByTagName(<span class=\"string\">\"input\"</span>);</div><div class=\"line\">    <span class=\"comment\">//如果已经存在则先移除input</span></div><div class=\"line\">    <span class=\"keyword\">if</span> ($input.length) &#123;</div><div class=\"line\">      element[<span class=\"number\">0</span>].removeChild($input[<span class=\"number\">0</span>]);</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"comment\">//创建新的file input</span></div><div class=\"line\">    $input = <span class=\"built_in\">document</span>.createElement(<span class=\"string\">\"input\"</span>);</div><div class=\"line\">    $input.setAttribute(<span class=\"string\">\"type\"</span>, <span class=\"string\">\"file\"</span>);</div><div class=\"line\">    $input.setAttribute(<span class=\"string\">\"name\"</span>, <span class=\"string\">\"file\"</span>);</div><div class=\"line\">    $input.setAttribute(<span class=\"string\">\"accept\"</span>, <span class=\"string\">\"image/*\"</span>);</div><div class=\"line\">    <span class=\"comment\">//将input添加进该指令根节点元素element中</span></div><div class=\"line\">    element[<span class=\"number\">0</span>].appendChild($input);</div><div class=\"line\">    <span class=\"comment\">//绑定click事件，取消事件的传播</span></div><div class=\"line\">    $input.addEventListener(<span class=\"string\">\"click\"</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">      event.stopPropagation();</div><div class=\"line\">    &#125;);</div><div class=\"line\">    <span class=\"comment\">//绑定change事件，分析获取图片url</span></div><div class=\"line\">    $input.addEventListener(<span class=\"string\">\"change\"</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">e</span>) </span>&#123;</div><div class=\"line\">      <span class=\"keyword\">var</span> fReader = <span class=\"keyword\">new</span> FileReader(),</div><div class=\"line\">        file = e.target.files[<span class=\"number\">0</span>];</div><div class=\"line\">      fReader.readAsDataURL(file); <span class=\"comment\">//获取图片url</span></div><div class=\"line\">      fReader.onload = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">e</span>) </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">var</span> url = e.target.result;</div><div class=\"line\">        scope.loadphoto(url); <span class=\"comment\">//返回图片url</span></div><div class=\"line\">      &#125;;</div><div class=\"line\">    &#125;, <span class=\"literal\">false</span>);</div><div class=\"line\">    <span class=\"comment\">//即刻触发点击</span></div><div class=\"line\">    $timeout(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">      $input.click();</div><div class=\"line\">    &#125;);</div><div class=\"line\"></div><div class=\"line\">  &#125;;</div><div class=\"line\">&#125;,</div></pre></td></tr></table></figure>\n<h2 id=\"使用预览图片的指令\"><a href=\"#使用预览图片的指令\" class=\"headerlink\" title=\"使用预览图片的指令\"></a>使用预览图片的指令</h2><hr>\n<h3 id=\"在index页面中添加指令\"><a href=\"#在index页面中添加指令\" class=\"headerlink\" title=\"在index页面中添加指令\"></a>在index页面中添加指令</h3><ul>\n<li>在该页面设置头像对应模块添加该指令</li>\n<li>传入text参数以及loadphoto函数</li>\n<li>添加img用于展示图片，该img绑定ng-src，参数为avatar</li>\n</ul>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">file-input</span> <span class=\"attr\">text</span>=<span class=\"string\">\"上传头像\"</span> <span class=\"attr\">loadphoto</span>=<span class=\"string\">\"loadphoto\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">ng-src</span>=<span class=\"string\">\"&#123;&#123; avatar &#125;&#125;\"</span>  /&gt;</span></div></pre></td></tr></table></figure>\n<h3 id=\"在IndexCtrl控制器中添加loadphoto函数逻辑\"><a href=\"#在IndexCtrl控制器中添加loadphoto函数逻辑\" class=\"headerlink\" title=\"在IndexCtrl控制器中添加loadphoto函数逻辑\"></a>在IndexCtrl控制器中添加loadphoto函数逻辑</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">$scope.loadphoto = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">url</span>)</span>&#123;</div><div class=\"line\">  $scope.avatar = url; <span class=\"comment\">//将avatar变量设置为url</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"最终效果\"><a href=\"#最终效果\" class=\"headerlink\" title=\"最终效果\"></a>最终效果</h3><p>如图：<br><img src=\"http://o905ne85q.bkt.clouddn.com/DC13.tmp.png\" alt=\"image\"></p>\n<h2 id=\"结束语\"><a href=\"#结束语\" class=\"headerlink\" title=\"结束语\"></a>结束语</h2><hr>\n<p>用file API实现图片预览已经成为一种流行方式了，可能如今对兼容性要求也没有很高的，当然对自己要求高的小伙伴们可以把兼容也做了，哈哈。<br><a href=\"https://github.com/godbasin/godbasin.github.io/tree/blog-codes/angular-notes/7-load-image\" target=\"_blank\" rel=\"external\">此处查看项目代码（仅包含app部分）</a><br><a href=\"http://o9grhhyar.bkt.clouddn.com/7-load-image/index.html#/index\" target=\"_blank\" rel=\"external\">此处查看页面效果</a></p>\n","excerpt":"<p>最近的一个项目使用AngularJS(v1.2.6)作为前端的框架，《Angular使用笔记》系列用于记录过程中的一些使用和解决方法。<br>本文记录使用File API编写预览图片的指令的过程。<br>","more":"</p>\n<h2 id=\"File-API\"><a href=\"#File-API\" class=\"headerlink\" title=\"File API\"></a>File API</h2><hr>\n<p>上一节我们已经稍微介绍了一下。</p>\n<h3 id=\"有关File-API\"><a href=\"#有关File-API\" class=\"headerlink\" title=\"有关File API\"></a>有关File API</h3><ul>\n<li>File接口提供了文件的信息，以及文件内容的存取方法</li>\n<li>对象可以用来获取某个文件的信息,还可以用来读取这个文件的内容</li>\n<li>通常情况下,File对象是来自用户在一个<code>&lt;input&gt;</code>元素上选择文件后返回的FileList对象,也可以是来自由拖放操作生成的 DataTransfer对象</li>\n</ul>\n<h3 id=\"检查File-API兼容性\"><a href=\"#检查File-API兼容性\" class=\"headerlink\" title=\"检查File API兼容性\"></a>检查File API兼容性</h3><ul>\n<li>window.File&amp;&amp;window.FileReader&amp;&amp;window.FileList&amp;&amp;window.Blob</li>\n</ul>\n<h3 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h3><ul>\n<li><a href=\"http://bulaoge.net/topic.blg?dmn=g3g4&amp;tid=2344378#Content\">《HTML 5中的文件处理之FileAPI》</a></li>\n<li>以下内容主要来自该文章</li>\n</ul>\n<h3 id=\"FileList接口\"><a href=\"#FileList接口\" class=\"headerlink\" title=\"FileList接口\"></a>FileList接口</h3><p>可以用来代表一组文件的JS对象，比如用户通过<code>input[type=&quot;file&quot;]</code>元素选中的本地文件列表<br><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">#FileList[index] // 得到第index个文件</div></pre></td></tr></table></figure></p>\n<h3 id=\"Blob接口\"><a href=\"#Blob接口\" class=\"headerlink\" title=\"Blob接口\"></a>Blob接口</h3><p>用来代表一段二进制数据，并且允许我们通过JS对其数据以字节为单位进行“切割”<br><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">#Blob.size // 只读特性，数据的字节数  </div><div class=\"line\">#Blob.slice(start, length) // 将当前文件切割并将结果返回</div></pre></td></tr></table></figure></p>\n<h3 id=\"File接口\"><a href=\"#File接口\" class=\"headerlink\" title=\"File接口\"></a>File接口</h3><p>用来代步一个文件，是从Blob接口继承而来的，并在此基础上增加了诸如文件名、MIME类型之类的特性<br><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">#File.size // 继承自Blob，意义同上  </div><div class=\"line\">#File.slice(start, length) // 继承自Blob，意义同上  </div><div class=\"line\">#File.name // 只读属性，文件名  </div><div class=\"line\">#File.type // 只读属性，文件的MIME类型  </div><div class=\"line\">#File.urn // 只读属性，代表该文件的URN，几乎用不到，暂且无视</div></pre></td></tr></table></figure></p>\n<h3 id=\"FileReader\"><a href=\"#FileReader\" class=\"headerlink\" title=\"FileReader\"></a>FileReader</h3><p>提供读取文件的方法和事件，大多数情况下我们主要使用FileReader。</p>\n<ul>\n<li>FileReader方法</li>\n</ul>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">#FileReader.readAsBinaryString(blob/file) // 以二进制格式读取文件内容  </div><div class=\"line\">#FileReader.readAsText(file, [encoding]) // 以文本(及字符串)格式读取文件内容，并且可以强制选择文件编码  </div><div class=\"line\">#FileReader.readAsDataURL(file) // 以DataURL格式读取文件内容  </div><div class=\"line\">#FileReader.abort() // 终止读取操作</div></pre></td></tr></table></figure>\n<ul>\n<li>FileReader事件</li>\n</ul>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">#FileReader.onloadstart // 读取操作开始时触发  </div><div class=\"line\">#FileReader.onload // 读取操作成功时触发  </div><div class=\"line\">#FileReader.onloadend // 读取操作完成时触发(不论成功还是失败)  </div><div class=\"line\">#FileReader.onprogress // 读取操作过程中触发  </div><div class=\"line\">#FileReader.onabort // 读取操作被中断时触发  </div><div class=\"line\">#FileReader.onerror // 读取操作失败时触发</div></pre></td></tr></table></figure>\n<ul>\n<li>FileReader属性</li>\n</ul>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">#FileReader.result // 读取的结果(二进制、文本或DataURL格式)  </div><div class=\"line\">#FileReader.readyState // 读取操作的状态(EMPTY、LOADING、DONE)</div></pre></td></tr></table></figure>\n<h2 id=\"编写预览图片的指令\"><a href=\"#编写预览图片的指令\" class=\"headerlink\" title=\"编写预览图片的指令\"></a>编写预览图片的指令</h2><hr>\n<p>我们知道，在AngularJS中不推荐在控制器中添加DOM操作，所以我们将要把DOM封装到指令里面。<br>在directives文件夹里添加otherDir.js文件，并在index启动页面中引入。</p>\n<h3 id=\"添加模板\"><a href=\"#添加模板\" class=\"headerlink\" title=\"添加模板\"></a>添加模板</h3><p>模板很简单，也就是一个按钮。</p>\n<ul>\n<li>按钮的字可以自定义，这里使用了text变量</li>\n<li>该按钮里面需要将file input隐藏，故使用了样式input{display: none;}</li>\n<li>该按钮绑定了click事件，来触发选择图片的动作</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">template: <span class=\"string\">'&lt;div class=\"file-input\" ng-click=\"click()\"&gt;'</span> +</div><div class=\"line\">  <span class=\"string\">'&lt;a class=\"btn btn-default\"&gt;&#123;&#123; text &#125;&#125;&lt;/a&gt;'</span> +</div><div class=\"line\">  <span class=\"string\">'&lt;/div&gt;'</span>,</div></pre></td></tr></table></figure>\n<h3 id=\"设置作用域\"><a href=\"#设置作用域\" class=\"headerlink\" title=\"设置作用域\"></a>设置作用域</h3><p>指令设置单独作用域，传入两个参数：</p>\n<ul>\n<li>text: 使用@进行单向绑定，设置按钮显示的值</li>\n<li>loadphoto： 使用=进行双向绑定，传入函数用于获取返回的图片url</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">scope: &#123;</div><div class=\"line\">  <span class=\"attr\">loadphoto</span>: <span class=\"string\">\"=loadphoto\"</span>,</div><div class=\"line\">  <span class=\"attr\">text</span>: <span class=\"string\">\"@text\"</span>,</div><div class=\"line\">&#125;,</div></pre></td></tr></table></figure>\n<p>有关作用域可以参照<a href=\"https://godbasin.github.io/2016/07/16/angular-note-5-fullfill-index/\">《Angular使用笔记5–作用域简单分析以及制作index页面》</a></p>\n<h3 id=\"设置link函数\"><a href=\"#设置link函数\" class=\"headerlink\" title=\"设置link函数\"></a>设置link函数</h3><p>link函数里面主要为绑定click事件的处理。<br>主要逻辑：</p>\n<ul>\n<li>从该指令根节点元素element中查找file input</li>\n<li>如果不存在则创建新的file input，如果已经存在则先移除再创建（使得可后续触发点击和change事件）</li>\n<li>给input绑定change事件，选中图片之后触发加载FileReader读取图片地址</li>\n<li>通过函数loadphoto返回图片地址</li>\n<li>设置好上述事件之后，即刻触发点击</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div></pre></td><td class=\"code\"><pre><div class=\"line\">link: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">scope, element, attrs</span>) </span>&#123;</div><div class=\"line\">  scope.click = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"comment\">//从该指令根节点元素element中查找input</span></div><div class=\"line\">    <span class=\"keyword\">var</span> $input = element[<span class=\"number\">0</span>].getElementsByTagName(<span class=\"string\">\"input\"</span>);</div><div class=\"line\">    <span class=\"comment\">//如果已经存在则先移除input</span></div><div class=\"line\">    <span class=\"keyword\">if</span> ($input.length) &#123;</div><div class=\"line\">      element[<span class=\"number\">0</span>].removeChild($input[<span class=\"number\">0</span>]);</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"comment\">//创建新的file input</span></div><div class=\"line\">    $input = <span class=\"built_in\">document</span>.createElement(<span class=\"string\">\"input\"</span>);</div><div class=\"line\">    $input.setAttribute(<span class=\"string\">\"type\"</span>, <span class=\"string\">\"file\"</span>);</div><div class=\"line\">    $input.setAttribute(<span class=\"string\">\"name\"</span>, <span class=\"string\">\"file\"</span>);</div><div class=\"line\">    $input.setAttribute(<span class=\"string\">\"accept\"</span>, <span class=\"string\">\"image/*\"</span>);</div><div class=\"line\">    <span class=\"comment\">//将input添加进该指令根节点元素element中</span></div><div class=\"line\">    element[<span class=\"number\">0</span>].appendChild($input);</div><div class=\"line\">    <span class=\"comment\">//绑定click事件，取消事件的传播</span></div><div class=\"line\">    $input.addEventListener(<span class=\"string\">\"click\"</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">      event.stopPropagation();</div><div class=\"line\">    &#125;);</div><div class=\"line\">    <span class=\"comment\">//绑定change事件，分析获取图片url</span></div><div class=\"line\">    $input.addEventListener(<span class=\"string\">\"change\"</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">e</span>) </span>&#123;</div><div class=\"line\">      <span class=\"keyword\">var</span> fReader = <span class=\"keyword\">new</span> FileReader(),</div><div class=\"line\">        file = e.target.files[<span class=\"number\">0</span>];</div><div class=\"line\">      fReader.readAsDataURL(file); <span class=\"comment\">//获取图片url</span></div><div class=\"line\">      fReader.onload = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">e</span>) </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">var</span> url = e.target.result;</div><div class=\"line\">        scope.loadphoto(url); <span class=\"comment\">//返回图片url</span></div><div class=\"line\">      &#125;;</div><div class=\"line\">    &#125;, <span class=\"literal\">false</span>);</div><div class=\"line\">    <span class=\"comment\">//即刻触发点击</span></div><div class=\"line\">    $timeout(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">      $input.click();</div><div class=\"line\">    &#125;);</div><div class=\"line\"></div><div class=\"line\">  &#125;;</div><div class=\"line\">&#125;,</div></pre></td></tr></table></figure>\n<h2 id=\"使用预览图片的指令\"><a href=\"#使用预览图片的指令\" class=\"headerlink\" title=\"使用预览图片的指令\"></a>使用预览图片的指令</h2><hr>\n<h3 id=\"在index页面中添加指令\"><a href=\"#在index页面中添加指令\" class=\"headerlink\" title=\"在index页面中添加指令\"></a>在index页面中添加指令</h3><ul>\n<li>在该页面设置头像对应模块添加该指令</li>\n<li>传入text参数以及loadphoto函数</li>\n<li>添加img用于展示图片，该img绑定ng-src，参数为avatar</li>\n</ul>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">file-input</span> <span class=\"attr\">text</span>=<span class=\"string\">\"上传头像\"</span> <span class=\"attr\">loadphoto</span>=<span class=\"string\">\"loadphoto\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">ng-src</span>=<span class=\"string\">\"&#123;&#123; avatar &#125;&#125;\"</span>  /&gt;</span></div></pre></td></tr></table></figure>\n<h3 id=\"在IndexCtrl控制器中添加loadphoto函数逻辑\"><a href=\"#在IndexCtrl控制器中添加loadphoto函数逻辑\" class=\"headerlink\" title=\"在IndexCtrl控制器中添加loadphoto函数逻辑\"></a>在IndexCtrl控制器中添加loadphoto函数逻辑</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">$scope.loadphoto = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">url</span>)</span>&#123;</div><div class=\"line\">  $scope.avatar = url; <span class=\"comment\">//将avatar变量设置为url</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"最终效果\"><a href=\"#最终效果\" class=\"headerlink\" title=\"最终效果\"></a>最终效果</h3><p>如图：<br><img src=\"http://o905ne85q.bkt.clouddn.com/DC13.tmp.png\" alt=\"image\"></p>\n<h2 id=\"结束语\"><a href=\"#结束语\" class=\"headerlink\" title=\"结束语\"></a>结束语</h2><hr>\n<p>用file API实现图片预览已经成为一种流行方式了，可能如今对兼容性要求也没有很高的，当然对自己要求高的小伙伴们可以把兼容也做了，哈哈。<br><a href=\"https://github.com/godbasin/godbasin.github.io/tree/blog-codes/angular-notes/7-load-image\">此处查看项目代码（仅包含app部分）</a><br><a href=\"http://o9grhhyar.bkt.clouddn.com/7-load-image/index.html#/index\">此处查看页面效果</a></p>"},{"title":"Angular使用笔记9-使用sessionStorage判断是否已登录","date":"2016-07-24T01:32:34.000Z","_content":"最近的一个项目使用AngularJS(v1.2.6)作为前端的框架，《Angular使用笔记》系列用于记录过程中的一些使用和解决方法。\n本文记录使用sessionStorage判断是否已登录并进行跳转的过程。\n<!--more-->\n\n前面篇章我们已经讲述过公用信息的获取和设置方法，具体可以查看[《Angular使用笔记3--公用信息的管理》](https://godbasin.github.io/2016/07/09/angular-note-3-common-info-manage/)。\n在这里我们使用sessionStorage来记录会话，如果没登录则自行跳转至登录页面。\n## sessionStorage\n-----\n### HTML5新特性: SessionStorage\n- sessionStorage用于本地存储一个会话（session）中的数据，这些数据只有在同一个会话中的页面才能访问并且当会话结束后数据也随之销毁\n- sessionStorage不是一种持久化的本地存储，仅仅是会话级别的存储\n- 可利用SessionStorage保存一些会话类公共信息\n\n### 使用sessionStorage\n- 检测兼容性：window.sessionStorage\n- 设置session项：sessionStorage.setItem(key, value)\n- 获取session项：sessionStorage.getItem(key)\n- 删除session项：sessionStorage.removeItem(key)\n- 清除所有session信息：sessionStorage.clear()\n- sessionStorage的项目数：sessionStorage.length\n\n### sessionStorage/localStorage/Cookie的异同\n-  sessionStorage数据的存储仅特定于某个会话中，也就是说数据只保持到浏览器关闭，当浏览器关闭后重新打开这个页面时，之前的存储已经被清除\n-  localStorage是一个持久化的存储，它并不局限于会话\n-  Cookie非常小，它的大小限制为4KB左右（sessionStorage和localStorage为5M左右），可设置失效时间，默认是关闭浏览器后失效\n\n### 依赖注入使用filter\n- 需使用依赖注入方法将$filter注入到该controller中\n\n``` javascrpit\nvar new_value = $filter('filtername')(old_value);\n```\n\n## 使用sessionStorage判断是否已登录\n-----\n### 登录提交设置sessionStorage\n登录的时候将账户信息添加进sessionStorage，这里为方便直接记录账户名。当然在实际使用中一般都是登录成功返回信息时进行添加，然后再进行跳转。\n- 在LoginCtrl控制器中跳转前加入以下代码：\n\n``` javascrpit\nsessionStorage.setItem('username', $scope.username);\n```\n\n### 在页面中添加判断\n除了login页面之外，其他页面都需要进行判断，方法可以有以下几种：\n- 在每个页面的控制器中添加判断\n- 在头部控制器中添加判断（除login页面之外都有头部指令）\n- 集成服务，在服务中进行判断，然后在控制器中注入服务并使用\n\n这里我们在头部控制器里加入判断\n``` javascrpit\n//判断是否已经登录，未登录则进行跳转\nif (!sessionStorage.getItem('username')) {\n\talert(\"请登录\");\n\tlocation.href = 'index.html#/';\n}\n```\n\n### 退出时注销登录信息\n我们之前在头部下拉菜单上添加了退出选项，现在我们需要在跳转前注销登录信息。\n- 绑定ng-click事件\n- 添加click选项，值为funxtion执行函数\n\n``` javascrpit\n$scope.usermenus = [{\n\ttext: '退出', //text用于储存该菜单显示名称\n\tclick: function() {\n\t\tsessionStorage.clear(); //清除登录信息\n\t\tlocation.href = 'index.html#/login'; //设定该菜单跳转路由\n\t}\n}];\n```\n\n## 结束语\n-----\n至此，我们大概完成了一个较完整的项目，当然实际中工程远大于本骚年所介绍的，遇到的问题也远比这些复杂。但没关系，困难都是一步步克服的，相信大家能很好地解决掉他们。\n[此处查看项目代码（仅包含app部分）](https://github.com/godbasin/godbasin.github.io/tree/blog-codes/angular-notes/8-create-filter)\n[此处查看页面效果](http://o9grhhyar.bkt.clouddn.com/9-session-commit/index.html#/index)","source":"_posts/angular-note-9-session-commit.md","raw":"---\ntitle: Angular使用笔记9-使用sessionStorage判断是否已登录\ndate: 2016-07-24 09:32:34\ncategories: angular混搭\ntags: 笔记\n---\n最近的一个项目使用AngularJS(v1.2.6)作为前端的框架，《Angular使用笔记》系列用于记录过程中的一些使用和解决方法。\n本文记录使用sessionStorage判断是否已登录并进行跳转的过程。\n<!--more-->\n\n前面篇章我们已经讲述过公用信息的获取和设置方法，具体可以查看[《Angular使用笔记3--公用信息的管理》](https://godbasin.github.io/2016/07/09/angular-note-3-common-info-manage/)。\n在这里我们使用sessionStorage来记录会话，如果没登录则自行跳转至登录页面。\n## sessionStorage\n-----\n### HTML5新特性: SessionStorage\n- sessionStorage用于本地存储一个会话（session）中的数据，这些数据只有在同一个会话中的页面才能访问并且当会话结束后数据也随之销毁\n- sessionStorage不是一种持久化的本地存储，仅仅是会话级别的存储\n- 可利用SessionStorage保存一些会话类公共信息\n\n### 使用sessionStorage\n- 检测兼容性：window.sessionStorage\n- 设置session项：sessionStorage.setItem(key, value)\n- 获取session项：sessionStorage.getItem(key)\n- 删除session项：sessionStorage.removeItem(key)\n- 清除所有session信息：sessionStorage.clear()\n- sessionStorage的项目数：sessionStorage.length\n\n### sessionStorage/localStorage/Cookie的异同\n-  sessionStorage数据的存储仅特定于某个会话中，也就是说数据只保持到浏览器关闭，当浏览器关闭后重新打开这个页面时，之前的存储已经被清除\n-  localStorage是一个持久化的存储，它并不局限于会话\n-  Cookie非常小，它的大小限制为4KB左右（sessionStorage和localStorage为5M左右），可设置失效时间，默认是关闭浏览器后失效\n\n### 依赖注入使用filter\n- 需使用依赖注入方法将$filter注入到该controller中\n\n``` javascrpit\nvar new_value = $filter('filtername')(old_value);\n```\n\n## 使用sessionStorage判断是否已登录\n-----\n### 登录提交设置sessionStorage\n登录的时候将账户信息添加进sessionStorage，这里为方便直接记录账户名。当然在实际使用中一般都是登录成功返回信息时进行添加，然后再进行跳转。\n- 在LoginCtrl控制器中跳转前加入以下代码：\n\n``` javascrpit\nsessionStorage.setItem('username', $scope.username);\n```\n\n### 在页面中添加判断\n除了login页面之外，其他页面都需要进行判断，方法可以有以下几种：\n- 在每个页面的控制器中添加判断\n- 在头部控制器中添加判断（除login页面之外都有头部指令）\n- 集成服务，在服务中进行判断，然后在控制器中注入服务并使用\n\n这里我们在头部控制器里加入判断\n``` javascrpit\n//判断是否已经登录，未登录则进行跳转\nif (!sessionStorage.getItem('username')) {\n\talert(\"请登录\");\n\tlocation.href = 'index.html#/';\n}\n```\n\n### 退出时注销登录信息\n我们之前在头部下拉菜单上添加了退出选项，现在我们需要在跳转前注销登录信息。\n- 绑定ng-click事件\n- 添加click选项，值为funxtion执行函数\n\n``` javascrpit\n$scope.usermenus = [{\n\ttext: '退出', //text用于储存该菜单显示名称\n\tclick: function() {\n\t\tsessionStorage.clear(); //清除登录信息\n\t\tlocation.href = 'index.html#/login'; //设定该菜单跳转路由\n\t}\n}];\n```\n\n## 结束语\n-----\n至此，我们大概完成了一个较完整的项目，当然实际中工程远大于本骚年所介绍的，遇到的问题也远比这些复杂。但没关系，困难都是一步步克服的，相信大家能很好地解决掉他们。\n[此处查看项目代码（仅包含app部分）](https://github.com/godbasin/godbasin.github.io/tree/blog-codes/angular-notes/8-create-filter)\n[此处查看页面效果](http://o9grhhyar.bkt.clouddn.com/9-session-commit/index.html#/index)","slug":"angular-note-9-session-commit","published":1,"updated":"2016-08-20T10:54:21.072Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cix45huf6001axotulppb63o1","content":"<p>最近的一个项目使用AngularJS(v1.2.6)作为前端的框架，《Angular使用笔记》系列用于记录过程中的一些使用和解决方法。<br>本文记录使用sessionStorage判断是否已登录并进行跳转的过程。<br><a id=\"more\"></a></p>\n<p>前面篇章我们已经讲述过公用信息的获取和设置方法，具体可以查看<a href=\"https://godbasin.github.io/2016/07/09/angular-note-3-common-info-manage/\">《Angular使用笔记3–公用信息的管理》</a>。<br>在这里我们使用sessionStorage来记录会话，如果没登录则自行跳转至登录页面。</p>\n<h2 id=\"sessionStorage\"><a href=\"#sessionStorage\" class=\"headerlink\" title=\"sessionStorage\"></a>sessionStorage</h2><hr>\n<h3 id=\"HTML5新特性-SessionStorage\"><a href=\"#HTML5新特性-SessionStorage\" class=\"headerlink\" title=\"HTML5新特性: SessionStorage\"></a>HTML5新特性: SessionStorage</h3><ul>\n<li>sessionStorage用于本地存储一个会话（session）中的数据，这些数据只有在同一个会话中的页面才能访问并且当会话结束后数据也随之销毁</li>\n<li>sessionStorage不是一种持久化的本地存储，仅仅是会话级别的存储</li>\n<li>可利用SessionStorage保存一些会话类公共信息</li>\n</ul>\n<h3 id=\"使用sessionStorage\"><a href=\"#使用sessionStorage\" class=\"headerlink\" title=\"使用sessionStorage\"></a>使用sessionStorage</h3><ul>\n<li>检测兼容性：window.sessionStorage</li>\n<li>设置session项：sessionStorage.setItem(key, value)</li>\n<li>获取session项：sessionStorage.getItem(key)</li>\n<li>删除session项：sessionStorage.removeItem(key)</li>\n<li>清除所有session信息：sessionStorage.clear()</li>\n<li>sessionStorage的项目数：sessionStorage.length</li>\n</ul>\n<h3 id=\"sessionStorage-localStorage-Cookie的异同\"><a href=\"#sessionStorage-localStorage-Cookie的异同\" class=\"headerlink\" title=\"sessionStorage/localStorage/Cookie的异同\"></a>sessionStorage/localStorage/Cookie的异同</h3><ul>\n<li>sessionStorage数据的存储仅特定于某个会话中，也就是说数据只保持到浏览器关闭，当浏览器关闭后重新打开这个页面时，之前的存储已经被清除</li>\n<li>localStorage是一个持久化的存储，它并不局限于会话</li>\n<li>Cookie非常小，它的大小限制为4KB左右（sessionStorage和localStorage为5M左右），可设置失效时间，默认是关闭浏览器后失效</li>\n</ul>\n<h3 id=\"依赖注入使用filter\"><a href=\"#依赖注入使用filter\" class=\"headerlink\" title=\"依赖注入使用filter\"></a>依赖注入使用filter</h3><ul>\n<li>需使用依赖注入方法将$filter注入到该controller中</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">var new_value = $filter(&apos;filtername&apos;)(old_value);</div></pre></td></tr></table></figure>\n<h2 id=\"使用sessionStorage判断是否已登录\"><a href=\"#使用sessionStorage判断是否已登录\" class=\"headerlink\" title=\"使用sessionStorage判断是否已登录\"></a>使用sessionStorage判断是否已登录</h2><hr>\n<h3 id=\"登录提交设置sessionStorage\"><a href=\"#登录提交设置sessionStorage\" class=\"headerlink\" title=\"登录提交设置sessionStorage\"></a>登录提交设置sessionStorage</h3><p>登录的时候将账户信息添加进sessionStorage，这里为方便直接记录账户名。当然在实际使用中一般都是登录成功返回信息时进行添加，然后再进行跳转。</p>\n<ul>\n<li>在LoginCtrl控制器中跳转前加入以下代码：</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">sessionStorage.setItem(&apos;username&apos;, $scope.username);</div></pre></td></tr></table></figure>\n<h3 id=\"在页面中添加判断\"><a href=\"#在页面中添加判断\" class=\"headerlink\" title=\"在页面中添加判断\"></a>在页面中添加判断</h3><p>除了login页面之外，其他页面都需要进行判断，方法可以有以下几种：</p>\n<ul>\n<li>在每个页面的控制器中添加判断</li>\n<li>在头部控制器中添加判断（除login页面之外都有头部指令）</li>\n<li>集成服务，在服务中进行判断，然后在控制器中注入服务并使用</li>\n</ul>\n<p>这里我们在头部控制器里加入判断<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">//判断是否已经登录，未登录则进行跳转</div><div class=\"line\">if (!sessionStorage.getItem(&apos;username&apos;)) &#123;</div><div class=\"line\">  alert(&quot;请登录&quot;);</div><div class=\"line\">  location.href = &apos;index.html#/&apos;;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h3 id=\"退出时注销登录信息\"><a href=\"#退出时注销登录信息\" class=\"headerlink\" title=\"退出时注销登录信息\"></a>退出时注销登录信息</h3><p>我们之前在头部下拉菜单上添加了退出选项，现在我们需要在跳转前注销登录信息。</p>\n<ul>\n<li>绑定ng-click事件</li>\n<li>添加click选项，值为funxtion执行函数</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">$scope.usermenus = [&#123;</div><div class=\"line\">  text: &apos;退出&apos;, //text用于储存该菜单显示名称</div><div class=\"line\">  click: function() &#123;</div><div class=\"line\">    sessionStorage.clear(); //清除登录信息</div><div class=\"line\">    location.href = &apos;index.html#/login&apos;; //设定该菜单跳转路由</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;];</div></pre></td></tr></table></figure>\n<h2 id=\"结束语\"><a href=\"#结束语\" class=\"headerlink\" title=\"结束语\"></a>结束语</h2><hr>\n<p>至此，我们大概完成了一个较完整的项目，当然实际中工程远大于本骚年所介绍的，遇到的问题也远比这些复杂。但没关系，困难都是一步步克服的，相信大家能很好地解决掉他们。<br><a href=\"https://github.com/godbasin/godbasin.github.io/tree/blog-codes/angular-notes/8-create-filter\" target=\"_blank\" rel=\"external\">此处查看项目代码（仅包含app部分）</a><br><a href=\"http://o9grhhyar.bkt.clouddn.com/9-session-commit/index.html#/index\" target=\"_blank\" rel=\"external\">此处查看页面效果</a></p>\n","excerpt":"<p>最近的一个项目使用AngularJS(v1.2.6)作为前端的框架，《Angular使用笔记》系列用于记录过程中的一些使用和解决方法。<br>本文记录使用sessionStorage判断是否已登录并进行跳转的过程。<br>","more":"</p>\n<p>前面篇章我们已经讲述过公用信息的获取和设置方法，具体可以查看<a href=\"https://godbasin.github.io/2016/07/09/angular-note-3-common-info-manage/\">《Angular使用笔记3–公用信息的管理》</a>。<br>在这里我们使用sessionStorage来记录会话，如果没登录则自行跳转至登录页面。</p>\n<h2 id=\"sessionStorage\"><a href=\"#sessionStorage\" class=\"headerlink\" title=\"sessionStorage\"></a>sessionStorage</h2><hr>\n<h3 id=\"HTML5新特性-SessionStorage\"><a href=\"#HTML5新特性-SessionStorage\" class=\"headerlink\" title=\"HTML5新特性: SessionStorage\"></a>HTML5新特性: SessionStorage</h3><ul>\n<li>sessionStorage用于本地存储一个会话（session）中的数据，这些数据只有在同一个会话中的页面才能访问并且当会话结束后数据也随之销毁</li>\n<li>sessionStorage不是一种持久化的本地存储，仅仅是会话级别的存储</li>\n<li>可利用SessionStorage保存一些会话类公共信息</li>\n</ul>\n<h3 id=\"使用sessionStorage\"><a href=\"#使用sessionStorage\" class=\"headerlink\" title=\"使用sessionStorage\"></a>使用sessionStorage</h3><ul>\n<li>检测兼容性：window.sessionStorage</li>\n<li>设置session项：sessionStorage.setItem(key, value)</li>\n<li>获取session项：sessionStorage.getItem(key)</li>\n<li>删除session项：sessionStorage.removeItem(key)</li>\n<li>清除所有session信息：sessionStorage.clear()</li>\n<li>sessionStorage的项目数：sessionStorage.length</li>\n</ul>\n<h3 id=\"sessionStorage-localStorage-Cookie的异同\"><a href=\"#sessionStorage-localStorage-Cookie的异同\" class=\"headerlink\" title=\"sessionStorage/localStorage/Cookie的异同\"></a>sessionStorage/localStorage/Cookie的异同</h3><ul>\n<li>sessionStorage数据的存储仅特定于某个会话中，也就是说数据只保持到浏览器关闭，当浏览器关闭后重新打开这个页面时，之前的存储已经被清除</li>\n<li>localStorage是一个持久化的存储，它并不局限于会话</li>\n<li>Cookie非常小，它的大小限制为4KB左右（sessionStorage和localStorage为5M左右），可设置失效时间，默认是关闭浏览器后失效</li>\n</ul>\n<h3 id=\"依赖注入使用filter\"><a href=\"#依赖注入使用filter\" class=\"headerlink\" title=\"依赖注入使用filter\"></a>依赖注入使用filter</h3><ul>\n<li>需使用依赖注入方法将$filter注入到该controller中</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">var new_value = $filter(&apos;filtername&apos;)(old_value);</div></pre></td></tr></table></figure>\n<h2 id=\"使用sessionStorage判断是否已登录\"><a href=\"#使用sessionStorage判断是否已登录\" class=\"headerlink\" title=\"使用sessionStorage判断是否已登录\"></a>使用sessionStorage判断是否已登录</h2><hr>\n<h3 id=\"登录提交设置sessionStorage\"><a href=\"#登录提交设置sessionStorage\" class=\"headerlink\" title=\"登录提交设置sessionStorage\"></a>登录提交设置sessionStorage</h3><p>登录的时候将账户信息添加进sessionStorage，这里为方便直接记录账户名。当然在实际使用中一般都是登录成功返回信息时进行添加，然后再进行跳转。</p>\n<ul>\n<li>在LoginCtrl控制器中跳转前加入以下代码：</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">sessionStorage.setItem(&apos;username&apos;, $scope.username);</div></pre></td></tr></table></figure>\n<h3 id=\"在页面中添加判断\"><a href=\"#在页面中添加判断\" class=\"headerlink\" title=\"在页面中添加判断\"></a>在页面中添加判断</h3><p>除了login页面之外，其他页面都需要进行判断，方法可以有以下几种：</p>\n<ul>\n<li>在每个页面的控制器中添加判断</li>\n<li>在头部控制器中添加判断（除login页面之外都有头部指令）</li>\n<li>集成服务，在服务中进行判断，然后在控制器中注入服务并使用</li>\n</ul>\n<p>这里我们在头部控制器里加入判断<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">//判断是否已经登录，未登录则进行跳转</div><div class=\"line\">if (!sessionStorage.getItem(&apos;username&apos;)) &#123;</div><div class=\"line\">  alert(&quot;请登录&quot;);</div><div class=\"line\">  location.href = &apos;index.html#/&apos;;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h3 id=\"退出时注销登录信息\"><a href=\"#退出时注销登录信息\" class=\"headerlink\" title=\"退出时注销登录信息\"></a>退出时注销登录信息</h3><p>我们之前在头部下拉菜单上添加了退出选项，现在我们需要在跳转前注销登录信息。</p>\n<ul>\n<li>绑定ng-click事件</li>\n<li>添加click选项，值为funxtion执行函数</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">$scope.usermenus = [&#123;</div><div class=\"line\">  text: &apos;退出&apos;, //text用于储存该菜单显示名称</div><div class=\"line\">  click: function() &#123;</div><div class=\"line\">    sessionStorage.clear(); //清除登录信息</div><div class=\"line\">    location.href = &apos;index.html#/login&apos;; //设定该菜单跳转路由</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;];</div></pre></td></tr></table></figure>\n<h2 id=\"结束语\"><a href=\"#结束语\" class=\"headerlink\" title=\"结束语\"></a>结束语</h2><hr>\n<p>至此，我们大概完成了一个较完整的项目，当然实际中工程远大于本骚年所介绍的，遇到的问题也远比这些复杂。但没关系，困难都是一步步克服的，相信大家能很好地解决掉他们。<br><a href=\"https://github.com/godbasin/godbasin.github.io/tree/blog-codes/angular-notes/8-create-filter\">此处查看项目代码（仅包含app部分）</a><br><a href=\"http://o9grhhyar.bkt.clouddn.com/9-session-commit/index.html#/index\">此处查看页面效果</a></p>"},{"title":"Angular使用笔记6--编写异步提交带图片的表单服务","date":"2016-07-17T12:52:25.000Z","_content":"最近的一个项目使用AngularJS(v1.2.6)作为前端的框架，《Angular使用笔记》系列用于记录过程中的一些使用和解决方法。\n本文记录编写异步提交带图片的表单服务的过程，同时简单介绍$q服务，以及HTML5 File API和FormData。\n<!--more-->\n## 有关angularJS$http和$q\n-----\n### $http\n- $http是一个用于读取web服务器上数据的服务\n- $http.get()从web服务器上读取静态JSON数据\n- $http的post使用会与ajax不一样哦，需要设置Content-Type值，具体可以查看[《Angular使用笔记2--创建登录页面》](https://godbasin.github.io/2016/07/08/angular-note-2-create-login/)里的解决办法\n\n### Promise对象\nJavascript采用回调函数(callback)来处理异步编程。从同步编程到异步回调编程有一个适应的过程，但是如果出现多层回调嵌套，也就是我们常说的厄运的回调金字塔(Pyramid of Doom)。\n- Promise是一种异步方式处理值（或者非值）的方法\n- Promise允许以一种同步的方式编写异步代码\n- 代表了一个函数最终可能的返回值或者抛出的异常\n- Promises/A规范\n  - promise有三种状态：未完成(unfulfilled)，完成(fulfilled) 和失败(failed)\n  - promise的状态只能由未完成转换成完成，或者未完成转换成失败\n  - promise的状态转换只发生一次\n\n### 在AngularJS中使用Promise: $q\n$q是Angular的一种内置服务，它可以使你异步地执行函数，并且当函数执行完成时它允许你使用函数的返回值（或异常）\n- $q常用的几个方法\n  - defer() 创建一个deferred对象，这个对象可以执行几个常用的方法，比如resolve,reject,notify等\n  - all() 传入Promise的数组，批量执行，返回一个promise对象\n  - when() 传入一个不确定的参数，如果符合Promise标准，就返回一个promise对象\n\n- defer()方法\n  - 在$q中，可以使用resolve方法，变成完成状态；使用reject方法，变成拒绝状态\n  - defer()用于创建一个deferred对象，defer.promise用于返回一个promise对象，来定义then方法\n  - then中有三个参数，分别是成功回调、失败回调、状态变更回调\n\n- all()方法\n  - 可以把多个primise的数组合并成一个\n  - 当所有的promise执行成功后，会执行后面的回调\n\n- when()方法\n  - 可以传入一个参数，这个参数可能是一个值，可能是一个符合promise标准的外部对象\n\n### 编写一个集成$q服务\n这里我们将单个$q服务和多个$q服务（all()方法）集成成一个服务，返回Promise\n- query方法\n  - query方法返回一个对象，对象包括单个$http请求的Promise以及取消请求的方法\n  - multiquery方法返回多个$http请求的promise\n\n``` javascript\napp.factory('qService', ['$http', '$q', function($http, $q) {\n\treturn {\n\t\tquery: function(param) {\n\t\t\tvar deferred = $q.defer(), //声明承诺\n\t\t\t\tcancel = function(reason) { //取消promise事件\n\t\t\t\t\tdeferred.reject(reason);\n\t\t\t\t};\n\t\t\t$http(param).\n\t\t\tsuccess(function(data) {\n\t\t\t\tdeferred.resolve(data); //请求成功\n\t\t\t}).\n\t\t\terror(function(data) {\n\t\t\t\tdeferred.reject(data); //请求失败\n\t\t\t});\n\t\t\treturn {\n\t\t\t\tpromise: deferred.promise, // 返回承诺\n\t\t\t\tcancel: cancel // 返回取消事件\n\t\t\t};\n\t\t},\n\t\tmultiquery: function(params) {\n\t\t\tvar promises = [];\n\t\t\tfor (var i in params) {\n\t\t\t\tvar promise = $http(params[i]); //返回$http服务\n\t\t\t\tpromises.push(promise); //将$http服务添加进队列\n\t\t\t}\n\t\t\treturn $q.all(promises); //返回Promise承诺\n\t\t}\n\t};\n}])\n```\n注意：\n- 这里取消promise的事件只适合GET请求，若在POST请求上请求可能会导致不可预测的错误哦\n- 多个http服务的请求的错误回调本骚年还没想到解决办法，请小伙伴们多多赐教\n\n\n### 参考\n- [《AngularJS 中的Promise --- $q服务详解》](http://www.cnblogs.com/xing901022/p/4928147.html)\n- [《理解 Promise 的工作原理》](https://blog.coding.net/blog/how-do-promises-work)\n\n## 异步提交带图片的表单\n-----\n在Angular中要实现异步提交图片，可以使用组件或者利用HTML5属性formdata和fileapi自己实现图片的提交哦。\n- Angular的组件或者服务本骚年木有找到...\n- 既然已经使用了jQuery，推荐一个异步提交表单的插件jQuery.form\n\n### XMLHttpRequest Level 2\n- XMLHttpRequest是一个浏览器接口，使得Javascript可以进行HTTP(S)通信\n- 新版本的XMLHttpRequest对象(XMLHttpRequest Level 2)功能\n  - 1.可以设置HTTP请求的时限\n  - 2.可以使用FormData对象管理表单数据\n  - 3.可以上传文件\n  - 4.可以请求不同域名下的数据（跨域资源共享，Cross-origin resource sharing，简称CORS）\n  - 5.可以获取服务器端的二进制数据\n  - 6.可以获得数据传输的进度信息\n\n这里主要使用FromData，具体其他请查看[《触碰jQuery：AJAX异步详解》](http://www.cnblogs.com/heyuquan/archive/2013/05/13/3076465.html)\n\n### FormData对象\nHTML5新增了一个FormData对象，可以模拟表单\n使用方法如下：\n``` javascript\nwindow.FormData //检测兼容性\nvar formData = new FormData(); //新建FormData对象\nformData.append(name, value); //添加表单项\nxhr.send(formData); //发送FormData对象\n//以下方法可直接获取网页表单的值\nvar form = document.getElementById('form'); //获取form对象\nvar formData = new FormData(form); //生成FormData对象\nformData.append(name, value); // 添加表单项\nxhr.open('POST', form.action);\nxhr.send(formData);//发送FormData对象\n```\n\n### File API\nHTML5提供了File API，允许js读取本地文件。主要用于本地预览图片。\n- FileList接口: 可以用来代表一组文件的JS对象，比如用户通过input[type=\"file\"]元素选中的本地文件列表\n- Blob接口: 用来代表一段二进制数据，并且允许我们通过JS对其数据以字节为单位进行“切割”\n- File接口: 用来代步一个文件，是从Blob接口继承而来的，并在此基础上增加了诸如文件名、MIME类型之类的特性\n- FileReader接口: 提供读取文件的方法和事件\n- 检查File API兼容性： window.File&&window.FileReader&&window.FileList&&window.Blob\n\n其他方法可参考[《HTML 5中的文件处理之FileAPI》](http://bulaoge.net/topic.blg?dmn=g3g4&tid=2344378#Content)\n\n\n### 编写异步提交带图片表单的服务\n现在我们利用FormData和FileAPI，可以开始编写异步提交带图片表单的服务了。\n添加工厂服务，代码如下：\n``` javascript\n/* params:\n * {\n * \tfileinput: 传入file input的dom对象,\n * \turl: 服务器地址,\n * \tother: 其他需要发送的参数{键：值}\n *  callback: 成功回调\n *  errback: 失败回调\n * }\n */\n.factory('AsyncForm', function() {\n\tvar feature = {}; //用于检查FormData和fileAPI的兼容性\n\tfeature.fileapi = (window.File && window.FileReader && window.FileList && window.Blob);\n\tfeature.formdata = window.FormData !== undefined;\n\tvar fileAPI = feature.fileapi && feature.formdata,\n\t\tformData,\n\t\txhr = window.XMLHttpRequest ? new XMLHttpRequest() : new ActiveXObject('Microsoft.XMLHTTP'),\n\t\tAsyncForm = function(params) {\n\t\t\tif (fileAPI) {\n\t\t\t\tvar otherparams = params.other, //其他需要发送的参数{键：值}\n\t\t\t\t\tcallback = params.callback, //成功回调\n\t\t\t\t\terrback = params.errback, //失败回调\n\t\t\t\t\tfiles = (params.fileinput && params.fileinput.files) ? params.fileinput.files : {}, //传入file input的dom对象\n\t\t\t\t\tonreadystatechange;\n\t\t\t\t//设置onreadystatechange\n\t\t\t\tonreadystatechange = function(func, _xhr, errfunc) {\n\t\t\t\t\t_xhr.onreadystatechange = function() {\n\t\t\t\t\t\tif (_xhr.readyState == 4) {\n\t\t\t\t\t\t\tif (_xhr.status == 200) {\n\t\t\t\t\t\t\t\t//判断若有成功回调，则执行\n\t\t\t\t\t\t\t\tif (typeof func == 'function') {func(_xhr.responseText);} \n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t//判断若有失败回调，则执行\n\t\t\t\t\t\t\t\tif (typeof errfunc == 'function') {errfunc();}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t};\n\t\t\t\t//新建formData对象\n\t\t\t\tformData = new FormData();\n\t\t\t\t//判断是否有图片对象，有则添加进队列\n\t\t\t\tif (files) {\n\t\t\t\t\tfor (var i = 0; i < files.length; i++) {\n\t\t\t\t\t\tformData.append('file', files[i]);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t//若有其他表单项，添加进队列\n\t\t\t\tfor (i in otherparams) {\n\t\t\t\t\tformData.append(i, otherparams[i]);\n\t\t\t\t}\n\t\t\t\t//设置POST方法，以及服务器地址\n\t\t\t\txhr.open('post', params.url);\n\t\t\t\tonreadystatechange(callback, xhr, errback);\n\t\t\t} else {\n\t\t\t\talert(\"浏览器不支持FormData或fileAPI\");\n\t\t\t}\n\t\t};\n\tAsyncForm.prototype = {\n\t\t//提交表单事件\n\t\tsubmit: function() {\n\t\t\txhr.send(formData);\n\t\t},\n\t};\n\treturn AsyncForm;\n});\n```\n- 这里的fileinput参数传入file input的dom对象，其实可以直接传入file的，大家可以进行优化哦。\n\n### 使用异步提交带图片表单的服务\n- 在控制器中需注入依赖AsyncForm\n\n``` javascript\n//创建表单\nvar asform = new AsyncForm({\n\tfileinput: $input, //传入file input的dom对象\n\turl: url, //服务器地址\n\tother: { //其他需要发送的参数{键：值}\n\t\tname: value,\n\t\tname: value,\n\t},\n\tcallback: function(data) {}, //成功回调\n\terrback: function() {} //失败回调\n});\n//提交表单\nasform.submit();\n```\n\n## 结束语\n-----\n这里没有考虑不支持HTML5时候的处理办法，大家可以私底下试试哦，提示：）可使用iframe实现哦。\n[此处查看项目代码（仅包含app部分）](https://github.com/godbasin/godbasin.github.io/tree/blog-codes/angular-notes/6-asyncchronous-submit-form)","source":"_posts/angular-note-6-asyncchronous-submit-form.md","raw":"---\ntitle: Angular使用笔记6--编写异步提交带图片的表单服务\ndate: 2016-07-17 20:52:25\ncategories: angular混搭\ntags: 笔记\n---\n最近的一个项目使用AngularJS(v1.2.6)作为前端的框架，《Angular使用笔记》系列用于记录过程中的一些使用和解决方法。\n本文记录编写异步提交带图片的表单服务的过程，同时简单介绍$q服务，以及HTML5 File API和FormData。\n<!--more-->\n## 有关angularJS$http和$q\n-----\n### $http\n- $http是一个用于读取web服务器上数据的服务\n- $http.get()从web服务器上读取静态JSON数据\n- $http的post使用会与ajax不一样哦，需要设置Content-Type值，具体可以查看[《Angular使用笔记2--创建登录页面》](https://godbasin.github.io/2016/07/08/angular-note-2-create-login/)里的解决办法\n\n### Promise对象\nJavascript采用回调函数(callback)来处理异步编程。从同步编程到异步回调编程有一个适应的过程，但是如果出现多层回调嵌套，也就是我们常说的厄运的回调金字塔(Pyramid of Doom)。\n- Promise是一种异步方式处理值（或者非值）的方法\n- Promise允许以一种同步的方式编写异步代码\n- 代表了一个函数最终可能的返回值或者抛出的异常\n- Promises/A规范\n  - promise有三种状态：未完成(unfulfilled)，完成(fulfilled) 和失败(failed)\n  - promise的状态只能由未完成转换成完成，或者未完成转换成失败\n  - promise的状态转换只发生一次\n\n### 在AngularJS中使用Promise: $q\n$q是Angular的一种内置服务，它可以使你异步地执行函数，并且当函数执行完成时它允许你使用函数的返回值（或异常）\n- $q常用的几个方法\n  - defer() 创建一个deferred对象，这个对象可以执行几个常用的方法，比如resolve,reject,notify等\n  - all() 传入Promise的数组，批量执行，返回一个promise对象\n  - when() 传入一个不确定的参数，如果符合Promise标准，就返回一个promise对象\n\n- defer()方法\n  - 在$q中，可以使用resolve方法，变成完成状态；使用reject方法，变成拒绝状态\n  - defer()用于创建一个deferred对象，defer.promise用于返回一个promise对象，来定义then方法\n  - then中有三个参数，分别是成功回调、失败回调、状态变更回调\n\n- all()方法\n  - 可以把多个primise的数组合并成一个\n  - 当所有的promise执行成功后，会执行后面的回调\n\n- when()方法\n  - 可以传入一个参数，这个参数可能是一个值，可能是一个符合promise标准的外部对象\n\n### 编写一个集成$q服务\n这里我们将单个$q服务和多个$q服务（all()方法）集成成一个服务，返回Promise\n- query方法\n  - query方法返回一个对象，对象包括单个$http请求的Promise以及取消请求的方法\n  - multiquery方法返回多个$http请求的promise\n\n``` javascript\napp.factory('qService', ['$http', '$q', function($http, $q) {\n\treturn {\n\t\tquery: function(param) {\n\t\t\tvar deferred = $q.defer(), //声明承诺\n\t\t\t\tcancel = function(reason) { //取消promise事件\n\t\t\t\t\tdeferred.reject(reason);\n\t\t\t\t};\n\t\t\t$http(param).\n\t\t\tsuccess(function(data) {\n\t\t\t\tdeferred.resolve(data); //请求成功\n\t\t\t}).\n\t\t\terror(function(data) {\n\t\t\t\tdeferred.reject(data); //请求失败\n\t\t\t});\n\t\t\treturn {\n\t\t\t\tpromise: deferred.promise, // 返回承诺\n\t\t\t\tcancel: cancel // 返回取消事件\n\t\t\t};\n\t\t},\n\t\tmultiquery: function(params) {\n\t\t\tvar promises = [];\n\t\t\tfor (var i in params) {\n\t\t\t\tvar promise = $http(params[i]); //返回$http服务\n\t\t\t\tpromises.push(promise); //将$http服务添加进队列\n\t\t\t}\n\t\t\treturn $q.all(promises); //返回Promise承诺\n\t\t}\n\t};\n}])\n```\n注意：\n- 这里取消promise的事件只适合GET请求，若在POST请求上请求可能会导致不可预测的错误哦\n- 多个http服务的请求的错误回调本骚年还没想到解决办法，请小伙伴们多多赐教\n\n\n### 参考\n- [《AngularJS 中的Promise --- $q服务详解》](http://www.cnblogs.com/xing901022/p/4928147.html)\n- [《理解 Promise 的工作原理》](https://blog.coding.net/blog/how-do-promises-work)\n\n## 异步提交带图片的表单\n-----\n在Angular中要实现异步提交图片，可以使用组件或者利用HTML5属性formdata和fileapi自己实现图片的提交哦。\n- Angular的组件或者服务本骚年木有找到...\n- 既然已经使用了jQuery，推荐一个异步提交表单的插件jQuery.form\n\n### XMLHttpRequest Level 2\n- XMLHttpRequest是一个浏览器接口，使得Javascript可以进行HTTP(S)通信\n- 新版本的XMLHttpRequest对象(XMLHttpRequest Level 2)功能\n  - 1.可以设置HTTP请求的时限\n  - 2.可以使用FormData对象管理表单数据\n  - 3.可以上传文件\n  - 4.可以请求不同域名下的数据（跨域资源共享，Cross-origin resource sharing，简称CORS）\n  - 5.可以获取服务器端的二进制数据\n  - 6.可以获得数据传输的进度信息\n\n这里主要使用FromData，具体其他请查看[《触碰jQuery：AJAX异步详解》](http://www.cnblogs.com/heyuquan/archive/2013/05/13/3076465.html)\n\n### FormData对象\nHTML5新增了一个FormData对象，可以模拟表单\n使用方法如下：\n``` javascript\nwindow.FormData //检测兼容性\nvar formData = new FormData(); //新建FormData对象\nformData.append(name, value); //添加表单项\nxhr.send(formData); //发送FormData对象\n//以下方法可直接获取网页表单的值\nvar form = document.getElementById('form'); //获取form对象\nvar formData = new FormData(form); //生成FormData对象\nformData.append(name, value); // 添加表单项\nxhr.open('POST', form.action);\nxhr.send(formData);//发送FormData对象\n```\n\n### File API\nHTML5提供了File API，允许js读取本地文件。主要用于本地预览图片。\n- FileList接口: 可以用来代表一组文件的JS对象，比如用户通过input[type=\"file\"]元素选中的本地文件列表\n- Blob接口: 用来代表一段二进制数据，并且允许我们通过JS对其数据以字节为单位进行“切割”\n- File接口: 用来代步一个文件，是从Blob接口继承而来的，并在此基础上增加了诸如文件名、MIME类型之类的特性\n- FileReader接口: 提供读取文件的方法和事件\n- 检查File API兼容性： window.File&&window.FileReader&&window.FileList&&window.Blob\n\n其他方法可参考[《HTML 5中的文件处理之FileAPI》](http://bulaoge.net/topic.blg?dmn=g3g4&tid=2344378#Content)\n\n\n### 编写异步提交带图片表单的服务\n现在我们利用FormData和FileAPI，可以开始编写异步提交带图片表单的服务了。\n添加工厂服务，代码如下：\n``` javascript\n/* params:\n * {\n * \tfileinput: 传入file input的dom对象,\n * \turl: 服务器地址,\n * \tother: 其他需要发送的参数{键：值}\n *  callback: 成功回调\n *  errback: 失败回调\n * }\n */\n.factory('AsyncForm', function() {\n\tvar feature = {}; //用于检查FormData和fileAPI的兼容性\n\tfeature.fileapi = (window.File && window.FileReader && window.FileList && window.Blob);\n\tfeature.formdata = window.FormData !== undefined;\n\tvar fileAPI = feature.fileapi && feature.formdata,\n\t\tformData,\n\t\txhr = window.XMLHttpRequest ? new XMLHttpRequest() : new ActiveXObject('Microsoft.XMLHTTP'),\n\t\tAsyncForm = function(params) {\n\t\t\tif (fileAPI) {\n\t\t\t\tvar otherparams = params.other, //其他需要发送的参数{键：值}\n\t\t\t\t\tcallback = params.callback, //成功回调\n\t\t\t\t\terrback = params.errback, //失败回调\n\t\t\t\t\tfiles = (params.fileinput && params.fileinput.files) ? params.fileinput.files : {}, //传入file input的dom对象\n\t\t\t\t\tonreadystatechange;\n\t\t\t\t//设置onreadystatechange\n\t\t\t\tonreadystatechange = function(func, _xhr, errfunc) {\n\t\t\t\t\t_xhr.onreadystatechange = function() {\n\t\t\t\t\t\tif (_xhr.readyState == 4) {\n\t\t\t\t\t\t\tif (_xhr.status == 200) {\n\t\t\t\t\t\t\t\t//判断若有成功回调，则执行\n\t\t\t\t\t\t\t\tif (typeof func == 'function') {func(_xhr.responseText);} \n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t//判断若有失败回调，则执行\n\t\t\t\t\t\t\t\tif (typeof errfunc == 'function') {errfunc();}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t};\n\t\t\t\t//新建formData对象\n\t\t\t\tformData = new FormData();\n\t\t\t\t//判断是否有图片对象，有则添加进队列\n\t\t\t\tif (files) {\n\t\t\t\t\tfor (var i = 0; i < files.length; i++) {\n\t\t\t\t\t\tformData.append('file', files[i]);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t//若有其他表单项，添加进队列\n\t\t\t\tfor (i in otherparams) {\n\t\t\t\t\tformData.append(i, otherparams[i]);\n\t\t\t\t}\n\t\t\t\t//设置POST方法，以及服务器地址\n\t\t\t\txhr.open('post', params.url);\n\t\t\t\tonreadystatechange(callback, xhr, errback);\n\t\t\t} else {\n\t\t\t\talert(\"浏览器不支持FormData或fileAPI\");\n\t\t\t}\n\t\t};\n\tAsyncForm.prototype = {\n\t\t//提交表单事件\n\t\tsubmit: function() {\n\t\t\txhr.send(formData);\n\t\t},\n\t};\n\treturn AsyncForm;\n});\n```\n- 这里的fileinput参数传入file input的dom对象，其实可以直接传入file的，大家可以进行优化哦。\n\n### 使用异步提交带图片表单的服务\n- 在控制器中需注入依赖AsyncForm\n\n``` javascript\n//创建表单\nvar asform = new AsyncForm({\n\tfileinput: $input, //传入file input的dom对象\n\turl: url, //服务器地址\n\tother: { //其他需要发送的参数{键：值}\n\t\tname: value,\n\t\tname: value,\n\t},\n\tcallback: function(data) {}, //成功回调\n\terrback: function() {} //失败回调\n});\n//提交表单\nasform.submit();\n```\n\n## 结束语\n-----\n这里没有考虑不支持HTML5时候的处理办法，大家可以私底下试试哦，提示：）可使用iframe实现哦。\n[此处查看项目代码（仅包含app部分）](https://github.com/godbasin/godbasin.github.io/tree/blog-codes/angular-notes/6-asyncchronous-submit-form)","slug":"angular-note-6-asyncchronous-submit-form","published":1,"updated":"2016-08-20T10:54:21.063Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cix45huf7001dxotu761jqjxj","content":"<p>最近的一个项目使用AngularJS(v1.2.6)作为前端的框架，《Angular使用笔记》系列用于记录过程中的一些使用和解决方法。<br>本文记录编写异步提交带图片的表单服务的过程，同时简单介绍$q服务，以及HTML5 File API和FormData。<br><a id=\"more\"></a></p>\n<h2 id=\"有关angularJS-http和-q\"><a href=\"#有关angularJS-http和-q\" class=\"headerlink\" title=\"有关angularJS$http和$q\"></a>有关angularJS$http和$q</h2><hr>\n<h3 id=\"http\"><a href=\"#http\" class=\"headerlink\" title=\"$http\"></a>$http</h3><ul>\n<li>$http是一个用于读取web服务器上数据的服务</li>\n<li>$http.get()从web服务器上读取静态JSON数据</li>\n<li>$http的post使用会与ajax不一样哦，需要设置Content-Type值，具体可以查看<a href=\"https://godbasin.github.io/2016/07/08/angular-note-2-create-login/\">《Angular使用笔记2–创建登录页面》</a>里的解决办法</li>\n</ul>\n<h3 id=\"Promise对象\"><a href=\"#Promise对象\" class=\"headerlink\" title=\"Promise对象\"></a>Promise对象</h3><p>Javascript采用回调函数(callback)来处理异步编程。从同步编程到异步回调编程有一个适应的过程，但是如果出现多层回调嵌套，也就是我们常说的厄运的回调金字塔(Pyramid of Doom)。</p>\n<ul>\n<li>Promise是一种异步方式处理值（或者非值）的方法</li>\n<li>Promise允许以一种同步的方式编写异步代码</li>\n<li>代表了一个函数最终可能的返回值或者抛出的异常</li>\n<li>Promises/A规范<ul>\n<li>promise有三种状态：未完成(unfulfilled)，完成(fulfilled) 和失败(failed)</li>\n<li>promise的状态只能由未完成转换成完成，或者未完成转换成失败</li>\n<li>promise的状态转换只发生一次</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"在AngularJS中使用Promise-q\"><a href=\"#在AngularJS中使用Promise-q\" class=\"headerlink\" title=\"在AngularJS中使用Promise: $q\"></a>在AngularJS中使用Promise: $q</h3><p>$q是Angular的一种内置服务，它可以使你异步地执行函数，并且当函数执行完成时它允许你使用函数的返回值（或异常）</p>\n<ul>\n<li><p>$q常用的几个方法</p>\n<ul>\n<li>defer() 创建一个deferred对象，这个对象可以执行几个常用的方法，比如resolve,reject,notify等</li>\n<li>all() 传入Promise的数组，批量执行，返回一个promise对象</li>\n<li>when() 传入一个不确定的参数，如果符合Promise标准，就返回一个promise对象</li>\n</ul>\n</li>\n<li><p>defer()方法</p>\n<ul>\n<li>在$q中，可以使用resolve方法，变成完成状态；使用reject方法，变成拒绝状态</li>\n<li>defer()用于创建一个deferred对象，defer.promise用于返回一个promise对象，来定义then方法</li>\n<li>then中有三个参数，分别是成功回调、失败回调、状态变更回调</li>\n</ul>\n</li>\n<li><p>all()方法</p>\n<ul>\n<li>可以把多个primise的数组合并成一个</li>\n<li>当所有的promise执行成功后，会执行后面的回调</li>\n</ul>\n</li>\n<li><p>when()方法</p>\n<ul>\n<li>可以传入一个参数，这个参数可能是一个值，可能是一个符合promise标准的外部对象</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"编写一个集成-q服务\"><a href=\"#编写一个集成-q服务\" class=\"headerlink\" title=\"编写一个集成$q服务\"></a>编写一个集成$q服务</h3><p>这里我们将单个$q服务和多个$q服务（all()方法）集成成一个服务，返回Promise</p>\n<ul>\n<li>query方法<ul>\n<li>query方法返回一个对象，对象包括单个$http请求的Promise以及取消请求的方法</li>\n<li>multiquery方法返回多个$http请求的promise</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div></pre></td><td class=\"code\"><pre><div class=\"line\">app.factory(<span class=\"string\">'qService'</span>, [<span class=\"string\">'$http'</span>, <span class=\"string\">'$q'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">$http, $q</span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> &#123;</div><div class=\"line\">    <span class=\"attr\">query</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">param</span>) </span>&#123;</div><div class=\"line\">      <span class=\"keyword\">var</span> deferred = $q.defer(), <span class=\"comment\">//声明承诺</span></div><div class=\"line\">        cancel = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">reason</span>) </span>&#123; <span class=\"comment\">//取消promise事件</span></div><div class=\"line\">          deferred.reject(reason);</div><div class=\"line\">        &#125;;</div><div class=\"line\">      $http(param).</div><div class=\"line\">      success(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">data</span>) </span>&#123;</div><div class=\"line\">        deferred.resolve(data); <span class=\"comment\">//请求成功</span></div><div class=\"line\">      &#125;).</div><div class=\"line\">      error(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">data</span>) </span>&#123;</div><div class=\"line\">        deferred.reject(data); <span class=\"comment\">//请求失败</span></div><div class=\"line\">      &#125;);</div><div class=\"line\">      <span class=\"keyword\">return</span> &#123;</div><div class=\"line\">        <span class=\"attr\">promise</span>: deferred.promise, <span class=\"comment\">// 返回承诺</span></div><div class=\"line\">        cancel: cancel <span class=\"comment\">// 返回取消事件</span></div><div class=\"line\">      &#125;;</div><div class=\"line\">    &#125;,</div><div class=\"line\">    <span class=\"attr\">multiquery</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">params</span>) </span>&#123;</div><div class=\"line\">      <span class=\"keyword\">var</span> promises = [];</div><div class=\"line\">      <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i <span class=\"keyword\">in</span> params) &#123;</div><div class=\"line\">        <span class=\"keyword\">var</span> promise = $http(params[i]); <span class=\"comment\">//返回$http服务</span></div><div class=\"line\">        promises.push(promise); <span class=\"comment\">//将$http服务添加进队列</span></div><div class=\"line\">      &#125;</div><div class=\"line\">      <span class=\"keyword\">return</span> $q.all(promises); <span class=\"comment\">//返回Promise承诺</span></div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;;</div><div class=\"line\">&#125;])</div></pre></td></tr></table></figure>\n<p>注意：</p>\n<ul>\n<li>这里取消promise的事件只适合GET请求，若在POST请求上请求可能会导致不可预测的错误哦</li>\n<li>多个http服务的请求的错误回调本骚年还没想到解决办法，请小伙伴们多多赐教</li>\n</ul>\n<h3 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h3><ul>\n<li><a href=\"http://www.cnblogs.com/xing901022/p/4928147.html\" target=\"_blank\" rel=\"external\">《AngularJS 中的Promise — $q服务详解》</a></li>\n<li><a href=\"https://blog.coding.net/blog/how-do-promises-work\" target=\"_blank\" rel=\"external\">《理解 Promise 的工作原理》</a></li>\n</ul>\n<h2 id=\"异步提交带图片的表单\"><a href=\"#异步提交带图片的表单\" class=\"headerlink\" title=\"异步提交带图片的表单\"></a>异步提交带图片的表单</h2><hr>\n<p>在Angular中要实现异步提交图片，可以使用组件或者利用HTML5属性formdata和fileapi自己实现图片的提交哦。</p>\n<ul>\n<li>Angular的组件或者服务本骚年木有找到…</li>\n<li>既然已经使用了jQuery，推荐一个异步提交表单的插件jQuery.form</li>\n</ul>\n<h3 id=\"XMLHttpRequest-Level-2\"><a href=\"#XMLHttpRequest-Level-2\" class=\"headerlink\" title=\"XMLHttpRequest Level 2\"></a>XMLHttpRequest Level 2</h3><ul>\n<li>XMLHttpRequest是一个浏览器接口，使得Javascript可以进行HTTP(S)通信</li>\n<li>新版本的XMLHttpRequest对象(XMLHttpRequest Level 2)功能<ul>\n<li>1.可以设置HTTP请求的时限</li>\n<li>2.可以使用FormData对象管理表单数据</li>\n<li>3.可以上传文件</li>\n<li>4.可以请求不同域名下的数据（跨域资源共享，Cross-origin resource sharing，简称CORS）</li>\n<li>5.可以获取服务器端的二进制数据</li>\n<li>6.可以获得数据传输的进度信息</li>\n</ul>\n</li>\n</ul>\n<p>这里主要使用FromData，具体其他请查看<a href=\"http://www.cnblogs.com/heyuquan/archive/2013/05/13/3076465.html\" target=\"_blank\" rel=\"external\">《触碰jQuery：AJAX异步详解》</a></p>\n<h3 id=\"FormData对象\"><a href=\"#FormData对象\" class=\"headerlink\" title=\"FormData对象\"></a>FormData对象</h3><p>HTML5新增了一个FormData对象，可以模拟表单<br>使用方法如下：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">window</span>.FormData <span class=\"comment\">//检测兼容性</span></div><div class=\"line\"><span class=\"keyword\">var</span> formData = <span class=\"keyword\">new</span> FormData(); <span class=\"comment\">//新建FormData对象</span></div><div class=\"line\">formData.append(name, value); <span class=\"comment\">//添加表单项</span></div><div class=\"line\">xhr.send(formData); <span class=\"comment\">//发送FormData对象</span></div><div class=\"line\"><span class=\"comment\">//以下方法可直接获取网页表单的值</span></div><div class=\"line\"><span class=\"keyword\">var</span> form = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'form'</span>); <span class=\"comment\">//获取form对象</span></div><div class=\"line\"><span class=\"keyword\">var</span> formData = <span class=\"keyword\">new</span> FormData(form); <span class=\"comment\">//生成FormData对象</span></div><div class=\"line\">formData.append(name, value); <span class=\"comment\">// 添加表单项</span></div><div class=\"line\">xhr.open(<span class=\"string\">'POST'</span>, form.action);</div><div class=\"line\">xhr.send(formData);<span class=\"comment\">//发送FormData对象</span></div></pre></td></tr></table></figure></p>\n<h3 id=\"File-API\"><a href=\"#File-API\" class=\"headerlink\" title=\"File API\"></a>File API</h3><p>HTML5提供了File API，允许js读取本地文件。主要用于本地预览图片。</p>\n<ul>\n<li>FileList接口: 可以用来代表一组文件的JS对象，比如用户通过input[type=”file”]元素选中的本地文件列表</li>\n<li>Blob接口: 用来代表一段二进制数据，并且允许我们通过JS对其数据以字节为单位进行“切割”</li>\n<li>File接口: 用来代步一个文件，是从Blob接口继承而来的，并在此基础上增加了诸如文件名、MIME类型之类的特性</li>\n<li>FileReader接口: 提供读取文件的方法和事件</li>\n<li>检查File API兼容性： window.File&amp;&amp;window.FileReader&amp;&amp;window.FileList&amp;&amp;window.Blob</li>\n</ul>\n<p>其他方法可参考<a href=\"http://bulaoge.net/topic.blg?dmn=g3g4&amp;tid=2344378#Content\" target=\"_blank\" rel=\"external\">《HTML 5中的文件处理之FileAPI》</a></p>\n<h3 id=\"编写异步提交带图片表单的服务\"><a href=\"#编写异步提交带图片表单的服务\" class=\"headerlink\" title=\"编写异步提交带图片表单的服务\"></a>编写异步提交带图片表单的服务</h3><p>现在我们利用FormData和FileAPI，可以开始编写异步提交带图片表单的服务了。<br>添加工厂服务，代码如下：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/* params:</span></div><div class=\"line\"> * &#123;</div><div class=\"line\"> * \tfileinput: 传入file input的dom对象,</div><div class=\"line\"> * \turl: 服务器地址,</div><div class=\"line\"> * \tother: 其他需要发送的参数&#123;键：值&#125;</div><div class=\"line\"> *  callback: 成功回调</div><div class=\"line\"> *  errback: 失败回调</div><div class=\"line\"> * &#125;</div><div class=\"line\"> */</div><div class=\"line\">.factory(<span class=\"string\">'AsyncForm'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">var</span> feature = &#123;&#125;; <span class=\"comment\">//用于检查FormData和fileAPI的兼容性</span></div><div class=\"line\">  feature.fileapi = (<span class=\"built_in\">window</span>.File &amp;&amp; <span class=\"built_in\">window</span>.FileReader &amp;&amp; <span class=\"built_in\">window</span>.FileList &amp;&amp; <span class=\"built_in\">window</span>.Blob);</div><div class=\"line\">  feature.formdata = <span class=\"built_in\">window</span>.FormData !== <span class=\"literal\">undefined</span>;</div><div class=\"line\">  <span class=\"keyword\">var</span> fileAPI = feature.fileapi &amp;&amp; feature.formdata,</div><div class=\"line\">    formData,</div><div class=\"line\">    xhr = <span class=\"built_in\">window</span>.XMLHttpRequest ? <span class=\"keyword\">new</span> XMLHttpRequest() : <span class=\"keyword\">new</span> ActiveXObject(<span class=\"string\">'Microsoft.XMLHTTP'</span>),</div><div class=\"line\">    AsyncForm = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">params</span>) </span>&#123;</div><div class=\"line\">      <span class=\"keyword\">if</span> (fileAPI) &#123;</div><div class=\"line\">        <span class=\"keyword\">var</span> otherparams = params.other, <span class=\"comment\">//其他需要发送的参数&#123;键：值&#125;</span></div><div class=\"line\">          callback = params.callback, <span class=\"comment\">//成功回调</span></div><div class=\"line\">          errback = params.errback, <span class=\"comment\">//失败回调</span></div><div class=\"line\">          files = (params.fileinput &amp;&amp; params.fileinput.files) ? params.fileinput.files : &#123;&#125;, <span class=\"comment\">//传入file input的dom对象</span></div><div class=\"line\">          onreadystatechange;</div><div class=\"line\">        <span class=\"comment\">//设置onreadystatechange</span></div><div class=\"line\">        onreadystatechange = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">func, _xhr, errfunc</span>) </span>&#123;</div><div class=\"line\">          _xhr.onreadystatechange = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">            <span class=\"keyword\">if</span> (_xhr.readyState == <span class=\"number\">4</span>) &#123;</div><div class=\"line\">              <span class=\"keyword\">if</span> (_xhr.status == <span class=\"number\">200</span>) &#123;</div><div class=\"line\">                <span class=\"comment\">//判断若有成功回调，则执行</span></div><div class=\"line\">                <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> func == <span class=\"string\">'function'</span>) &#123;func(_xhr.responseText);&#125; </div><div class=\"line\">              &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">                <span class=\"comment\">//判断若有失败回调，则执行</span></div><div class=\"line\">                <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> errfunc == <span class=\"string\">'function'</span>) &#123;errfunc();&#125;</div><div class=\"line\">              &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">          &#125;</div><div class=\"line\">        &#125;;</div><div class=\"line\">        <span class=\"comment\">//新建formData对象</span></div><div class=\"line\">        formData = <span class=\"keyword\">new</span> FormData();</div><div class=\"line\">        <span class=\"comment\">//判断是否有图片对象，有则添加进队列</span></div><div class=\"line\">        <span class=\"keyword\">if</span> (files) &#123;</div><div class=\"line\">          <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; files.length; i++) &#123;</div><div class=\"line\">            formData.append(<span class=\"string\">'file'</span>, files[i]);</div><div class=\"line\">          &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"comment\">//若有其他表单项，添加进队列</span></div><div class=\"line\">        <span class=\"keyword\">for</span> (i <span class=\"keyword\">in</span> otherparams) &#123;</div><div class=\"line\">          formData.append(i, otherparams[i]);</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"comment\">//设置POST方法，以及服务器地址</span></div><div class=\"line\">        xhr.open(<span class=\"string\">'post'</span>, params.url);</div><div class=\"line\">        onreadystatechange(callback, xhr, errback);</div><div class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">        alert(<span class=\"string\">\"浏览器不支持FormData或fileAPI\"</span>);</div><div class=\"line\">      &#125;</div><div class=\"line\">    &#125;;</div><div class=\"line\">  AsyncForm.prototype = &#123;</div><div class=\"line\">    <span class=\"comment\">//提交表单事件</span></div><div class=\"line\">    submit: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">      xhr.send(formData);</div><div class=\"line\">    &#125;,</div><div class=\"line\">  &#125;;</div><div class=\"line\">  <span class=\"keyword\">return</span> AsyncForm;</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure></p>\n<ul>\n<li>这里的fileinput参数传入file input的dom对象，其实可以直接传入file的，大家可以进行优化哦。</li>\n</ul>\n<h3 id=\"使用异步提交带图片表单的服务\"><a href=\"#使用异步提交带图片表单的服务\" class=\"headerlink\" title=\"使用异步提交带图片表单的服务\"></a>使用异步提交带图片表单的服务</h3><ul>\n<li>在控制器中需注入依赖AsyncForm</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//创建表单</span></div><div class=\"line\"><span class=\"keyword\">var</span> asform = <span class=\"keyword\">new</span> AsyncForm(&#123;</div><div class=\"line\">  <span class=\"attr\">fileinput</span>: $input, <span class=\"comment\">//传入file input的dom对象</span></div><div class=\"line\">  url: url, <span class=\"comment\">//服务器地址</span></div><div class=\"line\">  other: &#123; <span class=\"comment\">//其他需要发送的参数&#123;键：值&#125;</span></div><div class=\"line\">    name: value,</div><div class=\"line\">    <span class=\"attr\">name</span>: value,</div><div class=\"line\">  &#125;,</div><div class=\"line\">  <span class=\"attr\">callback</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">data</span>) </span>&#123;&#125;, <span class=\"comment\">//成功回调</span></div><div class=\"line\">  errback: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;&#125; <span class=\"comment\">//失败回调</span></div><div class=\"line\">&#125;);</div><div class=\"line\"><span class=\"comment\">//提交表单</span></div><div class=\"line\">asform.submit();</div></pre></td></tr></table></figure>\n<h2 id=\"结束语\"><a href=\"#结束语\" class=\"headerlink\" title=\"结束语\"></a>结束语</h2><hr>\n<p>这里没有考虑不支持HTML5时候的处理办法，大家可以私底下试试哦，提示：）可使用iframe实现哦。<br><a href=\"https://github.com/godbasin/godbasin.github.io/tree/blog-codes/angular-notes/6-asyncchronous-submit-form\" target=\"_blank\" rel=\"external\">此处查看项目代码（仅包含app部分）</a></p>\n","excerpt":"<p>最近的一个项目使用AngularJS(v1.2.6)作为前端的框架，《Angular使用笔记》系列用于记录过程中的一些使用和解决方法。<br>本文记录编写异步提交带图片的表单服务的过程，同时简单介绍$q服务，以及HTML5 File API和FormData。<br>","more":"</p>\n<h2 id=\"有关angularJS-http和-q\"><a href=\"#有关angularJS-http和-q\" class=\"headerlink\" title=\"有关angularJS$http和$q\"></a>有关angularJS$http和$q</h2><hr>\n<h3 id=\"http\"><a href=\"#http\" class=\"headerlink\" title=\"$http\"></a>$http</h3><ul>\n<li>$http是一个用于读取web服务器上数据的服务</li>\n<li>$http.get()从web服务器上读取静态JSON数据</li>\n<li>$http的post使用会与ajax不一样哦，需要设置Content-Type值，具体可以查看<a href=\"https://godbasin.github.io/2016/07/08/angular-note-2-create-login/\">《Angular使用笔记2–创建登录页面》</a>里的解决办法</li>\n</ul>\n<h3 id=\"Promise对象\"><a href=\"#Promise对象\" class=\"headerlink\" title=\"Promise对象\"></a>Promise对象</h3><p>Javascript采用回调函数(callback)来处理异步编程。从同步编程到异步回调编程有一个适应的过程，但是如果出现多层回调嵌套，也就是我们常说的厄运的回调金字塔(Pyramid of Doom)。</p>\n<ul>\n<li>Promise是一种异步方式处理值（或者非值）的方法</li>\n<li>Promise允许以一种同步的方式编写异步代码</li>\n<li>代表了一个函数最终可能的返回值或者抛出的异常</li>\n<li>Promises/A规范<ul>\n<li>promise有三种状态：未完成(unfulfilled)，完成(fulfilled) 和失败(failed)</li>\n<li>promise的状态只能由未完成转换成完成，或者未完成转换成失败</li>\n<li>promise的状态转换只发生一次</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"在AngularJS中使用Promise-q\"><a href=\"#在AngularJS中使用Promise-q\" class=\"headerlink\" title=\"在AngularJS中使用Promise: $q\"></a>在AngularJS中使用Promise: $q</h3><p>$q是Angular的一种内置服务，它可以使你异步地执行函数，并且当函数执行完成时它允许你使用函数的返回值（或异常）</p>\n<ul>\n<li><p>$q常用的几个方法</p>\n<ul>\n<li>defer() 创建一个deferred对象，这个对象可以执行几个常用的方法，比如resolve,reject,notify等</li>\n<li>all() 传入Promise的数组，批量执行，返回一个promise对象</li>\n<li>when() 传入一个不确定的参数，如果符合Promise标准，就返回一个promise对象</li>\n</ul>\n</li>\n<li><p>defer()方法</p>\n<ul>\n<li>在$q中，可以使用resolve方法，变成完成状态；使用reject方法，变成拒绝状态</li>\n<li>defer()用于创建一个deferred对象，defer.promise用于返回一个promise对象，来定义then方法</li>\n<li>then中有三个参数，分别是成功回调、失败回调、状态变更回调</li>\n</ul>\n</li>\n<li><p>all()方法</p>\n<ul>\n<li>可以把多个primise的数组合并成一个</li>\n<li>当所有的promise执行成功后，会执行后面的回调</li>\n</ul>\n</li>\n<li><p>when()方法</p>\n<ul>\n<li>可以传入一个参数，这个参数可能是一个值，可能是一个符合promise标准的外部对象</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"编写一个集成-q服务\"><a href=\"#编写一个集成-q服务\" class=\"headerlink\" title=\"编写一个集成$q服务\"></a>编写一个集成$q服务</h3><p>这里我们将单个$q服务和多个$q服务（all()方法）集成成一个服务，返回Promise</p>\n<ul>\n<li>query方法<ul>\n<li>query方法返回一个对象，对象包括单个$http请求的Promise以及取消请求的方法</li>\n<li>multiquery方法返回多个$http请求的promise</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div></pre></td><td class=\"code\"><pre><div class=\"line\">app.factory(<span class=\"string\">'qService'</span>, [<span class=\"string\">'$http'</span>, <span class=\"string\">'$q'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">$http, $q</span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> &#123;</div><div class=\"line\">    <span class=\"attr\">query</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">param</span>) </span>&#123;</div><div class=\"line\">      <span class=\"keyword\">var</span> deferred = $q.defer(), <span class=\"comment\">//声明承诺</span></div><div class=\"line\">        cancel = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">reason</span>) </span>&#123; <span class=\"comment\">//取消promise事件</span></div><div class=\"line\">          deferred.reject(reason);</div><div class=\"line\">        &#125;;</div><div class=\"line\">      $http(param).</div><div class=\"line\">      success(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">data</span>) </span>&#123;</div><div class=\"line\">        deferred.resolve(data); <span class=\"comment\">//请求成功</span></div><div class=\"line\">      &#125;).</div><div class=\"line\">      error(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">data</span>) </span>&#123;</div><div class=\"line\">        deferred.reject(data); <span class=\"comment\">//请求失败</span></div><div class=\"line\">      &#125;);</div><div class=\"line\">      <span class=\"keyword\">return</span> &#123;</div><div class=\"line\">        <span class=\"attr\">promise</span>: deferred.promise, <span class=\"comment\">// 返回承诺</span></div><div class=\"line\">        cancel: cancel <span class=\"comment\">// 返回取消事件</span></div><div class=\"line\">      &#125;;</div><div class=\"line\">    &#125;,</div><div class=\"line\">    <span class=\"attr\">multiquery</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">params</span>) </span>&#123;</div><div class=\"line\">      <span class=\"keyword\">var</span> promises = [];</div><div class=\"line\">      <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i <span class=\"keyword\">in</span> params) &#123;</div><div class=\"line\">        <span class=\"keyword\">var</span> promise = $http(params[i]); <span class=\"comment\">//返回$http服务</span></div><div class=\"line\">        promises.push(promise); <span class=\"comment\">//将$http服务添加进队列</span></div><div class=\"line\">      &#125;</div><div class=\"line\">      <span class=\"keyword\">return</span> $q.all(promises); <span class=\"comment\">//返回Promise承诺</span></div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;;</div><div class=\"line\">&#125;])</div></pre></td></tr></table></figure>\n<p>注意：</p>\n<ul>\n<li>这里取消promise的事件只适合GET请求，若在POST请求上请求可能会导致不可预测的错误哦</li>\n<li>多个http服务的请求的错误回调本骚年还没想到解决办法，请小伙伴们多多赐教</li>\n</ul>\n<h3 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h3><ul>\n<li><a href=\"http://www.cnblogs.com/xing901022/p/4928147.html\">《AngularJS 中的Promise — $q服务详解》</a></li>\n<li><a href=\"https://blog.coding.net/blog/how-do-promises-work\">《理解 Promise 的工作原理》</a></li>\n</ul>\n<h2 id=\"异步提交带图片的表单\"><a href=\"#异步提交带图片的表单\" class=\"headerlink\" title=\"异步提交带图片的表单\"></a>异步提交带图片的表单</h2><hr>\n<p>在Angular中要实现异步提交图片，可以使用组件或者利用HTML5属性formdata和fileapi自己实现图片的提交哦。</p>\n<ul>\n<li>Angular的组件或者服务本骚年木有找到…</li>\n<li>既然已经使用了jQuery，推荐一个异步提交表单的插件jQuery.form</li>\n</ul>\n<h3 id=\"XMLHttpRequest-Level-2\"><a href=\"#XMLHttpRequest-Level-2\" class=\"headerlink\" title=\"XMLHttpRequest Level 2\"></a>XMLHttpRequest Level 2</h3><ul>\n<li>XMLHttpRequest是一个浏览器接口，使得Javascript可以进行HTTP(S)通信</li>\n<li>新版本的XMLHttpRequest对象(XMLHttpRequest Level 2)功能<ul>\n<li>1.可以设置HTTP请求的时限</li>\n<li>2.可以使用FormData对象管理表单数据</li>\n<li>3.可以上传文件</li>\n<li>4.可以请求不同域名下的数据（跨域资源共享，Cross-origin resource sharing，简称CORS）</li>\n<li>5.可以获取服务器端的二进制数据</li>\n<li>6.可以获得数据传输的进度信息</li>\n</ul>\n</li>\n</ul>\n<p>这里主要使用FromData，具体其他请查看<a href=\"http://www.cnblogs.com/heyuquan/archive/2013/05/13/3076465.html\">《触碰jQuery：AJAX异步详解》</a></p>\n<h3 id=\"FormData对象\"><a href=\"#FormData对象\" class=\"headerlink\" title=\"FormData对象\"></a>FormData对象</h3><p>HTML5新增了一个FormData对象，可以模拟表单<br>使用方法如下：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">window</span>.FormData <span class=\"comment\">//检测兼容性</span></div><div class=\"line\"><span class=\"keyword\">var</span> formData = <span class=\"keyword\">new</span> FormData(); <span class=\"comment\">//新建FormData对象</span></div><div class=\"line\">formData.append(name, value); <span class=\"comment\">//添加表单项</span></div><div class=\"line\">xhr.send(formData); <span class=\"comment\">//发送FormData对象</span></div><div class=\"line\"><span class=\"comment\">//以下方法可直接获取网页表单的值</span></div><div class=\"line\"><span class=\"keyword\">var</span> form = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'form'</span>); <span class=\"comment\">//获取form对象</span></div><div class=\"line\"><span class=\"keyword\">var</span> formData = <span class=\"keyword\">new</span> FormData(form); <span class=\"comment\">//生成FormData对象</span></div><div class=\"line\">formData.append(name, value); <span class=\"comment\">// 添加表单项</span></div><div class=\"line\">xhr.open(<span class=\"string\">'POST'</span>, form.action);</div><div class=\"line\">xhr.send(formData);<span class=\"comment\">//发送FormData对象</span></div></pre></td></tr></table></figure></p>\n<h3 id=\"File-API\"><a href=\"#File-API\" class=\"headerlink\" title=\"File API\"></a>File API</h3><p>HTML5提供了File API，允许js读取本地文件。主要用于本地预览图片。</p>\n<ul>\n<li>FileList接口: 可以用来代表一组文件的JS对象，比如用户通过input[type=”file”]元素选中的本地文件列表</li>\n<li>Blob接口: 用来代表一段二进制数据，并且允许我们通过JS对其数据以字节为单位进行“切割”</li>\n<li>File接口: 用来代步一个文件，是从Blob接口继承而来的，并在此基础上增加了诸如文件名、MIME类型之类的特性</li>\n<li>FileReader接口: 提供读取文件的方法和事件</li>\n<li>检查File API兼容性： window.File&amp;&amp;window.FileReader&amp;&amp;window.FileList&amp;&amp;window.Blob</li>\n</ul>\n<p>其他方法可参考<a href=\"http://bulaoge.net/topic.blg?dmn=g3g4&amp;tid=2344378#Content\">《HTML 5中的文件处理之FileAPI》</a></p>\n<h3 id=\"编写异步提交带图片表单的服务\"><a href=\"#编写异步提交带图片表单的服务\" class=\"headerlink\" title=\"编写异步提交带图片表单的服务\"></a>编写异步提交带图片表单的服务</h3><p>现在我们利用FormData和FileAPI，可以开始编写异步提交带图片表单的服务了。<br>添加工厂服务，代码如下：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/* params:</div><div class=\"line\"> * &#123;</div><div class=\"line\"> * \tfileinput: 传入file input的dom对象,</div><div class=\"line\"> * \turl: 服务器地址,</div><div class=\"line\"> * \tother: 其他需要发送的参数&#123;键：值&#125;</div><div class=\"line\"> *  callback: 成功回调</div><div class=\"line\"> *  errback: 失败回调</div><div class=\"line\"> * &#125;</div><div class=\"line\"> */</span></div><div class=\"line\">.factory(<span class=\"string\">'AsyncForm'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">var</span> feature = &#123;&#125;; <span class=\"comment\">//用于检查FormData和fileAPI的兼容性</span></div><div class=\"line\">  feature.fileapi = (<span class=\"built_in\">window</span>.File &amp;&amp; <span class=\"built_in\">window</span>.FileReader &amp;&amp; <span class=\"built_in\">window</span>.FileList &amp;&amp; <span class=\"built_in\">window</span>.Blob);</div><div class=\"line\">  feature.formdata = <span class=\"built_in\">window</span>.FormData !== <span class=\"literal\">undefined</span>;</div><div class=\"line\">  <span class=\"keyword\">var</span> fileAPI = feature.fileapi &amp;&amp; feature.formdata,</div><div class=\"line\">    formData,</div><div class=\"line\">    xhr = <span class=\"built_in\">window</span>.XMLHttpRequest ? <span class=\"keyword\">new</span> XMLHttpRequest() : <span class=\"keyword\">new</span> ActiveXObject(<span class=\"string\">'Microsoft.XMLHTTP'</span>),</div><div class=\"line\">    AsyncForm = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">params</span>) </span>&#123;</div><div class=\"line\">      <span class=\"keyword\">if</span> (fileAPI) &#123;</div><div class=\"line\">        <span class=\"keyword\">var</span> otherparams = params.other, <span class=\"comment\">//其他需要发送的参数&#123;键：值&#125;</span></div><div class=\"line\">          callback = params.callback, <span class=\"comment\">//成功回调</span></div><div class=\"line\">          errback = params.errback, <span class=\"comment\">//失败回调</span></div><div class=\"line\">          files = (params.fileinput &amp;&amp; params.fileinput.files) ? params.fileinput.files : &#123;&#125;, <span class=\"comment\">//传入file input的dom对象</span></div><div class=\"line\">          onreadystatechange;</div><div class=\"line\">        <span class=\"comment\">//设置onreadystatechange</span></div><div class=\"line\">        onreadystatechange = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">func, _xhr, errfunc</span>) </span>&#123;</div><div class=\"line\">          _xhr.onreadystatechange = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">            <span class=\"keyword\">if</span> (_xhr.readyState == <span class=\"number\">4</span>) &#123;</div><div class=\"line\">              <span class=\"keyword\">if</span> (_xhr.status == <span class=\"number\">200</span>) &#123;</div><div class=\"line\">                <span class=\"comment\">//判断若有成功回调，则执行</span></div><div class=\"line\">                <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> func == <span class=\"string\">'function'</span>) &#123;func(_xhr.responseText);&#125; </div><div class=\"line\">              &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">                <span class=\"comment\">//判断若有失败回调，则执行</span></div><div class=\"line\">                <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> errfunc == <span class=\"string\">'function'</span>) &#123;errfunc();&#125;</div><div class=\"line\">              &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">          &#125;</div><div class=\"line\">        &#125;;</div><div class=\"line\">        <span class=\"comment\">//新建formData对象</span></div><div class=\"line\">        formData = <span class=\"keyword\">new</span> FormData();</div><div class=\"line\">        <span class=\"comment\">//判断是否有图片对象，有则添加进队列</span></div><div class=\"line\">        <span class=\"keyword\">if</span> (files) &#123;</div><div class=\"line\">          <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; files.length; i++) &#123;</div><div class=\"line\">            formData.append(<span class=\"string\">'file'</span>, files[i]);</div><div class=\"line\">          &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"comment\">//若有其他表单项，添加进队列</span></div><div class=\"line\">        <span class=\"keyword\">for</span> (i <span class=\"keyword\">in</span> otherparams) &#123;</div><div class=\"line\">          formData.append(i, otherparams[i]);</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"comment\">//设置POST方法，以及服务器地址</span></div><div class=\"line\">        xhr.open(<span class=\"string\">'post'</span>, params.url);</div><div class=\"line\">        onreadystatechange(callback, xhr, errback);</div><div class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">        alert(<span class=\"string\">\"浏览器不支持FormData或fileAPI\"</span>);</div><div class=\"line\">      &#125;</div><div class=\"line\">    &#125;;</div><div class=\"line\">  AsyncForm.prototype = &#123;</div><div class=\"line\">    <span class=\"comment\">//提交表单事件</span></div><div class=\"line\">    submit: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">      xhr.send(formData);</div><div class=\"line\">    &#125;,</div><div class=\"line\">  &#125;;</div><div class=\"line\">  <span class=\"keyword\">return</span> AsyncForm;</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure></p>\n<ul>\n<li>这里的fileinput参数传入file input的dom对象，其实可以直接传入file的，大家可以进行优化哦。</li>\n</ul>\n<h3 id=\"使用异步提交带图片表单的服务\"><a href=\"#使用异步提交带图片表单的服务\" class=\"headerlink\" title=\"使用异步提交带图片表单的服务\"></a>使用异步提交带图片表单的服务</h3><ul>\n<li>在控制器中需注入依赖AsyncForm</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//创建表单</span></div><div class=\"line\"><span class=\"keyword\">var</span> asform = <span class=\"keyword\">new</span> AsyncForm(&#123;</div><div class=\"line\">  <span class=\"attr\">fileinput</span>: $input, <span class=\"comment\">//传入file input的dom对象</span></div><div class=\"line\">  url: url, <span class=\"comment\">//服务器地址</span></div><div class=\"line\">  other: &#123; <span class=\"comment\">//其他需要发送的参数&#123;键：值&#125;</span></div><div class=\"line\">    name: value,</div><div class=\"line\">    <span class=\"attr\">name</span>: value,</div><div class=\"line\">  &#125;,</div><div class=\"line\">  <span class=\"attr\">callback</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">data</span>) </span>&#123;&#125;, <span class=\"comment\">//成功回调</span></div><div class=\"line\">  errback: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;&#125; <span class=\"comment\">//失败回调</span></div><div class=\"line\">&#125;);</div><div class=\"line\"><span class=\"comment\">//提交表单</span></div><div class=\"line\">asform.submit();</div></pre></td></tr></table></figure>\n<h2 id=\"结束语\"><a href=\"#结束语\" class=\"headerlink\" title=\"结束语\"></a>结束语</h2><hr>\n<p>这里没有考虑不支持HTML5时候的处理办法，大家可以私底下试试哦，提示：）可使用iframe实现哦。<br><a href=\"https://github.com/godbasin/godbasin.github.io/tree/blog-codes/angular-notes/6-asyncchronous-submit-form\">此处查看项目代码（仅包含app部分）</a></p>"},{"title":"Angular2使用笔记1--搭建Angular2项目","date":"2016-09-25T02:24:19.000Z","_content":"最近在学习Angular2作为前端的框架，《Angular2使用笔记》系列用于记录过程中的一些使用和解决方法。\n本文记录初步搭建项目的过程。\n<!--more-->\n\n## 初步使用Angular2应用\n\n### 学习Angular2教程快速起步搭建\nAngular2有个比较好的地方，就是有很详细（甚至啰嗦？玩笑话...）的[教程文档](https://angular.cn/docs/ts/latest/)。\n这里面会有个[五分钟快速起步教程](https://angular.cn/docs/ts/latest/quickstart.html)，基本步骤如下：\n- 环境准备 : 安装 Node.js\n- 步骤 1 ：创建本应用的项目文件夹，并且定义包的依赖以及特别的项目设置\n- 步骤 2: 创建本应用的 Angular 根组件\n- 步骤 3: 创建一个 Angular 模块\n- 步骤 4: 添加 main.ts ，用来告诉 Angular 哪个是根组件\n- 步骤 5: 添加 index.html ，本应用的宿主页面\n- 步骤 6: 构建并运行本应用\n\n感兴趣的小伙伴们可以按照这个教程试一遍。\n\n### 自动化搭建\n其实说白了，自动化搭建也就是把别人搭建好整理好的项目样板下载下来，然后安装和使用罢了。\n其中[Angular2 Webpack Starter](https://github.com/AngularClass/angular2-webpack-starter)和[angular2-webpack](https://github.com/preboot/angular2-webpack)算是里面比较完善和有一定使用者的吧。\n这里我们使用前者，[Angular2 Webpack Starter](https://github.com/AngularClass/angular2-webpack-starter)。\ngit上自带有比较详细的目录组织以及安装使用说明，这里我就贴过来简单讲述一下吧。\n\n## Angular2 Webpack Starter搭建\n---\n### 快速搭建\n首先确保你的Node版本 >= 5.0，NPM版本 >= 3。\n``` cmd\n# 拷贝分支\ngit clone --depth 1 https://github.com/angularclass/angular2-webpack-starter.git\n\n# 进入该文件夹\ncd angular2-webpack-starter\n\n# 安装npm依赖\nnpm install\n\n# 启动服务\nnpm start\n\n# 使用热部署\nnpm run server:dev:hmr\n\n# 若你在中国，请使用cnpm\n# https://github.com/cnpm/cnpm\n```\n安装和启动服务过后，我们可以看到页面效果如下:\n![image](http://o905ne85q.bkt.clouddn.com/4D9F.tmp.png)\n\n### 目录组织\n使用Angular2 Webpack Starter搭建后，我们能看到详细的目录组织如下：\n``` md\nangular2-webpack-starter/\n ├──config/                    * 配置文件\n |   ├──helpers.js             * helper functions for our configuration files\n |   ├──spec-bundle.js         * angular2测试环境配置文件\n |   ├──karma.conf.js          * 单元测试karma配置文件\n |   ├──protractor.conf.js     * protractor端到端测试配置文件\n │   ├──webpack.dev.js         * 开发环境webpack配置文件\n │   ├──webpack.prod.js        * 生产环境webpack配置文件\n │   └──webpack.test.js        * 测试webpack配置文件\n │\n ├──src/                       * 将会被编译成js文件的源文件\n |   ├──main.browser.ts        * 浏览器环境的入口文件\n │   │\n |   ├──index.html             * Index.html\n │   │\n |   ├──polyfills.ts           * polyfills文件\n │   │\n |   ├──vendor.ts              * vendor文件\n │   │\n │   ├──app/                   * WebApp文件夹\n │   │   ├──app.spec.ts        * app.ts中组件测试\n │   │   ├──app.e2e.ts         * 端到端测试\n │   │   └──app.ts             * App.ts组件\n │   │\n │   └──assets/                * 静态资源\n │\n ├──tslint.json                * typescript lint配置\n ├──typedoc.json               * typescript文件生成\n ├──tsconfig.json              * 设置使用typescript的webpack\n ├──package.json               * npm依赖\n └──webpack.config.js          * webpack配置文件 \n```\n这样搭建的angular2应用有个好处是带有完整的模板文件，包括组件、路由、测试等等，对如何使用angular2很有帮助。\n\n### 常用命令\n``` bash\n# server相关命令\nnpm run server // 开发环境\nnpm run server:prod // 生产环境\n\n% build相关命令\nnpm run build:dev // 开发环境\nnpm run build:prod // 生产环境\n\n# 热部署\nnpm run server:dev:hmr\n\n# 监视文件\nnpm run watch\n\n# 测试\nnpm run test\n# 监视并测试\nnpm run watch:test\n\n# 端到端测试\nnpm run e2e\n```\n生成后的文件要注意在index.html中设置根目录位置哦。\n``` html\n<!-- 根目录位置 -->\n<base href=\"/\">\n```\n\n## 结束语\n-----\nAngular2使用的最大感受就是，遇见未来。\n即使angular 1和2已经是完全的改革，但是2的一些理念和标准真的很棒呢。\n[此处查看项目代码（仅包含src部分）](https://github.com/godbasin/godbasin.github.io/tree/blog-codes/angular2-notes/1-create-angular2-project)\n[此处查看页面效果](http://oc8qsv1w6.bkt.clouddn.com/1-create-angular2-project/index.html)","source":"_posts/angular2-notes-1-create-angular2-project.md","raw":"---\ntitle: Angular2使用笔记1--搭建Angular2项目\ndate: 2016-09-25 10:24:19\ncategories: angular2火锅\ntags: 笔记\n---\n最近在学习Angular2作为前端的框架，《Angular2使用笔记》系列用于记录过程中的一些使用和解决方法。\n本文记录初步搭建项目的过程。\n<!--more-->\n\n## 初步使用Angular2应用\n\n### 学习Angular2教程快速起步搭建\nAngular2有个比较好的地方，就是有很详细（甚至啰嗦？玩笑话...）的[教程文档](https://angular.cn/docs/ts/latest/)。\n这里面会有个[五分钟快速起步教程](https://angular.cn/docs/ts/latest/quickstart.html)，基本步骤如下：\n- 环境准备 : 安装 Node.js\n- 步骤 1 ：创建本应用的项目文件夹，并且定义包的依赖以及特别的项目设置\n- 步骤 2: 创建本应用的 Angular 根组件\n- 步骤 3: 创建一个 Angular 模块\n- 步骤 4: 添加 main.ts ，用来告诉 Angular 哪个是根组件\n- 步骤 5: 添加 index.html ，本应用的宿主页面\n- 步骤 6: 构建并运行本应用\n\n感兴趣的小伙伴们可以按照这个教程试一遍。\n\n### 自动化搭建\n其实说白了，自动化搭建也就是把别人搭建好整理好的项目样板下载下来，然后安装和使用罢了。\n其中[Angular2 Webpack Starter](https://github.com/AngularClass/angular2-webpack-starter)和[angular2-webpack](https://github.com/preboot/angular2-webpack)算是里面比较完善和有一定使用者的吧。\n这里我们使用前者，[Angular2 Webpack Starter](https://github.com/AngularClass/angular2-webpack-starter)。\ngit上自带有比较详细的目录组织以及安装使用说明，这里我就贴过来简单讲述一下吧。\n\n## Angular2 Webpack Starter搭建\n---\n### 快速搭建\n首先确保你的Node版本 >= 5.0，NPM版本 >= 3。\n``` cmd\n# 拷贝分支\ngit clone --depth 1 https://github.com/angularclass/angular2-webpack-starter.git\n\n# 进入该文件夹\ncd angular2-webpack-starter\n\n# 安装npm依赖\nnpm install\n\n# 启动服务\nnpm start\n\n# 使用热部署\nnpm run server:dev:hmr\n\n# 若你在中国，请使用cnpm\n# https://github.com/cnpm/cnpm\n```\n安装和启动服务过后，我们可以看到页面效果如下:\n![image](http://o905ne85q.bkt.clouddn.com/4D9F.tmp.png)\n\n### 目录组织\n使用Angular2 Webpack Starter搭建后，我们能看到详细的目录组织如下：\n``` md\nangular2-webpack-starter/\n ├──config/                    * 配置文件\n |   ├──helpers.js             * helper functions for our configuration files\n |   ├──spec-bundle.js         * angular2测试环境配置文件\n |   ├──karma.conf.js          * 单元测试karma配置文件\n |   ├──protractor.conf.js     * protractor端到端测试配置文件\n │   ├──webpack.dev.js         * 开发环境webpack配置文件\n │   ├──webpack.prod.js        * 生产环境webpack配置文件\n │   └──webpack.test.js        * 测试webpack配置文件\n │\n ├──src/                       * 将会被编译成js文件的源文件\n |   ├──main.browser.ts        * 浏览器环境的入口文件\n │   │\n |   ├──index.html             * Index.html\n │   │\n |   ├──polyfills.ts           * polyfills文件\n │   │\n |   ├──vendor.ts              * vendor文件\n │   │\n │   ├──app/                   * WebApp文件夹\n │   │   ├──app.spec.ts        * app.ts中组件测试\n │   │   ├──app.e2e.ts         * 端到端测试\n │   │   └──app.ts             * App.ts组件\n │   │\n │   └──assets/                * 静态资源\n │\n ├──tslint.json                * typescript lint配置\n ├──typedoc.json               * typescript文件生成\n ├──tsconfig.json              * 设置使用typescript的webpack\n ├──package.json               * npm依赖\n └──webpack.config.js          * webpack配置文件 \n```\n这样搭建的angular2应用有个好处是带有完整的模板文件，包括组件、路由、测试等等，对如何使用angular2很有帮助。\n\n### 常用命令\n``` bash\n# server相关命令\nnpm run server // 开发环境\nnpm run server:prod // 生产环境\n\n% build相关命令\nnpm run build:dev // 开发环境\nnpm run build:prod // 生产环境\n\n# 热部署\nnpm run server:dev:hmr\n\n# 监视文件\nnpm run watch\n\n# 测试\nnpm run test\n# 监视并测试\nnpm run watch:test\n\n# 端到端测试\nnpm run e2e\n```\n生成后的文件要注意在index.html中设置根目录位置哦。\n``` html\n<!-- 根目录位置 -->\n<base href=\"/\">\n```\n\n## 结束语\n-----\nAngular2使用的最大感受就是，遇见未来。\n即使angular 1和2已经是完全的改革，但是2的一些理念和标准真的很棒呢。\n[此处查看项目代码（仅包含src部分）](https://github.com/godbasin/godbasin.github.io/tree/blog-codes/angular2-notes/1-create-angular2-project)\n[此处查看页面效果](http://oc8qsv1w6.bkt.clouddn.com/1-create-angular2-project/index.html)","slug":"angular2-notes-1-create-angular2-project","published":1,"updated":"2016-09-25T02:42:44.400Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cix45huf9001gxotuuoglf47n","content":"<p>最近在学习Angular2作为前端的框架，《Angular2使用笔记》系列用于记录过程中的一些使用和解决方法。<br>本文记录初步搭建项目的过程。<br><a id=\"more\"></a></p>\n<h2 id=\"初步使用Angular2应用\"><a href=\"#初步使用Angular2应用\" class=\"headerlink\" title=\"初步使用Angular2应用\"></a>初步使用Angular2应用</h2><h3 id=\"学习Angular2教程快速起步搭建\"><a href=\"#学习Angular2教程快速起步搭建\" class=\"headerlink\" title=\"学习Angular2教程快速起步搭建\"></a>学习Angular2教程快速起步搭建</h3><p>Angular2有个比较好的地方，就是有很详细（甚至啰嗦？玩笑话…）的<a href=\"https://angular.cn/docs/ts/latest/\" target=\"_blank\" rel=\"external\">教程文档</a>。<br>这里面会有个<a href=\"https://angular.cn/docs/ts/latest/quickstart.html\" target=\"_blank\" rel=\"external\">五分钟快速起步教程</a>，基本步骤如下：</p>\n<ul>\n<li>环境准备 : 安装 Node.js</li>\n<li>步骤 1 ：创建本应用的项目文件夹，并且定义包的依赖以及特别的项目设置</li>\n<li>步骤 2: 创建本应用的 Angular 根组件</li>\n<li>步骤 3: 创建一个 Angular 模块</li>\n<li>步骤 4: 添加 main.ts ，用来告诉 Angular 哪个是根组件</li>\n<li>步骤 5: 添加 index.html ，本应用的宿主页面</li>\n<li>步骤 6: 构建并运行本应用</li>\n</ul>\n<p>感兴趣的小伙伴们可以按照这个教程试一遍。</p>\n<h3 id=\"自动化搭建\"><a href=\"#自动化搭建\" class=\"headerlink\" title=\"自动化搭建\"></a>自动化搭建</h3><p>其实说白了，自动化搭建也就是把别人搭建好整理好的项目样板下载下来，然后安装和使用罢了。<br>其中<a href=\"https://github.com/AngularClass/angular2-webpack-starter\" target=\"_blank\" rel=\"external\">Angular2 Webpack Starter</a>和<a href=\"https://github.com/preboot/angular2-webpack\" target=\"_blank\" rel=\"external\">angular2-webpack</a>算是里面比较完善和有一定使用者的吧。<br>这里我们使用前者，<a href=\"https://github.com/AngularClass/angular2-webpack-starter\" target=\"_blank\" rel=\"external\">Angular2 Webpack Starter</a>。<br>git上自带有比较详细的目录组织以及安装使用说明，这里我就贴过来简单讲述一下吧。</p>\n<h2 id=\"Angular2-Webpack-Starter搭建\"><a href=\"#Angular2-Webpack-Starter搭建\" class=\"headerlink\" title=\"Angular2 Webpack Starter搭建\"></a>Angular2 Webpack Starter搭建</h2><hr>\n<h3 id=\"快速搭建\"><a href=\"#快速搭建\" class=\"headerlink\" title=\"快速搭建\"></a>快速搭建</h3><p>首先确保你的Node版本 &gt;= 5.0，NPM版本 &gt;= 3。<br><figure class=\"highlight cmd\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\"># 拷贝分支</div><div class=\"line\">git clone --depth <span class=\"number\">1</span> https://github.com/angularclass/angular2-webpack-starter.git</div><div class=\"line\"></div><div class=\"line\"># 进入该文件夹</div><div class=\"line\"><span class=\"built_in\">cd</span> angular2-webpack-starter</div><div class=\"line\"></div><div class=\"line\"># 安装npm依赖</div><div class=\"line\">npm install</div><div class=\"line\"></div><div class=\"line\"># 启动服务</div><div class=\"line\">npm <span class=\"built_in\">start</span></div><div class=\"line\"></div><div class=\"line\"># 使用热部署</div><div class=\"line\">npm run server:dev:hmr</div><div class=\"line\"></div><div class=\"line\"># 若你在中国，请使用cnpm</div><div class=\"line\"># https://github.com/cnpm/cnpm</div></pre></td></tr></table></figure></p>\n<p>安装和启动服务过后，我们可以看到页面效果如下:<br><img src=\"http://o905ne85q.bkt.clouddn.com/4D9F.tmp.png\" alt=\"image\"></p>\n<h3 id=\"目录组织\"><a href=\"#目录组织\" class=\"headerlink\" title=\"目录组织\"></a>目录组织</h3><p>使用Angular2 Webpack Starter搭建后，我们能看到详细的目录组织如下：<br><figure class=\"highlight md\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div></pre></td><td class=\"code\"><pre><div class=\"line\">angular2-webpack-starter/</div><div class=\"line\"> ├──config/                    * 配置文件</div><div class=\"line\"> |   ├──helpers.js             * helper functions for our configuration files</div><div class=\"line\"> |   ├──spec-bundle.js         * angular2测试环境配置文件</div><div class=\"line\"> |   ├──karma.conf.js          * 单元测试karma配置文件</div><div class=\"line\"> |   ├──protractor.conf.js     * protractor端到端测试配置文件</div><div class=\"line\"> │   ├──webpack.dev.js         * 开发环境webpack配置文件</div><div class=\"line\"> │   ├──webpack.prod.js        * 生产环境webpack配置文件</div><div class=\"line\"> │   └──webpack.test.js        * 测试webpack配置文件</div><div class=\"line\"> │</div><div class=\"line\"> ├──src/                       * 将会被编译成js文件的源文件</div><div class=\"line\"> |   ├──main.browser.ts        * 浏览器环境的入口文件</div><div class=\"line\"> │   │</div><div class=\"line\"> |   ├──index.html             * Index.html</div><div class=\"line\"> │   │</div><div class=\"line\"> |   ├──polyfills.ts           * polyfills文件</div><div class=\"line\"> │   │</div><div class=\"line\"> |   ├──vendor.ts              * vendor文件</div><div class=\"line\"> │   │</div><div class=\"line\"> │   ├──app/                   * WebApp文件夹</div><div class=\"line\"> │   │   ├──app.spec.ts        * app.ts中组件测试</div><div class=\"line\"> │   │   ├──app.e2e.ts         * 端到端测试</div><div class=\"line\"> │   │   └──app.ts             * App.ts组件</div><div class=\"line\"> │   │</div><div class=\"line\"> │   └──assets/                * 静态资源</div><div class=\"line\"> │</div><div class=\"line\"> ├──tslint.json                * typescript lint配置</div><div class=\"line\"> ├──typedoc.json               * typescript文件生成</div><div class=\"line\"> ├──tsconfig.json              * 设置使用typescript的webpack</div><div class=\"line\"> ├──package.json               * npm依赖</div><div class=\"line\"> └──webpack.config.js          * webpack配置文件</div></pre></td></tr></table></figure></p>\n<p>这样搭建的angular2应用有个好处是带有完整的模板文件，包括组件、路由、测试等等，对如何使用angular2很有帮助。</p>\n<h3 id=\"常用命令\"><a href=\"#常用命令\" class=\"headerlink\" title=\"常用命令\"></a>常用命令</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># server相关命令</span></div><div class=\"line\">npm run server // 开发环境</div><div class=\"line\">npm run server:prod // 生产环境</div><div class=\"line\"></div><div class=\"line\">% build相关命令</div><div class=\"line\">npm run build:dev // 开发环境</div><div class=\"line\">npm run build:prod // 生产环境</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># 热部署</span></div><div class=\"line\">npm run server:dev:hmr</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># 监视文件</span></div><div class=\"line\">npm run watch</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># 测试</span></div><div class=\"line\">npm run <span class=\"built_in\">test</span></div><div class=\"line\"><span class=\"comment\"># 监视并测试</span></div><div class=\"line\">npm run watch:<span class=\"built_in\">test</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># 端到端测试</span></div><div class=\"line\">npm run e2e</div></pre></td></tr></table></figure>\n<p>生成后的文件要注意在index.html中设置根目录位置哦。<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">&lt;!-- 根目录位置 --&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">base</span> <span class=\"attr\">href</span>=<span class=\"string\">\"/\"</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<h2 id=\"结束语\"><a href=\"#结束语\" class=\"headerlink\" title=\"结束语\"></a>结束语</h2><hr>\n<p>Angular2使用的最大感受就是，遇见未来。<br>即使angular 1和2已经是完全的改革，但是2的一些理念和标准真的很棒呢。<br><a href=\"https://github.com/godbasin/godbasin.github.io/tree/blog-codes/angular2-notes/1-create-angular2-project\" target=\"_blank\" rel=\"external\">此处查看项目代码（仅包含src部分）</a><br><a href=\"http://oc8qsv1w6.bkt.clouddn.com/1-create-angular2-project/index.html\" target=\"_blank\" rel=\"external\">此处查看页面效果</a></p>\n","excerpt":"<p>最近在学习Angular2作为前端的框架，《Angular2使用笔记》系列用于记录过程中的一些使用和解决方法。<br>本文记录初步搭建项目的过程。<br>","more":"</p>\n<h2 id=\"初步使用Angular2应用\"><a href=\"#初步使用Angular2应用\" class=\"headerlink\" title=\"初步使用Angular2应用\"></a>初步使用Angular2应用</h2><h3 id=\"学习Angular2教程快速起步搭建\"><a href=\"#学习Angular2教程快速起步搭建\" class=\"headerlink\" title=\"学习Angular2教程快速起步搭建\"></a>学习Angular2教程快速起步搭建</h3><p>Angular2有个比较好的地方，就是有很详细（甚至啰嗦？玩笑话…）的<a href=\"https://angular.cn/docs/ts/latest/\">教程文档</a>。<br>这里面会有个<a href=\"https://angular.cn/docs/ts/latest/quickstart.html\">五分钟快速起步教程</a>，基本步骤如下：</p>\n<ul>\n<li>环境准备 : 安装 Node.js</li>\n<li>步骤 1 ：创建本应用的项目文件夹，并且定义包的依赖以及特别的项目设置</li>\n<li>步骤 2: 创建本应用的 Angular 根组件</li>\n<li>步骤 3: 创建一个 Angular 模块</li>\n<li>步骤 4: 添加 main.ts ，用来告诉 Angular 哪个是根组件</li>\n<li>步骤 5: 添加 index.html ，本应用的宿主页面</li>\n<li>步骤 6: 构建并运行本应用</li>\n</ul>\n<p>感兴趣的小伙伴们可以按照这个教程试一遍。</p>\n<h3 id=\"自动化搭建\"><a href=\"#自动化搭建\" class=\"headerlink\" title=\"自动化搭建\"></a>自动化搭建</h3><p>其实说白了，自动化搭建也就是把别人搭建好整理好的项目样板下载下来，然后安装和使用罢了。<br>其中<a href=\"https://github.com/AngularClass/angular2-webpack-starter\">Angular2 Webpack Starter</a>和<a href=\"https://github.com/preboot/angular2-webpack\">angular2-webpack</a>算是里面比较完善和有一定使用者的吧。<br>这里我们使用前者，<a href=\"https://github.com/AngularClass/angular2-webpack-starter\">Angular2 Webpack Starter</a>。<br>git上自带有比较详细的目录组织以及安装使用说明，这里我就贴过来简单讲述一下吧。</p>\n<h2 id=\"Angular2-Webpack-Starter搭建\"><a href=\"#Angular2-Webpack-Starter搭建\" class=\"headerlink\" title=\"Angular2 Webpack Starter搭建\"></a>Angular2 Webpack Starter搭建</h2><hr>\n<h3 id=\"快速搭建\"><a href=\"#快速搭建\" class=\"headerlink\" title=\"快速搭建\"></a>快速搭建</h3><p>首先确保你的Node版本 &gt;= 5.0，NPM版本 &gt;= 3。<br><figure class=\"highlight cmd\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\"># 拷贝分支</div><div class=\"line\">git clone --depth <span class=\"number\">1</span> https://github.com/angularclass/angular2-webpack-starter.git</div><div class=\"line\"></div><div class=\"line\"># 进入该文件夹</div><div class=\"line\"><span class=\"built_in\">cd</span> angular2-webpack-starter</div><div class=\"line\"></div><div class=\"line\"># 安装npm依赖</div><div class=\"line\">npm install</div><div class=\"line\"></div><div class=\"line\"># 启动服务</div><div class=\"line\">npm <span class=\"built_in\">start</span></div><div class=\"line\"></div><div class=\"line\"># 使用热部署</div><div class=\"line\">npm run server:dev:hmr</div><div class=\"line\"></div><div class=\"line\"># 若你在中国，请使用cnpm</div><div class=\"line\"># https://github.com/cnpm/cnpm</div></pre></td></tr></table></figure></p>\n<p>安装和启动服务过后，我们可以看到页面效果如下:<br><img src=\"http://o905ne85q.bkt.clouddn.com/4D9F.tmp.png\" alt=\"image\"></p>\n<h3 id=\"目录组织\"><a href=\"#目录组织\" class=\"headerlink\" title=\"目录组织\"></a>目录组织</h3><p>使用Angular2 Webpack Starter搭建后，我们能看到详细的目录组织如下：<br><figure class=\"highlight md\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div></pre></td><td class=\"code\"><pre><div class=\"line\">angular2-webpack-starter/</div><div class=\"line\"> ├──config/                    * 配置文件</div><div class=\"line\"> |   ├──helpers.js             * helper functions for our configuration files</div><div class=\"line\"> |   ├──spec-bundle.js         * angular2测试环境配置文件</div><div class=\"line\"> |   ├──karma.conf.js          * 单元测试karma配置文件</div><div class=\"line\"> |   ├──protractor.conf.js     * protractor端到端测试配置文件</div><div class=\"line\"> │   ├──webpack.dev.js         * 开发环境webpack配置文件</div><div class=\"line\"> │   ├──webpack.prod.js        * 生产环境webpack配置文件</div><div class=\"line\"> │   └──webpack.test.js        * 测试webpack配置文件</div><div class=\"line\"> │</div><div class=\"line\"> ├──src/                       * 将会被编译成js文件的源文件</div><div class=\"line\"> |   ├──main.browser.ts        * 浏览器环境的入口文件</div><div class=\"line\"> │   │</div><div class=\"line\"> |   ├──index.html             * Index.html</div><div class=\"line\"> │   │</div><div class=\"line\"> |   ├──polyfills.ts           * polyfills文件</div><div class=\"line\"> │   │</div><div class=\"line\"> |   ├──vendor.ts              * vendor文件</div><div class=\"line\"> │   │</div><div class=\"line\"> │   ├──app/                   * WebApp文件夹</div><div class=\"line\"> │   │   ├──app.spec.ts        * app.ts中组件测试</div><div class=\"line\"> │   │   ├──app.e2e.ts         * 端到端测试</div><div class=\"line\"> │   │   └──app.ts             * App.ts组件</div><div class=\"line\"> │   │</div><div class=\"line\"> │   └──assets/                * 静态资源</div><div class=\"line\"> │</div><div class=\"line\"> ├──tslint.json                * typescript lint配置</div><div class=\"line\"> ├──typedoc.json               * typescript文件生成</div><div class=\"line\"> ├──tsconfig.json              * 设置使用typescript的webpack</div><div class=\"line\"> ├──package.json               * npm依赖</div><div class=\"line\"> └──webpack.config.js          * webpack配置文件</div></pre></td></tr></table></figure></p>\n<p>这样搭建的angular2应用有个好处是带有完整的模板文件，包括组件、路由、测试等等，对如何使用angular2很有帮助。</p>\n<h3 id=\"常用命令\"><a href=\"#常用命令\" class=\"headerlink\" title=\"常用命令\"></a>常用命令</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># server相关命令</span></div><div class=\"line\">npm run server // 开发环境</div><div class=\"line\">npm run server:prod // 生产环境</div><div class=\"line\"></div><div class=\"line\">% build相关命令</div><div class=\"line\">npm run build:dev // 开发环境</div><div class=\"line\">npm run build:prod // 生产环境</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># 热部署</span></div><div class=\"line\">npm run server:dev:hmr</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># 监视文件</span></div><div class=\"line\">npm run watch</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># 测试</span></div><div class=\"line\">npm run <span class=\"built_in\">test</span></div><div class=\"line\"><span class=\"comment\"># 监视并测试</span></div><div class=\"line\">npm run watch:<span class=\"built_in\">test</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># 端到端测试</span></div><div class=\"line\">npm run e2e</div></pre></td></tr></table></figure>\n<p>生成后的文件要注意在index.html中设置根目录位置哦。<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">&lt;!-- 根目录位置 --&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">base</span> <span class=\"attr\">href</span>=<span class=\"string\">\"/\"</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<h2 id=\"结束语\"><a href=\"#结束语\" class=\"headerlink\" title=\"结束语\"></a>结束语</h2><hr>\n<p>Angular2使用的最大感受就是，遇见未来。<br>即使angular 1和2已经是完全的改革，但是2的一些理念和标准真的很棒呢。<br><a href=\"https://github.com/godbasin/godbasin.github.io/tree/blog-codes/angular2-notes/1-create-angular2-project\">此处查看项目代码（仅包含src部分）</a><br><a href=\"http://oc8qsv1w6.bkt.clouddn.com/1-create-angular2-project/index.html\">此处查看页面效果</a></p>"},{"title":"Angular2使用笔记3--创建头部组件","date":"2016-10-07T03:17:48.000Z","_content":"最近在学习Angular2作为前端的框架，《Angular2使用笔记》系列用于记录过程中的一些使用和解决方法。\n本文记录创建头部组件的过程。\n<!--more-->\n\n## 创建头部菜单\n-----\n该头部菜单与前几个框架的使用笔记中完全一致。如图：\n![image](http://o905ne85q.bkt.clouddn.com/C902.tmp.png)\n\n### 添加头部组件相关文件\n- 添加header文件夹，用于管理Header组件的相关文件\nHeader组件文件如下：\n\n``` cmd\nheader/\n ├──index.ts                   * 导出该目录下组件\n ├──header.component.ts        * 定义并导出Header组件\n ├──header.style.css           * Header组件的css样式\n └──header.template.html       * Header组件的html模板\n```\n\n### 添加组件模板\nheader.template.html文件，如下\n``` typescript\n<nav class=\"navbar navbar-default header\">\n    <div class=\"container-fluid\">\n        <div class=\"navbar-header\">\n            <a class=\"navbar-brand\" href=\"#\">Godbasin</a>\n        </div>\n        <div class=\"collapse navbar-collapse\" id=\"bs-example-navbar-collapse-1\">\n            <ul class=\"nav navbar-nav\">\n                <!--menus为主菜单-->\n                <li *ngFor=\"let menu of menus\" routerLinkActive=\"active\"><a routerLink=\"{{ menu.href }}\">{{ menu.text }}<span [hidden]=\"!menu.current\" class=\"sr-only\">(current)</span></a></li>\n            </ul>\n            <ul class=\"nav navbar-nav navbar-right\">\n                <li><a>{{ clock }}</a></li>\n                <li class=\"dropdown\">\n                    <a href=\"\" class=\"dropdown-toggle\" data-toggle=\"dropdown\" role=\"button\" aria-haspopup=\"true\" aria-expanded=\"false\">菜单 <span class=\"caret\"></span></a>\n                    <ul class=\"dropdown-menu\">\n                        <!--usermenus为右侧下拉菜单-->\n                        <li *ngFor=\"let usermenu of usermenus\"><a href=\"{{ usermenu.href }}\">{{ usermenu.text }}</a></li>\n                    </ul>\n                </li>\n            </ul>\n        </div>\n    </div>\n</nav>\n```\n\n这里我们用到了ng2的路由器携带的属性绑定\n- RouterLink绑定\n  - A标签中，有一个绑定RouterLink指令的属性绑定\n  - 可以通过提供查询字符串参数为RouterLink提供更多情境信息\n  - 可提供一个URL片段（Fragment或hash）来跳转到本页面中的其它区域\n- RouterLinkActive绑定\n  - 每个A标签还有一个到RouterLinkActive指令的属性绑定\n  - 等号（=）右侧的模板表达式包含用空格分隔的一些CSS类，还可以把RouterLinkActive指令绑定到一个CSS类组成的数组\n  - 用于在相关的RouterLink被激活时为所在元素添加或移除CSS类。 该指令可以直接添加到该元素上，也可以添加到其父元素上\n\n### 定义Header组件\n- 添加组件样式header.style.css，这里就不展示出来了\n- 在header.component.ts文件中，如下\n\n``` typescript\nimport { Component } from '@angular/core';\n\n@Component({\n  selector: 'my-header',\n  styles: [`\n  `],\n  templateUrl: './header.template.html'\n})\nexport class Header {\n  // clock用于保存时间\n  clock: string = '';\n  clockTime;\n  // menus用于储存主菜单\n  menus = [{\n    title: 'index', // title用于储存路由对应的路径\n    href: '/index', // href用于设定该菜单跳转路由\n    text: '首页', // text用于储存该菜单显示名称\n  }, {\n      title: 'others',\n      href: '/other',\n      text: '其他',\n    }];\n  // usermenus用于储存侧边下拉菜单\n  usermenus = [{\n    href: '/login', // href用于设定该菜单跳转路由\n    text: '退出', // text用于储存该菜单显示名称\n  }];\n\n  // 用于格式化时间（少于10在前面增加0）\n  numberStandard(num) {\n    let _val = Number(num), _num;\n    _num = (_val < 10) ? ('0' + _val) : ('' + _val);\n    return _num;\n  }\n\n  // 用于渲染时钟\n  renderClock() {\n    let _date = new Date(), clock = '';\n    clock += _date.getFullYear() + '年' + (_date.getMonth() + 1) + '月' + _date.getDate() + '日';\n    clock += ' ' + this.numberStandard(_date.getHours()) +\n      ':' + this.numberStandard(_date.getMinutes()) +\n      ':' + this.numberStandard(_date.getSeconds());\n    this.clock = clock;\n  }\n\n  ngOnInit() {\n    // 使用bind解决setInterval的执行环境问题\n    this.clockTime = setInterval(this.renderClock.bind(this), 500);\n  }\n\n  ngOnDestroy() {\n    // 控件摧毁时移除定时事件\n    clearInterval(this.clockTime);\n  }\n}\n```\n\n- 这里使用到的生命周期的钩子\n  - ngOnInit：当每个输入属性的值都被触发了一次ngOnChanges之后才会调用ngOnInit，此时所有输入属性都已经有了正确的初始绑定值\n  - ngOnDestroy：当Angular每次销毁指令/组件之前调用\n  - 其他生命周期的钩子请参照[组件生命周期](https://angular.cn/docs/ts/latest/guide/lifecycle-hooks.html)\n\n此时，我们已经完成了一个组件的创建了，接下来我们要把这个组件注入到其他模板。\n\n### 参考\n- [路由与导航](https://angular.cn/docs/ts/latest/guide/router.html#!#navigate)\n\n## 组件的使用和依赖注入\n---\n在angular1中，我们已经了解到依赖注入这个词，而ng2和ng1中的依赖注入也有区别。\n\n### 依赖注入\n- 什么是依赖注入\n  - “依赖注入”是提供类的新实例的一种方式，还负责处理好类所需的全部依赖\n  - 大多数依赖都是服务\n  - Angular也使用依赖注入提供我们需要的组件以及这些组件所需的服务\n- 有关依赖注入\n  - 依赖注入渗透在整个Angular框架中，并且被到处使用\n  - 注入器（Injector）是本机制的核心\n    - 注入器负责维护一个容器，用于存放它创建过的服务实例\n    - 注入器能使用提供商创建一个新的服务实例\n  - 提供商是一个用于创建服务的“配方”\n  - 把提供商注册到注入器\n\n### ng2中的依赖注入\n- 当Angular创建组件时，会首先为组件所需的服务找一个注入器（Injector）\n- 注入器是一个维护服务实例的容器，存放着以前创建的实例\n- 如果容器中还没有所请求的服务实例，注入器就会创建一个服务实例，并且添加到容器中，然后把这个服务返回给Angular\n- 当所有的服务都被解析完并返回时，Angular会以这些服务为参数去调用组件的构造函数\n\n### 通过指令注入组件\n上一节虽然我们也创建了一个登陆页面的组件，Login组件直接在路由中使用。这里我们将尝试在主页面app.component.ts中使用Header组件。\n``` jsx\n// 这里只展示相关的代码\n// 添加Header组件，默认从header文件夹的index.ts中获取\nimport { Header } from './header';\n// 定义主页面组件\n@Component({\n  selector: 'app',\n  encapsulation: ViewEncapsulation.None,\n  styleUrls: [\n    './app.style.css'\n  ],\n  template: `\n    <!--插入头部组件，注入指令后生效-->\n    <my-header></my-header>\n     <main>\n      <router-outlet></router-outlet>\n    </main>\n  `,\n  // 注入指令\n  directives: [Header]\n})\n```\n\n此时算是完成了一个组件的创建以及使用，如图：\n![image](http://o905ne85q.bkt.clouddn.com/15D3.tmp.png)\n\n### 参考\n- [依赖注入--烹饪宝典](https://angular.cn/docs/ts/latest/cookbook/dependency-injection.html)\n- [依赖注入--基础知识](https://angular.cn/docs/ts/latest/guide/dependency-injection.html)\n\n## 结束语\n-----\n不得不说，使用angular2-webpack-starter快速搭建项目之后，对ng2的很多使用方法也比较了解了。\n毕竟ng2虽然有很详细的官方教程，但是要看完也是很需要耐心和恒心的呢，哈哈哈哈:)\n[此处查看项目代码（仅包含src部分）](https://github.com/godbasin/godbasin.github.io/tree/blog-codes/angular2-notes/3-create-header)\n[此处查看页面效果](http://oc8qsv1w6.bkt.clouddn.com/3-create-header/index.html)\n","source":"_posts/angular2-notes-3-create-header.md","raw":"---\ntitle:  Angular2使用笔记3--创建头部组件\ndate: 2016-10-07 11:17:48\ncategories: angular2火锅\ntags: 笔记\n---\n最近在学习Angular2作为前端的框架，《Angular2使用笔记》系列用于记录过程中的一些使用和解决方法。\n本文记录创建头部组件的过程。\n<!--more-->\n\n## 创建头部菜单\n-----\n该头部菜单与前几个框架的使用笔记中完全一致。如图：\n![image](http://o905ne85q.bkt.clouddn.com/C902.tmp.png)\n\n### 添加头部组件相关文件\n- 添加header文件夹，用于管理Header组件的相关文件\nHeader组件文件如下：\n\n``` cmd\nheader/\n ├──index.ts                   * 导出该目录下组件\n ├──header.component.ts        * 定义并导出Header组件\n ├──header.style.css           * Header组件的css样式\n └──header.template.html       * Header组件的html模板\n```\n\n### 添加组件模板\nheader.template.html文件，如下\n``` typescript\n<nav class=\"navbar navbar-default header\">\n    <div class=\"container-fluid\">\n        <div class=\"navbar-header\">\n            <a class=\"navbar-brand\" href=\"#\">Godbasin</a>\n        </div>\n        <div class=\"collapse navbar-collapse\" id=\"bs-example-navbar-collapse-1\">\n            <ul class=\"nav navbar-nav\">\n                <!--menus为主菜单-->\n                <li *ngFor=\"let menu of menus\" routerLinkActive=\"active\"><a routerLink=\"{{ menu.href }}\">{{ menu.text }}<span [hidden]=\"!menu.current\" class=\"sr-only\">(current)</span></a></li>\n            </ul>\n            <ul class=\"nav navbar-nav navbar-right\">\n                <li><a>{{ clock }}</a></li>\n                <li class=\"dropdown\">\n                    <a href=\"\" class=\"dropdown-toggle\" data-toggle=\"dropdown\" role=\"button\" aria-haspopup=\"true\" aria-expanded=\"false\">菜单 <span class=\"caret\"></span></a>\n                    <ul class=\"dropdown-menu\">\n                        <!--usermenus为右侧下拉菜单-->\n                        <li *ngFor=\"let usermenu of usermenus\"><a href=\"{{ usermenu.href }}\">{{ usermenu.text }}</a></li>\n                    </ul>\n                </li>\n            </ul>\n        </div>\n    </div>\n</nav>\n```\n\n这里我们用到了ng2的路由器携带的属性绑定\n- RouterLink绑定\n  - A标签中，有一个绑定RouterLink指令的属性绑定\n  - 可以通过提供查询字符串参数为RouterLink提供更多情境信息\n  - 可提供一个URL片段（Fragment或hash）来跳转到本页面中的其它区域\n- RouterLinkActive绑定\n  - 每个A标签还有一个到RouterLinkActive指令的属性绑定\n  - 等号（=）右侧的模板表达式包含用空格分隔的一些CSS类，还可以把RouterLinkActive指令绑定到一个CSS类组成的数组\n  - 用于在相关的RouterLink被激活时为所在元素添加或移除CSS类。 该指令可以直接添加到该元素上，也可以添加到其父元素上\n\n### 定义Header组件\n- 添加组件样式header.style.css，这里就不展示出来了\n- 在header.component.ts文件中，如下\n\n``` typescript\nimport { Component } from '@angular/core';\n\n@Component({\n  selector: 'my-header',\n  styles: [`\n  `],\n  templateUrl: './header.template.html'\n})\nexport class Header {\n  // clock用于保存时间\n  clock: string = '';\n  clockTime;\n  // menus用于储存主菜单\n  menus = [{\n    title: 'index', // title用于储存路由对应的路径\n    href: '/index', // href用于设定该菜单跳转路由\n    text: '首页', // text用于储存该菜单显示名称\n  }, {\n      title: 'others',\n      href: '/other',\n      text: '其他',\n    }];\n  // usermenus用于储存侧边下拉菜单\n  usermenus = [{\n    href: '/login', // href用于设定该菜单跳转路由\n    text: '退出', // text用于储存该菜单显示名称\n  }];\n\n  // 用于格式化时间（少于10在前面增加0）\n  numberStandard(num) {\n    let _val = Number(num), _num;\n    _num = (_val < 10) ? ('0' + _val) : ('' + _val);\n    return _num;\n  }\n\n  // 用于渲染时钟\n  renderClock() {\n    let _date = new Date(), clock = '';\n    clock += _date.getFullYear() + '年' + (_date.getMonth() + 1) + '月' + _date.getDate() + '日';\n    clock += ' ' + this.numberStandard(_date.getHours()) +\n      ':' + this.numberStandard(_date.getMinutes()) +\n      ':' + this.numberStandard(_date.getSeconds());\n    this.clock = clock;\n  }\n\n  ngOnInit() {\n    // 使用bind解决setInterval的执行环境问题\n    this.clockTime = setInterval(this.renderClock.bind(this), 500);\n  }\n\n  ngOnDestroy() {\n    // 控件摧毁时移除定时事件\n    clearInterval(this.clockTime);\n  }\n}\n```\n\n- 这里使用到的生命周期的钩子\n  - ngOnInit：当每个输入属性的值都被触发了一次ngOnChanges之后才会调用ngOnInit，此时所有输入属性都已经有了正确的初始绑定值\n  - ngOnDestroy：当Angular每次销毁指令/组件之前调用\n  - 其他生命周期的钩子请参照[组件生命周期](https://angular.cn/docs/ts/latest/guide/lifecycle-hooks.html)\n\n此时，我们已经完成了一个组件的创建了，接下来我们要把这个组件注入到其他模板。\n\n### 参考\n- [路由与导航](https://angular.cn/docs/ts/latest/guide/router.html#!#navigate)\n\n## 组件的使用和依赖注入\n---\n在angular1中，我们已经了解到依赖注入这个词，而ng2和ng1中的依赖注入也有区别。\n\n### 依赖注入\n- 什么是依赖注入\n  - “依赖注入”是提供类的新实例的一种方式，还负责处理好类所需的全部依赖\n  - 大多数依赖都是服务\n  - Angular也使用依赖注入提供我们需要的组件以及这些组件所需的服务\n- 有关依赖注入\n  - 依赖注入渗透在整个Angular框架中，并且被到处使用\n  - 注入器（Injector）是本机制的核心\n    - 注入器负责维护一个容器，用于存放它创建过的服务实例\n    - 注入器能使用提供商创建一个新的服务实例\n  - 提供商是一个用于创建服务的“配方”\n  - 把提供商注册到注入器\n\n### ng2中的依赖注入\n- 当Angular创建组件时，会首先为组件所需的服务找一个注入器（Injector）\n- 注入器是一个维护服务实例的容器，存放着以前创建的实例\n- 如果容器中还没有所请求的服务实例，注入器就会创建一个服务实例，并且添加到容器中，然后把这个服务返回给Angular\n- 当所有的服务都被解析完并返回时，Angular会以这些服务为参数去调用组件的构造函数\n\n### 通过指令注入组件\n上一节虽然我们也创建了一个登陆页面的组件，Login组件直接在路由中使用。这里我们将尝试在主页面app.component.ts中使用Header组件。\n``` jsx\n// 这里只展示相关的代码\n// 添加Header组件，默认从header文件夹的index.ts中获取\nimport { Header } from './header';\n// 定义主页面组件\n@Component({\n  selector: 'app',\n  encapsulation: ViewEncapsulation.None,\n  styleUrls: [\n    './app.style.css'\n  ],\n  template: `\n    <!--插入头部组件，注入指令后生效-->\n    <my-header></my-header>\n     <main>\n      <router-outlet></router-outlet>\n    </main>\n  `,\n  // 注入指令\n  directives: [Header]\n})\n```\n\n此时算是完成了一个组件的创建以及使用，如图：\n![image](http://o905ne85q.bkt.clouddn.com/15D3.tmp.png)\n\n### 参考\n- [依赖注入--烹饪宝典](https://angular.cn/docs/ts/latest/cookbook/dependency-injection.html)\n- [依赖注入--基础知识](https://angular.cn/docs/ts/latest/guide/dependency-injection.html)\n\n## 结束语\n-----\n不得不说，使用angular2-webpack-starter快速搭建项目之后，对ng2的很多使用方法也比较了解了。\n毕竟ng2虽然有很详细的官方教程，但是要看完也是很需要耐心和恒心的呢，哈哈哈哈:)\n[此处查看项目代码（仅包含src部分）](https://github.com/godbasin/godbasin.github.io/tree/blog-codes/angular2-notes/3-create-header)\n[此处查看页面效果](http://oc8qsv1w6.bkt.clouddn.com/3-create-header/index.html)\n","slug":"angular2-notes-3-create-header","published":1,"updated":"2016-10-07T03:18:26.815Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cix45hufc001jxotum3km2pt3","content":"<p>最近在学习Angular2作为前端的框架，《Angular2使用笔记》系列用于记录过程中的一些使用和解决方法。<br>本文记录创建头部组件的过程。<br><a id=\"more\"></a></p>\n<h2 id=\"创建头部菜单\"><a href=\"#创建头部菜单\" class=\"headerlink\" title=\"创建头部菜单\"></a>创建头部菜单</h2><hr>\n<p>该头部菜单与前几个框架的使用笔记中完全一致。如图：<br><img src=\"http://o905ne85q.bkt.clouddn.com/C902.tmp.png\" alt=\"image\"></p>\n<h3 id=\"添加头部组件相关文件\"><a href=\"#添加头部组件相关文件\" class=\"headerlink\" title=\"添加头部组件相关文件\"></a>添加头部组件相关文件</h3><ul>\n<li>添加header文件夹，用于管理Header组件的相关文件<br>Header组件文件如下：</li>\n</ul>\n<figure class=\"highlight cmd\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">header/</div><div class=\"line\"> ├──index.ts                   * 导出该目录下组件</div><div class=\"line\"> ├──header.component.ts        * 定义并导出Header组件</div><div class=\"line\"> ├──header.style.css           * Header组件的css样式</div><div class=\"line\"> └──header.template.html       * Header组件的html模板</div></pre></td></tr></table></figure>\n<h3 id=\"添加组件模板\"><a href=\"#添加组件模板\" class=\"headerlink\" title=\"添加组件模板\"></a>添加组件模板</h3><p>header.template.html文件，如下<br><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;nav class=\"navbar navbar-default header\"&gt;</div><div class=\"line\">    &lt;div class=\"container-fluid\"&gt;</div><div class=\"line\">        &lt;div class=\"navbar-header\"&gt;</div><div class=\"line\">            &lt;a class=\"navbar-brand\" href=\"#\"&gt;Godbasin&lt;/a&gt;</div><div class=\"line\">        &lt;/div&gt;</div><div class=\"line\">        &lt;div class=\"collapse navbar-collapse\" id=\"bs-example-navbar-collapse-1\"&gt;</div><div class=\"line\">            &lt;ul class=\"nav navbar-nav\"&gt;</div><div class=\"line\">                &lt;!--menus为主菜单--&gt;</div><div class=\"line\">                &lt;li *ngFor=\"let menu of menus\" routerLinkActive=\"active\"&gt;&lt;a routerLink=\"&#123;&#123; menu.href &#125;&#125;\"&gt;&#123;&#123; menu.text &#125;&#125;&lt;span [hidden]=\"!menu.current\" class=\"sr-only\"&gt;(current)&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;</div><div class=\"line\">            &lt;/ul&gt;</div><div class=\"line\">            &lt;ul class=\"nav navbar-nav navbar-right\"&gt;</div><div class=\"line\">                &lt;li&gt;&lt;a&gt;&#123;&#123; clock &#125;&#125;&lt;/a&gt;&lt;/li&gt;</div><div class=\"line\">                &lt;li class=\"dropdown\"&gt;</div><div class=\"line\">                    &lt;a href=\"\" class=\"dropdown-toggle\" data-toggle=\"dropdown\" role=\"button\" aria-haspopup=\"true\" aria-expanded=\"false\"&gt;菜单 &lt;span class=\"caret\"&gt;&lt;/span&gt;&lt;/a&gt;</div><div class=\"line\">                    &lt;ul class=\"dropdown-menu\"&gt;</div><div class=\"line\">                        &lt;!--usermenus为右侧下拉菜单--&gt;</div><div class=\"line\">                        &lt;li *ngFor=\"let usermenu of usermenus\"&gt;&lt;a href=\"&#123;&#123; usermenu.href &#125;&#125;\"&gt;&#123;&#123; usermenu.text &#125;&#125;&lt;/a&gt;&lt;/li&gt;</div><div class=\"line\">                    &lt;/ul&gt;</div><div class=\"line\">                &lt;/li&gt;</div><div class=\"line\">            &lt;/ul&gt;</div><div class=\"line\">        &lt;/div&gt;</div><div class=\"line\">    &lt;/div&gt;</div><div class=\"line\">&lt;/nav&gt;</div></pre></td></tr></table></figure></p>\n<p>这里我们用到了ng2的路由器携带的属性绑定</p>\n<ul>\n<li>RouterLink绑定<ul>\n<li>A标签中，有一个绑定RouterLink指令的属性绑定</li>\n<li>可以通过提供查询字符串参数为RouterLink提供更多情境信息</li>\n<li>可提供一个URL片段（Fragment或hash）来跳转到本页面中的其它区域</li>\n</ul>\n</li>\n<li>RouterLinkActive绑定<ul>\n<li>每个A标签还有一个到RouterLinkActive指令的属性绑定</li>\n<li>等号（=）右侧的模板表达式包含用空格分隔的一些CSS类，还可以把RouterLinkActive指令绑定到一个CSS类组成的数组</li>\n<li>用于在相关的RouterLink被激活时为所在元素添加或移除CSS类。 该指令可以直接添加到该元素上，也可以添加到其父元素上</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"定义Header组件\"><a href=\"#定义Header组件\" class=\"headerlink\" title=\"定义Header组件\"></a>定义Header组件</h3><ul>\n<li>添加组件样式header.style.css，这里就不展示出来了</li>\n<li>在header.component.ts文件中，如下</li>\n</ul>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> &#123; Component &#125; from <span class=\"string\">'@angular/core'</span>;</div><div class=\"line\"></div><div class=\"line\">@Component(&#123;</div><div class=\"line\">  selector: <span class=\"string\">'my-header'</span>,</div><div class=\"line\">  styles: [<span class=\"string\">`</span></div><div class=\"line\">  `],</div><div class=\"line\">  templateUrl: <span class=\"string\">'./header.template.html'</span></div><div class=\"line\">&#125;)</div><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> Header &#123;</div><div class=\"line\">  <span class=\"comment\">// clock用于保存时间</span></div><div class=\"line\">  clock: <span class=\"built_in\">string</span> = <span class=\"string\">''</span>;</div><div class=\"line\">  clockTime;</div><div class=\"line\">  <span class=\"comment\">// menus用于储存主菜单</span></div><div class=\"line\">  menus = [&#123;</div><div class=\"line\">    title: <span class=\"string\">'index'</span>, <span class=\"comment\">// title用于储存路由对应的路径</span></div><div class=\"line\">    href: <span class=\"string\">'/index'</span>, <span class=\"comment\">// href用于设定该菜单跳转路由</span></div><div class=\"line\">    text: <span class=\"string\">'首页'</span>, <span class=\"comment\">// text用于储存该菜单显示名称</span></div><div class=\"line\">  &#125;, &#123;</div><div class=\"line\">      title: <span class=\"string\">'others'</span>,</div><div class=\"line\">      href: <span class=\"string\">'/other'</span>,</div><div class=\"line\">      text: <span class=\"string\">'其他'</span>,</div><div class=\"line\">    &#125;];</div><div class=\"line\">  <span class=\"comment\">// usermenus用于储存侧边下拉菜单</span></div><div class=\"line\">  usermenus = [&#123;</div><div class=\"line\">    href: <span class=\"string\">'/login'</span>, <span class=\"comment\">// href用于设定该菜单跳转路由</span></div><div class=\"line\">    text: <span class=\"string\">'退出'</span>, <span class=\"comment\">// text用于储存该菜单显示名称</span></div><div class=\"line\">  &#125;];</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">// 用于格式化时间（少于10在前面增加0）</span></div><div class=\"line\">  numberStandard(num) &#123;</div><div class=\"line\">    <span class=\"keyword\">let</span> _val = <span class=\"built_in\">Number</span>(num), _num;</div><div class=\"line\">    _num = (_val &lt; <span class=\"number\">10</span>) ? (<span class=\"string\">'0'</span> + _val) : (<span class=\"string\">''</span> + _val);</div><div class=\"line\">    <span class=\"keyword\">return</span> _num;</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">// 用于渲染时钟</span></div><div class=\"line\">  renderClock() &#123;</div><div class=\"line\">    <span class=\"keyword\">let</span> _date = <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>(), clock = <span class=\"string\">''</span>;</div><div class=\"line\">    clock += _date.getFullYear() + <span class=\"string\">'年'</span> + (_date.getMonth() + <span class=\"number\">1</span>) + <span class=\"string\">'月'</span> + _date.getDate() + <span class=\"string\">'日'</span>;</div><div class=\"line\">    clock += <span class=\"string\">' '</span> + <span class=\"keyword\">this</span>.numberStandard(_date.getHours()) +</div><div class=\"line\">      <span class=\"string\">':'</span> + <span class=\"keyword\">this</span>.numberStandard(_date.getMinutes()) +</div><div class=\"line\">      <span class=\"string\">':'</span> + <span class=\"keyword\">this</span>.numberStandard(_date.getSeconds());</div><div class=\"line\">    <span class=\"keyword\">this</span>.clock = clock;</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  ngOnInit() &#123;</div><div class=\"line\">    <span class=\"comment\">// 使用bind解决setInterval的执行环境问题</span></div><div class=\"line\">    <span class=\"keyword\">this</span>.clockTime = setInterval(<span class=\"keyword\">this</span>.renderClock.bind(<span class=\"keyword\">this</span>), <span class=\"number\">500</span>);</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  ngOnDestroy() &#123;</div><div class=\"line\">    <span class=\"comment\">// 控件摧毁时移除定时事件</span></div><div class=\"line\">    clearInterval(<span class=\"keyword\">this</span>.clockTime);</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<ul>\n<li>这里使用到的生命周期的钩子<ul>\n<li>ngOnInit：当每个输入属性的值都被触发了一次ngOnChanges之后才会调用ngOnInit，此时所有输入属性都已经有了正确的初始绑定值</li>\n<li>ngOnDestroy：当Angular每次销毁指令/组件之前调用</li>\n<li>其他生命周期的钩子请参照<a href=\"https://angular.cn/docs/ts/latest/guide/lifecycle-hooks.html\" target=\"_blank\" rel=\"external\">组件生命周期</a></li>\n</ul>\n</li>\n</ul>\n<p>此时，我们已经完成了一个组件的创建了，接下来我们要把这个组件注入到其他模板。</p>\n<h3 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h3><ul>\n<li><a href=\"https://angular.cn/docs/ts/latest/guide/router.html#!#navigate\" target=\"_blank\" rel=\"external\">路由与导航</a></li>\n</ul>\n<h2 id=\"组件的使用和依赖注入\"><a href=\"#组件的使用和依赖注入\" class=\"headerlink\" title=\"组件的使用和依赖注入\"></a>组件的使用和依赖注入</h2><hr>\n<p>在angular1中，我们已经了解到依赖注入这个词，而ng2和ng1中的依赖注入也有区别。</p>\n<h3 id=\"依赖注入\"><a href=\"#依赖注入\" class=\"headerlink\" title=\"依赖注入\"></a>依赖注入</h3><ul>\n<li>什么是依赖注入<ul>\n<li>“依赖注入”是提供类的新实例的一种方式，还负责处理好类所需的全部依赖</li>\n<li>大多数依赖都是服务</li>\n<li>Angular也使用依赖注入提供我们需要的组件以及这些组件所需的服务</li>\n</ul>\n</li>\n<li>有关依赖注入<ul>\n<li>依赖注入渗透在整个Angular框架中，并且被到处使用</li>\n<li>注入器（Injector）是本机制的核心<ul>\n<li>注入器负责维护一个容器，用于存放它创建过的服务实例</li>\n<li>注入器能使用提供商创建一个新的服务实例</li>\n</ul>\n</li>\n<li>提供商是一个用于创建服务的“配方”</li>\n<li>把提供商注册到注入器</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"ng2中的依赖注入\"><a href=\"#ng2中的依赖注入\" class=\"headerlink\" title=\"ng2中的依赖注入\"></a>ng2中的依赖注入</h3><ul>\n<li>当Angular创建组件时，会首先为组件所需的服务找一个注入器（Injector）</li>\n<li>注入器是一个维护服务实例的容器，存放着以前创建的实例</li>\n<li>如果容器中还没有所请求的服务实例，注入器就会创建一个服务实例，并且添加到容器中，然后把这个服务返回给Angular</li>\n<li>当所有的服务都被解析完并返回时，Angular会以这些服务为参数去调用组件的构造函数</li>\n</ul>\n<h3 id=\"通过指令注入组件\"><a href=\"#通过指令注入组件\" class=\"headerlink\" title=\"通过指令注入组件\"></a>通过指令注入组件</h3><p>上一节虽然我们也创建了一个登陆页面的组件，Login组件直接在路由中使用。这里我们将尝试在主页面app.component.ts中使用Header组件。<br><figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 这里只展示相关的代码</span></div><div class=\"line\"><span class=\"comment\">// 添加Header组件，默认从header文件夹的index.ts中获取</span></div><div class=\"line\"><span class=\"keyword\">import</span> &#123; Header &#125; <span class=\"keyword\">from</span> <span class=\"string\">'./header'</span>;</div><div class=\"line\"><span class=\"comment\">// 定义主页面组件</span></div><div class=\"line\">@Component(&#123;</div><div class=\"line\">  <span class=\"attr\">selector</span>: <span class=\"string\">'app'</span>,</div><div class=\"line\">  <span class=\"attr\">encapsulation</span>: ViewEncapsulation.None,</div><div class=\"line\">  <span class=\"attr\">styleUrls</span>: [</div><div class=\"line\">    <span class=\"string\">'./app.style.css'</span></div><div class=\"line\">  ],</div><div class=\"line\">  <span class=\"attr\">template</span>: <span class=\"string\">`</span></div><div class=\"line\">    &lt;!--插入头部组件，注入指令后生效--&gt;</div><div class=\"line\">    &lt;my-header&gt;&lt;/my-header&gt;</div><div class=\"line\">     &lt;main&gt;</div><div class=\"line\">      &lt;router-outlet&gt;&lt;/router-outlet&gt;</div><div class=\"line\">    &lt;/main&gt;</div><div class=\"line\">  `,</div><div class=\"line\">  <span class=\"comment\">// 注入指令</span></div><div class=\"line\">  directives: [Header]</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure></p>\n<p>此时算是完成了一个组件的创建以及使用，如图：<br><img src=\"http://o905ne85q.bkt.clouddn.com/15D3.tmp.png\" alt=\"image\"></p>\n<h3 id=\"参考-1\"><a href=\"#参考-1\" class=\"headerlink\" title=\"参考\"></a>参考</h3><ul>\n<li><a href=\"https://angular.cn/docs/ts/latest/cookbook/dependency-injection.html\" target=\"_blank\" rel=\"external\">依赖注入–烹饪宝典</a></li>\n<li><a href=\"https://angular.cn/docs/ts/latest/guide/dependency-injection.html\" target=\"_blank\" rel=\"external\">依赖注入–基础知识</a></li>\n</ul>\n<h2 id=\"结束语\"><a href=\"#结束语\" class=\"headerlink\" title=\"结束语\"></a>结束语</h2><hr>\n<p>不得不说，使用angular2-webpack-starter快速搭建项目之后，对ng2的很多使用方法也比较了解了。<br>毕竟ng2虽然有很详细的官方教程，但是要看完也是很需要耐心和恒心的呢，哈哈哈哈:)<br><a href=\"https://github.com/godbasin/godbasin.github.io/tree/blog-codes/angular2-notes/3-create-header\" target=\"_blank\" rel=\"external\">此处查看项目代码（仅包含src部分）</a><br><a href=\"http://oc8qsv1w6.bkt.clouddn.com/3-create-header/index.html\" target=\"_blank\" rel=\"external\">此处查看页面效果</a></p>\n","excerpt":"<p>最近在学习Angular2作为前端的框架，《Angular2使用笔记》系列用于记录过程中的一些使用和解决方法。<br>本文记录创建头部组件的过程。<br>","more":"</p>\n<h2 id=\"创建头部菜单\"><a href=\"#创建头部菜单\" class=\"headerlink\" title=\"创建头部菜单\"></a>创建头部菜单</h2><hr>\n<p>该头部菜单与前几个框架的使用笔记中完全一致。如图：<br><img src=\"http://o905ne85q.bkt.clouddn.com/C902.tmp.png\" alt=\"image\"></p>\n<h3 id=\"添加头部组件相关文件\"><a href=\"#添加头部组件相关文件\" class=\"headerlink\" title=\"添加头部组件相关文件\"></a>添加头部组件相关文件</h3><ul>\n<li>添加header文件夹，用于管理Header组件的相关文件<br>Header组件文件如下：</li>\n</ul>\n<figure class=\"highlight cmd\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">header/</div><div class=\"line\"> ├──index.ts                   * 导出该目录下组件</div><div class=\"line\"> ├──header.component.ts        * 定义并导出Header组件</div><div class=\"line\"> ├──header.style.css           * Header组件的css样式</div><div class=\"line\"> └──header.template.html       * Header组件的html模板</div></pre></td></tr></table></figure>\n<h3 id=\"添加组件模板\"><a href=\"#添加组件模板\" class=\"headerlink\" title=\"添加组件模板\"></a>添加组件模板</h3><p>header.template.html文件，如下<br><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;nav class=\"navbar navbar-default header\"&gt;</div><div class=\"line\">    &lt;div class=\"container-fluid\"&gt;</div><div class=\"line\">        &lt;div class=\"navbar-header\"&gt;</div><div class=\"line\">            &lt;a class=\"navbar-brand\" href=\"#\"&gt;Godbasin&lt;/a&gt;</div><div class=\"line\">        &lt;/div&gt;</div><div class=\"line\">        &lt;div class=\"collapse navbar-collapse\" id=\"bs-example-navbar-collapse-1\"&gt;</div><div class=\"line\">            &lt;ul class=\"nav navbar-nav\"&gt;</div><div class=\"line\">                &lt;!--menus为主菜单--&gt;</div><div class=\"line\">                &lt;li *ngFor=\"let menu of menus\" routerLinkActive=\"active\"&gt;&lt;a routerLink=\"&#123;&#123; menu.href &#125;&#125;\"&gt;&#123;&#123; menu.text &#125;&#125;&lt;span [hidden]=\"!menu.current\" class=\"sr-only\"&gt;(current)&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;</div><div class=\"line\">            &lt;/ul&gt;</div><div class=\"line\">            &lt;ul class=\"nav navbar-nav navbar-right\"&gt;</div><div class=\"line\">                &lt;li&gt;&lt;a&gt;&#123;&#123; clock &#125;&#125;&lt;/a&gt;&lt;/li&gt;</div><div class=\"line\">                &lt;li class=\"dropdown\"&gt;</div><div class=\"line\">                    &lt;a href=\"\" class=\"dropdown-toggle\" data-toggle=\"dropdown\" role=\"button\" aria-haspopup=\"true\" aria-expanded=\"false\"&gt;菜单 &lt;span class=\"caret\"&gt;&lt;/span&gt;&lt;/a&gt;</div><div class=\"line\">                    &lt;ul class=\"dropdown-menu\"&gt;</div><div class=\"line\">                        &lt;!--usermenus为右侧下拉菜单--&gt;</div><div class=\"line\">                        &lt;li *ngFor=\"let usermenu of usermenus\"&gt;&lt;a href=\"&#123;&#123; usermenu.href &#125;&#125;\"&gt;&#123;&#123; usermenu.text &#125;&#125;&lt;/a&gt;&lt;/li&gt;</div><div class=\"line\">                    &lt;/ul&gt;</div><div class=\"line\">                &lt;/li&gt;</div><div class=\"line\">            &lt;/ul&gt;</div><div class=\"line\">        &lt;/div&gt;</div><div class=\"line\">    &lt;/div&gt;</div><div class=\"line\">&lt;/nav&gt;</div></pre></td></tr></table></figure></p>\n<p>这里我们用到了ng2的路由器携带的属性绑定</p>\n<ul>\n<li>RouterLink绑定<ul>\n<li>A标签中，有一个绑定RouterLink指令的属性绑定</li>\n<li>可以通过提供查询字符串参数为RouterLink提供更多情境信息</li>\n<li>可提供一个URL片段（Fragment或hash）来跳转到本页面中的其它区域</li>\n</ul>\n</li>\n<li>RouterLinkActive绑定<ul>\n<li>每个A标签还有一个到RouterLinkActive指令的属性绑定</li>\n<li>等号（=）右侧的模板表达式包含用空格分隔的一些CSS类，还可以把RouterLinkActive指令绑定到一个CSS类组成的数组</li>\n<li>用于在相关的RouterLink被激活时为所在元素添加或移除CSS类。 该指令可以直接添加到该元素上，也可以添加到其父元素上</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"定义Header组件\"><a href=\"#定义Header组件\" class=\"headerlink\" title=\"定义Header组件\"></a>定义Header组件</h3><ul>\n<li>添加组件样式header.style.css，这里就不展示出来了</li>\n<li>在header.component.ts文件中，如下</li>\n</ul>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> &#123; Component &#125; from <span class=\"string\">'@angular/core'</span>;</div><div class=\"line\"></div><div class=\"line\">@Component(&#123;</div><div class=\"line\">  selector: <span class=\"string\">'my-header'</span>,</div><div class=\"line\">  styles: [<span class=\"string\">`</div><div class=\"line\">  `</span>],</div><div class=\"line\">  templateUrl: <span class=\"string\">'./header.template.html'</span></div><div class=\"line\">&#125;)</div><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> Header &#123;</div><div class=\"line\">  <span class=\"comment\">// clock用于保存时间</span></div><div class=\"line\">  clock: <span class=\"built_in\">string</span> = <span class=\"string\">''</span>;</div><div class=\"line\">  clockTime;</div><div class=\"line\">  <span class=\"comment\">// menus用于储存主菜单</span></div><div class=\"line\">  menus = [&#123;</div><div class=\"line\">    title: <span class=\"string\">'index'</span>, <span class=\"comment\">// title用于储存路由对应的路径</span></div><div class=\"line\">    href: <span class=\"string\">'/index'</span>, <span class=\"comment\">// href用于设定该菜单跳转路由</span></div><div class=\"line\">    text: <span class=\"string\">'首页'</span>, <span class=\"comment\">// text用于储存该菜单显示名称</span></div><div class=\"line\">  &#125;, &#123;</div><div class=\"line\">      title: <span class=\"string\">'others'</span>,</div><div class=\"line\">      href: <span class=\"string\">'/other'</span>,</div><div class=\"line\">      text: <span class=\"string\">'其他'</span>,</div><div class=\"line\">    &#125;];</div><div class=\"line\">  <span class=\"comment\">// usermenus用于储存侧边下拉菜单</span></div><div class=\"line\">  usermenus = [&#123;</div><div class=\"line\">    href: <span class=\"string\">'/login'</span>, <span class=\"comment\">// href用于设定该菜单跳转路由</span></div><div class=\"line\">    text: <span class=\"string\">'退出'</span>, <span class=\"comment\">// text用于储存该菜单显示名称</span></div><div class=\"line\">  &#125;];</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">// 用于格式化时间（少于10在前面增加0）</span></div><div class=\"line\">  numberStandard(num) &#123;</div><div class=\"line\">    <span class=\"keyword\">let</span> _val = <span class=\"built_in\">Number</span>(num), _num;</div><div class=\"line\">    _num = (_val &lt; <span class=\"number\">10</span>) ? (<span class=\"string\">'0'</span> + _val) : (<span class=\"string\">''</span> + _val);</div><div class=\"line\">    <span class=\"keyword\">return</span> _num;</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">// 用于渲染时钟</span></div><div class=\"line\">  renderClock() &#123;</div><div class=\"line\">    <span class=\"keyword\">let</span> _date = <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>(), clock = <span class=\"string\">''</span>;</div><div class=\"line\">    clock += _date.getFullYear() + <span class=\"string\">'年'</span> + (_date.getMonth() + <span class=\"number\">1</span>) + <span class=\"string\">'月'</span> + _date.getDate() + <span class=\"string\">'日'</span>;</div><div class=\"line\">    clock += <span class=\"string\">' '</span> + <span class=\"keyword\">this</span>.numberStandard(_date.getHours()) +</div><div class=\"line\">      <span class=\"string\">':'</span> + <span class=\"keyword\">this</span>.numberStandard(_date.getMinutes()) +</div><div class=\"line\">      <span class=\"string\">':'</span> + <span class=\"keyword\">this</span>.numberStandard(_date.getSeconds());</div><div class=\"line\">    <span class=\"keyword\">this</span>.clock = clock;</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  ngOnInit() &#123;</div><div class=\"line\">    <span class=\"comment\">// 使用bind解决setInterval的执行环境问题</span></div><div class=\"line\">    <span class=\"keyword\">this</span>.clockTime = setInterval(<span class=\"keyword\">this</span>.renderClock.bind(<span class=\"keyword\">this</span>), <span class=\"number\">500</span>);</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  ngOnDestroy() &#123;</div><div class=\"line\">    <span class=\"comment\">// 控件摧毁时移除定时事件</span></div><div class=\"line\">    clearInterval(<span class=\"keyword\">this</span>.clockTime);</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<ul>\n<li>这里使用到的生命周期的钩子<ul>\n<li>ngOnInit：当每个输入属性的值都被触发了一次ngOnChanges之后才会调用ngOnInit，此时所有输入属性都已经有了正确的初始绑定值</li>\n<li>ngOnDestroy：当Angular每次销毁指令/组件之前调用</li>\n<li>其他生命周期的钩子请参照<a href=\"https://angular.cn/docs/ts/latest/guide/lifecycle-hooks.html\">组件生命周期</a></li>\n</ul>\n</li>\n</ul>\n<p>此时，我们已经完成了一个组件的创建了，接下来我们要把这个组件注入到其他模板。</p>\n<h3 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h3><ul>\n<li><a href=\"https://angular.cn/docs/ts/latest/guide/router.html#!#navigate\">路由与导航</a></li>\n</ul>\n<h2 id=\"组件的使用和依赖注入\"><a href=\"#组件的使用和依赖注入\" class=\"headerlink\" title=\"组件的使用和依赖注入\"></a>组件的使用和依赖注入</h2><hr>\n<p>在angular1中，我们已经了解到依赖注入这个词，而ng2和ng1中的依赖注入也有区别。</p>\n<h3 id=\"依赖注入\"><a href=\"#依赖注入\" class=\"headerlink\" title=\"依赖注入\"></a>依赖注入</h3><ul>\n<li>什么是依赖注入<ul>\n<li>“依赖注入”是提供类的新实例的一种方式，还负责处理好类所需的全部依赖</li>\n<li>大多数依赖都是服务</li>\n<li>Angular也使用依赖注入提供我们需要的组件以及这些组件所需的服务</li>\n</ul>\n</li>\n<li>有关依赖注入<ul>\n<li>依赖注入渗透在整个Angular框架中，并且被到处使用</li>\n<li>注入器（Injector）是本机制的核心<ul>\n<li>注入器负责维护一个容器，用于存放它创建过的服务实例</li>\n<li>注入器能使用提供商创建一个新的服务实例</li>\n</ul>\n</li>\n<li>提供商是一个用于创建服务的“配方”</li>\n<li>把提供商注册到注入器</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"ng2中的依赖注入\"><a href=\"#ng2中的依赖注入\" class=\"headerlink\" title=\"ng2中的依赖注入\"></a>ng2中的依赖注入</h3><ul>\n<li>当Angular创建组件时，会首先为组件所需的服务找一个注入器（Injector）</li>\n<li>注入器是一个维护服务实例的容器，存放着以前创建的实例</li>\n<li>如果容器中还没有所请求的服务实例，注入器就会创建一个服务实例，并且添加到容器中，然后把这个服务返回给Angular</li>\n<li>当所有的服务都被解析完并返回时，Angular会以这些服务为参数去调用组件的构造函数</li>\n</ul>\n<h3 id=\"通过指令注入组件\"><a href=\"#通过指令注入组件\" class=\"headerlink\" title=\"通过指令注入组件\"></a>通过指令注入组件</h3><p>上一节虽然我们也创建了一个登陆页面的组件，Login组件直接在路由中使用。这里我们将尝试在主页面app.component.ts中使用Header组件。<br><figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 这里只展示相关的代码</span></div><div class=\"line\"><span class=\"comment\">// 添加Header组件，默认从header文件夹的index.ts中获取</span></div><div class=\"line\"><span class=\"keyword\">import</span> &#123; Header &#125; <span class=\"keyword\">from</span> <span class=\"string\">'./header'</span>;</div><div class=\"line\"><span class=\"comment\">// 定义主页面组件</span></div><div class=\"line\">@Component(&#123;</div><div class=\"line\">  <span class=\"attr\">selector</span>: <span class=\"string\">'app'</span>,</div><div class=\"line\">  <span class=\"attr\">encapsulation</span>: ViewEncapsulation.None,</div><div class=\"line\">  <span class=\"attr\">styleUrls</span>: [</div><div class=\"line\">    <span class=\"string\">'./app.style.css'</span></div><div class=\"line\">  ],</div><div class=\"line\">  <span class=\"attr\">template</span>: <span class=\"string\">`</div><div class=\"line\">    &lt;!--插入头部组件，注入指令后生效--&gt;</div><div class=\"line\">    &lt;my-header&gt;&lt;/my-header&gt;</div><div class=\"line\">     &lt;main&gt;</div><div class=\"line\">      &lt;router-outlet&gt;&lt;/router-outlet&gt;</div><div class=\"line\">    &lt;/main&gt;</div><div class=\"line\">  `</span>,</div><div class=\"line\">  <span class=\"comment\">// 注入指令</span></div><div class=\"line\">  directives: [Header]</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure></p>\n<p>此时算是完成了一个组件的创建以及使用，如图：<br><img src=\"http://o905ne85q.bkt.clouddn.com/15D3.tmp.png\" alt=\"image\"></p>\n<h3 id=\"参考-1\"><a href=\"#参考-1\" class=\"headerlink\" title=\"参考\"></a>参考</h3><ul>\n<li><a href=\"https://angular.cn/docs/ts/latest/cookbook/dependency-injection.html\">依赖注入–烹饪宝典</a></li>\n<li><a href=\"https://angular.cn/docs/ts/latest/guide/dependency-injection.html\">依赖注入–基础知识</a></li>\n</ul>\n<h2 id=\"结束语\"><a href=\"#结束语\" class=\"headerlink\" title=\"结束语\"></a>结束语</h2><hr>\n<p>不得不说，使用angular2-webpack-starter快速搭建项目之后，对ng2的很多使用方法也比较了解了。<br>毕竟ng2虽然有很详细的官方教程，但是要看完也是很需要耐心和恒心的呢，哈哈哈哈:)<br><a href=\"https://github.com/godbasin/godbasin.github.io/tree/blog-codes/angular2-notes/3-create-header\">此处查看项目代码（仅包含src部分）</a><br><a href=\"http://oc8qsv1w6.bkt.clouddn.com/3-create-header/index.html\">此处查看页面效果</a></p>"},{"title":"Angular2使用笔记2--创建登录页面","date":"2016-10-05T00:49:32.000Z","_content":"最近在学习Angular2作为前端的框架，《Angular2使用笔记》系列用于记录过程中的一些使用和解决方法。\n本文记录搭建登录页面的过程。\n<!--more-->\n## 根据产品规划划分模块\n-----\n### 主要页面逻辑\n在这里，本骚年就建一个比较简单的项目。该项目与之前的Angular使用笔记项目长得完全一致，但我们这里用React来实现吧。\n- 我们的主要页面逻辑如下：\n  - 1.登录页面，输入账号和密码即可\n  - 2.模块页面\n\n### 定义登录组件\n- 首先我们在app文件夹内添加一个login文件夹\nng2里面，我们使用与其他框架不同的目录组织方式，即将同个组件相关的文件放置在一个文件夹中，方便管理。\n- Login组件文件如下：\n``` cmd\nlogin/\n ├──index.ts                   * 导出该目录下组件\n ├──login.component.ts         * 定义并导出Login组件\n ├──login.template.html        * Login组件的html模板\n └──login.style.css            * Login组件的样式文件\n```\n\n### 添加路由\n- 设置路由\n打开app.roytes.ts，设置如下路由：\n\n``` typescript\nimport { RouterConfig } from '@angular/router';\nimport { Login } from './login';\n\nexport const routes: RouterConfig = [\n  { path: 'login',  component: Login },\n  { path: '**',    component: Login },\n];\n```\n- 主组件app.component.ts中添加路由输出\n\n``` typescript\ntemplate: `\n <main>\n   <router-outlet></router-outlet>\n </main>\n `\n```\n\n从上面可以看到，Angular2中路由也是与组件一样导出该功能，具体的我们会在后面的文章中介绍。\n\n## 编写Login组件\n---\n前面也提到过，Login组件相关文件统一管理在login文件夹中。\n### 添加模板\n- 添加该组件模板login.template.ts，如下\n\n``` html\n<div class=\"container login\">\n    <!--(ngSubmit)为绑定表单事件-->\n    <form id=\"login-form\" (ngSubmit)=\"submitForm(name, password)\">\n        <h3 class=\"text-center\">login</h3>\n        <div class=\"form-group\">\n            <label>account</label>\n            <!--[value]绑定该组件作用域的值，而(input)用于处理输入事件，实现双向绑定-->\n            <input class=\"form-control\" type=\"text\" [value]=\"name\" (input)=\"name = $event.target.value\" placeholder=\"username\" autofocus required>\n        </div>\n        <div class=\"form-group\">\n            <label>Password</label>\n            <!--[value]绑定该组件作用域的值，而(input)用于处理输入事件，实现双向绑定-->\n            <input class=\"form-control\" type=\"password\" [value]=\"password\" (input)=\"password = $event.target.value\" placeholder=\"password\" required>\n        </div>\n        <button type=\"submit\" class=\"btn btn-default\">登录</button>\n    </form>\n</div>\n```\n\n### 添加样式\nAngular 2应用使用标准的CSS来设置样式。这意味着我们可以把关于CSS的那些知识和技能直接用于我们的Angular程序中，比如：样式表、选择器、规则，以及媒体查询等。\n\n在此基础上，Angular还能把组件样式紧紧的“捆绑”在我们的组件上，以实现一种比标准样式表更加模块化的设计。\n\n- 添加样式的方式\n  - 元数据中的样式：给@Component装饰器添加一个styles数组型属性\n  - 模板内联样式：放到`<style>`标签中来直接在 HTML 模板中嵌入样式\n  - 元数据中的样式表URL：给组件的@Component装饰器中添加一个styleUrls属性来从外部CSS文件中加载样式\n  - 模板中的link 标签：在组件的HTML模板中嵌入<link>标签\n  - CSS@imports：利用标准的CSS@import规则来把其它CSS文件导入到我们的CSS文件中\n\n- 控制视图的包装模式\n  - 原生Native模式：使用浏览器原生的Shadow DOM实现来为组件的宿主元素附加一个Shadow DOM。组件的样式被包裹在这个Shadow DOM中\n  - 仿真Emulated模式（默认值）通过预处理（并改名）CSS代码来仿真Shadow DOM的行为，以达到把CSS样式局限在组件视图中的目的（默认选项）\n  - 无None：Angular不使用视图包装。Angular会把CSS添加到全局样式中。而不会应用上前面讨论过的那些局限化规则、隔离和保护等规则。 从本质上来说，这跟把组件的样式直接放进HTML是一样的\n\n- 特殊的选择器\n  - :host：使用:host伪类选择器，用来选择组件宿主元素中的元素 （相对于组件模板内部的元素）\n  - :host-context：在当前组件宿主元素的祖先节点中查找CSS类， 直到文档的根节点为止\n\n- 添加该组件样式login.style.css，如下\n\n``` css\n.login {\n    padding: 200px 20px;\n}\n\n.login > form {\n    border: solid 1px #999;\n    padding: 20px;\n    border-radius: 5px;\n}\n```\n\n不得不说，ng2中组件样式的作用域仅在于该组件内，真正做到了组件的解耦。\n当然，我们查看元素的时候便可以发现，ng2通过给组件设定随机的代号属性来管理每个组件的样式，如图：\n![image](http://o905ne85q.bkt.clouddn.com/F11E.tmp.png)\n\n- 参考：[组件样式](https://angular.cn/docs/ts/latest/guide/component-styles.html)\n\n### 定义Login组件\n- 在login.component.ts文件中定义Login组件\n\n``` typescript\nimport { Component } from '@angular/core';\n\n@Component({\n  selector: 'login', // 设置元素选择器，<login></login>\n  styleUrls: ['./login.style.css'], // 样式文件引入\n  templateUrl: './login.template.html' // 模板文件引入\n})\nexport class Login {\n  // 定义并初始化用户名和密码以及其类型\n  name: string = '';\n  password: string = '';\n\n  // 定义提交表单事件\n  submitForm(name, password) {\n    console.log(name, password);\n  }\n}\n```\n\n### 输出Login组件\n- 在index.ts文件中，我们输出Login组件\n\n``` typescript\nexport * from './login.component';\n```\n\n## 结束语\n-----\n本骚年也是Angular2的初体验者，如果小伙伴们有好的资源请千万千万要分享呀。\n[此处查看项目代码（仅包含src部分）](https://github.com/godbasin/godbasin.github.io/tree/blog-codes/angular2-notes/2-create-login)\n[此处查看页面效果](http://oc8qsv1w6.bkt.clouddn.com/2-create-login/index.html)","source":"_posts/angular2-notes-2-create-login.md","raw":"---\ntitle: Angular2使用笔记2--创建登录页面\ndate: 2016-10-05 08:49:32\ncategories: angular2火锅\ntags: 笔记\n---\n最近在学习Angular2作为前端的框架，《Angular2使用笔记》系列用于记录过程中的一些使用和解决方法。\n本文记录搭建登录页面的过程。\n<!--more-->\n## 根据产品规划划分模块\n-----\n### 主要页面逻辑\n在这里，本骚年就建一个比较简单的项目。该项目与之前的Angular使用笔记项目长得完全一致，但我们这里用React来实现吧。\n- 我们的主要页面逻辑如下：\n  - 1.登录页面，输入账号和密码即可\n  - 2.模块页面\n\n### 定义登录组件\n- 首先我们在app文件夹内添加一个login文件夹\nng2里面，我们使用与其他框架不同的目录组织方式，即将同个组件相关的文件放置在一个文件夹中，方便管理。\n- Login组件文件如下：\n``` cmd\nlogin/\n ├──index.ts                   * 导出该目录下组件\n ├──login.component.ts         * 定义并导出Login组件\n ├──login.template.html        * Login组件的html模板\n └──login.style.css            * Login组件的样式文件\n```\n\n### 添加路由\n- 设置路由\n打开app.roytes.ts，设置如下路由：\n\n``` typescript\nimport { RouterConfig } from '@angular/router';\nimport { Login } from './login';\n\nexport const routes: RouterConfig = [\n  { path: 'login',  component: Login },\n  { path: '**',    component: Login },\n];\n```\n- 主组件app.component.ts中添加路由输出\n\n``` typescript\ntemplate: `\n <main>\n   <router-outlet></router-outlet>\n </main>\n `\n```\n\n从上面可以看到，Angular2中路由也是与组件一样导出该功能，具体的我们会在后面的文章中介绍。\n\n## 编写Login组件\n---\n前面也提到过，Login组件相关文件统一管理在login文件夹中。\n### 添加模板\n- 添加该组件模板login.template.ts，如下\n\n``` html\n<div class=\"container login\">\n    <!--(ngSubmit)为绑定表单事件-->\n    <form id=\"login-form\" (ngSubmit)=\"submitForm(name, password)\">\n        <h3 class=\"text-center\">login</h3>\n        <div class=\"form-group\">\n            <label>account</label>\n            <!--[value]绑定该组件作用域的值，而(input)用于处理输入事件，实现双向绑定-->\n            <input class=\"form-control\" type=\"text\" [value]=\"name\" (input)=\"name = $event.target.value\" placeholder=\"username\" autofocus required>\n        </div>\n        <div class=\"form-group\">\n            <label>Password</label>\n            <!--[value]绑定该组件作用域的值，而(input)用于处理输入事件，实现双向绑定-->\n            <input class=\"form-control\" type=\"password\" [value]=\"password\" (input)=\"password = $event.target.value\" placeholder=\"password\" required>\n        </div>\n        <button type=\"submit\" class=\"btn btn-default\">登录</button>\n    </form>\n</div>\n```\n\n### 添加样式\nAngular 2应用使用标准的CSS来设置样式。这意味着我们可以把关于CSS的那些知识和技能直接用于我们的Angular程序中，比如：样式表、选择器、规则，以及媒体查询等。\n\n在此基础上，Angular还能把组件样式紧紧的“捆绑”在我们的组件上，以实现一种比标准样式表更加模块化的设计。\n\n- 添加样式的方式\n  - 元数据中的样式：给@Component装饰器添加一个styles数组型属性\n  - 模板内联样式：放到`<style>`标签中来直接在 HTML 模板中嵌入样式\n  - 元数据中的样式表URL：给组件的@Component装饰器中添加一个styleUrls属性来从外部CSS文件中加载样式\n  - 模板中的link 标签：在组件的HTML模板中嵌入<link>标签\n  - CSS@imports：利用标准的CSS@import规则来把其它CSS文件导入到我们的CSS文件中\n\n- 控制视图的包装模式\n  - 原生Native模式：使用浏览器原生的Shadow DOM实现来为组件的宿主元素附加一个Shadow DOM。组件的样式被包裹在这个Shadow DOM中\n  - 仿真Emulated模式（默认值）通过预处理（并改名）CSS代码来仿真Shadow DOM的行为，以达到把CSS样式局限在组件视图中的目的（默认选项）\n  - 无None：Angular不使用视图包装。Angular会把CSS添加到全局样式中。而不会应用上前面讨论过的那些局限化规则、隔离和保护等规则。 从本质上来说，这跟把组件的样式直接放进HTML是一样的\n\n- 特殊的选择器\n  - :host：使用:host伪类选择器，用来选择组件宿主元素中的元素 （相对于组件模板内部的元素）\n  - :host-context：在当前组件宿主元素的祖先节点中查找CSS类， 直到文档的根节点为止\n\n- 添加该组件样式login.style.css，如下\n\n``` css\n.login {\n    padding: 200px 20px;\n}\n\n.login > form {\n    border: solid 1px #999;\n    padding: 20px;\n    border-radius: 5px;\n}\n```\n\n不得不说，ng2中组件样式的作用域仅在于该组件内，真正做到了组件的解耦。\n当然，我们查看元素的时候便可以发现，ng2通过给组件设定随机的代号属性来管理每个组件的样式，如图：\n![image](http://o905ne85q.bkt.clouddn.com/F11E.tmp.png)\n\n- 参考：[组件样式](https://angular.cn/docs/ts/latest/guide/component-styles.html)\n\n### 定义Login组件\n- 在login.component.ts文件中定义Login组件\n\n``` typescript\nimport { Component } from '@angular/core';\n\n@Component({\n  selector: 'login', // 设置元素选择器，<login></login>\n  styleUrls: ['./login.style.css'], // 样式文件引入\n  templateUrl: './login.template.html' // 模板文件引入\n})\nexport class Login {\n  // 定义并初始化用户名和密码以及其类型\n  name: string = '';\n  password: string = '';\n\n  // 定义提交表单事件\n  submitForm(name, password) {\n    console.log(name, password);\n  }\n}\n```\n\n### 输出Login组件\n- 在index.ts文件中，我们输出Login组件\n\n``` typescript\nexport * from './login.component';\n```\n\n## 结束语\n-----\n本骚年也是Angular2的初体验者，如果小伙伴们有好的资源请千万千万要分享呀。\n[此处查看项目代码（仅包含src部分）](https://github.com/godbasin/godbasin.github.io/tree/blog-codes/angular2-notes/2-create-login)\n[此处查看页面效果](http://oc8qsv1w6.bkt.clouddn.com/2-create-login/index.html)","slug":"angular2-notes-2-create-login","published":1,"updated":"2016-11-12T02:12:28.245Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cix45hufg001nxotuud43hc2f","content":"<p>最近在学习Angular2作为前端的框架，《Angular2使用笔记》系列用于记录过程中的一些使用和解决方法。<br>本文记录搭建登录页面的过程。<br><a id=\"more\"></a></p>\n<h2 id=\"根据产品规划划分模块\"><a href=\"#根据产品规划划分模块\" class=\"headerlink\" title=\"根据产品规划划分模块\"></a>根据产品规划划分模块</h2><hr>\n<h3 id=\"主要页面逻辑\"><a href=\"#主要页面逻辑\" class=\"headerlink\" title=\"主要页面逻辑\"></a>主要页面逻辑</h3><p>在这里，本骚年就建一个比较简单的项目。该项目与之前的Angular使用笔记项目长得完全一致，但我们这里用React来实现吧。</p>\n<ul>\n<li>我们的主要页面逻辑如下：<ul>\n<li>1.登录页面，输入账号和密码即可</li>\n<li>2.模块页面</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"定义登录组件\"><a href=\"#定义登录组件\" class=\"headerlink\" title=\"定义登录组件\"></a>定义登录组件</h3><ul>\n<li>首先我们在app文件夹内添加一个login文件夹<br>ng2里面，我们使用与其他框架不同的目录组织方式，即将同个组件相关的文件放置在一个文件夹中，方便管理。</li>\n<li>Login组件文件如下：<figure class=\"highlight cmd\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">login/</div><div class=\"line\"> ├──index.ts                   * 导出该目录下组件</div><div class=\"line\"> ├──login.component.ts         * 定义并导出Login组件</div><div class=\"line\"> ├──login.template.html        * Login组件的html模板</div><div class=\"line\"> └──login.style.css            * Login组件的样式文件</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3 id=\"添加路由\"><a href=\"#添加路由\" class=\"headerlink\" title=\"添加路由\"></a>添加路由</h3><ul>\n<li>设置路由<br>打开app.roytes.ts，设置如下路由：</li>\n</ul>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> &#123; RouterConfig &#125; from <span class=\"string\">'@angular/router'</span>;</div><div class=\"line\"><span class=\"keyword\">import</span> &#123; Login &#125; from <span class=\"string\">'./login'</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> routes: RouterConfig = [</div><div class=\"line\">  &#123; path: <span class=\"string\">'login'</span>,  component: Login &#125;,</div><div class=\"line\">  &#123; path: <span class=\"string\">'**'</span>,    component: Login &#125;,</div><div class=\"line\">];</div></pre></td></tr></table></figure>\n<ul>\n<li>主组件app.component.ts中添加路由输出</li>\n</ul>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">template: <span class=\"string\">`</span></div><div class=\"line\"> &lt;main&gt;</div><div class=\"line\">   &lt;router-outlet&gt;&lt;/router-outlet&gt;</div><div class=\"line\"> &lt;/main&gt;</div><div class=\"line\"> `</div></pre></td></tr></table></figure>\n<p>从上面可以看到，Angular2中路由也是与组件一样导出该功能，具体的我们会在后面的文章中介绍。</p>\n<h2 id=\"编写Login组件\"><a href=\"#编写Login组件\" class=\"headerlink\" title=\"编写Login组件\"></a>编写Login组件</h2><hr>\n<p>前面也提到过，Login组件相关文件统一管理在login文件夹中。</p>\n<h3 id=\"添加模板\"><a href=\"#添加模板\" class=\"headerlink\" title=\"添加模板\"></a>添加模板</h3><ul>\n<li>添加该组件模板login.template.ts，如下</li>\n</ul>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"container login\"</span>&gt;</span></div><div class=\"line\">    <span class=\"comment\">&lt;!--(ngSubmit)为绑定表单事件--&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">form</span> <span class=\"attr\">id</span>=<span class=\"string\">\"login-form\"</span> (<span class=\"attr\">ngSubmit</span>)=<span class=\"string\">\"submitForm(name, password)\"</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">h3</span> <span class=\"attr\">class</span>=<span class=\"string\">\"text-center\"</span>&gt;</span>login<span class=\"tag\">&lt;/<span class=\"name\">h3</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"form-group\"</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">label</span>&gt;</span>account<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></div><div class=\"line\">            <span class=\"comment\">&lt;!--[value]绑定该组件作用域的值，而(input)用于处理输入事件，实现双向绑定--&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">class</span>=<span class=\"string\">\"form-control\"</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text\"</span> [<span class=\"attr\">value</span>]=<span class=\"string\">\"name\"</span> (<span class=\"attr\">input</span>)=<span class=\"string\">\"name = $event.target.value\"</span> <span class=\"attr\">placeholder</span>=<span class=\"string\">\"username\"</span> <span class=\"attr\">autofocus</span> <span class=\"attr\">required</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"form-group\"</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">label</span>&gt;</span>Password<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></div><div class=\"line\">            <span class=\"comment\">&lt;!--[value]绑定该组件作用域的值，而(input)用于处理输入事件，实现双向绑定--&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">class</span>=<span class=\"string\">\"form-control\"</span> <span class=\"attr\">type</span>=<span class=\"string\">\"password\"</span> [<span class=\"attr\">value</span>]=<span class=\"string\">\"password\"</span> (<span class=\"attr\">input</span>)=<span class=\"string\">\"password = $event.target.value\"</span> <span class=\"attr\">placeholder</span>=<span class=\"string\">\"password\"</span> <span class=\"attr\">required</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">type</span>=<span class=\"string\">\"submit\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"btn btn-default\"</span>&gt;</span>登录<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">form</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div></pre></td></tr></table></figure>\n<h3 id=\"添加样式\"><a href=\"#添加样式\" class=\"headerlink\" title=\"添加样式\"></a>添加样式</h3><p>Angular 2应用使用标准的CSS来设置样式。这意味着我们可以把关于CSS的那些知识和技能直接用于我们的Angular程序中，比如：样式表、选择器、规则，以及媒体查询等。</p>\n<p>在此基础上，Angular还能把组件样式紧紧的“捆绑”在我们的组件上，以实现一种比标准样式表更加模块化的设计。</p>\n<ul>\n<li><p>添加样式的方式</p>\n<ul>\n<li>元数据中的样式：给@Component装饰器添加一个styles数组型属性</li>\n<li>模板内联样式：放到<code>&lt;style&gt;</code>标签中来直接在 HTML 模板中嵌入样式</li>\n<li>元数据中的样式表URL：给组件的@Component装饰器中添加一个styleUrls属性来从外部CSS文件中加载样式</li>\n<li>模板中的link 标签：在组件的HTML模板中嵌入<link>标签</li>\n<li>CSS@imports：利用标准的CSS@import规则来把其它CSS文件导入到我们的CSS文件中</li>\n</ul>\n</li>\n<li><p>控制视图的包装模式</p>\n<ul>\n<li>原生Native模式：使用浏览器原生的Shadow DOM实现来为组件的宿主元素附加一个Shadow DOM。组件的样式被包裹在这个Shadow DOM中</li>\n<li>仿真Emulated模式（默认值）通过预处理（并改名）CSS代码来仿真Shadow DOM的行为，以达到把CSS样式局限在组件视图中的目的（默认选项）</li>\n<li>无None：Angular不使用视图包装。Angular会把CSS添加到全局样式中。而不会应用上前面讨论过的那些局限化规则、隔离和保护等规则。 从本质上来说，这跟把组件的样式直接放进HTML是一样的</li>\n</ul>\n</li>\n<li><p>特殊的选择器</p>\n<ul>\n<li>:host：使用:host伪类选择器，用来选择组件宿主元素中的元素 （相对于组件模板内部的元素）</li>\n<li>:host-context：在当前组件宿主元素的祖先节点中查找CSS类， 直到文档的根节点为止</li>\n</ul>\n</li>\n<li><p>添加该组件样式login.style.css，如下</p>\n</li>\n</ul>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"selector-class\">.login</span> &#123;</div><div class=\"line\">    <span class=\"attribute\">padding</span>: <span class=\"number\">200px</span> <span class=\"number\">20px</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"selector-class\">.login</span> &gt; <span class=\"selector-tag\">form</span> &#123;</div><div class=\"line\">    <span class=\"attribute\">border</span>: solid <span class=\"number\">1px</span> <span class=\"number\">#999</span>;</div><div class=\"line\">    <span class=\"attribute\">padding</span>: <span class=\"number\">20px</span>;</div><div class=\"line\">    <span class=\"attribute\">border-radius</span>: <span class=\"number\">5px</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>不得不说，ng2中组件样式的作用域仅在于该组件内，真正做到了组件的解耦。<br>当然，我们查看元素的时候便可以发现，ng2通过给组件设定随机的代号属性来管理每个组件的样式，如图：<br><img src=\"http://o905ne85q.bkt.clouddn.com/F11E.tmp.png\" alt=\"image\"></p>\n<ul>\n<li>参考：<a href=\"https://angular.cn/docs/ts/latest/guide/component-styles.html\" target=\"_blank\" rel=\"external\">组件样式</a></li>\n</ul>\n<h3 id=\"定义Login组件\"><a href=\"#定义Login组件\" class=\"headerlink\" title=\"定义Login组件\"></a>定义Login组件</h3><ul>\n<li>在login.component.ts文件中定义Login组件</li>\n</ul>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> &#123; Component &#125; from <span class=\"string\">'@angular/core'</span>;</div><div class=\"line\"></div><div class=\"line\">@Component(&#123;</div><div class=\"line\">  selector: <span class=\"string\">'login'</span>, <span class=\"comment\">// 设置元素选择器，&lt;login&gt;&lt;/login&gt;</span></div><div class=\"line\">  styleUrls: [<span class=\"string\">'./login.style.css'</span>], <span class=\"comment\">// 样式文件引入</span></div><div class=\"line\">  templateUrl: <span class=\"string\">'./login.template.html'</span> <span class=\"comment\">// 模板文件引入</span></div><div class=\"line\">&#125;)</div><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> Login &#123;</div><div class=\"line\">  <span class=\"comment\">// 定义并初始化用户名和密码以及其类型</span></div><div class=\"line\">  name: <span class=\"built_in\">string</span> = <span class=\"string\">''</span>;</div><div class=\"line\">  password: <span class=\"built_in\">string</span> = <span class=\"string\">''</span>;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">// 定义提交表单事件</span></div><div class=\"line\">  submitForm(name, password) &#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(name, password);</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"输出Login组件\"><a href=\"#输出Login组件\" class=\"headerlink\" title=\"输出Login组件\"></a>输出Login组件</h3><ul>\n<li>在index.ts文件中，我们输出Login组件</li>\n</ul>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">export</span> * from <span class=\"string\">'./login.component'</span>;</div></pre></td></tr></table></figure>\n<h2 id=\"结束语\"><a href=\"#结束语\" class=\"headerlink\" title=\"结束语\"></a>结束语</h2><hr>\n<p>本骚年也是Angular2的初体验者，如果小伙伴们有好的资源请千万千万要分享呀。<br><a href=\"https://github.com/godbasin/godbasin.github.io/tree/blog-codes/angular2-notes/2-create-login\" target=\"_blank\" rel=\"external\">此处查看项目代码（仅包含src部分）</a><br><a href=\"http://oc8qsv1w6.bkt.clouddn.com/2-create-login/index.html\" target=\"_blank\" rel=\"external\">此处查看页面效果</a></p>\n","excerpt":"<p>最近在学习Angular2作为前端的框架，《Angular2使用笔记》系列用于记录过程中的一些使用和解决方法。<br>本文记录搭建登录页面的过程。<br>","more":"</p>\n<h2 id=\"根据产品规划划分模块\"><a href=\"#根据产品规划划分模块\" class=\"headerlink\" title=\"根据产品规划划分模块\"></a>根据产品规划划分模块</h2><hr>\n<h3 id=\"主要页面逻辑\"><a href=\"#主要页面逻辑\" class=\"headerlink\" title=\"主要页面逻辑\"></a>主要页面逻辑</h3><p>在这里，本骚年就建一个比较简单的项目。该项目与之前的Angular使用笔记项目长得完全一致，但我们这里用React来实现吧。</p>\n<ul>\n<li>我们的主要页面逻辑如下：<ul>\n<li>1.登录页面，输入账号和密码即可</li>\n<li>2.模块页面</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"定义登录组件\"><a href=\"#定义登录组件\" class=\"headerlink\" title=\"定义登录组件\"></a>定义登录组件</h3><ul>\n<li>首先我们在app文件夹内添加一个login文件夹<br>ng2里面，我们使用与其他框架不同的目录组织方式，即将同个组件相关的文件放置在一个文件夹中，方便管理。</li>\n<li>Login组件文件如下：<figure class=\"highlight cmd\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">login/</div><div class=\"line\"> ├──index.ts                   * 导出该目录下组件</div><div class=\"line\"> ├──login.component.ts         * 定义并导出Login组件</div><div class=\"line\"> ├──login.template.html        * Login组件的html模板</div><div class=\"line\"> └──login.style.css            * Login组件的样式文件</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3 id=\"添加路由\"><a href=\"#添加路由\" class=\"headerlink\" title=\"添加路由\"></a>添加路由</h3><ul>\n<li>设置路由<br>打开app.roytes.ts，设置如下路由：</li>\n</ul>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> &#123; RouterConfig &#125; from <span class=\"string\">'@angular/router'</span>;</div><div class=\"line\"><span class=\"keyword\">import</span> &#123; Login &#125; from <span class=\"string\">'./login'</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> routes: RouterConfig = [</div><div class=\"line\">  &#123; path: <span class=\"string\">'login'</span>,  component: Login &#125;,</div><div class=\"line\">  &#123; path: <span class=\"string\">'**'</span>,    component: Login &#125;,</div><div class=\"line\">];</div></pre></td></tr></table></figure>\n<ul>\n<li>主组件app.component.ts中添加路由输出</li>\n</ul>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">template: <span class=\"string\">`</div><div class=\"line\"> &lt;main&gt;</div><div class=\"line\">   &lt;router-outlet&gt;&lt;/router-outlet&gt;</div><div class=\"line\"> &lt;/main&gt;</div><div class=\"line\"> `</span></div></pre></td></tr></table></figure>\n<p>从上面可以看到，Angular2中路由也是与组件一样导出该功能，具体的我们会在后面的文章中介绍。</p>\n<h2 id=\"编写Login组件\"><a href=\"#编写Login组件\" class=\"headerlink\" title=\"编写Login组件\"></a>编写Login组件</h2><hr>\n<p>前面也提到过，Login组件相关文件统一管理在login文件夹中。</p>\n<h3 id=\"添加模板\"><a href=\"#添加模板\" class=\"headerlink\" title=\"添加模板\"></a>添加模板</h3><ul>\n<li>添加该组件模板login.template.ts，如下</li>\n</ul>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"container login\"</span>&gt;</span></div><div class=\"line\">    <span class=\"comment\">&lt;!--(ngSubmit)为绑定表单事件--&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">form</span> <span class=\"attr\">id</span>=<span class=\"string\">\"login-form\"</span> (<span class=\"attr\">ngSubmit</span>)=<span class=\"string\">\"submitForm(name, password)\"</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">h3</span> <span class=\"attr\">class</span>=<span class=\"string\">\"text-center\"</span>&gt;</span>login<span class=\"tag\">&lt;/<span class=\"name\">h3</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"form-group\"</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">label</span>&gt;</span>account<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></div><div class=\"line\">            <span class=\"comment\">&lt;!--[value]绑定该组件作用域的值，而(input)用于处理输入事件，实现双向绑定--&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">class</span>=<span class=\"string\">\"form-control\"</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text\"</span> [<span class=\"attr\">value</span>]=<span class=\"string\">\"name\"</span> (<span class=\"attr\">input</span>)=<span class=\"string\">\"name = $event.target.value\"</span> <span class=\"attr\">placeholder</span>=<span class=\"string\">\"username\"</span> <span class=\"attr\">autofocus</span> <span class=\"attr\">required</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"form-group\"</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">label</span>&gt;</span>Password<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></div><div class=\"line\">            <span class=\"comment\">&lt;!--[value]绑定该组件作用域的值，而(input)用于处理输入事件，实现双向绑定--&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">class</span>=<span class=\"string\">\"form-control\"</span> <span class=\"attr\">type</span>=<span class=\"string\">\"password\"</span> [<span class=\"attr\">value</span>]=<span class=\"string\">\"password\"</span> (<span class=\"attr\">input</span>)=<span class=\"string\">\"password = $event.target.value\"</span> <span class=\"attr\">placeholder</span>=<span class=\"string\">\"password\"</span> <span class=\"attr\">required</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">type</span>=<span class=\"string\">\"submit\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"btn btn-default\"</span>&gt;</span>登录<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">form</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div></pre></td></tr></table></figure>\n<h3 id=\"添加样式\"><a href=\"#添加样式\" class=\"headerlink\" title=\"添加样式\"></a>添加样式</h3><p>Angular 2应用使用标准的CSS来设置样式。这意味着我们可以把关于CSS的那些知识和技能直接用于我们的Angular程序中，比如：样式表、选择器、规则，以及媒体查询等。</p>\n<p>在此基础上，Angular还能把组件样式紧紧的“捆绑”在我们的组件上，以实现一种比标准样式表更加模块化的设计。</p>\n<ul>\n<li><p>添加样式的方式</p>\n<ul>\n<li>元数据中的样式：给@Component装饰器添加一个styles数组型属性</li>\n<li>模板内联样式：放到<code>&lt;style&gt;</code>标签中来直接在 HTML 模板中嵌入样式</li>\n<li>元数据中的样式表URL：给组件的@Component装饰器中添加一个styleUrls属性来从外部CSS文件中加载样式</li>\n<li>模板中的link 标签：在组件的HTML模板中嵌入<link>标签</li>\n<li>CSS@imports：利用标准的CSS@import规则来把其它CSS文件导入到我们的CSS文件中</li>\n</ul>\n</li>\n<li><p>控制视图的包装模式</p>\n<ul>\n<li>原生Native模式：使用浏览器原生的Shadow DOM实现来为组件的宿主元素附加一个Shadow DOM。组件的样式被包裹在这个Shadow DOM中</li>\n<li>仿真Emulated模式（默认值）通过预处理（并改名）CSS代码来仿真Shadow DOM的行为，以达到把CSS样式局限在组件视图中的目的（默认选项）</li>\n<li>无None：Angular不使用视图包装。Angular会把CSS添加到全局样式中。而不会应用上前面讨论过的那些局限化规则、隔离和保护等规则。 从本质上来说，这跟把组件的样式直接放进HTML是一样的</li>\n</ul>\n</li>\n<li><p>特殊的选择器</p>\n<ul>\n<li>:host：使用:host伪类选择器，用来选择组件宿主元素中的元素 （相对于组件模板内部的元素）</li>\n<li>:host-context：在当前组件宿主元素的祖先节点中查找CSS类， 直到文档的根节点为止</li>\n</ul>\n</li>\n<li><p>添加该组件样式login.style.css，如下</p>\n</li>\n</ul>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"selector-class\">.login</span> &#123;</div><div class=\"line\">    <span class=\"attribute\">padding</span>: <span class=\"number\">200px</span> <span class=\"number\">20px</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"selector-class\">.login</span> &gt; <span class=\"selector-tag\">form</span> &#123;</div><div class=\"line\">    <span class=\"attribute\">border</span>: solid <span class=\"number\">1px</span> <span class=\"number\">#999</span>;</div><div class=\"line\">    <span class=\"attribute\">padding</span>: <span class=\"number\">20px</span>;</div><div class=\"line\">    <span class=\"attribute\">border-radius</span>: <span class=\"number\">5px</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>不得不说，ng2中组件样式的作用域仅在于该组件内，真正做到了组件的解耦。<br>当然，我们查看元素的时候便可以发现，ng2通过给组件设定随机的代号属性来管理每个组件的样式，如图：<br><img src=\"http://o905ne85q.bkt.clouddn.com/F11E.tmp.png\" alt=\"image\"></p>\n<ul>\n<li>参考：<a href=\"https://angular.cn/docs/ts/latest/guide/component-styles.html\">组件样式</a></li>\n</ul>\n<h3 id=\"定义Login组件\"><a href=\"#定义Login组件\" class=\"headerlink\" title=\"定义Login组件\"></a>定义Login组件</h3><ul>\n<li>在login.component.ts文件中定义Login组件</li>\n</ul>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> &#123; Component &#125; from <span class=\"string\">'@angular/core'</span>;</div><div class=\"line\"></div><div class=\"line\">@Component(&#123;</div><div class=\"line\">  selector: <span class=\"string\">'login'</span>, <span class=\"comment\">// 设置元素选择器，&lt;login&gt;&lt;/login&gt;</span></div><div class=\"line\">  styleUrls: [<span class=\"string\">'./login.style.css'</span>], <span class=\"comment\">// 样式文件引入</span></div><div class=\"line\">  templateUrl: <span class=\"string\">'./login.template.html'</span> <span class=\"comment\">// 模板文件引入</span></div><div class=\"line\">&#125;)</div><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> Login &#123;</div><div class=\"line\">  <span class=\"comment\">// 定义并初始化用户名和密码以及其类型</span></div><div class=\"line\">  name: <span class=\"built_in\">string</span> = <span class=\"string\">''</span>;</div><div class=\"line\">  password: <span class=\"built_in\">string</span> = <span class=\"string\">''</span>;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">// 定义提交表单事件</span></div><div class=\"line\">  submitForm(name, password) &#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(name, password);</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"输出Login组件\"><a href=\"#输出Login组件\" class=\"headerlink\" title=\"输出Login组件\"></a>输出Login组件</h3><ul>\n<li>在index.ts文件中，我们输出Login组件</li>\n</ul>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">export</span> * from <span class=\"string\">'./login.component'</span>;</div></pre></td></tr></table></figure>\n<h2 id=\"结束语\"><a href=\"#结束语\" class=\"headerlink\" title=\"结束语\"></a>结束语</h2><hr>\n<p>本骚年也是Angular2的初体验者，如果小伙伴们有好的资源请千万千万要分享呀。<br><a href=\"https://github.com/godbasin/godbasin.github.io/tree/blog-codes/angular2-notes/2-create-login\">此处查看项目代码（仅包含src部分）</a><br><a href=\"http://oc8qsv1w6.bkt.clouddn.com/2-create-login/index.html\">此处查看页面效果</a></p>"},{"title":"Angular2使用笔记4--路由和导航","date":"2016-10-16T14:19:53.000Z","_content":"最近在学习Angular2作为前端的框架，《Angular2使用笔记》系列用于记录过程中的一些使用和解决方法。\n本文记录ng2路由的一些特别的地方。\n<!--more-->\n## 组件路由器\n-----\n### 路由的实现原理\n虽然之前的一些文章也有讲过但也应用路由的一些原理，这里再简单介绍一下一般路由功能的实现原理\n- 通过hash（location.href.hash）获取位置\n- 设置全局拦截器\n  - 匹配路径：通配/string/:number\n  - 判断后加载对应模块\n- 通过window.onhashchange监听路由变化\n\n### ng2路由器基础知识\n- 组件路由器\n  - 为应用提供了一个配置过的路由器\n  - 组件中有一个RouterOutlet，它能显示路由器所生成的视图\n  - 有一些RouterLink，用户可以点击它们，来通过路由器进行导航\n\n- 关键词\n  - Router（路由器）：为激活的 URL 显示应用组件。管理从一个组件到另一个组件的导航\n  - RouterModule（路由器模块）：一个独立的Angular模块，用于提供所需的服务提供商，以及用来在应用视图之间进行导航的指令\n  - Routes（路由数组）：定义了一个路由数组，每一个都会把一个URL路径映射到一个组件\n  - Route（路由）：定义路由器该如何根据URL模式（ pattern ）来导航到组件。大多数路由都由路径和组件类构成\n  - RouterOutlet（路由插座）：该指令（ <router-outlet> ）用来标记出路由器该在哪里显示视图\n  - RouterLink（路由链接）：该指令用来把一个可点击的HTML元素绑定到路由。 点击带有绑定到字符串或链接参数数组的routerLink指令的A标签就会触发一次导航\n  - RouterLinkActive（活动路由链接）：当HTML元素上或元素内的routerLink变为激活或非激活状态时，该指令为这个HTML元素添加或移除CSS类\n  - ActivatedRoute（激活的路由）：为每个路由组件提供提供的一个服务，它包含特定于路由的信息，比如路由参数、静态数据、解析数据、全局查询参数和全局碎片（fragment）\n  - RouterState（路由器状态）：路由器的当前状态包含了一棵由程序中激活的路由构成的树。它包含一些用于遍历路由树的快捷方法\n\n- <base href>\n  - index.html的<head>标签下添加一个<base>元素，来告诉路由器该如何合成导航用的URL\n  - 很多时候我都使用相对路径\n\n``` html\n<base href=\"./\">\n```\n\n- 从路由库中导入\nAngular 的组件路由器是一个可选的服务，它用来呈现指定的URL所对应的视图。 它并不是Angular 2核心库的一部分，而是在它自己的@angular/router包中\n\n``` typescript\nimport { Routes, RouterModule }   from '@angular/router';\n```\n\n- 参考\n  - [路由与导航](https://angular.cn/docs/ts/latest/guide/router.html#!#navigate)\n\n## 有意思的ng2路由器\n---\n### 热拔插的路由器\n- 使用路由插座\n  - 可以在任意层级的组件中使用\n  - 注入服务并在Component的directives中使用\n\n``` ts\n// 获取路由指令\nimport { ROUTER_DIRECTIVES } from '@angular/router';\n// 在Component的directives中使用\n@Component({\n  directives: [ROUTER_DIRECTIVES]\n})\n```\n\n  - 在视图模板中插入路由\n\n``` html\n<!-- 路由视图在此处插入 -->\n<router-outlet></router-outlet>\n```\n\n- 配置路由组件\n  - 当浏览器的地址变化时，该路由器会查找相应的Route（路由定义，简称路由），并据此确定所要显示的组件\n  - RouterConfig是一个路由数组，它会决定如何导航\n    - 每个Route会把一个URL的path映射到一个组件\n    - data属性用来存放于每个具体路由有关的任意信息。该数据可以被任何一个激活路由访问，并能用来保存诸如 页标题、面包屑以及其它只读数据\n    - :id是一个路由参数的令牌(Token)\n    - **代表该路由是一个通配符路径。如果当前URL无法匹配上我们配置过的任何一个路由中的路径，路由器就会匹配上这一个\n\n``` ts\n/* 这里举一个例子\n * 任务组件Task下分了几个模块，分别是\n * - 任务列表TaskList组件\n * - 任务详情TaskDetail组件\n * - 任务编辑TaskEdit组件\n */\n// 引入路由类\nimport { RouterConfig } from '@angular/router';\n\n// 分别获取组件\nimport { Task } from './index.component';\nimport { TaskDetail } from './detail';\nimport { TaskEdit } from './edit';\nimport { TaskList } from './list';\n\n// 定义并输出路由类\nexport const taskRoutes: RouterConfig = [{\n  path: 'task', component: Task,\n  children: [\n    { path: 'detail', component: TaskDetail },\n    { path: 'edit', component: TaskEdit },\n    { path: 'list', component: TaskList },\n    { path: '', component: TaskList }\n  ]\n}];\n```\n\n- 在启动路由中使用路由实例\n上面我们定义的任务组件相关的路由，可以直接在启动路由中使用拓展方式添加进去，这样我们就可以直接在某个组件里详细定义该组件的路由，对外只需注入就可以了。\n\n``` ts\n// 获取该路由类\nimport { taskRoutes } from './task/routes';\n\nexport const routes: RouterConfig = [\n  ...taskRoutes, // 拓展路由\n  { path: 'login', component: Login }\n];\n```\n\n### 路由器链接\n该属性我们在上一节中也有用过，具体看[《Angular2使用笔记3--创建头部组件》](https://godbasin.github.io/2016/10/07/angular2-notes-3-create-header/)。\n- RouterLink绑定\n  - A标签中，有一个绑定RouterLink指令的属性绑定\n  - 可以通过提供查询字符串参数为RouterLink提供更多情境信息\n  - 可提供一个URL片段（Fragment或hash）来跳转到本页面中的其它区域\n- RouterLinkActive绑定\n  - 每个A标签还有一个到RouterLinkActive指令的属性绑定\n  - 等号（=）右侧的模板表达式包含用空格分隔的一些CSS类，还可以把RouterLinkActive指令绑定到一个CSS类组成的数组\n  - 用于在相关的RouterLink被激活时为所在元素添加或移除CSS类。 该指令可以直接添加到该元素上，也可以添加到其父元素上\n``` html\n<!--当path路由被激活时，active的class将会被添加上-->\n<a routerLink=\"/path\" routerLinkActive=\"active\">Temple</a>\n```\n\n## 结束语\n-----\nAngular2中路由根据组件树和状态能生产自己的状态树，路由器状态为我们提供了从任意激活路由开始向上或向下遍历路由树的一种方式。\n总感觉这些特性能拿来干很有趣的事情呢。","source":"_posts/angular2-notes-4-route-component.md","raw":"---\ntitle: Angular2使用笔记4--路由和导航\ndate: 2016-10-16 22:19:53\ncategories: angular2火锅\ntags: 笔记\n---\n最近在学习Angular2作为前端的框架，《Angular2使用笔记》系列用于记录过程中的一些使用和解决方法。\n本文记录ng2路由的一些特别的地方。\n<!--more-->\n## 组件路由器\n-----\n### 路由的实现原理\n虽然之前的一些文章也有讲过但也应用路由的一些原理，这里再简单介绍一下一般路由功能的实现原理\n- 通过hash（location.href.hash）获取位置\n- 设置全局拦截器\n  - 匹配路径：通配/string/:number\n  - 判断后加载对应模块\n- 通过window.onhashchange监听路由变化\n\n### ng2路由器基础知识\n- 组件路由器\n  - 为应用提供了一个配置过的路由器\n  - 组件中有一个RouterOutlet，它能显示路由器所生成的视图\n  - 有一些RouterLink，用户可以点击它们，来通过路由器进行导航\n\n- 关键词\n  - Router（路由器）：为激活的 URL 显示应用组件。管理从一个组件到另一个组件的导航\n  - RouterModule（路由器模块）：一个独立的Angular模块，用于提供所需的服务提供商，以及用来在应用视图之间进行导航的指令\n  - Routes（路由数组）：定义了一个路由数组，每一个都会把一个URL路径映射到一个组件\n  - Route（路由）：定义路由器该如何根据URL模式（ pattern ）来导航到组件。大多数路由都由路径和组件类构成\n  - RouterOutlet（路由插座）：该指令（ <router-outlet> ）用来标记出路由器该在哪里显示视图\n  - RouterLink（路由链接）：该指令用来把一个可点击的HTML元素绑定到路由。 点击带有绑定到字符串或链接参数数组的routerLink指令的A标签就会触发一次导航\n  - RouterLinkActive（活动路由链接）：当HTML元素上或元素内的routerLink变为激活或非激活状态时，该指令为这个HTML元素添加或移除CSS类\n  - ActivatedRoute（激活的路由）：为每个路由组件提供提供的一个服务，它包含特定于路由的信息，比如路由参数、静态数据、解析数据、全局查询参数和全局碎片（fragment）\n  - RouterState（路由器状态）：路由器的当前状态包含了一棵由程序中激活的路由构成的树。它包含一些用于遍历路由树的快捷方法\n\n- <base href>\n  - index.html的<head>标签下添加一个<base>元素，来告诉路由器该如何合成导航用的URL\n  - 很多时候我都使用相对路径\n\n``` html\n<base href=\"./\">\n```\n\n- 从路由库中导入\nAngular 的组件路由器是一个可选的服务，它用来呈现指定的URL所对应的视图。 它并不是Angular 2核心库的一部分，而是在它自己的@angular/router包中\n\n``` typescript\nimport { Routes, RouterModule }   from '@angular/router';\n```\n\n- 参考\n  - [路由与导航](https://angular.cn/docs/ts/latest/guide/router.html#!#navigate)\n\n## 有意思的ng2路由器\n---\n### 热拔插的路由器\n- 使用路由插座\n  - 可以在任意层级的组件中使用\n  - 注入服务并在Component的directives中使用\n\n``` ts\n// 获取路由指令\nimport { ROUTER_DIRECTIVES } from '@angular/router';\n// 在Component的directives中使用\n@Component({\n  directives: [ROUTER_DIRECTIVES]\n})\n```\n\n  - 在视图模板中插入路由\n\n``` html\n<!-- 路由视图在此处插入 -->\n<router-outlet></router-outlet>\n```\n\n- 配置路由组件\n  - 当浏览器的地址变化时，该路由器会查找相应的Route（路由定义，简称路由），并据此确定所要显示的组件\n  - RouterConfig是一个路由数组，它会决定如何导航\n    - 每个Route会把一个URL的path映射到一个组件\n    - data属性用来存放于每个具体路由有关的任意信息。该数据可以被任何一个激活路由访问，并能用来保存诸如 页标题、面包屑以及其它只读数据\n    - :id是一个路由参数的令牌(Token)\n    - **代表该路由是一个通配符路径。如果当前URL无法匹配上我们配置过的任何一个路由中的路径，路由器就会匹配上这一个\n\n``` ts\n/* 这里举一个例子\n * 任务组件Task下分了几个模块，分别是\n * - 任务列表TaskList组件\n * - 任务详情TaskDetail组件\n * - 任务编辑TaskEdit组件\n */\n// 引入路由类\nimport { RouterConfig } from '@angular/router';\n\n// 分别获取组件\nimport { Task } from './index.component';\nimport { TaskDetail } from './detail';\nimport { TaskEdit } from './edit';\nimport { TaskList } from './list';\n\n// 定义并输出路由类\nexport const taskRoutes: RouterConfig = [{\n  path: 'task', component: Task,\n  children: [\n    { path: 'detail', component: TaskDetail },\n    { path: 'edit', component: TaskEdit },\n    { path: 'list', component: TaskList },\n    { path: '', component: TaskList }\n  ]\n}];\n```\n\n- 在启动路由中使用路由实例\n上面我们定义的任务组件相关的路由，可以直接在启动路由中使用拓展方式添加进去，这样我们就可以直接在某个组件里详细定义该组件的路由，对外只需注入就可以了。\n\n``` ts\n// 获取该路由类\nimport { taskRoutes } from './task/routes';\n\nexport const routes: RouterConfig = [\n  ...taskRoutes, // 拓展路由\n  { path: 'login', component: Login }\n];\n```\n\n### 路由器链接\n该属性我们在上一节中也有用过，具体看[《Angular2使用笔记3--创建头部组件》](https://godbasin.github.io/2016/10/07/angular2-notes-3-create-header/)。\n- RouterLink绑定\n  - A标签中，有一个绑定RouterLink指令的属性绑定\n  - 可以通过提供查询字符串参数为RouterLink提供更多情境信息\n  - 可提供一个URL片段（Fragment或hash）来跳转到本页面中的其它区域\n- RouterLinkActive绑定\n  - 每个A标签还有一个到RouterLinkActive指令的属性绑定\n  - 等号（=）右侧的模板表达式包含用空格分隔的一些CSS类，还可以把RouterLinkActive指令绑定到一个CSS类组成的数组\n  - 用于在相关的RouterLink被激活时为所在元素添加或移除CSS类。 该指令可以直接添加到该元素上，也可以添加到其父元素上\n``` html\n<!--当path路由被激活时，active的class将会被添加上-->\n<a routerLink=\"/path\" routerLinkActive=\"active\">Temple</a>\n```\n\n## 结束语\n-----\nAngular2中路由根据组件树和状态能生产自己的状态树，路由器状态为我们提供了从任意激活路由开始向上或向下遍历路由树的一种方式。\n总感觉这些特性能拿来干很有趣的事情呢。","slug":"angular2-notes-4-route-component","published":1,"updated":"2016-10-16T14:21:33.907Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cix45hufl001qxotuhi9tgcn5","content":"<p>最近在学习Angular2作为前端的框架，《Angular2使用笔记》系列用于记录过程中的一些使用和解决方法。<br>本文记录ng2路由的一些特别的地方。<br><a id=\"more\"></a></p>\n<h2 id=\"组件路由器\"><a href=\"#组件路由器\" class=\"headerlink\" title=\"组件路由器\"></a>组件路由器</h2><hr>\n<h3 id=\"路由的实现原理\"><a href=\"#路由的实现原理\" class=\"headerlink\" title=\"路由的实现原理\"></a>路由的实现原理</h3><p>虽然之前的一些文章也有讲过但也应用路由的一些原理，这里再简单介绍一下一般路由功能的实现原理</p>\n<ul>\n<li>通过hash（location.href.hash）获取位置</li>\n<li>设置全局拦截器<ul>\n<li>匹配路径：通配/string/:number</li>\n<li>判断后加载对应模块</li>\n</ul>\n</li>\n<li>通过window.onhashchange监听路由变化</li>\n</ul>\n<h3 id=\"ng2路由器基础知识\"><a href=\"#ng2路由器基础知识\" class=\"headerlink\" title=\"ng2路由器基础知识\"></a>ng2路由器基础知识</h3><ul>\n<li><p>组件路由器</p>\n<ul>\n<li>为应用提供了一个配置过的路由器</li>\n<li>组件中有一个RouterOutlet，它能显示路由器所生成的视图</li>\n<li>有一些RouterLink，用户可以点击它们，来通过路由器进行导航</li>\n</ul>\n</li>\n<li><p>关键词</p>\n<ul>\n<li>Router（路由器）：为激活的 URL 显示应用组件。管理从一个组件到另一个组件的导航</li>\n<li>RouterModule（路由器模块）：一个独立的Angular模块，用于提供所需的服务提供商，以及用来在应用视图之间进行导航的指令</li>\n<li>Routes（路由数组）：定义了一个路由数组，每一个都会把一个URL路径映射到一个组件</li>\n<li>Route（路由）：定义路由器该如何根据URL模式（ pattern ）来导航到组件。大多数路由都由路径和组件类构成</li>\n<li>RouterOutlet（路由插座）：该指令（ <router-outlet> ）用来标记出路由器该在哪里显示视图</router-outlet></li>\n<li>RouterLink（路由链接）：该指令用来把一个可点击的HTML元素绑定到路由。 点击带有绑定到字符串或链接参数数组的routerLink指令的A标签就会触发一次导航</li>\n<li>RouterLinkActive（活动路由链接）：当HTML元素上或元素内的routerLink变为激活或非激活状态时，该指令为这个HTML元素添加或移除CSS类</li>\n<li>ActivatedRoute（激活的路由）：为每个路由组件提供提供的一个服务，它包含特定于路由的信息，比如路由参数、静态数据、解析数据、全局查询参数和全局碎片（fragment）</li>\n<li>RouterState（路由器状态）：路由器的当前状态包含了一棵由程序中激活的路由构成的树。它包含一些用于遍历路由树的快捷方法</li>\n</ul>\n</li>\n<li><p><base href=\"\"></p>\n<ul>\n<li>index.html的<head>标签下添加一个<base>元素，来告诉路由器该如何合成导航用的URL</head></li>\n<li>很多时候我都使用相对路径</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">base</span> <span class=\"attr\">href</span>=<span class=\"string\">\"./\"</span>&gt;</span></div></pre></td></tr></table></figure>\n<ul>\n<li>从路由库中导入<br>Angular 的组件路由器是一个可选的服务，它用来呈现指定的URL所对应的视图。 它并不是Angular 2核心库的一部分，而是在它自己的@angular/router包中</li>\n</ul>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> &#123; Routes, RouterModule &#125;   from <span class=\"string\">'@angular/router'</span>;</div></pre></td></tr></table></figure>\n<ul>\n<li>参考<ul>\n<li><a href=\"https://angular.cn/docs/ts/latest/guide/router.html#!#navigate\" target=\"_blank\" rel=\"external\">路由与导航</a></li>\n</ul>\n</li>\n</ul>\n<h2 id=\"有意思的ng2路由器\"><a href=\"#有意思的ng2路由器\" class=\"headerlink\" title=\"有意思的ng2路由器\"></a>有意思的ng2路由器</h2><hr>\n<h3 id=\"热拔插的路由器\"><a href=\"#热拔插的路由器\" class=\"headerlink\" title=\"热拔插的路由器\"></a>热拔插的路由器</h3><ul>\n<li>使用路由插座<ul>\n<li>可以在任意层级的组件中使用</li>\n<li>注入服务并在Component的directives中使用</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 获取路由指令</span></div><div class=\"line\"><span class=\"keyword\">import</span> &#123; ROUTER_DIRECTIVES &#125; from <span class=\"string\">'@angular/router'</span>;</div><div class=\"line\"><span class=\"comment\">// 在Component的directives中使用</span></div><div class=\"line\">@Component(&#123;</div><div class=\"line\">  directives: [ROUTER_DIRECTIVES]</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<ul>\n<li>在视图模板中插入路由</li>\n</ul>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">&lt;!-- 路由视图在此处插入 --&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">router-outlet</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">router-outlet</span>&gt;</span></div></pre></td></tr></table></figure>\n<ul>\n<li>配置路由组件<ul>\n<li>当浏览器的地址变化时，该路由器会查找相应的Route（路由定义，简称路由），并据此确定所要显示的组件</li>\n<li>RouterConfig是一个路由数组，它会决定如何导航<ul>\n<li>每个Route会把一个URL的path映射到一个组件</li>\n<li>data属性用来存放于每个具体路由有关的任意信息。该数据可以被任何一个激活路由访问，并能用来保存诸如 页标题、面包屑以及其它只读数据</li>\n<li>:id是一个路由参数的令牌(Token)</li>\n<li>**代表该路由是一个通配符路径。如果当前URL无法匹配上我们配置过的任何一个路由中的路径，路由器就会匹配上这一个</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/* 这里举一个例子</span></div><div class=\"line\"> * 任务组件Task下分了几个模块，分别是</div><div class=\"line\"> * - 任务列表TaskList组件</div><div class=\"line\"> * - 任务详情TaskDetail组件</div><div class=\"line\"> * - 任务编辑TaskEdit组件</div><div class=\"line\"> */</div><div class=\"line\"><span class=\"comment\">// 引入路由类</span></div><div class=\"line\"><span class=\"keyword\">import</span> &#123; RouterConfig &#125; from <span class=\"string\">'@angular/router'</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 分别获取组件</span></div><div class=\"line\"><span class=\"keyword\">import</span> &#123; Task &#125; from <span class=\"string\">'./index.component'</span>;</div><div class=\"line\"><span class=\"keyword\">import</span> &#123; TaskDetail &#125; from <span class=\"string\">'./detail'</span>;</div><div class=\"line\"><span class=\"keyword\">import</span> &#123; TaskEdit &#125; from <span class=\"string\">'./edit'</span>;</div><div class=\"line\"><span class=\"keyword\">import</span> &#123; TaskList &#125; from <span class=\"string\">'./list'</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 定义并输出路由类</span></div><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> taskRoutes: RouterConfig = [&#123;</div><div class=\"line\">  path: <span class=\"string\">'task'</span>, component: Task,</div><div class=\"line\">  children: [</div><div class=\"line\">    &#123; path: <span class=\"string\">'detail'</span>, component: TaskDetail &#125;,</div><div class=\"line\">    &#123; path: <span class=\"string\">'edit'</span>, component: TaskEdit &#125;,</div><div class=\"line\">    &#123; path: <span class=\"string\">'list'</span>, component: TaskList &#125;,</div><div class=\"line\">    &#123; path: <span class=\"string\">''</span>, component: TaskList &#125;</div><div class=\"line\">  ]</div><div class=\"line\">&#125;];</div></pre></td></tr></table></figure>\n<ul>\n<li>在启动路由中使用路由实例<br>上面我们定义的任务组件相关的路由，可以直接在启动路由中使用拓展方式添加进去，这样我们就可以直接在某个组件里详细定义该组件的路由，对外只需注入就可以了。</li>\n</ul>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 获取该路由类</span></div><div class=\"line\"><span class=\"keyword\">import</span> &#123; taskRoutes &#125; from <span class=\"string\">'./task/routes'</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> routes: RouterConfig = [</div><div class=\"line\">  ...taskRoutes, <span class=\"comment\">// 拓展路由</span></div><div class=\"line\">  &#123; path: <span class=\"string\">'login'</span>, component: Login &#125;</div><div class=\"line\">];</div></pre></td></tr></table></figure>\n<h3 id=\"路由器链接\"><a href=\"#路由器链接\" class=\"headerlink\" title=\"路由器链接\"></a>路由器链接</h3><p>该属性我们在上一节中也有用过，具体看<a href=\"https://godbasin.github.io/2016/10/07/angular2-notes-3-create-header/\">《Angular2使用笔记3–创建头部组件》</a>。</p>\n<ul>\n<li>RouterLink绑定<ul>\n<li>A标签中，有一个绑定RouterLink指令的属性绑定</li>\n<li>可以通过提供查询字符串参数为RouterLink提供更多情境信息</li>\n<li>可提供一个URL片段（Fragment或hash）来跳转到本页面中的其它区域</li>\n</ul>\n</li>\n<li>RouterLinkActive绑定<ul>\n<li>每个A标签还有一个到RouterLinkActive指令的属性绑定</li>\n<li>等号（=）右侧的模板表达式包含用空格分隔的一些CSS类，还可以把RouterLinkActive指令绑定到一个CSS类组成的数组</li>\n<li>用于在相关的RouterLink被激活时为所在元素添加或移除CSS类。 该指令可以直接添加到该元素上，也可以添加到其父元素上<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">&lt;!--当path路由被激活时，active的class将会被添加上--&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">routerLink</span>=<span class=\"string\">\"/path\"</span> <span class=\"attr\">routerLinkActive</span>=<span class=\"string\">\"active\"</span>&gt;</span>Temple<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></div></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"结束语\"><a href=\"#结束语\" class=\"headerlink\" title=\"结束语\"></a>结束语</h2><hr>\n<p>Angular2中路由根据组件树和状态能生产自己的状态树，路由器状态为我们提供了从任意激活路由开始向上或向下遍历路由树的一种方式。<br>总感觉这些特性能拿来干很有趣的事情呢。</p>\n","excerpt":"<p>最近在学习Angular2作为前端的框架，《Angular2使用笔记》系列用于记录过程中的一些使用和解决方法。<br>本文记录ng2路由的一些特别的地方。<br>","more":"</p>\n<h2 id=\"组件路由器\"><a href=\"#组件路由器\" class=\"headerlink\" title=\"组件路由器\"></a>组件路由器</h2><hr>\n<h3 id=\"路由的实现原理\"><a href=\"#路由的实现原理\" class=\"headerlink\" title=\"路由的实现原理\"></a>路由的实现原理</h3><p>虽然之前的一些文章也有讲过但也应用路由的一些原理，这里再简单介绍一下一般路由功能的实现原理</p>\n<ul>\n<li>通过hash（location.href.hash）获取位置</li>\n<li>设置全局拦截器<ul>\n<li>匹配路径：通配/string/:number</li>\n<li>判断后加载对应模块</li>\n</ul>\n</li>\n<li>通过window.onhashchange监听路由变化</li>\n</ul>\n<h3 id=\"ng2路由器基础知识\"><a href=\"#ng2路由器基础知识\" class=\"headerlink\" title=\"ng2路由器基础知识\"></a>ng2路由器基础知识</h3><ul>\n<li><p>组件路由器</p>\n<ul>\n<li>为应用提供了一个配置过的路由器</li>\n<li>组件中有一个RouterOutlet，它能显示路由器所生成的视图</li>\n<li>有一些RouterLink，用户可以点击它们，来通过路由器进行导航</li>\n</ul>\n</li>\n<li><p>关键词</p>\n<ul>\n<li>Router（路由器）：为激活的 URL 显示应用组件。管理从一个组件到另一个组件的导航</li>\n<li>RouterModule（路由器模块）：一个独立的Angular模块，用于提供所需的服务提供商，以及用来在应用视图之间进行导航的指令</li>\n<li>Routes（路由数组）：定义了一个路由数组，每一个都会把一个URL路径映射到一个组件</li>\n<li>Route（路由）：定义路由器该如何根据URL模式（ pattern ）来导航到组件。大多数路由都由路径和组件类构成</li>\n<li>RouterOutlet（路由插座）：该指令（ <router-outlet> ）用来标记出路由器该在哪里显示视图</li>\n<li>RouterLink（路由链接）：该指令用来把一个可点击的HTML元素绑定到路由。 点击带有绑定到字符串或链接参数数组的routerLink指令的A标签就会触发一次导航</li>\n<li>RouterLinkActive（活动路由链接）：当HTML元素上或元素内的routerLink变为激活或非激活状态时，该指令为这个HTML元素添加或移除CSS类</li>\n<li>ActivatedRoute（激活的路由）：为每个路由组件提供提供的一个服务，它包含特定于路由的信息，比如路由参数、静态数据、解析数据、全局查询参数和全局碎片（fragment）</li>\n<li>RouterState（路由器状态）：路由器的当前状态包含了一棵由程序中激活的路由构成的树。它包含一些用于遍历路由树的快捷方法</li>\n</ul>\n</li>\n<li><p><base href></p>\n<ul>\n<li>index.html的<head>标签下添加一个<base>元素，来告诉路由器该如何合成导航用的URL</li>\n<li>很多时候我都使用相对路径</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">base</span> <span class=\"attr\">href</span>=<span class=\"string\">\"./\"</span>&gt;</span></div></pre></td></tr></table></figure>\n<ul>\n<li>从路由库中导入<br>Angular 的组件路由器是一个可选的服务，它用来呈现指定的URL所对应的视图。 它并不是Angular 2核心库的一部分，而是在它自己的@angular/router包中</li>\n</ul>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> &#123; Routes, RouterModule &#125;   from <span class=\"string\">'@angular/router'</span>;</div></pre></td></tr></table></figure>\n<ul>\n<li>参考<ul>\n<li><a href=\"https://angular.cn/docs/ts/latest/guide/router.html#!#navigate\">路由与导航</a></li>\n</ul>\n</li>\n</ul>\n<h2 id=\"有意思的ng2路由器\"><a href=\"#有意思的ng2路由器\" class=\"headerlink\" title=\"有意思的ng2路由器\"></a>有意思的ng2路由器</h2><hr>\n<h3 id=\"热拔插的路由器\"><a href=\"#热拔插的路由器\" class=\"headerlink\" title=\"热拔插的路由器\"></a>热拔插的路由器</h3><ul>\n<li>使用路由插座<ul>\n<li>可以在任意层级的组件中使用</li>\n<li>注入服务并在Component的directives中使用</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 获取路由指令</span></div><div class=\"line\"><span class=\"keyword\">import</span> &#123; ROUTER_DIRECTIVES &#125; from <span class=\"string\">'@angular/router'</span>;</div><div class=\"line\"><span class=\"comment\">// 在Component的directives中使用</span></div><div class=\"line\">@Component(&#123;</div><div class=\"line\">  directives: [ROUTER_DIRECTIVES]</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<ul>\n<li>在视图模板中插入路由</li>\n</ul>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">&lt;!-- 路由视图在此处插入 --&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">router-outlet</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">router-outlet</span>&gt;</span></div></pre></td></tr></table></figure>\n<ul>\n<li>配置路由组件<ul>\n<li>当浏览器的地址变化时，该路由器会查找相应的Route（路由定义，简称路由），并据此确定所要显示的组件</li>\n<li>RouterConfig是一个路由数组，它会决定如何导航<ul>\n<li>每个Route会把一个URL的path映射到一个组件</li>\n<li>data属性用来存放于每个具体路由有关的任意信息。该数据可以被任何一个激活路由访问，并能用来保存诸如 页标题、面包屑以及其它只读数据</li>\n<li>:id是一个路由参数的令牌(Token)</li>\n<li>**代表该路由是一个通配符路径。如果当前URL无法匹配上我们配置过的任何一个路由中的路径，路由器就会匹配上这一个</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/* 这里举一个例子</div><div class=\"line\"> * 任务组件Task下分了几个模块，分别是</div><div class=\"line\"> * - 任务列表TaskList组件</div><div class=\"line\"> * - 任务详情TaskDetail组件</div><div class=\"line\"> * - 任务编辑TaskEdit组件</div><div class=\"line\"> */</span></div><div class=\"line\"><span class=\"comment\">// 引入路由类</span></div><div class=\"line\"><span class=\"keyword\">import</span> &#123; RouterConfig &#125; from <span class=\"string\">'@angular/router'</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 分别获取组件</span></div><div class=\"line\"><span class=\"keyword\">import</span> &#123; Task &#125; from <span class=\"string\">'./index.component'</span>;</div><div class=\"line\"><span class=\"keyword\">import</span> &#123; TaskDetail &#125; from <span class=\"string\">'./detail'</span>;</div><div class=\"line\"><span class=\"keyword\">import</span> &#123; TaskEdit &#125; from <span class=\"string\">'./edit'</span>;</div><div class=\"line\"><span class=\"keyword\">import</span> &#123; TaskList &#125; from <span class=\"string\">'./list'</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 定义并输出路由类</span></div><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> taskRoutes: RouterConfig = [&#123;</div><div class=\"line\">  path: <span class=\"string\">'task'</span>, component: Task,</div><div class=\"line\">  children: [</div><div class=\"line\">    &#123; path: <span class=\"string\">'detail'</span>, component: TaskDetail &#125;,</div><div class=\"line\">    &#123; path: <span class=\"string\">'edit'</span>, component: TaskEdit &#125;,</div><div class=\"line\">    &#123; path: <span class=\"string\">'list'</span>, component: TaskList &#125;,</div><div class=\"line\">    &#123; path: <span class=\"string\">''</span>, component: TaskList &#125;</div><div class=\"line\">  ]</div><div class=\"line\">&#125;];</div></pre></td></tr></table></figure>\n<ul>\n<li>在启动路由中使用路由实例<br>上面我们定义的任务组件相关的路由，可以直接在启动路由中使用拓展方式添加进去，这样我们就可以直接在某个组件里详细定义该组件的路由，对外只需注入就可以了。</li>\n</ul>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 获取该路由类</span></div><div class=\"line\"><span class=\"keyword\">import</span> &#123; taskRoutes &#125; from <span class=\"string\">'./task/routes'</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> routes: RouterConfig = [</div><div class=\"line\">  ...taskRoutes, <span class=\"comment\">// 拓展路由</span></div><div class=\"line\">  &#123; path: <span class=\"string\">'login'</span>, component: Login &#125;</div><div class=\"line\">];</div></pre></td></tr></table></figure>\n<h3 id=\"路由器链接\"><a href=\"#路由器链接\" class=\"headerlink\" title=\"路由器链接\"></a>路由器链接</h3><p>该属性我们在上一节中也有用过，具体看<a href=\"https://godbasin.github.io/2016/10/07/angular2-notes-3-create-header/\">《Angular2使用笔记3–创建头部组件》</a>。</p>\n<ul>\n<li>RouterLink绑定<ul>\n<li>A标签中，有一个绑定RouterLink指令的属性绑定</li>\n<li>可以通过提供查询字符串参数为RouterLink提供更多情境信息</li>\n<li>可提供一个URL片段（Fragment或hash）来跳转到本页面中的其它区域</li>\n</ul>\n</li>\n<li>RouterLinkActive绑定<ul>\n<li>每个A标签还有一个到RouterLinkActive指令的属性绑定</li>\n<li>等号（=）右侧的模板表达式包含用空格分隔的一些CSS类，还可以把RouterLinkActive指令绑定到一个CSS类组成的数组</li>\n<li>用于在相关的RouterLink被激活时为所在元素添加或移除CSS类。 该指令可以直接添加到该元素上，也可以添加到其父元素上<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">&lt;!--当path路由被激活时，active的class将会被添加上--&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">routerLink</span>=<span class=\"string\">\"/path\"</span> <span class=\"attr\">routerLinkActive</span>=<span class=\"string\">\"active\"</span>&gt;</span>Temple<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></div></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"结束语\"><a href=\"#结束语\" class=\"headerlink\" title=\"结束语\"></a>结束语</h2><hr>\n<p>Angular2中路由根据组件树和状态能生产自己的状态树，路由器状态为我们提供了从任意激活路由开始向上或向下遍历路由树的一种方式。<br>总感觉这些特性能拿来干很有趣的事情呢。</p>"},{"title":"Angular2使用笔记7--Angular2中的基础概念","date":"2016-11-05T03:41:05.000Z","_content":"最近在学习Angular2作为前端的框架，《Angular2使用笔记》系列用于记录过程中的一些使用和解决方法。\n本文记录一些Angular2中的基本概念和基础知识。\n<!--more-->\n\n## Angular应用中的构造块\n-----\n首先我们来看一张图。\n![image](http://o905ne85q.bkt.clouddn.com/overview2.png)\n使用Angular2的小伙伴们肯定很熟悉，这是张架构图，展现了 Angular 应用中的8个主要构造块。\n\n### 模块\n前面我们也提到过模块化。\nAngualr应用是模块化的，并且Angular有自己的模块系统，它被称为Angular模块或NgModules。\n\n每个Angular应用至少有一个模块（根模块），习惯上命名为AppModule。\n根模块在一些小型应用中可能是唯一的模块，不过大多数应用可能会有很多特性模块，它们由一组领域类、工作流、或紧密相关的功能聚合而成。\n\n- @NgModule装饰器\n  - Angular模块（无论是根模块还是特性模块）都是一个带有@NgModule装饰器的类\n  - NgModule是一个装饰器函数，它接收一个用来描述模块属性的元数据对象\n    - declarations（声明） - 本模块中拥有的视图类。Angular有三种视图类：组件、指令和管道\n    - exports - 声明（declaration）的子集，它可用于其它模块中的组件模板\n    - imports - 本模块组件模板中需要由其它模块导出的类\n    - providers - 服务的创建者。本模块把它们加入全局的服务表中，让它们在应用中的任何部分都可被访问到\n    - bootstrap - 标识出应用的主视图（被称为根组件），它是所有其它视图的宿主。只有根模块才能设置bootstrap属性\n\n- JavaScript模块\n  - 在JavaScript中，每个文件就是一个模块，并且该文件中定义的所有对象都从属于那个模块\n  - 通过export关键字，模块可以把它的某些对象声明为公开的\n  - 别的JavaScript模块中可以使用import语句来访问这些公开对象\n\n- Angular模块 \n  - Angular模块（一个用@NgModel装饰的类）是Angular本身的基础特性\n  - 每个Angular库的名字都带有@angular前缀，可以用npm包管理工具安装\n  - 可以用JavaScript的import语句从Angular库中导入Angular的 某些模块\n\n### 组件\n我们在类中定义组件的应用逻辑 (它被用来为视图提供支持) 。 \n- 组件控制视图\n- 组件通过一些由属性和方法组成的API与视图交互\n- Angular会创建、更新和销毁组件\n开发人员可以通过生命周期钩子在组件生命周期的各个时间点上插入自己的操作。\n- [组件间的通讯](https://angular.cn/docs/ts/latest/cookbook/component-communication.html)\n  - 使用输入型绑定，把数据从父组件传到子组件\n  - 通过setter拦截输入属性值的变化\n  - 使用ngOnChanges拦截输入属性值的变化\n  - 父组件监听子组件的事件\n  - 父组件与子组件通过本地变量local variable互动\n  - 父组件调用ViewChild\n  - 父组件和子组件通过服务来通讯\n\n### 模板\n我们通过组件的自带的模板来定义视图。模板以HTML形式存在，用来告诉Angular如何渲染组件(视图)。\n- [Angular模板语法](https://angular.cn/docs/ts/latest/guide/template-syntax.html)\n  - 插值表达式、模板表达式\n  - 模板语句：用来响应由绑定目标(如HTML元素、组件或指令)触发的事件对象\n  - 绑定语法：单向（从数据源到视图目标、从视图目标到数据源）、双向\n  - 属性绑定：当要把一个视图元素的属性设置为模板表达式时设置\n  - HTML属性、class和style绑定\n  - 事件绑定：由等号左侧带圆括号的目标事件，和右侧一个引号中的模板语句组成\n  - 使用NgModel进行双向数据绑定\n  - 内建指令（NgClass/NgStyle/NgIf/NgSwitch/NgFor）\n  - *与<template>：内建指令的展开和简化\n  - 模板引用变量：模板中对DOM元素或指令的引用\n  - 输入输出属性\n  - 模板表达式操作符：管道操作符(|)、安全导航操作符(?.)\n\n### 元数据\n元数据告诉Angular如何处理一个类。把元数据附加到这个类，就相当于告诉Angular这个类是个组件。\n@Component装饰器能接受一个配置对象，Angular会基于这些信息创建和展示组件及其视图。\n\n@Component中的一些配置项：\n- selector - 一个css选择器，Angular在父级HTML中找到该标签，然后创建该组件，并插入此标签中\n- template/templateUrl - 组件模板/组件模板的地址\n- styles/styleUrls - 组件样式/组件样式的地址\n- directives - 一个数组，包含此模板需要依赖的组件或指令\n- providers - 一个数组，包含组件所依赖的服务所需要的依赖注入提供商\n- animations - 一个数组，包含组件的一些动画效果\n\n### 数据绑定\nAngular支持数据绑定，一种让模板的各部分与组件的各部分相互合作的机制。\n数据绑定的语法有四种形式。每种形式都有一个方向——从DOM来、到DOM去、双向。\n- 插值表达式\n- 属性绑定\n- 事件绑定\n- 双向数据绑定ngModel\n\nAngular在每个JavaScript事件周期中一次性处理所有的数据绑定，它会从组件树的根部开始，自顶向下处理各个叶节点。\n\n### 指令\n指令是一个带有“指令元数据”的类。\n在TypeScript中，要通过@Directive装饰器把元数据附加到类上。\n- 组件\n组件是一个带模板的指令 ，而且@Component装饰器实际上就是一个@Directive装饰器，只是扩展了一些面向模板的属性。\n- 结构型指令\n结构型指令通过在DOM中添加、移除和替换元素来修改布局。\n- 属性型指令\n属性型指令修改一个现有元素的外观或行为。\n\n### 服务\n上一节[《Angular2使用笔记6--使用服务类》](https://godbasin.github.io/2016/10/30/angular2-notes-6-use-service-class/)我们也讲了服务类的创建、注入和使用等等。\n\n服务分为很多种，包括：值、函数，以及应用所需的特性。\n\n几乎任何东西都可以是一个服务。 典型的服务是一个类，具有专注的、良好定义的用途。它应该做一件具体的事情，把它做好。\n\n组件的任务就是提供用户体验，仅此而已。它介于视图(由模板渲染)和应用逻辑(通常包括模型（model）的观念)之间。 设计良好的组件为数据绑定提供属性和方法，把那些其他对它们不重要的事情都委托给服务。\n\n### 依赖注入\n依赖注入我们前面也提到过两遍了呢。\n大家不嫌弃的话也可以查看[《Angular2使用笔记3--创建头部组件》](https://godbasin.github.io/2016/10/07/angular2-notes-3-create-header/)和[《Angular2使用笔记6--使用服务类》](https://godbasin.github.io/2016/10/30/angular2-notes-6-use-service-class/)。\n\n“依赖注入”是提供类的新实例的一种方式，还负责处理好类所需的全部依赖。大多数依赖都是服务。\nAngular也使用依赖注入提供我们需要的组件以及这些组件所需的服务。\n\n## 结束语\n-----\nNg2讲了这么久，才讲最基本的概念，不过这样的回溯也是一种学习的好方法呢。\n当我们在使用之后再回头看一些基础的时候，理解才会更加深刻的呀。","source":"_posts/angular2-notes-7-basic-concept-in-angular2.md","raw":"---\ntitle: Angular2使用笔记7--Angular2中的基础概念\ndate: 2016-11-05 11:41:05\ncategories: angular2火锅\ntags: 笔记\n---\n最近在学习Angular2作为前端的框架，《Angular2使用笔记》系列用于记录过程中的一些使用和解决方法。\n本文记录一些Angular2中的基本概念和基础知识。\n<!--more-->\n\n## Angular应用中的构造块\n-----\n首先我们来看一张图。\n![image](http://o905ne85q.bkt.clouddn.com/overview2.png)\n使用Angular2的小伙伴们肯定很熟悉，这是张架构图，展现了 Angular 应用中的8个主要构造块。\n\n### 模块\n前面我们也提到过模块化。\nAngualr应用是模块化的，并且Angular有自己的模块系统，它被称为Angular模块或NgModules。\n\n每个Angular应用至少有一个模块（根模块），习惯上命名为AppModule。\n根模块在一些小型应用中可能是唯一的模块，不过大多数应用可能会有很多特性模块，它们由一组领域类、工作流、或紧密相关的功能聚合而成。\n\n- @NgModule装饰器\n  - Angular模块（无论是根模块还是特性模块）都是一个带有@NgModule装饰器的类\n  - NgModule是一个装饰器函数，它接收一个用来描述模块属性的元数据对象\n    - declarations（声明） - 本模块中拥有的视图类。Angular有三种视图类：组件、指令和管道\n    - exports - 声明（declaration）的子集，它可用于其它模块中的组件模板\n    - imports - 本模块组件模板中需要由其它模块导出的类\n    - providers - 服务的创建者。本模块把它们加入全局的服务表中，让它们在应用中的任何部分都可被访问到\n    - bootstrap - 标识出应用的主视图（被称为根组件），它是所有其它视图的宿主。只有根模块才能设置bootstrap属性\n\n- JavaScript模块\n  - 在JavaScript中，每个文件就是一个模块，并且该文件中定义的所有对象都从属于那个模块\n  - 通过export关键字，模块可以把它的某些对象声明为公开的\n  - 别的JavaScript模块中可以使用import语句来访问这些公开对象\n\n- Angular模块 \n  - Angular模块（一个用@NgModel装饰的类）是Angular本身的基础特性\n  - 每个Angular库的名字都带有@angular前缀，可以用npm包管理工具安装\n  - 可以用JavaScript的import语句从Angular库中导入Angular的 某些模块\n\n### 组件\n我们在类中定义组件的应用逻辑 (它被用来为视图提供支持) 。 \n- 组件控制视图\n- 组件通过一些由属性和方法组成的API与视图交互\n- Angular会创建、更新和销毁组件\n开发人员可以通过生命周期钩子在组件生命周期的各个时间点上插入自己的操作。\n- [组件间的通讯](https://angular.cn/docs/ts/latest/cookbook/component-communication.html)\n  - 使用输入型绑定，把数据从父组件传到子组件\n  - 通过setter拦截输入属性值的变化\n  - 使用ngOnChanges拦截输入属性值的变化\n  - 父组件监听子组件的事件\n  - 父组件与子组件通过本地变量local variable互动\n  - 父组件调用ViewChild\n  - 父组件和子组件通过服务来通讯\n\n### 模板\n我们通过组件的自带的模板来定义视图。模板以HTML形式存在，用来告诉Angular如何渲染组件(视图)。\n- [Angular模板语法](https://angular.cn/docs/ts/latest/guide/template-syntax.html)\n  - 插值表达式、模板表达式\n  - 模板语句：用来响应由绑定目标(如HTML元素、组件或指令)触发的事件对象\n  - 绑定语法：单向（从数据源到视图目标、从视图目标到数据源）、双向\n  - 属性绑定：当要把一个视图元素的属性设置为模板表达式时设置\n  - HTML属性、class和style绑定\n  - 事件绑定：由等号左侧带圆括号的目标事件，和右侧一个引号中的模板语句组成\n  - 使用NgModel进行双向数据绑定\n  - 内建指令（NgClass/NgStyle/NgIf/NgSwitch/NgFor）\n  - *与<template>：内建指令的展开和简化\n  - 模板引用变量：模板中对DOM元素或指令的引用\n  - 输入输出属性\n  - 模板表达式操作符：管道操作符(|)、安全导航操作符(?.)\n\n### 元数据\n元数据告诉Angular如何处理一个类。把元数据附加到这个类，就相当于告诉Angular这个类是个组件。\n@Component装饰器能接受一个配置对象，Angular会基于这些信息创建和展示组件及其视图。\n\n@Component中的一些配置项：\n- selector - 一个css选择器，Angular在父级HTML中找到该标签，然后创建该组件，并插入此标签中\n- template/templateUrl - 组件模板/组件模板的地址\n- styles/styleUrls - 组件样式/组件样式的地址\n- directives - 一个数组，包含此模板需要依赖的组件或指令\n- providers - 一个数组，包含组件所依赖的服务所需要的依赖注入提供商\n- animations - 一个数组，包含组件的一些动画效果\n\n### 数据绑定\nAngular支持数据绑定，一种让模板的各部分与组件的各部分相互合作的机制。\n数据绑定的语法有四种形式。每种形式都有一个方向——从DOM来、到DOM去、双向。\n- 插值表达式\n- 属性绑定\n- 事件绑定\n- 双向数据绑定ngModel\n\nAngular在每个JavaScript事件周期中一次性处理所有的数据绑定，它会从组件树的根部开始，自顶向下处理各个叶节点。\n\n### 指令\n指令是一个带有“指令元数据”的类。\n在TypeScript中，要通过@Directive装饰器把元数据附加到类上。\n- 组件\n组件是一个带模板的指令 ，而且@Component装饰器实际上就是一个@Directive装饰器，只是扩展了一些面向模板的属性。\n- 结构型指令\n结构型指令通过在DOM中添加、移除和替换元素来修改布局。\n- 属性型指令\n属性型指令修改一个现有元素的外观或行为。\n\n### 服务\n上一节[《Angular2使用笔记6--使用服务类》](https://godbasin.github.io/2016/10/30/angular2-notes-6-use-service-class/)我们也讲了服务类的创建、注入和使用等等。\n\n服务分为很多种，包括：值、函数，以及应用所需的特性。\n\n几乎任何东西都可以是一个服务。 典型的服务是一个类，具有专注的、良好定义的用途。它应该做一件具体的事情，把它做好。\n\n组件的任务就是提供用户体验，仅此而已。它介于视图(由模板渲染)和应用逻辑(通常包括模型（model）的观念)之间。 设计良好的组件为数据绑定提供属性和方法，把那些其他对它们不重要的事情都委托给服务。\n\n### 依赖注入\n依赖注入我们前面也提到过两遍了呢。\n大家不嫌弃的话也可以查看[《Angular2使用笔记3--创建头部组件》](https://godbasin.github.io/2016/10/07/angular2-notes-3-create-header/)和[《Angular2使用笔记6--使用服务类》](https://godbasin.github.io/2016/10/30/angular2-notes-6-use-service-class/)。\n\n“依赖注入”是提供类的新实例的一种方式，还负责处理好类所需的全部依赖。大多数依赖都是服务。\nAngular也使用依赖注入提供我们需要的组件以及这些组件所需的服务。\n\n## 结束语\n-----\nNg2讲了这么久，才讲最基本的概念，不过这样的回溯也是一种学习的好方法呢。\n当我们在使用之后再回头看一些基础的时候，理解才会更加深刻的呀。","slug":"angular2-notes-7-basic-concept-in-angular2","published":1,"updated":"2016-11-05T03:42:02.125Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cix45hufn001txotuap3sdwq4","content":"<p>最近在学习Angular2作为前端的框架，《Angular2使用笔记》系列用于记录过程中的一些使用和解决方法。<br>本文记录一些Angular2中的基本概念和基础知识。<br><a id=\"more\"></a></p>\n<h2 id=\"Angular应用中的构造块\"><a href=\"#Angular应用中的构造块\" class=\"headerlink\" title=\"Angular应用中的构造块\"></a>Angular应用中的构造块</h2><hr>\n<p>首先我们来看一张图。<br><img src=\"http://o905ne85q.bkt.clouddn.com/overview2.png\" alt=\"image\"><br>使用Angular2的小伙伴们肯定很熟悉，这是张架构图，展现了 Angular 应用中的8个主要构造块。</p>\n<h3 id=\"模块\"><a href=\"#模块\" class=\"headerlink\" title=\"模块\"></a>模块</h3><p>前面我们也提到过模块化。<br>Angualr应用是模块化的，并且Angular有自己的模块系统，它被称为Angular模块或NgModules。</p>\n<p>每个Angular应用至少有一个模块（根模块），习惯上命名为AppModule。<br>根模块在一些小型应用中可能是唯一的模块，不过大多数应用可能会有很多特性模块，它们由一组领域类、工作流、或紧密相关的功能聚合而成。</p>\n<ul>\n<li><p>@NgModule装饰器</p>\n<ul>\n<li>Angular模块（无论是根模块还是特性模块）都是一个带有@NgModule装饰器的类</li>\n<li>NgModule是一个装饰器函数，它接收一个用来描述模块属性的元数据对象<ul>\n<li>declarations（声明） - 本模块中拥有的视图类。Angular有三种视图类：组件、指令和管道</li>\n<li>exports - 声明（declaration）的子集，它可用于其它模块中的组件模板</li>\n<li>imports - 本模块组件模板中需要由其它模块导出的类</li>\n<li>providers - 服务的创建者。本模块把它们加入全局的服务表中，让它们在应用中的任何部分都可被访问到</li>\n<li>bootstrap - 标识出应用的主视图（被称为根组件），它是所有其它视图的宿主。只有根模块才能设置bootstrap属性</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>JavaScript模块</p>\n<ul>\n<li>在JavaScript中，每个文件就是一个模块，并且该文件中定义的所有对象都从属于那个模块</li>\n<li>通过export关键字，模块可以把它的某些对象声明为公开的</li>\n<li>别的JavaScript模块中可以使用import语句来访问这些公开对象</li>\n</ul>\n</li>\n<li><p>Angular模块 </p>\n<ul>\n<li>Angular模块（一个用@NgModel装饰的类）是Angular本身的基础特性</li>\n<li>每个Angular库的名字都带有@angular前缀，可以用npm包管理工具安装</li>\n<li>可以用JavaScript的import语句从Angular库中导入Angular的 某些模块</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"组件\"><a href=\"#组件\" class=\"headerlink\" title=\"组件\"></a>组件</h3><p>我们在类中定义组件的应用逻辑 (它被用来为视图提供支持) 。 </p>\n<ul>\n<li>组件控制视图</li>\n<li>组件通过一些由属性和方法组成的API与视图交互</li>\n<li>Angular会创建、更新和销毁组件<br>开发人员可以通过生命周期钩子在组件生命周期的各个时间点上插入自己的操作。</li>\n<li><a href=\"https://angular.cn/docs/ts/latest/cookbook/component-communication.html\" target=\"_blank\" rel=\"external\">组件间的通讯</a><ul>\n<li>使用输入型绑定，把数据从父组件传到子组件</li>\n<li>通过setter拦截输入属性值的变化</li>\n<li>使用ngOnChanges拦截输入属性值的变化</li>\n<li>父组件监听子组件的事件</li>\n<li>父组件与子组件通过本地变量local variable互动</li>\n<li>父组件调用ViewChild</li>\n<li>父组件和子组件通过服务来通讯</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"模板\"><a href=\"#模板\" class=\"headerlink\" title=\"模板\"></a>模板</h3><p>我们通过组件的自带的模板来定义视图。模板以HTML形式存在，用来告诉Angular如何渲染组件(视图)。</p>\n<ul>\n<li><a href=\"https://angular.cn/docs/ts/latest/guide/template-syntax.html\" target=\"_blank\" rel=\"external\">Angular模板语法</a><ul>\n<li>插值表达式、模板表达式</li>\n<li>模板语句：用来响应由绑定目标(如HTML元素、组件或指令)触发的事件对象</li>\n<li>绑定语法：单向（从数据源到视图目标、从视图目标到数据源）、双向</li>\n<li>属性绑定：当要把一个视图元素的属性设置为模板表达式时设置</li>\n<li>HTML属性、class和style绑定</li>\n<li>事件绑定：由等号左侧带圆括号的目标事件，和右侧一个引号中的模板语句组成</li>\n<li>使用NgModel进行双向数据绑定</li>\n<li>内建指令（NgClass/NgStyle/NgIf/NgSwitch/NgFor）</li>\n<li>*与<template>：内建指令的展开和简化</template></li>\n<li>模板引用变量：模板中对DOM元素或指令的引用</li>\n<li>输入输出属性</li>\n<li>模板表达式操作符：管道操作符(|)、安全导航操作符(?.)</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"元数据\"><a href=\"#元数据\" class=\"headerlink\" title=\"元数据\"></a>元数据</h3><p>元数据告诉Angular如何处理一个类。把元数据附加到这个类，就相当于告诉Angular这个类是个组件。<br>@Component装饰器能接受一个配置对象，Angular会基于这些信息创建和展示组件及其视图。</p>\n<p>@Component中的一些配置项：</p>\n<ul>\n<li>selector - 一个css选择器，Angular在父级HTML中找到该标签，然后创建该组件，并插入此标签中</li>\n<li>template/templateUrl - 组件模板/组件模板的地址</li>\n<li>styles/styleUrls - 组件样式/组件样式的地址</li>\n<li>directives - 一个数组，包含此模板需要依赖的组件或指令</li>\n<li>providers - 一个数组，包含组件所依赖的服务所需要的依赖注入提供商</li>\n<li>animations - 一个数组，包含组件的一些动画效果</li>\n</ul>\n<h3 id=\"数据绑定\"><a href=\"#数据绑定\" class=\"headerlink\" title=\"数据绑定\"></a>数据绑定</h3><p>Angular支持数据绑定，一种让模板的各部分与组件的各部分相互合作的机制。<br>数据绑定的语法有四种形式。每种形式都有一个方向——从DOM来、到DOM去、双向。</p>\n<ul>\n<li>插值表达式</li>\n<li>属性绑定</li>\n<li>事件绑定</li>\n<li>双向数据绑定ngModel</li>\n</ul>\n<p>Angular在每个JavaScript事件周期中一次性处理所有的数据绑定，它会从组件树的根部开始，自顶向下处理各个叶节点。</p>\n<h3 id=\"指令\"><a href=\"#指令\" class=\"headerlink\" title=\"指令\"></a>指令</h3><p>指令是一个带有“指令元数据”的类。<br>在TypeScript中，要通过@Directive装饰器把元数据附加到类上。</p>\n<ul>\n<li>组件<br>组件是一个带模板的指令 ，而且@Component装饰器实际上就是一个@Directive装饰器，只是扩展了一些面向模板的属性。</li>\n<li>结构型指令<br>结构型指令通过在DOM中添加、移除和替换元素来修改布局。</li>\n<li>属性型指令<br>属性型指令修改一个现有元素的外观或行为。</li>\n</ul>\n<h3 id=\"服务\"><a href=\"#服务\" class=\"headerlink\" title=\"服务\"></a>服务</h3><p>上一节<a href=\"https://godbasin.github.io/2016/10/30/angular2-notes-6-use-service-class/\">《Angular2使用笔记6–使用服务类》</a>我们也讲了服务类的创建、注入和使用等等。</p>\n<p>服务分为很多种，包括：值、函数，以及应用所需的特性。</p>\n<p>几乎任何东西都可以是一个服务。 典型的服务是一个类，具有专注的、良好定义的用途。它应该做一件具体的事情，把它做好。</p>\n<p>组件的任务就是提供用户体验，仅此而已。它介于视图(由模板渲染)和应用逻辑(通常包括模型（model）的观念)之间。 设计良好的组件为数据绑定提供属性和方法，把那些其他对它们不重要的事情都委托给服务。</p>\n<h3 id=\"依赖注入\"><a href=\"#依赖注入\" class=\"headerlink\" title=\"依赖注入\"></a>依赖注入</h3><p>依赖注入我们前面也提到过两遍了呢。<br>大家不嫌弃的话也可以查看<a href=\"https://godbasin.github.io/2016/10/07/angular2-notes-3-create-header/\">《Angular2使用笔记3–创建头部组件》</a>和<a href=\"https://godbasin.github.io/2016/10/30/angular2-notes-6-use-service-class/\">《Angular2使用笔记6–使用服务类》</a>。</p>\n<p>“依赖注入”是提供类的新实例的一种方式，还负责处理好类所需的全部依赖。大多数依赖都是服务。<br>Angular也使用依赖注入提供我们需要的组件以及这些组件所需的服务。</p>\n<h2 id=\"结束语\"><a href=\"#结束语\" class=\"headerlink\" title=\"结束语\"></a>结束语</h2><hr>\n<p>Ng2讲了这么久，才讲最基本的概念，不过这样的回溯也是一种学习的好方法呢。<br>当我们在使用之后再回头看一些基础的时候，理解才会更加深刻的呀。</p>\n","excerpt":"<p>最近在学习Angular2作为前端的框架，《Angular2使用笔记》系列用于记录过程中的一些使用和解决方法。<br>本文记录一些Angular2中的基本概念和基础知识。<br>","more":"</p>\n<h2 id=\"Angular应用中的构造块\"><a href=\"#Angular应用中的构造块\" class=\"headerlink\" title=\"Angular应用中的构造块\"></a>Angular应用中的构造块</h2><hr>\n<p>首先我们来看一张图。<br><img src=\"http://o905ne85q.bkt.clouddn.com/overview2.png\" alt=\"image\"><br>使用Angular2的小伙伴们肯定很熟悉，这是张架构图，展现了 Angular 应用中的8个主要构造块。</p>\n<h3 id=\"模块\"><a href=\"#模块\" class=\"headerlink\" title=\"模块\"></a>模块</h3><p>前面我们也提到过模块化。<br>Angualr应用是模块化的，并且Angular有自己的模块系统，它被称为Angular模块或NgModules。</p>\n<p>每个Angular应用至少有一个模块（根模块），习惯上命名为AppModule。<br>根模块在一些小型应用中可能是唯一的模块，不过大多数应用可能会有很多特性模块，它们由一组领域类、工作流、或紧密相关的功能聚合而成。</p>\n<ul>\n<li><p>@NgModule装饰器</p>\n<ul>\n<li>Angular模块（无论是根模块还是特性模块）都是一个带有@NgModule装饰器的类</li>\n<li>NgModule是一个装饰器函数，它接收一个用来描述模块属性的元数据对象<ul>\n<li>declarations（声明） - 本模块中拥有的视图类。Angular有三种视图类：组件、指令和管道</li>\n<li>exports - 声明（declaration）的子集，它可用于其它模块中的组件模板</li>\n<li>imports - 本模块组件模板中需要由其它模块导出的类</li>\n<li>providers - 服务的创建者。本模块把它们加入全局的服务表中，让它们在应用中的任何部分都可被访问到</li>\n<li>bootstrap - 标识出应用的主视图（被称为根组件），它是所有其它视图的宿主。只有根模块才能设置bootstrap属性</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>JavaScript模块</p>\n<ul>\n<li>在JavaScript中，每个文件就是一个模块，并且该文件中定义的所有对象都从属于那个模块</li>\n<li>通过export关键字，模块可以把它的某些对象声明为公开的</li>\n<li>别的JavaScript模块中可以使用import语句来访问这些公开对象</li>\n</ul>\n</li>\n<li><p>Angular模块 </p>\n<ul>\n<li>Angular模块（一个用@NgModel装饰的类）是Angular本身的基础特性</li>\n<li>每个Angular库的名字都带有@angular前缀，可以用npm包管理工具安装</li>\n<li>可以用JavaScript的import语句从Angular库中导入Angular的 某些模块</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"组件\"><a href=\"#组件\" class=\"headerlink\" title=\"组件\"></a>组件</h3><p>我们在类中定义组件的应用逻辑 (它被用来为视图提供支持) 。 </p>\n<ul>\n<li>组件控制视图</li>\n<li>组件通过一些由属性和方法组成的API与视图交互</li>\n<li>Angular会创建、更新和销毁组件<br>开发人员可以通过生命周期钩子在组件生命周期的各个时间点上插入自己的操作。</li>\n<li><a href=\"https://angular.cn/docs/ts/latest/cookbook/component-communication.html\">组件间的通讯</a><ul>\n<li>使用输入型绑定，把数据从父组件传到子组件</li>\n<li>通过setter拦截输入属性值的变化</li>\n<li>使用ngOnChanges拦截输入属性值的变化</li>\n<li>父组件监听子组件的事件</li>\n<li>父组件与子组件通过本地变量local variable互动</li>\n<li>父组件调用ViewChild</li>\n<li>父组件和子组件通过服务来通讯</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"模板\"><a href=\"#模板\" class=\"headerlink\" title=\"模板\"></a>模板</h3><p>我们通过组件的自带的模板来定义视图。模板以HTML形式存在，用来告诉Angular如何渲染组件(视图)。</p>\n<ul>\n<li><a href=\"https://angular.cn/docs/ts/latest/guide/template-syntax.html\">Angular模板语法</a><ul>\n<li>插值表达式、模板表达式</li>\n<li>模板语句：用来响应由绑定目标(如HTML元素、组件或指令)触发的事件对象</li>\n<li>绑定语法：单向（从数据源到视图目标、从视图目标到数据源）、双向</li>\n<li>属性绑定：当要把一个视图元素的属性设置为模板表达式时设置</li>\n<li>HTML属性、class和style绑定</li>\n<li>事件绑定：由等号左侧带圆括号的目标事件，和右侧一个引号中的模板语句组成</li>\n<li>使用NgModel进行双向数据绑定</li>\n<li>内建指令（NgClass/NgStyle/NgIf/NgSwitch/NgFor）</li>\n<li>*与<template>：内建指令的展开和简化</li>\n<li>模板引用变量：模板中对DOM元素或指令的引用</li>\n<li>输入输出属性</li>\n<li>模板表达式操作符：管道操作符(|)、安全导航操作符(?.)</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"元数据\"><a href=\"#元数据\" class=\"headerlink\" title=\"元数据\"></a>元数据</h3><p>元数据告诉Angular如何处理一个类。把元数据附加到这个类，就相当于告诉Angular这个类是个组件。<br>@Component装饰器能接受一个配置对象，Angular会基于这些信息创建和展示组件及其视图。</p>\n<p>@Component中的一些配置项：</p>\n<ul>\n<li>selector - 一个css选择器，Angular在父级HTML中找到该标签，然后创建该组件，并插入此标签中</li>\n<li>template/templateUrl - 组件模板/组件模板的地址</li>\n<li>styles/styleUrls - 组件样式/组件样式的地址</li>\n<li>directives - 一个数组，包含此模板需要依赖的组件或指令</li>\n<li>providers - 一个数组，包含组件所依赖的服务所需要的依赖注入提供商</li>\n<li>animations - 一个数组，包含组件的一些动画效果</li>\n</ul>\n<h3 id=\"数据绑定\"><a href=\"#数据绑定\" class=\"headerlink\" title=\"数据绑定\"></a>数据绑定</h3><p>Angular支持数据绑定，一种让模板的各部分与组件的各部分相互合作的机制。<br>数据绑定的语法有四种形式。每种形式都有一个方向——从DOM来、到DOM去、双向。</p>\n<ul>\n<li>插值表达式</li>\n<li>属性绑定</li>\n<li>事件绑定</li>\n<li>双向数据绑定ngModel</li>\n</ul>\n<p>Angular在每个JavaScript事件周期中一次性处理所有的数据绑定，它会从组件树的根部开始，自顶向下处理各个叶节点。</p>\n<h3 id=\"指令\"><a href=\"#指令\" class=\"headerlink\" title=\"指令\"></a>指令</h3><p>指令是一个带有“指令元数据”的类。<br>在TypeScript中，要通过@Directive装饰器把元数据附加到类上。</p>\n<ul>\n<li>组件<br>组件是一个带模板的指令 ，而且@Component装饰器实际上就是一个@Directive装饰器，只是扩展了一些面向模板的属性。</li>\n<li>结构型指令<br>结构型指令通过在DOM中添加、移除和替换元素来修改布局。</li>\n<li>属性型指令<br>属性型指令修改一个现有元素的外观或行为。</li>\n</ul>\n<h3 id=\"服务\"><a href=\"#服务\" class=\"headerlink\" title=\"服务\"></a>服务</h3><p>上一节<a href=\"https://godbasin.github.io/2016/10/30/angular2-notes-6-use-service-class/\">《Angular2使用笔记6–使用服务类》</a>我们也讲了服务类的创建、注入和使用等等。</p>\n<p>服务分为很多种，包括：值、函数，以及应用所需的特性。</p>\n<p>几乎任何东西都可以是一个服务。 典型的服务是一个类，具有专注的、良好定义的用途。它应该做一件具体的事情，把它做好。</p>\n<p>组件的任务就是提供用户体验，仅此而已。它介于视图(由模板渲染)和应用逻辑(通常包括模型（model）的观念)之间。 设计良好的组件为数据绑定提供属性和方法，把那些其他对它们不重要的事情都委托给服务。</p>\n<h3 id=\"依赖注入\"><a href=\"#依赖注入\" class=\"headerlink\" title=\"依赖注入\"></a>依赖注入</h3><p>依赖注入我们前面也提到过两遍了呢。<br>大家不嫌弃的话也可以查看<a href=\"https://godbasin.github.io/2016/10/07/angular2-notes-3-create-header/\">《Angular2使用笔记3–创建头部组件》</a>和<a href=\"https://godbasin.github.io/2016/10/30/angular2-notes-6-use-service-class/\">《Angular2使用笔记6–使用服务类》</a>。</p>\n<p>“依赖注入”是提供类的新实例的一种方式，还负责处理好类所需的全部依赖。大多数依赖都是服务。<br>Angular也使用依赖注入提供我们需要的组件以及这些组件所需的服务。</p>\n<h2 id=\"结束语\"><a href=\"#结束语\" class=\"headerlink\" title=\"结束语\"></a>结束语</h2><hr>\n<p>Ng2讲了这么久，才讲最基本的概念，不过这样的回溯也是一种学习的好方法呢。<br>当我们在使用之后再回头看一些基础的时候，理解才会更加深刻的呀。</p>"},{"title":"Angular2使用笔记6--使用服务类","date":"2016-10-29T17:40:42.000Z","_content":"最近在学习Angular2作为前端的框架，《Angular2使用笔记》系列用于记录过程中的一些使用和解决方法。\n本文记录将一些数据封装到服务类进行获取的过程。\n<!--more-->\n## 模块化和依赖注入\n-----\n模块是组织应用程序和使用外部程序库的最佳途径。\n### Angular模块化\n- Angular模块把组件、指令和管道打包成内聚的功能块儿，每一个都聚焦于一个特性分区、业务领域、工作流，或一组通用的工具\n  - 模块还能用来把服务加到应用程序中\n  - 模块可能在应用启动时立即加载，也可能由路由器进行异步延迟加载\n- Angular模块是一个由@NgModule装饰器提供元数据的类，元数据包括\n  - 声明哪些组件、指令、管道属于该模块\n  - 公开某些类，以便其它的组件模板可以使用它们\n  - 隐藏那些属于实现细节的非公开类\n  - 导入其它模块，以获得所需的组件、指令和管道\n  - 在应用程序级提供服务，以便应用中的任何组件都能使用它\n- 每个Angular应用至少有一个模块类—— 根模块 ，我们将通过引导根模块来启动应用\n\n### 依赖注入\n前面我们也有稍微介绍过angular2的依赖注入，可查看[《Angular2使用笔记3--创建头部组件》](https://godbasin.github.io/2016/10/07/angular2-notes-3-create-header/)。本骚年稍微偷个懒，直接拿过来吧。\n- 全局依赖\n  - 在应用程序根组件AppComponent中注册那些被应用程序全局使用的依赖提供商\n  - 这些全局注册的依赖，能在应用程序的任何地方注入到任何组件和服务的构造函数里\n- 外部模块\n  - @Injectable和嵌套服务依赖\n    - @Injectable()标志着一个类可以被一个注入器实例化\n    - @Injectable()装饰器只在一个服务类有自己的依赖的时候，才是不可缺少\n  - 把服务作用域限制到一个组件支树\n    - 被注入的服务依赖都是单例的，在任意一个依赖注入器(\"injector\")中，每个服务只有唯一的实例\n    - Angular应用程序有多个依赖注入器，组织成一个与组件树平行的树状结构\n    - 在多个组件中注入，服务就会被新建出多个实例，分别提供给不同的组件\n    - 通过在组件树的子级根组件中提供服务，可以把一个被注入服务的作用域局限在应用程序结构中的某个分支中\n- 常用依赖注入\n  - 指令（组件）：通过Component中directives注入\n  - 服务：通过Component中providers注入\n\n### 服务提供商\n- 模块与服务\n  - 模块是为模块中的所有组件提供服务的最佳途径\n  - 模块可以往应用的“根依赖注入器”中添加提供商，让那些服务在应用中到处可用\n- 服务提供商\n  - 提供商提供所需依赖值的一个具体的运行期版本\n  - 注入器依靠提供商们来创建服务的实例，它会被注入器注入到组件或其它服务中\n  - 我们必须为注入器注册一个服务的提供商，否则它就不知道该如何创建此服务\n- 提供商的使用\n  - 把提供商添加到根模块上，则任何地方使用的都是服务的同一个实例\n  - 把它注册在组件级表示该组件的每一个新实例都会有一个(在该组件注册的)服务的新实例\n\n## 创建并使用服务\n---\n### 创建服务\n这里我们用头部Header组件为例子，其中我们将菜单的数据获取单独封装成一个服务HeaderService在header.service.ts文件中。如下：\n``` ts\n// 获取@Injectable装饰器\nimport {Injectable} from '@angular/core';\n\n// @Injectable()标志着一个类可以被一个注入器实例化\nInjectable()\n// 输出HeaderService服务类\nexport class HeaderService {\n  // menus用于储存主菜单\n  private menus: Array<any> = [{\n    title: 'index', // title用于储存路由对应的路径\n    href: '/index', // href用于设定该菜单跳转路由\n    text: '首页', // text用于储存该菜单显示名称\n  }, {\n    title: 'others',\n    href: '/other',\n    text: '其他',\n  }];\n\n  // usermenus用于储存侧边下拉菜单\n  private usermenus: Array<any> = [{\n    href: '/login', // href用于设定该菜单跳转路由\n    text: '退出', // text用于储存该菜单显示名称\n  }];\n\n  // 提供获取menus的接口\n  getMenus(){\n    return this.menus;\n  }\n\n  // 提供获取usermenus的接口\n  getUsermenus(){\n    return this.usermenus;\n  }\n}\n```\n\n### 注入并使用服务\n我们在header.component.ts文件中，进行HeaderService服务的注入和使用。\n- 获取服务类\n\n``` typescript\n// 获取HeaderService服务类\nimport { HeaderService } from './header.service';\n```\n\n- 在元数据中实例化服务类\n\n``` typescript\n@Component({\n  ... // 其他元数据\n  providers:[HeaderService] // 实例化服务\n})\n```\n\n- 在组件中注入服务\n\n``` typescript\n constructor(private headerService: HeaderService) {}\n```\n\n- 组件初始化时初始化相应的数据\n\n``` typescript\n  // 生命周期钩子：初始化\n  ngOnInit() {\n    // 设定menus的初始值\n    this.menus = this.headerService.getMenus();\n    // 设定usermenus的初始值\n    this.usermenus = this.headerService.getUsermenus();\n    ... //其他初始化事件\n  }\n```\n\n经过上述的步骤，我们实现了服务的创建、实例化、注入和使用。\n需要注意的是，Angular应用是一个组件树。每个组件实例都有自己的注入器！组件的树与注入器的树平行。\n所以当我们需要共享或者隔断服务的时候就要想起来这个与组件树平行的注入器树。\n\n## 结束语\n-----\nangular2中，不管是组件类，还是是服务类，这样的创建、输出、获取等等模块化的操作还是很棒的。\n[此处查看项目代码（仅包含src部分）](https://github.com/godbasin/godbasin.github.io/tree/blog-codes/angular2-notes/6-use-service-class)\n[此处查看页面效果](http://oc8qsv1w6.bkt.clouddn.com/6-use-service-class/index.html#/index)","source":"_posts/angular2-notes-6-use-service-class.md","raw":"---\ntitle: Angular2使用笔记6--使用服务类\ndate: 2016-10-30 01:40:42\ncategories: angular2火锅\ntags: 笔记\n---\n最近在学习Angular2作为前端的框架，《Angular2使用笔记》系列用于记录过程中的一些使用和解决方法。\n本文记录将一些数据封装到服务类进行获取的过程。\n<!--more-->\n## 模块化和依赖注入\n-----\n模块是组织应用程序和使用外部程序库的最佳途径。\n### Angular模块化\n- Angular模块把组件、指令和管道打包成内聚的功能块儿，每一个都聚焦于一个特性分区、业务领域、工作流，或一组通用的工具\n  - 模块还能用来把服务加到应用程序中\n  - 模块可能在应用启动时立即加载，也可能由路由器进行异步延迟加载\n- Angular模块是一个由@NgModule装饰器提供元数据的类，元数据包括\n  - 声明哪些组件、指令、管道属于该模块\n  - 公开某些类，以便其它的组件模板可以使用它们\n  - 隐藏那些属于实现细节的非公开类\n  - 导入其它模块，以获得所需的组件、指令和管道\n  - 在应用程序级提供服务，以便应用中的任何组件都能使用它\n- 每个Angular应用至少有一个模块类—— 根模块 ，我们将通过引导根模块来启动应用\n\n### 依赖注入\n前面我们也有稍微介绍过angular2的依赖注入，可查看[《Angular2使用笔记3--创建头部组件》](https://godbasin.github.io/2016/10/07/angular2-notes-3-create-header/)。本骚年稍微偷个懒，直接拿过来吧。\n- 全局依赖\n  - 在应用程序根组件AppComponent中注册那些被应用程序全局使用的依赖提供商\n  - 这些全局注册的依赖，能在应用程序的任何地方注入到任何组件和服务的构造函数里\n- 外部模块\n  - @Injectable和嵌套服务依赖\n    - @Injectable()标志着一个类可以被一个注入器实例化\n    - @Injectable()装饰器只在一个服务类有自己的依赖的时候，才是不可缺少\n  - 把服务作用域限制到一个组件支树\n    - 被注入的服务依赖都是单例的，在任意一个依赖注入器(\"injector\")中，每个服务只有唯一的实例\n    - Angular应用程序有多个依赖注入器，组织成一个与组件树平行的树状结构\n    - 在多个组件中注入，服务就会被新建出多个实例，分别提供给不同的组件\n    - 通过在组件树的子级根组件中提供服务，可以把一个被注入服务的作用域局限在应用程序结构中的某个分支中\n- 常用依赖注入\n  - 指令（组件）：通过Component中directives注入\n  - 服务：通过Component中providers注入\n\n### 服务提供商\n- 模块与服务\n  - 模块是为模块中的所有组件提供服务的最佳途径\n  - 模块可以往应用的“根依赖注入器”中添加提供商，让那些服务在应用中到处可用\n- 服务提供商\n  - 提供商提供所需依赖值的一个具体的运行期版本\n  - 注入器依靠提供商们来创建服务的实例，它会被注入器注入到组件或其它服务中\n  - 我们必须为注入器注册一个服务的提供商，否则它就不知道该如何创建此服务\n- 提供商的使用\n  - 把提供商添加到根模块上，则任何地方使用的都是服务的同一个实例\n  - 把它注册在组件级表示该组件的每一个新实例都会有一个(在该组件注册的)服务的新实例\n\n## 创建并使用服务\n---\n### 创建服务\n这里我们用头部Header组件为例子，其中我们将菜单的数据获取单独封装成一个服务HeaderService在header.service.ts文件中。如下：\n``` ts\n// 获取@Injectable装饰器\nimport {Injectable} from '@angular/core';\n\n// @Injectable()标志着一个类可以被一个注入器实例化\nInjectable()\n// 输出HeaderService服务类\nexport class HeaderService {\n  // menus用于储存主菜单\n  private menus: Array<any> = [{\n    title: 'index', // title用于储存路由对应的路径\n    href: '/index', // href用于设定该菜单跳转路由\n    text: '首页', // text用于储存该菜单显示名称\n  }, {\n    title: 'others',\n    href: '/other',\n    text: '其他',\n  }];\n\n  // usermenus用于储存侧边下拉菜单\n  private usermenus: Array<any> = [{\n    href: '/login', // href用于设定该菜单跳转路由\n    text: '退出', // text用于储存该菜单显示名称\n  }];\n\n  // 提供获取menus的接口\n  getMenus(){\n    return this.menus;\n  }\n\n  // 提供获取usermenus的接口\n  getUsermenus(){\n    return this.usermenus;\n  }\n}\n```\n\n### 注入并使用服务\n我们在header.component.ts文件中，进行HeaderService服务的注入和使用。\n- 获取服务类\n\n``` typescript\n// 获取HeaderService服务类\nimport { HeaderService } from './header.service';\n```\n\n- 在元数据中实例化服务类\n\n``` typescript\n@Component({\n  ... // 其他元数据\n  providers:[HeaderService] // 实例化服务\n})\n```\n\n- 在组件中注入服务\n\n``` typescript\n constructor(private headerService: HeaderService) {}\n```\n\n- 组件初始化时初始化相应的数据\n\n``` typescript\n  // 生命周期钩子：初始化\n  ngOnInit() {\n    // 设定menus的初始值\n    this.menus = this.headerService.getMenus();\n    // 设定usermenus的初始值\n    this.usermenus = this.headerService.getUsermenus();\n    ... //其他初始化事件\n  }\n```\n\n经过上述的步骤，我们实现了服务的创建、实例化、注入和使用。\n需要注意的是，Angular应用是一个组件树。每个组件实例都有自己的注入器！组件的树与注入器的树平行。\n所以当我们需要共享或者隔断服务的时候就要想起来这个与组件树平行的注入器树。\n\n## 结束语\n-----\nangular2中，不管是组件类，还是是服务类，这样的创建、输出、获取等等模块化的操作还是很棒的。\n[此处查看项目代码（仅包含src部分）](https://github.com/godbasin/godbasin.github.io/tree/blog-codes/angular2-notes/6-use-service-class)\n[此处查看页面效果](http://oc8qsv1w6.bkt.clouddn.com/6-use-service-class/index.html#/index)","slug":"angular2-notes-6-use-service-class","published":1,"updated":"2016-10-29T17:41:11.391Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cix45hufr001xxotue7liatxh","content":"<p>最近在学习Angular2作为前端的框架，《Angular2使用笔记》系列用于记录过程中的一些使用和解决方法。<br>本文记录将一些数据封装到服务类进行获取的过程。<br><a id=\"more\"></a></p>\n<h2 id=\"模块化和依赖注入\"><a href=\"#模块化和依赖注入\" class=\"headerlink\" title=\"模块化和依赖注入\"></a>模块化和依赖注入</h2><hr>\n<p>模块是组织应用程序和使用外部程序库的最佳途径。</p>\n<h3 id=\"Angular模块化\"><a href=\"#Angular模块化\" class=\"headerlink\" title=\"Angular模块化\"></a>Angular模块化</h3><ul>\n<li>Angular模块把组件、指令和管道打包成内聚的功能块儿，每一个都聚焦于一个特性分区、业务领域、工作流，或一组通用的工具<ul>\n<li>模块还能用来把服务加到应用程序中</li>\n<li>模块可能在应用启动时立即加载，也可能由路由器进行异步延迟加载</li>\n</ul>\n</li>\n<li>Angular模块是一个由@NgModule装饰器提供元数据的类，元数据包括<ul>\n<li>声明哪些组件、指令、管道属于该模块</li>\n<li>公开某些类，以便其它的组件模板可以使用它们</li>\n<li>隐藏那些属于实现细节的非公开类</li>\n<li>导入其它模块，以获得所需的组件、指令和管道</li>\n<li>在应用程序级提供服务，以便应用中的任何组件都能使用它</li>\n</ul>\n</li>\n<li>每个Angular应用至少有一个模块类—— 根模块 ，我们将通过引导根模块来启动应用</li>\n</ul>\n<h3 id=\"依赖注入\"><a href=\"#依赖注入\" class=\"headerlink\" title=\"依赖注入\"></a>依赖注入</h3><p>前面我们也有稍微介绍过angular2的依赖注入，可查看<a href=\"https://godbasin.github.io/2016/10/07/angular2-notes-3-create-header/\">《Angular2使用笔记3–创建头部组件》</a>。本骚年稍微偷个懒，直接拿过来吧。</p>\n<ul>\n<li>全局依赖<ul>\n<li>在应用程序根组件AppComponent中注册那些被应用程序全局使用的依赖提供商</li>\n<li>这些全局注册的依赖，能在应用程序的任何地方注入到任何组件和服务的构造函数里</li>\n</ul>\n</li>\n<li>外部模块<ul>\n<li>@Injectable和嵌套服务依赖<ul>\n<li>@Injectable()标志着一个类可以被一个注入器实例化</li>\n<li>@Injectable()装饰器只在一个服务类有自己的依赖的时候，才是不可缺少</li>\n</ul>\n</li>\n<li>把服务作用域限制到一个组件支树<ul>\n<li>被注入的服务依赖都是单例的，在任意一个依赖注入器(“injector”)中，每个服务只有唯一的实例</li>\n<li>Angular应用程序有多个依赖注入器，组织成一个与组件树平行的树状结构</li>\n<li>在多个组件中注入，服务就会被新建出多个实例，分别提供给不同的组件</li>\n<li>通过在组件树的子级根组件中提供服务，可以把一个被注入服务的作用域局限在应用程序结构中的某个分支中</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>常用依赖注入<ul>\n<li>指令（组件）：通过Component中directives注入</li>\n<li>服务：通过Component中providers注入</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"服务提供商\"><a href=\"#服务提供商\" class=\"headerlink\" title=\"服务提供商\"></a>服务提供商</h3><ul>\n<li>模块与服务<ul>\n<li>模块是为模块中的所有组件提供服务的最佳途径</li>\n<li>模块可以往应用的“根依赖注入器”中添加提供商，让那些服务在应用中到处可用</li>\n</ul>\n</li>\n<li>服务提供商<ul>\n<li>提供商提供所需依赖值的一个具体的运行期版本</li>\n<li>注入器依靠提供商们来创建服务的实例，它会被注入器注入到组件或其它服务中</li>\n<li>我们必须为注入器注册一个服务的提供商，否则它就不知道该如何创建此服务</li>\n</ul>\n</li>\n<li>提供商的使用<ul>\n<li>把提供商添加到根模块上，则任何地方使用的都是服务的同一个实例</li>\n<li>把它注册在组件级表示该组件的每一个新实例都会有一个(在该组件注册的)服务的新实例</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"创建并使用服务\"><a href=\"#创建并使用服务\" class=\"headerlink\" title=\"创建并使用服务\"></a>创建并使用服务</h2><hr>\n<h3 id=\"创建服务\"><a href=\"#创建服务\" class=\"headerlink\" title=\"创建服务\"></a>创建服务</h3><p>这里我们用头部Header组件为例子，其中我们将菜单的数据获取单独封装成一个服务HeaderService在header.service.ts文件中。如下：<br><figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 获取@Injectable装饰器</span></div><div class=\"line\"><span class=\"keyword\">import</span> &#123;Injectable&#125; from <span class=\"string\">'@angular/core'</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// @Injectable()标志着一个类可以被一个注入器实例化</span></div><div class=\"line\">Injectable()</div><div class=\"line\"><span class=\"comment\">// 输出HeaderService服务类</span></div><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> HeaderService &#123;</div><div class=\"line\">  <span class=\"comment\">// menus用于储存主菜单</span></div><div class=\"line\">  <span class=\"keyword\">private</span> menus: <span class=\"built_in\">Array</span>&lt;<span class=\"built_in\">any</span>&gt; = [&#123;</div><div class=\"line\">    title: <span class=\"string\">'index'</span>, <span class=\"comment\">// title用于储存路由对应的路径</span></div><div class=\"line\">    href: <span class=\"string\">'/index'</span>, <span class=\"comment\">// href用于设定该菜单跳转路由</span></div><div class=\"line\">    text: <span class=\"string\">'首页'</span>, <span class=\"comment\">// text用于储存该菜单显示名称</span></div><div class=\"line\">  &#125;, &#123;</div><div class=\"line\">    title: <span class=\"string\">'others'</span>,</div><div class=\"line\">    href: <span class=\"string\">'/other'</span>,</div><div class=\"line\">    text: <span class=\"string\">'其他'</span>,</div><div class=\"line\">  &#125;];</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">// usermenus用于储存侧边下拉菜单</span></div><div class=\"line\">  <span class=\"keyword\">private</span> usermenus: <span class=\"built_in\">Array</span>&lt;<span class=\"built_in\">any</span>&gt; = [&#123;</div><div class=\"line\">    href: <span class=\"string\">'/login'</span>, <span class=\"comment\">// href用于设定该菜单跳转路由</span></div><div class=\"line\">    text: <span class=\"string\">'退出'</span>, <span class=\"comment\">// text用于储存该菜单显示名称</span></div><div class=\"line\">  &#125;];</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">// 提供获取menus的接口</span></div><div class=\"line\">  getMenus()&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.menus;</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">// 提供获取usermenus的接口</span></div><div class=\"line\">  getUsermenus()&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.usermenus;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h3 id=\"注入并使用服务\"><a href=\"#注入并使用服务\" class=\"headerlink\" title=\"注入并使用服务\"></a>注入并使用服务</h3><p>我们在header.component.ts文件中，进行HeaderService服务的注入和使用。</p>\n<ul>\n<li>获取服务类</li>\n</ul>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 获取HeaderService服务类</span></div><div class=\"line\"><span class=\"keyword\">import</span> &#123; HeaderService &#125; from <span class=\"string\">'./header.service'</span>;</div></pre></td></tr></table></figure>\n<ul>\n<li>在元数据中实例化服务类</li>\n</ul>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">@Component(&#123;</div><div class=\"line\">  ... <span class=\"comment\">// 其他元数据</span></div><div class=\"line\">  providers:[HeaderService] <span class=\"comment\">// 实例化服务</span></div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<ul>\n<li>在组件中注入服务</li>\n</ul>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">constructor</span>(private headerService: HeaderService) &#123;&#125;</div></pre></td></tr></table></figure>\n<ul>\n<li>组件初始化时初始化相应的数据</li>\n</ul>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 生命周期钩子：初始化</span></div><div class=\"line\">ngOnInit() &#123;</div><div class=\"line\">  <span class=\"comment\">// 设定menus的初始值</span></div><div class=\"line\">  <span class=\"keyword\">this</span>.menus = <span class=\"keyword\">this</span>.headerService.getMenus();</div><div class=\"line\">  <span class=\"comment\">// 设定usermenus的初始值</span></div><div class=\"line\">  <span class=\"keyword\">this</span>.usermenus = <span class=\"keyword\">this</span>.headerService.getUsermenus();</div><div class=\"line\">  ... <span class=\"comment\">//其他初始化事件</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>经过上述的步骤，我们实现了服务的创建、实例化、注入和使用。<br>需要注意的是，Angular应用是一个组件树。每个组件实例都有自己的注入器！组件的树与注入器的树平行。<br>所以当我们需要共享或者隔断服务的时候就要想起来这个与组件树平行的注入器树。</p>\n<h2 id=\"结束语\"><a href=\"#结束语\" class=\"headerlink\" title=\"结束语\"></a>结束语</h2><hr>\n<p>angular2中，不管是组件类，还是是服务类，这样的创建、输出、获取等等模块化的操作还是很棒的。<br><a href=\"https://github.com/godbasin/godbasin.github.io/tree/blog-codes/angular2-notes/6-use-service-class\" target=\"_blank\" rel=\"external\">此处查看项目代码（仅包含src部分）</a><br><a href=\"http://oc8qsv1w6.bkt.clouddn.com/6-use-service-class/index.html#/index\" target=\"_blank\" rel=\"external\">此处查看页面效果</a></p>\n","excerpt":"<p>最近在学习Angular2作为前端的框架，《Angular2使用笔记》系列用于记录过程中的一些使用和解决方法。<br>本文记录将一些数据封装到服务类进行获取的过程。<br>","more":"</p>\n<h2 id=\"模块化和依赖注入\"><a href=\"#模块化和依赖注入\" class=\"headerlink\" title=\"模块化和依赖注入\"></a>模块化和依赖注入</h2><hr>\n<p>模块是组织应用程序和使用外部程序库的最佳途径。</p>\n<h3 id=\"Angular模块化\"><a href=\"#Angular模块化\" class=\"headerlink\" title=\"Angular模块化\"></a>Angular模块化</h3><ul>\n<li>Angular模块把组件、指令和管道打包成内聚的功能块儿，每一个都聚焦于一个特性分区、业务领域、工作流，或一组通用的工具<ul>\n<li>模块还能用来把服务加到应用程序中</li>\n<li>模块可能在应用启动时立即加载，也可能由路由器进行异步延迟加载</li>\n</ul>\n</li>\n<li>Angular模块是一个由@NgModule装饰器提供元数据的类，元数据包括<ul>\n<li>声明哪些组件、指令、管道属于该模块</li>\n<li>公开某些类，以便其它的组件模板可以使用它们</li>\n<li>隐藏那些属于实现细节的非公开类</li>\n<li>导入其它模块，以获得所需的组件、指令和管道</li>\n<li>在应用程序级提供服务，以便应用中的任何组件都能使用它</li>\n</ul>\n</li>\n<li>每个Angular应用至少有一个模块类—— 根模块 ，我们将通过引导根模块来启动应用</li>\n</ul>\n<h3 id=\"依赖注入\"><a href=\"#依赖注入\" class=\"headerlink\" title=\"依赖注入\"></a>依赖注入</h3><p>前面我们也有稍微介绍过angular2的依赖注入，可查看<a href=\"https://godbasin.github.io/2016/10/07/angular2-notes-3-create-header/\">《Angular2使用笔记3–创建头部组件》</a>。本骚年稍微偷个懒，直接拿过来吧。</p>\n<ul>\n<li>全局依赖<ul>\n<li>在应用程序根组件AppComponent中注册那些被应用程序全局使用的依赖提供商</li>\n<li>这些全局注册的依赖，能在应用程序的任何地方注入到任何组件和服务的构造函数里</li>\n</ul>\n</li>\n<li>外部模块<ul>\n<li>@Injectable和嵌套服务依赖<ul>\n<li>@Injectable()标志着一个类可以被一个注入器实例化</li>\n<li>@Injectable()装饰器只在一个服务类有自己的依赖的时候，才是不可缺少</li>\n</ul>\n</li>\n<li>把服务作用域限制到一个组件支树<ul>\n<li>被注入的服务依赖都是单例的，在任意一个依赖注入器(“injector”)中，每个服务只有唯一的实例</li>\n<li>Angular应用程序有多个依赖注入器，组织成一个与组件树平行的树状结构</li>\n<li>在多个组件中注入，服务就会被新建出多个实例，分别提供给不同的组件</li>\n<li>通过在组件树的子级根组件中提供服务，可以把一个被注入服务的作用域局限在应用程序结构中的某个分支中</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>常用依赖注入<ul>\n<li>指令（组件）：通过Component中directives注入</li>\n<li>服务：通过Component中providers注入</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"服务提供商\"><a href=\"#服务提供商\" class=\"headerlink\" title=\"服务提供商\"></a>服务提供商</h3><ul>\n<li>模块与服务<ul>\n<li>模块是为模块中的所有组件提供服务的最佳途径</li>\n<li>模块可以往应用的“根依赖注入器”中添加提供商，让那些服务在应用中到处可用</li>\n</ul>\n</li>\n<li>服务提供商<ul>\n<li>提供商提供所需依赖值的一个具体的运行期版本</li>\n<li>注入器依靠提供商们来创建服务的实例，它会被注入器注入到组件或其它服务中</li>\n<li>我们必须为注入器注册一个服务的提供商，否则它就不知道该如何创建此服务</li>\n</ul>\n</li>\n<li>提供商的使用<ul>\n<li>把提供商添加到根模块上，则任何地方使用的都是服务的同一个实例</li>\n<li>把它注册在组件级表示该组件的每一个新实例都会有一个(在该组件注册的)服务的新实例</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"创建并使用服务\"><a href=\"#创建并使用服务\" class=\"headerlink\" title=\"创建并使用服务\"></a>创建并使用服务</h2><hr>\n<h3 id=\"创建服务\"><a href=\"#创建服务\" class=\"headerlink\" title=\"创建服务\"></a>创建服务</h3><p>这里我们用头部Header组件为例子，其中我们将菜单的数据获取单独封装成一个服务HeaderService在header.service.ts文件中。如下：<br><figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 获取@Injectable装饰器</span></div><div class=\"line\"><span class=\"keyword\">import</span> &#123;Injectable&#125; from <span class=\"string\">'@angular/core'</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// @Injectable()标志着一个类可以被一个注入器实例化</span></div><div class=\"line\">Injectable()</div><div class=\"line\"><span class=\"comment\">// 输出HeaderService服务类</span></div><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> HeaderService &#123;</div><div class=\"line\">  <span class=\"comment\">// menus用于储存主菜单</span></div><div class=\"line\">  <span class=\"keyword\">private</span> menus: <span class=\"built_in\">Array</span>&lt;<span class=\"built_in\">any</span>&gt; = [&#123;</div><div class=\"line\">    title: <span class=\"string\">'index'</span>, <span class=\"comment\">// title用于储存路由对应的路径</span></div><div class=\"line\">    href: <span class=\"string\">'/index'</span>, <span class=\"comment\">// href用于设定该菜单跳转路由</span></div><div class=\"line\">    text: <span class=\"string\">'首页'</span>, <span class=\"comment\">// text用于储存该菜单显示名称</span></div><div class=\"line\">  &#125;, &#123;</div><div class=\"line\">    title: <span class=\"string\">'others'</span>,</div><div class=\"line\">    href: <span class=\"string\">'/other'</span>,</div><div class=\"line\">    text: <span class=\"string\">'其他'</span>,</div><div class=\"line\">  &#125;];</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">// usermenus用于储存侧边下拉菜单</span></div><div class=\"line\">  <span class=\"keyword\">private</span> usermenus: <span class=\"built_in\">Array</span>&lt;<span class=\"built_in\">any</span>&gt; = [&#123;</div><div class=\"line\">    href: <span class=\"string\">'/login'</span>, <span class=\"comment\">// href用于设定该菜单跳转路由</span></div><div class=\"line\">    text: <span class=\"string\">'退出'</span>, <span class=\"comment\">// text用于储存该菜单显示名称</span></div><div class=\"line\">  &#125;];</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">// 提供获取menus的接口</span></div><div class=\"line\">  getMenus()&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.menus;</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">// 提供获取usermenus的接口</span></div><div class=\"line\">  getUsermenus()&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.usermenus;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h3 id=\"注入并使用服务\"><a href=\"#注入并使用服务\" class=\"headerlink\" title=\"注入并使用服务\"></a>注入并使用服务</h3><p>我们在header.component.ts文件中，进行HeaderService服务的注入和使用。</p>\n<ul>\n<li>获取服务类</li>\n</ul>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 获取HeaderService服务类</span></div><div class=\"line\"><span class=\"keyword\">import</span> &#123; HeaderService &#125; from <span class=\"string\">'./header.service'</span>;</div></pre></td></tr></table></figure>\n<ul>\n<li>在元数据中实例化服务类</li>\n</ul>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">@Component(&#123;</div><div class=\"line\">  ... <span class=\"comment\">// 其他元数据</span></div><div class=\"line\">  providers:[HeaderService] <span class=\"comment\">// 实例化服务</span></div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<ul>\n<li>在组件中注入服务</li>\n</ul>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">constructor</span>(private headerService: HeaderService) &#123;&#125;</div></pre></td></tr></table></figure>\n<ul>\n<li>组件初始化时初始化相应的数据</li>\n</ul>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 生命周期钩子：初始化</span></div><div class=\"line\">ngOnInit() &#123;</div><div class=\"line\">  <span class=\"comment\">// 设定menus的初始值</span></div><div class=\"line\">  <span class=\"keyword\">this</span>.menus = <span class=\"keyword\">this</span>.headerService.getMenus();</div><div class=\"line\">  <span class=\"comment\">// 设定usermenus的初始值</span></div><div class=\"line\">  <span class=\"keyword\">this</span>.usermenus = <span class=\"keyword\">this</span>.headerService.getUsermenus();</div><div class=\"line\">  ... <span class=\"comment\">//其他初始化事件</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>经过上述的步骤，我们实现了服务的创建、实例化、注入和使用。<br>需要注意的是，Angular应用是一个组件树。每个组件实例都有自己的注入器！组件的树与注入器的树平行。<br>所以当我们需要共享或者隔断服务的时候就要想起来这个与组件树平行的注入器树。</p>\n<h2 id=\"结束语\"><a href=\"#结束语\" class=\"headerlink\" title=\"结束语\"></a>结束语</h2><hr>\n<p>angular2中，不管是组件类，还是是服务类，这样的创建、输出、获取等等模块化的操作还是很棒的。<br><a href=\"https://github.com/godbasin/godbasin.github.io/tree/blog-codes/angular2-notes/6-use-service-class\">此处查看项目代码（仅包含src部分）</a><br><a href=\"http://oc8qsv1w6.bkt.clouddn.com/6-use-service-class/index.html#/index\">此处查看页面效果</a></p>"},{"title":"Angular2使用笔记8--在Angular2中使用Observable对象","date":"2016-11-06T01:46:47.000Z","_content":"最近在学习Angular2作为前端的框架，《Angular2使用笔记》系列用于记录过程中的一些使用和解决方法。\n本文介绍Observor、Subject相关，以及在Angular2中Http服务以及Observable对象的使用。\n<!--more-->\n\n## 认识Rxjs\n-----\n可能比较多的java小伙伴会比较熟悉吧，rx这个东西。不知不觉前端又把各种精华吸取进来了呢。哈哈。\n### Rxjs基本概念\n- Observable(可观察对象) : 是一个包含来自未来、可以被使用的值(value)或事件(event)的集合\n- Observe(观察者)：是一个知道如何监听、处理来自Obervable的值的函数集合 \n- Subscription(订阅)：代表着Observable的执行动作，我们可以使用它来停止Obervable继续执行\n- Operators(操作)：一系列可以操作集合的pure function，像是过滤(filter)、转换(map)等等\n- Subject：相当于一个事件发射器，是唯一能够向多个Observer广播值(value)的唯一手段\n- Schedulers(调度)：是一个中央调度员，帮助我们控制并发，协调计算(setTimeout、requestAnimationFrame等)\n\n这里我们重点介绍一下Observable和Subject，其他的Observer、Subscription等都相对比较简单。\n\n### Observable(可观察对象)\nObservable（可观察对象）是基于推送（Push）运行时执行（lazy）的多值集合。\n\n- 拉取(Pull)和推送(Push)\n拉取和推送是数据生产者和数据消费者之间通信的两种不同机制。\n  - 拉取：在拉取系统中，总是由消费者决定何时从生产者那里获得数据。生产者对数据传递给消费者的时间毫无感知（被动的生产者，主动的消费者）\n  - 推送：在推送系统中生产者决定何时向消费者传递数据，消费者对何时收到数据毫无感知（被动的消费者）\n\n- js中的Promise和Observable\n  - 现代JavaScript中Promise是典型的推送系统。作为数据生产者的Promise通过resolve()向数据消费者——回调函数传递数据：与函数不同，Promise决定向回调函数推送值的时间\n  - RxJS在JavaScript中引入了Observable(可观察对象)这个新的推送系统。Observable是多数据值的生产者，向Observer(被动的消费者)推送数据\n\n- Observable与函数、promsise\n  - 函数是当调用才同步计算，并最终只返回一个值的\n  - promise是会或者不会返回一个值\n  - Observable是当调用才同步或者异步地计算，并可能产生0到无穷多个值的\n\n- Observable是函数概念的拓展\n  - Observable就像一个没有参数的函数，并不断生成一些值供我们使用，因此它也像是一个事件发射机(EventEmitters)\n  - 在Observable中subscribe就像call一个函数，你订阅它，它才会被'启动'。同一个Observable对于不同的subscribe，是不会共享结果的(通常情况下这样子的，但可以通过调用api来共享)\n\n### Observable四大核心\n- 创建\n  - Rx.Observable.create是Observable构造函数的别名，接受一个参数：subscribe函数\n  - 除了使用create创建Observable，我们通常还使用创建操作符, 如of，from，interval,等来创建Observable\n- 订阅\n  - observable.subscribe和Observable.create(function subscribe(observer) {...})中的subscribe不是同一个对象，但在工程中可以在概念上视两者为等价物\n  - 调用subscribe的观察者并不会共享同一个Observable\n  - 订阅机制与处理事件的addEventListener/removeEventListenerAPI完全不同。通过observable.subscribe，观察者并不需要在Observable中进行注册，Observable也不需要维护订阅者的列表\n  - 订阅后便进入了Observable的执行阶段，在执行阶段值和事件将会被传递给观察者供其消费\n- 执行\n  - 只有在被订阅之后Observable才会执行，执行的逻辑在Observable.create(function subscribe(observer){...})中描述，执行后将会在特定时间段内，同步或者异步地成产多个数据值\n  - Observable在执行过程中，可以推送三种类型的值：\n    - \"Next\" 通知： 实际产生的数据，包括数字、字符串、对象等\n    - \"Error\" 通知：一个JavaScript错误或者异常\n    - \"Complete\" 通知：一个不带有值的事件\n  - 在Observable的执行过程中，0个或者多个“Next”通知会被推送\n  - 在错误或者完成通知被推送后，Observable不会再推送任何其他通知\n- 终止\n  - Observable的执行可能是无限的，作为观察者需要主动中断执行：我们需要特定的API去终止执行过程\n  - 因为特定的观察者都有特定的执行过程，一旦观察者获得想要的数据后就需要终止执行过程以免带来计算时对内存资源的浪费\n  - 在observable.subscribe被调用时，观察者会与其执行作用域绑定，同时返回一个Subscription类型的对象，通过调用subscription.unsubscribe()你可以终止执行过程\n\n### 参考\n对于Observable和Subject的理解很多时候我也是从网上读到的呢，所以可能本篇博客相对来说粘贴别人的东西会比较多吧。\n[《RxJs 核心概念之Observable》](https://segmentfault.com/a/1190000005051034)\n[《不要把Rx用成Promise》](https://zhuanlan.zhihu.com/p/20531896)\n[RxJS4.0](https://github.com/Reactive-Extensions/RxJS/tree/master/doc/api)\n\n## 使用Observable\n---\n这里我们创建一个Other页面组件，用于展示通过Angular的Http服务返回的Observable对象中获取的数据。\n### 创建Other组件\n- 在app.routes.ts文件中添加该页面路由\n\n``` typescript\nexport const routes: RouterConfig = [\n  ... // 其他路由\n  { path: 'other',  component: Other }\n];\n```\n\n- 新建other文件夹\n- 添加组件模板other.template.ts\n\n``` typescript\n<!--插入头部组件，注入指令后生效-->\n<my-header></my-header>\n<div class=\"container\">\n    <h3>RxJS相关</h3>\n    <table class=\"table\">\n        <tbody>\n            <tr *ngFor=\"let item of rxjsDate\">\n                <td>\n                    <h4>{{ item.name }} : </h4>\n                    <h5>{{ item.content }}</h5>\n                </td>\n            </tr>\n        </tbody>\n    </table>\n</div>\n```\n\n- other文件夹下index.ts中输出组件\n\n``` typescript\nimport { Component } from '@angular/core';\n// 添加Header组件，默认从header文件夹的index.ts中获取\nimport { Header } from '../header';\n\n@Component({\n  selector: 'other', // 设置模板元素\n  templateUrl: './other.template.html', // 模板文件引入\n  directives: [Header] // 注入指令\n})\nexport class Other {\n  // 定义并初始化数据\n  rxjsDate: Array<any> = [];\n}\n```\n\n### 创建获取数据的Http服务\n这里我们把该服务写在other.service.ts文件中。\n``` typescript\n// 获取Injectable服务\nimport { Injectable } from '@angular/core';\n// 获取Http服务\nimport { Http, Response } from '@angular/http';\n// 获取Observable服务\nimport { Observable } from 'rxjs/Observable';\n// 获取rxjs相关操作服务（map等）,后面我们会提到\nimport '../rxjs-operators';\n\n@Injectable()\nexport class OtherService {\n  // 注入Http服务\n  constructor(public http: Http) {}\n  // 设置获取数据的地址，这里我们使用本地的json文件模拟\n  private dataUrl: string = 'app/info.json';\n\n  // 定义方法，用于获取Observable服务\n  getDatas(): Observable<any> {\n    // 使用angular的http服务获取数据，默认返回observable\n    return this.http.get(this.dataUrl)\n      // 响应数据是JSON字符串格式的。 我们必须把这个字符串解析成JavaScript对象\n      .map(res => res.json().data)\n      // 异常的捕获并进行处理\n      .catch(this.handleError);\n  }\n\n  // 定义私有方法来处理异常\n  private handleError(error: any) {\n    // 我们的服务处理器(handleError)把响应对象记录到控制台中\n    // 把错误转换成对用户友好的消息，并且通过Observable.throw来\n    // 把这个消息放进一个新的、用于表示“失败”的可观察对象\n    let errMsg = (error.message) ? error.message :\n      error.status ? `${error.status} - ${error.statusText}` : 'Server error';\n    console.error(errMsg); // 输出异常信息\n    return Observable.throw(errMsg);\n  }\n}\n```\n- 关于rxjs相关操作符\nRxJS(\"Reactive Extensions\"的缩写)是一个被Angular认可的第三方库，它实现了异步可观察对象(asynchronous observable)模式。\n\nAngular在rxjs/Observable模块中导出了一个精简版的Observable 类，这个版本缺少很多操作符。\n\n我们将一个一个的导入Observable的操作符和静态类方法，直到我们得到了一个精确符合我们需求的自定义Observable实现。 我们将把这些import语句放进一个app/rxjs-operators.ts文件里。\n``` typescript\n// import 'rxjs/Rx'; \n// adds ALL RxJS statics & operators to Observable\n\n// See node_module/rxjs/Rxjs.js\n// Import just the rxjs statics and operators we need for THIS app.\n\n// Statics\nimport 'rxjs/add/observable/throw';\n\n// Operators\nimport 'rxjs/add/operator/catch';\nimport 'rxjs/add/operator/debounceTime';\nimport 'rxjs/add/operator/distinctUntilChanged';\nimport 'rxjs/add/operator/map';\nimport 'rxjs/add/operator/switchMap';\nimport 'rxjs/add/operator/toPromise';\n```\n\n### 在Other组件中注入相关服务并使用\n``` typescript\n... // 添加其他服务\n\n// 添加OtherService服务，用来获取数据\nimport { OtherService } from './other.service';\n\n@Component({\n  ... // 其他元数据\n  providers:[OtherService] // 实例化服务\n})\n\nexport class Other {\n  ...\n\n  // 注入服务\n  constructor(private otherService: OtherService) {}\n\n  ngOnInit() {\n    // 获得Obervable对象并进行订阅\n    this.otherService.getDatas().subscribe(\n      // 获取数据并保存在this.rxjsDate中\n      datas => this.rxjsDate = datas,\n      // 获取错误信息并保存在this.errorMessage中\n      error => this.errorMessage = <any>error);\n  }\n}\n```\n\n页面如下：\n![image](http://o905ne85q.bkt.clouddn.com/E597.tmp.png)\n\n### 倒退为承诺(Promise)\nAngular的http客户端API返回的是Observable<Response>类型的对象，但我们也可以把它转成Promise。\n\n这很容易，并且在简单的场景中，一个基于承诺(Promise)的版本看起来很像基于可观察对象(Observable)的版本。\n\n- 把可观察对象转变成承诺，调用toPromise(success, fail)\n\n``` typescript\nreturn this.http.get(this.dataUrl)\n       .toPromise()\n       .then(this.extractData)\n       .catch(this.handleError);\n```\n\n- 对调用方组件进行调整，让它期待一个Promise而非Observable，调用这个返回的承诺的then方法，而不再是subscribe\n\n``` typescript\nthis.otherService.getDatas().then(\n     datas => this.rxjsDate = datas,\n     error => this.errorMessage = <any>error);\n}\n```\n\n## 结束语\n-----\n从刚开始接触http服务，到ajax，然后是Promise，如今发现还有个Observable。\n不得不说，前端发展真的很快呢，不断地幻化，然后大步往前。这种不断自我演进的属性真的捕获了本骚年的心呢。\n[此处查看项目代码（仅包含src部分）](https://github.com/godbasin/godbasin.github.io/tree/blog-codes/angular2-notes/8-rxjs-in-angular2)\n[此处查看页面效果](http://oc8qsv1w6.bkt.clouddn.com/8-rxjs-in-angular2/index.html#/other)","source":"_posts/angular2-notes-8-rxjs-in-angular2.md","raw":"---\ntitle: Angular2使用笔记8--在Angular2中使用Observable对象\ndate: 2016-11-06 09:46:47\ncategories: angular2火锅\ntags: 笔记\n---\n最近在学习Angular2作为前端的框架，《Angular2使用笔记》系列用于记录过程中的一些使用和解决方法。\n本文介绍Observor、Subject相关，以及在Angular2中Http服务以及Observable对象的使用。\n<!--more-->\n\n## 认识Rxjs\n-----\n可能比较多的java小伙伴会比较熟悉吧，rx这个东西。不知不觉前端又把各种精华吸取进来了呢。哈哈。\n### Rxjs基本概念\n- Observable(可观察对象) : 是一个包含来自未来、可以被使用的值(value)或事件(event)的集合\n- Observe(观察者)：是一个知道如何监听、处理来自Obervable的值的函数集合 \n- Subscription(订阅)：代表着Observable的执行动作，我们可以使用它来停止Obervable继续执行\n- Operators(操作)：一系列可以操作集合的pure function，像是过滤(filter)、转换(map)等等\n- Subject：相当于一个事件发射器，是唯一能够向多个Observer广播值(value)的唯一手段\n- Schedulers(调度)：是一个中央调度员，帮助我们控制并发，协调计算(setTimeout、requestAnimationFrame等)\n\n这里我们重点介绍一下Observable和Subject，其他的Observer、Subscription等都相对比较简单。\n\n### Observable(可观察对象)\nObservable（可观察对象）是基于推送（Push）运行时执行（lazy）的多值集合。\n\n- 拉取(Pull)和推送(Push)\n拉取和推送是数据生产者和数据消费者之间通信的两种不同机制。\n  - 拉取：在拉取系统中，总是由消费者决定何时从生产者那里获得数据。生产者对数据传递给消费者的时间毫无感知（被动的生产者，主动的消费者）\n  - 推送：在推送系统中生产者决定何时向消费者传递数据，消费者对何时收到数据毫无感知（被动的消费者）\n\n- js中的Promise和Observable\n  - 现代JavaScript中Promise是典型的推送系统。作为数据生产者的Promise通过resolve()向数据消费者——回调函数传递数据：与函数不同，Promise决定向回调函数推送值的时间\n  - RxJS在JavaScript中引入了Observable(可观察对象)这个新的推送系统。Observable是多数据值的生产者，向Observer(被动的消费者)推送数据\n\n- Observable与函数、promsise\n  - 函数是当调用才同步计算，并最终只返回一个值的\n  - promise是会或者不会返回一个值\n  - Observable是当调用才同步或者异步地计算，并可能产生0到无穷多个值的\n\n- Observable是函数概念的拓展\n  - Observable就像一个没有参数的函数，并不断生成一些值供我们使用，因此它也像是一个事件发射机(EventEmitters)\n  - 在Observable中subscribe就像call一个函数，你订阅它，它才会被'启动'。同一个Observable对于不同的subscribe，是不会共享结果的(通常情况下这样子的，但可以通过调用api来共享)\n\n### Observable四大核心\n- 创建\n  - Rx.Observable.create是Observable构造函数的别名，接受一个参数：subscribe函数\n  - 除了使用create创建Observable，我们通常还使用创建操作符, 如of，from，interval,等来创建Observable\n- 订阅\n  - observable.subscribe和Observable.create(function subscribe(observer) {...})中的subscribe不是同一个对象，但在工程中可以在概念上视两者为等价物\n  - 调用subscribe的观察者并不会共享同一个Observable\n  - 订阅机制与处理事件的addEventListener/removeEventListenerAPI完全不同。通过observable.subscribe，观察者并不需要在Observable中进行注册，Observable也不需要维护订阅者的列表\n  - 订阅后便进入了Observable的执行阶段，在执行阶段值和事件将会被传递给观察者供其消费\n- 执行\n  - 只有在被订阅之后Observable才会执行，执行的逻辑在Observable.create(function subscribe(observer){...})中描述，执行后将会在特定时间段内，同步或者异步地成产多个数据值\n  - Observable在执行过程中，可以推送三种类型的值：\n    - \"Next\" 通知： 实际产生的数据，包括数字、字符串、对象等\n    - \"Error\" 通知：一个JavaScript错误或者异常\n    - \"Complete\" 通知：一个不带有值的事件\n  - 在Observable的执行过程中，0个或者多个“Next”通知会被推送\n  - 在错误或者完成通知被推送后，Observable不会再推送任何其他通知\n- 终止\n  - Observable的执行可能是无限的，作为观察者需要主动中断执行：我们需要特定的API去终止执行过程\n  - 因为特定的观察者都有特定的执行过程，一旦观察者获得想要的数据后就需要终止执行过程以免带来计算时对内存资源的浪费\n  - 在observable.subscribe被调用时，观察者会与其执行作用域绑定，同时返回一个Subscription类型的对象，通过调用subscription.unsubscribe()你可以终止执行过程\n\n### 参考\n对于Observable和Subject的理解很多时候我也是从网上读到的呢，所以可能本篇博客相对来说粘贴别人的东西会比较多吧。\n[《RxJs 核心概念之Observable》](https://segmentfault.com/a/1190000005051034)\n[《不要把Rx用成Promise》](https://zhuanlan.zhihu.com/p/20531896)\n[RxJS4.0](https://github.com/Reactive-Extensions/RxJS/tree/master/doc/api)\n\n## 使用Observable\n---\n这里我们创建一个Other页面组件，用于展示通过Angular的Http服务返回的Observable对象中获取的数据。\n### 创建Other组件\n- 在app.routes.ts文件中添加该页面路由\n\n``` typescript\nexport const routes: RouterConfig = [\n  ... // 其他路由\n  { path: 'other',  component: Other }\n];\n```\n\n- 新建other文件夹\n- 添加组件模板other.template.ts\n\n``` typescript\n<!--插入头部组件，注入指令后生效-->\n<my-header></my-header>\n<div class=\"container\">\n    <h3>RxJS相关</h3>\n    <table class=\"table\">\n        <tbody>\n            <tr *ngFor=\"let item of rxjsDate\">\n                <td>\n                    <h4>{{ item.name }} : </h4>\n                    <h5>{{ item.content }}</h5>\n                </td>\n            </tr>\n        </tbody>\n    </table>\n</div>\n```\n\n- other文件夹下index.ts中输出组件\n\n``` typescript\nimport { Component } from '@angular/core';\n// 添加Header组件，默认从header文件夹的index.ts中获取\nimport { Header } from '../header';\n\n@Component({\n  selector: 'other', // 设置模板元素\n  templateUrl: './other.template.html', // 模板文件引入\n  directives: [Header] // 注入指令\n})\nexport class Other {\n  // 定义并初始化数据\n  rxjsDate: Array<any> = [];\n}\n```\n\n### 创建获取数据的Http服务\n这里我们把该服务写在other.service.ts文件中。\n``` typescript\n// 获取Injectable服务\nimport { Injectable } from '@angular/core';\n// 获取Http服务\nimport { Http, Response } from '@angular/http';\n// 获取Observable服务\nimport { Observable } from 'rxjs/Observable';\n// 获取rxjs相关操作服务（map等）,后面我们会提到\nimport '../rxjs-operators';\n\n@Injectable()\nexport class OtherService {\n  // 注入Http服务\n  constructor(public http: Http) {}\n  // 设置获取数据的地址，这里我们使用本地的json文件模拟\n  private dataUrl: string = 'app/info.json';\n\n  // 定义方法，用于获取Observable服务\n  getDatas(): Observable<any> {\n    // 使用angular的http服务获取数据，默认返回observable\n    return this.http.get(this.dataUrl)\n      // 响应数据是JSON字符串格式的。 我们必须把这个字符串解析成JavaScript对象\n      .map(res => res.json().data)\n      // 异常的捕获并进行处理\n      .catch(this.handleError);\n  }\n\n  // 定义私有方法来处理异常\n  private handleError(error: any) {\n    // 我们的服务处理器(handleError)把响应对象记录到控制台中\n    // 把错误转换成对用户友好的消息，并且通过Observable.throw来\n    // 把这个消息放进一个新的、用于表示“失败”的可观察对象\n    let errMsg = (error.message) ? error.message :\n      error.status ? `${error.status} - ${error.statusText}` : 'Server error';\n    console.error(errMsg); // 输出异常信息\n    return Observable.throw(errMsg);\n  }\n}\n```\n- 关于rxjs相关操作符\nRxJS(\"Reactive Extensions\"的缩写)是一个被Angular认可的第三方库，它实现了异步可观察对象(asynchronous observable)模式。\n\nAngular在rxjs/Observable模块中导出了一个精简版的Observable 类，这个版本缺少很多操作符。\n\n我们将一个一个的导入Observable的操作符和静态类方法，直到我们得到了一个精确符合我们需求的自定义Observable实现。 我们将把这些import语句放进一个app/rxjs-operators.ts文件里。\n``` typescript\n// import 'rxjs/Rx'; \n// adds ALL RxJS statics & operators to Observable\n\n// See node_module/rxjs/Rxjs.js\n// Import just the rxjs statics and operators we need for THIS app.\n\n// Statics\nimport 'rxjs/add/observable/throw';\n\n// Operators\nimport 'rxjs/add/operator/catch';\nimport 'rxjs/add/operator/debounceTime';\nimport 'rxjs/add/operator/distinctUntilChanged';\nimport 'rxjs/add/operator/map';\nimport 'rxjs/add/operator/switchMap';\nimport 'rxjs/add/operator/toPromise';\n```\n\n### 在Other组件中注入相关服务并使用\n``` typescript\n... // 添加其他服务\n\n// 添加OtherService服务，用来获取数据\nimport { OtherService } from './other.service';\n\n@Component({\n  ... // 其他元数据\n  providers:[OtherService] // 实例化服务\n})\n\nexport class Other {\n  ...\n\n  // 注入服务\n  constructor(private otherService: OtherService) {}\n\n  ngOnInit() {\n    // 获得Obervable对象并进行订阅\n    this.otherService.getDatas().subscribe(\n      // 获取数据并保存在this.rxjsDate中\n      datas => this.rxjsDate = datas,\n      // 获取错误信息并保存在this.errorMessage中\n      error => this.errorMessage = <any>error);\n  }\n}\n```\n\n页面如下：\n![image](http://o905ne85q.bkt.clouddn.com/E597.tmp.png)\n\n### 倒退为承诺(Promise)\nAngular的http客户端API返回的是Observable<Response>类型的对象，但我们也可以把它转成Promise。\n\n这很容易，并且在简单的场景中，一个基于承诺(Promise)的版本看起来很像基于可观察对象(Observable)的版本。\n\n- 把可观察对象转变成承诺，调用toPromise(success, fail)\n\n``` typescript\nreturn this.http.get(this.dataUrl)\n       .toPromise()\n       .then(this.extractData)\n       .catch(this.handleError);\n```\n\n- 对调用方组件进行调整，让它期待一个Promise而非Observable，调用这个返回的承诺的then方法，而不再是subscribe\n\n``` typescript\nthis.otherService.getDatas().then(\n     datas => this.rxjsDate = datas,\n     error => this.errorMessage = <any>error);\n}\n```\n\n## 结束语\n-----\n从刚开始接触http服务，到ajax，然后是Promise，如今发现还有个Observable。\n不得不说，前端发展真的很快呢，不断地幻化，然后大步往前。这种不断自我演进的属性真的捕获了本骚年的心呢。\n[此处查看项目代码（仅包含src部分）](https://github.com/godbasin/godbasin.github.io/tree/blog-codes/angular2-notes/8-rxjs-in-angular2)\n[此处查看页面效果](http://oc8qsv1w6.bkt.clouddn.com/8-rxjs-in-angular2/index.html#/other)","slug":"angular2-notes-8-rxjs-in-angular2","published":1,"updated":"2016-11-06T01:47:22.642Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cix45huft0020xotuvwdvg390","content":"<p>最近在学习Angular2作为前端的框架，《Angular2使用笔记》系列用于记录过程中的一些使用和解决方法。<br>本文介绍Observor、Subject相关，以及在Angular2中Http服务以及Observable对象的使用。<br><a id=\"more\"></a></p>\n<h2 id=\"认识Rxjs\"><a href=\"#认识Rxjs\" class=\"headerlink\" title=\"认识Rxjs\"></a>认识Rxjs</h2><hr>\n<p>可能比较多的java小伙伴会比较熟悉吧，rx这个东西。不知不觉前端又把各种精华吸取进来了呢。哈哈。</p>\n<h3 id=\"Rxjs基本概念\"><a href=\"#Rxjs基本概念\" class=\"headerlink\" title=\"Rxjs基本概念\"></a>Rxjs基本概念</h3><ul>\n<li>Observable(可观察对象) : 是一个包含来自未来、可以被使用的值(value)或事件(event)的集合</li>\n<li>Observe(观察者)：是一个知道如何监听、处理来自Obervable的值的函数集合 </li>\n<li>Subscription(订阅)：代表着Observable的执行动作，我们可以使用它来停止Obervable继续执行</li>\n<li>Operators(操作)：一系列可以操作集合的pure function，像是过滤(filter)、转换(map)等等</li>\n<li>Subject：相当于一个事件发射器，是唯一能够向多个Observer广播值(value)的唯一手段</li>\n<li>Schedulers(调度)：是一个中央调度员，帮助我们控制并发，协调计算(setTimeout、requestAnimationFrame等)</li>\n</ul>\n<p>这里我们重点介绍一下Observable和Subject，其他的Observer、Subscription等都相对比较简单。</p>\n<h3 id=\"Observable-可观察对象\"><a href=\"#Observable-可观察对象\" class=\"headerlink\" title=\"Observable(可观察对象)\"></a>Observable(可观察对象)</h3><p>Observable（可观察对象）是基于推送（Push）运行时执行（lazy）的多值集合。</p>\n<ul>\n<li><p>拉取(Pull)和推送(Push)<br>拉取和推送是数据生产者和数据消费者之间通信的两种不同机制。</p>\n<ul>\n<li>拉取：在拉取系统中，总是由消费者决定何时从生产者那里获得数据。生产者对数据传递给消费者的时间毫无感知（被动的生产者，主动的消费者）</li>\n<li>推送：在推送系统中生产者决定何时向消费者传递数据，消费者对何时收到数据毫无感知（被动的消费者）</li>\n</ul>\n</li>\n<li><p>js中的Promise和Observable</p>\n<ul>\n<li>现代JavaScript中Promise是典型的推送系统。作为数据生产者的Promise通过resolve()向数据消费者——回调函数传递数据：与函数不同，Promise决定向回调函数推送值的时间</li>\n<li>RxJS在JavaScript中引入了Observable(可观察对象)这个新的推送系统。Observable是多数据值的生产者，向Observer(被动的消费者)推送数据</li>\n</ul>\n</li>\n<li><p>Observable与函数、promsise</p>\n<ul>\n<li>函数是当调用才同步计算，并最终只返回一个值的</li>\n<li>promise是会或者不会返回一个值</li>\n<li>Observable是当调用才同步或者异步地计算，并可能产生0到无穷多个值的</li>\n</ul>\n</li>\n<li><p>Observable是函数概念的拓展</p>\n<ul>\n<li>Observable就像一个没有参数的函数，并不断生成一些值供我们使用，因此它也像是一个事件发射机(EventEmitters)</li>\n<li>在Observable中subscribe就像call一个函数，你订阅它，它才会被’启动’。同一个Observable对于不同的subscribe，是不会共享结果的(通常情况下这样子的，但可以通过调用api来共享)</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"Observable四大核心\"><a href=\"#Observable四大核心\" class=\"headerlink\" title=\"Observable四大核心\"></a>Observable四大核心</h3><ul>\n<li>创建<ul>\n<li>Rx.Observable.create是Observable构造函数的别名，接受一个参数：subscribe函数</li>\n<li>除了使用create创建Observable，我们通常还使用创建操作符, 如of，from，interval,等来创建Observable</li>\n</ul>\n</li>\n<li>订阅<ul>\n<li>observable.subscribe和Observable.create(function subscribe(observer) {…})中的subscribe不是同一个对象，但在工程中可以在概念上视两者为等价物</li>\n<li>调用subscribe的观察者并不会共享同一个Observable</li>\n<li>订阅机制与处理事件的addEventListener/removeEventListenerAPI完全不同。通过observable.subscribe，观察者并不需要在Observable中进行注册，Observable也不需要维护订阅者的列表</li>\n<li>订阅后便进入了Observable的执行阶段，在执行阶段值和事件将会被传递给观察者供其消费</li>\n</ul>\n</li>\n<li>执行<ul>\n<li>只有在被订阅之后Observable才会执行，执行的逻辑在Observable.create(function subscribe(observer){…})中描述，执行后将会在特定时间段内，同步或者异步地成产多个数据值</li>\n<li>Observable在执行过程中，可以推送三种类型的值：<ul>\n<li>“Next” 通知： 实际产生的数据，包括数字、字符串、对象等</li>\n<li>“Error” 通知：一个JavaScript错误或者异常</li>\n<li>“Complete” 通知：一个不带有值的事件</li>\n</ul>\n</li>\n<li>在Observable的执行过程中，0个或者多个“Next”通知会被推送</li>\n<li>在错误或者完成通知被推送后，Observable不会再推送任何其他通知</li>\n</ul>\n</li>\n<li>终止<ul>\n<li>Observable的执行可能是无限的，作为观察者需要主动中断执行：我们需要特定的API去终止执行过程</li>\n<li>因为特定的观察者都有特定的执行过程，一旦观察者获得想要的数据后就需要终止执行过程以免带来计算时对内存资源的浪费</li>\n<li>在observable.subscribe被调用时，观察者会与其执行作用域绑定，同时返回一个Subscription类型的对象，通过调用subscription.unsubscribe()你可以终止执行过程</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h3><p>对于Observable和Subject的理解很多时候我也是从网上读到的呢，所以可能本篇博客相对来说粘贴别人的东西会比较多吧。<br><a href=\"https://segmentfault.com/a/1190000005051034\" target=\"_blank\" rel=\"external\">《RxJs 核心概念之Observable》</a><br><a href=\"https://zhuanlan.zhihu.com/p/20531896\" target=\"_blank\" rel=\"external\">《不要把Rx用成Promise》</a><br><a href=\"https://github.com/Reactive-Extensions/RxJS/tree/master/doc/api\" target=\"_blank\" rel=\"external\">RxJS4.0</a></p>\n<h2 id=\"使用Observable\"><a href=\"#使用Observable\" class=\"headerlink\" title=\"使用Observable\"></a>使用Observable</h2><hr>\n<p>这里我们创建一个Other页面组件，用于展示通过Angular的Http服务返回的Observable对象中获取的数据。</p>\n<h3 id=\"创建Other组件\"><a href=\"#创建Other组件\" class=\"headerlink\" title=\"创建Other组件\"></a>创建Other组件</h3><ul>\n<li>在app.routes.ts文件中添加该页面路由</li>\n</ul>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> routes: RouterConfig = [</div><div class=\"line\">  ... <span class=\"comment\">// 其他路由</span></div><div class=\"line\">  &#123; path: <span class=\"string\">'other'</span>,  component: Other &#125;</div><div class=\"line\">];</div></pre></td></tr></table></figure>\n<ul>\n<li>新建other文件夹</li>\n<li>添加组件模板other.template.ts</li>\n</ul>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;!--插入头部组件，注入指令后生效--&gt;</div><div class=\"line\">&lt;my-header&gt;&lt;/my-header&gt;</div><div class=\"line\">&lt;div class=\"container\"&gt;</div><div class=\"line\">    &lt;h3&gt;RxJS相关&lt;/h3&gt;</div><div class=\"line\">    &lt;table class=\"table\"&gt;</div><div class=\"line\">        &lt;tbody&gt;</div><div class=\"line\">            &lt;tr *ngFor=\"let item of rxjsDate\"&gt;</div><div class=\"line\">                &lt;td&gt;</div><div class=\"line\">                    &lt;h4&gt;&#123;&#123; item.name &#125;&#125; : &lt;/h4&gt;</div><div class=\"line\">                    &lt;h5&gt;&#123;&#123; item.content &#125;&#125;&lt;/h5&gt;</div><div class=\"line\">                &lt;/td&gt;</div><div class=\"line\">            &lt;/tr&gt;</div><div class=\"line\">        &lt;/tbody&gt;</div><div class=\"line\">    &lt;/table&gt;</div><div class=\"line\">&lt;/div&gt;</div></pre></td></tr></table></figure>\n<ul>\n<li>other文件夹下index.ts中输出组件</li>\n</ul>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> &#123; Component &#125; from <span class=\"string\">'@angular/core'</span>;</div><div class=\"line\"><span class=\"comment\">// 添加Header组件，默认从header文件夹的index.ts中获取</span></div><div class=\"line\"><span class=\"keyword\">import</span> &#123; Header &#125; from <span class=\"string\">'../header'</span>;</div><div class=\"line\"></div><div class=\"line\">@Component(&#123;</div><div class=\"line\">  selector: <span class=\"string\">'other'</span>, <span class=\"comment\">// 设置模板元素</span></div><div class=\"line\">  templateUrl: <span class=\"string\">'./other.template.html'</span>, <span class=\"comment\">// 模板文件引入</span></div><div class=\"line\">  directives: [Header] <span class=\"comment\">// 注入指令</span></div><div class=\"line\">&#125;)</div><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> Other &#123;</div><div class=\"line\">  <span class=\"comment\">// 定义并初始化数据</span></div><div class=\"line\">  rxjsDate: <span class=\"built_in\">Array</span>&lt;<span class=\"built_in\">any</span>&gt; = [];</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"创建获取数据的Http服务\"><a href=\"#创建获取数据的Http服务\" class=\"headerlink\" title=\"创建获取数据的Http服务\"></a>创建获取数据的Http服务</h3><p>这里我们把该服务写在other.service.ts文件中。<br><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 获取Injectable服务</span></div><div class=\"line\"><span class=\"keyword\">import</span> &#123; Injectable &#125; from <span class=\"string\">'@angular/core'</span>;</div><div class=\"line\"><span class=\"comment\">// 获取Http服务</span></div><div class=\"line\"><span class=\"keyword\">import</span> &#123; Http, Response &#125; from <span class=\"string\">'@angular/http'</span>;</div><div class=\"line\"><span class=\"comment\">// 获取Observable服务</span></div><div class=\"line\"><span class=\"keyword\">import</span> &#123; Observable &#125; from <span class=\"string\">'rxjs/Observable'</span>;</div><div class=\"line\"><span class=\"comment\">// 获取rxjs相关操作服务（map等）,后面我们会提到</span></div><div class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">'../rxjs-operators'</span>;</div><div class=\"line\"></div><div class=\"line\">@Injectable()</div><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> OtherService &#123;</div><div class=\"line\">  <span class=\"comment\">// 注入Http服务</span></div><div class=\"line\">  <span class=\"keyword\">constructor</span>(public http: Http) &#123;&#125;</div><div class=\"line\">  <span class=\"comment\">// 设置获取数据的地址，这里我们使用本地的json文件模拟</span></div><div class=\"line\">  <span class=\"keyword\">private</span> dataUrl: <span class=\"built_in\">string</span> = <span class=\"string\">'app/info.json'</span>;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">// 定义方法，用于获取Observable服务</span></div><div class=\"line\">  getDatas(): Observable&lt;<span class=\"built_in\">any</span>&gt; &#123;</div><div class=\"line\">    <span class=\"comment\">// 使用angular的http服务获取数据，默认返回observable</span></div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.http.get(<span class=\"keyword\">this</span>.dataUrl)</div><div class=\"line\">      <span class=\"comment\">// 响应数据是JSON字符串格式的。 我们必须把这个字符串解析成JavaScript对象</span></div><div class=\"line\">      .map(res =&gt; res.json().data)</div><div class=\"line\">      <span class=\"comment\">// 异常的捕获并进行处理</span></div><div class=\"line\">      .catch(<span class=\"keyword\">this</span>.handleError);</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">// 定义私有方法来处理异常</span></div><div class=\"line\">  <span class=\"keyword\">private</span> handleError(error: <span class=\"built_in\">any</span>) &#123;</div><div class=\"line\">    <span class=\"comment\">// 我们的服务处理器(handleError)把响应对象记录到控制台中</span></div><div class=\"line\">    <span class=\"comment\">// 把错误转换成对用户友好的消息，并且通过Observable.throw来</span></div><div class=\"line\">    <span class=\"comment\">// 把这个消息放进一个新的、用于表示“失败”的可观察对象</span></div><div class=\"line\">    <span class=\"keyword\">let</span> errMsg = (error.message) ? error.message :</div><div class=\"line\">      error.status ? <span class=\"string\">`<span class=\"subst\">$&#123;error.status&#125;</span> - <span class=\"subst\">$&#123;error.statusText&#125;</span>`</span> : <span class=\"string\">'Server error'</span>;</div><div class=\"line\">    <span class=\"built_in\">console</span>.error(errMsg); <span class=\"comment\">// 输出异常信息</span></div><div class=\"line\">    <span class=\"keyword\">return</span> Observable.throw(errMsg);</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<ul>\n<li>关于rxjs相关操作符<br>RxJS(“Reactive Extensions”的缩写)是一个被Angular认可的第三方库，它实现了异步可观察对象(asynchronous observable)模式。</li>\n</ul>\n<p>Angular在rxjs/Observable模块中导出了一个精简版的Observable 类，这个版本缺少很多操作符。</p>\n<p>我们将一个一个的导入Observable的操作符和静态类方法，直到我们得到了一个精确符合我们需求的自定义Observable实现。 我们将把这些import语句放进一个app/rxjs-operators.ts文件里。<br><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// import 'rxjs/Rx'; </span></div><div class=\"line\"><span class=\"comment\">// adds ALL RxJS statics &amp; operators to Observable</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// See node_module/rxjs/Rxjs.js</span></div><div class=\"line\"><span class=\"comment\">// Import just the rxjs statics and operators we need for THIS app.</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// Statics</span></div><div class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">'rxjs/add/observable/throw'</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// Operators</span></div><div class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">'rxjs/add/operator/catch'</span>;</div><div class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">'rxjs/add/operator/debounceTime'</span>;</div><div class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">'rxjs/add/operator/distinctUntilChanged'</span>;</div><div class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">'rxjs/add/operator/map'</span>;</div><div class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">'rxjs/add/operator/switchMap'</span>;</div><div class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">'rxjs/add/operator/toPromise'</span>;</div></pre></td></tr></table></figure></p>\n<h3 id=\"在Other组件中注入相关服务并使用\"><a href=\"#在Other组件中注入相关服务并使用\" class=\"headerlink\" title=\"在Other组件中注入相关服务并使用\"></a>在Other组件中注入相关服务并使用</h3><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div></pre></td><td class=\"code\"><pre><div class=\"line\">... <span class=\"comment\">// 添加其他服务</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 添加OtherService服务，用来获取数据</span></div><div class=\"line\"><span class=\"keyword\">import</span> &#123; OtherService &#125; from <span class=\"string\">'./other.service'</span>;</div><div class=\"line\"></div><div class=\"line\">@Component(&#123;</div><div class=\"line\">  ... <span class=\"comment\">// 其他元数据</span></div><div class=\"line\">  providers:[OtherService] <span class=\"comment\">// 实例化服务</span></div><div class=\"line\">&#125;)</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> Other &#123;</div><div class=\"line\">  ...</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">// 注入服务</span></div><div class=\"line\">  <span class=\"keyword\">constructor</span>(private otherService: OtherService) &#123;&#125;</div><div class=\"line\"></div><div class=\"line\">  ngOnInit() &#123;</div><div class=\"line\">    <span class=\"comment\">// 获得Obervable对象并进行订阅</span></div><div class=\"line\">    <span class=\"keyword\">this</span>.otherService.getDatas().subscribe(</div><div class=\"line\">      <span class=\"comment\">// 获取数据并保存在this.rxjsDate中</span></div><div class=\"line\">      datas =&gt; <span class=\"keyword\">this</span>.rxjsDate = datas,</div><div class=\"line\">      <span class=\"comment\">// 获取错误信息并保存在this.errorMessage中</span></div><div class=\"line\">      error =&gt; <span class=\"keyword\">this</span>.errorMessage = &lt;<span class=\"built_in\">any</span>&gt;error);</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>页面如下：<br><img src=\"http://o905ne85q.bkt.clouddn.com/E597.tmp.png\" alt=\"image\"></p>\n<h3 id=\"倒退为承诺-Promise\"><a href=\"#倒退为承诺-Promise\" class=\"headerlink\" title=\"倒退为承诺(Promise)\"></a>倒退为承诺(Promise)</h3><p>Angular的http客户端API返回的是Observable<response>类型的对象，但我们也可以把它转成Promise。</response></p>\n<p>这很容易，并且在简单的场景中，一个基于承诺(Promise)的版本看起来很像基于可观察对象(Observable)的版本。</p>\n<ul>\n<li>把可观察对象转变成承诺，调用toPromise(success, fail)</li>\n</ul>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.http.get(<span class=\"keyword\">this</span>.dataUrl)</div><div class=\"line\">       .toPromise()</div><div class=\"line\">       .then(<span class=\"keyword\">this</span>.extractData)</div><div class=\"line\">       .catch(<span class=\"keyword\">this</span>.handleError);</div></pre></td></tr></table></figure>\n<ul>\n<li>对调用方组件进行调整，让它期待一个Promise而非Observable，调用这个返回的承诺的then方法，而不再是subscribe</li>\n</ul>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">this</span>.otherService.getDatas().then(</div><div class=\"line\">     datas =&gt; <span class=\"keyword\">this</span>.rxjsDate = datas,</div><div class=\"line\">     error =&gt; <span class=\"keyword\">this</span>.errorMessage = &lt;<span class=\"built_in\">any</span>&gt;error);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"结束语\"><a href=\"#结束语\" class=\"headerlink\" title=\"结束语\"></a>结束语</h2><hr>\n<p>从刚开始接触http服务，到ajax，然后是Promise，如今发现还有个Observable。<br>不得不说，前端发展真的很快呢，不断地幻化，然后大步往前。这种不断自我演进的属性真的捕获了本骚年的心呢。<br><a href=\"https://github.com/godbasin/godbasin.github.io/tree/blog-codes/angular2-notes/8-rxjs-in-angular2\" target=\"_blank\" rel=\"external\">此处查看项目代码（仅包含src部分）</a><br><a href=\"http://oc8qsv1w6.bkt.clouddn.com/8-rxjs-in-angular2/index.html#/other\" target=\"_blank\" rel=\"external\">此处查看页面效果</a></p>\n","excerpt":"<p>最近在学习Angular2作为前端的框架，《Angular2使用笔记》系列用于记录过程中的一些使用和解决方法。<br>本文介绍Observor、Subject相关，以及在Angular2中Http服务以及Observable对象的使用。<br>","more":"</p>\n<h2 id=\"认识Rxjs\"><a href=\"#认识Rxjs\" class=\"headerlink\" title=\"认识Rxjs\"></a>认识Rxjs</h2><hr>\n<p>可能比较多的java小伙伴会比较熟悉吧，rx这个东西。不知不觉前端又把各种精华吸取进来了呢。哈哈。</p>\n<h3 id=\"Rxjs基本概念\"><a href=\"#Rxjs基本概念\" class=\"headerlink\" title=\"Rxjs基本概念\"></a>Rxjs基本概念</h3><ul>\n<li>Observable(可观察对象) : 是一个包含来自未来、可以被使用的值(value)或事件(event)的集合</li>\n<li>Observe(观察者)：是一个知道如何监听、处理来自Obervable的值的函数集合 </li>\n<li>Subscription(订阅)：代表着Observable的执行动作，我们可以使用它来停止Obervable继续执行</li>\n<li>Operators(操作)：一系列可以操作集合的pure function，像是过滤(filter)、转换(map)等等</li>\n<li>Subject：相当于一个事件发射器，是唯一能够向多个Observer广播值(value)的唯一手段</li>\n<li>Schedulers(调度)：是一个中央调度员，帮助我们控制并发，协调计算(setTimeout、requestAnimationFrame等)</li>\n</ul>\n<p>这里我们重点介绍一下Observable和Subject，其他的Observer、Subscription等都相对比较简单。</p>\n<h3 id=\"Observable-可观察对象\"><a href=\"#Observable-可观察对象\" class=\"headerlink\" title=\"Observable(可观察对象)\"></a>Observable(可观察对象)</h3><p>Observable（可观察对象）是基于推送（Push）运行时执行（lazy）的多值集合。</p>\n<ul>\n<li><p>拉取(Pull)和推送(Push)<br>拉取和推送是数据生产者和数据消费者之间通信的两种不同机制。</p>\n<ul>\n<li>拉取：在拉取系统中，总是由消费者决定何时从生产者那里获得数据。生产者对数据传递给消费者的时间毫无感知（被动的生产者，主动的消费者）</li>\n<li>推送：在推送系统中生产者决定何时向消费者传递数据，消费者对何时收到数据毫无感知（被动的消费者）</li>\n</ul>\n</li>\n<li><p>js中的Promise和Observable</p>\n<ul>\n<li>现代JavaScript中Promise是典型的推送系统。作为数据生产者的Promise通过resolve()向数据消费者——回调函数传递数据：与函数不同，Promise决定向回调函数推送值的时间</li>\n<li>RxJS在JavaScript中引入了Observable(可观察对象)这个新的推送系统。Observable是多数据值的生产者，向Observer(被动的消费者)推送数据</li>\n</ul>\n</li>\n<li><p>Observable与函数、promsise</p>\n<ul>\n<li>函数是当调用才同步计算，并最终只返回一个值的</li>\n<li>promise是会或者不会返回一个值</li>\n<li>Observable是当调用才同步或者异步地计算，并可能产生0到无穷多个值的</li>\n</ul>\n</li>\n<li><p>Observable是函数概念的拓展</p>\n<ul>\n<li>Observable就像一个没有参数的函数，并不断生成一些值供我们使用，因此它也像是一个事件发射机(EventEmitters)</li>\n<li>在Observable中subscribe就像call一个函数，你订阅它，它才会被’启动’。同一个Observable对于不同的subscribe，是不会共享结果的(通常情况下这样子的，但可以通过调用api来共享)</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"Observable四大核心\"><a href=\"#Observable四大核心\" class=\"headerlink\" title=\"Observable四大核心\"></a>Observable四大核心</h3><ul>\n<li>创建<ul>\n<li>Rx.Observable.create是Observable构造函数的别名，接受一个参数：subscribe函数</li>\n<li>除了使用create创建Observable，我们通常还使用创建操作符, 如of，from，interval,等来创建Observable</li>\n</ul>\n</li>\n<li>订阅<ul>\n<li>observable.subscribe和Observable.create(function subscribe(observer) {…})中的subscribe不是同一个对象，但在工程中可以在概念上视两者为等价物</li>\n<li>调用subscribe的观察者并不会共享同一个Observable</li>\n<li>订阅机制与处理事件的addEventListener/removeEventListenerAPI完全不同。通过observable.subscribe，观察者并不需要在Observable中进行注册，Observable也不需要维护订阅者的列表</li>\n<li>订阅后便进入了Observable的执行阶段，在执行阶段值和事件将会被传递给观察者供其消费</li>\n</ul>\n</li>\n<li>执行<ul>\n<li>只有在被订阅之后Observable才会执行，执行的逻辑在Observable.create(function subscribe(observer){…})中描述，执行后将会在特定时间段内，同步或者异步地成产多个数据值</li>\n<li>Observable在执行过程中，可以推送三种类型的值：<ul>\n<li>“Next” 通知： 实际产生的数据，包括数字、字符串、对象等</li>\n<li>“Error” 通知：一个JavaScript错误或者异常</li>\n<li>“Complete” 通知：一个不带有值的事件</li>\n</ul>\n</li>\n<li>在Observable的执行过程中，0个或者多个“Next”通知会被推送</li>\n<li>在错误或者完成通知被推送后，Observable不会再推送任何其他通知</li>\n</ul>\n</li>\n<li>终止<ul>\n<li>Observable的执行可能是无限的，作为观察者需要主动中断执行：我们需要特定的API去终止执行过程</li>\n<li>因为特定的观察者都有特定的执行过程，一旦观察者获得想要的数据后就需要终止执行过程以免带来计算时对内存资源的浪费</li>\n<li>在observable.subscribe被调用时，观察者会与其执行作用域绑定，同时返回一个Subscription类型的对象，通过调用subscription.unsubscribe()你可以终止执行过程</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h3><p>对于Observable和Subject的理解很多时候我也是从网上读到的呢，所以可能本篇博客相对来说粘贴别人的东西会比较多吧。<br><a href=\"https://segmentfault.com/a/1190000005051034\">《RxJs 核心概念之Observable》</a><br><a href=\"https://zhuanlan.zhihu.com/p/20531896\">《不要把Rx用成Promise》</a><br><a href=\"https://github.com/Reactive-Extensions/RxJS/tree/master/doc/api\">RxJS4.0</a></p>\n<h2 id=\"使用Observable\"><a href=\"#使用Observable\" class=\"headerlink\" title=\"使用Observable\"></a>使用Observable</h2><hr>\n<p>这里我们创建一个Other页面组件，用于展示通过Angular的Http服务返回的Observable对象中获取的数据。</p>\n<h3 id=\"创建Other组件\"><a href=\"#创建Other组件\" class=\"headerlink\" title=\"创建Other组件\"></a>创建Other组件</h3><ul>\n<li>在app.routes.ts文件中添加该页面路由</li>\n</ul>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> routes: RouterConfig = [</div><div class=\"line\">  ... <span class=\"comment\">// 其他路由</span></div><div class=\"line\">  &#123; path: <span class=\"string\">'other'</span>,  component: Other &#125;</div><div class=\"line\">];</div></pre></td></tr></table></figure>\n<ul>\n<li>新建other文件夹</li>\n<li>添加组件模板other.template.ts</li>\n</ul>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;!--插入头部组件，注入指令后生效--&gt;</div><div class=\"line\">&lt;my-header&gt;&lt;/my-header&gt;</div><div class=\"line\">&lt;div class=\"container\"&gt;</div><div class=\"line\">    &lt;h3&gt;RxJS相关&lt;/h3&gt;</div><div class=\"line\">    &lt;table class=\"table\"&gt;</div><div class=\"line\">        &lt;tbody&gt;</div><div class=\"line\">            &lt;tr *ngFor=\"let item of rxjsDate\"&gt;</div><div class=\"line\">                &lt;td&gt;</div><div class=\"line\">                    &lt;h4&gt;&#123;&#123; item.name &#125;&#125; : &lt;/h4&gt;</div><div class=\"line\">                    &lt;h5&gt;&#123;&#123; item.content &#125;&#125;&lt;/h5&gt;</div><div class=\"line\">                &lt;/td&gt;</div><div class=\"line\">            &lt;/tr&gt;</div><div class=\"line\">        &lt;/tbody&gt;</div><div class=\"line\">    &lt;/table&gt;</div><div class=\"line\">&lt;/div&gt;</div></pre></td></tr></table></figure>\n<ul>\n<li>other文件夹下index.ts中输出组件</li>\n</ul>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> &#123; Component &#125; from <span class=\"string\">'@angular/core'</span>;</div><div class=\"line\"><span class=\"comment\">// 添加Header组件，默认从header文件夹的index.ts中获取</span></div><div class=\"line\"><span class=\"keyword\">import</span> &#123; Header &#125; from <span class=\"string\">'../header'</span>;</div><div class=\"line\"></div><div class=\"line\">@Component(&#123;</div><div class=\"line\">  selector: <span class=\"string\">'other'</span>, <span class=\"comment\">// 设置模板元素</span></div><div class=\"line\">  templateUrl: <span class=\"string\">'./other.template.html'</span>, <span class=\"comment\">// 模板文件引入</span></div><div class=\"line\">  directives: [Header] <span class=\"comment\">// 注入指令</span></div><div class=\"line\">&#125;)</div><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> Other &#123;</div><div class=\"line\">  <span class=\"comment\">// 定义并初始化数据</span></div><div class=\"line\">  rxjsDate: <span class=\"built_in\">Array</span>&lt;<span class=\"built_in\">any</span>&gt; = [];</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"创建获取数据的Http服务\"><a href=\"#创建获取数据的Http服务\" class=\"headerlink\" title=\"创建获取数据的Http服务\"></a>创建获取数据的Http服务</h3><p>这里我们把该服务写在other.service.ts文件中。<br><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 获取Injectable服务</span></div><div class=\"line\"><span class=\"keyword\">import</span> &#123; Injectable &#125; from <span class=\"string\">'@angular/core'</span>;</div><div class=\"line\"><span class=\"comment\">// 获取Http服务</span></div><div class=\"line\"><span class=\"keyword\">import</span> &#123; Http, Response &#125; from <span class=\"string\">'@angular/http'</span>;</div><div class=\"line\"><span class=\"comment\">// 获取Observable服务</span></div><div class=\"line\"><span class=\"keyword\">import</span> &#123; Observable &#125; from <span class=\"string\">'rxjs/Observable'</span>;</div><div class=\"line\"><span class=\"comment\">// 获取rxjs相关操作服务（map等）,后面我们会提到</span></div><div class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">'../rxjs-operators'</span>;</div><div class=\"line\"></div><div class=\"line\">@Injectable()</div><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> OtherService &#123;</div><div class=\"line\">  <span class=\"comment\">// 注入Http服务</span></div><div class=\"line\">  <span class=\"keyword\">constructor</span>(public http: Http) &#123;&#125;</div><div class=\"line\">  <span class=\"comment\">// 设置获取数据的地址，这里我们使用本地的json文件模拟</span></div><div class=\"line\">  <span class=\"keyword\">private</span> dataUrl: <span class=\"built_in\">string</span> = <span class=\"string\">'app/info.json'</span>;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">// 定义方法，用于获取Observable服务</span></div><div class=\"line\">  getDatas(): Observable&lt;<span class=\"built_in\">any</span>&gt; &#123;</div><div class=\"line\">    <span class=\"comment\">// 使用angular的http服务获取数据，默认返回observable</span></div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.http.get(<span class=\"keyword\">this</span>.dataUrl)</div><div class=\"line\">      <span class=\"comment\">// 响应数据是JSON字符串格式的。 我们必须把这个字符串解析成JavaScript对象</span></div><div class=\"line\">      .map(res =&gt; res.json().data)</div><div class=\"line\">      <span class=\"comment\">// 异常的捕获并进行处理</span></div><div class=\"line\">      .catch(<span class=\"keyword\">this</span>.handleError);</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">// 定义私有方法来处理异常</span></div><div class=\"line\">  <span class=\"keyword\">private</span> handleError(error: <span class=\"built_in\">any</span>) &#123;</div><div class=\"line\">    <span class=\"comment\">// 我们的服务处理器(handleError)把响应对象记录到控制台中</span></div><div class=\"line\">    <span class=\"comment\">// 把错误转换成对用户友好的消息，并且通过Observable.throw来</span></div><div class=\"line\">    <span class=\"comment\">// 把这个消息放进一个新的、用于表示“失败”的可观察对象</span></div><div class=\"line\">    <span class=\"keyword\">let</span> errMsg = (error.message) ? error.message :</div><div class=\"line\">      error.status ? <span class=\"string\">`<span class=\"subst\">$&#123;error.status&#125;</span> - <span class=\"subst\">$&#123;error.statusText&#125;</span>`</span> : <span class=\"string\">'Server error'</span>;</div><div class=\"line\">    <span class=\"built_in\">console</span>.error(errMsg); <span class=\"comment\">// 输出异常信息</span></div><div class=\"line\">    <span class=\"keyword\">return</span> Observable.throw(errMsg);</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<ul>\n<li>关于rxjs相关操作符<br>RxJS(“Reactive Extensions”的缩写)是一个被Angular认可的第三方库，它实现了异步可观察对象(asynchronous observable)模式。</li>\n</ul>\n<p>Angular在rxjs/Observable模块中导出了一个精简版的Observable 类，这个版本缺少很多操作符。</p>\n<p>我们将一个一个的导入Observable的操作符和静态类方法，直到我们得到了一个精确符合我们需求的自定义Observable实现。 我们将把这些import语句放进一个app/rxjs-operators.ts文件里。<br><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// import 'rxjs/Rx'; </span></div><div class=\"line\"><span class=\"comment\">// adds ALL RxJS statics &amp; operators to Observable</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// See node_module/rxjs/Rxjs.js</span></div><div class=\"line\"><span class=\"comment\">// Import just the rxjs statics and operators we need for THIS app.</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// Statics</span></div><div class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">'rxjs/add/observable/throw'</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// Operators</span></div><div class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">'rxjs/add/operator/catch'</span>;</div><div class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">'rxjs/add/operator/debounceTime'</span>;</div><div class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">'rxjs/add/operator/distinctUntilChanged'</span>;</div><div class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">'rxjs/add/operator/map'</span>;</div><div class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">'rxjs/add/operator/switchMap'</span>;</div><div class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">'rxjs/add/operator/toPromise'</span>;</div></pre></td></tr></table></figure></p>\n<h3 id=\"在Other组件中注入相关服务并使用\"><a href=\"#在Other组件中注入相关服务并使用\" class=\"headerlink\" title=\"在Other组件中注入相关服务并使用\"></a>在Other组件中注入相关服务并使用</h3><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div></pre></td><td class=\"code\"><pre><div class=\"line\">... <span class=\"comment\">// 添加其他服务</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 添加OtherService服务，用来获取数据</span></div><div class=\"line\"><span class=\"keyword\">import</span> &#123; OtherService &#125; from <span class=\"string\">'./other.service'</span>;</div><div class=\"line\"></div><div class=\"line\">@Component(&#123;</div><div class=\"line\">  ... <span class=\"comment\">// 其他元数据</span></div><div class=\"line\">  providers:[OtherService] <span class=\"comment\">// 实例化服务</span></div><div class=\"line\">&#125;)</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> Other &#123;</div><div class=\"line\">  ...</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">// 注入服务</span></div><div class=\"line\">  <span class=\"keyword\">constructor</span>(private otherService: OtherService) &#123;&#125;</div><div class=\"line\"></div><div class=\"line\">  ngOnInit() &#123;</div><div class=\"line\">    <span class=\"comment\">// 获得Obervable对象并进行订阅</span></div><div class=\"line\">    <span class=\"keyword\">this</span>.otherService.getDatas().subscribe(</div><div class=\"line\">      <span class=\"comment\">// 获取数据并保存在this.rxjsDate中</span></div><div class=\"line\">      datas =&gt; <span class=\"keyword\">this</span>.rxjsDate = datas,</div><div class=\"line\">      <span class=\"comment\">// 获取错误信息并保存在this.errorMessage中</span></div><div class=\"line\">      error =&gt; <span class=\"keyword\">this</span>.errorMessage = &lt;<span class=\"built_in\">any</span>&gt;error);</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>页面如下：<br><img src=\"http://o905ne85q.bkt.clouddn.com/E597.tmp.png\" alt=\"image\"></p>\n<h3 id=\"倒退为承诺-Promise\"><a href=\"#倒退为承诺-Promise\" class=\"headerlink\" title=\"倒退为承诺(Promise)\"></a>倒退为承诺(Promise)</h3><p>Angular的http客户端API返回的是Observable<Response>类型的对象，但我们也可以把它转成Promise。</p>\n<p>这很容易，并且在简单的场景中，一个基于承诺(Promise)的版本看起来很像基于可观察对象(Observable)的版本。</p>\n<ul>\n<li>把可观察对象转变成承诺，调用toPromise(success, fail)</li>\n</ul>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.http.get(<span class=\"keyword\">this</span>.dataUrl)</div><div class=\"line\">       .toPromise()</div><div class=\"line\">       .then(<span class=\"keyword\">this</span>.extractData)</div><div class=\"line\">       .catch(<span class=\"keyword\">this</span>.handleError);</div></pre></td></tr></table></figure>\n<ul>\n<li>对调用方组件进行调整，让它期待一个Promise而非Observable，调用这个返回的承诺的then方法，而不再是subscribe</li>\n</ul>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">this</span>.otherService.getDatas().then(</div><div class=\"line\">     datas =&gt; <span class=\"keyword\">this</span>.rxjsDate = datas,</div><div class=\"line\">     error =&gt; <span class=\"keyword\">this</span>.errorMessage = &lt;<span class=\"built_in\">any</span>&gt;error);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"结束语\"><a href=\"#结束语\" class=\"headerlink\" title=\"结束语\"></a>结束语</h2><hr>\n<p>从刚开始接触http服务，到ajax，然后是Promise，如今发现还有个Observable。<br>不得不说，前端发展真的很快呢，不断地幻化，然后大步往前。这种不断自我演进的属性真的捕获了本骚年的心呢。<br><a href=\"https://github.com/godbasin/godbasin.github.io/tree/blog-codes/angular2-notes/8-rxjs-in-angular2\">此处查看项目代码（仅包含src部分）</a><br><a href=\"http://oc8qsv1w6.bkt.clouddn.com/8-rxjs-in-angular2/index.html#/other\">此处查看页面效果</a></p>"},{"title":"Angular2使用笔记5--动画和制作index页面","date":"2016-10-29T01:51:17.000Z","_content":"最近在学习Angular2作为前端的框架，《Angular2使用笔记》系列用于记录过程中的一些使用和解决方法。\n本文简单介绍angular2的动画效果，以及记录制作首页的过程。\n<!--more-->\n## angular2动画\n-----\n### 关于Angular2动画\n- 使用动画使得用户界面能在不同的状态之间更平滑的转场\n- Angular2的动画系统赋予了制作各种动画效果的能力，以构建出与原生CSS动画性能相同的动画\n- Angular2动画是基于标准的Web动画API(Web Animations API)构建的，它们在支持此API的浏览器中会用原生方式工作。至于其它浏览器，就需要一个填充库(polyfill)\n\n### 状态与转场\nAngular2动画是由状态和状态之间的转场效果所定义的。\n- 状态\n  - 动画状态是一个由程序代码中定义的字符串值\n  - 状态的来源可以是简单的对象属性，也可以是由方法计算出来的值。能从组件模板中读取它\n  - state具体定义了每个状态的最终样式\n    - 一旦元素转场到那个状态，样式就会被应用到此元素上\n    - 当留在此状态时，样式也会一直保持着\n- 转场\n  - 转场控制一条在一组样式和下一组样式之间切换的时间线\n  - 如果多个转场都有同样的时间线配置，就可以把它们合并进同一个transition定义中\n  - 对同一个转场的两个方向都使用相同的时间线，可以使用<=>简写语法\n  - *(通配符)状态：匹配任何动画状态，可用于定义那些不需要管当前处于什么状态的样式及转场\n  - void状态：表示元素没有被附加到视图，在定义“进场”和“离场”的动画时非常有用\n\n### 可动的(Animatable)属性与单位\n- 可以参与动画的属性\n  - 位置(position)\n  - 大小(size)\n  - 变换(transform)\n  - 颜色(color)\n  - 边框(border)\n尺寸类属性(如位置、大小、边框等)包括一个数字值和一个用来定义长度单位的后缀。\n\n- 动画时间线\n  - 持续时间(duration)：控制动画从开始到结束要花多长时间\n  - 延迟(delay)：控制在动画已经触发但尚未真正开始转场之前要等待多久\n  - 缓动(easing)函数：用于控制动画在运行期间如何加速和减速\n\n- 基于关键帧(Keyframes)的多阶段动画\n  - 每个关键帧都可以被指定一个偏移量，用来定义该关键帧将被用在动画期间的哪个时间点\n  - 偏移量是一个介于0(表示动画起点)和1(表示动画终点)之间的数组\n\n- 并行动画组(Group)\n  - 为同时发生的几个动画配置不同的时间线\n\n## 制作index页面\n-----\n页面结构如下：\n![image](http://o905ne85q.bkt.clouddn.com/F3A2.tmp.png)\n\n### 添加index组件相关文件\n- 添加index文件夹，用于管理Index组件的相关文件\nIndex组件文件如下：\n``` cmd\nindex/\n ├──index.ts                   * 导出该目录下组件\n ├──index.component.ts         * 定义并导出Index组件\n ├──index.style.css            * Index组件的css样式\n └──index.template.html        * Index组件的html模板\n```\n\n### 定义Index组件\n这里使用了前面章节创建的头部组件。前面我们将该组件放在主页面组件app.component.js中，这里我们将其移动到index页面组件中。\n在index.component.js中：\n``` typescript\nimport { Component, trigger, state, style, transition, animate } from '@angular/core';\n\n// 添加Header组件，默认从header文件夹的index.ts中获取\nimport { Header } from '../header';\n\n@Component({\n  selector: 'index', // 设置模板元素\n  styleUrls: ['./index.style.css'], // 样式文件引入\n  templateUrl: './index.template.html', // 模板文件引入\n  directives: [Header], // 注入指令\n  animations: [\n    // 设置动画，@menuState属性动画效果\n    trigger('menuState', [ \n      state('false', style({ // menu.show为false时状态\n        height: '0px',\n        padding: '0px',\n        opacity: '0'\n      })),\n      // 转场的动画效果\n      transition('* => *', animate('100ms ease-in'))\n    ])\n  ]\n})\nexport class Index {\n  // 定义并初始化菜单显示状态\n  loading: string = 'init';\n  asidemenus: Array<any>;\n\n  // 更新loading\n  changeState (view) {\n    this.loading = view;\n  }\n\n  // 显示隐藏子菜单效果并更新loading\n  toggleContent (index) {\n    this.asidemenus[index].show = !this.asidemenus[index].show;\n    this.changeState(this.asidemenus[index].click);\n  }\n\n  ngOnInit () {\n    // 设定menu的初始值\n    this.asidemenus = [{\n        title: '基本资料', // title用于储存该菜单显示名称\n        click: 'init', // click用于储存该菜单对应点击时loading的状态值\n        show: true, // show用于保存菜单是否隐藏的状态\n        menus: [{\n          text: '名字', // title用于储存该菜单显示名称\n          state: 'active', // state用于储存该菜单状态\n          click: 'name' // click用于储存该菜单对应点击时loading的状态值\n        }, {\n          text: '邮箱',\n          state: 'active',\n          click: 'email'\n        }, {\n          text: 'github',\n          state: 'active',\n          click: 'github'\n        }]\n      }, {\n        title: '设置头像',\n        click: 'sethead',\n        show: true\n      }, {\n        title: '修改资料',\n        click: 'setinfo',\n        show: true\n      }, {\n        title: '其他',\n        click: 'other',\n        show: true\n      }];\n  }\n}\n```\n- 添加组件样式index.style.css，这里就不展示出来了\n- index文件夹下index.ts中输出组件\n``` typescript\nexport * from './index.component';\n```\n\n### 添加组件模板\nindex.template.html文件，如下\n``` html\n<!--插入头部组件，注入指令后生效-->\n<my-header></my-header>\n<div class=\"container-fluid row\">\n    <aside class=\"col-md-2  col-md-offset-1\" id=\"according\">\n        <div class=\"panel-group\" class=\"according\" role=\"tablist\" aria-multiselectable=\"true\">\n            <!--\n                *ng-for 中的*是Angular2中template语法的缩写，如果是全部的话，应该为\n                <div ng-for #menu=\"$implicit\" [ng-for-of]=\"asidemenus\" #i=\"index\"></div>\n            -->\n            <div class=\"panel panel-default list-group\" *ngFor=\"#menu of asidemenus; #i = index\">\n                <div class=\"panel-heading\" role=\"tab\">\n                    <ul class=\"panel-title \">\n                        <li data-toggle=\"collapse\" (click)=\"toggleContent(i)\">\n                            {{ menu.title }}\n                        </li>\n                    </ul>\n                </div>\n                <div class=\"panel-collapse\">\n                    <ul class=\"list-group\">\n                        <!--@menuState属性动画效果-->\n                        <li *ngFor=\"#item of menu.menus; #j = index;\" @menuState=\"menu.show\" class=\"list-group-item\" role=\"button\" (click)=\"changeState(item.click)\">{{ item.text }}</li>\n                    </ul>\n                </div>\n            </div>\n        </div>\n    </aside>\n    <article class=\"col-md-7\">\n        <section class=\"index-content\">\n            <p [hidden]=\"!(loading === 'init' || loading === 'name')\">昵称：被删</p>\n            <p [hidden]=\"!(loading === 'init' || loading === 'email')\">邮箱：wangbeishan@163.com</p>\n            <p [hidden]=\"!(loading === 'init' || loading === 'github')\">github: <a href=\"https://github.com/godbasin\">github.com/godbasin</a></p>\n            <div [hidden]=\"!(loading === 'sethead')\">这里是设置头像页面</div>\n            <div [hidden]=\"!(loading === 'setinfo')\">这里是修改资料页面</div>\n            <div [hidden]=\"!(loading === 'other')\">这里是其他页面</div>\n        </section>\n    </article>\n</div>\n```\n\n### 添加Index路由\n我们在app.routes.ts中添加index页面的路由。\n- 引入Index组件\n这里因为该文件夹下也有一个index.ts的文件，所以直接使用\"./index\"路径的话会有问题，所以我们写到具体的路径。\n``` typescript\n// 当然最好大家不要使用这种易冲突的名字\nimport { Index } from './index/index';\n```\n- 添加路由\n``` typescript\nexport const routes: RouterConfig = [\n  { path: 'login',  component: Login },\n  { path: 'index',  component: Index },\n  { path: '**',    component: Login }\n];\n```\n\n### 添加样式\n样式包括一些组件的样式，还有过渡css样式，这里就不列出来了。\n\n## 结束语\n-----\n不得不说，angular2中的动画效果跟Vue过渡也是很相像的呢。这些贴心的设定，很多时候都能帮我们减轻不少的负担呢。\n[此处查看项目代码（仅包含src部分）](https://github.com/godbasin/godbasin.github.io/tree/blog-codes/angular2-notes/5-animation-and-create-index)\n[此处查看页面效果](http://oc8qsv1w6.bkt.clouddn.com/5-animation-and-create-index/index.html#/index)","source":"_posts/angular2-notes-5-animation-and-create-index.md","raw":"---\ntitle: Angular2使用笔记5--动画和制作index页面\ndate: 2016-10-29 09:51:17\ncategories: angular2火锅\ntags: 笔记\n---\n最近在学习Angular2作为前端的框架，《Angular2使用笔记》系列用于记录过程中的一些使用和解决方法。\n本文简单介绍angular2的动画效果，以及记录制作首页的过程。\n<!--more-->\n## angular2动画\n-----\n### 关于Angular2动画\n- 使用动画使得用户界面能在不同的状态之间更平滑的转场\n- Angular2的动画系统赋予了制作各种动画效果的能力，以构建出与原生CSS动画性能相同的动画\n- Angular2动画是基于标准的Web动画API(Web Animations API)构建的，它们在支持此API的浏览器中会用原生方式工作。至于其它浏览器，就需要一个填充库(polyfill)\n\n### 状态与转场\nAngular2动画是由状态和状态之间的转场效果所定义的。\n- 状态\n  - 动画状态是一个由程序代码中定义的字符串值\n  - 状态的来源可以是简单的对象属性，也可以是由方法计算出来的值。能从组件模板中读取它\n  - state具体定义了每个状态的最终样式\n    - 一旦元素转场到那个状态，样式就会被应用到此元素上\n    - 当留在此状态时，样式也会一直保持着\n- 转场\n  - 转场控制一条在一组样式和下一组样式之间切换的时间线\n  - 如果多个转场都有同样的时间线配置，就可以把它们合并进同一个transition定义中\n  - 对同一个转场的两个方向都使用相同的时间线，可以使用<=>简写语法\n  - *(通配符)状态：匹配任何动画状态，可用于定义那些不需要管当前处于什么状态的样式及转场\n  - void状态：表示元素没有被附加到视图，在定义“进场”和“离场”的动画时非常有用\n\n### 可动的(Animatable)属性与单位\n- 可以参与动画的属性\n  - 位置(position)\n  - 大小(size)\n  - 变换(transform)\n  - 颜色(color)\n  - 边框(border)\n尺寸类属性(如位置、大小、边框等)包括一个数字值和一个用来定义长度单位的后缀。\n\n- 动画时间线\n  - 持续时间(duration)：控制动画从开始到结束要花多长时间\n  - 延迟(delay)：控制在动画已经触发但尚未真正开始转场之前要等待多久\n  - 缓动(easing)函数：用于控制动画在运行期间如何加速和减速\n\n- 基于关键帧(Keyframes)的多阶段动画\n  - 每个关键帧都可以被指定一个偏移量，用来定义该关键帧将被用在动画期间的哪个时间点\n  - 偏移量是一个介于0(表示动画起点)和1(表示动画终点)之间的数组\n\n- 并行动画组(Group)\n  - 为同时发生的几个动画配置不同的时间线\n\n## 制作index页面\n-----\n页面结构如下：\n![image](http://o905ne85q.bkt.clouddn.com/F3A2.tmp.png)\n\n### 添加index组件相关文件\n- 添加index文件夹，用于管理Index组件的相关文件\nIndex组件文件如下：\n``` cmd\nindex/\n ├──index.ts                   * 导出该目录下组件\n ├──index.component.ts         * 定义并导出Index组件\n ├──index.style.css            * Index组件的css样式\n └──index.template.html        * Index组件的html模板\n```\n\n### 定义Index组件\n这里使用了前面章节创建的头部组件。前面我们将该组件放在主页面组件app.component.js中，这里我们将其移动到index页面组件中。\n在index.component.js中：\n``` typescript\nimport { Component, trigger, state, style, transition, animate } from '@angular/core';\n\n// 添加Header组件，默认从header文件夹的index.ts中获取\nimport { Header } from '../header';\n\n@Component({\n  selector: 'index', // 设置模板元素\n  styleUrls: ['./index.style.css'], // 样式文件引入\n  templateUrl: './index.template.html', // 模板文件引入\n  directives: [Header], // 注入指令\n  animations: [\n    // 设置动画，@menuState属性动画效果\n    trigger('menuState', [ \n      state('false', style({ // menu.show为false时状态\n        height: '0px',\n        padding: '0px',\n        opacity: '0'\n      })),\n      // 转场的动画效果\n      transition('* => *', animate('100ms ease-in'))\n    ])\n  ]\n})\nexport class Index {\n  // 定义并初始化菜单显示状态\n  loading: string = 'init';\n  asidemenus: Array<any>;\n\n  // 更新loading\n  changeState (view) {\n    this.loading = view;\n  }\n\n  // 显示隐藏子菜单效果并更新loading\n  toggleContent (index) {\n    this.asidemenus[index].show = !this.asidemenus[index].show;\n    this.changeState(this.asidemenus[index].click);\n  }\n\n  ngOnInit () {\n    // 设定menu的初始值\n    this.asidemenus = [{\n        title: '基本资料', // title用于储存该菜单显示名称\n        click: 'init', // click用于储存该菜单对应点击时loading的状态值\n        show: true, // show用于保存菜单是否隐藏的状态\n        menus: [{\n          text: '名字', // title用于储存该菜单显示名称\n          state: 'active', // state用于储存该菜单状态\n          click: 'name' // click用于储存该菜单对应点击时loading的状态值\n        }, {\n          text: '邮箱',\n          state: 'active',\n          click: 'email'\n        }, {\n          text: 'github',\n          state: 'active',\n          click: 'github'\n        }]\n      }, {\n        title: '设置头像',\n        click: 'sethead',\n        show: true\n      }, {\n        title: '修改资料',\n        click: 'setinfo',\n        show: true\n      }, {\n        title: '其他',\n        click: 'other',\n        show: true\n      }];\n  }\n}\n```\n- 添加组件样式index.style.css，这里就不展示出来了\n- index文件夹下index.ts中输出组件\n``` typescript\nexport * from './index.component';\n```\n\n### 添加组件模板\nindex.template.html文件，如下\n``` html\n<!--插入头部组件，注入指令后生效-->\n<my-header></my-header>\n<div class=\"container-fluid row\">\n    <aside class=\"col-md-2  col-md-offset-1\" id=\"according\">\n        <div class=\"panel-group\" class=\"according\" role=\"tablist\" aria-multiselectable=\"true\">\n            <!--\n                *ng-for 中的*是Angular2中template语法的缩写，如果是全部的话，应该为\n                <div ng-for #menu=\"$implicit\" [ng-for-of]=\"asidemenus\" #i=\"index\"></div>\n            -->\n            <div class=\"panel panel-default list-group\" *ngFor=\"#menu of asidemenus; #i = index\">\n                <div class=\"panel-heading\" role=\"tab\">\n                    <ul class=\"panel-title \">\n                        <li data-toggle=\"collapse\" (click)=\"toggleContent(i)\">\n                            {{ menu.title }}\n                        </li>\n                    </ul>\n                </div>\n                <div class=\"panel-collapse\">\n                    <ul class=\"list-group\">\n                        <!--@menuState属性动画效果-->\n                        <li *ngFor=\"#item of menu.menus; #j = index;\" @menuState=\"menu.show\" class=\"list-group-item\" role=\"button\" (click)=\"changeState(item.click)\">{{ item.text }}</li>\n                    </ul>\n                </div>\n            </div>\n        </div>\n    </aside>\n    <article class=\"col-md-7\">\n        <section class=\"index-content\">\n            <p [hidden]=\"!(loading === 'init' || loading === 'name')\">昵称：被删</p>\n            <p [hidden]=\"!(loading === 'init' || loading === 'email')\">邮箱：wangbeishan@163.com</p>\n            <p [hidden]=\"!(loading === 'init' || loading === 'github')\">github: <a href=\"https://github.com/godbasin\">github.com/godbasin</a></p>\n            <div [hidden]=\"!(loading === 'sethead')\">这里是设置头像页面</div>\n            <div [hidden]=\"!(loading === 'setinfo')\">这里是修改资料页面</div>\n            <div [hidden]=\"!(loading === 'other')\">这里是其他页面</div>\n        </section>\n    </article>\n</div>\n```\n\n### 添加Index路由\n我们在app.routes.ts中添加index页面的路由。\n- 引入Index组件\n这里因为该文件夹下也有一个index.ts的文件，所以直接使用\"./index\"路径的话会有问题，所以我们写到具体的路径。\n``` typescript\n// 当然最好大家不要使用这种易冲突的名字\nimport { Index } from './index/index';\n```\n- 添加路由\n``` typescript\nexport const routes: RouterConfig = [\n  { path: 'login',  component: Login },\n  { path: 'index',  component: Index },\n  { path: '**',    component: Login }\n];\n```\n\n### 添加样式\n样式包括一些组件的样式，还有过渡css样式，这里就不列出来了。\n\n## 结束语\n-----\n不得不说，angular2中的动画效果跟Vue过渡也是很相像的呢。这些贴心的设定，很多时候都能帮我们减轻不少的负担呢。\n[此处查看项目代码（仅包含src部分）](https://github.com/godbasin/godbasin.github.io/tree/blog-codes/angular2-notes/5-animation-and-create-index)\n[此处查看页面效果](http://oc8qsv1w6.bkt.clouddn.com/5-animation-and-create-index/index.html#/index)","slug":"angular2-notes-5-animation-and-create-index","published":1,"updated":"2016-10-29T17:40:13.120Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cix45hufv0024xotuocegl0dl","content":"<p>最近在学习Angular2作为前端的框架，《Angular2使用笔记》系列用于记录过程中的一些使用和解决方法。<br>本文简单介绍angular2的动画效果，以及记录制作首页的过程。<br><a id=\"more\"></a></p>\n<h2 id=\"angular2动画\"><a href=\"#angular2动画\" class=\"headerlink\" title=\"angular2动画\"></a>angular2动画</h2><hr>\n<h3 id=\"关于Angular2动画\"><a href=\"#关于Angular2动画\" class=\"headerlink\" title=\"关于Angular2动画\"></a>关于Angular2动画</h3><ul>\n<li>使用动画使得用户界面能在不同的状态之间更平滑的转场</li>\n<li>Angular2的动画系统赋予了制作各种动画效果的能力，以构建出与原生CSS动画性能相同的动画</li>\n<li>Angular2动画是基于标准的Web动画API(Web Animations API)构建的，它们在支持此API的浏览器中会用原生方式工作。至于其它浏览器，就需要一个填充库(polyfill)</li>\n</ul>\n<h3 id=\"状态与转场\"><a href=\"#状态与转场\" class=\"headerlink\" title=\"状态与转场\"></a>状态与转场</h3><p>Angular2动画是由状态和状态之间的转场效果所定义的。</p>\n<ul>\n<li>状态<ul>\n<li>动画状态是一个由程序代码中定义的字符串值</li>\n<li>状态的来源可以是简单的对象属性，也可以是由方法计算出来的值。能从组件模板中读取它</li>\n<li>state具体定义了每个状态的最终样式<ul>\n<li>一旦元素转场到那个状态，样式就会被应用到此元素上</li>\n<li>当留在此状态时，样式也会一直保持着</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>转场<ul>\n<li>转场控制一条在一组样式和下一组样式之间切换的时间线</li>\n<li>如果多个转场都有同样的时间线配置，就可以把它们合并进同一个transition定义中</li>\n<li>对同一个转场的两个方向都使用相同的时间线，可以使用&lt;=&gt;简写语法</li>\n<li>*(通配符)状态：匹配任何动画状态，可用于定义那些不需要管当前处于什么状态的样式及转场</li>\n<li>void状态：表示元素没有被附加到视图，在定义“进场”和“离场”的动画时非常有用</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"可动的-Animatable-属性与单位\"><a href=\"#可动的-Animatable-属性与单位\" class=\"headerlink\" title=\"可动的(Animatable)属性与单位\"></a>可动的(Animatable)属性与单位</h3><ul>\n<li><p>可以参与动画的属性</p>\n<ul>\n<li>位置(position)</li>\n<li>大小(size)</li>\n<li>变换(transform)</li>\n<li>颜色(color)</li>\n<li>边框(border)<br>尺寸类属性(如位置、大小、边框等)包括一个数字值和一个用来定义长度单位的后缀。</li>\n</ul>\n</li>\n<li><p>动画时间线</p>\n<ul>\n<li>持续时间(duration)：控制动画从开始到结束要花多长时间</li>\n<li>延迟(delay)：控制在动画已经触发但尚未真正开始转场之前要等待多久</li>\n<li>缓动(easing)函数：用于控制动画在运行期间如何加速和减速</li>\n</ul>\n</li>\n<li><p>基于关键帧(Keyframes)的多阶段动画</p>\n<ul>\n<li>每个关键帧都可以被指定一个偏移量，用来定义该关键帧将被用在动画期间的哪个时间点</li>\n<li>偏移量是一个介于0(表示动画起点)和1(表示动画终点)之间的数组</li>\n</ul>\n</li>\n<li><p>并行动画组(Group)</p>\n<ul>\n<li>为同时发生的几个动画配置不同的时间线</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"制作index页面\"><a href=\"#制作index页面\" class=\"headerlink\" title=\"制作index页面\"></a>制作index页面</h2><hr>\n<p>页面结构如下：<br><img src=\"http://o905ne85q.bkt.clouddn.com/F3A2.tmp.png\" alt=\"image\"></p>\n<h3 id=\"添加index组件相关文件\"><a href=\"#添加index组件相关文件\" class=\"headerlink\" title=\"添加index组件相关文件\"></a>添加index组件相关文件</h3><ul>\n<li>添加index文件夹，用于管理Index组件的相关文件<br>Index组件文件如下：<figure class=\"highlight cmd\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">index/</div><div class=\"line\"> ├──index.ts                   * 导出该目录下组件</div><div class=\"line\"> ├──index.component.ts         * 定义并导出Index组件</div><div class=\"line\"> ├──index.style.css            * Index组件的css样式</div><div class=\"line\"> └──index.template.html        * Index组件的html模板</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3 id=\"定义Index组件\"><a href=\"#定义Index组件\" class=\"headerlink\" title=\"定义Index组件\"></a>定义Index组件</h3><p>这里使用了前面章节创建的头部组件。前面我们将该组件放在主页面组件app.component.js中，这里我们将其移动到index页面组件中。<br>在index.component.js中：<br><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> &#123; Component, trigger, state, style, transition, animate &#125; from <span class=\"string\">'@angular/core'</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 添加Header组件，默认从header文件夹的index.ts中获取</span></div><div class=\"line\"><span class=\"keyword\">import</span> &#123; Header &#125; from <span class=\"string\">'../header'</span>;</div><div class=\"line\"></div><div class=\"line\">@Component(&#123;</div><div class=\"line\">  selector: <span class=\"string\">'index'</span>, <span class=\"comment\">// 设置模板元素</span></div><div class=\"line\">  styleUrls: [<span class=\"string\">'./index.style.css'</span>], <span class=\"comment\">// 样式文件引入</span></div><div class=\"line\">  templateUrl: <span class=\"string\">'./index.template.html'</span>, <span class=\"comment\">// 模板文件引入</span></div><div class=\"line\">  directives: [Header], <span class=\"comment\">// 注入指令</span></div><div class=\"line\">  animations: [</div><div class=\"line\">    <span class=\"comment\">// 设置动画，@menuState属性动画效果</span></div><div class=\"line\">    trigger(<span class=\"string\">'menuState'</span>, [ </div><div class=\"line\">      state(<span class=\"string\">'false'</span>, style(&#123; <span class=\"comment\">// menu.show为false时状态</span></div><div class=\"line\">        height: <span class=\"string\">'0px'</span>,</div><div class=\"line\">        padding: <span class=\"string\">'0px'</span>,</div><div class=\"line\">        opacity: <span class=\"string\">'0'</span></div><div class=\"line\">      &#125;)),</div><div class=\"line\">      <span class=\"comment\">// 转场的动画效果</span></div><div class=\"line\">      transition(<span class=\"string\">'* =&gt; *'</span>, animate(<span class=\"string\">'100ms ease-in'</span>))</div><div class=\"line\">    ])</div><div class=\"line\">  ]</div><div class=\"line\">&#125;)</div><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> Index &#123;</div><div class=\"line\">  <span class=\"comment\">// 定义并初始化菜单显示状态</span></div><div class=\"line\">  loading: <span class=\"built_in\">string</span> = <span class=\"string\">'init'</span>;</div><div class=\"line\">  asidemenus: <span class=\"built_in\">Array</span>&lt;<span class=\"built_in\">any</span>&gt;;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">// 更新loading</span></div><div class=\"line\">  changeState (view) &#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>.loading = view;</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">// 显示隐藏子菜单效果并更新loading</span></div><div class=\"line\">  toggleContent (index) &#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>.asidemenus[index].show = !<span class=\"keyword\">this</span>.asidemenus[index].show;</div><div class=\"line\">    <span class=\"keyword\">this</span>.changeState(<span class=\"keyword\">this</span>.asidemenus[index].click);</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  ngOnInit () &#123;</div><div class=\"line\">    <span class=\"comment\">// 设定menu的初始值</span></div><div class=\"line\">    <span class=\"keyword\">this</span>.asidemenus = [&#123;</div><div class=\"line\">        title: <span class=\"string\">'基本资料'</span>, <span class=\"comment\">// title用于储存该菜单显示名称</span></div><div class=\"line\">        click: <span class=\"string\">'init'</span>, <span class=\"comment\">// click用于储存该菜单对应点击时loading的状态值</span></div><div class=\"line\">        show: <span class=\"literal\">true</span>, <span class=\"comment\">// show用于保存菜单是否隐藏的状态</span></div><div class=\"line\">        menus: [&#123;</div><div class=\"line\">          text: <span class=\"string\">'名字'</span>, <span class=\"comment\">// title用于储存该菜单显示名称</span></div><div class=\"line\">          state: <span class=\"string\">'active'</span>, <span class=\"comment\">// state用于储存该菜单状态</span></div><div class=\"line\">          click: <span class=\"string\">'name'</span> <span class=\"comment\">// click用于储存该菜单对应点击时loading的状态值</span></div><div class=\"line\">        &#125;, &#123;</div><div class=\"line\">          text: <span class=\"string\">'邮箱'</span>,</div><div class=\"line\">          state: <span class=\"string\">'active'</span>,</div><div class=\"line\">          click: <span class=\"string\">'email'</span></div><div class=\"line\">        &#125;, &#123;</div><div class=\"line\">          text: <span class=\"string\">'github'</span>,</div><div class=\"line\">          state: <span class=\"string\">'active'</span>,</div><div class=\"line\">          click: <span class=\"string\">'github'</span></div><div class=\"line\">        &#125;]</div><div class=\"line\">      &#125;, &#123;</div><div class=\"line\">        title: <span class=\"string\">'设置头像'</span>,</div><div class=\"line\">        click: <span class=\"string\">'sethead'</span>,</div><div class=\"line\">        show: <span class=\"literal\">true</span></div><div class=\"line\">      &#125;, &#123;</div><div class=\"line\">        title: <span class=\"string\">'修改资料'</span>,</div><div class=\"line\">        click: <span class=\"string\">'setinfo'</span>,</div><div class=\"line\">        show: <span class=\"literal\">true</span></div><div class=\"line\">      &#125;, &#123;</div><div class=\"line\">        title: <span class=\"string\">'其他'</span>,</div><div class=\"line\">        click: <span class=\"string\">'other'</span>,</div><div class=\"line\">        show: <span class=\"literal\">true</span></div><div class=\"line\">      &#125;];</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<ul>\n<li>添加组件样式index.style.css，这里就不展示出来了</li>\n<li>index文件夹下index.ts中输出组件<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">export</span> * from <span class=\"string\">'./index.component'</span>;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3 id=\"添加组件模板\"><a href=\"#添加组件模板\" class=\"headerlink\" title=\"添加组件模板\"></a>添加组件模板</h3><p>index.template.html文件，如下<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">&lt;!--插入头部组件，注入指令后生效--&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">my-header</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">my-header</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"container-fluid row\"</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">aside</span> <span class=\"attr\">class</span>=<span class=\"string\">\"col-md-2  col-md-offset-1\"</span> <span class=\"attr\">id</span>=<span class=\"string\">\"according\"</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"panel-group\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"according\"</span> <span class=\"attr\">role</span>=<span class=\"string\">\"tablist\"</span> <span class=\"attr\">aria-multiselectable</span>=<span class=\"string\">\"true\"</span>&gt;</span></div><div class=\"line\">            <span class=\"comment\">&lt;!--</span></div><div class=\"line\">                *ng-for 中的*是Angular2中template语法的缩写，如果是全部的话，应该为</div><div class=\"line\">                &lt;div ng-for #menu=\"$implicit\" [ng-for-of]=\"asidemenus\" #i=\"index\"&gt;&lt;/div&gt;</div><div class=\"line\">            --&gt;</div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"panel panel-default list-group\"</span> *<span class=\"attr\">ngFor</span>=<span class=\"string\">\"#menu of asidemenus; #i = index\"</span>&gt;</span></div><div class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"panel-heading\"</span> <span class=\"attr\">role</span>=<span class=\"string\">\"tab\"</span>&gt;</span></div><div class=\"line\">                    <span class=\"tag\">&lt;<span class=\"name\">ul</span> <span class=\"attr\">class</span>=<span class=\"string\">\"panel-title \"</span>&gt;</span></div><div class=\"line\">                        <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">data-toggle</span>=<span class=\"string\">\"collapse\"</span> (<span class=\"attr\">click</span>)=<span class=\"string\">\"toggleContent(i)\"</span>&gt;</span></div><div class=\"line\">                            &#123;&#123; menu.title &#125;&#125;</div><div class=\"line\">                        <span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></div><div class=\"line\">                    <span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></div><div class=\"line\">                <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"panel-collapse\"</span>&gt;</span></div><div class=\"line\">                    <span class=\"tag\">&lt;<span class=\"name\">ul</span> <span class=\"attr\">class</span>=<span class=\"string\">\"list-group\"</span>&gt;</span></div><div class=\"line\">                        <span class=\"comment\">&lt;!--@menuState属性动画效果--&gt;</span></div><div class=\"line\">                        <span class=\"tag\">&lt;<span class=\"name\">li</span> *<span class=\"attr\">ngFor</span>=<span class=\"string\">\"#item of menu.menus; #j = index;\"</span> @<span class=\"attr\">menuState</span>=<span class=\"string\">\"menu.show\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"list-group-item\"</span> <span class=\"attr\">role</span>=<span class=\"string\">\"button\"</span> (<span class=\"attr\">click</span>)=<span class=\"string\">\"changeState(item.click)\"</span>&gt;</span>&#123;&#123; item.text &#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></div><div class=\"line\">                    <span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></div><div class=\"line\">                <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">aside</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">article</span> <span class=\"attr\">class</span>=<span class=\"string\">\"col-md-7\"</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">section</span> <span class=\"attr\">class</span>=<span class=\"string\">\"index-content\"</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">p</span> [<span class=\"attr\">hidden</span>]=<span class=\"string\">\"!(loading === 'init' || loading === 'name')\"</span>&gt;</span>昵称：被删<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">p</span> [<span class=\"attr\">hidden</span>]=<span class=\"string\">\"!(loading === 'init' || loading === 'email')\"</span>&gt;</span>邮箱：wangbeishan@163.com<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">p</span> [<span class=\"attr\">hidden</span>]=<span class=\"string\">\"!(loading === 'init' || loading === 'github')\"</span>&gt;</span>github: <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"https://github.com/godbasin\"</span>&gt;</span>github.com/godbasin<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">div</span> [<span class=\"attr\">hidden</span>]=<span class=\"string\">\"!(loading === 'sethead')\"</span>&gt;</span>这里是设置头像页面<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">div</span> [<span class=\"attr\">hidden</span>]=<span class=\"string\">\"!(loading === 'setinfo')\"</span>&gt;</span>这里是修改资料页面<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">div</span> [<span class=\"attr\">hidden</span>]=<span class=\"string\">\"!(loading === 'other')\"</span>&gt;</span>这里是其他页面<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">section</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">article</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<h3 id=\"添加Index路由\"><a href=\"#添加Index路由\" class=\"headerlink\" title=\"添加Index路由\"></a>添加Index路由</h3><p>我们在app.routes.ts中添加index页面的路由。</p>\n<ul>\n<li><p>引入Index组件<br>这里因为该文件夹下也有一个index.ts的文件，所以直接使用”./index”路径的话会有问题，所以我们写到具体的路径。</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 当然最好大家不要使用这种易冲突的名字</span></div><div class=\"line\"><span class=\"keyword\">import</span> &#123; Index &#125; from <span class=\"string\">'./index/index'</span>;</div></pre></td></tr></table></figure>\n</li>\n<li><p>添加路由</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> routes: RouterConfig = [</div><div class=\"line\">  &#123; path: <span class=\"string\">'login'</span>,  component: Login &#125;,</div><div class=\"line\">  &#123; path: <span class=\"string\">'index'</span>,  component: Index &#125;,</div><div class=\"line\">  &#123; path: <span class=\"string\">'**'</span>,    component: Login &#125;</div><div class=\"line\">];</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3 id=\"添加样式\"><a href=\"#添加样式\" class=\"headerlink\" title=\"添加样式\"></a>添加样式</h3><p>样式包括一些组件的样式，还有过渡css样式，这里就不列出来了。</p>\n<h2 id=\"结束语\"><a href=\"#结束语\" class=\"headerlink\" title=\"结束语\"></a>结束语</h2><hr>\n<p>不得不说，angular2中的动画效果跟Vue过渡也是很相像的呢。这些贴心的设定，很多时候都能帮我们减轻不少的负担呢。<br><a href=\"https://github.com/godbasin/godbasin.github.io/tree/blog-codes/angular2-notes/5-animation-and-create-index\" target=\"_blank\" rel=\"external\">此处查看项目代码（仅包含src部分）</a><br><a href=\"http://oc8qsv1w6.bkt.clouddn.com/5-animation-and-create-index/index.html#/index\" target=\"_blank\" rel=\"external\">此处查看页面效果</a></p>\n","excerpt":"<p>最近在学习Angular2作为前端的框架，《Angular2使用笔记》系列用于记录过程中的一些使用和解决方法。<br>本文简单介绍angular2的动画效果，以及记录制作首页的过程。<br>","more":"</p>\n<h2 id=\"angular2动画\"><a href=\"#angular2动画\" class=\"headerlink\" title=\"angular2动画\"></a>angular2动画</h2><hr>\n<h3 id=\"关于Angular2动画\"><a href=\"#关于Angular2动画\" class=\"headerlink\" title=\"关于Angular2动画\"></a>关于Angular2动画</h3><ul>\n<li>使用动画使得用户界面能在不同的状态之间更平滑的转场</li>\n<li>Angular2的动画系统赋予了制作各种动画效果的能力，以构建出与原生CSS动画性能相同的动画</li>\n<li>Angular2动画是基于标准的Web动画API(Web Animations API)构建的，它们在支持此API的浏览器中会用原生方式工作。至于其它浏览器，就需要一个填充库(polyfill)</li>\n</ul>\n<h3 id=\"状态与转场\"><a href=\"#状态与转场\" class=\"headerlink\" title=\"状态与转场\"></a>状态与转场</h3><p>Angular2动画是由状态和状态之间的转场效果所定义的。</p>\n<ul>\n<li>状态<ul>\n<li>动画状态是一个由程序代码中定义的字符串值</li>\n<li>状态的来源可以是简单的对象属性，也可以是由方法计算出来的值。能从组件模板中读取它</li>\n<li>state具体定义了每个状态的最终样式<ul>\n<li>一旦元素转场到那个状态，样式就会被应用到此元素上</li>\n<li>当留在此状态时，样式也会一直保持着</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>转场<ul>\n<li>转场控制一条在一组样式和下一组样式之间切换的时间线</li>\n<li>如果多个转场都有同样的时间线配置，就可以把它们合并进同一个transition定义中</li>\n<li>对同一个转场的两个方向都使用相同的时间线，可以使用&lt;=&gt;简写语法</li>\n<li>*(通配符)状态：匹配任何动画状态，可用于定义那些不需要管当前处于什么状态的样式及转场</li>\n<li>void状态：表示元素没有被附加到视图，在定义“进场”和“离场”的动画时非常有用</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"可动的-Animatable-属性与单位\"><a href=\"#可动的-Animatable-属性与单位\" class=\"headerlink\" title=\"可动的(Animatable)属性与单位\"></a>可动的(Animatable)属性与单位</h3><ul>\n<li><p>可以参与动画的属性</p>\n<ul>\n<li>位置(position)</li>\n<li>大小(size)</li>\n<li>变换(transform)</li>\n<li>颜色(color)</li>\n<li>边框(border)<br>尺寸类属性(如位置、大小、边框等)包括一个数字值和一个用来定义长度单位的后缀。</li>\n</ul>\n</li>\n<li><p>动画时间线</p>\n<ul>\n<li>持续时间(duration)：控制动画从开始到结束要花多长时间</li>\n<li>延迟(delay)：控制在动画已经触发但尚未真正开始转场之前要等待多久</li>\n<li>缓动(easing)函数：用于控制动画在运行期间如何加速和减速</li>\n</ul>\n</li>\n<li><p>基于关键帧(Keyframes)的多阶段动画</p>\n<ul>\n<li>每个关键帧都可以被指定一个偏移量，用来定义该关键帧将被用在动画期间的哪个时间点</li>\n<li>偏移量是一个介于0(表示动画起点)和1(表示动画终点)之间的数组</li>\n</ul>\n</li>\n<li><p>并行动画组(Group)</p>\n<ul>\n<li>为同时发生的几个动画配置不同的时间线</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"制作index页面\"><a href=\"#制作index页面\" class=\"headerlink\" title=\"制作index页面\"></a>制作index页面</h2><hr>\n<p>页面结构如下：<br><img src=\"http://o905ne85q.bkt.clouddn.com/F3A2.tmp.png\" alt=\"image\"></p>\n<h3 id=\"添加index组件相关文件\"><a href=\"#添加index组件相关文件\" class=\"headerlink\" title=\"添加index组件相关文件\"></a>添加index组件相关文件</h3><ul>\n<li>添加index文件夹，用于管理Index组件的相关文件<br>Index组件文件如下：<figure class=\"highlight cmd\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">index/</div><div class=\"line\"> ├──index.ts                   * 导出该目录下组件</div><div class=\"line\"> ├──index.component.ts         * 定义并导出Index组件</div><div class=\"line\"> ├──index.style.css            * Index组件的css样式</div><div class=\"line\"> └──index.template.html        * Index组件的html模板</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3 id=\"定义Index组件\"><a href=\"#定义Index组件\" class=\"headerlink\" title=\"定义Index组件\"></a>定义Index组件</h3><p>这里使用了前面章节创建的头部组件。前面我们将该组件放在主页面组件app.component.js中，这里我们将其移动到index页面组件中。<br>在index.component.js中：<br><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> &#123; Component, trigger, state, style, transition, animate &#125; from <span class=\"string\">'@angular/core'</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 添加Header组件，默认从header文件夹的index.ts中获取</span></div><div class=\"line\"><span class=\"keyword\">import</span> &#123; Header &#125; from <span class=\"string\">'../header'</span>;</div><div class=\"line\"></div><div class=\"line\">@Component(&#123;</div><div class=\"line\">  selector: <span class=\"string\">'index'</span>, <span class=\"comment\">// 设置模板元素</span></div><div class=\"line\">  styleUrls: [<span class=\"string\">'./index.style.css'</span>], <span class=\"comment\">// 样式文件引入</span></div><div class=\"line\">  templateUrl: <span class=\"string\">'./index.template.html'</span>, <span class=\"comment\">// 模板文件引入</span></div><div class=\"line\">  directives: [Header], <span class=\"comment\">// 注入指令</span></div><div class=\"line\">  animations: [</div><div class=\"line\">    <span class=\"comment\">// 设置动画，@menuState属性动画效果</span></div><div class=\"line\">    trigger(<span class=\"string\">'menuState'</span>, [ </div><div class=\"line\">      state(<span class=\"string\">'false'</span>, style(&#123; <span class=\"comment\">// menu.show为false时状态</span></div><div class=\"line\">        height: <span class=\"string\">'0px'</span>,</div><div class=\"line\">        padding: <span class=\"string\">'0px'</span>,</div><div class=\"line\">        opacity: <span class=\"string\">'0'</span></div><div class=\"line\">      &#125;)),</div><div class=\"line\">      <span class=\"comment\">// 转场的动画效果</span></div><div class=\"line\">      transition(<span class=\"string\">'* =&gt; *'</span>, animate(<span class=\"string\">'100ms ease-in'</span>))</div><div class=\"line\">    ])</div><div class=\"line\">  ]</div><div class=\"line\">&#125;)</div><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> Index &#123;</div><div class=\"line\">  <span class=\"comment\">// 定义并初始化菜单显示状态</span></div><div class=\"line\">  loading: <span class=\"built_in\">string</span> = <span class=\"string\">'init'</span>;</div><div class=\"line\">  asidemenus: <span class=\"built_in\">Array</span>&lt;<span class=\"built_in\">any</span>&gt;;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">// 更新loading</span></div><div class=\"line\">  changeState (view) &#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>.loading = view;</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">// 显示隐藏子菜单效果并更新loading</span></div><div class=\"line\">  toggleContent (index) &#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>.asidemenus[index].show = !<span class=\"keyword\">this</span>.asidemenus[index].show;</div><div class=\"line\">    <span class=\"keyword\">this</span>.changeState(<span class=\"keyword\">this</span>.asidemenus[index].click);</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  ngOnInit () &#123;</div><div class=\"line\">    <span class=\"comment\">// 设定menu的初始值</span></div><div class=\"line\">    <span class=\"keyword\">this</span>.asidemenus = [&#123;</div><div class=\"line\">        title: <span class=\"string\">'基本资料'</span>, <span class=\"comment\">// title用于储存该菜单显示名称</span></div><div class=\"line\">        click: <span class=\"string\">'init'</span>, <span class=\"comment\">// click用于储存该菜单对应点击时loading的状态值</span></div><div class=\"line\">        show: <span class=\"literal\">true</span>, <span class=\"comment\">// show用于保存菜单是否隐藏的状态</span></div><div class=\"line\">        menus: [&#123;</div><div class=\"line\">          text: <span class=\"string\">'名字'</span>, <span class=\"comment\">// title用于储存该菜单显示名称</span></div><div class=\"line\">          state: <span class=\"string\">'active'</span>, <span class=\"comment\">// state用于储存该菜单状态</span></div><div class=\"line\">          click: <span class=\"string\">'name'</span> <span class=\"comment\">// click用于储存该菜单对应点击时loading的状态值</span></div><div class=\"line\">        &#125;, &#123;</div><div class=\"line\">          text: <span class=\"string\">'邮箱'</span>,</div><div class=\"line\">          state: <span class=\"string\">'active'</span>,</div><div class=\"line\">          click: <span class=\"string\">'email'</span></div><div class=\"line\">        &#125;, &#123;</div><div class=\"line\">          text: <span class=\"string\">'github'</span>,</div><div class=\"line\">          state: <span class=\"string\">'active'</span>,</div><div class=\"line\">          click: <span class=\"string\">'github'</span></div><div class=\"line\">        &#125;]</div><div class=\"line\">      &#125;, &#123;</div><div class=\"line\">        title: <span class=\"string\">'设置头像'</span>,</div><div class=\"line\">        click: <span class=\"string\">'sethead'</span>,</div><div class=\"line\">        show: <span class=\"literal\">true</span></div><div class=\"line\">      &#125;, &#123;</div><div class=\"line\">        title: <span class=\"string\">'修改资料'</span>,</div><div class=\"line\">        click: <span class=\"string\">'setinfo'</span>,</div><div class=\"line\">        show: <span class=\"literal\">true</span></div><div class=\"line\">      &#125;, &#123;</div><div class=\"line\">        title: <span class=\"string\">'其他'</span>,</div><div class=\"line\">        click: <span class=\"string\">'other'</span>,</div><div class=\"line\">        show: <span class=\"literal\">true</span></div><div class=\"line\">      &#125;];</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<ul>\n<li>添加组件样式index.style.css，这里就不展示出来了</li>\n<li>index文件夹下index.ts中输出组件<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">export</span> * from <span class=\"string\">'./index.component'</span>;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3 id=\"添加组件模板\"><a href=\"#添加组件模板\" class=\"headerlink\" title=\"添加组件模板\"></a>添加组件模板</h3><p>index.template.html文件，如下<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">&lt;!--插入头部组件，注入指令后生效--&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">my-header</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">my-header</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"container-fluid row\"</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">aside</span> <span class=\"attr\">class</span>=<span class=\"string\">\"col-md-2  col-md-offset-1\"</span> <span class=\"attr\">id</span>=<span class=\"string\">\"according\"</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"panel-group\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"according\"</span> <span class=\"attr\">role</span>=<span class=\"string\">\"tablist\"</span> <span class=\"attr\">aria-multiselectable</span>=<span class=\"string\">\"true\"</span>&gt;</span></div><div class=\"line\">            <span class=\"comment\">&lt;!--</div><div class=\"line\">                *ng-for 中的*是Angular2中template语法的缩写，如果是全部的话，应该为</div><div class=\"line\">                &lt;div ng-for #menu=\"$implicit\" [ng-for-of]=\"asidemenus\" #i=\"index\"&gt;&lt;/div&gt;</div><div class=\"line\">            --&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"panel panel-default list-group\"</span> *<span class=\"attr\">ngFor</span>=<span class=\"string\">\"#menu of asidemenus; #i = index\"</span>&gt;</span></div><div class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"panel-heading\"</span> <span class=\"attr\">role</span>=<span class=\"string\">\"tab\"</span>&gt;</span></div><div class=\"line\">                    <span class=\"tag\">&lt;<span class=\"name\">ul</span> <span class=\"attr\">class</span>=<span class=\"string\">\"panel-title \"</span>&gt;</span></div><div class=\"line\">                        <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">data-toggle</span>=<span class=\"string\">\"collapse\"</span> (<span class=\"attr\">click</span>)=<span class=\"string\">\"toggleContent(i)\"</span>&gt;</span></div><div class=\"line\">                            &#123;&#123; menu.title &#125;&#125;</div><div class=\"line\">                        <span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></div><div class=\"line\">                    <span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></div><div class=\"line\">                <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"panel-collapse\"</span>&gt;</span></div><div class=\"line\">                    <span class=\"tag\">&lt;<span class=\"name\">ul</span> <span class=\"attr\">class</span>=<span class=\"string\">\"list-group\"</span>&gt;</span></div><div class=\"line\">                        <span class=\"comment\">&lt;!--@menuState属性动画效果--&gt;</span></div><div class=\"line\">                        <span class=\"tag\">&lt;<span class=\"name\">li</span> *<span class=\"attr\">ngFor</span>=<span class=\"string\">\"#item of menu.menus; #j = index;\"</span> @<span class=\"attr\">menuState</span>=<span class=\"string\">\"menu.show\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"list-group-item\"</span> <span class=\"attr\">role</span>=<span class=\"string\">\"button\"</span> (<span class=\"attr\">click</span>)=<span class=\"string\">\"changeState(item.click)\"</span>&gt;</span>&#123;&#123; item.text &#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></div><div class=\"line\">                    <span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></div><div class=\"line\">                <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">aside</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">article</span> <span class=\"attr\">class</span>=<span class=\"string\">\"col-md-7\"</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">section</span> <span class=\"attr\">class</span>=<span class=\"string\">\"index-content\"</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">p</span> [<span class=\"attr\">hidden</span>]=<span class=\"string\">\"!(loading === 'init' || loading === 'name')\"</span>&gt;</span>昵称：被删<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">p</span> [<span class=\"attr\">hidden</span>]=<span class=\"string\">\"!(loading === 'init' || loading === 'email')\"</span>&gt;</span>邮箱：wangbeishan@163.com<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">p</span> [<span class=\"attr\">hidden</span>]=<span class=\"string\">\"!(loading === 'init' || loading === 'github')\"</span>&gt;</span>github: <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"https://github.com/godbasin\"</span>&gt;</span>github.com/godbasin<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">div</span> [<span class=\"attr\">hidden</span>]=<span class=\"string\">\"!(loading === 'sethead')\"</span>&gt;</span>这里是设置头像页面<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">div</span> [<span class=\"attr\">hidden</span>]=<span class=\"string\">\"!(loading === 'setinfo')\"</span>&gt;</span>这里是修改资料页面<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">div</span> [<span class=\"attr\">hidden</span>]=<span class=\"string\">\"!(loading === 'other')\"</span>&gt;</span>这里是其他页面<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">section</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">article</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<h3 id=\"添加Index路由\"><a href=\"#添加Index路由\" class=\"headerlink\" title=\"添加Index路由\"></a>添加Index路由</h3><p>我们在app.routes.ts中添加index页面的路由。</p>\n<ul>\n<li><p>引入Index组件<br>这里因为该文件夹下也有一个index.ts的文件，所以直接使用”./index”路径的话会有问题，所以我们写到具体的路径。</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 当然最好大家不要使用这种易冲突的名字</span></div><div class=\"line\"><span class=\"keyword\">import</span> &#123; Index &#125; from <span class=\"string\">'./index/index'</span>;</div></pre></td></tr></table></figure>\n</li>\n<li><p>添加路由</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> routes: RouterConfig = [</div><div class=\"line\">  &#123; path: <span class=\"string\">'login'</span>,  component: Login &#125;,</div><div class=\"line\">  &#123; path: <span class=\"string\">'index'</span>,  component: Index &#125;,</div><div class=\"line\">  &#123; path: <span class=\"string\">'**'</span>,    component: Login &#125;</div><div class=\"line\">];</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3 id=\"添加样式\"><a href=\"#添加样式\" class=\"headerlink\" title=\"添加样式\"></a>添加样式</h3><p>样式包括一些组件的样式，还有过渡css样式，这里就不列出来了。</p>\n<h2 id=\"结束语\"><a href=\"#结束语\" class=\"headerlink\" title=\"结束语\"></a>结束语</h2><hr>\n<p>不得不说，angular2中的动画效果跟Vue过渡也是很相像的呢。这些贴心的设定，很多时候都能帮我们减轻不少的负担呢。<br><a href=\"https://github.com/godbasin/godbasin.github.io/tree/blog-codes/angular2-notes/5-animation-and-create-index\">此处查看项目代码（仅包含src部分）</a><br><a href=\"http://oc8qsv1w6.bkt.clouddn.com/5-animation-and-create-index/index.html#/index\">此处查看页面效果</a></p>"},{"title":"Angular2使用笔记9--使用Subject创建Websocket服务","date":"2016-11-12T02:16:04.000Z","_content":"最近在学习Angular2作为前端的框架，《Angular2使用笔记》系列用于记录过程中的一些使用和解决方法。\n本文在Angular2中使用Subject创建Websocket服务的过程。\n<!--more-->\n\n关于RxJS的Observable相关的请移步上一篇[《在Angular2中使用Observable对象》](https://godbasin.github.io/2016/11/06/angular2-notes-8-rxjs-in-angular2/)。\n\n## 认识Subject\n-----\n### Subject\n在RxJS中，Subject是一类特殊的Observable，它可以向多个Observer多路推送数值。普通的Observable并不具备多路推送的能力（每一个Observer都有自己独立的执行环境），而Subject可以共享一个执行环境。\n\nSubject是一种可以多路推送的可观察对象。与EventEmitter类似，Subject维护着自己的Observer。\n\n每一个Subject都是一个Observable（可观察对象）对于一个Subject，你可以订阅（subscribe）它，Observer会和往常一样接收到数据。从Observer的视角看，它并不能区分自己的执行环境是普通Observable的单路推送还是基于Subject的多路推送。\n\nSubject的内部实现中，并不会在被订阅（subscribe）后创建新的执行环境。它仅仅会把新的Observer注册在由它本身维护的Observer列表中，这和其他语言、库中的addListener机制类似。\n\n每一个Subject也可以作为Observer（观察者）Subject同样也是一个由next(v)，error(e)，和complete()这些方法组成的对象。调用next(theValue) 方法后，Subject会向所有已经在其上注册的Observer多路推送theValue。\n\n- BehaviorSubject\nBehaviorSubject是Subject的一个衍生类，具有“最新的值”的概念。它总是保存最近向数据消费者发送的值，当一个Observer订阅后，它会即刻从BehaviorSubject收到“最新的值”。\n\n- ReplaySubject\nReplaySubject如同于BehaviorSubject是Subject 的子类。通过 ReplaySubject可以向新的订阅者推送旧数值，就像一个录像机 ReplaySubject可以记录Observable的一部分状态（过去时间内推送的值）。一个ReplaySubject 可以记录Observable执行过程中推送的多个值，并向新的订阅者回放它们。\n\n- AsyncSubject\nAsyncSubject是Subject的另外一个衍生类，Observable仅会在执行完成后，推送执行环境中的最后一个值。\n\n### 参考\n上面的内容都是从下面这篇文章里面粘贴过来的，该文章还有一些比较详细的例子，这里就不放出来，有兴趣的小伙伴自行进入呀。\n[《RxJS 核心概念之Subject》](http://www.open-open.com/lib/view/open1462525661610.html)\n\n## 使用Subject创建Websocket服务\n---\n上面也说过，Subject可以向多个Observer多路推送数值，这样的方式很适合用来写websocket的订阅呢。\n\n### 注入相关的服务\n``` typescript\n// 注入Rx对象\nimport * as Rx from 'rxjs/Rx';\nimport {Injectable} from '@angular/core';\n```\n\n### 创建Subject\n``` typescript\n// 创建websocket对象\nlet ws = new WebSocket(this.wsUrl);\n// 创建Observable对象\nlet observable = Rx.Observable.create(\n\t(obs: Rx.Observer < any > ) => {\n\t\t// 当websocket获得推送内容的时候，调用next方法，并传入推送内容\n        ws.onmessage = obs.next.bind(obs);\n\t\t// 当websocket出错的时候，调用error方法，并传入失败信息\n\t\tws.onerror = obs.error.bind(obs);\n\t\t// 当websocket关闭的时候，调用complete方法\n\t\tws.onclose = obs.complete.bind();\n\t\treturn ws.close.bind(ws);\n\t}\n);\n// 创建observer对象，用于向websocket发送信息\nlet observer = {\n\tnext: (value) => {\n\t\tif (ws.readyState === WebSocket.OPEN) {\n\t\t\tws.send(value.toString());\n\t\t}\n\t},\n};\n// 使用Rx.Subject.create创建Subject对象\nreturn Rx.Subject.create(observer, observable);\n```\n\n### 创建完整的websocket服务\n``` typescript\nInjectable()\nexport class WsService {\n    // 定义websocket服务地址，这里由于是同一个websocket，故在服务中写死\n    wsUrl: string = 'ws://ip:port/websocket';\n    // 用于保存当前subject对象\n    subject: Rx.Subject<any>;\n    // 用于保存当前subject对象publish后返回的可观察对象\n    publish: Rx.ConnectableObservable<any>;\n    num: number = 0;\n\n    private create(): Rx.Subject<any>{\n        // 创建websocket对象\n        let ws = new WebSocket(this.wsUrl);\n        // 创建Observable对象\n        let observable = Rx.Observable.create(\n            (obs: Rx.Observer<any>) => {\n                // 当websocket获得推送内容的时候，调用next方法，并传入推送内容\n                ws.onmessage = obs.next.bind(obs);\n                // 当websocket出错的时候，调用error方法，并传入失败信息\n                ws.onerror = obs.error.bind(obs);\n                // 当websocket关闭的时候，调用complete方法\n                ws.onclose = obs.complete.bind();\n                return ws.close.bind(ws);\n            }\n        );\n        // 创建observer对象，用于向websocket发送信息\n        let observer = {\n            next: (value) => {\n                if (ws.readyState === WebSocket.OPEN) {\n                    ws.send(value.toString());\n                }\n            },\n        };\n        // 使用Rx.Subject.create创建Subject对象\n        return Rx.Subject.create(observer, observable);\n    }\n\n    // 获取subject对象接口\n    getSubject() {\n      if (!this.subject) {\n        this.subject = this.create();\n      }\n      return this.subject;\n    }\n\n    // 获取publish对象接口\n    getPublish() {\n        if (!this.publish) {\n            this.publish = this.subject.publish();\n        }\n        return this.publish;\n    }\n}\n\n```\n\n### 使用服务订阅websocket的推送消息\n注入、实例化和获取服务这些我在这里就不详细讲啦，直接说明一下怎样使用。\n``` typescript\n// 获得可观察对象\nthis.wsPublish = this.monitorWsService.getPublish();\n// 订阅消息，并保存到this.response中\nthis.wsPublish.subscribe(res => this.response);\n// 使用connect进行连接\nthis.wsPublish.connect();\n```\n之前本骚年也一直在调试这个代码，总是无法多个地方同时订阅，最后是在一篇RxJava的issue里面看到publish和connect的两个方法相关，才知道怎么使用。\n毕竟在Rx发布的文档里面也没找到呢。\n\n### 使用服务向websocket推送消息\n同上，在这里直接贴上使用的代码。\n``` typescript\n// 获得subject对象\nthis.wsSubject = this.monitorWsService.getSubject();\n// 调用next方法向websocket发送消息\nthis.wsSubject.next('pitpat');\n```\n\n到这里，我们的websocket服务已经是可用的啦。不过使用的时候要注意angular2中依赖注入以及服务实例化、组件树这些呢，如果要多个组件使用同一个服务，就需要是同一个实例化的服务啦。\n\n### 参考\n这里很大程度上参考了歪果仁的[《WebSockets with Angular2 and RxJS》](https://medium.com/@lwojciechowski/websockets-with-angular2-and-rxjs-8b6c5be02fac#.bxql1v9b5)。\n\n## 结束语\n-----\n在使用Angular2的过程中，接触到了很多新的东西，像Observable、Subject等等，用不一样的方法编写一样的服务，其实也是个很有意思的事情呢，对于思维的拓展和转换很有帮助哟。","source":"_posts/angular2-notes-9-websocket-service-with-rxjs.md","raw":"---\ntitle: Angular2使用笔记9--使用Subject创建Websocket服务\ndate: 2016-11-12 10:16:04\ncategories: angular2火锅\ntags: 笔记\n---\n最近在学习Angular2作为前端的框架，《Angular2使用笔记》系列用于记录过程中的一些使用和解决方法。\n本文在Angular2中使用Subject创建Websocket服务的过程。\n<!--more-->\n\n关于RxJS的Observable相关的请移步上一篇[《在Angular2中使用Observable对象》](https://godbasin.github.io/2016/11/06/angular2-notes-8-rxjs-in-angular2/)。\n\n## 认识Subject\n-----\n### Subject\n在RxJS中，Subject是一类特殊的Observable，它可以向多个Observer多路推送数值。普通的Observable并不具备多路推送的能力（每一个Observer都有自己独立的执行环境），而Subject可以共享一个执行环境。\n\nSubject是一种可以多路推送的可观察对象。与EventEmitter类似，Subject维护着自己的Observer。\n\n每一个Subject都是一个Observable（可观察对象）对于一个Subject，你可以订阅（subscribe）它，Observer会和往常一样接收到数据。从Observer的视角看，它并不能区分自己的执行环境是普通Observable的单路推送还是基于Subject的多路推送。\n\nSubject的内部实现中，并不会在被订阅（subscribe）后创建新的执行环境。它仅仅会把新的Observer注册在由它本身维护的Observer列表中，这和其他语言、库中的addListener机制类似。\n\n每一个Subject也可以作为Observer（观察者）Subject同样也是一个由next(v)，error(e)，和complete()这些方法组成的对象。调用next(theValue) 方法后，Subject会向所有已经在其上注册的Observer多路推送theValue。\n\n- BehaviorSubject\nBehaviorSubject是Subject的一个衍生类，具有“最新的值”的概念。它总是保存最近向数据消费者发送的值，当一个Observer订阅后，它会即刻从BehaviorSubject收到“最新的值”。\n\n- ReplaySubject\nReplaySubject如同于BehaviorSubject是Subject 的子类。通过 ReplaySubject可以向新的订阅者推送旧数值，就像一个录像机 ReplaySubject可以记录Observable的一部分状态（过去时间内推送的值）。一个ReplaySubject 可以记录Observable执行过程中推送的多个值，并向新的订阅者回放它们。\n\n- AsyncSubject\nAsyncSubject是Subject的另外一个衍生类，Observable仅会在执行完成后，推送执行环境中的最后一个值。\n\n### 参考\n上面的内容都是从下面这篇文章里面粘贴过来的，该文章还有一些比较详细的例子，这里就不放出来，有兴趣的小伙伴自行进入呀。\n[《RxJS 核心概念之Subject》](http://www.open-open.com/lib/view/open1462525661610.html)\n\n## 使用Subject创建Websocket服务\n---\n上面也说过，Subject可以向多个Observer多路推送数值，这样的方式很适合用来写websocket的订阅呢。\n\n### 注入相关的服务\n``` typescript\n// 注入Rx对象\nimport * as Rx from 'rxjs/Rx';\nimport {Injectable} from '@angular/core';\n```\n\n### 创建Subject\n``` typescript\n// 创建websocket对象\nlet ws = new WebSocket(this.wsUrl);\n// 创建Observable对象\nlet observable = Rx.Observable.create(\n\t(obs: Rx.Observer < any > ) => {\n\t\t// 当websocket获得推送内容的时候，调用next方法，并传入推送内容\n        ws.onmessage = obs.next.bind(obs);\n\t\t// 当websocket出错的时候，调用error方法，并传入失败信息\n\t\tws.onerror = obs.error.bind(obs);\n\t\t// 当websocket关闭的时候，调用complete方法\n\t\tws.onclose = obs.complete.bind();\n\t\treturn ws.close.bind(ws);\n\t}\n);\n// 创建observer对象，用于向websocket发送信息\nlet observer = {\n\tnext: (value) => {\n\t\tif (ws.readyState === WebSocket.OPEN) {\n\t\t\tws.send(value.toString());\n\t\t}\n\t},\n};\n// 使用Rx.Subject.create创建Subject对象\nreturn Rx.Subject.create(observer, observable);\n```\n\n### 创建完整的websocket服务\n``` typescript\nInjectable()\nexport class WsService {\n    // 定义websocket服务地址，这里由于是同一个websocket，故在服务中写死\n    wsUrl: string = 'ws://ip:port/websocket';\n    // 用于保存当前subject对象\n    subject: Rx.Subject<any>;\n    // 用于保存当前subject对象publish后返回的可观察对象\n    publish: Rx.ConnectableObservable<any>;\n    num: number = 0;\n\n    private create(): Rx.Subject<any>{\n        // 创建websocket对象\n        let ws = new WebSocket(this.wsUrl);\n        // 创建Observable对象\n        let observable = Rx.Observable.create(\n            (obs: Rx.Observer<any>) => {\n                // 当websocket获得推送内容的时候，调用next方法，并传入推送内容\n                ws.onmessage = obs.next.bind(obs);\n                // 当websocket出错的时候，调用error方法，并传入失败信息\n                ws.onerror = obs.error.bind(obs);\n                // 当websocket关闭的时候，调用complete方法\n                ws.onclose = obs.complete.bind();\n                return ws.close.bind(ws);\n            }\n        );\n        // 创建observer对象，用于向websocket发送信息\n        let observer = {\n            next: (value) => {\n                if (ws.readyState === WebSocket.OPEN) {\n                    ws.send(value.toString());\n                }\n            },\n        };\n        // 使用Rx.Subject.create创建Subject对象\n        return Rx.Subject.create(observer, observable);\n    }\n\n    // 获取subject对象接口\n    getSubject() {\n      if (!this.subject) {\n        this.subject = this.create();\n      }\n      return this.subject;\n    }\n\n    // 获取publish对象接口\n    getPublish() {\n        if (!this.publish) {\n            this.publish = this.subject.publish();\n        }\n        return this.publish;\n    }\n}\n\n```\n\n### 使用服务订阅websocket的推送消息\n注入、实例化和获取服务这些我在这里就不详细讲啦，直接说明一下怎样使用。\n``` typescript\n// 获得可观察对象\nthis.wsPublish = this.monitorWsService.getPublish();\n// 订阅消息，并保存到this.response中\nthis.wsPublish.subscribe(res => this.response);\n// 使用connect进行连接\nthis.wsPublish.connect();\n```\n之前本骚年也一直在调试这个代码，总是无法多个地方同时订阅，最后是在一篇RxJava的issue里面看到publish和connect的两个方法相关，才知道怎么使用。\n毕竟在Rx发布的文档里面也没找到呢。\n\n### 使用服务向websocket推送消息\n同上，在这里直接贴上使用的代码。\n``` typescript\n// 获得subject对象\nthis.wsSubject = this.monitorWsService.getSubject();\n// 调用next方法向websocket发送消息\nthis.wsSubject.next('pitpat');\n```\n\n到这里，我们的websocket服务已经是可用的啦。不过使用的时候要注意angular2中依赖注入以及服务实例化、组件树这些呢，如果要多个组件使用同一个服务，就需要是同一个实例化的服务啦。\n\n### 参考\n这里很大程度上参考了歪果仁的[《WebSockets with Angular2 and RxJS》](https://medium.com/@lwojciechowski/websockets-with-angular2-and-rxjs-8b6c5be02fac#.bxql1v9b5)。\n\n## 结束语\n-----\n在使用Angular2的过程中，接触到了很多新的东西，像Observable、Subject等等，用不一样的方法编写一样的服务，其实也是个很有意思的事情呢，对于思维的拓展和转换很有帮助哟。","slug":"angular2-notes-9-websocket-service-with-rxjs","published":1,"updated":"2016-11-12T02:16:50.801Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cix45hufw0027xotusez6ht4n","content":"<p>最近在学习Angular2作为前端的框架，《Angular2使用笔记》系列用于记录过程中的一些使用和解决方法。<br>本文在Angular2中使用Subject创建Websocket服务的过程。<br><a id=\"more\"></a></p>\n<p>关于RxJS的Observable相关的请移步上一篇<a href=\"https://godbasin.github.io/2016/11/06/angular2-notes-8-rxjs-in-angular2/\">《在Angular2中使用Observable对象》</a>。</p>\n<h2 id=\"认识Subject\"><a href=\"#认识Subject\" class=\"headerlink\" title=\"认识Subject\"></a>认识Subject</h2><hr>\n<h3 id=\"Subject\"><a href=\"#Subject\" class=\"headerlink\" title=\"Subject\"></a>Subject</h3><p>在RxJS中，Subject是一类特殊的Observable，它可以向多个Observer多路推送数值。普通的Observable并不具备多路推送的能力（每一个Observer都有自己独立的执行环境），而Subject可以共享一个执行环境。</p>\n<p>Subject是一种可以多路推送的可观察对象。与EventEmitter类似，Subject维护着自己的Observer。</p>\n<p>每一个Subject都是一个Observable（可观察对象）对于一个Subject，你可以订阅（subscribe）它，Observer会和往常一样接收到数据。从Observer的视角看，它并不能区分自己的执行环境是普通Observable的单路推送还是基于Subject的多路推送。</p>\n<p>Subject的内部实现中，并不会在被订阅（subscribe）后创建新的执行环境。它仅仅会把新的Observer注册在由它本身维护的Observer列表中，这和其他语言、库中的addListener机制类似。</p>\n<p>每一个Subject也可以作为Observer（观察者）Subject同样也是一个由next(v)，error(e)，和complete()这些方法组成的对象。调用next(theValue) 方法后，Subject会向所有已经在其上注册的Observer多路推送theValue。</p>\n<ul>\n<li><p>BehaviorSubject<br>BehaviorSubject是Subject的一个衍生类，具有“最新的值”的概念。它总是保存最近向数据消费者发送的值，当一个Observer订阅后，它会即刻从BehaviorSubject收到“最新的值”。</p>\n</li>\n<li><p>ReplaySubject<br>ReplaySubject如同于BehaviorSubject是Subject 的子类。通过 ReplaySubject可以向新的订阅者推送旧数值，就像一个录像机 ReplaySubject可以记录Observable的一部分状态（过去时间内推送的值）。一个ReplaySubject 可以记录Observable执行过程中推送的多个值，并向新的订阅者回放它们。</p>\n</li>\n<li><p>AsyncSubject<br>AsyncSubject是Subject的另外一个衍生类，Observable仅会在执行完成后，推送执行环境中的最后一个值。</p>\n</li>\n</ul>\n<h3 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h3><p>上面的内容都是从下面这篇文章里面粘贴过来的，该文章还有一些比较详细的例子，这里就不放出来，有兴趣的小伙伴自行进入呀。<br><a href=\"http://www.open-open.com/lib/view/open1462525661610.html\" target=\"_blank\" rel=\"external\">《RxJS 核心概念之Subject》</a></p>\n<h2 id=\"使用Subject创建Websocket服务\"><a href=\"#使用Subject创建Websocket服务\" class=\"headerlink\" title=\"使用Subject创建Websocket服务\"></a>使用Subject创建Websocket服务</h2><hr>\n<p>上面也说过，Subject可以向多个Observer多路推送数值，这样的方式很适合用来写websocket的订阅呢。</p>\n<h3 id=\"注入相关的服务\"><a href=\"#注入相关的服务\" class=\"headerlink\" title=\"注入相关的服务\"></a>注入相关的服务</h3><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 注入Rx对象</span></div><div class=\"line\"><span class=\"keyword\">import</span> * as Rx from <span class=\"string\">'rxjs/Rx'</span>;</div><div class=\"line\"><span class=\"keyword\">import</span> &#123;Injectable&#125; from <span class=\"string\">'@angular/core'</span>;</div></pre></td></tr></table></figure>\n<h3 id=\"创建Subject\"><a href=\"#创建Subject\" class=\"headerlink\" title=\"创建Subject\"></a>创建Subject</h3><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 创建websocket对象</span></div><div class=\"line\"><span class=\"keyword\">let</span> ws = <span class=\"keyword\">new</span> WebSocket(<span class=\"keyword\">this</span>.wsUrl);</div><div class=\"line\"><span class=\"comment\">// 创建Observable对象</span></div><div class=\"line\"><span class=\"keyword\">let</span> observable = Rx.Observable.create(</div><div class=\"line\">  (obs: Rx.Observer &lt; <span class=\"built_in\">any</span> &gt; ) =&gt; &#123;</div><div class=\"line\">    <span class=\"comment\">// 当websocket获得推送内容的时候，调用next方法，并传入推送内容</span></div><div class=\"line\">        ws.onmessage = obs.next.bind(obs);</div><div class=\"line\">    <span class=\"comment\">// 当websocket出错的时候，调用error方法，并传入失败信息</span></div><div class=\"line\">    ws.onerror = obs.error.bind(obs);</div><div class=\"line\">    <span class=\"comment\">// 当websocket关闭的时候，调用complete方法</span></div><div class=\"line\">    ws.onclose = obs.complete.bind();</div><div class=\"line\">    <span class=\"keyword\">return</span> ws.close.bind(ws);</div><div class=\"line\">  &#125;</div><div class=\"line\">);</div><div class=\"line\"><span class=\"comment\">// 创建observer对象，用于向websocket发送信息</span></div><div class=\"line\"><span class=\"keyword\">let</span> observer = &#123;</div><div class=\"line\">  next: (value) =&gt; &#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (ws.readyState === WebSocket.OPEN) &#123;</div><div class=\"line\">      ws.send(value.toString());</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;,</div><div class=\"line\">&#125;;</div><div class=\"line\"><span class=\"comment\">// 使用Rx.Subject.create创建Subject对象</span></div><div class=\"line\"><span class=\"keyword\">return</span> Rx.Subject.create(observer, observable);</div></pre></td></tr></table></figure>\n<h3 id=\"创建完整的websocket服务\"><a href=\"#创建完整的websocket服务\" class=\"headerlink\" title=\"创建完整的websocket服务\"></a>创建完整的websocket服务</h3><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div></pre></td><td class=\"code\"><pre><div class=\"line\">Injectable()</div><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> WsService &#123;</div><div class=\"line\">    <span class=\"comment\">// 定义websocket服务地址，这里由于是同一个websocket，故在服务中写死</span></div><div class=\"line\">    wsUrl: <span class=\"built_in\">string</span> = <span class=\"string\">'ws://ip:port/websocket'</span>;</div><div class=\"line\">    <span class=\"comment\">// 用于保存当前subject对象</span></div><div class=\"line\">    subject: Rx.Subject&lt;<span class=\"built_in\">any</span>&gt;;</div><div class=\"line\">    <span class=\"comment\">// 用于保存当前subject对象publish后返回的可观察对象</span></div><div class=\"line\">    publish: Rx.ConnectableObservable&lt;<span class=\"built_in\">any</span>&gt;;</div><div class=\"line\">    num: <span class=\"built_in\">number</span> = <span class=\"number\">0</span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">private</span> create(): Rx.Subject&lt;<span class=\"built_in\">any</span>&gt;&#123;</div><div class=\"line\">        <span class=\"comment\">// 创建websocket对象</span></div><div class=\"line\">        <span class=\"keyword\">let</span> ws = <span class=\"keyword\">new</span> WebSocket(<span class=\"keyword\">this</span>.wsUrl);</div><div class=\"line\">        <span class=\"comment\">// 创建Observable对象</span></div><div class=\"line\">        <span class=\"keyword\">let</span> observable = Rx.Observable.create(</div><div class=\"line\">            (obs: Rx.Observer&lt;<span class=\"built_in\">any</span>&gt;) =&gt; &#123;</div><div class=\"line\">                <span class=\"comment\">// 当websocket获得推送内容的时候，调用next方法，并传入推送内容</span></div><div class=\"line\">                ws.onmessage = obs.next.bind(obs);</div><div class=\"line\">                <span class=\"comment\">// 当websocket出错的时候，调用error方法，并传入失败信息</span></div><div class=\"line\">                ws.onerror = obs.error.bind(obs);</div><div class=\"line\">                <span class=\"comment\">// 当websocket关闭的时候，调用complete方法</span></div><div class=\"line\">                ws.onclose = obs.complete.bind();</div><div class=\"line\">                <span class=\"keyword\">return</span> ws.close.bind(ws);</div><div class=\"line\">            &#125;</div><div class=\"line\">        );</div><div class=\"line\">        <span class=\"comment\">// 创建observer对象，用于向websocket发送信息</span></div><div class=\"line\">        <span class=\"keyword\">let</span> observer = &#123;</div><div class=\"line\">            next: (value) =&gt; &#123;</div><div class=\"line\">                <span class=\"keyword\">if</span> (ws.readyState === WebSocket.OPEN) &#123;</div><div class=\"line\">                    ws.send(value.toString());</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;,</div><div class=\"line\">        &#125;;</div><div class=\"line\">        <span class=\"comment\">// 使用Rx.Subject.create创建Subject对象</span></div><div class=\"line\">        <span class=\"keyword\">return</span> Rx.Subject.create(observer, observable);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// 获取subject对象接口</span></div><div class=\"line\">    getSubject() &#123;</div><div class=\"line\">      <span class=\"keyword\">if</span> (!<span class=\"keyword\">this</span>.subject) &#123;</div><div class=\"line\">        <span class=\"keyword\">this</span>.subject = <span class=\"keyword\">this</span>.create();</div><div class=\"line\">      &#125;</div><div class=\"line\">      <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.subject;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// 获取publish对象接口</span></div><div class=\"line\">    getPublish() &#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (!<span class=\"keyword\">this</span>.publish) &#123;</div><div class=\"line\">            <span class=\"keyword\">this</span>.publish = <span class=\"keyword\">this</span>.subject.publish();</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.publish;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"使用服务订阅websocket的推送消息\"><a href=\"#使用服务订阅websocket的推送消息\" class=\"headerlink\" title=\"使用服务订阅websocket的推送消息\"></a>使用服务订阅websocket的推送消息</h3><p>注入、实例化和获取服务这些我在这里就不详细讲啦，直接说明一下怎样使用。<br><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 获得可观察对象</span></div><div class=\"line\"><span class=\"keyword\">this</span>.wsPublish = <span class=\"keyword\">this</span>.monitorWsService.getPublish();</div><div class=\"line\"><span class=\"comment\">// 订阅消息，并保存到this.response中</span></div><div class=\"line\"><span class=\"keyword\">this</span>.wsPublish.subscribe(res =&gt; <span class=\"keyword\">this</span>.response);</div><div class=\"line\"><span class=\"comment\">// 使用connect进行连接</span></div><div class=\"line\"><span class=\"keyword\">this</span>.wsPublish.connect();</div></pre></td></tr></table></figure></p>\n<p>之前本骚年也一直在调试这个代码，总是无法多个地方同时订阅，最后是在一篇RxJava的issue里面看到publish和connect的两个方法相关，才知道怎么使用。<br>毕竟在Rx发布的文档里面也没找到呢。</p>\n<h3 id=\"使用服务向websocket推送消息\"><a href=\"#使用服务向websocket推送消息\" class=\"headerlink\" title=\"使用服务向websocket推送消息\"></a>使用服务向websocket推送消息</h3><p>同上，在这里直接贴上使用的代码。<br><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 获得subject对象</span></div><div class=\"line\"><span class=\"keyword\">this</span>.wsSubject = <span class=\"keyword\">this</span>.monitorWsService.getSubject();</div><div class=\"line\"><span class=\"comment\">// 调用next方法向websocket发送消息</span></div><div class=\"line\"><span class=\"keyword\">this</span>.wsSubject.next(<span class=\"string\">'pitpat'</span>);</div></pre></td></tr></table></figure></p>\n<p>到这里，我们的websocket服务已经是可用的啦。不过使用的时候要注意angular2中依赖注入以及服务实例化、组件树这些呢，如果要多个组件使用同一个服务，就需要是同一个实例化的服务啦。</p>\n<h3 id=\"参考-1\"><a href=\"#参考-1\" class=\"headerlink\" title=\"参考\"></a>参考</h3><p>这里很大程度上参考了歪果仁的<a href=\"https://medium.com/@lwojciechowski/websockets-with-angular2-and-rxjs-8b6c5be02fac#.bxql1v9b5\" target=\"_blank\" rel=\"external\">《WebSockets with Angular2 and RxJS》</a>。</p>\n<h2 id=\"结束语\"><a href=\"#结束语\" class=\"headerlink\" title=\"结束语\"></a>结束语</h2><hr>\n<p>在使用Angular2的过程中，接触到了很多新的东西，像Observable、Subject等等，用不一样的方法编写一样的服务，其实也是个很有意思的事情呢，对于思维的拓展和转换很有帮助哟。</p>\n","excerpt":"<p>最近在学习Angular2作为前端的框架，《Angular2使用笔记》系列用于记录过程中的一些使用和解决方法。<br>本文在Angular2中使用Subject创建Websocket服务的过程。<br>","more":"</p>\n<p>关于RxJS的Observable相关的请移步上一篇<a href=\"https://godbasin.github.io/2016/11/06/angular2-notes-8-rxjs-in-angular2/\">《在Angular2中使用Observable对象》</a>。</p>\n<h2 id=\"认识Subject\"><a href=\"#认识Subject\" class=\"headerlink\" title=\"认识Subject\"></a>认识Subject</h2><hr>\n<h3 id=\"Subject\"><a href=\"#Subject\" class=\"headerlink\" title=\"Subject\"></a>Subject</h3><p>在RxJS中，Subject是一类特殊的Observable，它可以向多个Observer多路推送数值。普通的Observable并不具备多路推送的能力（每一个Observer都有自己独立的执行环境），而Subject可以共享一个执行环境。</p>\n<p>Subject是一种可以多路推送的可观察对象。与EventEmitter类似，Subject维护着自己的Observer。</p>\n<p>每一个Subject都是一个Observable（可观察对象）对于一个Subject，你可以订阅（subscribe）它，Observer会和往常一样接收到数据。从Observer的视角看，它并不能区分自己的执行环境是普通Observable的单路推送还是基于Subject的多路推送。</p>\n<p>Subject的内部实现中，并不会在被订阅（subscribe）后创建新的执行环境。它仅仅会把新的Observer注册在由它本身维护的Observer列表中，这和其他语言、库中的addListener机制类似。</p>\n<p>每一个Subject也可以作为Observer（观察者）Subject同样也是一个由next(v)，error(e)，和complete()这些方法组成的对象。调用next(theValue) 方法后，Subject会向所有已经在其上注册的Observer多路推送theValue。</p>\n<ul>\n<li><p>BehaviorSubject<br>BehaviorSubject是Subject的一个衍生类，具有“最新的值”的概念。它总是保存最近向数据消费者发送的值，当一个Observer订阅后，它会即刻从BehaviorSubject收到“最新的值”。</p>\n</li>\n<li><p>ReplaySubject<br>ReplaySubject如同于BehaviorSubject是Subject 的子类。通过 ReplaySubject可以向新的订阅者推送旧数值，就像一个录像机 ReplaySubject可以记录Observable的一部分状态（过去时间内推送的值）。一个ReplaySubject 可以记录Observable执行过程中推送的多个值，并向新的订阅者回放它们。</p>\n</li>\n<li><p>AsyncSubject<br>AsyncSubject是Subject的另外一个衍生类，Observable仅会在执行完成后，推送执行环境中的最后一个值。</p>\n</li>\n</ul>\n<h3 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h3><p>上面的内容都是从下面这篇文章里面粘贴过来的，该文章还有一些比较详细的例子，这里就不放出来，有兴趣的小伙伴自行进入呀。<br><a href=\"http://www.open-open.com/lib/view/open1462525661610.html\">《RxJS 核心概念之Subject》</a></p>\n<h2 id=\"使用Subject创建Websocket服务\"><a href=\"#使用Subject创建Websocket服务\" class=\"headerlink\" title=\"使用Subject创建Websocket服务\"></a>使用Subject创建Websocket服务</h2><hr>\n<p>上面也说过，Subject可以向多个Observer多路推送数值，这样的方式很适合用来写websocket的订阅呢。</p>\n<h3 id=\"注入相关的服务\"><a href=\"#注入相关的服务\" class=\"headerlink\" title=\"注入相关的服务\"></a>注入相关的服务</h3><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 注入Rx对象</span></div><div class=\"line\"><span class=\"keyword\">import</span> * as Rx from <span class=\"string\">'rxjs/Rx'</span>;</div><div class=\"line\"><span class=\"keyword\">import</span> &#123;Injectable&#125; from <span class=\"string\">'@angular/core'</span>;</div></pre></td></tr></table></figure>\n<h3 id=\"创建Subject\"><a href=\"#创建Subject\" class=\"headerlink\" title=\"创建Subject\"></a>创建Subject</h3><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 创建websocket对象</span></div><div class=\"line\"><span class=\"keyword\">let</span> ws = <span class=\"keyword\">new</span> WebSocket(<span class=\"keyword\">this</span>.wsUrl);</div><div class=\"line\"><span class=\"comment\">// 创建Observable对象</span></div><div class=\"line\"><span class=\"keyword\">let</span> observable = Rx.Observable.create(</div><div class=\"line\">  (obs: Rx.Observer &lt; <span class=\"built_in\">any</span> &gt; ) =&gt; &#123;</div><div class=\"line\">    <span class=\"comment\">// 当websocket获得推送内容的时候，调用next方法，并传入推送内容</span></div><div class=\"line\">        ws.onmessage = obs.next.bind(obs);</div><div class=\"line\">    <span class=\"comment\">// 当websocket出错的时候，调用error方法，并传入失败信息</span></div><div class=\"line\">    ws.onerror = obs.error.bind(obs);</div><div class=\"line\">    <span class=\"comment\">// 当websocket关闭的时候，调用complete方法</span></div><div class=\"line\">    ws.onclose = obs.complete.bind();</div><div class=\"line\">    <span class=\"keyword\">return</span> ws.close.bind(ws);</div><div class=\"line\">  &#125;</div><div class=\"line\">);</div><div class=\"line\"><span class=\"comment\">// 创建observer对象，用于向websocket发送信息</span></div><div class=\"line\"><span class=\"keyword\">let</span> observer = &#123;</div><div class=\"line\">  next: (value) =&gt; &#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (ws.readyState === WebSocket.OPEN) &#123;</div><div class=\"line\">      ws.send(value.toString());</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;,</div><div class=\"line\">&#125;;</div><div class=\"line\"><span class=\"comment\">// 使用Rx.Subject.create创建Subject对象</span></div><div class=\"line\"><span class=\"keyword\">return</span> Rx.Subject.create(observer, observable);</div></pre></td></tr></table></figure>\n<h3 id=\"创建完整的websocket服务\"><a href=\"#创建完整的websocket服务\" class=\"headerlink\" title=\"创建完整的websocket服务\"></a>创建完整的websocket服务</h3><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div></pre></td><td class=\"code\"><pre><div class=\"line\">Injectable()</div><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> WsService &#123;</div><div class=\"line\">    <span class=\"comment\">// 定义websocket服务地址，这里由于是同一个websocket，故在服务中写死</span></div><div class=\"line\">    wsUrl: <span class=\"built_in\">string</span> = <span class=\"string\">'ws://ip:port/websocket'</span>;</div><div class=\"line\">    <span class=\"comment\">// 用于保存当前subject对象</span></div><div class=\"line\">    subject: Rx.Subject&lt;<span class=\"built_in\">any</span>&gt;;</div><div class=\"line\">    <span class=\"comment\">// 用于保存当前subject对象publish后返回的可观察对象</span></div><div class=\"line\">    publish: Rx.ConnectableObservable&lt;<span class=\"built_in\">any</span>&gt;;</div><div class=\"line\">    num: <span class=\"built_in\">number</span> = <span class=\"number\">0</span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">private</span> create(): Rx.Subject&lt;<span class=\"built_in\">any</span>&gt;&#123;</div><div class=\"line\">        <span class=\"comment\">// 创建websocket对象</span></div><div class=\"line\">        <span class=\"keyword\">let</span> ws = <span class=\"keyword\">new</span> WebSocket(<span class=\"keyword\">this</span>.wsUrl);</div><div class=\"line\">        <span class=\"comment\">// 创建Observable对象</span></div><div class=\"line\">        <span class=\"keyword\">let</span> observable = Rx.Observable.create(</div><div class=\"line\">            (obs: Rx.Observer&lt;<span class=\"built_in\">any</span>&gt;) =&gt; &#123;</div><div class=\"line\">                <span class=\"comment\">// 当websocket获得推送内容的时候，调用next方法，并传入推送内容</span></div><div class=\"line\">                ws.onmessage = obs.next.bind(obs);</div><div class=\"line\">                <span class=\"comment\">// 当websocket出错的时候，调用error方法，并传入失败信息</span></div><div class=\"line\">                ws.onerror = obs.error.bind(obs);</div><div class=\"line\">                <span class=\"comment\">// 当websocket关闭的时候，调用complete方法</span></div><div class=\"line\">                ws.onclose = obs.complete.bind();</div><div class=\"line\">                <span class=\"keyword\">return</span> ws.close.bind(ws);</div><div class=\"line\">            &#125;</div><div class=\"line\">        );</div><div class=\"line\">        <span class=\"comment\">// 创建observer对象，用于向websocket发送信息</span></div><div class=\"line\">        <span class=\"keyword\">let</span> observer = &#123;</div><div class=\"line\">            next: (value) =&gt; &#123;</div><div class=\"line\">                <span class=\"keyword\">if</span> (ws.readyState === WebSocket.OPEN) &#123;</div><div class=\"line\">                    ws.send(value.toString());</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;,</div><div class=\"line\">        &#125;;</div><div class=\"line\">        <span class=\"comment\">// 使用Rx.Subject.create创建Subject对象</span></div><div class=\"line\">        <span class=\"keyword\">return</span> Rx.Subject.create(observer, observable);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// 获取subject对象接口</span></div><div class=\"line\">    getSubject() &#123;</div><div class=\"line\">      <span class=\"keyword\">if</span> (!<span class=\"keyword\">this</span>.subject) &#123;</div><div class=\"line\">        <span class=\"keyword\">this</span>.subject = <span class=\"keyword\">this</span>.create();</div><div class=\"line\">      &#125;</div><div class=\"line\">      <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.subject;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// 获取publish对象接口</span></div><div class=\"line\">    getPublish() &#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (!<span class=\"keyword\">this</span>.publish) &#123;</div><div class=\"line\">            <span class=\"keyword\">this</span>.publish = <span class=\"keyword\">this</span>.subject.publish();</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.publish;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"使用服务订阅websocket的推送消息\"><a href=\"#使用服务订阅websocket的推送消息\" class=\"headerlink\" title=\"使用服务订阅websocket的推送消息\"></a>使用服务订阅websocket的推送消息</h3><p>注入、实例化和获取服务这些我在这里就不详细讲啦，直接说明一下怎样使用。<br><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 获得可观察对象</span></div><div class=\"line\"><span class=\"keyword\">this</span>.wsPublish = <span class=\"keyword\">this</span>.monitorWsService.getPublish();</div><div class=\"line\"><span class=\"comment\">// 订阅消息，并保存到this.response中</span></div><div class=\"line\"><span class=\"keyword\">this</span>.wsPublish.subscribe(res =&gt; <span class=\"keyword\">this</span>.response);</div><div class=\"line\"><span class=\"comment\">// 使用connect进行连接</span></div><div class=\"line\"><span class=\"keyword\">this</span>.wsPublish.connect();</div></pre></td></tr></table></figure></p>\n<p>之前本骚年也一直在调试这个代码，总是无法多个地方同时订阅，最后是在一篇RxJava的issue里面看到publish和connect的两个方法相关，才知道怎么使用。<br>毕竟在Rx发布的文档里面也没找到呢。</p>\n<h3 id=\"使用服务向websocket推送消息\"><a href=\"#使用服务向websocket推送消息\" class=\"headerlink\" title=\"使用服务向websocket推送消息\"></a>使用服务向websocket推送消息</h3><p>同上，在这里直接贴上使用的代码。<br><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 获得subject对象</span></div><div class=\"line\"><span class=\"keyword\">this</span>.wsSubject = <span class=\"keyword\">this</span>.monitorWsService.getSubject();</div><div class=\"line\"><span class=\"comment\">// 调用next方法向websocket发送消息</span></div><div class=\"line\"><span class=\"keyword\">this</span>.wsSubject.next(<span class=\"string\">'pitpat'</span>);</div></pre></td></tr></table></figure></p>\n<p>到这里，我们的websocket服务已经是可用的啦。不过使用的时候要注意angular2中依赖注入以及服务实例化、组件树这些呢，如果要多个组件使用同一个服务，就需要是同一个实例化的服务啦。</p>\n<h3 id=\"参考-1\"><a href=\"#参考-1\" class=\"headerlink\" title=\"参考\"></a>参考</h3><p>这里很大程度上参考了歪果仁的<a href=\"https://medium.com/@lwojciechowski/websockets-with-angular2-and-rxjs-8b6c5be02fac#.bxql1v9b5\">《WebSockets with Angular2 and RxJS》</a>。</p>\n<h2 id=\"结束语\"><a href=\"#结束语\" class=\"headerlink\" title=\"结束语\"></a>结束语</h2><hr>\n<p>在使用Angular2的过程中，接触到了很多新的东西，像Observable、Subject等等，用不一样的方法编写一样的服务，其实也是个很有意思的事情呢，对于思维的拓展和转换很有帮助哟。</p>"},{"title":"做一个拖放功能的自定义页面","date":"2016-06-19T07:42:49.000Z","_content":"以前写过一个拖放功能的页面，用来搭建自定义移动端页面。本文介绍实现方法。\n<!--more-->\n\n项目放在github上，有兴趣的小伙伴可以下载玩玩看\n[DD-custom-pages](https://github.com/godbasin/godbasin.github.io/tree/blog-codes/DD-custom-pages)\n已经没有在维护了，也基本没优化，但还是挺有意思的一个项目\n\n最终效果图如下[点击查看页面](http://o907xb1mi.bkt.clouddn.com/index.html)\n![image](http://o905ne85q.bkt.clouddn.com/dd_custom_pages.png)\n\n\n## 基本页面搭建\n-----\n首先是最基本的页面搭建\n- 三个基本布局对象\n  - 1.左侧布局列表\n  - 2.中间页面效果\n  - 3.右侧控件列表\n- 对象的事件处理\n对象基本事件的编写\n  - 1.布局切换，以及自定义布局事件\n  - 2.控件切换，选择等\n  \n样式布局什么的，这里就略过啦，具体可参考[项目](https://github.com/godbasin/DD-custom-pages)\n\n## 绑定鼠标左键按下事件\n-----\n### 需要进行绑定的对象\n- 需要进行鼠标左键按下绑定的对象有两种：布局和控件\n- 布局分为两种：左侧布局列表获取、中间页面效果获取的布局，class为fix-layout和float-layout区分\n- 控件同理: 右侧控件列表获取、中间页面效果获取的控件，class为fix-target和float-target区分\n\n- 全局绑定鼠标鼠标左键按下事件\n由于该项目中鼠标事件几乎是最主要事件，因此采用全局绑定\n\n### 点击对象后进行处理\n- 设置拖动标志true，此时可进行鼠标移动事件的处理，后面会提及\n- 这里采用复制元素的方式，jQuery实现，$().clone()复制元素对象\n- 复制对象后，设置对象位置、大小等，这里设置拖动时将元素宽度减小为一般\n\n### 若对象位于页面效果内，进行相关处理\n- 若是对象为布局，则插入布局位置效果\n\n``` javascript\n//绑定事件，这里使用了jQuery\n$(document).on('mousedown', mouseDown);\nfunction mouseDown(e) {\n\t//获取左键点击事件\n\tif (e.which == 1) {\n\t\t//定位当前事件位置，并取出相关元素\n\t\tposition_target(e);\n\t\t//处理左侧布局列表获取的布局元素事件\n\t\tif ($(target).attr('class') == \"fix-layout\") {\n\t\t\tdragging = true; //设置拖动标志\n\t\t\ttarget = $(target).clone(); //复制元素\n\t\t\t$(target).removeClass(\"fix-layout\").addClass(\"move-layout\"); //拖动时元素样式\n\t\t\t$(\".container\").append(target); //将复制的元素添加到页面\n\t\t}\n\t\t//处理中间布局列表获取的布局元素事件\n\t\tif ($(target).attr('class') == \"float-layout\") {\n\t\t\tdragging = true; //设置拖动标志\n\t\t\t$(target).removeClass(\"float-layout\").addClass(\"move-layout\"); //拖动时元素样式\n\t\t\t$(\".container\").append(target); //将元素移动到页面\n\t\t}\n\t\t//处理右侧控件列表获取的控件元素事件\n\t\tif ($(target).attr('class') == \"fix-target\") {\n\t\t\tdragging = true; //设置拖动标志\n\t\t\ttarget = $(target).clone(); //复制元素\n\t\t\t$(target).removeClass(\"fix-target\").addClass(\"move-target\"); //拖动时元素样式\n\t\t\t$(\".container\").append(target); //将复制的元素添加到页面\n\t\t}\n\t\t//处理中间布局列表获取的控件元素事件\n\t\tif ($(target).attr('class') == \"float-target\") {\n\t\t\tdragging = true; //设置拖动标志\n\t\t\t$(target).removeClass(\"float-target\").addClass(\"move-target\"); //拖动时元素样式\n\t\t\t$(\".container\").append(target); //将元素移动到页面\n\t\t\t$(target).children(\".header, .footer, .nav, .content, .slider-7, .slider-8, .slider-9\").css(\"height\", \"auto\"); //拖动时元素内层控件样式\n\t\t\t$(target).children(\".listview-l\").css(\"height\", \"100px\"); //拖动时元素内层控件样式\n\t\t\t$(target).children(\".listview-s\").css(\"height\", \"50px\"); //拖动时元素内层控件样式\n\t\t}\n\t\t//判断是否有元素在拖动，将元素位置设置在当前鼠标位置\n\t\tif (dragging) {\n\t\t\tvar oX = getMousePos(e).x - $(target).width() / 2;\n\t\t\tvar oY = getMousePos(e).y - $(target).height() / 2;\n\t\t\t$(target).css({\n\t\t\t\t\"left\": oX + \"px\",\n\t\t\t\t\"top\": oY + \"px\"\n\t\t\t});\n\t\t}\n\t\t//定位当前事件位置，判断是否在合适的位置\n\t\t//若当前元素为布局，且位置为页面效果内，则添加提示，元素放置的位置\n\t\tposition_box(e);\n\t\tif ($(box).attr('id') == \"box\") {\n\t\t\tif ($(target).attr('class') == \"move-layout\" || $(target).attr('class') == \"move-layout-over\") {\n\t\t\t\t$(target).removeClass(\"move-layout\").addClass(\"move-layout-over\");\n\t\t\t\tif (dropping == false) {\n\t\t\t\t\tdrop = $(\"<div class='drop-layout'></div>\");\n\t\t\t\t\tmoveDrop();\n\t\t\t\t\t$(\"#box-content\").append(drop);\n\t\t\t\t\tdropping = true;\n\t\t\t\t} else {\n\t\t\t\t\t$(drop).remove();\n\t\t\t\t\tmoveDrop();\n\t\t\t\t\t$(\"#box-content\").append(drop);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn false;\n}\n```\n\n## 定位当前位置是否有特定元素\n-----\n- 使用鼠标定位获取相关布局或者控件对象\n这里可参考上一篇文章：[《js判断某个位置是否特定元素》](https://godbasin.github.io/2016/06/19/position-object/)\n\n- 获取当前鼠标位置\n``` javascript\nfunction getMousePos(event) {\n\tvar e = event || window.event;\n\tvar scrollX = document.documentElement.scrollLeft || document.body.scrollLeft;\n\tvar scrollY = document.documentElement.scrollTop || document.body.scrollTop;\n\tvar x = e.pageX || e.clientX + scrollX;\n\tvar y = e.pageY || e.clientY + scrollY;\n\treturn {\n\t\t'x': x,\n\t\t'y': y\n\t};\n}\n```\n\n- 定位当前位置是否有布局或者控件对象position_target\n``` javascript\nfunction position_target(e) {\n\tvar e = e || window.event;\n\tvar scrollX = document.documentElement.scrollLeft || document.body.scrollLeft;\n\tvar scrollY = document.documentElement.scrollTop || document.body.scrollTop;\n\tvar eventX = e.pageX - scrollX || e.clientX;\n\tvar eventY = e.pageY - scrollY || e.clientY;\n\ttarget = document.elementFromPoint(eventX, eventY);\n\ttarget = fnGetTable(target);\n}\nfunction fnGetTable(oEl) {\n\twhile (null != oEl && $(oEl).attr('class') != \"fix-target\" && $(oEl).attr('id') != \"set-layout\" && $(oEl).attr('id') != \"save-page\" && $(oEl).attr('class') != \"box-footer\" && $(oEl).attr('class') != \"to-edit\" && $(oEl).attr('class') != \"edit\" && $(oEl).attr('class') != \"container\" && $(oEl).attr('class') != \"float-target\" && $(oEl).attr('class') != \"fix-layout\" && $(oEl).attr('class') != \"float-layout\") {\n\t\toEl = oEl.parentElement;\n\t}\n\treturn oEl;\n}\n```\n- 定位当前位置是否有在页面效果的布局里position_target\n``` javascript\nfunction position_box(e) {\n\tvar e = e || window.event;\n\tvar scrollX = document.documentElement.scrollLeft || document.body.scrollLeft;\n\tvar scrollY = document.documentElement.scrollTop || document.body.scrollTop;\n\tvar eventX = e.pageX - scrollX || e.clientX;\n\tvar eventY = $(target).offset().top - 1 - scrollY;\n\tbox = document.elementFromPoint(eventX, eventY);\n\tbox = fnGetTable2(box);\n}\nfunction fnGetTable2(oEl) {\n\twhile (null != oEl && $(oEl).attr('id') != \"box\" && $(oEl).attr('class') != \"container\" && $(oEl).attr('data-type') != \"layout\") {\n\t\toEl = oEl.parentElement;\n\t}\n\treturn oEl;\n}\n```\n\n## 绑定鼠标移动事件\n-----\n### 需要进行的判断\n- 是否有正在拖动的布局或者控件\n- 当前鼠标位置是否在页面效果内，添加布局示意（蓝色框框表示即将添加布局的位置）\n- 当前鼠标位置是否在页面效果内的某个布局上方，在相应位置添加布局示意\n- 全局绑定鼠标移动事件\n\n``` javascript\n$(document).mousemove(function(e) {\n\t//判断是否有正在拖动的布局或者控件\n\tif (dragging) {\n\t\t//正在拖动的对象位置跟随鼠标移动\n\t\tvar oX = getMousePos(e).x - $(target).width() / 2;\n\t\tvar oY = getMousePos(e).y - $(target).height() / 2;\n\t\t$(target).css({\n\t\t\t\"left\": oX + \"px\",\n\t\t\t\"top\": oY + \"px\"\n\t\t});\n\t\t//定位当前事件位置\n\t\tposition_box(e);\n\t\t//判断当前位置在页面效果内，且在某个布局上方，布局示意添加在当前布局前方\n\t\tif ($(box).attr('data-type') == \"layout\" && $(box).parent().attr('class') == \"float-layout\") {\n\t\t\tif ($(target).attr('class') == \"move-layout\" || $(target).attr('class') == \"move-layout-over\") {\n\t\t\t\t$(target).removeClass(\"move-layout\").addClass(\"move-layout-over\");\n\t\t\t\tif (dropping == false) {\n\t\t\t\t\tdrop = $(\"<div class='drop-layout'></div>\");\n\t\t\t\t\tmoveDrop();\n\t\t\t\t\t$($(box).parent()).before(drop);\n\t\t\t\t\tdropping = true;\n\t\t\t\t} else {\n\t\t\t\t\t$(drop).remove();\n\t\t\t\t\tmoveDrop();\n\t\t\t\t\t$($(box).parent()).before(drop);\n\t\t\t\t}\n\t\t\t}\n\t\t//判断当前位置在页面效果内，且不在某个布局上方，布局示意添加在页面效果最后\n\t\t} else if ($(box).attr('id') == \"box\") {\n\t\t\tif ($(target).attr('class') == \"move-layout\" || $(target).attr('class') == \"move-layout-over\") {\n\t\t\t\t$(target).removeClass(\"move-layout\").addClass(\"move-layout-over\");\n\t\t\t\tif (dropping == false) {\n\t\t\t\t\tdrop = $(\"<div class='drop-layout'></div>\");\n\t\t\t\t\tmoveDrop();\n\t\t\t\t\t$(\"#box-content\").append(drop);\n\t\t\t\t\tdropping = true;\n\t\t\t\t} else {\n\t\t\t\t\t$(drop).remove();\n\t\t\t\t\tmoveDrop();\n\t\t\t\t\t$(\"#box-content\").append(drop);\n\t\t\t\t}\n\t\t\t}\n\t\t//判断当前位置不在页面效果内，移除布局示意\n\t\t} else {\n\t\t\tif ($(target).attr('class') == \"move-layout-over\") {\n\t\t\t\t$(target).removeClass(\"move-layout-over\").addClass(\"move-layout\");\n\t\t\t}\n\t\t\tif (dropping == true) {\n\t\t\t\t$(drop).remove();\n\t\t\t\tdropping = false;\n\t\t\t}\n\t\t}\n\t}\n\treturn false;\n});\n```\n\n## 绑定鼠标左键松开事件\n-----\n### 效果事件\n- 当前拖动的对象为布局，且当前鼠标位置是否在页面效果内，添加布局\n- 当前拖动的对象为控件，且当前鼠标位置是否在页面效果内某个布局上方，且该布局内无其他控件，添加控件至布局\n- 当前鼠标位置不在页面效果内，移除拖动的对象\n\n### 需要进行的判断\n- 是否有正在拖动的布局或者控件\n- 当前鼠标位置是否在页面效果内\n- 当前拖动的对象是否为布局，且当前鼠标位置是否在页面效果内\n- 当前拖动的对象是否为控件，且当前鼠标位置是否在页面效果内某个布局上方，该布局是否为空\n- 全局绑定鼠标左键松开事件\n\n``` javascript\n$(document).mouseup(function(e) {\n\t//定位当前事件位置\n\tposition_box(e);\n\te.cancelBubble = true;\n\t//判断是否有正在拖动的布局或者控件\n\tif (dragging == true) {\n\t\t//当前位置为页面效果内的某个布局上方，添加布局或者添加控件\n\t\tif (($(box).attr('data-type') == \"layout\" && $(box).parent().attr('class') == \"float-layout\") || ($(box).attr('data-type') == \"layout\" && $(box).parent().attr('data-type') == \"layout\")) {\n\t\t\tif ($(target).attr('class') == \"move-target\" && $(box).children().length == 0) {\n\t\t\t\t$(target).removeClass(\"move-target\").addClass(\"float-target\");\n\t\t\t\t$(target).children(\".header, .footer, .nav, .listview-l, .listview-s, .content, .slider-7, .slider-8, .slider-9\").css(\"height\", \"100%\");\n\t\t\t\t$(box).append(target);\n\t\t\t} else if ($(target).attr('class') == \"move-layout-over\") {\n\t\t\t\tif (dropping) {\n\t\t\t\t\t$(target).removeClass(\"move-layout-over\").addClass(\"float-layout\");\n\t\t\t\t\t$(drop).before($(target));\n\t\t\t\t}\n\t\t\t} else $(target).remove();\n\t\t//当前位置为页面效果内，添加布局\n\t\t} else if ($(box).attr('id') == \"box\") {\n\t\t\tif ($(target).attr('class') == \"move-layout-over\") {\n\t\t\t\tif (dropping) {\n\t\t\t\t\t$(target).removeClass(\"move-layout-over\").addClass(\"float-layout\");\n\t\t\t\t\t$(drop).before($(target));\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\t$(target).remove();\n\t\t\t}\n\t\t//当前鼠标位置不在页面效果内，移除拖动的对象\n\t\t} else {\n\t\t\t$(target).remove();\n\t\t}\n\t}\n\t$(drop).remove();\n\tdropping = false;\n\tdragging = false;\n});\n```\n\n## 完善后续处理\n-----\n- 编辑控件样式\n  - 在页面效果内的控件可进行编辑（改变颜色、内容等）\n- 保存页面效果\n  - 这里为了偷懒直接把整个html导出，将它导出保存到html页面内，并加载相应的样式\n  - 当然为了数据处理的方便，你也可以将这一切都转成数据保存到数据库，提取的时候进行相关处理就好了\n\n## 结束语\n-----\n有时候写些有意思的项目也是很不错的，脑洞要大大的，当然事后别忘了优化哦。","source":"_posts/drag-and-drop.md","raw":"---\ntitle: 做一个拖放功能的自定义页面\ndate: 2016-06-19 15:42:49\ncategories: js什锦\ntags: 原创部件\n---\n以前写过一个拖放功能的页面，用来搭建自定义移动端页面。本文介绍实现方法。\n<!--more-->\n\n项目放在github上，有兴趣的小伙伴可以下载玩玩看\n[DD-custom-pages](https://github.com/godbasin/godbasin.github.io/tree/blog-codes/DD-custom-pages)\n已经没有在维护了，也基本没优化，但还是挺有意思的一个项目\n\n最终效果图如下[点击查看页面](http://o907xb1mi.bkt.clouddn.com/index.html)\n![image](http://o905ne85q.bkt.clouddn.com/dd_custom_pages.png)\n\n\n## 基本页面搭建\n-----\n首先是最基本的页面搭建\n- 三个基本布局对象\n  - 1.左侧布局列表\n  - 2.中间页面效果\n  - 3.右侧控件列表\n- 对象的事件处理\n对象基本事件的编写\n  - 1.布局切换，以及自定义布局事件\n  - 2.控件切换，选择等\n  \n样式布局什么的，这里就略过啦，具体可参考[项目](https://github.com/godbasin/DD-custom-pages)\n\n## 绑定鼠标左键按下事件\n-----\n### 需要进行绑定的对象\n- 需要进行鼠标左键按下绑定的对象有两种：布局和控件\n- 布局分为两种：左侧布局列表获取、中间页面效果获取的布局，class为fix-layout和float-layout区分\n- 控件同理: 右侧控件列表获取、中间页面效果获取的控件，class为fix-target和float-target区分\n\n- 全局绑定鼠标鼠标左键按下事件\n由于该项目中鼠标事件几乎是最主要事件，因此采用全局绑定\n\n### 点击对象后进行处理\n- 设置拖动标志true，此时可进行鼠标移动事件的处理，后面会提及\n- 这里采用复制元素的方式，jQuery实现，$().clone()复制元素对象\n- 复制对象后，设置对象位置、大小等，这里设置拖动时将元素宽度减小为一般\n\n### 若对象位于页面效果内，进行相关处理\n- 若是对象为布局，则插入布局位置效果\n\n``` javascript\n//绑定事件，这里使用了jQuery\n$(document).on('mousedown', mouseDown);\nfunction mouseDown(e) {\n\t//获取左键点击事件\n\tif (e.which == 1) {\n\t\t//定位当前事件位置，并取出相关元素\n\t\tposition_target(e);\n\t\t//处理左侧布局列表获取的布局元素事件\n\t\tif ($(target).attr('class') == \"fix-layout\") {\n\t\t\tdragging = true; //设置拖动标志\n\t\t\ttarget = $(target).clone(); //复制元素\n\t\t\t$(target).removeClass(\"fix-layout\").addClass(\"move-layout\"); //拖动时元素样式\n\t\t\t$(\".container\").append(target); //将复制的元素添加到页面\n\t\t}\n\t\t//处理中间布局列表获取的布局元素事件\n\t\tif ($(target).attr('class') == \"float-layout\") {\n\t\t\tdragging = true; //设置拖动标志\n\t\t\t$(target).removeClass(\"float-layout\").addClass(\"move-layout\"); //拖动时元素样式\n\t\t\t$(\".container\").append(target); //将元素移动到页面\n\t\t}\n\t\t//处理右侧控件列表获取的控件元素事件\n\t\tif ($(target).attr('class') == \"fix-target\") {\n\t\t\tdragging = true; //设置拖动标志\n\t\t\ttarget = $(target).clone(); //复制元素\n\t\t\t$(target).removeClass(\"fix-target\").addClass(\"move-target\"); //拖动时元素样式\n\t\t\t$(\".container\").append(target); //将复制的元素添加到页面\n\t\t}\n\t\t//处理中间布局列表获取的控件元素事件\n\t\tif ($(target).attr('class') == \"float-target\") {\n\t\t\tdragging = true; //设置拖动标志\n\t\t\t$(target).removeClass(\"float-target\").addClass(\"move-target\"); //拖动时元素样式\n\t\t\t$(\".container\").append(target); //将元素移动到页面\n\t\t\t$(target).children(\".header, .footer, .nav, .content, .slider-7, .slider-8, .slider-9\").css(\"height\", \"auto\"); //拖动时元素内层控件样式\n\t\t\t$(target).children(\".listview-l\").css(\"height\", \"100px\"); //拖动时元素内层控件样式\n\t\t\t$(target).children(\".listview-s\").css(\"height\", \"50px\"); //拖动时元素内层控件样式\n\t\t}\n\t\t//判断是否有元素在拖动，将元素位置设置在当前鼠标位置\n\t\tif (dragging) {\n\t\t\tvar oX = getMousePos(e).x - $(target).width() / 2;\n\t\t\tvar oY = getMousePos(e).y - $(target).height() / 2;\n\t\t\t$(target).css({\n\t\t\t\t\"left\": oX + \"px\",\n\t\t\t\t\"top\": oY + \"px\"\n\t\t\t});\n\t\t}\n\t\t//定位当前事件位置，判断是否在合适的位置\n\t\t//若当前元素为布局，且位置为页面效果内，则添加提示，元素放置的位置\n\t\tposition_box(e);\n\t\tif ($(box).attr('id') == \"box\") {\n\t\t\tif ($(target).attr('class') == \"move-layout\" || $(target).attr('class') == \"move-layout-over\") {\n\t\t\t\t$(target).removeClass(\"move-layout\").addClass(\"move-layout-over\");\n\t\t\t\tif (dropping == false) {\n\t\t\t\t\tdrop = $(\"<div class='drop-layout'></div>\");\n\t\t\t\t\tmoveDrop();\n\t\t\t\t\t$(\"#box-content\").append(drop);\n\t\t\t\t\tdropping = true;\n\t\t\t\t} else {\n\t\t\t\t\t$(drop).remove();\n\t\t\t\t\tmoveDrop();\n\t\t\t\t\t$(\"#box-content\").append(drop);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn false;\n}\n```\n\n## 定位当前位置是否有特定元素\n-----\n- 使用鼠标定位获取相关布局或者控件对象\n这里可参考上一篇文章：[《js判断某个位置是否特定元素》](https://godbasin.github.io/2016/06/19/position-object/)\n\n- 获取当前鼠标位置\n``` javascript\nfunction getMousePos(event) {\n\tvar e = event || window.event;\n\tvar scrollX = document.documentElement.scrollLeft || document.body.scrollLeft;\n\tvar scrollY = document.documentElement.scrollTop || document.body.scrollTop;\n\tvar x = e.pageX || e.clientX + scrollX;\n\tvar y = e.pageY || e.clientY + scrollY;\n\treturn {\n\t\t'x': x,\n\t\t'y': y\n\t};\n}\n```\n\n- 定位当前位置是否有布局或者控件对象position_target\n``` javascript\nfunction position_target(e) {\n\tvar e = e || window.event;\n\tvar scrollX = document.documentElement.scrollLeft || document.body.scrollLeft;\n\tvar scrollY = document.documentElement.scrollTop || document.body.scrollTop;\n\tvar eventX = e.pageX - scrollX || e.clientX;\n\tvar eventY = e.pageY - scrollY || e.clientY;\n\ttarget = document.elementFromPoint(eventX, eventY);\n\ttarget = fnGetTable(target);\n}\nfunction fnGetTable(oEl) {\n\twhile (null != oEl && $(oEl).attr('class') != \"fix-target\" && $(oEl).attr('id') != \"set-layout\" && $(oEl).attr('id') != \"save-page\" && $(oEl).attr('class') != \"box-footer\" && $(oEl).attr('class') != \"to-edit\" && $(oEl).attr('class') != \"edit\" && $(oEl).attr('class') != \"container\" && $(oEl).attr('class') != \"float-target\" && $(oEl).attr('class') != \"fix-layout\" && $(oEl).attr('class') != \"float-layout\") {\n\t\toEl = oEl.parentElement;\n\t}\n\treturn oEl;\n}\n```\n- 定位当前位置是否有在页面效果的布局里position_target\n``` javascript\nfunction position_box(e) {\n\tvar e = e || window.event;\n\tvar scrollX = document.documentElement.scrollLeft || document.body.scrollLeft;\n\tvar scrollY = document.documentElement.scrollTop || document.body.scrollTop;\n\tvar eventX = e.pageX - scrollX || e.clientX;\n\tvar eventY = $(target).offset().top - 1 - scrollY;\n\tbox = document.elementFromPoint(eventX, eventY);\n\tbox = fnGetTable2(box);\n}\nfunction fnGetTable2(oEl) {\n\twhile (null != oEl && $(oEl).attr('id') != \"box\" && $(oEl).attr('class') != \"container\" && $(oEl).attr('data-type') != \"layout\") {\n\t\toEl = oEl.parentElement;\n\t}\n\treturn oEl;\n}\n```\n\n## 绑定鼠标移动事件\n-----\n### 需要进行的判断\n- 是否有正在拖动的布局或者控件\n- 当前鼠标位置是否在页面效果内，添加布局示意（蓝色框框表示即将添加布局的位置）\n- 当前鼠标位置是否在页面效果内的某个布局上方，在相应位置添加布局示意\n- 全局绑定鼠标移动事件\n\n``` javascript\n$(document).mousemove(function(e) {\n\t//判断是否有正在拖动的布局或者控件\n\tif (dragging) {\n\t\t//正在拖动的对象位置跟随鼠标移动\n\t\tvar oX = getMousePos(e).x - $(target).width() / 2;\n\t\tvar oY = getMousePos(e).y - $(target).height() / 2;\n\t\t$(target).css({\n\t\t\t\"left\": oX + \"px\",\n\t\t\t\"top\": oY + \"px\"\n\t\t});\n\t\t//定位当前事件位置\n\t\tposition_box(e);\n\t\t//判断当前位置在页面效果内，且在某个布局上方，布局示意添加在当前布局前方\n\t\tif ($(box).attr('data-type') == \"layout\" && $(box).parent().attr('class') == \"float-layout\") {\n\t\t\tif ($(target).attr('class') == \"move-layout\" || $(target).attr('class') == \"move-layout-over\") {\n\t\t\t\t$(target).removeClass(\"move-layout\").addClass(\"move-layout-over\");\n\t\t\t\tif (dropping == false) {\n\t\t\t\t\tdrop = $(\"<div class='drop-layout'></div>\");\n\t\t\t\t\tmoveDrop();\n\t\t\t\t\t$($(box).parent()).before(drop);\n\t\t\t\t\tdropping = true;\n\t\t\t\t} else {\n\t\t\t\t\t$(drop).remove();\n\t\t\t\t\tmoveDrop();\n\t\t\t\t\t$($(box).parent()).before(drop);\n\t\t\t\t}\n\t\t\t}\n\t\t//判断当前位置在页面效果内，且不在某个布局上方，布局示意添加在页面效果最后\n\t\t} else if ($(box).attr('id') == \"box\") {\n\t\t\tif ($(target).attr('class') == \"move-layout\" || $(target).attr('class') == \"move-layout-over\") {\n\t\t\t\t$(target).removeClass(\"move-layout\").addClass(\"move-layout-over\");\n\t\t\t\tif (dropping == false) {\n\t\t\t\t\tdrop = $(\"<div class='drop-layout'></div>\");\n\t\t\t\t\tmoveDrop();\n\t\t\t\t\t$(\"#box-content\").append(drop);\n\t\t\t\t\tdropping = true;\n\t\t\t\t} else {\n\t\t\t\t\t$(drop).remove();\n\t\t\t\t\tmoveDrop();\n\t\t\t\t\t$(\"#box-content\").append(drop);\n\t\t\t\t}\n\t\t\t}\n\t\t//判断当前位置不在页面效果内，移除布局示意\n\t\t} else {\n\t\t\tif ($(target).attr('class') == \"move-layout-over\") {\n\t\t\t\t$(target).removeClass(\"move-layout-over\").addClass(\"move-layout\");\n\t\t\t}\n\t\t\tif (dropping == true) {\n\t\t\t\t$(drop).remove();\n\t\t\t\tdropping = false;\n\t\t\t}\n\t\t}\n\t}\n\treturn false;\n});\n```\n\n## 绑定鼠标左键松开事件\n-----\n### 效果事件\n- 当前拖动的对象为布局，且当前鼠标位置是否在页面效果内，添加布局\n- 当前拖动的对象为控件，且当前鼠标位置是否在页面效果内某个布局上方，且该布局内无其他控件，添加控件至布局\n- 当前鼠标位置不在页面效果内，移除拖动的对象\n\n### 需要进行的判断\n- 是否有正在拖动的布局或者控件\n- 当前鼠标位置是否在页面效果内\n- 当前拖动的对象是否为布局，且当前鼠标位置是否在页面效果内\n- 当前拖动的对象是否为控件，且当前鼠标位置是否在页面效果内某个布局上方，该布局是否为空\n- 全局绑定鼠标左键松开事件\n\n``` javascript\n$(document).mouseup(function(e) {\n\t//定位当前事件位置\n\tposition_box(e);\n\te.cancelBubble = true;\n\t//判断是否有正在拖动的布局或者控件\n\tif (dragging == true) {\n\t\t//当前位置为页面效果内的某个布局上方，添加布局或者添加控件\n\t\tif (($(box).attr('data-type') == \"layout\" && $(box).parent().attr('class') == \"float-layout\") || ($(box).attr('data-type') == \"layout\" && $(box).parent().attr('data-type') == \"layout\")) {\n\t\t\tif ($(target).attr('class') == \"move-target\" && $(box).children().length == 0) {\n\t\t\t\t$(target).removeClass(\"move-target\").addClass(\"float-target\");\n\t\t\t\t$(target).children(\".header, .footer, .nav, .listview-l, .listview-s, .content, .slider-7, .slider-8, .slider-9\").css(\"height\", \"100%\");\n\t\t\t\t$(box).append(target);\n\t\t\t} else if ($(target).attr('class') == \"move-layout-over\") {\n\t\t\t\tif (dropping) {\n\t\t\t\t\t$(target).removeClass(\"move-layout-over\").addClass(\"float-layout\");\n\t\t\t\t\t$(drop).before($(target));\n\t\t\t\t}\n\t\t\t} else $(target).remove();\n\t\t//当前位置为页面效果内，添加布局\n\t\t} else if ($(box).attr('id') == \"box\") {\n\t\t\tif ($(target).attr('class') == \"move-layout-over\") {\n\t\t\t\tif (dropping) {\n\t\t\t\t\t$(target).removeClass(\"move-layout-over\").addClass(\"float-layout\");\n\t\t\t\t\t$(drop).before($(target));\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\t$(target).remove();\n\t\t\t}\n\t\t//当前鼠标位置不在页面效果内，移除拖动的对象\n\t\t} else {\n\t\t\t$(target).remove();\n\t\t}\n\t}\n\t$(drop).remove();\n\tdropping = false;\n\tdragging = false;\n});\n```\n\n## 完善后续处理\n-----\n- 编辑控件样式\n  - 在页面效果内的控件可进行编辑（改变颜色、内容等）\n- 保存页面效果\n  - 这里为了偷懒直接把整个html导出，将它导出保存到html页面内，并加载相应的样式\n  - 当然为了数据处理的方便，你也可以将这一切都转成数据保存到数据库，提取的时候进行相关处理就好了\n\n## 结束语\n-----\n有时候写些有意思的项目也是很不错的，脑洞要大大的，当然事后别忘了优化哦。","slug":"drag-and-drop","published":1,"updated":"2016-08-20T10:54:21.075Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cix45hufy002axotujctydwj4","content":"<p>以前写过一个拖放功能的页面，用来搭建自定义移动端页面。本文介绍实现方法。<br><a id=\"more\"></a></p>\n<p>项目放在github上，有兴趣的小伙伴可以下载玩玩看<br><a href=\"https://github.com/godbasin/godbasin.github.io/tree/blog-codes/DD-custom-pages\" target=\"_blank\" rel=\"external\">DD-custom-pages</a><br>已经没有在维护了，也基本没优化，但还是挺有意思的一个项目</p>\n<p>最终效果图如下<a href=\"http://o907xb1mi.bkt.clouddn.com/index.html\" target=\"_blank\" rel=\"external\">点击查看页面</a><br><img src=\"http://o905ne85q.bkt.clouddn.com/dd_custom_pages.png\" alt=\"image\"></p>\n<h2 id=\"基本页面搭建\"><a href=\"#基本页面搭建\" class=\"headerlink\" title=\"基本页面搭建\"></a>基本页面搭建</h2><hr>\n<p>首先是最基本的页面搭建</p>\n<ul>\n<li>三个基本布局对象<ul>\n<li>1.左侧布局列表</li>\n<li>2.中间页面效果</li>\n<li>3.右侧控件列表</li>\n</ul>\n</li>\n<li>对象的事件处理<br>对象基本事件的编写<ul>\n<li>1.布局切换，以及自定义布局事件</li>\n<li>2.控件切换，选择等</li>\n</ul>\n</li>\n</ul>\n<p>样式布局什么的，这里就略过啦，具体可参考<a href=\"https://github.com/godbasin/DD-custom-pages\" target=\"_blank\" rel=\"external\">项目</a></p>\n<h2 id=\"绑定鼠标左键按下事件\"><a href=\"#绑定鼠标左键按下事件\" class=\"headerlink\" title=\"绑定鼠标左键按下事件\"></a>绑定鼠标左键按下事件</h2><hr>\n<h3 id=\"需要进行绑定的对象\"><a href=\"#需要进行绑定的对象\" class=\"headerlink\" title=\"需要进行绑定的对象\"></a>需要进行绑定的对象</h3><ul>\n<li>需要进行鼠标左键按下绑定的对象有两种：布局和控件</li>\n<li>布局分为两种：左侧布局列表获取、中间页面效果获取的布局，class为fix-layout和float-layout区分</li>\n<li><p>控件同理: 右侧控件列表获取、中间页面效果获取的控件，class为fix-target和float-target区分</p>\n</li>\n<li><p>全局绑定鼠标鼠标左键按下事件<br>由于该项目中鼠标事件几乎是最主要事件，因此采用全局绑定</p>\n</li>\n</ul>\n<h3 id=\"点击对象后进行处理\"><a href=\"#点击对象后进行处理\" class=\"headerlink\" title=\"点击对象后进行处理\"></a>点击对象后进行处理</h3><ul>\n<li>设置拖动标志true，此时可进行鼠标移动事件的处理，后面会提及</li>\n<li>这里采用复制元素的方式，jQuery实现，$().clone()复制元素对象</li>\n<li>复制对象后，设置对象位置、大小等，这里设置拖动时将元素宽度减小为一般</li>\n</ul>\n<h3 id=\"若对象位于页面效果内，进行相关处理\"><a href=\"#若对象位于页面效果内，进行相关处理\" class=\"headerlink\" title=\"若对象位于页面效果内，进行相关处理\"></a>若对象位于页面效果内，进行相关处理</h3><ul>\n<li>若是对象为布局，则插入布局位置效果</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//绑定事件，这里使用了jQuery</span></div><div class=\"line\">$(<span class=\"built_in\">document</span>).on(<span class=\"string\">'mousedown'</span>, mouseDown);</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">mouseDown</span>(<span class=\"params\">e</span>) </span>&#123;</div><div class=\"line\">  <span class=\"comment\">//获取左键点击事件</span></div><div class=\"line\">  <span class=\"keyword\">if</span> (e.which == <span class=\"number\">1</span>) &#123;</div><div class=\"line\">    <span class=\"comment\">//定位当前事件位置，并取出相关元素</span></div><div class=\"line\">    position_target(e);</div><div class=\"line\">    <span class=\"comment\">//处理左侧布局列表获取的布局元素事件</span></div><div class=\"line\">    <span class=\"keyword\">if</span> ($(target).attr(<span class=\"string\">'class'</span>) == <span class=\"string\">\"fix-layout\"</span>) &#123;</div><div class=\"line\">      dragging = <span class=\"literal\">true</span>; <span class=\"comment\">//设置拖动标志</span></div><div class=\"line\">      target = $(target).clone(); <span class=\"comment\">//复制元素</span></div><div class=\"line\">      $(target).removeClass(<span class=\"string\">\"fix-layout\"</span>).addClass(<span class=\"string\">\"move-layout\"</span>); <span class=\"comment\">//拖动时元素样式</span></div><div class=\"line\">      $(<span class=\"string\">\".container\"</span>).append(target); <span class=\"comment\">//将复制的元素添加到页面</span></div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"comment\">//处理中间布局列表获取的布局元素事件</span></div><div class=\"line\">    <span class=\"keyword\">if</span> ($(target).attr(<span class=\"string\">'class'</span>) == <span class=\"string\">\"float-layout\"</span>) &#123;</div><div class=\"line\">      dragging = <span class=\"literal\">true</span>; <span class=\"comment\">//设置拖动标志</span></div><div class=\"line\">      $(target).removeClass(<span class=\"string\">\"float-layout\"</span>).addClass(<span class=\"string\">\"move-layout\"</span>); <span class=\"comment\">//拖动时元素样式</span></div><div class=\"line\">      $(<span class=\"string\">\".container\"</span>).append(target); <span class=\"comment\">//将元素移动到页面</span></div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"comment\">//处理右侧控件列表获取的控件元素事件</span></div><div class=\"line\">    <span class=\"keyword\">if</span> ($(target).attr(<span class=\"string\">'class'</span>) == <span class=\"string\">\"fix-target\"</span>) &#123;</div><div class=\"line\">      dragging = <span class=\"literal\">true</span>; <span class=\"comment\">//设置拖动标志</span></div><div class=\"line\">      target = $(target).clone(); <span class=\"comment\">//复制元素</span></div><div class=\"line\">      $(target).removeClass(<span class=\"string\">\"fix-target\"</span>).addClass(<span class=\"string\">\"move-target\"</span>); <span class=\"comment\">//拖动时元素样式</span></div><div class=\"line\">      $(<span class=\"string\">\".container\"</span>).append(target); <span class=\"comment\">//将复制的元素添加到页面</span></div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"comment\">//处理中间布局列表获取的控件元素事件</span></div><div class=\"line\">    <span class=\"keyword\">if</span> ($(target).attr(<span class=\"string\">'class'</span>) == <span class=\"string\">\"float-target\"</span>) &#123;</div><div class=\"line\">      dragging = <span class=\"literal\">true</span>; <span class=\"comment\">//设置拖动标志</span></div><div class=\"line\">      $(target).removeClass(<span class=\"string\">\"float-target\"</span>).addClass(<span class=\"string\">\"move-target\"</span>); <span class=\"comment\">//拖动时元素样式</span></div><div class=\"line\">      $(<span class=\"string\">\".container\"</span>).append(target); <span class=\"comment\">//将元素移动到页面</span></div><div class=\"line\">      $(target).children(<span class=\"string\">\".header, .footer, .nav, .content, .slider-7, .slider-8, .slider-9\"</span>).css(<span class=\"string\">\"height\"</span>, <span class=\"string\">\"auto\"</span>); <span class=\"comment\">//拖动时元素内层控件样式</span></div><div class=\"line\">      $(target).children(<span class=\"string\">\".listview-l\"</span>).css(<span class=\"string\">\"height\"</span>, <span class=\"string\">\"100px\"</span>); <span class=\"comment\">//拖动时元素内层控件样式</span></div><div class=\"line\">      $(target).children(<span class=\"string\">\".listview-s\"</span>).css(<span class=\"string\">\"height\"</span>, <span class=\"string\">\"50px\"</span>); <span class=\"comment\">//拖动时元素内层控件样式</span></div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"comment\">//判断是否有元素在拖动，将元素位置设置在当前鼠标位置</span></div><div class=\"line\">    <span class=\"keyword\">if</span> (dragging) &#123;</div><div class=\"line\">      <span class=\"keyword\">var</span> oX = getMousePos(e).x - $(target).width() / <span class=\"number\">2</span>;</div><div class=\"line\">      <span class=\"keyword\">var</span> oY = getMousePos(e).y - $(target).height() / <span class=\"number\">2</span>;</div><div class=\"line\">      $(target).css(&#123;</div><div class=\"line\">        <span class=\"string\">\"left\"</span>: oX + <span class=\"string\">\"px\"</span>,</div><div class=\"line\">        <span class=\"string\">\"top\"</span>: oY + <span class=\"string\">\"px\"</span></div><div class=\"line\">      &#125;);</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"comment\">//定位当前事件位置，判断是否在合适的位置</span></div><div class=\"line\">    <span class=\"comment\">//若当前元素为布局，且位置为页面效果内，则添加提示，元素放置的位置</span></div><div class=\"line\">    position_box(e);</div><div class=\"line\">    <span class=\"keyword\">if</span> ($(box).attr(<span class=\"string\">'id'</span>) == <span class=\"string\">\"box\"</span>) &#123;</div><div class=\"line\">      <span class=\"keyword\">if</span> ($(target).attr(<span class=\"string\">'class'</span>) == <span class=\"string\">\"move-layout\"</span> || $(target).attr(<span class=\"string\">'class'</span>) == <span class=\"string\">\"move-layout-over\"</span>) &#123;</div><div class=\"line\">        $(target).removeClass(<span class=\"string\">\"move-layout\"</span>).addClass(<span class=\"string\">\"move-layout-over\"</span>);</div><div class=\"line\">        <span class=\"keyword\">if</span> (dropping == <span class=\"literal\">false</span>) &#123;</div><div class=\"line\">          drop = $(<span class=\"string\">\"&lt;div class='drop-layout'&gt;&lt;/div&gt;\"</span>);</div><div class=\"line\">          moveDrop();</div><div class=\"line\">          $(<span class=\"string\">\"#box-content\"</span>).append(drop);</div><div class=\"line\">          dropping = <span class=\"literal\">true</span>;</div><div class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">          $(drop).remove();</div><div class=\"line\">          moveDrop();</div><div class=\"line\">          $(<span class=\"string\">\"#box-content\"</span>).append(drop);</div><div class=\"line\">        &#125;</div><div class=\"line\">      &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\">  <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"定位当前位置是否有特定元素\"><a href=\"#定位当前位置是否有特定元素\" class=\"headerlink\" title=\"定位当前位置是否有特定元素\"></a>定位当前位置是否有特定元素</h2><hr>\n<ul>\n<li><p>使用鼠标定位获取相关布局或者控件对象<br>这里可参考上一篇文章：<a href=\"https://godbasin.github.io/2016/06/19/position-object/\">《js判断某个位置是否特定元素》</a></p>\n</li>\n<li><p>获取当前鼠标位置</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getMousePos</span>(<span class=\"params\">event</span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">var</span> e = event || <span class=\"built_in\">window</span>.event;</div><div class=\"line\">  <span class=\"keyword\">var</span> scrollX = <span class=\"built_in\">document</span>.documentElement.scrollLeft || <span class=\"built_in\">document</span>.body.scrollLeft;</div><div class=\"line\">  <span class=\"keyword\">var</span> scrollY = <span class=\"built_in\">document</span>.documentElement.scrollTop || <span class=\"built_in\">document</span>.body.scrollTop;</div><div class=\"line\">  <span class=\"keyword\">var</span> x = e.pageX || e.clientX + scrollX;</div><div class=\"line\">  <span class=\"keyword\">var</span> y = e.pageY || e.clientY + scrollY;</div><div class=\"line\">  <span class=\"keyword\">return</span> &#123;</div><div class=\"line\">    <span class=\"string\">'x'</span>: x,</div><div class=\"line\">    <span class=\"string\">'y'</span>: y</div><div class=\"line\">  &#125;;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n<li><p>定位当前位置是否有布局或者控件对象position_target</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">position_target</span>(<span class=\"params\">e</span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">var</span> e = e || <span class=\"built_in\">window</span>.event;</div><div class=\"line\">  <span class=\"keyword\">var</span> scrollX = <span class=\"built_in\">document</span>.documentElement.scrollLeft || <span class=\"built_in\">document</span>.body.scrollLeft;</div><div class=\"line\">  <span class=\"keyword\">var</span> scrollY = <span class=\"built_in\">document</span>.documentElement.scrollTop || <span class=\"built_in\">document</span>.body.scrollTop;</div><div class=\"line\">  <span class=\"keyword\">var</span> eventX = e.pageX - scrollX || e.clientX;</div><div class=\"line\">  <span class=\"keyword\">var</span> eventY = e.pageY - scrollY || e.clientY;</div><div class=\"line\">  target = <span class=\"built_in\">document</span>.elementFromPoint(eventX, eventY);</div><div class=\"line\">  target = fnGetTable(target);</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fnGetTable</span>(<span class=\"params\">oEl</span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">while</span> (<span class=\"literal\">null</span> != oEl &amp;&amp; $(oEl).attr(<span class=\"string\">'class'</span>) != <span class=\"string\">\"fix-target\"</span> &amp;&amp; $(oEl).attr(<span class=\"string\">'id'</span>) != <span class=\"string\">\"set-layout\"</span> &amp;&amp; $(oEl).attr(<span class=\"string\">'id'</span>) != <span class=\"string\">\"save-page\"</span> &amp;&amp; $(oEl).attr(<span class=\"string\">'class'</span>) != <span class=\"string\">\"box-footer\"</span> &amp;&amp; $(oEl).attr(<span class=\"string\">'class'</span>) != <span class=\"string\">\"to-edit\"</span> &amp;&amp; $(oEl).attr(<span class=\"string\">'class'</span>) != <span class=\"string\">\"edit\"</span> &amp;&amp; $(oEl).attr(<span class=\"string\">'class'</span>) != <span class=\"string\">\"container\"</span> &amp;&amp; $(oEl).attr(<span class=\"string\">'class'</span>) != <span class=\"string\">\"float-target\"</span> &amp;&amp; $(oEl).attr(<span class=\"string\">'class'</span>) != <span class=\"string\">\"fix-layout\"</span> &amp;&amp; $(oEl).attr(<span class=\"string\">'class'</span>) != <span class=\"string\">\"float-layout\"</span>) &#123;</div><div class=\"line\">    oEl = oEl.parentElement;</div><div class=\"line\">  &#125;</div><div class=\"line\">  <span class=\"keyword\">return</span> oEl;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n<li><p>定位当前位置是否有在页面效果的布局里position_target</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">position_box</span>(<span class=\"params\">e</span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">var</span> e = e || <span class=\"built_in\">window</span>.event;</div><div class=\"line\">  <span class=\"keyword\">var</span> scrollX = <span class=\"built_in\">document</span>.documentElement.scrollLeft || <span class=\"built_in\">document</span>.body.scrollLeft;</div><div class=\"line\">  <span class=\"keyword\">var</span> scrollY = <span class=\"built_in\">document</span>.documentElement.scrollTop || <span class=\"built_in\">document</span>.body.scrollTop;</div><div class=\"line\">  <span class=\"keyword\">var</span> eventX = e.pageX - scrollX || e.clientX;</div><div class=\"line\">  <span class=\"keyword\">var</span> eventY = $(target).offset().top - <span class=\"number\">1</span> - scrollY;</div><div class=\"line\">  box = <span class=\"built_in\">document</span>.elementFromPoint(eventX, eventY);</div><div class=\"line\">  box = fnGetTable2(box);</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fnGetTable2</span>(<span class=\"params\">oEl</span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">while</span> (<span class=\"literal\">null</span> != oEl &amp;&amp; $(oEl).attr(<span class=\"string\">'id'</span>) != <span class=\"string\">\"box\"</span> &amp;&amp; $(oEl).attr(<span class=\"string\">'class'</span>) != <span class=\"string\">\"container\"</span> &amp;&amp; $(oEl).attr(<span class=\"string\">'data-type'</span>) != <span class=\"string\">\"layout\"</span>) &#123;</div><div class=\"line\">    oEl = oEl.parentElement;</div><div class=\"line\">  &#125;</div><div class=\"line\">  <span class=\"keyword\">return</span> oEl;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<h2 id=\"绑定鼠标移动事件\"><a href=\"#绑定鼠标移动事件\" class=\"headerlink\" title=\"绑定鼠标移动事件\"></a>绑定鼠标移动事件</h2><hr>\n<h3 id=\"需要进行的判断\"><a href=\"#需要进行的判断\" class=\"headerlink\" title=\"需要进行的判断\"></a>需要进行的判断</h3><ul>\n<li>是否有正在拖动的布局或者控件</li>\n<li>当前鼠标位置是否在页面效果内，添加布局示意（蓝色框框表示即将添加布局的位置）</li>\n<li>当前鼠标位置是否在页面效果内的某个布局上方，在相应位置添加布局示意</li>\n<li>全局绑定鼠标移动事件</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div></pre></td><td class=\"code\"><pre><div class=\"line\">$(<span class=\"built_in\">document</span>).mousemove(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">e</span>) </span>&#123;</div><div class=\"line\">  <span class=\"comment\">//判断是否有正在拖动的布局或者控件</span></div><div class=\"line\">  <span class=\"keyword\">if</span> (dragging) &#123;</div><div class=\"line\">    <span class=\"comment\">//正在拖动的对象位置跟随鼠标移动</span></div><div class=\"line\">    <span class=\"keyword\">var</span> oX = getMousePos(e).x - $(target).width() / <span class=\"number\">2</span>;</div><div class=\"line\">    <span class=\"keyword\">var</span> oY = getMousePos(e).y - $(target).height() / <span class=\"number\">2</span>;</div><div class=\"line\">    $(target).css(&#123;</div><div class=\"line\">      <span class=\"string\">\"left\"</span>: oX + <span class=\"string\">\"px\"</span>,</div><div class=\"line\">      <span class=\"string\">\"top\"</span>: oY + <span class=\"string\">\"px\"</span></div><div class=\"line\">    &#125;);</div><div class=\"line\">    <span class=\"comment\">//定位当前事件位置</span></div><div class=\"line\">    position_box(e);</div><div class=\"line\">    <span class=\"comment\">//判断当前位置在页面效果内，且在某个布局上方，布局示意添加在当前布局前方</span></div><div class=\"line\">    <span class=\"keyword\">if</span> ($(box).attr(<span class=\"string\">'data-type'</span>) == <span class=\"string\">\"layout\"</span> &amp;&amp; $(box).parent().attr(<span class=\"string\">'class'</span>) == <span class=\"string\">\"float-layout\"</span>) &#123;</div><div class=\"line\">      <span class=\"keyword\">if</span> ($(target).attr(<span class=\"string\">'class'</span>) == <span class=\"string\">\"move-layout\"</span> || $(target).attr(<span class=\"string\">'class'</span>) == <span class=\"string\">\"move-layout-over\"</span>) &#123;</div><div class=\"line\">        $(target).removeClass(<span class=\"string\">\"move-layout\"</span>).addClass(<span class=\"string\">\"move-layout-over\"</span>);</div><div class=\"line\">        <span class=\"keyword\">if</span> (dropping == <span class=\"literal\">false</span>) &#123;</div><div class=\"line\">          drop = $(<span class=\"string\">\"&lt;div class='drop-layout'&gt;&lt;/div&gt;\"</span>);</div><div class=\"line\">          moveDrop();</div><div class=\"line\">          $($(box).parent()).before(drop);</div><div class=\"line\">          dropping = <span class=\"literal\">true</span>;</div><div class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">          $(drop).remove();</div><div class=\"line\">          moveDrop();</div><div class=\"line\">          $($(box).parent()).before(drop);</div><div class=\"line\">        &#125;</div><div class=\"line\">      &#125;</div><div class=\"line\">    <span class=\"comment\">//判断当前位置在页面效果内，且不在某个布局上方，布局示意添加在页面效果最后</span></div><div class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> ($(box).attr(<span class=\"string\">'id'</span>) == <span class=\"string\">\"box\"</span>) &#123;</div><div class=\"line\">      <span class=\"keyword\">if</span> ($(target).attr(<span class=\"string\">'class'</span>) == <span class=\"string\">\"move-layout\"</span> || $(target).attr(<span class=\"string\">'class'</span>) == <span class=\"string\">\"move-layout-over\"</span>) &#123;</div><div class=\"line\">        $(target).removeClass(<span class=\"string\">\"move-layout\"</span>).addClass(<span class=\"string\">\"move-layout-over\"</span>);</div><div class=\"line\">        <span class=\"keyword\">if</span> (dropping == <span class=\"literal\">false</span>) &#123;</div><div class=\"line\">          drop = $(<span class=\"string\">\"&lt;div class='drop-layout'&gt;&lt;/div&gt;\"</span>);</div><div class=\"line\">          moveDrop();</div><div class=\"line\">          $(<span class=\"string\">\"#box-content\"</span>).append(drop);</div><div class=\"line\">          dropping = <span class=\"literal\">true</span>;</div><div class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">          $(drop).remove();</div><div class=\"line\">          moveDrop();</div><div class=\"line\">          $(<span class=\"string\">\"#box-content\"</span>).append(drop);</div><div class=\"line\">        &#125;</div><div class=\"line\">      &#125;</div><div class=\"line\">    <span class=\"comment\">//判断当前位置不在页面效果内，移除布局示意</span></div><div class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">      <span class=\"keyword\">if</span> ($(target).attr(<span class=\"string\">'class'</span>) == <span class=\"string\">\"move-layout-over\"</span>) &#123;</div><div class=\"line\">        $(target).removeClass(<span class=\"string\">\"move-layout-over\"</span>).addClass(<span class=\"string\">\"move-layout\"</span>);</div><div class=\"line\">      &#125;</div><div class=\"line\">      <span class=\"keyword\">if</span> (dropping == <span class=\"literal\">true</span>) &#123;</div><div class=\"line\">        $(drop).remove();</div><div class=\"line\">        dropping = <span class=\"literal\">false</span>;</div><div class=\"line\">      &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\">  <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<h2 id=\"绑定鼠标左键松开事件\"><a href=\"#绑定鼠标左键松开事件\" class=\"headerlink\" title=\"绑定鼠标左键松开事件\"></a>绑定鼠标左键松开事件</h2><hr>\n<h3 id=\"效果事件\"><a href=\"#效果事件\" class=\"headerlink\" title=\"效果事件\"></a>效果事件</h3><ul>\n<li>当前拖动的对象为布局，且当前鼠标位置是否在页面效果内，添加布局</li>\n<li>当前拖动的对象为控件，且当前鼠标位置是否在页面效果内某个布局上方，且该布局内无其他控件，添加控件至布局</li>\n<li>当前鼠标位置不在页面效果内，移除拖动的对象</li>\n</ul>\n<h3 id=\"需要进行的判断-1\"><a href=\"#需要进行的判断-1\" class=\"headerlink\" title=\"需要进行的判断\"></a>需要进行的判断</h3><ul>\n<li>是否有正在拖动的布局或者控件</li>\n<li>当前鼠标位置是否在页面效果内</li>\n<li>当前拖动的对象是否为布局，且当前鼠标位置是否在页面效果内</li>\n<li>当前拖动的对象是否为控件，且当前鼠标位置是否在页面效果内某个布局上方，该布局是否为空</li>\n<li>全局绑定鼠标左键松开事件</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div></pre></td><td class=\"code\"><pre><div class=\"line\">$(<span class=\"built_in\">document</span>).mouseup(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">e</span>) </span>&#123;</div><div class=\"line\">  <span class=\"comment\">//定位当前事件位置</span></div><div class=\"line\">  position_box(e);</div><div class=\"line\">  e.cancelBubble = <span class=\"literal\">true</span>;</div><div class=\"line\">  <span class=\"comment\">//判断是否有正在拖动的布局或者控件</span></div><div class=\"line\">  <span class=\"keyword\">if</span> (dragging == <span class=\"literal\">true</span>) &#123;</div><div class=\"line\">    <span class=\"comment\">//当前位置为页面效果内的某个布局上方，添加布局或者添加控件</span></div><div class=\"line\">    <span class=\"keyword\">if</span> (($(box).attr(<span class=\"string\">'data-type'</span>) == <span class=\"string\">\"layout\"</span> &amp;&amp; $(box).parent().attr(<span class=\"string\">'class'</span>) == <span class=\"string\">\"float-layout\"</span>) || ($(box).attr(<span class=\"string\">'data-type'</span>) == <span class=\"string\">\"layout\"</span> &amp;&amp; $(box).parent().attr(<span class=\"string\">'data-type'</span>) == <span class=\"string\">\"layout\"</span>)) &#123;</div><div class=\"line\">      <span class=\"keyword\">if</span> ($(target).attr(<span class=\"string\">'class'</span>) == <span class=\"string\">\"move-target\"</span> &amp;&amp; $(box).children().length == <span class=\"number\">0</span>) &#123;</div><div class=\"line\">        $(target).removeClass(<span class=\"string\">\"move-target\"</span>).addClass(<span class=\"string\">\"float-target\"</span>);</div><div class=\"line\">        $(target).children(<span class=\"string\">\".header, .footer, .nav, .listview-l, .listview-s, .content, .slider-7, .slider-8, .slider-9\"</span>).css(<span class=\"string\">\"height\"</span>, <span class=\"string\">\"100%\"</span>);</div><div class=\"line\">        $(box).append(target);</div><div class=\"line\">      &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> ($(target).attr(<span class=\"string\">'class'</span>) == <span class=\"string\">\"move-layout-over\"</span>) &#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (dropping) &#123;</div><div class=\"line\">          $(target).removeClass(<span class=\"string\">\"move-layout-over\"</span>).addClass(<span class=\"string\">\"float-layout\"</span>);</div><div class=\"line\">          $(drop).before($(target));</div><div class=\"line\">        &#125;</div><div class=\"line\">      &#125; <span class=\"keyword\">else</span> $(target).remove();</div><div class=\"line\">    <span class=\"comment\">//当前位置为页面效果内，添加布局</span></div><div class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> ($(box).attr(<span class=\"string\">'id'</span>) == <span class=\"string\">\"box\"</span>) &#123;</div><div class=\"line\">      <span class=\"keyword\">if</span> ($(target).attr(<span class=\"string\">'class'</span>) == <span class=\"string\">\"move-layout-over\"</span>) &#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (dropping) &#123;</div><div class=\"line\">          $(target).removeClass(<span class=\"string\">\"move-layout-over\"</span>).addClass(<span class=\"string\">\"float-layout\"</span>);</div><div class=\"line\">          $(drop).before($(target));</div><div class=\"line\">        &#125;</div><div class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">        $(target).remove();</div><div class=\"line\">      &#125;</div><div class=\"line\">    <span class=\"comment\">//当前鼠标位置不在页面效果内，移除拖动的对象</span></div><div class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">      $(target).remove();</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\">  $(drop).remove();</div><div class=\"line\">  dropping = <span class=\"literal\">false</span>;</div><div class=\"line\">  dragging = <span class=\"literal\">false</span>;</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<h2 id=\"完善后续处理\"><a href=\"#完善后续处理\" class=\"headerlink\" title=\"完善后续处理\"></a>完善后续处理</h2><hr>\n<ul>\n<li>编辑控件样式<ul>\n<li>在页面效果内的控件可进行编辑（改变颜色、内容等）</li>\n</ul>\n</li>\n<li>保存页面效果<ul>\n<li>这里为了偷懒直接把整个html导出，将它导出保存到html页面内，并加载相应的样式</li>\n<li>当然为了数据处理的方便，你也可以将这一切都转成数据保存到数据库，提取的时候进行相关处理就好了</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"结束语\"><a href=\"#结束语\" class=\"headerlink\" title=\"结束语\"></a>结束语</h2><hr>\n<p>有时候写些有意思的项目也是很不错的，脑洞要大大的，当然事后别忘了优化哦。</p>\n","excerpt":"<p>以前写过一个拖放功能的页面，用来搭建自定义移动端页面。本文介绍实现方法。<br>","more":"</p>\n<p>项目放在github上，有兴趣的小伙伴可以下载玩玩看<br><a href=\"https://github.com/godbasin/godbasin.github.io/tree/blog-codes/DD-custom-pages\">DD-custom-pages</a><br>已经没有在维护了，也基本没优化，但还是挺有意思的一个项目</p>\n<p>最终效果图如下<a href=\"http://o907xb1mi.bkt.clouddn.com/index.html\">点击查看页面</a><br><img src=\"http://o905ne85q.bkt.clouddn.com/dd_custom_pages.png\" alt=\"image\"></p>\n<h2 id=\"基本页面搭建\"><a href=\"#基本页面搭建\" class=\"headerlink\" title=\"基本页面搭建\"></a>基本页面搭建</h2><hr>\n<p>首先是最基本的页面搭建</p>\n<ul>\n<li>三个基本布局对象<ul>\n<li>1.左侧布局列表</li>\n<li>2.中间页面效果</li>\n<li>3.右侧控件列表</li>\n</ul>\n</li>\n<li>对象的事件处理<br>对象基本事件的编写<ul>\n<li>1.布局切换，以及自定义布局事件</li>\n<li>2.控件切换，选择等</li>\n</ul>\n</li>\n</ul>\n<p>样式布局什么的，这里就略过啦，具体可参考<a href=\"https://github.com/godbasin/DD-custom-pages\">项目</a></p>\n<h2 id=\"绑定鼠标左键按下事件\"><a href=\"#绑定鼠标左键按下事件\" class=\"headerlink\" title=\"绑定鼠标左键按下事件\"></a>绑定鼠标左键按下事件</h2><hr>\n<h3 id=\"需要进行绑定的对象\"><a href=\"#需要进行绑定的对象\" class=\"headerlink\" title=\"需要进行绑定的对象\"></a>需要进行绑定的对象</h3><ul>\n<li>需要进行鼠标左键按下绑定的对象有两种：布局和控件</li>\n<li>布局分为两种：左侧布局列表获取、中间页面效果获取的布局，class为fix-layout和float-layout区分</li>\n<li><p>控件同理: 右侧控件列表获取、中间页面效果获取的控件，class为fix-target和float-target区分</p>\n</li>\n<li><p>全局绑定鼠标鼠标左键按下事件<br>由于该项目中鼠标事件几乎是最主要事件，因此采用全局绑定</p>\n</li>\n</ul>\n<h3 id=\"点击对象后进行处理\"><a href=\"#点击对象后进行处理\" class=\"headerlink\" title=\"点击对象后进行处理\"></a>点击对象后进行处理</h3><ul>\n<li>设置拖动标志true，此时可进行鼠标移动事件的处理，后面会提及</li>\n<li>这里采用复制元素的方式，jQuery实现，$().clone()复制元素对象</li>\n<li>复制对象后，设置对象位置、大小等，这里设置拖动时将元素宽度减小为一般</li>\n</ul>\n<h3 id=\"若对象位于页面效果内，进行相关处理\"><a href=\"#若对象位于页面效果内，进行相关处理\" class=\"headerlink\" title=\"若对象位于页面效果内，进行相关处理\"></a>若对象位于页面效果内，进行相关处理</h3><ul>\n<li>若是对象为布局，则插入布局位置效果</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//绑定事件，这里使用了jQuery</span></div><div class=\"line\">$(<span class=\"built_in\">document</span>).on(<span class=\"string\">'mousedown'</span>, mouseDown);</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">mouseDown</span>(<span class=\"params\">e</span>) </span>&#123;</div><div class=\"line\">  <span class=\"comment\">//获取左键点击事件</span></div><div class=\"line\">  <span class=\"keyword\">if</span> (e.which == <span class=\"number\">1</span>) &#123;</div><div class=\"line\">    <span class=\"comment\">//定位当前事件位置，并取出相关元素</span></div><div class=\"line\">    position_target(e);</div><div class=\"line\">    <span class=\"comment\">//处理左侧布局列表获取的布局元素事件</span></div><div class=\"line\">    <span class=\"keyword\">if</span> ($(target).attr(<span class=\"string\">'class'</span>) == <span class=\"string\">\"fix-layout\"</span>) &#123;</div><div class=\"line\">      dragging = <span class=\"literal\">true</span>; <span class=\"comment\">//设置拖动标志</span></div><div class=\"line\">      target = $(target).clone(); <span class=\"comment\">//复制元素</span></div><div class=\"line\">      $(target).removeClass(<span class=\"string\">\"fix-layout\"</span>).addClass(<span class=\"string\">\"move-layout\"</span>); <span class=\"comment\">//拖动时元素样式</span></div><div class=\"line\">      $(<span class=\"string\">\".container\"</span>).append(target); <span class=\"comment\">//将复制的元素添加到页面</span></div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"comment\">//处理中间布局列表获取的布局元素事件</span></div><div class=\"line\">    <span class=\"keyword\">if</span> ($(target).attr(<span class=\"string\">'class'</span>) == <span class=\"string\">\"float-layout\"</span>) &#123;</div><div class=\"line\">      dragging = <span class=\"literal\">true</span>; <span class=\"comment\">//设置拖动标志</span></div><div class=\"line\">      $(target).removeClass(<span class=\"string\">\"float-layout\"</span>).addClass(<span class=\"string\">\"move-layout\"</span>); <span class=\"comment\">//拖动时元素样式</span></div><div class=\"line\">      $(<span class=\"string\">\".container\"</span>).append(target); <span class=\"comment\">//将元素移动到页面</span></div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"comment\">//处理右侧控件列表获取的控件元素事件</span></div><div class=\"line\">    <span class=\"keyword\">if</span> ($(target).attr(<span class=\"string\">'class'</span>) == <span class=\"string\">\"fix-target\"</span>) &#123;</div><div class=\"line\">      dragging = <span class=\"literal\">true</span>; <span class=\"comment\">//设置拖动标志</span></div><div class=\"line\">      target = $(target).clone(); <span class=\"comment\">//复制元素</span></div><div class=\"line\">      $(target).removeClass(<span class=\"string\">\"fix-target\"</span>).addClass(<span class=\"string\">\"move-target\"</span>); <span class=\"comment\">//拖动时元素样式</span></div><div class=\"line\">      $(<span class=\"string\">\".container\"</span>).append(target); <span class=\"comment\">//将复制的元素添加到页面</span></div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"comment\">//处理中间布局列表获取的控件元素事件</span></div><div class=\"line\">    <span class=\"keyword\">if</span> ($(target).attr(<span class=\"string\">'class'</span>) == <span class=\"string\">\"float-target\"</span>) &#123;</div><div class=\"line\">      dragging = <span class=\"literal\">true</span>; <span class=\"comment\">//设置拖动标志</span></div><div class=\"line\">      $(target).removeClass(<span class=\"string\">\"float-target\"</span>).addClass(<span class=\"string\">\"move-target\"</span>); <span class=\"comment\">//拖动时元素样式</span></div><div class=\"line\">      $(<span class=\"string\">\".container\"</span>).append(target); <span class=\"comment\">//将元素移动到页面</span></div><div class=\"line\">      $(target).children(<span class=\"string\">\".header, .footer, .nav, .content, .slider-7, .slider-8, .slider-9\"</span>).css(<span class=\"string\">\"height\"</span>, <span class=\"string\">\"auto\"</span>); <span class=\"comment\">//拖动时元素内层控件样式</span></div><div class=\"line\">      $(target).children(<span class=\"string\">\".listview-l\"</span>).css(<span class=\"string\">\"height\"</span>, <span class=\"string\">\"100px\"</span>); <span class=\"comment\">//拖动时元素内层控件样式</span></div><div class=\"line\">      $(target).children(<span class=\"string\">\".listview-s\"</span>).css(<span class=\"string\">\"height\"</span>, <span class=\"string\">\"50px\"</span>); <span class=\"comment\">//拖动时元素内层控件样式</span></div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"comment\">//判断是否有元素在拖动，将元素位置设置在当前鼠标位置</span></div><div class=\"line\">    <span class=\"keyword\">if</span> (dragging) &#123;</div><div class=\"line\">      <span class=\"keyword\">var</span> oX = getMousePos(e).x - $(target).width() / <span class=\"number\">2</span>;</div><div class=\"line\">      <span class=\"keyword\">var</span> oY = getMousePos(e).y - $(target).height() / <span class=\"number\">2</span>;</div><div class=\"line\">      $(target).css(&#123;</div><div class=\"line\">        <span class=\"string\">\"left\"</span>: oX + <span class=\"string\">\"px\"</span>,</div><div class=\"line\">        <span class=\"string\">\"top\"</span>: oY + <span class=\"string\">\"px\"</span></div><div class=\"line\">      &#125;);</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"comment\">//定位当前事件位置，判断是否在合适的位置</span></div><div class=\"line\">    <span class=\"comment\">//若当前元素为布局，且位置为页面效果内，则添加提示，元素放置的位置</span></div><div class=\"line\">    position_box(e);</div><div class=\"line\">    <span class=\"keyword\">if</span> ($(box).attr(<span class=\"string\">'id'</span>) == <span class=\"string\">\"box\"</span>) &#123;</div><div class=\"line\">      <span class=\"keyword\">if</span> ($(target).attr(<span class=\"string\">'class'</span>) == <span class=\"string\">\"move-layout\"</span> || $(target).attr(<span class=\"string\">'class'</span>) == <span class=\"string\">\"move-layout-over\"</span>) &#123;</div><div class=\"line\">        $(target).removeClass(<span class=\"string\">\"move-layout\"</span>).addClass(<span class=\"string\">\"move-layout-over\"</span>);</div><div class=\"line\">        <span class=\"keyword\">if</span> (dropping == <span class=\"literal\">false</span>) &#123;</div><div class=\"line\">          drop = $(<span class=\"string\">\"&lt;div class='drop-layout'&gt;&lt;/div&gt;\"</span>);</div><div class=\"line\">          moveDrop();</div><div class=\"line\">          $(<span class=\"string\">\"#box-content\"</span>).append(drop);</div><div class=\"line\">          dropping = <span class=\"literal\">true</span>;</div><div class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">          $(drop).remove();</div><div class=\"line\">          moveDrop();</div><div class=\"line\">          $(<span class=\"string\">\"#box-content\"</span>).append(drop);</div><div class=\"line\">        &#125;</div><div class=\"line\">      &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\">  <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"定位当前位置是否有特定元素\"><a href=\"#定位当前位置是否有特定元素\" class=\"headerlink\" title=\"定位当前位置是否有特定元素\"></a>定位当前位置是否有特定元素</h2><hr>\n<ul>\n<li><p>使用鼠标定位获取相关布局或者控件对象<br>这里可参考上一篇文章：<a href=\"https://godbasin.github.io/2016/06/19/position-object/\">《js判断某个位置是否特定元素》</a></p>\n</li>\n<li><p>获取当前鼠标位置</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getMousePos</span>(<span class=\"params\">event</span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">var</span> e = event || <span class=\"built_in\">window</span>.event;</div><div class=\"line\">  <span class=\"keyword\">var</span> scrollX = <span class=\"built_in\">document</span>.documentElement.scrollLeft || <span class=\"built_in\">document</span>.body.scrollLeft;</div><div class=\"line\">  <span class=\"keyword\">var</span> scrollY = <span class=\"built_in\">document</span>.documentElement.scrollTop || <span class=\"built_in\">document</span>.body.scrollTop;</div><div class=\"line\">  <span class=\"keyword\">var</span> x = e.pageX || e.clientX + scrollX;</div><div class=\"line\">  <span class=\"keyword\">var</span> y = e.pageY || e.clientY + scrollY;</div><div class=\"line\">  <span class=\"keyword\">return</span> &#123;</div><div class=\"line\">    <span class=\"string\">'x'</span>: x,</div><div class=\"line\">    <span class=\"string\">'y'</span>: y</div><div class=\"line\">  &#125;;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n<li><p>定位当前位置是否有布局或者控件对象position_target</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">position_target</span>(<span class=\"params\">e</span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">var</span> e = e || <span class=\"built_in\">window</span>.event;</div><div class=\"line\">  <span class=\"keyword\">var</span> scrollX = <span class=\"built_in\">document</span>.documentElement.scrollLeft || <span class=\"built_in\">document</span>.body.scrollLeft;</div><div class=\"line\">  <span class=\"keyword\">var</span> scrollY = <span class=\"built_in\">document</span>.documentElement.scrollTop || <span class=\"built_in\">document</span>.body.scrollTop;</div><div class=\"line\">  <span class=\"keyword\">var</span> eventX = e.pageX - scrollX || e.clientX;</div><div class=\"line\">  <span class=\"keyword\">var</span> eventY = e.pageY - scrollY || e.clientY;</div><div class=\"line\">  target = <span class=\"built_in\">document</span>.elementFromPoint(eventX, eventY);</div><div class=\"line\">  target = fnGetTable(target);</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fnGetTable</span>(<span class=\"params\">oEl</span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">while</span> (<span class=\"literal\">null</span> != oEl &amp;&amp; $(oEl).attr(<span class=\"string\">'class'</span>) != <span class=\"string\">\"fix-target\"</span> &amp;&amp; $(oEl).attr(<span class=\"string\">'id'</span>) != <span class=\"string\">\"set-layout\"</span> &amp;&amp; $(oEl).attr(<span class=\"string\">'id'</span>) != <span class=\"string\">\"save-page\"</span> &amp;&amp; $(oEl).attr(<span class=\"string\">'class'</span>) != <span class=\"string\">\"box-footer\"</span> &amp;&amp; $(oEl).attr(<span class=\"string\">'class'</span>) != <span class=\"string\">\"to-edit\"</span> &amp;&amp; $(oEl).attr(<span class=\"string\">'class'</span>) != <span class=\"string\">\"edit\"</span> &amp;&amp; $(oEl).attr(<span class=\"string\">'class'</span>) != <span class=\"string\">\"container\"</span> &amp;&amp; $(oEl).attr(<span class=\"string\">'class'</span>) != <span class=\"string\">\"float-target\"</span> &amp;&amp; $(oEl).attr(<span class=\"string\">'class'</span>) != <span class=\"string\">\"fix-layout\"</span> &amp;&amp; $(oEl).attr(<span class=\"string\">'class'</span>) != <span class=\"string\">\"float-layout\"</span>) &#123;</div><div class=\"line\">    oEl = oEl.parentElement;</div><div class=\"line\">  &#125;</div><div class=\"line\">  <span class=\"keyword\">return</span> oEl;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n<li><p>定位当前位置是否有在页面效果的布局里position_target</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">position_box</span>(<span class=\"params\">e</span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">var</span> e = e || <span class=\"built_in\">window</span>.event;</div><div class=\"line\">  <span class=\"keyword\">var</span> scrollX = <span class=\"built_in\">document</span>.documentElement.scrollLeft || <span class=\"built_in\">document</span>.body.scrollLeft;</div><div class=\"line\">  <span class=\"keyword\">var</span> scrollY = <span class=\"built_in\">document</span>.documentElement.scrollTop || <span class=\"built_in\">document</span>.body.scrollTop;</div><div class=\"line\">  <span class=\"keyword\">var</span> eventX = e.pageX - scrollX || e.clientX;</div><div class=\"line\">  <span class=\"keyword\">var</span> eventY = $(target).offset().top - <span class=\"number\">1</span> - scrollY;</div><div class=\"line\">  box = <span class=\"built_in\">document</span>.elementFromPoint(eventX, eventY);</div><div class=\"line\">  box = fnGetTable2(box);</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fnGetTable2</span>(<span class=\"params\">oEl</span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">while</span> (<span class=\"literal\">null</span> != oEl &amp;&amp; $(oEl).attr(<span class=\"string\">'id'</span>) != <span class=\"string\">\"box\"</span> &amp;&amp; $(oEl).attr(<span class=\"string\">'class'</span>) != <span class=\"string\">\"container\"</span> &amp;&amp; $(oEl).attr(<span class=\"string\">'data-type'</span>) != <span class=\"string\">\"layout\"</span>) &#123;</div><div class=\"line\">    oEl = oEl.parentElement;</div><div class=\"line\">  &#125;</div><div class=\"line\">  <span class=\"keyword\">return</span> oEl;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<h2 id=\"绑定鼠标移动事件\"><a href=\"#绑定鼠标移动事件\" class=\"headerlink\" title=\"绑定鼠标移动事件\"></a>绑定鼠标移动事件</h2><hr>\n<h3 id=\"需要进行的判断\"><a href=\"#需要进行的判断\" class=\"headerlink\" title=\"需要进行的判断\"></a>需要进行的判断</h3><ul>\n<li>是否有正在拖动的布局或者控件</li>\n<li>当前鼠标位置是否在页面效果内，添加布局示意（蓝色框框表示即将添加布局的位置）</li>\n<li>当前鼠标位置是否在页面效果内的某个布局上方，在相应位置添加布局示意</li>\n<li>全局绑定鼠标移动事件</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div></pre></td><td class=\"code\"><pre><div class=\"line\">$(<span class=\"built_in\">document</span>).mousemove(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">e</span>) </span>&#123;</div><div class=\"line\">  <span class=\"comment\">//判断是否有正在拖动的布局或者控件</span></div><div class=\"line\">  <span class=\"keyword\">if</span> (dragging) &#123;</div><div class=\"line\">    <span class=\"comment\">//正在拖动的对象位置跟随鼠标移动</span></div><div class=\"line\">    <span class=\"keyword\">var</span> oX = getMousePos(e).x - $(target).width() / <span class=\"number\">2</span>;</div><div class=\"line\">    <span class=\"keyword\">var</span> oY = getMousePos(e).y - $(target).height() / <span class=\"number\">2</span>;</div><div class=\"line\">    $(target).css(&#123;</div><div class=\"line\">      <span class=\"string\">\"left\"</span>: oX + <span class=\"string\">\"px\"</span>,</div><div class=\"line\">      <span class=\"string\">\"top\"</span>: oY + <span class=\"string\">\"px\"</span></div><div class=\"line\">    &#125;);</div><div class=\"line\">    <span class=\"comment\">//定位当前事件位置</span></div><div class=\"line\">    position_box(e);</div><div class=\"line\">    <span class=\"comment\">//判断当前位置在页面效果内，且在某个布局上方，布局示意添加在当前布局前方</span></div><div class=\"line\">    <span class=\"keyword\">if</span> ($(box).attr(<span class=\"string\">'data-type'</span>) == <span class=\"string\">\"layout\"</span> &amp;&amp; $(box).parent().attr(<span class=\"string\">'class'</span>) == <span class=\"string\">\"float-layout\"</span>) &#123;</div><div class=\"line\">      <span class=\"keyword\">if</span> ($(target).attr(<span class=\"string\">'class'</span>) == <span class=\"string\">\"move-layout\"</span> || $(target).attr(<span class=\"string\">'class'</span>) == <span class=\"string\">\"move-layout-over\"</span>) &#123;</div><div class=\"line\">        $(target).removeClass(<span class=\"string\">\"move-layout\"</span>).addClass(<span class=\"string\">\"move-layout-over\"</span>);</div><div class=\"line\">        <span class=\"keyword\">if</span> (dropping == <span class=\"literal\">false</span>) &#123;</div><div class=\"line\">          drop = $(<span class=\"string\">\"&lt;div class='drop-layout'&gt;&lt;/div&gt;\"</span>);</div><div class=\"line\">          moveDrop();</div><div class=\"line\">          $($(box).parent()).before(drop);</div><div class=\"line\">          dropping = <span class=\"literal\">true</span>;</div><div class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">          $(drop).remove();</div><div class=\"line\">          moveDrop();</div><div class=\"line\">          $($(box).parent()).before(drop);</div><div class=\"line\">        &#125;</div><div class=\"line\">      &#125;</div><div class=\"line\">    <span class=\"comment\">//判断当前位置在页面效果内，且不在某个布局上方，布局示意添加在页面效果最后</span></div><div class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> ($(box).attr(<span class=\"string\">'id'</span>) == <span class=\"string\">\"box\"</span>) &#123;</div><div class=\"line\">      <span class=\"keyword\">if</span> ($(target).attr(<span class=\"string\">'class'</span>) == <span class=\"string\">\"move-layout\"</span> || $(target).attr(<span class=\"string\">'class'</span>) == <span class=\"string\">\"move-layout-over\"</span>) &#123;</div><div class=\"line\">        $(target).removeClass(<span class=\"string\">\"move-layout\"</span>).addClass(<span class=\"string\">\"move-layout-over\"</span>);</div><div class=\"line\">        <span class=\"keyword\">if</span> (dropping == <span class=\"literal\">false</span>) &#123;</div><div class=\"line\">          drop = $(<span class=\"string\">\"&lt;div class='drop-layout'&gt;&lt;/div&gt;\"</span>);</div><div class=\"line\">          moveDrop();</div><div class=\"line\">          $(<span class=\"string\">\"#box-content\"</span>).append(drop);</div><div class=\"line\">          dropping = <span class=\"literal\">true</span>;</div><div class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">          $(drop).remove();</div><div class=\"line\">          moveDrop();</div><div class=\"line\">          $(<span class=\"string\">\"#box-content\"</span>).append(drop);</div><div class=\"line\">        &#125;</div><div class=\"line\">      &#125;</div><div class=\"line\">    <span class=\"comment\">//判断当前位置不在页面效果内，移除布局示意</span></div><div class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">      <span class=\"keyword\">if</span> ($(target).attr(<span class=\"string\">'class'</span>) == <span class=\"string\">\"move-layout-over\"</span>) &#123;</div><div class=\"line\">        $(target).removeClass(<span class=\"string\">\"move-layout-over\"</span>).addClass(<span class=\"string\">\"move-layout\"</span>);</div><div class=\"line\">      &#125;</div><div class=\"line\">      <span class=\"keyword\">if</span> (dropping == <span class=\"literal\">true</span>) &#123;</div><div class=\"line\">        $(drop).remove();</div><div class=\"line\">        dropping = <span class=\"literal\">false</span>;</div><div class=\"line\">      &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\">  <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<h2 id=\"绑定鼠标左键松开事件\"><a href=\"#绑定鼠标左键松开事件\" class=\"headerlink\" title=\"绑定鼠标左键松开事件\"></a>绑定鼠标左键松开事件</h2><hr>\n<h3 id=\"效果事件\"><a href=\"#效果事件\" class=\"headerlink\" title=\"效果事件\"></a>效果事件</h3><ul>\n<li>当前拖动的对象为布局，且当前鼠标位置是否在页面效果内，添加布局</li>\n<li>当前拖动的对象为控件，且当前鼠标位置是否在页面效果内某个布局上方，且该布局内无其他控件，添加控件至布局</li>\n<li>当前鼠标位置不在页面效果内，移除拖动的对象</li>\n</ul>\n<h3 id=\"需要进行的判断-1\"><a href=\"#需要进行的判断-1\" class=\"headerlink\" title=\"需要进行的判断\"></a>需要进行的判断</h3><ul>\n<li>是否有正在拖动的布局或者控件</li>\n<li>当前鼠标位置是否在页面效果内</li>\n<li>当前拖动的对象是否为布局，且当前鼠标位置是否在页面效果内</li>\n<li>当前拖动的对象是否为控件，且当前鼠标位置是否在页面效果内某个布局上方，该布局是否为空</li>\n<li>全局绑定鼠标左键松开事件</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div></pre></td><td class=\"code\"><pre><div class=\"line\">$(<span class=\"built_in\">document</span>).mouseup(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">e</span>) </span>&#123;</div><div class=\"line\">  <span class=\"comment\">//定位当前事件位置</span></div><div class=\"line\">  position_box(e);</div><div class=\"line\">  e.cancelBubble = <span class=\"literal\">true</span>;</div><div class=\"line\">  <span class=\"comment\">//判断是否有正在拖动的布局或者控件</span></div><div class=\"line\">  <span class=\"keyword\">if</span> (dragging == <span class=\"literal\">true</span>) &#123;</div><div class=\"line\">    <span class=\"comment\">//当前位置为页面效果内的某个布局上方，添加布局或者添加控件</span></div><div class=\"line\">    <span class=\"keyword\">if</span> (($(box).attr(<span class=\"string\">'data-type'</span>) == <span class=\"string\">\"layout\"</span> &amp;&amp; $(box).parent().attr(<span class=\"string\">'class'</span>) == <span class=\"string\">\"float-layout\"</span>) || ($(box).attr(<span class=\"string\">'data-type'</span>) == <span class=\"string\">\"layout\"</span> &amp;&amp; $(box).parent().attr(<span class=\"string\">'data-type'</span>) == <span class=\"string\">\"layout\"</span>)) &#123;</div><div class=\"line\">      <span class=\"keyword\">if</span> ($(target).attr(<span class=\"string\">'class'</span>) == <span class=\"string\">\"move-target\"</span> &amp;&amp; $(box).children().length == <span class=\"number\">0</span>) &#123;</div><div class=\"line\">        $(target).removeClass(<span class=\"string\">\"move-target\"</span>).addClass(<span class=\"string\">\"float-target\"</span>);</div><div class=\"line\">        $(target).children(<span class=\"string\">\".header, .footer, .nav, .listview-l, .listview-s, .content, .slider-7, .slider-8, .slider-9\"</span>).css(<span class=\"string\">\"height\"</span>, <span class=\"string\">\"100%\"</span>);</div><div class=\"line\">        $(box).append(target);</div><div class=\"line\">      &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> ($(target).attr(<span class=\"string\">'class'</span>) == <span class=\"string\">\"move-layout-over\"</span>) &#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (dropping) &#123;</div><div class=\"line\">          $(target).removeClass(<span class=\"string\">\"move-layout-over\"</span>).addClass(<span class=\"string\">\"float-layout\"</span>);</div><div class=\"line\">          $(drop).before($(target));</div><div class=\"line\">        &#125;</div><div class=\"line\">      &#125; <span class=\"keyword\">else</span> $(target).remove();</div><div class=\"line\">    <span class=\"comment\">//当前位置为页面效果内，添加布局</span></div><div class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> ($(box).attr(<span class=\"string\">'id'</span>) == <span class=\"string\">\"box\"</span>) &#123;</div><div class=\"line\">      <span class=\"keyword\">if</span> ($(target).attr(<span class=\"string\">'class'</span>) == <span class=\"string\">\"move-layout-over\"</span>) &#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (dropping) &#123;</div><div class=\"line\">          $(target).removeClass(<span class=\"string\">\"move-layout-over\"</span>).addClass(<span class=\"string\">\"float-layout\"</span>);</div><div class=\"line\">          $(drop).before($(target));</div><div class=\"line\">        &#125;</div><div class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">        $(target).remove();</div><div class=\"line\">      &#125;</div><div class=\"line\">    <span class=\"comment\">//当前鼠标位置不在页面效果内，移除拖动的对象</span></div><div class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">      $(target).remove();</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\">  $(drop).remove();</div><div class=\"line\">  dropping = <span class=\"literal\">false</span>;</div><div class=\"line\">  dragging = <span class=\"literal\">false</span>;</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<h2 id=\"完善后续处理\"><a href=\"#完善后续处理\" class=\"headerlink\" title=\"完善后续处理\"></a>完善后续处理</h2><hr>\n<ul>\n<li>编辑控件样式<ul>\n<li>在页面效果内的控件可进行编辑（改变颜色、内容等）</li>\n</ul>\n</li>\n<li>保存页面效果<ul>\n<li>这里为了偷懒直接把整个html导出，将它导出保存到html页面内，并加载相应的样式</li>\n<li>当然为了数据处理的方便，你也可以将这一切都转成数据保存到数据库，提取的时候进行相关处理就好了</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"结束语\"><a href=\"#结束语\" class=\"headerlink\" title=\"结束语\"></a>结束语</h2><hr>\n<p>有时候写些有意思的项目也是很不错的，脑洞要大大的，当然事后别忘了优化哦。</p>"},{"title":"前端在变，然而热情不变","date":"2016-06-17T19:59:57.000Z","_content":"本文作为本骚年正式开始技术博客的开篇，当然先渲染一下快乐的氛围。接着会大致介绍搭建这个博客的步骤。\n<!--more-->\n\n## 首先为第一篇博客开心一下\n-----\n或许在两个月前，本骚年还生活在远离github以及各种社区论坛的宅世界里。但即使是那样一个几乎与世隔绝的环境下，也依然满怀学习前端的热情。\n<!---->\n那时候做的事情不多，基本是些与jQuery打架，努力想解剖它，最后又握手言和的过家家。\n<!---->\n工作原因慢慢用上一些工具，也挑战自己上了框架、试着对代码进行抽离又封装，到如今在小伙伴的怂恿下试着在github搭博客。\n<!---->\n进步不得说不大，对于懒癌晚期只沉迷于学习远离、学习代码解析的骚年来说，各种各样的工具毫无疑问又增加了需要学习的范围。但，既来之则安之，有句话叫学无止境不是吗，要相信自己，哈哈。\n\n## 参考\n-----\n关于创建github博客：\n[http://blog.csdn.net/renfufei/article/details/37725057](http://blog.csdn.net/renfufei/article/details/37725057/)\nHexo搭建博客教程: \n[http://ibruce.info/2013/11/22/hexo-your-blog](http://ibruce.info/2013/11/22/hexo-your-blog/)\n知乎：Hexo好看的主题：\n[https://www.zhihu.com/question/24422335](https://www.zhihu.com/question/24422335)\n\n## 搭建步骤\n-----\n\n### 注册一个github账户\n\n### 创建github pages\n> 具体可参考Hexo搭建博客教程: \n> [http://ibruce.info/2013/11/22/hexo-your-blog](http://ibruce.info/2013/11/22/hexo-your-blog/)\n\n### 装载Hexo\n> 该过程需要安装node以及Git，具体可参考Hexo搭建博客教程: \n> [http://ibruce.info/2013/11/22/hexo-your-blog](http://ibruce.info/2013/11/22/hexo-your-blog/)\n\n### 选择自己喜欢的主题\n> Hexo主题可参考知乎：Hexo好看的主题：\n> [https://www.zhihu.com/question/24422335](https://www.zhihu.com/question/24422335)\n\n### 对模板和样式进行修改\n> Hexo装载的模板为ejs，炒鸡好懂的\n\n### 选择喜欢的插件和挂件，统计等\n> Hexo搭建博客教程里面有提及相关的部署\n\n### 部署到github上\n> 设置./_config.yml中Deployment相关，然后hexo deploy\n> 注意请先生成静态文件再进行部署哦\n> 若部署失败提示'ERROR Deployer not found: github', 是因为Hexo3.0以后type需要改成git\n> 1.安装 npm install hexo-deployer-git --save\n> 2.将deploy 的 type由github改为git\n\n## 此处粘贴Hexo常用命令\n-----\n> hexo new \"postName\"  ---新建文章\n> hexo new page \"pageName\"  ---新建页面\n> hexo clean  ---清除缓存 网页正常情况下可以忽略此条命令\n> hexo generate  ---生成静态页面至public目录\n> hexo server  ---开启预览访问端口（默认端口4000，'ctrl + c'关闭server）\n> hexo deploy  ---将.deploy目录部署到GitHub\n\n## 结束语\n-----\n然后一不小心就玩通宵了，赶紧补眠去。\nGood Day!","source":"_posts/first-blog.md","raw":"---\ntitle: 前端在变，然而热情不变\ndate: 2016-06-18 03:59:57\ncategories: web乱炖\ntags: 教程\n---\n本文作为本骚年正式开始技术博客的开篇，当然先渲染一下快乐的氛围。接着会大致介绍搭建这个博客的步骤。\n<!--more-->\n\n## 首先为第一篇博客开心一下\n-----\n或许在两个月前，本骚年还生活在远离github以及各种社区论坛的宅世界里。但即使是那样一个几乎与世隔绝的环境下，也依然满怀学习前端的热情。\n<!---->\n那时候做的事情不多，基本是些与jQuery打架，努力想解剖它，最后又握手言和的过家家。\n<!---->\n工作原因慢慢用上一些工具，也挑战自己上了框架、试着对代码进行抽离又封装，到如今在小伙伴的怂恿下试着在github搭博客。\n<!---->\n进步不得说不大，对于懒癌晚期只沉迷于学习远离、学习代码解析的骚年来说，各种各样的工具毫无疑问又增加了需要学习的范围。但，既来之则安之，有句话叫学无止境不是吗，要相信自己，哈哈。\n\n## 参考\n-----\n关于创建github博客：\n[http://blog.csdn.net/renfufei/article/details/37725057](http://blog.csdn.net/renfufei/article/details/37725057/)\nHexo搭建博客教程: \n[http://ibruce.info/2013/11/22/hexo-your-blog](http://ibruce.info/2013/11/22/hexo-your-blog/)\n知乎：Hexo好看的主题：\n[https://www.zhihu.com/question/24422335](https://www.zhihu.com/question/24422335)\n\n## 搭建步骤\n-----\n\n### 注册一个github账户\n\n### 创建github pages\n> 具体可参考Hexo搭建博客教程: \n> [http://ibruce.info/2013/11/22/hexo-your-blog](http://ibruce.info/2013/11/22/hexo-your-blog/)\n\n### 装载Hexo\n> 该过程需要安装node以及Git，具体可参考Hexo搭建博客教程: \n> [http://ibruce.info/2013/11/22/hexo-your-blog](http://ibruce.info/2013/11/22/hexo-your-blog/)\n\n### 选择自己喜欢的主题\n> Hexo主题可参考知乎：Hexo好看的主题：\n> [https://www.zhihu.com/question/24422335](https://www.zhihu.com/question/24422335)\n\n### 对模板和样式进行修改\n> Hexo装载的模板为ejs，炒鸡好懂的\n\n### 选择喜欢的插件和挂件，统计等\n> Hexo搭建博客教程里面有提及相关的部署\n\n### 部署到github上\n> 设置./_config.yml中Deployment相关，然后hexo deploy\n> 注意请先生成静态文件再进行部署哦\n> 若部署失败提示'ERROR Deployer not found: github', 是因为Hexo3.0以后type需要改成git\n> 1.安装 npm install hexo-deployer-git --save\n> 2.将deploy 的 type由github改为git\n\n## 此处粘贴Hexo常用命令\n-----\n> hexo new \"postName\"  ---新建文章\n> hexo new page \"pageName\"  ---新建页面\n> hexo clean  ---清除缓存 网页正常情况下可以忽略此条命令\n> hexo generate  ---生成静态页面至public目录\n> hexo server  ---开启预览访问端口（默认端口4000，'ctrl + c'关闭server）\n> hexo deploy  ---将.deploy目录部署到GitHub\n\n## 结束语\n-----\n然后一不小心就玩通宵了，赶紧补眠去。\nGood Day!","slug":"first-blog","published":1,"updated":"2016-08-20T10:54:21.077Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cix45hug0002dxotu2xprjana","content":"<p>本文作为本骚年正式开始技术博客的开篇，当然先渲染一下快乐的氛围。接着会大致介绍搭建这个博客的步骤。<br><a id=\"more\"></a></p>\n<h2 id=\"首先为第一篇博客开心一下\"><a href=\"#首先为第一篇博客开心一下\" class=\"headerlink\" title=\"首先为第一篇博客开心一下\"></a>首先为第一篇博客开心一下</h2><hr>\n<p>或许在两个月前，本骚年还生活在远离github以及各种社区论坛的宅世界里。但即使是那样一个几乎与世隔绝的环境下，也依然满怀学习前端的热情。<br><!----><br>那时候做的事情不多，基本是些与jQuery打架，努力想解剖它，最后又握手言和的过家家。<br><!----><br>工作原因慢慢用上一些工具，也挑战自己上了框架、试着对代码进行抽离又封装，到如今在小伙伴的怂恿下试着在github搭博客。<br><!----><br>进步不得说不大，对于懒癌晚期只沉迷于学习远离、学习代码解析的骚年来说，各种各样的工具毫无疑问又增加了需要学习的范围。但，既来之则安之，有句话叫学无止境不是吗，要相信自己，哈哈。</p>\n<h2 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h2><hr>\n<p>关于创建github博客：<br><a href=\"http://blog.csdn.net/renfufei/article/details/37725057/\" target=\"_blank\" rel=\"external\">http://blog.csdn.net/renfufei/article/details/37725057</a><br>Hexo搭建博客教程:<br><a href=\"http://ibruce.info/2013/11/22/hexo-your-blog/\" target=\"_blank\" rel=\"external\">http://ibruce.info/2013/11/22/hexo-your-blog</a><br>知乎：Hexo好看的主题：<br><a href=\"https://www.zhihu.com/question/24422335\" target=\"_blank\" rel=\"external\">https://www.zhihu.com/question/24422335</a></p>\n<h2 id=\"搭建步骤\"><a href=\"#搭建步骤\" class=\"headerlink\" title=\"搭建步骤\"></a>搭建步骤</h2><hr>\n<h3 id=\"注册一个github账户\"><a href=\"#注册一个github账户\" class=\"headerlink\" title=\"注册一个github账户\"></a>注册一个github账户</h3><h3 id=\"创建github-pages\"><a href=\"#创建github-pages\" class=\"headerlink\" title=\"创建github pages\"></a>创建github pages</h3><blockquote>\n<p>具体可参考Hexo搭建博客教程:<br><a href=\"http://ibruce.info/2013/11/22/hexo-your-blog/\" target=\"_blank\" rel=\"external\">http://ibruce.info/2013/11/22/hexo-your-blog</a></p>\n</blockquote>\n<h3 id=\"装载Hexo\"><a href=\"#装载Hexo\" class=\"headerlink\" title=\"装载Hexo\"></a>装载Hexo</h3><blockquote>\n<p>该过程需要安装node以及Git，具体可参考Hexo搭建博客教程:<br><a href=\"http://ibruce.info/2013/11/22/hexo-your-blog/\" target=\"_blank\" rel=\"external\">http://ibruce.info/2013/11/22/hexo-your-blog</a></p>\n</blockquote>\n<h3 id=\"选择自己喜欢的主题\"><a href=\"#选择自己喜欢的主题\" class=\"headerlink\" title=\"选择自己喜欢的主题\"></a>选择自己喜欢的主题</h3><blockquote>\n<p>Hexo主题可参考知乎：Hexo好看的主题：<br><a href=\"https://www.zhihu.com/question/24422335\" target=\"_blank\" rel=\"external\">https://www.zhihu.com/question/24422335</a></p>\n</blockquote>\n<h3 id=\"对模板和样式进行修改\"><a href=\"#对模板和样式进行修改\" class=\"headerlink\" title=\"对模板和样式进行修改\"></a>对模板和样式进行修改</h3><blockquote>\n<p>Hexo装载的模板为ejs，炒鸡好懂的</p>\n</blockquote>\n<h3 id=\"选择喜欢的插件和挂件，统计等\"><a href=\"#选择喜欢的插件和挂件，统计等\" class=\"headerlink\" title=\"选择喜欢的插件和挂件，统计等\"></a>选择喜欢的插件和挂件，统计等</h3><blockquote>\n<p>Hexo搭建博客教程里面有提及相关的部署</p>\n</blockquote>\n<h3 id=\"部署到github上\"><a href=\"#部署到github上\" class=\"headerlink\" title=\"部署到github上\"></a>部署到github上</h3><blockquote>\n<p>设置./_config.yml中Deployment相关，然后hexo deploy<br>注意请先生成静态文件再进行部署哦<br>若部署失败提示’ERROR Deployer not found: github’, 是因为Hexo3.0以后type需要改成git<br>1.安装 npm install hexo-deployer-git –save<br>2.将deploy 的 type由github改为git</p>\n</blockquote>\n<h2 id=\"此处粘贴Hexo常用命令\"><a href=\"#此处粘贴Hexo常用命令\" class=\"headerlink\" title=\"此处粘贴Hexo常用命令\"></a>此处粘贴Hexo常用命令</h2><hr>\n<blockquote>\n<p>hexo new “postName”  —新建文章<br>hexo new page “pageName”  —新建页面<br>hexo clean  —清除缓存 网页正常情况下可以忽略此条命令<br>hexo generate  —生成静态页面至public目录<br>hexo server  —开启预览访问端口（默认端口4000，’ctrl + c’关闭server）<br>hexo deploy  —将.deploy目录部署到GitHub</p>\n</blockquote>\n<h2 id=\"结束语\"><a href=\"#结束语\" class=\"headerlink\" title=\"结束语\"></a>结束语</h2><hr>\n<p>然后一不小心就玩通宵了，赶紧补眠去。<br>Good Day!</p>\n","excerpt":"<p>本文作为本骚年正式开始技术博客的开篇，当然先渲染一下快乐的氛围。接着会大致介绍搭建这个博客的步骤。<br>","more":"</p>\n<h2 id=\"首先为第一篇博客开心一下\"><a href=\"#首先为第一篇博客开心一下\" class=\"headerlink\" title=\"首先为第一篇博客开心一下\"></a>首先为第一篇博客开心一下</h2><hr>\n<p>或许在两个月前，本骚年还生活在远离github以及各种社区论坛的宅世界里。但即使是那样一个几乎与世隔绝的环境下，也依然满怀学习前端的热情。<br><!----><br>那时候做的事情不多，基本是些与jQuery打架，努力想解剖它，最后又握手言和的过家家。<br><!----><br>工作原因慢慢用上一些工具，也挑战自己上了框架、试着对代码进行抽离又封装，到如今在小伙伴的怂恿下试着在github搭博客。<br><!----><br>进步不得说不大，对于懒癌晚期只沉迷于学习远离、学习代码解析的骚年来说，各种各样的工具毫无疑问又增加了需要学习的范围。但，既来之则安之，有句话叫学无止境不是吗，要相信自己，哈哈。</p>\n<h2 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h2><hr>\n<p>关于创建github博客：<br><a href=\"http://blog.csdn.net/renfufei/article/details/37725057/\">http://blog.csdn.net/renfufei/article/details/37725057</a><br>Hexo搭建博客教程:<br><a href=\"http://ibruce.info/2013/11/22/hexo-your-blog/\">http://ibruce.info/2013/11/22/hexo-your-blog</a><br>知乎：Hexo好看的主题：<br><a href=\"https://www.zhihu.com/question/24422335\">https://www.zhihu.com/question/24422335</a></p>\n<h2 id=\"搭建步骤\"><a href=\"#搭建步骤\" class=\"headerlink\" title=\"搭建步骤\"></a>搭建步骤</h2><hr>\n<h3 id=\"注册一个github账户\"><a href=\"#注册一个github账户\" class=\"headerlink\" title=\"注册一个github账户\"></a>注册一个github账户</h3><h3 id=\"创建github-pages\"><a href=\"#创建github-pages\" class=\"headerlink\" title=\"创建github pages\"></a>创建github pages</h3><blockquote>\n<p>具体可参考Hexo搭建博客教程:<br><a href=\"http://ibruce.info/2013/11/22/hexo-your-blog/\">http://ibruce.info/2013/11/22/hexo-your-blog</a></p>\n</blockquote>\n<h3 id=\"装载Hexo\"><a href=\"#装载Hexo\" class=\"headerlink\" title=\"装载Hexo\"></a>装载Hexo</h3><blockquote>\n<p>该过程需要安装node以及Git，具体可参考Hexo搭建博客教程:<br><a href=\"http://ibruce.info/2013/11/22/hexo-your-blog/\">http://ibruce.info/2013/11/22/hexo-your-blog</a></p>\n</blockquote>\n<h3 id=\"选择自己喜欢的主题\"><a href=\"#选择自己喜欢的主题\" class=\"headerlink\" title=\"选择自己喜欢的主题\"></a>选择自己喜欢的主题</h3><blockquote>\n<p>Hexo主题可参考知乎：Hexo好看的主题：<br><a href=\"https://www.zhihu.com/question/24422335\">https://www.zhihu.com/question/24422335</a></p>\n</blockquote>\n<h3 id=\"对模板和样式进行修改\"><a href=\"#对模板和样式进行修改\" class=\"headerlink\" title=\"对模板和样式进行修改\"></a>对模板和样式进行修改</h3><blockquote>\n<p>Hexo装载的模板为ejs，炒鸡好懂的</p>\n</blockquote>\n<h3 id=\"选择喜欢的插件和挂件，统计等\"><a href=\"#选择喜欢的插件和挂件，统计等\" class=\"headerlink\" title=\"选择喜欢的插件和挂件，统计等\"></a>选择喜欢的插件和挂件，统计等</h3><blockquote>\n<p>Hexo搭建博客教程里面有提及相关的部署</p>\n</blockquote>\n<h3 id=\"部署到github上\"><a href=\"#部署到github上\" class=\"headerlink\" title=\"部署到github上\"></a>部署到github上</h3><blockquote>\n<p>设置./_config.yml中Deployment相关，然后hexo deploy<br>注意请先生成静态文件再进行部署哦<br>若部署失败提示’ERROR Deployer not found: github’, 是因为Hexo3.0以后type需要改成git<br>1.安装 npm install hexo-deployer-git –save<br>2.将deploy 的 type由github改为git</p>\n</blockquote>\n<h2 id=\"此处粘贴Hexo常用命令\"><a href=\"#此处粘贴Hexo常用命令\" class=\"headerlink\" title=\"此处粘贴Hexo常用命令\"></a>此处粘贴Hexo常用命令</h2><hr>\n<blockquote>\n<p>hexo new “postName”  —新建文章<br>hexo new page “pageName”  —新建页面<br>hexo clean  —清除缓存 网页正常情况下可以忽略此条命令<br>hexo generate  —生成静态页面至public目录<br>hexo server  —开启预览访问端口（默认端口4000，’ctrl + c’关闭server）<br>hexo deploy  —将.deploy目录部署到GitHub</p>\n</blockquote>\n<h2 id=\"结束语\"><a href=\"#结束语\" class=\"headerlink\" title=\"结束语\"></a>结束语</h2><hr>\n<p>然后一不小心就玩通宵了，赶紧补眠去。<br>Good Day!</p>"},{"title":"我的前端入门之路","date":"2016-06-24T13:30:30.000Z","_content":"曾经作为物理学院的一名理工女，如今成为一名热爱代码的前端工程师。其中的过程也是颇为丰富，作为记录也好，参考也好，我都想写下来呢。仅供参考哦。\n<!--more-->\n\n## 入门基础学习\n------\n前端基础三剑客（瞎编的）： HTML、CSS、javascript\n\n### 充分利用网络资源\n- 最基础的语法可参考[W3C](http://www.w3school.com.cn/)，这也是一本很好的词典哦\n\n### HTML + CSS\n- [Bootstrap](http://www.bootcss.com/)，大家都在用的样式框架\n- [Font Awesome](http://www.bootcss.com/p/font-awesome/)，图标字体库\n- [jQuery Mobile](http://jquerymobile.com/)，移动web应用程序的框架\n- [jQuery UI](https://jqueryui.com/)，建立在jQuery库上的一组用户界面交互、特效、小部件及主题\n- 大家不妨用的时候也阅读一下这些框架/库的源码，有助于理解CSS特性哦\n\n### HTML5\n- 每一项都值得你去深入探究哦\n  - 用于绘画的canvas元素，可做图片裁剪、创作游戏等等\n  - 用于媒介回放的video和audio元素，可插入音乐和视频哦\n  - 对本地离线存储的更好的支持，离线你的API哈哈\n  - 新的特殊内容元素，比如article、footer、header、nav、section，让你的代码更好懂\n  - 新的表单控件，比如calendar、date、time、email、url、search，记得考虑兼容哦\n  - 实时通信的websocket，建议同时解一下socket.io\n  - 超实用的File API，可以做图片预览等等\n  - 当然少不了sessionStorage和localStorage，可以作为页面间的通讯哦\n\n### CSS3\n- 可以实现超级酷炫的动画效果，还有漂酿的样式哦\n- [w3cPlus](http://www.w3cplus.com/content/css3-gradient)上的CSS3教程不错哦\n  - 背景和边框，好看的按钮和阴影\n  - 文本效果，可以使用自己设计的字体哦\n  - 2D/3D 转换，配合动画和过渡一起使用哦\n  - 动画和过渡效果，快使用酷炫的交互效果吧\n\n### javascript\n- 原生javascript是基础中的基础，但也是能力最强大的主角呀\n- 推荐的书《JavaScript高级程序设计》，《JavaScript 权威指南》，花点钱买本正版吧，收益终身呀\n  - 基础的ECMAScript，js的自由度很高的哦\n  - DOM，若说浏览器是画布，DOM是画布上的内容，javascript就是画笔吧（瞎编+1）\n  - BOM，包括常用的window对象、location对象、history对象等等\n\n## 学会使用和了解框架和库\n-----\n### CSS框架\n- 上面提到的[Bootstrap](http://www.bootcss.com/)，[Font Awesome](http://www.bootcss.com/p/font-awesome/)，[jQuery Mobile](http://jquerymobile.com/)，[jQuery UI](https://jqueryui.com/)都可以去了解看看哦\n\n### LESS/SASS\n- [LESS](http://www.bootcss.com/p/lesscss/)将CSS赋予了动态语言的特性，如变量，继承，运算，函数等\n- [SASS](http://sass.bootcss.com/docs/sass-reference/)让CSS语言更强大、优雅。它允许你使用变量、嵌套规则、mixins、导入等众多功能，并且完全兼容CSS语法\n\n### jQuery库\n- 不得不说这是很强大的js库，曾经在我刚开始工作时帮助我解决了很多问题呢\n- 这里有份[《jQuery API中文文档》](http://www.css88.com/jqapi-1.9/)，查询专用哦\n  - jQuery可以帮忙解决初期的很多问题哦，例如：\n  - 1.消除了JavaScript跨平台兼容问题\n  - 2.丰富的DOM选择器，超便利的$()选择器哦\n  - 3.可以很容易地浏览文档、选择元素、处理事件以及添加效果\n  - 4.ajax操作支持，后面版本的还支持Promise哦\n  - 5.允许开发者定制插件，[jQuery form插件](http://www.cnblogs.com/heyuquan/p/form-plug-async-submit.html)不错哦\n\n### [zepto库](http://www.css88.com/doc/zeptojs_api/)\n- 轻量级的jQuery库，适合移动端\n- 个人觉得了解一下就够了。。除了touch事件有些参考价值，还是jQuery强大多了\n\n\n### MVC/MVVM框架\n- 这是待开拓的一大片领土，每个框架都有自己的特色和优势，很有意思哦\n- 虽然说纷繁琳目，但其实选一个喜欢的用起来就好啦，当然生产环境的话得考虑稳定性、社区、维护这些哦\n- [AngularJS](http://www.apjs.net/)，MVVM\n- [React](http://reactjs.cn/)，MVC的V\n- [Underscore](http://www.bootcss.com/p/underscore/)，JavaScript工具库\n- [Backbone](http://www.css88.com/doc/backbone/)，MVC，基于underscore.js\n- [Vue](http://cn.vuejs.org/)，国人MVVM的VM\n- [Avalon](http://avalonjs.github.io/)，国人MVVM\n\n\n## 前端开发工具\n-----\n### 编辑器\n- DW(Dreamweaver)挺老了，比较重量级\n- Sublime Text，很多人在用的\n- Hbuilder，本人在用，感觉还不错\n- Vim，听说很好用\n\n### Chrome开发者工具/Firebug\n- 浏览器调试工具，很强大哦，只需在浏览器右键-检查就能打开啦\n\n### Gulp/Grunt\n- 基于任务的javascript命令行构建工具\n- 用于任务自动化，创建工作区等\n\n### Mocha/Jasmine/Karma\n- Mocha/Jasmine是常用的前端测试框架\n- Karma是驱动测试的Runner\n\n### 其它前端工具\n- 这里有篇[《各式 Web 前端開發工具整理》](https://github.com/doggy8088/frontend-tools)\n\n\n\n## 成为一枚优质前端工程师\n-----\n### 注意代码规范\n- 良好的代码规范对团队合作很有帮助哦\n- 本骚年在这方面有警觉，但还是欠缺实践呢...\n\n### 针对性研究\n- [《理解Promise》](https://blog.coding.net/blog/how-do-promises-work)\n- [《XMLHttpRequest Level 2使用指南》](http://www.ruanyifeng.com/blog/2012/09/xmlhttprequest_level_2.html)\n- [《浏览器的渲染原理简介》](http://coolshell.cn/articles/9666.html)\n- [《Javascript装载和执行》](http://coolshell.cn/articles/9749.html#jtss-tsina)\n- [《一个对前端模板技术的全面总结》](http://www.html-js.com/article/Regularjs-Chinese-guidelines-for-a-comprehensive-summary-of-the-front-template-technology?utm_source=tuicool&utm_medium=referral)\n- [《浅谈HTML5单页面架构》](http://www.cnblogs.com/kenkofox/p/4643760.html)\n\n### 深入理解库/框架原理\n- 学习研究源代码是个很好的爱好哦，对个人提升也很有帮助呢\n- 当然像Bootstrap这样的优秀样式框架很值得阅读，建议直接翻开源码，配合浏览器调试工具一起学习吧\n- [《深入理解JavaScript系列》](http://www.sxrczx.com/docs/js/2286877.html)\n- [《jQuery源码分析系列》](http://www.cnblogs.com/aaronjs/p/3279314.html)\n- [《触碰jQuery：AJAX异步详解》](http://www.cnblogs.com/heyuquan/archive/2013/05/13/3076465.html)\n- React精华之虚拟DOM：[《如何实现一个Virtual DOM算法》](https://github.com/livoras/blog/issues/13)\n- [《Angular学习笔记》](https://www.zouyesheng.com/angular.html)\n- [《Angular源码分析系列》](http://www.html-js.com/article/2145)\n\n### 了解后台工作\n- 了解和你一起合作的小伙伴们也是很重要的哦\n- PHP、JAVA、Nodejs等服务端语言\n- MySQL、MongoDB等数据库\n\n## 培养你的热情\n-----\n你热爱前端吗？不清楚？\n那你喜欢逻辑吗，喜欢设计吗，想要将自己大大的脑洞里面装的所有有趣的都分享出来吗？\n我喜欢思考，喜欢想象，热爱学习，沉迷那种把想法写成成果的喜悦。\n如果你的热情跟不上，可以尝试一下设计些小项目：\n### 博客\n这是最大众的选择，但即使是这样普通的网页，依然可以刷上你喜欢的颜色，添加有趣的装饰，贴一些你的想法，分享自己的喜怒哀乐。\n还有什么比拥有一个专属自己的空间更值得开心呢？\n- 搭建方式： \n  - 1.使用现有工具快速搭建。可选择使用wordpress（基于PHP），或者是hexo(基于nodejs)。网上google教程，一搜一大堆，度娘和谷哥无论生活还是学习都是一强力工具呢（很可惜我的认知能力就到这里了。。）\n  - 2.网上下载一些喜欢的博客资源，然后根据自己的爱好进行修改\n  - 3.从基础开始，自己搭建。可以从静态页面开始，用最基础的HTML+CSS+javascript(jQuery)来编写你的静态页面吧。一步步实现自己的设计还是个很有成就感的事情呢。[看我用静态页面和PHP搭的很多bug的博客](http://www.godbasin.com/)\n\n### 游戏\n当然首先你自己得是个爱玩游戏的骚年。相信你会对自己在游戏中加入的小想法和念头沾沾自喜的。\n- 编写选择：\n  - 1.idea不足的时候，可以选择自己喜欢的一款游戏，使用前端去编写。\n  - 2.又或者可以下载已有的游戏，改成成自己喜欢的样子。\n  - 3.脑洞够大的你，当然要写一份自己设计的游戏啦。\n看我的[《打嗝的巴士》](http://o969gatx6.bkt.clouddn.com/index.html)和[《弹珠》](http://o969lbf8k.bkt.clouddn.com/ballt.html)\n\n### 动态页面\n一个简单但却动效十足的交互页面也是很有意思的哦。可参考[《酷炫HTML5》](http://o95scrds5.bkt.clouddn.com/index.html)\n当然这跟HTML5没多大关系，主要用的CSS3，不得不说CSS3太好玩了。\n\n### 静态网页\n静态网页可能没有前面的有意思，但也不妨为一种练习设计和基础的方式。\n当然酷酷的你肯定可以设计漂亮的静态页面，又或者你可以用多种库和框架练练手呢。\n参考入门初期写的一些网页： [《被删动漫》](http://o95u5v08d.bkt.clouddn.com/index.html)和[《Restaurant》](http://o95u208de.bkt.clouddn.com/index.html)\n\n## 结束语\n-----\n一年多来，我学到的也就这篇文章差不多的东西。\n前端很繁荣呢，还有很多很多的领域等待开拓和研究，相信你和我一样都满怀着好奇心和期待呢。\n每天期待去上班的，不能只是我一个呀。让你的工作成为你美好生活的一部分吧。","source":"_posts/front-end-getting-started.md","raw":"---\ntitle: 我的前端入门之路\ndate: 2016-06-24 21:30:30\ncategories: web乱炖\ntags: 分享\n---\n曾经作为物理学院的一名理工女，如今成为一名热爱代码的前端工程师。其中的过程也是颇为丰富，作为记录也好，参考也好，我都想写下来呢。仅供参考哦。\n<!--more-->\n\n## 入门基础学习\n------\n前端基础三剑客（瞎编的）： HTML、CSS、javascript\n\n### 充分利用网络资源\n- 最基础的语法可参考[W3C](http://www.w3school.com.cn/)，这也是一本很好的词典哦\n\n### HTML + CSS\n- [Bootstrap](http://www.bootcss.com/)，大家都在用的样式框架\n- [Font Awesome](http://www.bootcss.com/p/font-awesome/)，图标字体库\n- [jQuery Mobile](http://jquerymobile.com/)，移动web应用程序的框架\n- [jQuery UI](https://jqueryui.com/)，建立在jQuery库上的一组用户界面交互、特效、小部件及主题\n- 大家不妨用的时候也阅读一下这些框架/库的源码，有助于理解CSS特性哦\n\n### HTML5\n- 每一项都值得你去深入探究哦\n  - 用于绘画的canvas元素，可做图片裁剪、创作游戏等等\n  - 用于媒介回放的video和audio元素，可插入音乐和视频哦\n  - 对本地离线存储的更好的支持，离线你的API哈哈\n  - 新的特殊内容元素，比如article、footer、header、nav、section，让你的代码更好懂\n  - 新的表单控件，比如calendar、date、time、email、url、search，记得考虑兼容哦\n  - 实时通信的websocket，建议同时解一下socket.io\n  - 超实用的File API，可以做图片预览等等\n  - 当然少不了sessionStorage和localStorage，可以作为页面间的通讯哦\n\n### CSS3\n- 可以实现超级酷炫的动画效果，还有漂酿的样式哦\n- [w3cPlus](http://www.w3cplus.com/content/css3-gradient)上的CSS3教程不错哦\n  - 背景和边框，好看的按钮和阴影\n  - 文本效果，可以使用自己设计的字体哦\n  - 2D/3D 转换，配合动画和过渡一起使用哦\n  - 动画和过渡效果，快使用酷炫的交互效果吧\n\n### javascript\n- 原生javascript是基础中的基础，但也是能力最强大的主角呀\n- 推荐的书《JavaScript高级程序设计》，《JavaScript 权威指南》，花点钱买本正版吧，收益终身呀\n  - 基础的ECMAScript，js的自由度很高的哦\n  - DOM，若说浏览器是画布，DOM是画布上的内容，javascript就是画笔吧（瞎编+1）\n  - BOM，包括常用的window对象、location对象、history对象等等\n\n## 学会使用和了解框架和库\n-----\n### CSS框架\n- 上面提到的[Bootstrap](http://www.bootcss.com/)，[Font Awesome](http://www.bootcss.com/p/font-awesome/)，[jQuery Mobile](http://jquerymobile.com/)，[jQuery UI](https://jqueryui.com/)都可以去了解看看哦\n\n### LESS/SASS\n- [LESS](http://www.bootcss.com/p/lesscss/)将CSS赋予了动态语言的特性，如变量，继承，运算，函数等\n- [SASS](http://sass.bootcss.com/docs/sass-reference/)让CSS语言更强大、优雅。它允许你使用变量、嵌套规则、mixins、导入等众多功能，并且完全兼容CSS语法\n\n### jQuery库\n- 不得不说这是很强大的js库，曾经在我刚开始工作时帮助我解决了很多问题呢\n- 这里有份[《jQuery API中文文档》](http://www.css88.com/jqapi-1.9/)，查询专用哦\n  - jQuery可以帮忙解决初期的很多问题哦，例如：\n  - 1.消除了JavaScript跨平台兼容问题\n  - 2.丰富的DOM选择器，超便利的$()选择器哦\n  - 3.可以很容易地浏览文档、选择元素、处理事件以及添加效果\n  - 4.ajax操作支持，后面版本的还支持Promise哦\n  - 5.允许开发者定制插件，[jQuery form插件](http://www.cnblogs.com/heyuquan/p/form-plug-async-submit.html)不错哦\n\n### [zepto库](http://www.css88.com/doc/zeptojs_api/)\n- 轻量级的jQuery库，适合移动端\n- 个人觉得了解一下就够了。。除了touch事件有些参考价值，还是jQuery强大多了\n\n\n### MVC/MVVM框架\n- 这是待开拓的一大片领土，每个框架都有自己的特色和优势，很有意思哦\n- 虽然说纷繁琳目，但其实选一个喜欢的用起来就好啦，当然生产环境的话得考虑稳定性、社区、维护这些哦\n- [AngularJS](http://www.apjs.net/)，MVVM\n- [React](http://reactjs.cn/)，MVC的V\n- [Underscore](http://www.bootcss.com/p/underscore/)，JavaScript工具库\n- [Backbone](http://www.css88.com/doc/backbone/)，MVC，基于underscore.js\n- [Vue](http://cn.vuejs.org/)，国人MVVM的VM\n- [Avalon](http://avalonjs.github.io/)，国人MVVM\n\n\n## 前端开发工具\n-----\n### 编辑器\n- DW(Dreamweaver)挺老了，比较重量级\n- Sublime Text，很多人在用的\n- Hbuilder，本人在用，感觉还不错\n- Vim，听说很好用\n\n### Chrome开发者工具/Firebug\n- 浏览器调试工具，很强大哦，只需在浏览器右键-检查就能打开啦\n\n### Gulp/Grunt\n- 基于任务的javascript命令行构建工具\n- 用于任务自动化，创建工作区等\n\n### Mocha/Jasmine/Karma\n- Mocha/Jasmine是常用的前端测试框架\n- Karma是驱动测试的Runner\n\n### 其它前端工具\n- 这里有篇[《各式 Web 前端開發工具整理》](https://github.com/doggy8088/frontend-tools)\n\n\n\n## 成为一枚优质前端工程师\n-----\n### 注意代码规范\n- 良好的代码规范对团队合作很有帮助哦\n- 本骚年在这方面有警觉，但还是欠缺实践呢...\n\n### 针对性研究\n- [《理解Promise》](https://blog.coding.net/blog/how-do-promises-work)\n- [《XMLHttpRequest Level 2使用指南》](http://www.ruanyifeng.com/blog/2012/09/xmlhttprequest_level_2.html)\n- [《浏览器的渲染原理简介》](http://coolshell.cn/articles/9666.html)\n- [《Javascript装载和执行》](http://coolshell.cn/articles/9749.html#jtss-tsina)\n- [《一个对前端模板技术的全面总结》](http://www.html-js.com/article/Regularjs-Chinese-guidelines-for-a-comprehensive-summary-of-the-front-template-technology?utm_source=tuicool&utm_medium=referral)\n- [《浅谈HTML5单页面架构》](http://www.cnblogs.com/kenkofox/p/4643760.html)\n\n### 深入理解库/框架原理\n- 学习研究源代码是个很好的爱好哦，对个人提升也很有帮助呢\n- 当然像Bootstrap这样的优秀样式框架很值得阅读，建议直接翻开源码，配合浏览器调试工具一起学习吧\n- [《深入理解JavaScript系列》](http://www.sxrczx.com/docs/js/2286877.html)\n- [《jQuery源码分析系列》](http://www.cnblogs.com/aaronjs/p/3279314.html)\n- [《触碰jQuery：AJAX异步详解》](http://www.cnblogs.com/heyuquan/archive/2013/05/13/3076465.html)\n- React精华之虚拟DOM：[《如何实现一个Virtual DOM算法》](https://github.com/livoras/blog/issues/13)\n- [《Angular学习笔记》](https://www.zouyesheng.com/angular.html)\n- [《Angular源码分析系列》](http://www.html-js.com/article/2145)\n\n### 了解后台工作\n- 了解和你一起合作的小伙伴们也是很重要的哦\n- PHP、JAVA、Nodejs等服务端语言\n- MySQL、MongoDB等数据库\n\n## 培养你的热情\n-----\n你热爱前端吗？不清楚？\n那你喜欢逻辑吗，喜欢设计吗，想要将自己大大的脑洞里面装的所有有趣的都分享出来吗？\n我喜欢思考，喜欢想象，热爱学习，沉迷那种把想法写成成果的喜悦。\n如果你的热情跟不上，可以尝试一下设计些小项目：\n### 博客\n这是最大众的选择，但即使是这样普通的网页，依然可以刷上你喜欢的颜色，添加有趣的装饰，贴一些你的想法，分享自己的喜怒哀乐。\n还有什么比拥有一个专属自己的空间更值得开心呢？\n- 搭建方式： \n  - 1.使用现有工具快速搭建。可选择使用wordpress（基于PHP），或者是hexo(基于nodejs)。网上google教程，一搜一大堆，度娘和谷哥无论生活还是学习都是一强力工具呢（很可惜我的认知能力就到这里了。。）\n  - 2.网上下载一些喜欢的博客资源，然后根据自己的爱好进行修改\n  - 3.从基础开始，自己搭建。可以从静态页面开始，用最基础的HTML+CSS+javascript(jQuery)来编写你的静态页面吧。一步步实现自己的设计还是个很有成就感的事情呢。[看我用静态页面和PHP搭的很多bug的博客](http://www.godbasin.com/)\n\n### 游戏\n当然首先你自己得是个爱玩游戏的骚年。相信你会对自己在游戏中加入的小想法和念头沾沾自喜的。\n- 编写选择：\n  - 1.idea不足的时候，可以选择自己喜欢的一款游戏，使用前端去编写。\n  - 2.又或者可以下载已有的游戏，改成成自己喜欢的样子。\n  - 3.脑洞够大的你，当然要写一份自己设计的游戏啦。\n看我的[《打嗝的巴士》](http://o969gatx6.bkt.clouddn.com/index.html)和[《弹珠》](http://o969lbf8k.bkt.clouddn.com/ballt.html)\n\n### 动态页面\n一个简单但却动效十足的交互页面也是很有意思的哦。可参考[《酷炫HTML5》](http://o95scrds5.bkt.clouddn.com/index.html)\n当然这跟HTML5没多大关系，主要用的CSS3，不得不说CSS3太好玩了。\n\n### 静态网页\n静态网页可能没有前面的有意思，但也不妨为一种练习设计和基础的方式。\n当然酷酷的你肯定可以设计漂亮的静态页面，又或者你可以用多种库和框架练练手呢。\n参考入门初期写的一些网页： [《被删动漫》](http://o95u5v08d.bkt.clouddn.com/index.html)和[《Restaurant》](http://o95u208de.bkt.clouddn.com/index.html)\n\n## 结束语\n-----\n一年多来，我学到的也就这篇文章差不多的东西。\n前端很繁荣呢，还有很多很多的领域等待开拓和研究，相信你和我一样都满怀着好奇心和期待呢。\n每天期待去上班的，不能只是我一个呀。让你的工作成为你美好生活的一部分吧。","slug":"front-end-getting-started","published":1,"updated":"2016-08-20T10:54:21.080Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cix45hug5002ixotundtknnpu","content":"<p>曾经作为物理学院的一名理工女，如今成为一名热爱代码的前端工程师。其中的过程也是颇为丰富，作为记录也好，参考也好，我都想写下来呢。仅供参考哦。<br><a id=\"more\"></a></p>\n<h2 id=\"入门基础学习\"><a href=\"#入门基础学习\" class=\"headerlink\" title=\"入门基础学习\"></a>入门基础学习</h2><hr>\n<p>前端基础三剑客（瞎编的）： HTML、CSS、javascript</p>\n<h3 id=\"充分利用网络资源\"><a href=\"#充分利用网络资源\" class=\"headerlink\" title=\"充分利用网络资源\"></a>充分利用网络资源</h3><ul>\n<li>最基础的语法可参考<a href=\"http://www.w3school.com.cn/\" target=\"_blank\" rel=\"external\">W3C</a>，这也是一本很好的词典哦</li>\n</ul>\n<h3 id=\"HTML-CSS\"><a href=\"#HTML-CSS\" class=\"headerlink\" title=\"HTML + CSS\"></a>HTML + CSS</h3><ul>\n<li><a href=\"http://www.bootcss.com/\" target=\"_blank\" rel=\"external\">Bootstrap</a>，大家都在用的样式框架</li>\n<li><a href=\"http://www.bootcss.com/p/font-awesome/\" target=\"_blank\" rel=\"external\">Font Awesome</a>，图标字体库</li>\n<li><a href=\"http://jquerymobile.com/\" target=\"_blank\" rel=\"external\">jQuery Mobile</a>，移动web应用程序的框架</li>\n<li><a href=\"https://jqueryui.com/\" target=\"_blank\" rel=\"external\">jQuery UI</a>，建立在jQuery库上的一组用户界面交互、特效、小部件及主题</li>\n<li>大家不妨用的时候也阅读一下这些框架/库的源码，有助于理解CSS特性哦</li>\n</ul>\n<h3 id=\"HTML5\"><a href=\"#HTML5\" class=\"headerlink\" title=\"HTML5\"></a>HTML5</h3><ul>\n<li>每一项都值得你去深入探究哦<ul>\n<li>用于绘画的canvas元素，可做图片裁剪、创作游戏等等</li>\n<li>用于媒介回放的video和audio元素，可插入音乐和视频哦</li>\n<li>对本地离线存储的更好的支持，离线你的API哈哈</li>\n<li>新的特殊内容元素，比如article、footer、header、nav、section，让你的代码更好懂</li>\n<li>新的表单控件，比如calendar、date、time、email、url、search，记得考虑兼容哦</li>\n<li>实时通信的websocket，建议同时解一下socket.io</li>\n<li>超实用的File API，可以做图片预览等等</li>\n<li>当然少不了sessionStorage和localStorage，可以作为页面间的通讯哦</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"CSS3\"><a href=\"#CSS3\" class=\"headerlink\" title=\"CSS3\"></a>CSS3</h3><ul>\n<li>可以实现超级酷炫的动画效果，还有漂酿的样式哦</li>\n<li><a href=\"http://www.w3cplus.com/content/css3-gradient\" target=\"_blank\" rel=\"external\">w3cPlus</a>上的CSS3教程不错哦<ul>\n<li>背景和边框，好看的按钮和阴影</li>\n<li>文本效果，可以使用自己设计的字体哦</li>\n<li>2D/3D 转换，配合动画和过渡一起使用哦</li>\n<li>动画和过渡效果，快使用酷炫的交互效果吧</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"javascript\"><a href=\"#javascript\" class=\"headerlink\" title=\"javascript\"></a>javascript</h3><ul>\n<li>原生javascript是基础中的基础，但也是能力最强大的主角呀</li>\n<li>推荐的书《JavaScript高级程序设计》，《JavaScript 权威指南》，花点钱买本正版吧，收益终身呀<ul>\n<li>基础的ECMAScript，js的自由度很高的哦</li>\n<li>DOM，若说浏览器是画布，DOM是画布上的内容，javascript就是画笔吧（瞎编+1）</li>\n<li>BOM，包括常用的window对象、location对象、history对象等等</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"学会使用和了解框架和库\"><a href=\"#学会使用和了解框架和库\" class=\"headerlink\" title=\"学会使用和了解框架和库\"></a>学会使用和了解框架和库</h2><hr>\n<h3 id=\"CSS框架\"><a href=\"#CSS框架\" class=\"headerlink\" title=\"CSS框架\"></a>CSS框架</h3><ul>\n<li>上面提到的<a href=\"http://www.bootcss.com/\" target=\"_blank\" rel=\"external\">Bootstrap</a>，<a href=\"http://www.bootcss.com/p/font-awesome/\" target=\"_blank\" rel=\"external\">Font Awesome</a>，<a href=\"http://jquerymobile.com/\" target=\"_blank\" rel=\"external\">jQuery Mobile</a>，<a href=\"https://jqueryui.com/\" target=\"_blank\" rel=\"external\">jQuery UI</a>都可以去了解看看哦</li>\n</ul>\n<h3 id=\"LESS-SASS\"><a href=\"#LESS-SASS\" class=\"headerlink\" title=\"LESS/SASS\"></a>LESS/SASS</h3><ul>\n<li><a href=\"http://www.bootcss.com/p/lesscss/\" target=\"_blank\" rel=\"external\">LESS</a>将CSS赋予了动态语言的特性，如变量，继承，运算，函数等</li>\n<li><a href=\"http://sass.bootcss.com/docs/sass-reference/\" target=\"_blank\" rel=\"external\">SASS</a>让CSS语言更强大、优雅。它允许你使用变量、嵌套规则、mixins、导入等众多功能，并且完全兼容CSS语法</li>\n</ul>\n<h3 id=\"jQuery库\"><a href=\"#jQuery库\" class=\"headerlink\" title=\"jQuery库\"></a>jQuery库</h3><ul>\n<li>不得不说这是很强大的js库，曾经在我刚开始工作时帮助我解决了很多问题呢</li>\n<li>这里有份<a href=\"http://www.css88.com/jqapi-1.9/\" target=\"_blank\" rel=\"external\">《jQuery API中文文档》</a>，查询专用哦<ul>\n<li>jQuery可以帮忙解决初期的很多问题哦，例如：</li>\n<li>1.消除了JavaScript跨平台兼容问题</li>\n<li>2.丰富的DOM选择器，超便利的$()选择器哦</li>\n<li>3.可以很容易地浏览文档、选择元素、处理事件以及添加效果</li>\n<li>4.ajax操作支持，后面版本的还支持Promise哦</li>\n<li>5.允许开发者定制插件，<a href=\"http://www.cnblogs.com/heyuquan/p/form-plug-async-submit.html\" target=\"_blank\" rel=\"external\">jQuery form插件</a>不错哦</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"zepto库\"><a href=\"#zepto库\" class=\"headerlink\" title=\"zepto库\"></a><a href=\"http://www.css88.com/doc/zeptojs_api/\" target=\"_blank\" rel=\"external\">zepto库</a></h3><ul>\n<li>轻量级的jQuery库，适合移动端</li>\n<li>个人觉得了解一下就够了。。除了touch事件有些参考价值，还是jQuery强大多了</li>\n</ul>\n<h3 id=\"MVC-MVVM框架\"><a href=\"#MVC-MVVM框架\" class=\"headerlink\" title=\"MVC/MVVM框架\"></a>MVC/MVVM框架</h3><ul>\n<li>这是待开拓的一大片领土，每个框架都有自己的特色和优势，很有意思哦</li>\n<li>虽然说纷繁琳目，但其实选一个喜欢的用起来就好啦，当然生产环境的话得考虑稳定性、社区、维护这些哦</li>\n<li><a href=\"http://www.apjs.net/\" target=\"_blank\" rel=\"external\">AngularJS</a>，MVVM</li>\n<li><a href=\"http://reactjs.cn/\" target=\"_blank\" rel=\"external\">React</a>，MVC的V</li>\n<li><a href=\"http://www.bootcss.com/p/underscore/\" target=\"_blank\" rel=\"external\">Underscore</a>，JavaScript工具库</li>\n<li><a href=\"http://www.css88.com/doc/backbone/\" target=\"_blank\" rel=\"external\">Backbone</a>，MVC，基于underscore.js</li>\n<li><a href=\"http://cn.vuejs.org/\" target=\"_blank\" rel=\"external\">Vue</a>，国人MVVM的VM</li>\n<li><a href=\"http://avalonjs.github.io/\" target=\"_blank\" rel=\"external\">Avalon</a>，国人MVVM</li>\n</ul>\n<h2 id=\"前端开发工具\"><a href=\"#前端开发工具\" class=\"headerlink\" title=\"前端开发工具\"></a>前端开发工具</h2><hr>\n<h3 id=\"编辑器\"><a href=\"#编辑器\" class=\"headerlink\" title=\"编辑器\"></a>编辑器</h3><ul>\n<li>DW(Dreamweaver)挺老了，比较重量级</li>\n<li>Sublime Text，很多人在用的</li>\n<li>Hbuilder，本人在用，感觉还不错</li>\n<li>Vim，听说很好用</li>\n</ul>\n<h3 id=\"Chrome开发者工具-Firebug\"><a href=\"#Chrome开发者工具-Firebug\" class=\"headerlink\" title=\"Chrome开发者工具/Firebug\"></a>Chrome开发者工具/Firebug</h3><ul>\n<li>浏览器调试工具，很强大哦，只需在浏览器右键-检查就能打开啦</li>\n</ul>\n<h3 id=\"Gulp-Grunt\"><a href=\"#Gulp-Grunt\" class=\"headerlink\" title=\"Gulp/Grunt\"></a>Gulp/Grunt</h3><ul>\n<li>基于任务的javascript命令行构建工具</li>\n<li>用于任务自动化，创建工作区等</li>\n</ul>\n<h3 id=\"Mocha-Jasmine-Karma\"><a href=\"#Mocha-Jasmine-Karma\" class=\"headerlink\" title=\"Mocha/Jasmine/Karma\"></a>Mocha/Jasmine/Karma</h3><ul>\n<li>Mocha/Jasmine是常用的前端测试框架</li>\n<li>Karma是驱动测试的Runner</li>\n</ul>\n<h3 id=\"其它前端工具\"><a href=\"#其它前端工具\" class=\"headerlink\" title=\"其它前端工具\"></a>其它前端工具</h3><ul>\n<li>这里有篇<a href=\"https://github.com/doggy8088/frontend-tools\" target=\"_blank\" rel=\"external\">《各式 Web 前端開發工具整理》</a></li>\n</ul>\n<h2 id=\"成为一枚优质前端工程师\"><a href=\"#成为一枚优质前端工程师\" class=\"headerlink\" title=\"成为一枚优质前端工程师\"></a>成为一枚优质前端工程师</h2><hr>\n<h3 id=\"注意代码规范\"><a href=\"#注意代码规范\" class=\"headerlink\" title=\"注意代码规范\"></a>注意代码规范</h3><ul>\n<li>良好的代码规范对团队合作很有帮助哦</li>\n<li>本骚年在这方面有警觉，但还是欠缺实践呢…</li>\n</ul>\n<h3 id=\"针对性研究\"><a href=\"#针对性研究\" class=\"headerlink\" title=\"针对性研究\"></a>针对性研究</h3><ul>\n<li><a href=\"https://blog.coding.net/blog/how-do-promises-work\" target=\"_blank\" rel=\"external\">《理解Promise》</a></li>\n<li><a href=\"http://www.ruanyifeng.com/blog/2012/09/xmlhttprequest_level_2.html\" target=\"_blank\" rel=\"external\">《XMLHttpRequest Level 2使用指南》</a></li>\n<li><a href=\"http://coolshell.cn/articles/9666.html\" target=\"_blank\" rel=\"external\">《浏览器的渲染原理简介》</a></li>\n<li><a href=\"http://coolshell.cn/articles/9749.html#jtss-tsina\" target=\"_blank\" rel=\"external\">《Javascript装载和执行》</a></li>\n<li><a href=\"http://www.html-js.com/article/Regularjs-Chinese-guidelines-for-a-comprehensive-summary-of-the-front-template-technology?utm_source=tuicool&amp;utm_medium=referral\" target=\"_blank\" rel=\"external\">《一个对前端模板技术的全面总结》</a></li>\n<li><a href=\"http://www.cnblogs.com/kenkofox/p/4643760.html\" target=\"_blank\" rel=\"external\">《浅谈HTML5单页面架构》</a></li>\n</ul>\n<h3 id=\"深入理解库-框架原理\"><a href=\"#深入理解库-框架原理\" class=\"headerlink\" title=\"深入理解库/框架原理\"></a>深入理解库/框架原理</h3><ul>\n<li>学习研究源代码是个很好的爱好哦，对个人提升也很有帮助呢</li>\n<li>当然像Bootstrap这样的优秀样式框架很值得阅读，建议直接翻开源码，配合浏览器调试工具一起学习吧</li>\n<li><a href=\"http://www.sxrczx.com/docs/js/2286877.html\" target=\"_blank\" rel=\"external\">《深入理解JavaScript系列》</a></li>\n<li><a href=\"http://www.cnblogs.com/aaronjs/p/3279314.html\" target=\"_blank\" rel=\"external\">《jQuery源码分析系列》</a></li>\n<li><a href=\"http://www.cnblogs.com/heyuquan/archive/2013/05/13/3076465.html\" target=\"_blank\" rel=\"external\">《触碰jQuery：AJAX异步详解》</a></li>\n<li>React精华之虚拟DOM：<a href=\"https://github.com/livoras/blog/issues/13\" target=\"_blank\" rel=\"external\">《如何实现一个Virtual DOM算法》</a></li>\n<li><a href=\"https://www.zouyesheng.com/angular.html\" target=\"_blank\" rel=\"external\">《Angular学习笔记》</a></li>\n<li><a href=\"http://www.html-js.com/article/2145\" target=\"_blank\" rel=\"external\">《Angular源码分析系列》</a></li>\n</ul>\n<h3 id=\"了解后台工作\"><a href=\"#了解后台工作\" class=\"headerlink\" title=\"了解后台工作\"></a>了解后台工作</h3><ul>\n<li>了解和你一起合作的小伙伴们也是很重要的哦</li>\n<li>PHP、JAVA、Nodejs等服务端语言</li>\n<li>MySQL、MongoDB等数据库</li>\n</ul>\n<h2 id=\"培养你的热情\"><a href=\"#培养你的热情\" class=\"headerlink\" title=\"培养你的热情\"></a>培养你的热情</h2><hr>\n<p>你热爱前端吗？不清楚？<br>那你喜欢逻辑吗，喜欢设计吗，想要将自己大大的脑洞里面装的所有有趣的都分享出来吗？<br>我喜欢思考，喜欢想象，热爱学习，沉迷那种把想法写成成果的喜悦。<br>如果你的热情跟不上，可以尝试一下设计些小项目：</p>\n<h3 id=\"博客\"><a href=\"#博客\" class=\"headerlink\" title=\"博客\"></a>博客</h3><p>这是最大众的选择，但即使是这样普通的网页，依然可以刷上你喜欢的颜色，添加有趣的装饰，贴一些你的想法，分享自己的喜怒哀乐。<br>还有什么比拥有一个专属自己的空间更值得开心呢？</p>\n<ul>\n<li>搭建方式： <ul>\n<li>1.使用现有工具快速搭建。可选择使用wordpress（基于PHP），或者是hexo(基于nodejs)。网上google教程，一搜一大堆，度娘和谷哥无论生活还是学习都是一强力工具呢（很可惜我的认知能力就到这里了。。）</li>\n<li>2.网上下载一些喜欢的博客资源，然后根据自己的爱好进行修改</li>\n<li>3.从基础开始，自己搭建。可以从静态页面开始，用最基础的HTML+CSS+javascript(jQuery)来编写你的静态页面吧。一步步实现自己的设计还是个很有成就感的事情呢。<a href=\"http://www.godbasin.com/\" target=\"_blank\" rel=\"external\">看我用静态页面和PHP搭的很多bug的博客</a></li>\n</ul>\n</li>\n</ul>\n<h3 id=\"游戏\"><a href=\"#游戏\" class=\"headerlink\" title=\"游戏\"></a>游戏</h3><p>当然首先你自己得是个爱玩游戏的骚年。相信你会对自己在游戏中加入的小想法和念头沾沾自喜的。</p>\n<ul>\n<li>编写选择：<ul>\n<li>1.idea不足的时候，可以选择自己喜欢的一款游戏，使用前端去编写。</li>\n<li>2.又或者可以下载已有的游戏，改成成自己喜欢的样子。</li>\n<li>3.脑洞够大的你，当然要写一份自己设计的游戏啦。<br>看我的<a href=\"http://o969gatx6.bkt.clouddn.com/index.html\" target=\"_blank\" rel=\"external\">《打嗝的巴士》</a>和<a href=\"http://o969lbf8k.bkt.clouddn.com/ballt.html\" target=\"_blank\" rel=\"external\">《弹珠》</a></li>\n</ul>\n</li>\n</ul>\n<h3 id=\"动态页面\"><a href=\"#动态页面\" class=\"headerlink\" title=\"动态页面\"></a>动态页面</h3><p>一个简单但却动效十足的交互页面也是很有意思的哦。可参考<a href=\"http://o95scrds5.bkt.clouddn.com/index.html\" target=\"_blank\" rel=\"external\">《酷炫HTML5》</a><br>当然这跟HTML5没多大关系，主要用的CSS3，不得不说CSS3太好玩了。</p>\n<h3 id=\"静态网页\"><a href=\"#静态网页\" class=\"headerlink\" title=\"静态网页\"></a>静态网页</h3><p>静态网页可能没有前面的有意思，但也不妨为一种练习设计和基础的方式。<br>当然酷酷的你肯定可以设计漂亮的静态页面，又或者你可以用多种库和框架练练手呢。<br>参考入门初期写的一些网页： <a href=\"http://o95u5v08d.bkt.clouddn.com/index.html\" target=\"_blank\" rel=\"external\">《被删动漫》</a>和<a href=\"http://o95u208de.bkt.clouddn.com/index.html\" target=\"_blank\" rel=\"external\">《Restaurant》</a></p>\n<h2 id=\"结束语\"><a href=\"#结束语\" class=\"headerlink\" title=\"结束语\"></a>结束语</h2><hr>\n<p>一年多来，我学到的也就这篇文章差不多的东西。<br>前端很繁荣呢，还有很多很多的领域等待开拓和研究，相信你和我一样都满怀着好奇心和期待呢。<br>每天期待去上班的，不能只是我一个呀。让你的工作成为你美好生活的一部分吧。</p>\n","excerpt":"<p>曾经作为物理学院的一名理工女，如今成为一名热爱代码的前端工程师。其中的过程也是颇为丰富，作为记录也好，参考也好，我都想写下来呢。仅供参考哦。<br>","more":"</p>\n<h2 id=\"入门基础学习\"><a href=\"#入门基础学习\" class=\"headerlink\" title=\"入门基础学习\"></a>入门基础学习</h2><hr>\n<p>前端基础三剑客（瞎编的）： HTML、CSS、javascript</p>\n<h3 id=\"充分利用网络资源\"><a href=\"#充分利用网络资源\" class=\"headerlink\" title=\"充分利用网络资源\"></a>充分利用网络资源</h3><ul>\n<li>最基础的语法可参考<a href=\"http://www.w3school.com.cn/\">W3C</a>，这也是一本很好的词典哦</li>\n</ul>\n<h3 id=\"HTML-CSS\"><a href=\"#HTML-CSS\" class=\"headerlink\" title=\"HTML + CSS\"></a>HTML + CSS</h3><ul>\n<li><a href=\"http://www.bootcss.com/\">Bootstrap</a>，大家都在用的样式框架</li>\n<li><a href=\"http://www.bootcss.com/p/font-awesome/\">Font Awesome</a>，图标字体库</li>\n<li><a href=\"http://jquerymobile.com/\">jQuery Mobile</a>，移动web应用程序的框架</li>\n<li><a href=\"https://jqueryui.com/\">jQuery UI</a>，建立在jQuery库上的一组用户界面交互、特效、小部件及主题</li>\n<li>大家不妨用的时候也阅读一下这些框架/库的源码，有助于理解CSS特性哦</li>\n</ul>\n<h3 id=\"HTML5\"><a href=\"#HTML5\" class=\"headerlink\" title=\"HTML5\"></a>HTML5</h3><ul>\n<li>每一项都值得你去深入探究哦<ul>\n<li>用于绘画的canvas元素，可做图片裁剪、创作游戏等等</li>\n<li>用于媒介回放的video和audio元素，可插入音乐和视频哦</li>\n<li>对本地离线存储的更好的支持，离线你的API哈哈</li>\n<li>新的特殊内容元素，比如article、footer、header、nav、section，让你的代码更好懂</li>\n<li>新的表单控件，比如calendar、date、time、email、url、search，记得考虑兼容哦</li>\n<li>实时通信的websocket，建议同时解一下socket.io</li>\n<li>超实用的File API，可以做图片预览等等</li>\n<li>当然少不了sessionStorage和localStorage，可以作为页面间的通讯哦</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"CSS3\"><a href=\"#CSS3\" class=\"headerlink\" title=\"CSS3\"></a>CSS3</h3><ul>\n<li>可以实现超级酷炫的动画效果，还有漂酿的样式哦</li>\n<li><a href=\"http://www.w3cplus.com/content/css3-gradient\">w3cPlus</a>上的CSS3教程不错哦<ul>\n<li>背景和边框，好看的按钮和阴影</li>\n<li>文本效果，可以使用自己设计的字体哦</li>\n<li>2D/3D 转换，配合动画和过渡一起使用哦</li>\n<li>动画和过渡效果，快使用酷炫的交互效果吧</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"javascript\"><a href=\"#javascript\" class=\"headerlink\" title=\"javascript\"></a>javascript</h3><ul>\n<li>原生javascript是基础中的基础，但也是能力最强大的主角呀</li>\n<li>推荐的书《JavaScript高级程序设计》，《JavaScript 权威指南》，花点钱买本正版吧，收益终身呀<ul>\n<li>基础的ECMAScript，js的自由度很高的哦</li>\n<li>DOM，若说浏览器是画布，DOM是画布上的内容，javascript就是画笔吧（瞎编+1）</li>\n<li>BOM，包括常用的window对象、location对象、history对象等等</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"学会使用和了解框架和库\"><a href=\"#学会使用和了解框架和库\" class=\"headerlink\" title=\"学会使用和了解框架和库\"></a>学会使用和了解框架和库</h2><hr>\n<h3 id=\"CSS框架\"><a href=\"#CSS框架\" class=\"headerlink\" title=\"CSS框架\"></a>CSS框架</h3><ul>\n<li>上面提到的<a href=\"http://www.bootcss.com/\">Bootstrap</a>，<a href=\"http://www.bootcss.com/p/font-awesome/\">Font Awesome</a>，<a href=\"http://jquerymobile.com/\">jQuery Mobile</a>，<a href=\"https://jqueryui.com/\">jQuery UI</a>都可以去了解看看哦</li>\n</ul>\n<h3 id=\"LESS-SASS\"><a href=\"#LESS-SASS\" class=\"headerlink\" title=\"LESS/SASS\"></a>LESS/SASS</h3><ul>\n<li><a href=\"http://www.bootcss.com/p/lesscss/\">LESS</a>将CSS赋予了动态语言的特性，如变量，继承，运算，函数等</li>\n<li><a href=\"http://sass.bootcss.com/docs/sass-reference/\">SASS</a>让CSS语言更强大、优雅。它允许你使用变量、嵌套规则、mixins、导入等众多功能，并且完全兼容CSS语法</li>\n</ul>\n<h3 id=\"jQuery库\"><a href=\"#jQuery库\" class=\"headerlink\" title=\"jQuery库\"></a>jQuery库</h3><ul>\n<li>不得不说这是很强大的js库，曾经在我刚开始工作时帮助我解决了很多问题呢</li>\n<li>这里有份<a href=\"http://www.css88.com/jqapi-1.9/\">《jQuery API中文文档》</a>，查询专用哦<ul>\n<li>jQuery可以帮忙解决初期的很多问题哦，例如：</li>\n<li>1.消除了JavaScript跨平台兼容问题</li>\n<li>2.丰富的DOM选择器，超便利的$()选择器哦</li>\n<li>3.可以很容易地浏览文档、选择元素、处理事件以及添加效果</li>\n<li>4.ajax操作支持，后面版本的还支持Promise哦</li>\n<li>5.允许开发者定制插件，<a href=\"http://www.cnblogs.com/heyuquan/p/form-plug-async-submit.html\">jQuery form插件</a>不错哦</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"zepto库\"><a href=\"#zepto库\" class=\"headerlink\" title=\"zepto库\"></a><a href=\"http://www.css88.com/doc/zeptojs_api/\">zepto库</a></h3><ul>\n<li>轻量级的jQuery库，适合移动端</li>\n<li>个人觉得了解一下就够了。。除了touch事件有些参考价值，还是jQuery强大多了</li>\n</ul>\n<h3 id=\"MVC-MVVM框架\"><a href=\"#MVC-MVVM框架\" class=\"headerlink\" title=\"MVC/MVVM框架\"></a>MVC/MVVM框架</h3><ul>\n<li>这是待开拓的一大片领土，每个框架都有自己的特色和优势，很有意思哦</li>\n<li>虽然说纷繁琳目，但其实选一个喜欢的用起来就好啦，当然生产环境的话得考虑稳定性、社区、维护这些哦</li>\n<li><a href=\"http://www.apjs.net/\">AngularJS</a>，MVVM</li>\n<li><a href=\"http://reactjs.cn/\">React</a>，MVC的V</li>\n<li><a href=\"http://www.bootcss.com/p/underscore/\">Underscore</a>，JavaScript工具库</li>\n<li><a href=\"http://www.css88.com/doc/backbone/\">Backbone</a>，MVC，基于underscore.js</li>\n<li><a href=\"http://cn.vuejs.org/\">Vue</a>，国人MVVM的VM</li>\n<li><a href=\"http://avalonjs.github.io/\">Avalon</a>，国人MVVM</li>\n</ul>\n<h2 id=\"前端开发工具\"><a href=\"#前端开发工具\" class=\"headerlink\" title=\"前端开发工具\"></a>前端开发工具</h2><hr>\n<h3 id=\"编辑器\"><a href=\"#编辑器\" class=\"headerlink\" title=\"编辑器\"></a>编辑器</h3><ul>\n<li>DW(Dreamweaver)挺老了，比较重量级</li>\n<li>Sublime Text，很多人在用的</li>\n<li>Hbuilder，本人在用，感觉还不错</li>\n<li>Vim，听说很好用</li>\n</ul>\n<h3 id=\"Chrome开发者工具-Firebug\"><a href=\"#Chrome开发者工具-Firebug\" class=\"headerlink\" title=\"Chrome开发者工具/Firebug\"></a>Chrome开发者工具/Firebug</h3><ul>\n<li>浏览器调试工具，很强大哦，只需在浏览器右键-检查就能打开啦</li>\n</ul>\n<h3 id=\"Gulp-Grunt\"><a href=\"#Gulp-Grunt\" class=\"headerlink\" title=\"Gulp/Grunt\"></a>Gulp/Grunt</h3><ul>\n<li>基于任务的javascript命令行构建工具</li>\n<li>用于任务自动化，创建工作区等</li>\n</ul>\n<h3 id=\"Mocha-Jasmine-Karma\"><a href=\"#Mocha-Jasmine-Karma\" class=\"headerlink\" title=\"Mocha/Jasmine/Karma\"></a>Mocha/Jasmine/Karma</h3><ul>\n<li>Mocha/Jasmine是常用的前端测试框架</li>\n<li>Karma是驱动测试的Runner</li>\n</ul>\n<h3 id=\"其它前端工具\"><a href=\"#其它前端工具\" class=\"headerlink\" title=\"其它前端工具\"></a>其它前端工具</h3><ul>\n<li>这里有篇<a href=\"https://github.com/doggy8088/frontend-tools\">《各式 Web 前端開發工具整理》</a></li>\n</ul>\n<h2 id=\"成为一枚优质前端工程师\"><a href=\"#成为一枚优质前端工程师\" class=\"headerlink\" title=\"成为一枚优质前端工程师\"></a>成为一枚优质前端工程师</h2><hr>\n<h3 id=\"注意代码规范\"><a href=\"#注意代码规范\" class=\"headerlink\" title=\"注意代码规范\"></a>注意代码规范</h3><ul>\n<li>良好的代码规范对团队合作很有帮助哦</li>\n<li>本骚年在这方面有警觉，但还是欠缺实践呢…</li>\n</ul>\n<h3 id=\"针对性研究\"><a href=\"#针对性研究\" class=\"headerlink\" title=\"针对性研究\"></a>针对性研究</h3><ul>\n<li><a href=\"https://blog.coding.net/blog/how-do-promises-work\">《理解Promise》</a></li>\n<li><a href=\"http://www.ruanyifeng.com/blog/2012/09/xmlhttprequest_level_2.html\">《XMLHttpRequest Level 2使用指南》</a></li>\n<li><a href=\"http://coolshell.cn/articles/9666.html\">《浏览器的渲染原理简介》</a></li>\n<li><a href=\"http://coolshell.cn/articles/9749.html#jtss-tsina\">《Javascript装载和执行》</a></li>\n<li><a href=\"http://www.html-js.com/article/Regularjs-Chinese-guidelines-for-a-comprehensive-summary-of-the-front-template-technology?utm_source=tuicool&amp;utm_medium=referral\">《一个对前端模板技术的全面总结》</a></li>\n<li><a href=\"http://www.cnblogs.com/kenkofox/p/4643760.html\">《浅谈HTML5单页面架构》</a></li>\n</ul>\n<h3 id=\"深入理解库-框架原理\"><a href=\"#深入理解库-框架原理\" class=\"headerlink\" title=\"深入理解库/框架原理\"></a>深入理解库/框架原理</h3><ul>\n<li>学习研究源代码是个很好的爱好哦，对个人提升也很有帮助呢</li>\n<li>当然像Bootstrap这样的优秀样式框架很值得阅读，建议直接翻开源码，配合浏览器调试工具一起学习吧</li>\n<li><a href=\"http://www.sxrczx.com/docs/js/2286877.html\">《深入理解JavaScript系列》</a></li>\n<li><a href=\"http://www.cnblogs.com/aaronjs/p/3279314.html\">《jQuery源码分析系列》</a></li>\n<li><a href=\"http://www.cnblogs.com/heyuquan/archive/2013/05/13/3076465.html\">《触碰jQuery：AJAX异步详解》</a></li>\n<li>React精华之虚拟DOM：<a href=\"https://github.com/livoras/blog/issues/13\">《如何实现一个Virtual DOM算法》</a></li>\n<li><a href=\"https://www.zouyesheng.com/angular.html\">《Angular学习笔记》</a></li>\n<li><a href=\"http://www.html-js.com/article/2145\">《Angular源码分析系列》</a></li>\n</ul>\n<h3 id=\"了解后台工作\"><a href=\"#了解后台工作\" class=\"headerlink\" title=\"了解后台工作\"></a>了解后台工作</h3><ul>\n<li>了解和你一起合作的小伙伴们也是很重要的哦</li>\n<li>PHP、JAVA、Nodejs等服务端语言</li>\n<li>MySQL、MongoDB等数据库</li>\n</ul>\n<h2 id=\"培养你的热情\"><a href=\"#培养你的热情\" class=\"headerlink\" title=\"培养你的热情\"></a>培养你的热情</h2><hr>\n<p>你热爱前端吗？不清楚？<br>那你喜欢逻辑吗，喜欢设计吗，想要将自己大大的脑洞里面装的所有有趣的都分享出来吗？<br>我喜欢思考，喜欢想象，热爱学习，沉迷那种把想法写成成果的喜悦。<br>如果你的热情跟不上，可以尝试一下设计些小项目：</p>\n<h3 id=\"博客\"><a href=\"#博客\" class=\"headerlink\" title=\"博客\"></a>博客</h3><p>这是最大众的选择，但即使是这样普通的网页，依然可以刷上你喜欢的颜色，添加有趣的装饰，贴一些你的想法，分享自己的喜怒哀乐。<br>还有什么比拥有一个专属自己的空间更值得开心呢？</p>\n<ul>\n<li>搭建方式： <ul>\n<li>1.使用现有工具快速搭建。可选择使用wordpress（基于PHP），或者是hexo(基于nodejs)。网上google教程，一搜一大堆，度娘和谷哥无论生活还是学习都是一强力工具呢（很可惜我的认知能力就到这里了。。）</li>\n<li>2.网上下载一些喜欢的博客资源，然后根据自己的爱好进行修改</li>\n<li>3.从基础开始，自己搭建。可以从静态页面开始，用最基础的HTML+CSS+javascript(jQuery)来编写你的静态页面吧。一步步实现自己的设计还是个很有成就感的事情呢。<a href=\"http://www.godbasin.com/\">看我用静态页面和PHP搭的很多bug的博客</a></li>\n</ul>\n</li>\n</ul>\n<h3 id=\"游戏\"><a href=\"#游戏\" class=\"headerlink\" title=\"游戏\"></a>游戏</h3><p>当然首先你自己得是个爱玩游戏的骚年。相信你会对自己在游戏中加入的小想法和念头沾沾自喜的。</p>\n<ul>\n<li>编写选择：<ul>\n<li>1.idea不足的时候，可以选择自己喜欢的一款游戏，使用前端去编写。</li>\n<li>2.又或者可以下载已有的游戏，改成成自己喜欢的样子。</li>\n<li>3.脑洞够大的你，当然要写一份自己设计的游戏啦。<br>看我的<a href=\"http://o969gatx6.bkt.clouddn.com/index.html\">《打嗝的巴士》</a>和<a href=\"http://o969lbf8k.bkt.clouddn.com/ballt.html\">《弹珠》</a></li>\n</ul>\n</li>\n</ul>\n<h3 id=\"动态页面\"><a href=\"#动态页面\" class=\"headerlink\" title=\"动态页面\"></a>动态页面</h3><p>一个简单但却动效十足的交互页面也是很有意思的哦。可参考<a href=\"http://o95scrds5.bkt.clouddn.com/index.html\">《酷炫HTML5》</a><br>当然这跟HTML5没多大关系，主要用的CSS3，不得不说CSS3太好玩了。</p>\n<h3 id=\"静态网页\"><a href=\"#静态网页\" class=\"headerlink\" title=\"静态网页\"></a>静态网页</h3><p>静态网页可能没有前面的有意思，但也不妨为一种练习设计和基础的方式。<br>当然酷酷的你肯定可以设计漂亮的静态页面，又或者你可以用多种库和框架练练手呢。<br>参考入门初期写的一些网页： <a href=\"http://o95u5v08d.bkt.clouddn.com/index.html\">《被删动漫》</a>和<a href=\"http://o95u208de.bkt.clouddn.com/index.html\">《Restaurant》</a></p>\n<h2 id=\"结束语\"><a href=\"#结束语\" class=\"headerlink\" title=\"结束语\"></a>结束语</h2><hr>\n<p>一年多来，我学到的也就这篇文章差不多的东西。<br>前端很繁荣呢，还有很多很多的领域等待开拓和研究，相信你和我一样都满怀着好奇心和期待呢。<br>每天期待去上班的，不能只是我一个呀。让你的工作成为你美好生活的一部分吧。</p>"},{"title":"谈谈js的闭包","date":"2016-07-02T20:21:32.000Z","_content":"上一篇我们讲js的this，里面提到了执行环境，今天我们就结合执行环境一起讲一下闭包吧。\n<!--more-->\n\n要理解闭包，这里我们补充一下js的作用域和作用域链吧，[上一篇](https://godbasin.github.io/2016/07/02/js-this/)也只是稍微略过。\n\n## 变量的作用域\n-----\n### 全局作用域和局部作用域\n在JS当中一个变量的作用域（scope）是程序中定义这个变量的区域。变量分为两类：全局（global）的和局部的。\n- 全局变量的作用域是全局性的，即在JavaScript代码中，它处处都有定义\n- 在函数之内声明的变量，就只在函数体内部有定义。它们是局部变量，作用域是局部性的。函数的参数也是局部变量，它们只在函数体内部有定义\n\n``` javascript\nvar a; //全局变量，作用域全局性\nfunction example(){\n\tvar b; //局部变量，作用域局部性\n\tc = 1; //全局变量，作用域全局性\n}\n```\n变量没有在函数内声明或者声明的时候没有带var就是全局变量，拥有全局作用域，window对象的所有属性拥有全局作用域，在代码任何地方都可以访问。函数内部声明并且以var修饰的变量就是局部变量，只能在函数体内使用。\n\n### 作用域链\n- 作用域链是什么\n每个JavaScript执行环境都有一个和它关联在一起的作用域链。这个作用域链是一个对象列表或对象链。\n- 作用域链的创建\n当代码在一个环境中执行时，会创建变量对象的一个作用域链，来保证对执行环境有权访问的变量和函数的有序访问。作用域第一个对象始终是当前执行代码所在环境的变量对象。\n- 搜索标识符\n在函数运行过程中标识符的解析是沿着作用域链一级一级搜索的过程，从第一个对象开始，逐级向后回溯，直到找到同名标识符为止，找到后不再继续遍历，找不到就报错。\n``` javascript\n//作用域链[全局]\nvar a = 1; \nfunction fun1(){\n\t//作用域链[fun1，全局]\n\tvar b = 2; \n\tfunction fun2(){\n\t\t//作用域链[fun2, fun1，全局]\n\t\tvar c = 3; \n\t\talert(c); //查找fun2，有结果，返回3\n\t\talert(b); //查找fun2，无结果，查找fun1，有结果，返回2\n\t\talert(a); //查找fun2，无结果，查找fun1，无结果，查找全局，有结果，返回1\n\t\talert(abc); //查找fun2，无结果，查找fun1，无结果，查找全局，无结果，返回undefined，若此处为函数调用，则报错\n\t}\n}\n```\n\n### with语句\nwith语句用于设置代码在特定对象中的作用域，主要用来临时扩展作用域链，将语句中的对象添加到作用域的头部。\n下面引用[w3c](http://www.w3school.com.cn/js/pro_js_statements_with.asp)上的例子进行说明：\n``` javascript\nvar sMessage = \"hello\";\nwith(sMessage) {\n  alert(toUpperCase());\t//输出 \"HELLO\"\n}\n```\n\n## js闭包\n-----\n铺垫了这么多，下面我们开始讲闭包。\n官方的解释是：闭包是一个拥有许多变量和绑定了这些变量的环境的表达式（通常是一个函数），因而这些变量也是该表达式的一部分。\n这句话很难懂，我们还是从闭包的出现开始讲起吧。\n\n### 闭包的出现\n在Javascript语言中，只有函数内部的子函数才能读取局部变量。我们看下面的例子：\n``` javascript\nfunction B(){\n\tvar b = 2;\n}\nB();\nalert(b); //undefined\n```\n在全局环境下无法访问函数B内的变量，这可以用前面的作用域和作用域链来解释，即全局函数的作用域链里不含有函数B内的作用域。现在如果我们想要访问内部函数的变量，可以这样做：\n``` javascript\nfunction B(){\n\tvar b = 2;\n\tfunction C(){\n\t\talert(b); //2\n\t}\n\treturn C;\n}\nvar A = B();\nA(); //2\n```\n也就是说，我们在函数B内定义了另外一个函数C，用于输出函数B内变量b的值。而当在函数B内把函数C返回，且被外部引用了的时候，我们就可以在函数B外面获得函数B里面的变量了，此时也创建了一个闭包。\n在本质上，闭包就是将函数内部和函数外部连接起来的一座桥梁。\n\n### 再理解闭包\n我们看下面代码：\n``` javascript\nfunction B(){\n\tvar b = (b === undefined) ? 1 : b;\n\tfunction C(){\n\t\tb++;\n\t\talert(b);\n\t};\n\treturn C;\n}\nvar A = B();\nA(); //2\nA(); //3\nvar D = B();\nD(); //2\nD(); //3\nD(); //4\nA(); //4\nA(); //5\n```\n当我们使用闭包把函数B里面的函数C返回并赋值给函数外的变量A，在每次调用A时函数B里面的变量b都会增加1，即该变量b并没有被销毁，此时我们可以继续使用或改变该变量b。\n并且，当我们再次使用闭包把函数B里面的函数C返回并赋值给函数外的变量D时，里面的变量b会重新被赋值。觉得别扭吗？\n\n其实想要更好地理解我们需要配合[上节](https://godbasin.github.io/2016/07/02/js-this/)说过的执行环境来讲，这里我再贴一下执行环境有关的说明：\n- 定义期\n  - 全局函数A创建了一个A的[[scope]]属性，包含全局[[scope]]\n  - 函数A里定义函数B，则B的[[scope]]包含全局[[scope]]和A的[[scope]]\n- 执行期\n当函数被执行的时候，就是进入这个函数的执行环境，首先会创一个它自己的活动对象，包含\n  - this\n  - 参数(arguments，全局对象没有arguments)\n  - 局部变量(包括命名的参数)\n  - 一个变量对象的作用域链[[scope chain]]\n\n我们把上面的代码执行过程再重新理一下：\n1.变量声明和函数声明（声明的提升），此时进行函数B的定义期\n2.变量A赋值第一步，此时进入函数B的执行期，进入B函数的执行环境，创建相关的this对象(window对象)、局部变量、作用域链等，我们称该变量b为b1，b1被赋值1\n3.变量A赋值第二步，此时函数B执行完毕，返回函数B内的函数C，并引用变量b1，故变量b1并没有被回收\n4.变量A调用，此时引用了变量b1并增加1，因为b1仍然在内存中，故可以实现b1的自增\n5.进行变量D赋值，步骤和2一致，重新进入函数B的执行期，再次创建了B函数执行环境相关的this对象(window对象)、局部变量、作用域链等，这里我们可以看到，这个变量b是重新创建的，我们称之为b2，b2被赋值1\n6.变量D调用，此时引用了变量b2并增加1，因为b2仍然在内存中，故可以实现b2的自增\n\n### 闭包的用途\n闭包可以用在许多地方，它的最大用处有两个：\n- 用于读取其他函数内部变量的函数\n- 让这些变量的值始终保持在内存中\n接下来我们结合js的垃圾回收机制谈谈为什么闭包使变量保存在内存中吧。\n\n### js垃圾回收机制\njs垃圾回收机制原理就是找出那些不在被使用的变量，然后释放其所占有的内存。回收器一般是按照固定的时间间隔或者预设的时间进行处理的。\n对于其他语言来说，需要开发者手动的来跟踪内存，而JS的垃圾回收机制使得JS开发人员无需再关系内存的情况，所有的内存分配以及回收都会由垃圾回收器自动完成，执行环境会对执行过程中占有的内存负责。\n- 垃圾回收机制的种类\n  - 标记清除\n    - 在和执行上下文类似的的环境中当变量名称进入环境的时候，那么变量会被打上YES。一般来说是绝对不会释放被打上YES标签的变量内存的，一旦变量在出了该环境时，变会被打上NO标签（和作用域貌似有点像），JS引擎会在一定时间间隔或者设置的时间来进行扫描，对NO标签的进行剔除以释放其内存。\n  - 引用计数\n    - 一般来说，引用计数的含义是跟踪记录每个值被引用的次数。当声明一个变量并将一个引用类型值赋给该变量时，则这个值的引用次数便是1，如果同一个值又被赋给另一个变量，则该值的引用次数加1，相反，如果包含对这个值引用的变量又取得了另一个值，则这个值的引用次数减1。当这个值的引用次数为0时，说明没有办法访问到它了，因而可以将其占用的内存空间回收。\n除了一些极老版本的IE，目前市面上的JS引擎基本采用标记清除来除了垃圾回收。\n可见，当我们在函数外引用了函数里面的变量时，即使该函数已经执行完毕，但由于其内部变量仍被引用，便不会被内存空间回收。若带目的性地使用这个特点，则是闭包的一种用途。但是如果不是针对性地用于保存变量，则可能会导致内存泄露哦。\n\n### 参考\n[《学习Javascript闭包（Closure）》](http://www.ruanyifeng.com/blog/2009/08/learning_javascript_closures.html)\n[《JS 垃圾回收机制简介~ 》](http://blog.chinaunix.net/uid-26672038-id-3522560.html)\n\n## 结束语\n-----\n有人说闭包很方便，这话不假，我们可以利用闭包创建一些服务，用来保存需要的变量。但是闭包会使子函数保持其作用域链的所有变量及函数与内存中，内存消耗很大，所以不能滥用，并且在使用的时候尽量销毁父函数不再使用的变量哦。","source":"_posts/js-closure.md","raw":"---\ntitle: 谈谈js的闭包\ndate: 2016-07-03 04:21:32\ncategories: js什锦\ntags: 逻辑实现\n---\n上一篇我们讲js的this，里面提到了执行环境，今天我们就结合执行环境一起讲一下闭包吧。\n<!--more-->\n\n要理解闭包，这里我们补充一下js的作用域和作用域链吧，[上一篇](https://godbasin.github.io/2016/07/02/js-this/)也只是稍微略过。\n\n## 变量的作用域\n-----\n### 全局作用域和局部作用域\n在JS当中一个变量的作用域（scope）是程序中定义这个变量的区域。变量分为两类：全局（global）的和局部的。\n- 全局变量的作用域是全局性的，即在JavaScript代码中，它处处都有定义\n- 在函数之内声明的变量，就只在函数体内部有定义。它们是局部变量，作用域是局部性的。函数的参数也是局部变量，它们只在函数体内部有定义\n\n``` javascript\nvar a; //全局变量，作用域全局性\nfunction example(){\n\tvar b; //局部变量，作用域局部性\n\tc = 1; //全局变量，作用域全局性\n}\n```\n变量没有在函数内声明或者声明的时候没有带var就是全局变量，拥有全局作用域，window对象的所有属性拥有全局作用域，在代码任何地方都可以访问。函数内部声明并且以var修饰的变量就是局部变量，只能在函数体内使用。\n\n### 作用域链\n- 作用域链是什么\n每个JavaScript执行环境都有一个和它关联在一起的作用域链。这个作用域链是一个对象列表或对象链。\n- 作用域链的创建\n当代码在一个环境中执行时，会创建变量对象的一个作用域链，来保证对执行环境有权访问的变量和函数的有序访问。作用域第一个对象始终是当前执行代码所在环境的变量对象。\n- 搜索标识符\n在函数运行过程中标识符的解析是沿着作用域链一级一级搜索的过程，从第一个对象开始，逐级向后回溯，直到找到同名标识符为止，找到后不再继续遍历，找不到就报错。\n``` javascript\n//作用域链[全局]\nvar a = 1; \nfunction fun1(){\n\t//作用域链[fun1，全局]\n\tvar b = 2; \n\tfunction fun2(){\n\t\t//作用域链[fun2, fun1，全局]\n\t\tvar c = 3; \n\t\talert(c); //查找fun2，有结果，返回3\n\t\talert(b); //查找fun2，无结果，查找fun1，有结果，返回2\n\t\talert(a); //查找fun2，无结果，查找fun1，无结果，查找全局，有结果，返回1\n\t\talert(abc); //查找fun2，无结果，查找fun1，无结果，查找全局，无结果，返回undefined，若此处为函数调用，则报错\n\t}\n}\n```\n\n### with语句\nwith语句用于设置代码在特定对象中的作用域，主要用来临时扩展作用域链，将语句中的对象添加到作用域的头部。\n下面引用[w3c](http://www.w3school.com.cn/js/pro_js_statements_with.asp)上的例子进行说明：\n``` javascript\nvar sMessage = \"hello\";\nwith(sMessage) {\n  alert(toUpperCase());\t//输出 \"HELLO\"\n}\n```\n\n## js闭包\n-----\n铺垫了这么多，下面我们开始讲闭包。\n官方的解释是：闭包是一个拥有许多变量和绑定了这些变量的环境的表达式（通常是一个函数），因而这些变量也是该表达式的一部分。\n这句话很难懂，我们还是从闭包的出现开始讲起吧。\n\n### 闭包的出现\n在Javascript语言中，只有函数内部的子函数才能读取局部变量。我们看下面的例子：\n``` javascript\nfunction B(){\n\tvar b = 2;\n}\nB();\nalert(b); //undefined\n```\n在全局环境下无法访问函数B内的变量，这可以用前面的作用域和作用域链来解释，即全局函数的作用域链里不含有函数B内的作用域。现在如果我们想要访问内部函数的变量，可以这样做：\n``` javascript\nfunction B(){\n\tvar b = 2;\n\tfunction C(){\n\t\talert(b); //2\n\t}\n\treturn C;\n}\nvar A = B();\nA(); //2\n```\n也就是说，我们在函数B内定义了另外一个函数C，用于输出函数B内变量b的值。而当在函数B内把函数C返回，且被外部引用了的时候，我们就可以在函数B外面获得函数B里面的变量了，此时也创建了一个闭包。\n在本质上，闭包就是将函数内部和函数外部连接起来的一座桥梁。\n\n### 再理解闭包\n我们看下面代码：\n``` javascript\nfunction B(){\n\tvar b = (b === undefined) ? 1 : b;\n\tfunction C(){\n\t\tb++;\n\t\talert(b);\n\t};\n\treturn C;\n}\nvar A = B();\nA(); //2\nA(); //3\nvar D = B();\nD(); //2\nD(); //3\nD(); //4\nA(); //4\nA(); //5\n```\n当我们使用闭包把函数B里面的函数C返回并赋值给函数外的变量A，在每次调用A时函数B里面的变量b都会增加1，即该变量b并没有被销毁，此时我们可以继续使用或改变该变量b。\n并且，当我们再次使用闭包把函数B里面的函数C返回并赋值给函数外的变量D时，里面的变量b会重新被赋值。觉得别扭吗？\n\n其实想要更好地理解我们需要配合[上节](https://godbasin.github.io/2016/07/02/js-this/)说过的执行环境来讲，这里我再贴一下执行环境有关的说明：\n- 定义期\n  - 全局函数A创建了一个A的[[scope]]属性，包含全局[[scope]]\n  - 函数A里定义函数B，则B的[[scope]]包含全局[[scope]]和A的[[scope]]\n- 执行期\n当函数被执行的时候，就是进入这个函数的执行环境，首先会创一个它自己的活动对象，包含\n  - this\n  - 参数(arguments，全局对象没有arguments)\n  - 局部变量(包括命名的参数)\n  - 一个变量对象的作用域链[[scope chain]]\n\n我们把上面的代码执行过程再重新理一下：\n1.变量声明和函数声明（声明的提升），此时进行函数B的定义期\n2.变量A赋值第一步，此时进入函数B的执行期，进入B函数的执行环境，创建相关的this对象(window对象)、局部变量、作用域链等，我们称该变量b为b1，b1被赋值1\n3.变量A赋值第二步，此时函数B执行完毕，返回函数B内的函数C，并引用变量b1，故变量b1并没有被回收\n4.变量A调用，此时引用了变量b1并增加1，因为b1仍然在内存中，故可以实现b1的自增\n5.进行变量D赋值，步骤和2一致，重新进入函数B的执行期，再次创建了B函数执行环境相关的this对象(window对象)、局部变量、作用域链等，这里我们可以看到，这个变量b是重新创建的，我们称之为b2，b2被赋值1\n6.变量D调用，此时引用了变量b2并增加1，因为b2仍然在内存中，故可以实现b2的自增\n\n### 闭包的用途\n闭包可以用在许多地方，它的最大用处有两个：\n- 用于读取其他函数内部变量的函数\n- 让这些变量的值始终保持在内存中\n接下来我们结合js的垃圾回收机制谈谈为什么闭包使变量保存在内存中吧。\n\n### js垃圾回收机制\njs垃圾回收机制原理就是找出那些不在被使用的变量，然后释放其所占有的内存。回收器一般是按照固定的时间间隔或者预设的时间进行处理的。\n对于其他语言来说，需要开发者手动的来跟踪内存，而JS的垃圾回收机制使得JS开发人员无需再关系内存的情况，所有的内存分配以及回收都会由垃圾回收器自动完成，执行环境会对执行过程中占有的内存负责。\n- 垃圾回收机制的种类\n  - 标记清除\n    - 在和执行上下文类似的的环境中当变量名称进入环境的时候，那么变量会被打上YES。一般来说是绝对不会释放被打上YES标签的变量内存的，一旦变量在出了该环境时，变会被打上NO标签（和作用域貌似有点像），JS引擎会在一定时间间隔或者设置的时间来进行扫描，对NO标签的进行剔除以释放其内存。\n  - 引用计数\n    - 一般来说，引用计数的含义是跟踪记录每个值被引用的次数。当声明一个变量并将一个引用类型值赋给该变量时，则这个值的引用次数便是1，如果同一个值又被赋给另一个变量，则该值的引用次数加1，相反，如果包含对这个值引用的变量又取得了另一个值，则这个值的引用次数减1。当这个值的引用次数为0时，说明没有办法访问到它了，因而可以将其占用的内存空间回收。\n除了一些极老版本的IE，目前市面上的JS引擎基本采用标记清除来除了垃圾回收。\n可见，当我们在函数外引用了函数里面的变量时，即使该函数已经执行完毕，但由于其内部变量仍被引用，便不会被内存空间回收。若带目的性地使用这个特点，则是闭包的一种用途。但是如果不是针对性地用于保存变量，则可能会导致内存泄露哦。\n\n### 参考\n[《学习Javascript闭包（Closure）》](http://www.ruanyifeng.com/blog/2009/08/learning_javascript_closures.html)\n[《JS 垃圾回收机制简介~ 》](http://blog.chinaunix.net/uid-26672038-id-3522560.html)\n\n## 结束语\n-----\n有人说闭包很方便，这话不假，我们可以利用闭包创建一些服务，用来保存需要的变量。但是闭包会使子函数保持其作用域链的所有变量及函数与内存中，内存消耗很大，所以不能滥用，并且在使用的时候尽量销毁父函数不再使用的变量哦。","slug":"js-closure","published":1,"updated":"2016-08-20T10:54:21.083Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cix45hug7002lxotu6bd29kc9","content":"<p>上一篇我们讲js的this，里面提到了执行环境，今天我们就结合执行环境一起讲一下闭包吧。<br><a id=\"more\"></a></p>\n<p>要理解闭包，这里我们补充一下js的作用域和作用域链吧，<a href=\"https://godbasin.github.io/2016/07/02/js-this/\">上一篇</a>也只是稍微略过。</p>\n<h2 id=\"变量的作用域\"><a href=\"#变量的作用域\" class=\"headerlink\" title=\"变量的作用域\"></a>变量的作用域</h2><hr>\n<h3 id=\"全局作用域和局部作用域\"><a href=\"#全局作用域和局部作用域\" class=\"headerlink\" title=\"全局作用域和局部作用域\"></a>全局作用域和局部作用域</h3><p>在JS当中一个变量的作用域（scope）是程序中定义这个变量的区域。变量分为两类：全局（global）的和局部的。</p>\n<ul>\n<li>全局变量的作用域是全局性的，即在JavaScript代码中，它处处都有定义</li>\n<li>在函数之内声明的变量，就只在函数体内部有定义。它们是局部变量，作用域是局部性的。函数的参数也是局部变量，它们只在函数体内部有定义</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> a; <span class=\"comment\">//全局变量，作用域全局性</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">example</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">  <span class=\"keyword\">var</span> b; <span class=\"comment\">//局部变量，作用域局部性</span></div><div class=\"line\">  c = <span class=\"number\">1</span>; <span class=\"comment\">//全局变量，作用域全局性</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>变量没有在函数内声明或者声明的时候没有带var就是全局变量，拥有全局作用域，window对象的所有属性拥有全局作用域，在代码任何地方都可以访问。函数内部声明并且以var修饰的变量就是局部变量，只能在函数体内使用。</p>\n<h3 id=\"作用域链\"><a href=\"#作用域链\" class=\"headerlink\" title=\"作用域链\"></a>作用域链</h3><ul>\n<li>作用域链是什么<br>每个JavaScript执行环境都有一个和它关联在一起的作用域链。这个作用域链是一个对象列表或对象链。</li>\n<li>作用域链的创建<br>当代码在一个环境中执行时，会创建变量对象的一个作用域链，来保证对执行环境有权访问的变量和函数的有序访问。作用域第一个对象始终是当前执行代码所在环境的变量对象。</li>\n<li>搜索标识符<br>在函数运行过程中标识符的解析是沿着作用域链一级一级搜索的过程，从第一个对象开始，逐级向后回溯，直到找到同名标识符为止，找到后不再继续遍历，找不到就报错。<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//作用域链[全局]</span></div><div class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"number\">1</span>; </div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fun1</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">  <span class=\"comment\">//作用域链[fun1，全局]</span></div><div class=\"line\">  <span class=\"keyword\">var</span> b = <span class=\"number\">2</span>; </div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fun2</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    <span class=\"comment\">//作用域链[fun2, fun1，全局]</span></div><div class=\"line\">    <span class=\"keyword\">var</span> c = <span class=\"number\">3</span>; </div><div class=\"line\">    alert(c); <span class=\"comment\">//查找fun2，有结果，返回3</span></div><div class=\"line\">    alert(b); <span class=\"comment\">//查找fun2，无结果，查找fun1，有结果，返回2</span></div><div class=\"line\">    alert(a); <span class=\"comment\">//查找fun2，无结果，查找fun1，无结果，查找全局，有结果，返回1</span></div><div class=\"line\">    alert(abc); <span class=\"comment\">//查找fun2，无结果，查找fun1，无结果，查找全局，无结果，返回undefined，若此处为函数调用，则报错</span></div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3 id=\"with语句\"><a href=\"#with语句\" class=\"headerlink\" title=\"with语句\"></a>with语句</h3><p>with语句用于设置代码在特定对象中的作用域，主要用来临时扩展作用域链，将语句中的对象添加到作用域的头部。<br>下面引用<a href=\"http://www.w3school.com.cn/js/pro_js_statements_with.asp\" target=\"_blank\" rel=\"external\">w3c</a>上的例子进行说明：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> sMessage = <span class=\"string\">\"hello\"</span>;</div><div class=\"line\"><span class=\"keyword\">with</span>(sMessage) &#123;</div><div class=\"line\">  alert(toUpperCase());\t<span class=\"comment\">//输出 \"HELLO\"</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h2 id=\"js闭包\"><a href=\"#js闭包\" class=\"headerlink\" title=\"js闭包\"></a>js闭包</h2><hr>\n<p>铺垫了这么多，下面我们开始讲闭包。<br>官方的解释是：闭包是一个拥有许多变量和绑定了这些变量的环境的表达式（通常是一个函数），因而这些变量也是该表达式的一部分。<br>这句话很难懂，我们还是从闭包的出现开始讲起吧。</p>\n<h3 id=\"闭包的出现\"><a href=\"#闭包的出现\" class=\"headerlink\" title=\"闭包的出现\"></a>闭包的出现</h3><p>在Javascript语言中，只有函数内部的子函数才能读取局部变量。我们看下面的例子：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">B</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">  <span class=\"keyword\">var</span> b = <span class=\"number\">2</span>;</div><div class=\"line\">&#125;</div><div class=\"line\">B();</div><div class=\"line\">alert(b); <span class=\"comment\">//undefined</span></div></pre></td></tr></table></figure></p>\n<p>在全局环境下无法访问函数B内的变量，这可以用前面的作用域和作用域链来解释，即全局函数的作用域链里不含有函数B内的作用域。现在如果我们想要访问内部函数的变量，可以这样做：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">B</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">  <span class=\"keyword\">var</span> b = <span class=\"number\">2</span>;</div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">C</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    alert(b); <span class=\"comment\">//2</span></div><div class=\"line\">  &#125;</div><div class=\"line\">  <span class=\"keyword\">return</span> C;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">var</span> A = B();</div><div class=\"line\">A(); <span class=\"comment\">//2</span></div></pre></td></tr></table></figure></p>\n<p>也就是说，我们在函数B内定义了另外一个函数C，用于输出函数B内变量b的值。而当在函数B内把函数C返回，且被外部引用了的时候，我们就可以在函数B外面获得函数B里面的变量了，此时也创建了一个闭包。<br>在本质上，闭包就是将函数内部和函数外部连接起来的一座桥梁。</p>\n<h3 id=\"再理解闭包\"><a href=\"#再理解闭包\" class=\"headerlink\" title=\"再理解闭包\"></a>再理解闭包</h3><p>我们看下面代码：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">B</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">  <span class=\"keyword\">var</span> b = (b === <span class=\"literal\">undefined</span>) ? <span class=\"number\">1</span> : b;</div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">C</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    b++;</div><div class=\"line\">    alert(b);</div><div class=\"line\">  &#125;;</div><div class=\"line\">  <span class=\"keyword\">return</span> C;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">var</span> A = B();</div><div class=\"line\">A(); <span class=\"comment\">//2</span></div><div class=\"line\">A(); <span class=\"comment\">//3</span></div><div class=\"line\"><span class=\"keyword\">var</span> D = B();</div><div class=\"line\">D(); <span class=\"comment\">//2</span></div><div class=\"line\">D(); <span class=\"comment\">//3</span></div><div class=\"line\">D(); <span class=\"comment\">//4</span></div><div class=\"line\">A(); <span class=\"comment\">//4</span></div><div class=\"line\">A(); <span class=\"comment\">//5</span></div></pre></td></tr></table></figure></p>\n<p>当我们使用闭包把函数B里面的函数C返回并赋值给函数外的变量A，在每次调用A时函数B里面的变量b都会增加1，即该变量b并没有被销毁，此时我们可以继续使用或改变该变量b。<br>并且，当我们再次使用闭包把函数B里面的函数C返回并赋值给函数外的变量D时，里面的变量b会重新被赋值。觉得别扭吗？</p>\n<p>其实想要更好地理解我们需要配合<a href=\"https://godbasin.github.io/2016/07/02/js-this/\">上节</a>说过的执行环境来讲，这里我再贴一下执行环境有关的说明：</p>\n<ul>\n<li>定义期<ul>\n<li>全局函数A创建了一个A的[[scope]]属性，包含全局[[scope]]</li>\n<li>函数A里定义函数B，则B的[[scope]]包含全局[[scope]]和A的[[scope]]</li>\n</ul>\n</li>\n<li>执行期<br>当函数被执行的时候，就是进入这个函数的执行环境，首先会创一个它自己的活动对象，包含<ul>\n<li>this</li>\n<li>参数(arguments，全局对象没有arguments)</li>\n<li>局部变量(包括命名的参数)</li>\n<li>一个变量对象的作用域链[[scope chain]]</li>\n</ul>\n</li>\n</ul>\n<p>我们把上面的代码执行过程再重新理一下：<br>1.变量声明和函数声明（声明的提升），此时进行函数B的定义期<br>2.变量A赋值第一步，此时进入函数B的执行期，进入B函数的执行环境，创建相关的this对象(window对象)、局部变量、作用域链等，我们称该变量b为b1，b1被赋值1<br>3.变量A赋值第二步，此时函数B执行完毕，返回函数B内的函数C，并引用变量b1，故变量b1并没有被回收<br>4.变量A调用，此时引用了变量b1并增加1，因为b1仍然在内存中，故可以实现b1的自增<br>5.进行变量D赋值，步骤和2一致，重新进入函数B的执行期，再次创建了B函数执行环境相关的this对象(window对象)、局部变量、作用域链等，这里我们可以看到，这个变量b是重新创建的，我们称之为b2，b2被赋值1<br>6.变量D调用，此时引用了变量b2并增加1，因为b2仍然在内存中，故可以实现b2的自增</p>\n<h3 id=\"闭包的用途\"><a href=\"#闭包的用途\" class=\"headerlink\" title=\"闭包的用途\"></a>闭包的用途</h3><p>闭包可以用在许多地方，它的最大用处有两个：</p>\n<ul>\n<li>用于读取其他函数内部变量的函数</li>\n<li>让这些变量的值始终保持在内存中<br>接下来我们结合js的垃圾回收机制谈谈为什么闭包使变量保存在内存中吧。</li>\n</ul>\n<h3 id=\"js垃圾回收机制\"><a href=\"#js垃圾回收机制\" class=\"headerlink\" title=\"js垃圾回收机制\"></a>js垃圾回收机制</h3><p>js垃圾回收机制原理就是找出那些不在被使用的变量，然后释放其所占有的内存。回收器一般是按照固定的时间间隔或者预设的时间进行处理的。<br>对于其他语言来说，需要开发者手动的来跟踪内存，而JS的垃圾回收机制使得JS开发人员无需再关系内存的情况，所有的内存分配以及回收都会由垃圾回收器自动完成，执行环境会对执行过程中占有的内存负责。</p>\n<ul>\n<li>垃圾回收机制的种类<ul>\n<li>标记清除<ul>\n<li>在和执行上下文类似的的环境中当变量名称进入环境的时候，那么变量会被打上YES。一般来说是绝对不会释放被打上YES标签的变量内存的，一旦变量在出了该环境时，变会被打上NO标签（和作用域貌似有点像），JS引擎会在一定时间间隔或者设置的时间来进行扫描，对NO标签的进行剔除以释放其内存。</li>\n</ul>\n</li>\n<li>引用计数<ul>\n<li>一般来说，引用计数的含义是跟踪记录每个值被引用的次数。当声明一个变量并将一个引用类型值赋给该变量时，则这个值的引用次数便是1，如果同一个值又被赋给另一个变量，则该值的引用次数加1，相反，如果包含对这个值引用的变量又取得了另一个值，则这个值的引用次数减1。当这个值的引用次数为0时，说明没有办法访问到它了，因而可以将其占用的内存空间回收。<br>除了一些极老版本的IE，目前市面上的JS引擎基本采用标记清除来除了垃圾回收。<br>可见，当我们在函数外引用了函数里面的变量时，即使该函数已经执行完毕，但由于其内部变量仍被引用，便不会被内存空间回收。若带目的性地使用这个特点，则是闭包的一种用途。但是如果不是针对性地用于保存变量，则可能会导致内存泄露哦。</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h3><p><a href=\"http://www.ruanyifeng.com/blog/2009/08/learning_javascript_closures.html\" target=\"_blank\" rel=\"external\">《学习Javascript闭包（Closure）》</a><br><a href=\"http://blog.chinaunix.net/uid-26672038-id-3522560.html\" target=\"_blank\" rel=\"external\">《JS 垃圾回收机制简介~ 》</a></p>\n<h2 id=\"结束语\"><a href=\"#结束语\" class=\"headerlink\" title=\"结束语\"></a>结束语</h2><hr>\n<p>有人说闭包很方便，这话不假，我们可以利用闭包创建一些服务，用来保存需要的变量。但是闭包会使子函数保持其作用域链的所有变量及函数与内存中，内存消耗很大，所以不能滥用，并且在使用的时候尽量销毁父函数不再使用的变量哦。</p>\n","excerpt":"<p>上一篇我们讲js的this，里面提到了执行环境，今天我们就结合执行环境一起讲一下闭包吧。<br>","more":"</p>\n<p>要理解闭包，这里我们补充一下js的作用域和作用域链吧，<a href=\"https://godbasin.github.io/2016/07/02/js-this/\">上一篇</a>也只是稍微略过。</p>\n<h2 id=\"变量的作用域\"><a href=\"#变量的作用域\" class=\"headerlink\" title=\"变量的作用域\"></a>变量的作用域</h2><hr>\n<h3 id=\"全局作用域和局部作用域\"><a href=\"#全局作用域和局部作用域\" class=\"headerlink\" title=\"全局作用域和局部作用域\"></a>全局作用域和局部作用域</h3><p>在JS当中一个变量的作用域（scope）是程序中定义这个变量的区域。变量分为两类：全局（global）的和局部的。</p>\n<ul>\n<li>全局变量的作用域是全局性的，即在JavaScript代码中，它处处都有定义</li>\n<li>在函数之内声明的变量，就只在函数体内部有定义。它们是局部变量，作用域是局部性的。函数的参数也是局部变量，它们只在函数体内部有定义</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> a; <span class=\"comment\">//全局变量，作用域全局性</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">example</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">  <span class=\"keyword\">var</span> b; <span class=\"comment\">//局部变量，作用域局部性</span></div><div class=\"line\">  c = <span class=\"number\">1</span>; <span class=\"comment\">//全局变量，作用域全局性</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>变量没有在函数内声明或者声明的时候没有带var就是全局变量，拥有全局作用域，window对象的所有属性拥有全局作用域，在代码任何地方都可以访问。函数内部声明并且以var修饰的变量就是局部变量，只能在函数体内使用。</p>\n<h3 id=\"作用域链\"><a href=\"#作用域链\" class=\"headerlink\" title=\"作用域链\"></a>作用域链</h3><ul>\n<li>作用域链是什么<br>每个JavaScript执行环境都有一个和它关联在一起的作用域链。这个作用域链是一个对象列表或对象链。</li>\n<li>作用域链的创建<br>当代码在一个环境中执行时，会创建变量对象的一个作用域链，来保证对执行环境有权访问的变量和函数的有序访问。作用域第一个对象始终是当前执行代码所在环境的变量对象。</li>\n<li>搜索标识符<br>在函数运行过程中标识符的解析是沿着作用域链一级一级搜索的过程，从第一个对象开始，逐级向后回溯，直到找到同名标识符为止，找到后不再继续遍历，找不到就报错。<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//作用域链[全局]</span></div><div class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"number\">1</span>; </div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fun1</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">  <span class=\"comment\">//作用域链[fun1，全局]</span></div><div class=\"line\">  <span class=\"keyword\">var</span> b = <span class=\"number\">2</span>; </div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fun2</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    <span class=\"comment\">//作用域链[fun2, fun1，全局]</span></div><div class=\"line\">    <span class=\"keyword\">var</span> c = <span class=\"number\">3</span>; </div><div class=\"line\">    alert(c); <span class=\"comment\">//查找fun2，有结果，返回3</span></div><div class=\"line\">    alert(b); <span class=\"comment\">//查找fun2，无结果，查找fun1，有结果，返回2</span></div><div class=\"line\">    alert(a); <span class=\"comment\">//查找fun2，无结果，查找fun1，无结果，查找全局，有结果，返回1</span></div><div class=\"line\">    alert(abc); <span class=\"comment\">//查找fun2，无结果，查找fun1，无结果，查找全局，无结果，返回undefined，若此处为函数调用，则报错</span></div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3 id=\"with语句\"><a href=\"#with语句\" class=\"headerlink\" title=\"with语句\"></a>with语句</h3><p>with语句用于设置代码在特定对象中的作用域，主要用来临时扩展作用域链，将语句中的对象添加到作用域的头部。<br>下面引用<a href=\"http://www.w3school.com.cn/js/pro_js_statements_with.asp\">w3c</a>上的例子进行说明：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> sMessage = <span class=\"string\">\"hello\"</span>;</div><div class=\"line\"><span class=\"keyword\">with</span>(sMessage) &#123;</div><div class=\"line\">  alert(toUpperCase());\t<span class=\"comment\">//输出 \"HELLO\"</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h2 id=\"js闭包\"><a href=\"#js闭包\" class=\"headerlink\" title=\"js闭包\"></a>js闭包</h2><hr>\n<p>铺垫了这么多，下面我们开始讲闭包。<br>官方的解释是：闭包是一个拥有许多变量和绑定了这些变量的环境的表达式（通常是一个函数），因而这些变量也是该表达式的一部分。<br>这句话很难懂，我们还是从闭包的出现开始讲起吧。</p>\n<h3 id=\"闭包的出现\"><a href=\"#闭包的出现\" class=\"headerlink\" title=\"闭包的出现\"></a>闭包的出现</h3><p>在Javascript语言中，只有函数内部的子函数才能读取局部变量。我们看下面的例子：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">B</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">  <span class=\"keyword\">var</span> b = <span class=\"number\">2</span>;</div><div class=\"line\">&#125;</div><div class=\"line\">B();</div><div class=\"line\">alert(b); <span class=\"comment\">//undefined</span></div></pre></td></tr></table></figure></p>\n<p>在全局环境下无法访问函数B内的变量，这可以用前面的作用域和作用域链来解释，即全局函数的作用域链里不含有函数B内的作用域。现在如果我们想要访问内部函数的变量，可以这样做：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">B</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">  <span class=\"keyword\">var</span> b = <span class=\"number\">2</span>;</div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">C</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    alert(b); <span class=\"comment\">//2</span></div><div class=\"line\">  &#125;</div><div class=\"line\">  <span class=\"keyword\">return</span> C;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">var</span> A = B();</div><div class=\"line\">A(); <span class=\"comment\">//2</span></div></pre></td></tr></table></figure></p>\n<p>也就是说，我们在函数B内定义了另外一个函数C，用于输出函数B内变量b的值。而当在函数B内把函数C返回，且被外部引用了的时候，我们就可以在函数B外面获得函数B里面的变量了，此时也创建了一个闭包。<br>在本质上，闭包就是将函数内部和函数外部连接起来的一座桥梁。</p>\n<h3 id=\"再理解闭包\"><a href=\"#再理解闭包\" class=\"headerlink\" title=\"再理解闭包\"></a>再理解闭包</h3><p>我们看下面代码：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">B</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">  <span class=\"keyword\">var</span> b = (b === <span class=\"literal\">undefined</span>) ? <span class=\"number\">1</span> : b;</div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">C</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    b++;</div><div class=\"line\">    alert(b);</div><div class=\"line\">  &#125;;</div><div class=\"line\">  <span class=\"keyword\">return</span> C;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">var</span> A = B();</div><div class=\"line\">A(); <span class=\"comment\">//2</span></div><div class=\"line\">A(); <span class=\"comment\">//3</span></div><div class=\"line\"><span class=\"keyword\">var</span> D = B();</div><div class=\"line\">D(); <span class=\"comment\">//2</span></div><div class=\"line\">D(); <span class=\"comment\">//3</span></div><div class=\"line\">D(); <span class=\"comment\">//4</span></div><div class=\"line\">A(); <span class=\"comment\">//4</span></div><div class=\"line\">A(); <span class=\"comment\">//5</span></div></pre></td></tr></table></figure></p>\n<p>当我们使用闭包把函数B里面的函数C返回并赋值给函数外的变量A，在每次调用A时函数B里面的变量b都会增加1，即该变量b并没有被销毁，此时我们可以继续使用或改变该变量b。<br>并且，当我们再次使用闭包把函数B里面的函数C返回并赋值给函数外的变量D时，里面的变量b会重新被赋值。觉得别扭吗？</p>\n<p>其实想要更好地理解我们需要配合<a href=\"https://godbasin.github.io/2016/07/02/js-this/\">上节</a>说过的执行环境来讲，这里我再贴一下执行环境有关的说明：</p>\n<ul>\n<li>定义期<ul>\n<li>全局函数A创建了一个A的[[scope]]属性，包含全局[[scope]]</li>\n<li>函数A里定义函数B，则B的[[scope]]包含全局[[scope]]和A的[[scope]]</li>\n</ul>\n</li>\n<li>执行期<br>当函数被执行的时候，就是进入这个函数的执行环境，首先会创一个它自己的活动对象，包含<ul>\n<li>this</li>\n<li>参数(arguments，全局对象没有arguments)</li>\n<li>局部变量(包括命名的参数)</li>\n<li>一个变量对象的作用域链[[scope chain]]</li>\n</ul>\n</li>\n</ul>\n<p>我们把上面的代码执行过程再重新理一下：<br>1.变量声明和函数声明（声明的提升），此时进行函数B的定义期<br>2.变量A赋值第一步，此时进入函数B的执行期，进入B函数的执行环境，创建相关的this对象(window对象)、局部变量、作用域链等，我们称该变量b为b1，b1被赋值1<br>3.变量A赋值第二步，此时函数B执行完毕，返回函数B内的函数C，并引用变量b1，故变量b1并没有被回收<br>4.变量A调用，此时引用了变量b1并增加1，因为b1仍然在内存中，故可以实现b1的自增<br>5.进行变量D赋值，步骤和2一致，重新进入函数B的执行期，再次创建了B函数执行环境相关的this对象(window对象)、局部变量、作用域链等，这里我们可以看到，这个变量b是重新创建的，我们称之为b2，b2被赋值1<br>6.变量D调用，此时引用了变量b2并增加1，因为b2仍然在内存中，故可以实现b2的自增</p>\n<h3 id=\"闭包的用途\"><a href=\"#闭包的用途\" class=\"headerlink\" title=\"闭包的用途\"></a>闭包的用途</h3><p>闭包可以用在许多地方，它的最大用处有两个：</p>\n<ul>\n<li>用于读取其他函数内部变量的函数</li>\n<li>让这些变量的值始终保持在内存中<br>接下来我们结合js的垃圾回收机制谈谈为什么闭包使变量保存在内存中吧。</li>\n</ul>\n<h3 id=\"js垃圾回收机制\"><a href=\"#js垃圾回收机制\" class=\"headerlink\" title=\"js垃圾回收机制\"></a>js垃圾回收机制</h3><p>js垃圾回收机制原理就是找出那些不在被使用的变量，然后释放其所占有的内存。回收器一般是按照固定的时间间隔或者预设的时间进行处理的。<br>对于其他语言来说，需要开发者手动的来跟踪内存，而JS的垃圾回收机制使得JS开发人员无需再关系内存的情况，所有的内存分配以及回收都会由垃圾回收器自动完成，执行环境会对执行过程中占有的内存负责。</p>\n<ul>\n<li>垃圾回收机制的种类<ul>\n<li>标记清除<ul>\n<li>在和执行上下文类似的的环境中当变量名称进入环境的时候，那么变量会被打上YES。一般来说是绝对不会释放被打上YES标签的变量内存的，一旦变量在出了该环境时，变会被打上NO标签（和作用域貌似有点像），JS引擎会在一定时间间隔或者设置的时间来进行扫描，对NO标签的进行剔除以释放其内存。</li>\n</ul>\n</li>\n<li>引用计数<ul>\n<li>一般来说，引用计数的含义是跟踪记录每个值被引用的次数。当声明一个变量并将一个引用类型值赋给该变量时，则这个值的引用次数便是1，如果同一个值又被赋给另一个变量，则该值的引用次数加1，相反，如果包含对这个值引用的变量又取得了另一个值，则这个值的引用次数减1。当这个值的引用次数为0时，说明没有办法访问到它了，因而可以将其占用的内存空间回收。<br>除了一些极老版本的IE，目前市面上的JS引擎基本采用标记清除来除了垃圾回收。<br>可见，当我们在函数外引用了函数里面的变量时，即使该函数已经执行完毕，但由于其内部变量仍被引用，便不会被内存空间回收。若带目的性地使用这个特点，则是闭包的一种用途。但是如果不是针对性地用于保存变量，则可能会导致内存泄露哦。</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h3><p><a href=\"http://www.ruanyifeng.com/blog/2009/08/learning_javascript_closures.html\">《学习Javascript闭包（Closure）》</a><br><a href=\"http://blog.chinaunix.net/uid-26672038-id-3522560.html\">《JS 垃圾回收机制简介~ 》</a></p>\n<h2 id=\"结束语\"><a href=\"#结束语\" class=\"headerlink\" title=\"结束语\"></a>结束语</h2><hr>\n<p>有人说闭包很方便，这话不假，我们可以利用闭包创建一些服务，用来保存需要的变量。但是闭包会使子函数保持其作用域链的所有变量及函数与内存中，内存消耗很大，所以不能滥用，并且在使用的时候尽量销毁父函数不再使用的变量哦。</p>"},{"title":"将json输出为html(二)：js数据类型判断实现","date":"2016-11-12T16:10:57.000Z","_content":"最近项目需要用到将json格式化展示在html页面中，在这里简答整理一下其中逻辑实现，将json转换为对象Object然后判断数据类型进行处理。\n<!--more-->\n\n## 分析json格式化样式\n---\n这里我们先分析一下json格式化后的展示方式，例子：\n``` json\n{\n    \"type\": \"type1\",\n    \"total\": 111,\n    \"data\": [{\n        \"time\": \"2016-10-10 22:22:22\",\n        \"flag\": null,\n        \"appear\": {\n            \"head\": \"head\",\n            \"list\": [\"123\",\"123\",\"123\"]\n        }\n    }, {\n        \"time\": \"2016-10-10 22:22:22\",\n        \"flag\": true,\n        \"appear\": {\n            \"head\": \"head\",\n            \"list\": [\"123\",\"123\",\"123\",\"123\",\"123\"]\n        }\n    }]\n}\n```\n\n### json样式/颜色\n为了使得展示的体验增加，我们可以根据不同的数据类型设置不同的颜色展示。\n- 基本符号，`{}`、`[]`、`:`、`\"\"`、`,`\n- 字符串\n  - key键值\n  - value值\n- 数字\n- true/false/null\n\n### js判断数据类型\n下面我们通过js来判断数据类型。\n- Object对象\n  - `typeof value === 'object'`\n  - 在javascript中，null也会被判断为object，所以我们可以添加个条件\n  - 即`value && typeof value === 'object'`\n  - 这里数组Array也会被判断为object，下面我们讲一下数组的判断\n- Array数组\n  - 我们可以使用consturctor来判断数组\n  - `value.constructor === Array`\n  - `Object.prototype.toString.call(value) === '[object Array]'`\n  - 后一种是公认的靠谱解法，具体下来大家自己思考哈\n- String字符串\n  - `typeof value === 'string'`\n- Number数字\n  - `typeof value === 'number'`\n- Null\n  - `value === null`\n- Boolen\n  - `typeof value === 'boolen'`\n\n## 实现逻辑\n---\n通过上述json分析，我们可以使用两种方式实现json格式化：\n- 分析JSON.stringify()后的字符串，使用正则把需要的格式匹配替换\n- 将json转化为object，然后通过js判断数据类型进行格式化\n\n这里我们使用第二种方法实现。\n第一种实现可以参考上一篇[《将json输出为html(一)：字符串正则匹配》](https://godbasin.github.io/2016/11/13/json-to-html-1-use-string-regular/)。\n\n### 字符串匹配\n- 判断数据类型并进行处理\n  - 对象Object，将处理为`{<span class=\"key\">\"key\"</span>:value}`，并进入检测递归\n  - 数组Array，将处理为`[value,value]`，并将进入检测递归\n  - true/false/null，将处理为`<span class=\"boolen/null\">true/false/null</span>`\n  - 字符串，将处理为`<span class=\"string\">\"string\"</span>`\n  - 数字Number，将处理为`<span class=\"number\">1</span>`\n\n- 实现\n这里将上述的逻辑进行实现。\n\n- 数组不换行实现\n\n``` js\nfunction ObjectToHtml(data) {\n    // 若传入数值为json，则转换为字符串\n    var txt = typeof data === 'string' ? data : JSON.stringify(data);\n    // 转换为Object\n    try {\n        var obj = eval('(' + txt + ')');\n    } catch (e) {\n        alert('数据源语法错误,JSON格式化失败! 错误信息: ' + e.description, 'err');\n        return\n    }\n    var line = '</br>', // 换行\n        indentChar = '&nbsp;&nbsp;&nbsp;&nbsp;'; // 缩进量\n    // 获取缩进字符\n    var getTab = function(num) {\n        for (var i = 0, tab = ''; i < num; i++) {\n            tab += indentChar;\n        }\n        return tab;\n    };\n    // 检测递归\n    var format = function(value, indent /*缩进*/ , isLast /*是否数组或者对象最后*/ , inArray /*是否在数组中*/ ) {\n        var str = '';\n        // 将处理为`[value,value]`，并将进入检测递归\n        if (Object.prototype.toString.call(value) === '[object Array]') {\n            str += '[';\n            value.forEach(function(item, index) {\n                str += format(item, indent, index === (value.length - 1), true);\n            });\n            str += ']';\n        // null，将处理为`<span class=\"null\">null</span>`\n        } else if (value === null) {\n            str += '<span class=\"null\">null</span>';\n        // 对象Object，将处理为`{<span class=\"key\">\"key\"</span>:value}`，并进入检测递归\n        } else if (typeof value === 'object') {\n            str += '{' + line + getTab(++indent);\n            var keys = Object.keys(value);\n            keys.forEach(function(key, index) {\n                str += '<span class=\"key\">' + key + '</span>: ' + format(value[key], indent, index === (keys.length - 1));\n            });\n            str += '}';\n            indent--;\n        // true/false，将处理为`<span class=\"boolen\">true/false</span>`\n        } else if (typeof value === 'boolean') {\n            str += '<span class=\"boolean\">' + value + '</span>';\n        // 字符串，将处理为`<span class=\"string\">\"string\"</span>`\n        } else if (typeof value === 'string') {\n            str += '<span class=\"string\">' + value + '</span>';\n        // 数字Number，将处理为`<span class=\"number\">1</span>`\n        } else {\n            str += '<span class=\"number\">' + value + '</span>';\n        }\n        str += (isLast ? '' : ',') + (inArray ? '' : (line + getTab(isLast ? --indent : indent)));\n        return str;\n    }\n    return ('<div class=\"json\">' + format(obj, 0, true) + '</div>');\n}\n```\n\n- 数组换行实现\n\n``` js\nfunction ObjectToHtml(data) {\n    // 若传入数值为json，则转换为字符串\n    var txt = typeof data === 'string' ? data : JSON.stringify(data);\n    // 转换为Object\n    try {\n        var obj = eval('(' + txt + ')');\n    } catch (e) {\n        alert('数据源语法错误,JSON格式化失败! 错误信息: ' + e.description, 'err');\n        return\n    }\n    var line = '</br>', // 换行\n        indentChar = '&nbsp;&nbsp;&nbsp;&nbsp;'; // 缩进量\n    // 判断是否为对象\n    var isObject = function(item) {\n        return item && typeof item === 'object' && Object.prototype.toString.call(item) !== '[object Array]';\n    };\n    var getTab = function(num) {\n        for (var i = 0, tab = ''; i < num; i++) {\n            tab += indentChar;\n        }\n        return tab;\n    };\n    // 检测递归\n    var format = function(value, indent, isLast, inArray) {\n        var str = '';\n        // [\n        //   value,\n        //   value\n        // ]，并将进入检测递归\n        if (Object.prototype.toString.call(value) === '[object Array]') {\n            str += '[' + (isObject(value[0]) ? '' : (line + getTab(++indent)));\n            value.forEach(function(item, index) {\n                str += format(item, indent, index === (value.length - 1), true);\n                // 若不为对象，则进行换行\n                str += isObject(item) ? '' : (line + getTab((index === (value.length - 1)) ? --indent : indent));\n            });\n            str += ']';\n        // null，将处理为`<span class=\"null\">null</span>`\n        } else if (value === null) {\n            str += '<span class=\"null\">null</span>';\n        // 对象Object，将处理为`{<span class=\"key\">\"key\"</span>:value}`，并进入检测递归    \n        } else if (typeof value === 'object') {\n            str += '{' + line + getTab(++indent);\n            var keys = Object.keys(value);\n            keys.forEach(function(key, index) {\n                str += '<span class=\"key\">\"' + key + '\"</span>: ' + format(value[key], indent, index === (keys.length - 1));\n            });\n            str += '}';\n            indent--;\n        // true/false，将处理为`<span class=\"boolen/null\">true/false</span>`\n        } else if (typeof value === 'boolean') {\n            str += '<span class=\"boolean\">' + value + '</span>';\n        // 字符串，将处理为`<span class=\"string\">\"string\"</span>`\n        } else if (typeof value === 'string') {\n            str += '<span class=\"string\">\"' + value + '\"</span>';\n        // 数字Number，将处理为`<span class=\"number\">1</span>`\n        } else {\n            str += '<span class=\"number\">' + value + '</span>';\n        }\n        str += (isLast ? '' : ',') + (inArray ? '' : (line + getTab(isLast ? --indent : indent)));\n        return str;\n    }\n    return ('<div class=\"json\">' + format(obj, 0, true) + '</div>');\n}\n```\n\n### 结束语\n这里我们讨论了js判断数据类型并进行转换的实现方法。\n[此处查看项目代码](https://github.com/godbasin/godbasin.github.io/blob/blog-codes/json-to-html/json-to-html-2-use-object.html)\n[此处点击查看页面](http://og7yu923g.bkt.clouddn.com/json-to-html-2-use-object.html)","source":"_posts/json-to-html-2-use-object.md","raw":"---\ntitle: 将json输出为html(二)：js数据类型判断实现\ndate: 2016-11-13 00:10:57\ncategories: js什锦\ntags: 逻辑实现\n---\n最近项目需要用到将json格式化展示在html页面中，在这里简答整理一下其中逻辑实现，将json转换为对象Object然后判断数据类型进行处理。\n<!--more-->\n\n## 分析json格式化样式\n---\n这里我们先分析一下json格式化后的展示方式，例子：\n``` json\n{\n    \"type\": \"type1\",\n    \"total\": 111,\n    \"data\": [{\n        \"time\": \"2016-10-10 22:22:22\",\n        \"flag\": null,\n        \"appear\": {\n            \"head\": \"head\",\n            \"list\": [\"123\",\"123\",\"123\"]\n        }\n    }, {\n        \"time\": \"2016-10-10 22:22:22\",\n        \"flag\": true,\n        \"appear\": {\n            \"head\": \"head\",\n            \"list\": [\"123\",\"123\",\"123\",\"123\",\"123\"]\n        }\n    }]\n}\n```\n\n### json样式/颜色\n为了使得展示的体验增加，我们可以根据不同的数据类型设置不同的颜色展示。\n- 基本符号，`{}`、`[]`、`:`、`\"\"`、`,`\n- 字符串\n  - key键值\n  - value值\n- 数字\n- true/false/null\n\n### js判断数据类型\n下面我们通过js来判断数据类型。\n- Object对象\n  - `typeof value === 'object'`\n  - 在javascript中，null也会被判断为object，所以我们可以添加个条件\n  - 即`value && typeof value === 'object'`\n  - 这里数组Array也会被判断为object，下面我们讲一下数组的判断\n- Array数组\n  - 我们可以使用consturctor来判断数组\n  - `value.constructor === Array`\n  - `Object.prototype.toString.call(value) === '[object Array]'`\n  - 后一种是公认的靠谱解法，具体下来大家自己思考哈\n- String字符串\n  - `typeof value === 'string'`\n- Number数字\n  - `typeof value === 'number'`\n- Null\n  - `value === null`\n- Boolen\n  - `typeof value === 'boolen'`\n\n## 实现逻辑\n---\n通过上述json分析，我们可以使用两种方式实现json格式化：\n- 分析JSON.stringify()后的字符串，使用正则把需要的格式匹配替换\n- 将json转化为object，然后通过js判断数据类型进行格式化\n\n这里我们使用第二种方法实现。\n第一种实现可以参考上一篇[《将json输出为html(一)：字符串正则匹配》](https://godbasin.github.io/2016/11/13/json-to-html-1-use-string-regular/)。\n\n### 字符串匹配\n- 判断数据类型并进行处理\n  - 对象Object，将处理为`{<span class=\"key\">\"key\"</span>:value}`，并进入检测递归\n  - 数组Array，将处理为`[value,value]`，并将进入检测递归\n  - true/false/null，将处理为`<span class=\"boolen/null\">true/false/null</span>`\n  - 字符串，将处理为`<span class=\"string\">\"string\"</span>`\n  - 数字Number，将处理为`<span class=\"number\">1</span>`\n\n- 实现\n这里将上述的逻辑进行实现。\n\n- 数组不换行实现\n\n``` js\nfunction ObjectToHtml(data) {\n    // 若传入数值为json，则转换为字符串\n    var txt = typeof data === 'string' ? data : JSON.stringify(data);\n    // 转换为Object\n    try {\n        var obj = eval('(' + txt + ')');\n    } catch (e) {\n        alert('数据源语法错误,JSON格式化失败! 错误信息: ' + e.description, 'err');\n        return\n    }\n    var line = '</br>', // 换行\n        indentChar = '&nbsp;&nbsp;&nbsp;&nbsp;'; // 缩进量\n    // 获取缩进字符\n    var getTab = function(num) {\n        for (var i = 0, tab = ''; i < num; i++) {\n            tab += indentChar;\n        }\n        return tab;\n    };\n    // 检测递归\n    var format = function(value, indent /*缩进*/ , isLast /*是否数组或者对象最后*/ , inArray /*是否在数组中*/ ) {\n        var str = '';\n        // 将处理为`[value,value]`，并将进入检测递归\n        if (Object.prototype.toString.call(value) === '[object Array]') {\n            str += '[';\n            value.forEach(function(item, index) {\n                str += format(item, indent, index === (value.length - 1), true);\n            });\n            str += ']';\n        // null，将处理为`<span class=\"null\">null</span>`\n        } else if (value === null) {\n            str += '<span class=\"null\">null</span>';\n        // 对象Object，将处理为`{<span class=\"key\">\"key\"</span>:value}`，并进入检测递归\n        } else if (typeof value === 'object') {\n            str += '{' + line + getTab(++indent);\n            var keys = Object.keys(value);\n            keys.forEach(function(key, index) {\n                str += '<span class=\"key\">' + key + '</span>: ' + format(value[key], indent, index === (keys.length - 1));\n            });\n            str += '}';\n            indent--;\n        // true/false，将处理为`<span class=\"boolen\">true/false</span>`\n        } else if (typeof value === 'boolean') {\n            str += '<span class=\"boolean\">' + value + '</span>';\n        // 字符串，将处理为`<span class=\"string\">\"string\"</span>`\n        } else if (typeof value === 'string') {\n            str += '<span class=\"string\">' + value + '</span>';\n        // 数字Number，将处理为`<span class=\"number\">1</span>`\n        } else {\n            str += '<span class=\"number\">' + value + '</span>';\n        }\n        str += (isLast ? '' : ',') + (inArray ? '' : (line + getTab(isLast ? --indent : indent)));\n        return str;\n    }\n    return ('<div class=\"json\">' + format(obj, 0, true) + '</div>');\n}\n```\n\n- 数组换行实现\n\n``` js\nfunction ObjectToHtml(data) {\n    // 若传入数值为json，则转换为字符串\n    var txt = typeof data === 'string' ? data : JSON.stringify(data);\n    // 转换为Object\n    try {\n        var obj = eval('(' + txt + ')');\n    } catch (e) {\n        alert('数据源语法错误,JSON格式化失败! 错误信息: ' + e.description, 'err');\n        return\n    }\n    var line = '</br>', // 换行\n        indentChar = '&nbsp;&nbsp;&nbsp;&nbsp;'; // 缩进量\n    // 判断是否为对象\n    var isObject = function(item) {\n        return item && typeof item === 'object' && Object.prototype.toString.call(item) !== '[object Array]';\n    };\n    var getTab = function(num) {\n        for (var i = 0, tab = ''; i < num; i++) {\n            tab += indentChar;\n        }\n        return tab;\n    };\n    // 检测递归\n    var format = function(value, indent, isLast, inArray) {\n        var str = '';\n        // [\n        //   value,\n        //   value\n        // ]，并将进入检测递归\n        if (Object.prototype.toString.call(value) === '[object Array]') {\n            str += '[' + (isObject(value[0]) ? '' : (line + getTab(++indent)));\n            value.forEach(function(item, index) {\n                str += format(item, indent, index === (value.length - 1), true);\n                // 若不为对象，则进行换行\n                str += isObject(item) ? '' : (line + getTab((index === (value.length - 1)) ? --indent : indent));\n            });\n            str += ']';\n        // null，将处理为`<span class=\"null\">null</span>`\n        } else if (value === null) {\n            str += '<span class=\"null\">null</span>';\n        // 对象Object，将处理为`{<span class=\"key\">\"key\"</span>:value}`，并进入检测递归    \n        } else if (typeof value === 'object') {\n            str += '{' + line + getTab(++indent);\n            var keys = Object.keys(value);\n            keys.forEach(function(key, index) {\n                str += '<span class=\"key\">\"' + key + '\"</span>: ' + format(value[key], indent, index === (keys.length - 1));\n            });\n            str += '}';\n            indent--;\n        // true/false，将处理为`<span class=\"boolen/null\">true/false</span>`\n        } else if (typeof value === 'boolean') {\n            str += '<span class=\"boolean\">' + value + '</span>';\n        // 字符串，将处理为`<span class=\"string\">\"string\"</span>`\n        } else if (typeof value === 'string') {\n            str += '<span class=\"string\">\"' + value + '\"</span>';\n        // 数字Number，将处理为`<span class=\"number\">1</span>`\n        } else {\n            str += '<span class=\"number\">' + value + '</span>';\n        }\n        str += (isLast ? '' : ',') + (inArray ? '' : (line + getTab(isLast ? --indent : indent)));\n        return str;\n    }\n    return ('<div class=\"json\">' + format(obj, 0, true) + '</div>');\n}\n```\n\n### 结束语\n这里我们讨论了js判断数据类型并进行转换的实现方法。\n[此处查看项目代码](https://github.com/godbasin/godbasin.github.io/blob/blog-codes/json-to-html/json-to-html-2-use-object.html)\n[此处点击查看页面](http://og7yu923g.bkt.clouddn.com/json-to-html-2-use-object.html)","slug":"json-to-html-2-use-object","published":1,"updated":"2016-11-12T16:12:17.673Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cix45hugw0035xotu37kao1dh","content":"<p>最近项目需要用到将json格式化展示在html页面中，在这里简答整理一下其中逻辑实现，将json转换为对象Object然后判断数据类型进行处理。<br><a id=\"more\"></a></p>\n<h2 id=\"分析json格式化样式\"><a href=\"#分析json格式化样式\" class=\"headerlink\" title=\"分析json格式化样式\"></a>分析json格式化样式</h2><hr>\n<p>这里我们先分析一下json格式化后的展示方式，例子：<br><figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"attr\">\"type\"</span>: <span class=\"string\">\"type1\"</span>,</div><div class=\"line\">    <span class=\"attr\">\"total\"</span>: <span class=\"number\">111</span>,</div><div class=\"line\">    <span class=\"attr\">\"data\"</span>: [&#123;</div><div class=\"line\">        <span class=\"attr\">\"time\"</span>: <span class=\"string\">\"2016-10-10 22:22:22\"</span>,</div><div class=\"line\">        <span class=\"attr\">\"flag\"</span>: <span class=\"literal\">null</span>,</div><div class=\"line\">        <span class=\"attr\">\"appear\"</span>: &#123;</div><div class=\"line\">            <span class=\"attr\">\"head\"</span>: <span class=\"string\">\"head\"</span>,</div><div class=\"line\">            <span class=\"attr\">\"list\"</span>: [<span class=\"string\">\"123\"</span>,<span class=\"string\">\"123\"</span>,<span class=\"string\">\"123\"</span>]</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;, &#123;</div><div class=\"line\">        <span class=\"attr\">\"time\"</span>: <span class=\"string\">\"2016-10-10 22:22:22\"</span>,</div><div class=\"line\">        <span class=\"attr\">\"flag\"</span>: <span class=\"literal\">true</span>,</div><div class=\"line\">        <span class=\"attr\">\"appear\"</span>: &#123;</div><div class=\"line\">            <span class=\"attr\">\"head\"</span>: <span class=\"string\">\"head\"</span>,</div><div class=\"line\">            <span class=\"attr\">\"list\"</span>: [<span class=\"string\">\"123\"</span>,<span class=\"string\">\"123\"</span>,<span class=\"string\">\"123\"</span>,<span class=\"string\">\"123\"</span>,<span class=\"string\">\"123\"</span>]</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;]</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h3 id=\"json样式-颜色\"><a href=\"#json样式-颜色\" class=\"headerlink\" title=\"json样式/颜色\"></a>json样式/颜色</h3><p>为了使得展示的体验增加，我们可以根据不同的数据类型设置不同的颜色展示。</p>\n<ul>\n<li>基本符号，<code>{}</code>、<code>[]</code>、<code>:</code>、<code>&quot;&quot;</code>、<code>,</code></li>\n<li>字符串<ul>\n<li>key键值</li>\n<li>value值</li>\n</ul>\n</li>\n<li>数字</li>\n<li>true/false/null</li>\n</ul>\n<h3 id=\"js判断数据类型\"><a href=\"#js判断数据类型\" class=\"headerlink\" title=\"js判断数据类型\"></a>js判断数据类型</h3><p>下面我们通过js来判断数据类型。</p>\n<ul>\n<li>Object对象<ul>\n<li><code>typeof value === &#39;object&#39;</code></li>\n<li>在javascript中，null也会被判断为object，所以我们可以添加个条件</li>\n<li>即<code>value &amp;&amp; typeof value === &#39;object&#39;</code></li>\n<li>这里数组Array也会被判断为object，下面我们讲一下数组的判断</li>\n</ul>\n</li>\n<li>Array数组<ul>\n<li>我们可以使用consturctor来判断数组</li>\n<li><code>value.constructor === Array</code></li>\n<li><code>Object.prototype.toString.call(value) === &#39;[object Array]&#39;</code></li>\n<li>后一种是公认的靠谱解法，具体下来大家自己思考哈</li>\n</ul>\n</li>\n<li>String字符串<ul>\n<li><code>typeof value === &#39;string&#39;</code></li>\n</ul>\n</li>\n<li>Number数字<ul>\n<li><code>typeof value === &#39;number&#39;</code></li>\n</ul>\n</li>\n<li>Null<ul>\n<li><code>value === null</code></li>\n</ul>\n</li>\n<li>Boolen<ul>\n<li><code>typeof value === &#39;boolen&#39;</code></li>\n</ul>\n</li>\n</ul>\n<h2 id=\"实现逻辑\"><a href=\"#实现逻辑\" class=\"headerlink\" title=\"实现逻辑\"></a>实现逻辑</h2><hr>\n<p>通过上述json分析，我们可以使用两种方式实现json格式化：</p>\n<ul>\n<li>分析JSON.stringify()后的字符串，使用正则把需要的格式匹配替换</li>\n<li>将json转化为object，然后通过js判断数据类型进行格式化</li>\n</ul>\n<p>这里我们使用第二种方法实现。<br>第一种实现可以参考上一篇<a href=\"https://godbasin.github.io/2016/11/13/json-to-html-1-use-string-regular/\">《将json输出为html(一)：字符串正则匹配》</a>。</p>\n<h3 id=\"字符串匹配\"><a href=\"#字符串匹配\" class=\"headerlink\" title=\"字符串匹配\"></a>字符串匹配</h3><ul>\n<li><p>判断数据类型并进行处理</p>\n<ul>\n<li>对象Object，将处理为<code>{&lt;span class=&quot;key&quot;&gt;&quot;key&quot;&lt;/span&gt;:value}</code>，并进入检测递归</li>\n<li>数组Array，将处理为<code>[value,value]</code>，并将进入检测递归</li>\n<li>true/false/null，将处理为<code>&lt;span class=&quot;boolen/null&quot;&gt;true/false/null&lt;/span&gt;</code></li>\n<li>字符串，将处理为<code>&lt;span class=&quot;string&quot;&gt;&quot;string&quot;&lt;/span&gt;</code></li>\n<li>数字Number，将处理为<code>&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;</code></li>\n</ul>\n</li>\n<li><p>实现<br>这里将上述的逻辑进行实现。</p>\n</li>\n<li><p>数组不换行实现</p>\n</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">ObjectToHtml</span>(<span class=\"params\">data</span>) </span>&#123;</div><div class=\"line\">    <span class=\"comment\">// 若传入数值为json，则转换为字符串</span></div><div class=\"line\">    <span class=\"keyword\">var</span> txt = <span class=\"keyword\">typeof</span> data === <span class=\"string\">'string'</span> ? data : <span class=\"built_in\">JSON</span>.stringify(data);</div><div class=\"line\">    <span class=\"comment\">// 转换为Object</span></div><div class=\"line\">    <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">        <span class=\"keyword\">var</span> obj = <span class=\"built_in\">eval</span>(<span class=\"string\">'('</span> + txt + <span class=\"string\">')'</span>);</div><div class=\"line\">    &#125; <span class=\"keyword\">catch</span> (e) &#123;</div><div class=\"line\">        alert(<span class=\"string\">'数据源语法错误,JSON格式化失败! 错误信息: '</span> + e.description, <span class=\"string\">'err'</span>);</div><div class=\"line\">        <span class=\"keyword\">return</span></div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">var</span> line = <span class=\"string\">'&lt;/br&gt;'</span>, <span class=\"comment\">// 换行</span></div><div class=\"line\">        indentChar = <span class=\"string\">'&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;'</span>; <span class=\"comment\">// 缩进量</span></div><div class=\"line\">    <span class=\"comment\">// 获取缩进字符</span></div><div class=\"line\">    <span class=\"keyword\">var</span> getTab = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">num</span>) </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>, tab = <span class=\"string\">''</span>; i &lt; num; i++) &#123;</div><div class=\"line\">            tab += indentChar;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">return</span> tab;</div><div class=\"line\">    &#125;;</div><div class=\"line\">    <span class=\"comment\">// 检测递归</span></div><div class=\"line\">    <span class=\"keyword\">var</span> format = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">value, indent <span class=\"regexp\">/*缩进*/</span> , isLast <span class=\"regexp\">/*是否数组或者对象最后*/</span> , inArray <span class=\"regexp\">/*是否在数组中*/</span> </span>) </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">var</span> str = <span class=\"string\">''</span>;</div><div class=\"line\">        <span class=\"comment\">// 将处理为`[value,value]`，并将进入检测递归</span></div><div class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"built_in\">Object</span>.prototype.toString.call(value) === <span class=\"string\">'[object Array]'</span>) &#123;</div><div class=\"line\">            str += <span class=\"string\">'['</span>;</div><div class=\"line\">            value.forEach(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">item, index</span>) </span>&#123;</div><div class=\"line\">                str += format(item, indent, index === (value.length - <span class=\"number\">1</span>), <span class=\"literal\">true</span>);</div><div class=\"line\">            &#125;);</div><div class=\"line\">            str += <span class=\"string\">']'</span>;</div><div class=\"line\">        <span class=\"comment\">// null，将处理为`&lt;span class=\"null\"&gt;null&lt;/span&gt;`</span></div><div class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (value === <span class=\"literal\">null</span>) &#123;</div><div class=\"line\">            str += <span class=\"string\">'&lt;span class=\"null\"&gt;null&lt;/span&gt;'</span>;</div><div class=\"line\">        <span class=\"comment\">// 对象Object，将处理为`&#123;&lt;span class=\"key\"&gt;\"key\"&lt;/span&gt;:value&#125;`，并进入检测递归</span></div><div class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> value === <span class=\"string\">'object'</span>) &#123;</div><div class=\"line\">            str += <span class=\"string\">'&#123;'</span> + line + getTab(++indent);</div><div class=\"line\">            <span class=\"keyword\">var</span> keys = <span class=\"built_in\">Object</span>.keys(value);</div><div class=\"line\">            keys.forEach(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">key, index</span>) </span>&#123;</div><div class=\"line\">                str += <span class=\"string\">'&lt;span class=\"key\"&gt;'</span> + key + <span class=\"string\">'&lt;/span&gt;: '</span> + format(value[key], indent, index === (keys.length - <span class=\"number\">1</span>));</div><div class=\"line\">            &#125;);</div><div class=\"line\">            str += <span class=\"string\">'&#125;'</span>;</div><div class=\"line\">            indent--;</div><div class=\"line\">        <span class=\"comment\">// true/false，将处理为`&lt;span class=\"boolen\"&gt;true/false&lt;/span&gt;`</span></div><div class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> value === <span class=\"string\">'boolean'</span>) &#123;</div><div class=\"line\">            str += <span class=\"string\">'&lt;span class=\"boolean\"&gt;'</span> + value + <span class=\"string\">'&lt;/span&gt;'</span>;</div><div class=\"line\">        <span class=\"comment\">// 字符串，将处理为`&lt;span class=\"string\"&gt;\"string\"&lt;/span&gt;`</span></div><div class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> value === <span class=\"string\">'string'</span>) &#123;</div><div class=\"line\">            str += <span class=\"string\">'&lt;span class=\"string\"&gt;'</span> + value + <span class=\"string\">'&lt;/span&gt;'</span>;</div><div class=\"line\">        <span class=\"comment\">// 数字Number，将处理为`&lt;span class=\"number\"&gt;1&lt;/span&gt;`</span></div><div class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">            str += <span class=\"string\">'&lt;span class=\"number\"&gt;'</span> + value + <span class=\"string\">'&lt;/span&gt;'</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">        str += (isLast ? <span class=\"string\">''</span> : <span class=\"string\">','</span>) + (inArray ? <span class=\"string\">''</span> : (line + getTab(isLast ? --indent : indent)));</div><div class=\"line\">        <span class=\"keyword\">return</span> str;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> (<span class=\"string\">'&lt;div class=\"json\"&gt;'</span> + format(obj, <span class=\"number\">0</span>, <span class=\"literal\">true</span>) + <span class=\"string\">'&lt;/div&gt;'</span>);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<ul>\n<li>数组换行实现</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">ObjectToHtml</span>(<span class=\"params\">data</span>) </span>&#123;</div><div class=\"line\">    <span class=\"comment\">// 若传入数值为json，则转换为字符串</span></div><div class=\"line\">    <span class=\"keyword\">var</span> txt = <span class=\"keyword\">typeof</span> data === <span class=\"string\">'string'</span> ? data : <span class=\"built_in\">JSON</span>.stringify(data);</div><div class=\"line\">    <span class=\"comment\">// 转换为Object</span></div><div class=\"line\">    <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">        <span class=\"keyword\">var</span> obj = <span class=\"built_in\">eval</span>(<span class=\"string\">'('</span> + txt + <span class=\"string\">')'</span>);</div><div class=\"line\">    &#125; <span class=\"keyword\">catch</span> (e) &#123;</div><div class=\"line\">        alert(<span class=\"string\">'数据源语法错误,JSON格式化失败! 错误信息: '</span> + e.description, <span class=\"string\">'err'</span>);</div><div class=\"line\">        <span class=\"keyword\">return</span></div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">var</span> line = <span class=\"string\">'&lt;/br&gt;'</span>, <span class=\"comment\">// 换行</span></div><div class=\"line\">        indentChar = <span class=\"string\">'&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;'</span>; <span class=\"comment\">// 缩进量</span></div><div class=\"line\">    <span class=\"comment\">// 判断是否为对象</span></div><div class=\"line\">    <span class=\"keyword\">var</span> isObject = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">item</span>) </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> item &amp;&amp; <span class=\"keyword\">typeof</span> item === <span class=\"string\">'object'</span> &amp;&amp; <span class=\"built_in\">Object</span>.prototype.toString.call(item) !== <span class=\"string\">'[object Array]'</span>;</div><div class=\"line\">    &#125;;</div><div class=\"line\">    <span class=\"keyword\">var</span> getTab = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">num</span>) </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>, tab = <span class=\"string\">''</span>; i &lt; num; i++) &#123;</div><div class=\"line\">            tab += indentChar;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">return</span> tab;</div><div class=\"line\">    &#125;;</div><div class=\"line\">    <span class=\"comment\">// 检测递归</span></div><div class=\"line\">    <span class=\"keyword\">var</span> format = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">value, indent, isLast, inArray</span>) </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">var</span> str = <span class=\"string\">''</span>;</div><div class=\"line\">        <span class=\"comment\">// [</span></div><div class=\"line\">        <span class=\"comment\">//   value,</span></div><div class=\"line\">        <span class=\"comment\">//   value</span></div><div class=\"line\">        <span class=\"comment\">// ]，并将进入检测递归</span></div><div class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"built_in\">Object</span>.prototype.toString.call(value) === <span class=\"string\">'[object Array]'</span>) &#123;</div><div class=\"line\">            str += <span class=\"string\">'['</span> + (isObject(value[<span class=\"number\">0</span>]) ? <span class=\"string\">''</span> : (line + getTab(++indent)));</div><div class=\"line\">            value.forEach(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">item, index</span>) </span>&#123;</div><div class=\"line\">                str += format(item, indent, index === (value.length - <span class=\"number\">1</span>), <span class=\"literal\">true</span>);</div><div class=\"line\">                <span class=\"comment\">// 若不为对象，则进行换行</span></div><div class=\"line\">                str += isObject(item) ? <span class=\"string\">''</span> : (line + getTab((index === (value.length - <span class=\"number\">1</span>)) ? --indent : indent));</div><div class=\"line\">            &#125;);</div><div class=\"line\">            str += <span class=\"string\">']'</span>;</div><div class=\"line\">        <span class=\"comment\">// null，将处理为`&lt;span class=\"null\"&gt;null&lt;/span&gt;`</span></div><div class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (value === <span class=\"literal\">null</span>) &#123;</div><div class=\"line\">            str += <span class=\"string\">'&lt;span class=\"null\"&gt;null&lt;/span&gt;'</span>;</div><div class=\"line\">        <span class=\"comment\">// 对象Object，将处理为`&#123;&lt;span class=\"key\"&gt;\"key\"&lt;/span&gt;:value&#125;`，并进入检测递归    </span></div><div class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> value === <span class=\"string\">'object'</span>) &#123;</div><div class=\"line\">            str += <span class=\"string\">'&#123;'</span> + line + getTab(++indent);</div><div class=\"line\">            <span class=\"keyword\">var</span> keys = <span class=\"built_in\">Object</span>.keys(value);</div><div class=\"line\">            keys.forEach(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">key, index</span>) </span>&#123;</div><div class=\"line\">                str += <span class=\"string\">'&lt;span class=\"key\"&gt;\"'</span> + key + <span class=\"string\">'\"&lt;/span&gt;: '</span> + format(value[key], indent, index === (keys.length - <span class=\"number\">1</span>));</div><div class=\"line\">            &#125;);</div><div class=\"line\">            str += <span class=\"string\">'&#125;'</span>;</div><div class=\"line\">            indent--;</div><div class=\"line\">        <span class=\"comment\">// true/false，将处理为`&lt;span class=\"boolen/null\"&gt;true/false&lt;/span&gt;`</span></div><div class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> value === <span class=\"string\">'boolean'</span>) &#123;</div><div class=\"line\">            str += <span class=\"string\">'&lt;span class=\"boolean\"&gt;'</span> + value + <span class=\"string\">'&lt;/span&gt;'</span>;</div><div class=\"line\">        <span class=\"comment\">// 字符串，将处理为`&lt;span class=\"string\"&gt;\"string\"&lt;/span&gt;`</span></div><div class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> value === <span class=\"string\">'string'</span>) &#123;</div><div class=\"line\">            str += <span class=\"string\">'&lt;span class=\"string\"&gt;\"'</span> + value + <span class=\"string\">'\"&lt;/span&gt;'</span>;</div><div class=\"line\">        <span class=\"comment\">// 数字Number，将处理为`&lt;span class=\"number\"&gt;1&lt;/span&gt;`</span></div><div class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">            str += <span class=\"string\">'&lt;span class=\"number\"&gt;'</span> + value + <span class=\"string\">'&lt;/span&gt;'</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">        str += (isLast ? <span class=\"string\">''</span> : <span class=\"string\">','</span>) + (inArray ? <span class=\"string\">''</span> : (line + getTab(isLast ? --indent : indent)));</div><div class=\"line\">        <span class=\"keyword\">return</span> str;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> (<span class=\"string\">'&lt;div class=\"json\"&gt;'</span> + format(obj, <span class=\"number\">0</span>, <span class=\"literal\">true</span>) + <span class=\"string\">'&lt;/div&gt;'</span>);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"结束语\"><a href=\"#结束语\" class=\"headerlink\" title=\"结束语\"></a>结束语</h3><p>这里我们讨论了js判断数据类型并进行转换的实现方法。<br><a href=\"https://github.com/godbasin/godbasin.github.io/blob/blog-codes/json-to-html/json-to-html-2-use-object.html\" target=\"_blank\" rel=\"external\">此处查看项目代码</a><br><a href=\"http://og7yu923g.bkt.clouddn.com/json-to-html-2-use-object.html\" target=\"_blank\" rel=\"external\">此处点击查看页面</a></p>\n","excerpt":"<p>最近项目需要用到将json格式化展示在html页面中，在这里简答整理一下其中逻辑实现，将json转换为对象Object然后判断数据类型进行处理。<br>","more":"</p>\n<h2 id=\"分析json格式化样式\"><a href=\"#分析json格式化样式\" class=\"headerlink\" title=\"分析json格式化样式\"></a>分析json格式化样式</h2><hr>\n<p>这里我们先分析一下json格式化后的展示方式，例子：<br><figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"attr\">\"type\"</span>: <span class=\"string\">\"type1\"</span>,</div><div class=\"line\">    <span class=\"attr\">\"total\"</span>: <span class=\"number\">111</span>,</div><div class=\"line\">    <span class=\"attr\">\"data\"</span>: [&#123;</div><div class=\"line\">        <span class=\"attr\">\"time\"</span>: <span class=\"string\">\"2016-10-10 22:22:22\"</span>,</div><div class=\"line\">        <span class=\"attr\">\"flag\"</span>: <span class=\"literal\">null</span>,</div><div class=\"line\">        <span class=\"attr\">\"appear\"</span>: &#123;</div><div class=\"line\">            <span class=\"attr\">\"head\"</span>: <span class=\"string\">\"head\"</span>,</div><div class=\"line\">            <span class=\"attr\">\"list\"</span>: [<span class=\"string\">\"123\"</span>,<span class=\"string\">\"123\"</span>,<span class=\"string\">\"123\"</span>]</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;, &#123;</div><div class=\"line\">        <span class=\"attr\">\"time\"</span>: <span class=\"string\">\"2016-10-10 22:22:22\"</span>,</div><div class=\"line\">        <span class=\"attr\">\"flag\"</span>: <span class=\"literal\">true</span>,</div><div class=\"line\">        <span class=\"attr\">\"appear\"</span>: &#123;</div><div class=\"line\">            <span class=\"attr\">\"head\"</span>: <span class=\"string\">\"head\"</span>,</div><div class=\"line\">            <span class=\"attr\">\"list\"</span>: [<span class=\"string\">\"123\"</span>,<span class=\"string\">\"123\"</span>,<span class=\"string\">\"123\"</span>,<span class=\"string\">\"123\"</span>,<span class=\"string\">\"123\"</span>]</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;]</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h3 id=\"json样式-颜色\"><a href=\"#json样式-颜色\" class=\"headerlink\" title=\"json样式/颜色\"></a>json样式/颜色</h3><p>为了使得展示的体验增加，我们可以根据不同的数据类型设置不同的颜色展示。</p>\n<ul>\n<li>基本符号，<code>{}</code>、<code>[]</code>、<code>:</code>、<code>&quot;&quot;</code>、<code>,</code></li>\n<li>字符串<ul>\n<li>key键值</li>\n<li>value值</li>\n</ul>\n</li>\n<li>数字</li>\n<li>true/false/null</li>\n</ul>\n<h3 id=\"js判断数据类型\"><a href=\"#js判断数据类型\" class=\"headerlink\" title=\"js判断数据类型\"></a>js判断数据类型</h3><p>下面我们通过js来判断数据类型。</p>\n<ul>\n<li>Object对象<ul>\n<li><code>typeof value === &#39;object&#39;</code></li>\n<li>在javascript中，null也会被判断为object，所以我们可以添加个条件</li>\n<li>即<code>value &amp;&amp; typeof value === &#39;object&#39;</code></li>\n<li>这里数组Array也会被判断为object，下面我们讲一下数组的判断</li>\n</ul>\n</li>\n<li>Array数组<ul>\n<li>我们可以使用consturctor来判断数组</li>\n<li><code>value.constructor === Array</code></li>\n<li><code>Object.prototype.toString.call(value) === &#39;[object Array]&#39;</code></li>\n<li>后一种是公认的靠谱解法，具体下来大家自己思考哈</li>\n</ul>\n</li>\n<li>String字符串<ul>\n<li><code>typeof value === &#39;string&#39;</code></li>\n</ul>\n</li>\n<li>Number数字<ul>\n<li><code>typeof value === &#39;number&#39;</code></li>\n</ul>\n</li>\n<li>Null<ul>\n<li><code>value === null</code></li>\n</ul>\n</li>\n<li>Boolen<ul>\n<li><code>typeof value === &#39;boolen&#39;</code></li>\n</ul>\n</li>\n</ul>\n<h2 id=\"实现逻辑\"><a href=\"#实现逻辑\" class=\"headerlink\" title=\"实现逻辑\"></a>实现逻辑</h2><hr>\n<p>通过上述json分析，我们可以使用两种方式实现json格式化：</p>\n<ul>\n<li>分析JSON.stringify()后的字符串，使用正则把需要的格式匹配替换</li>\n<li>将json转化为object，然后通过js判断数据类型进行格式化</li>\n</ul>\n<p>这里我们使用第二种方法实现。<br>第一种实现可以参考上一篇<a href=\"https://godbasin.github.io/2016/11/13/json-to-html-1-use-string-regular/\">《将json输出为html(一)：字符串正则匹配》</a>。</p>\n<h3 id=\"字符串匹配\"><a href=\"#字符串匹配\" class=\"headerlink\" title=\"字符串匹配\"></a>字符串匹配</h3><ul>\n<li><p>判断数据类型并进行处理</p>\n<ul>\n<li>对象Object，将处理为<code>{&lt;span class=&quot;key&quot;&gt;&quot;key&quot;&lt;/span&gt;:value}</code>，并进入检测递归</li>\n<li>数组Array，将处理为<code>[value,value]</code>，并将进入检测递归</li>\n<li>true/false/null，将处理为<code>&lt;span class=&quot;boolen/null&quot;&gt;true/false/null&lt;/span&gt;</code></li>\n<li>字符串，将处理为<code>&lt;span class=&quot;string&quot;&gt;&quot;string&quot;&lt;/span&gt;</code></li>\n<li>数字Number，将处理为<code>&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;</code></li>\n</ul>\n</li>\n<li><p>实现<br>这里将上述的逻辑进行实现。</p>\n</li>\n<li><p>数组不换行实现</p>\n</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">ObjectToHtml</span>(<span class=\"params\">data</span>) </span>&#123;</div><div class=\"line\">    <span class=\"comment\">// 若传入数值为json，则转换为字符串</span></div><div class=\"line\">    <span class=\"keyword\">var</span> txt = <span class=\"keyword\">typeof</span> data === <span class=\"string\">'string'</span> ? data : <span class=\"built_in\">JSON</span>.stringify(data);</div><div class=\"line\">    <span class=\"comment\">// 转换为Object</span></div><div class=\"line\">    <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">        <span class=\"keyword\">var</span> obj = <span class=\"built_in\">eval</span>(<span class=\"string\">'('</span> + txt + <span class=\"string\">')'</span>);</div><div class=\"line\">    &#125; <span class=\"keyword\">catch</span> (e) &#123;</div><div class=\"line\">        alert(<span class=\"string\">'数据源语法错误,JSON格式化失败! 错误信息: '</span> + e.description, <span class=\"string\">'err'</span>);</div><div class=\"line\">        <span class=\"keyword\">return</span></div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">var</span> line = <span class=\"string\">'&lt;/br&gt;'</span>, <span class=\"comment\">// 换行</span></div><div class=\"line\">        indentChar = <span class=\"string\">'&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;'</span>; <span class=\"comment\">// 缩进量</span></div><div class=\"line\">    <span class=\"comment\">// 获取缩进字符</span></div><div class=\"line\">    <span class=\"keyword\">var</span> getTab = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">num</span>) </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>, tab = <span class=\"string\">''</span>; i &lt; num; i++) &#123;</div><div class=\"line\">            tab += indentChar;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">return</span> tab;</div><div class=\"line\">    &#125;;</div><div class=\"line\">    <span class=\"comment\">// 检测递归</span></div><div class=\"line\">    <span class=\"keyword\">var</span> format = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">value, indent <span class=\"regexp\">/*缩进*/</span> , isLast <span class=\"regexp\">/*是否数组或者对象最后*/</span> , inArray <span class=\"regexp\">/*是否在数组中*/</span> </span>) </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">var</span> str = <span class=\"string\">''</span>;</div><div class=\"line\">        <span class=\"comment\">// 将处理为`[value,value]`，并将进入检测递归</span></div><div class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"built_in\">Object</span>.prototype.toString.call(value) === <span class=\"string\">'[object Array]'</span>) &#123;</div><div class=\"line\">            str += <span class=\"string\">'['</span>;</div><div class=\"line\">            value.forEach(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">item, index</span>) </span>&#123;</div><div class=\"line\">                str += format(item, indent, index === (value.length - <span class=\"number\">1</span>), <span class=\"literal\">true</span>);</div><div class=\"line\">            &#125;);</div><div class=\"line\">            str += <span class=\"string\">']'</span>;</div><div class=\"line\">        <span class=\"comment\">// null，将处理为`&lt;span class=\"null\"&gt;null&lt;/span&gt;`</span></div><div class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (value === <span class=\"literal\">null</span>) &#123;</div><div class=\"line\">            str += <span class=\"string\">'&lt;span class=\"null\"&gt;null&lt;/span&gt;'</span>;</div><div class=\"line\">        <span class=\"comment\">// 对象Object，将处理为`&#123;&lt;span class=\"key\"&gt;\"key\"&lt;/span&gt;:value&#125;`，并进入检测递归</span></div><div class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> value === <span class=\"string\">'object'</span>) &#123;</div><div class=\"line\">            str += <span class=\"string\">'&#123;'</span> + line + getTab(++indent);</div><div class=\"line\">            <span class=\"keyword\">var</span> keys = <span class=\"built_in\">Object</span>.keys(value);</div><div class=\"line\">            keys.forEach(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">key, index</span>) </span>&#123;</div><div class=\"line\">                str += <span class=\"string\">'&lt;span class=\"key\"&gt;'</span> + key + <span class=\"string\">'&lt;/span&gt;: '</span> + format(value[key], indent, index === (keys.length - <span class=\"number\">1</span>));</div><div class=\"line\">            &#125;);</div><div class=\"line\">            str += <span class=\"string\">'&#125;'</span>;</div><div class=\"line\">            indent--;</div><div class=\"line\">        <span class=\"comment\">// true/false，将处理为`&lt;span class=\"boolen\"&gt;true/false&lt;/span&gt;`</span></div><div class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> value === <span class=\"string\">'boolean'</span>) &#123;</div><div class=\"line\">            str += <span class=\"string\">'&lt;span class=\"boolean\"&gt;'</span> + value + <span class=\"string\">'&lt;/span&gt;'</span>;</div><div class=\"line\">        <span class=\"comment\">// 字符串，将处理为`&lt;span class=\"string\"&gt;\"string\"&lt;/span&gt;`</span></div><div class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> value === <span class=\"string\">'string'</span>) &#123;</div><div class=\"line\">            str += <span class=\"string\">'&lt;span class=\"string\"&gt;'</span> + value + <span class=\"string\">'&lt;/span&gt;'</span>;</div><div class=\"line\">        <span class=\"comment\">// 数字Number，将处理为`&lt;span class=\"number\"&gt;1&lt;/span&gt;`</span></div><div class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">            str += <span class=\"string\">'&lt;span class=\"number\"&gt;'</span> + value + <span class=\"string\">'&lt;/span&gt;'</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">        str += (isLast ? <span class=\"string\">''</span> : <span class=\"string\">','</span>) + (inArray ? <span class=\"string\">''</span> : (line + getTab(isLast ? --indent : indent)));</div><div class=\"line\">        <span class=\"keyword\">return</span> str;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> (<span class=\"string\">'&lt;div class=\"json\"&gt;'</span> + format(obj, <span class=\"number\">0</span>, <span class=\"literal\">true</span>) + <span class=\"string\">'&lt;/div&gt;'</span>);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<ul>\n<li>数组换行实现</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">ObjectToHtml</span>(<span class=\"params\">data</span>) </span>&#123;</div><div class=\"line\">    <span class=\"comment\">// 若传入数值为json，则转换为字符串</span></div><div class=\"line\">    <span class=\"keyword\">var</span> txt = <span class=\"keyword\">typeof</span> data === <span class=\"string\">'string'</span> ? data : <span class=\"built_in\">JSON</span>.stringify(data);</div><div class=\"line\">    <span class=\"comment\">// 转换为Object</span></div><div class=\"line\">    <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">        <span class=\"keyword\">var</span> obj = <span class=\"built_in\">eval</span>(<span class=\"string\">'('</span> + txt + <span class=\"string\">')'</span>);</div><div class=\"line\">    &#125; <span class=\"keyword\">catch</span> (e) &#123;</div><div class=\"line\">        alert(<span class=\"string\">'数据源语法错误,JSON格式化失败! 错误信息: '</span> + e.description, <span class=\"string\">'err'</span>);</div><div class=\"line\">        <span class=\"keyword\">return</span></div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">var</span> line = <span class=\"string\">'&lt;/br&gt;'</span>, <span class=\"comment\">// 换行</span></div><div class=\"line\">        indentChar = <span class=\"string\">'&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;'</span>; <span class=\"comment\">// 缩进量</span></div><div class=\"line\">    <span class=\"comment\">// 判断是否为对象</span></div><div class=\"line\">    <span class=\"keyword\">var</span> isObject = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">item</span>) </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> item &amp;&amp; <span class=\"keyword\">typeof</span> item === <span class=\"string\">'object'</span> &amp;&amp; <span class=\"built_in\">Object</span>.prototype.toString.call(item) !== <span class=\"string\">'[object Array]'</span>;</div><div class=\"line\">    &#125;;</div><div class=\"line\">    <span class=\"keyword\">var</span> getTab = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">num</span>) </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>, tab = <span class=\"string\">''</span>; i &lt; num; i++) &#123;</div><div class=\"line\">            tab += indentChar;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">return</span> tab;</div><div class=\"line\">    &#125;;</div><div class=\"line\">    <span class=\"comment\">// 检测递归</span></div><div class=\"line\">    <span class=\"keyword\">var</span> format = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">value, indent, isLast, inArray</span>) </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">var</span> str = <span class=\"string\">''</span>;</div><div class=\"line\">        <span class=\"comment\">// [</span></div><div class=\"line\">        <span class=\"comment\">//   value,</span></div><div class=\"line\">        <span class=\"comment\">//   value</span></div><div class=\"line\">        <span class=\"comment\">// ]，并将进入检测递归</span></div><div class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"built_in\">Object</span>.prototype.toString.call(value) === <span class=\"string\">'[object Array]'</span>) &#123;</div><div class=\"line\">            str += <span class=\"string\">'['</span> + (isObject(value[<span class=\"number\">0</span>]) ? <span class=\"string\">''</span> : (line + getTab(++indent)));</div><div class=\"line\">            value.forEach(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">item, index</span>) </span>&#123;</div><div class=\"line\">                str += format(item, indent, index === (value.length - <span class=\"number\">1</span>), <span class=\"literal\">true</span>);</div><div class=\"line\">                <span class=\"comment\">// 若不为对象，则进行换行</span></div><div class=\"line\">                str += isObject(item) ? <span class=\"string\">''</span> : (line + getTab((index === (value.length - <span class=\"number\">1</span>)) ? --indent : indent));</div><div class=\"line\">            &#125;);</div><div class=\"line\">            str += <span class=\"string\">']'</span>;</div><div class=\"line\">        <span class=\"comment\">// null，将处理为`&lt;span class=\"null\"&gt;null&lt;/span&gt;`</span></div><div class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (value === <span class=\"literal\">null</span>) &#123;</div><div class=\"line\">            str += <span class=\"string\">'&lt;span class=\"null\"&gt;null&lt;/span&gt;'</span>;</div><div class=\"line\">        <span class=\"comment\">// 对象Object，将处理为`&#123;&lt;span class=\"key\"&gt;\"key\"&lt;/span&gt;:value&#125;`，并进入检测递归    </span></div><div class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> value === <span class=\"string\">'object'</span>) &#123;</div><div class=\"line\">            str += <span class=\"string\">'&#123;'</span> + line + getTab(++indent);</div><div class=\"line\">            <span class=\"keyword\">var</span> keys = <span class=\"built_in\">Object</span>.keys(value);</div><div class=\"line\">            keys.forEach(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">key, index</span>) </span>&#123;</div><div class=\"line\">                str += <span class=\"string\">'&lt;span class=\"key\"&gt;\"'</span> + key + <span class=\"string\">'\"&lt;/span&gt;: '</span> + format(value[key], indent, index === (keys.length - <span class=\"number\">1</span>));</div><div class=\"line\">            &#125;);</div><div class=\"line\">            str += <span class=\"string\">'&#125;'</span>;</div><div class=\"line\">            indent--;</div><div class=\"line\">        <span class=\"comment\">// true/false，将处理为`&lt;span class=\"boolen/null\"&gt;true/false&lt;/span&gt;`</span></div><div class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> value === <span class=\"string\">'boolean'</span>) &#123;</div><div class=\"line\">            str += <span class=\"string\">'&lt;span class=\"boolean\"&gt;'</span> + value + <span class=\"string\">'&lt;/span&gt;'</span>;</div><div class=\"line\">        <span class=\"comment\">// 字符串，将处理为`&lt;span class=\"string\"&gt;\"string\"&lt;/span&gt;`</span></div><div class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> value === <span class=\"string\">'string'</span>) &#123;</div><div class=\"line\">            str += <span class=\"string\">'&lt;span class=\"string\"&gt;\"'</span> + value + <span class=\"string\">'\"&lt;/span&gt;'</span>;</div><div class=\"line\">        <span class=\"comment\">// 数字Number，将处理为`&lt;span class=\"number\"&gt;1&lt;/span&gt;`</span></div><div class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">            str += <span class=\"string\">'&lt;span class=\"number\"&gt;'</span> + value + <span class=\"string\">'&lt;/span&gt;'</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">        str += (isLast ? <span class=\"string\">''</span> : <span class=\"string\">','</span>) + (inArray ? <span class=\"string\">''</span> : (line + getTab(isLast ? --indent : indent)));</div><div class=\"line\">        <span class=\"keyword\">return</span> str;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> (<span class=\"string\">'&lt;div class=\"json\"&gt;'</span> + format(obj, <span class=\"number\">0</span>, <span class=\"literal\">true</span>) + <span class=\"string\">'&lt;/div&gt;'</span>);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"结束语\"><a href=\"#结束语\" class=\"headerlink\" title=\"结束语\"></a>结束语</h3><p>这里我们讨论了js判断数据类型并进行转换的实现方法。<br><a href=\"https://github.com/godbasin/godbasin.github.io/blob/blog-codes/json-to-html/json-to-html-2-use-object.html\">此处查看项目代码</a><br><a href=\"http://og7yu923g.bkt.clouddn.com/json-to-html-2-use-object.html\">此处点击查看页面</a></p>"},{"title":"谈谈js的this","date":"2016-07-02T07:32:32.000Z","_content":"有个同事一直问我代码里面为啥要return this。今天就简单聊聊关于javascript中的this吧。\n<!--more-->\n\n首先，在js里面，this指针代表的是执行当前代码的对象的所有者。\n\n## js对象\n-----\n### 一切皆对象\n一切皆对象相信大家都很熟悉了吧。与其他面向对象语言不同的是，JS并没有Class的概念，在其他语言中，我们基本都需要实例化某个具体类的实例，但JS里却不同，它的做法是：任何函数都可以被实例化为一个对象。\nJavaScript中的所有事物都是对象：字符串、数值、数组、函数...此外，JavaScript允许自定义对象。\n\n### javascript对象\nJavaScript提供多个内建对象，比如 String、Date、Array等等。\n对象只是带有属性和方法的特殊数据类型。\n- 访问对象的属性\n属性是与对象相关的值。访问对象属性的语法是：\n``` javascript\nobjectName.propertyName\n```\n- 访问对象的方法\n方法是能够在对象上执行的动作。可以通过以下语法来调用方法：\n``` javascript\nobjectName.methodName()\n```\n\n### 判断对象类型\n- typeof运算符\n  - typeof的返回值，主要有五种： undefined, boolean, number, string, object。\n  - 对于typeof的返回值，容易混淆object和null，因为null在js中指的是一个空对象。\n  - 使用typeof的一个不好的地方就是它会把Array还有用户自定义函数都返回为object。\n- instanceof运算符\n  - instanceof也是一个运算符，运算过程中也需要一个参数(Object, Boolean, Number, String, Function)，判断某一个对象是否是所给的构造函数的一个实例，返回值是true或者false。\n- object.constructor\n  - constructor属性返回对创建此对象的数组函数的引用。\n\n### 创建对象的方法\n- 使用内置对象\n  - JavaScript语言原生对象（语言级对象），如String、Object、Function等； \n  - JavaScript运行期的宿主对象（环境宿主级对象），如window、document、body等。 \n- 使用JSON符号 \n``` javascript\n{name:\"name\", key:\"value\"} \n```\n- 自定义对象构造 \n方法很多，工厂方法、构造函数方法、原型方法、混合的构造函数/原型方法等。《javascript高级程序设计》里面讲得很详细，又或者大家可以上网自行谷哥。\n  - 使用this关键字构造\n  - 使用原型prototype构造\n\n### 参考\n[《JavaScript 对象》](http://www.w3school.com.cn/js/js_objects.asp)\n\n## js执行环境\n-----\n执行环境定义了变量和函数有权访问的其他数据，决定了他们各自的行为。\n\n### 全局执行环境\n- 在一个页面中，第一次载入JS代码时创建一个全局执行环境，全局执行环境是最外围的执行环境\n- 在Web浏览器中，全局执行环境被认为是window对象\n  - 因此，所有的全局变量和函数都是作为window对象的属性和方法创建的。\n  - 全局执行环境直到应用程序退出后---例如关闭浏览器和网页---时才被销毁。\n\n### 函数执行环境\n- ECMAScript程序中的执行流\n  - 每个函数都有自己的执行环境，当执行进入一个函数时，函数的执行环境就会被推入一个执行环境栈的顶部并获取执行权。\n  - 当这个函数执行完毕，它的执行环境又从这个栈的顶部被删除，并把执行权并还给之前执行环境。\n  - 该执行环境中的所有代码执行完毕后，该环境被销毁，保存在其中的所有变量和函数定义也随之销毁。\n- 定义期\n  - 全局函数A创建了一个A的[[scope]]属性，包含全局[[scope]]\n  - 函数A里定义函数B，则B的[[scope]]包含全局[[scope]]和A的[[scope]]\n- 执行期\n当函数被执行的时候，就是进入这个函数的执行环境，首先会创一个它自己的活动对象，包含\n  - this\n  - 参数(arguments，全局对象没有arguments)\n  - 局部变量(包括命名的参数)\n  - 一个变量对象的作用域链[[scope chain]]\n\n### 作用域 \n- 没有块级作用域\n- 延长作用域链\n  - try-catch语句的catch块\n  - with语句\n\n### 参考\n[《javascript高级程序第三版学习笔记【执行环境、作用域】》](http://www.cnblogs.com/pigtail/archive/2012/07/19/2570988.html)\n\n## js的this\n-----\n讲了那么多，终于来到本节的重点了。不过前面讲的也跟接下来的有关系的哦。\n\n### this指向什么\nthis指针代表的是执行当前代码的对象的所有者。即有以下两种：\n- this指向全局变量\n- this指向某个对象\n\n### this与全局变量\n我们来看以下代码（例1）：\n``` javascript\nvar x;\nfunction example(x) { \n this.x = x; \n} \nexample(5); \nalert(x); //5\n```\n在这里，x和函数example均是全局变量，因此它们的全局执行环境是window对象。所以在example中的this也是指向全局的window对象。\n\n### this与某个对象\n来看下面的代码（例2）\n``` javascript\nvar x;\nvar example = {\n\tfun: function(x){\n\t\tthis.x = x;\n\t\talert(this.x); //5\n\t}\n};\nexample.fun(5); \nalert(x); //undefined\nalert(this.x); //undefined\n```\n在这里，我们定义了一个example对象，同时给该对象添加了x属性和fun方法，因此在调用fun方法时其执行环境为example的fun函数，而this指向该函数的所有者为example对象。\n故最后全局变量x并没有改变，仍然是undefined。\n\n当然上面我们也提到过，js对象的创建办法有几种，刚才的是通过json创建，我们还可以使用其它自定义对象构造方法。\n（例3）：\n``` javascript\n//构造函数，就是通过这个函数生成一个新对象（object），this就指这个新对象\nfunction obj(){\n\tthis.x = 5;\n\talert(this.x); //5\n}\nvar example = new obj();\nalert(example.x); //5\nalert(this.x); //undefined\n```\n\n现在我们再看看下面的代码（例4）：\n``` javascript\nvar x;\nvar example = {\n\tfun: function(x){\n\t\tvar fun2 = function(x){\n\t\t\tthis.x = x;\n\t\t\talert(this.x); //5\n\t\t};\n\t\tfun2(x);\n\t\talert(this.x); //undefined\n\t}\n};\nexample.fun(5); \nalert(example.x); //undefined\nalert(this.x); //5\n```\n当我们在对象的方法内定义新的函数，这时候该函数内的this绑定到全局window对象。是不是有点不可思议？\n这也是我们在写代码过程中容易遇到的一些问题，这里补充一下函数的调用方法一起说明吧。\n\n### JavaScript中函数的调用方式\n- 作为对象方法调用\n  - 在JavaScript中，函数也是对象，因此函数可以作为一个对象的属性。\n  - 此时该函数被称为该对象的方法，在使用这种调用方式时，this被自然绑定到该对象。\n- 作为函数调用\n这是我们刚才遇到的现象（例4），也即函数作为函数调用。\n  - 函数也可以直接被调用，此时this绑定到全局对象。\n  - 在浏览器中，window就是该全局对象。\n我们可以使用下面变量替代的方法规避这一缺陷：\n``` javascript\nvar x;\nvar example = {\n\tfun: function(x){\n\t\tvar that = this;\n\t\tvar fun2 = function(x){\n\t\t\tthat.x = x;\n\t\t\talert(this.x); //undefined\n\t\t\talert(that.x); //5\n\t\t};\n\t\tfun2(x);\n\t\talert(this.x); //5\n\t}\n};\nexample.fun(5); \nalert(example.x); //5\nalert(this.x); //undefined\n```\n同时，像setTimeout和setInterval这样的异步回调函数，经常也会遇到执行环境变更的问题，此时我们也可以使用该方法进行规避。\n- 作为构造函数调用（例3）\n  - JavaScript并没有类（class）的概念，而是使用基于原型（prototype）的继承方式。\n  - JavaScript中的构造函数也很特殊，如果不使用new调用，则和普通函数一样。（例1）\n- 使用apply或call调用\n  - 在JavaScript中函数也是对象，对象则有方法，apply和call就是函数对象的方法。\n  - 这两个方法异常强大，他们允许切换函数执行的上下文环境（context），即this绑定的对象。\n现在我们定义一个obj对象，并使它的一个方法等于全局函数：\n``` javascript\nfunction example(){\n\tthis.x = 5;\n\talert(this.x); //5\n}\nvar obj = {};\nobj.x = 1;\nobj.fun = example;\nalert(obj.x); //1\nalert(this.x); //undefined\n```\n1.此时我们直接调用该方法，会修改该对象的属性值。\n``` javascript\nobj.fun();\nalert(obj.x); //5\nalert(this.x); //undefined\n```\n2.如果我们在该方法上进行apply，则会出现以下结果。说明apply()的参数为空时，默认调用全局对象。\n``` javascript\nobj.fun.apply();\nalert(obj.x); //1\nalert(this.x); //5\n```\n3.我们给apply添加该对象作为参数。apply()的作用是改变函数的调用对象，它的第一个参数就表示改变后的调用这个函数的对象。。\n``` javascript\nobj.fun.apply(obj);\nalert(obj.x); //5\nalert(this.x); //undefined\n```\n\n另外，call方法可以用来代替另一个对象调用一个方法。call方法可将一个函数的对象上下文从初始的上下文改变为由thisObj指定的新对象。\n- apply和call两者在作用上是相同的，但两者在参数上有区别的：\n  - 对于第一个参数意义都一样\n  - 对第二个参数：apply传入的是一个参数数组，也就是将多个参数组合成为一个数组传入，而call则作为call的参数传入（从第二个参数开始\n\n### return this链式调用\n最后我们回到最开始的问题，为什么要在代码中使用return this呢？\n其实这是个链式调用的小技巧，我们只需要在对象的方法最后return this，就可以返回该对象，继续调用该对象的其它方法。看以下代码：\n``` javascript\nvar x;\nvar example = {\n\tfun1: function(x){\n\t\tthis.x = x;\n\t\talert(\"fun1: \" + this.x);\n\t\treturn this;\n\t},\n\tfun2: function(){\n\t\tthis.x += 1;\n\t\talert(\"fun2: \" + this.x);\n\t\treturn this;\n\t}\n};\nexample.fun1(5).fun2().fun1(2).fun2(); //链式调用对象的方法\n//fun1: 5\n//fun2: 6\n//fun1: 2\n//fun2: 3\nalert(example.x); //3\nalert(this.x); //undefined\n```\n链式调用是个挺有趣的东西，本骚年当初也是在研究jQuery的源码的时候看到的呢。\n\n### 参考\n[《深入浅出JavaScript中的this》](http://www.ibm.com/developerworks/cn/web/1207_wangqf_jsthis/)\n[《Javascript的this用法》](http://www.ruanyifeng.com/blog/2010/04/using_this_keyword_in_javascript.html)\n\n## 结束语\n-----\n有些人觉得jQuery已经过时了，现在都流行像AngularJS/ReactJS/Backbone.js这些框架。\n其实jQuery只是个库，它帮我们解决了很多兼容问题，也简化了js代码，跟框架不一样。而且本骚年认为jQuery库还是有很多精华的逻辑和思维呢，这些是永远都不会过时的呀。","source":"_posts/js-this.md","raw":"---\ntitle: 谈谈js的this\ndate: 2016-07-02 15:32:32\ncategories: js什锦\ntags: 笔记\n---\n有个同事一直问我代码里面为啥要return this。今天就简单聊聊关于javascript中的this吧。\n<!--more-->\n\n首先，在js里面，this指针代表的是执行当前代码的对象的所有者。\n\n## js对象\n-----\n### 一切皆对象\n一切皆对象相信大家都很熟悉了吧。与其他面向对象语言不同的是，JS并没有Class的概念，在其他语言中，我们基本都需要实例化某个具体类的实例，但JS里却不同，它的做法是：任何函数都可以被实例化为一个对象。\nJavaScript中的所有事物都是对象：字符串、数值、数组、函数...此外，JavaScript允许自定义对象。\n\n### javascript对象\nJavaScript提供多个内建对象，比如 String、Date、Array等等。\n对象只是带有属性和方法的特殊数据类型。\n- 访问对象的属性\n属性是与对象相关的值。访问对象属性的语法是：\n``` javascript\nobjectName.propertyName\n```\n- 访问对象的方法\n方法是能够在对象上执行的动作。可以通过以下语法来调用方法：\n``` javascript\nobjectName.methodName()\n```\n\n### 判断对象类型\n- typeof运算符\n  - typeof的返回值，主要有五种： undefined, boolean, number, string, object。\n  - 对于typeof的返回值，容易混淆object和null，因为null在js中指的是一个空对象。\n  - 使用typeof的一个不好的地方就是它会把Array还有用户自定义函数都返回为object。\n- instanceof运算符\n  - instanceof也是一个运算符，运算过程中也需要一个参数(Object, Boolean, Number, String, Function)，判断某一个对象是否是所给的构造函数的一个实例，返回值是true或者false。\n- object.constructor\n  - constructor属性返回对创建此对象的数组函数的引用。\n\n### 创建对象的方法\n- 使用内置对象\n  - JavaScript语言原生对象（语言级对象），如String、Object、Function等； \n  - JavaScript运行期的宿主对象（环境宿主级对象），如window、document、body等。 \n- 使用JSON符号 \n``` javascript\n{name:\"name\", key:\"value\"} \n```\n- 自定义对象构造 \n方法很多，工厂方法、构造函数方法、原型方法、混合的构造函数/原型方法等。《javascript高级程序设计》里面讲得很详细，又或者大家可以上网自行谷哥。\n  - 使用this关键字构造\n  - 使用原型prototype构造\n\n### 参考\n[《JavaScript 对象》](http://www.w3school.com.cn/js/js_objects.asp)\n\n## js执行环境\n-----\n执行环境定义了变量和函数有权访问的其他数据，决定了他们各自的行为。\n\n### 全局执行环境\n- 在一个页面中，第一次载入JS代码时创建一个全局执行环境，全局执行环境是最外围的执行环境\n- 在Web浏览器中，全局执行环境被认为是window对象\n  - 因此，所有的全局变量和函数都是作为window对象的属性和方法创建的。\n  - 全局执行环境直到应用程序退出后---例如关闭浏览器和网页---时才被销毁。\n\n### 函数执行环境\n- ECMAScript程序中的执行流\n  - 每个函数都有自己的执行环境，当执行进入一个函数时，函数的执行环境就会被推入一个执行环境栈的顶部并获取执行权。\n  - 当这个函数执行完毕，它的执行环境又从这个栈的顶部被删除，并把执行权并还给之前执行环境。\n  - 该执行环境中的所有代码执行完毕后，该环境被销毁，保存在其中的所有变量和函数定义也随之销毁。\n- 定义期\n  - 全局函数A创建了一个A的[[scope]]属性，包含全局[[scope]]\n  - 函数A里定义函数B，则B的[[scope]]包含全局[[scope]]和A的[[scope]]\n- 执行期\n当函数被执行的时候，就是进入这个函数的执行环境，首先会创一个它自己的活动对象，包含\n  - this\n  - 参数(arguments，全局对象没有arguments)\n  - 局部变量(包括命名的参数)\n  - 一个变量对象的作用域链[[scope chain]]\n\n### 作用域 \n- 没有块级作用域\n- 延长作用域链\n  - try-catch语句的catch块\n  - with语句\n\n### 参考\n[《javascript高级程序第三版学习笔记【执行环境、作用域】》](http://www.cnblogs.com/pigtail/archive/2012/07/19/2570988.html)\n\n## js的this\n-----\n讲了那么多，终于来到本节的重点了。不过前面讲的也跟接下来的有关系的哦。\n\n### this指向什么\nthis指针代表的是执行当前代码的对象的所有者。即有以下两种：\n- this指向全局变量\n- this指向某个对象\n\n### this与全局变量\n我们来看以下代码（例1）：\n``` javascript\nvar x;\nfunction example(x) { \n this.x = x; \n} \nexample(5); \nalert(x); //5\n```\n在这里，x和函数example均是全局变量，因此它们的全局执行环境是window对象。所以在example中的this也是指向全局的window对象。\n\n### this与某个对象\n来看下面的代码（例2）\n``` javascript\nvar x;\nvar example = {\n\tfun: function(x){\n\t\tthis.x = x;\n\t\talert(this.x); //5\n\t}\n};\nexample.fun(5); \nalert(x); //undefined\nalert(this.x); //undefined\n```\n在这里，我们定义了一个example对象，同时给该对象添加了x属性和fun方法，因此在调用fun方法时其执行环境为example的fun函数，而this指向该函数的所有者为example对象。\n故最后全局变量x并没有改变，仍然是undefined。\n\n当然上面我们也提到过，js对象的创建办法有几种，刚才的是通过json创建，我们还可以使用其它自定义对象构造方法。\n（例3）：\n``` javascript\n//构造函数，就是通过这个函数生成一个新对象（object），this就指这个新对象\nfunction obj(){\n\tthis.x = 5;\n\talert(this.x); //5\n}\nvar example = new obj();\nalert(example.x); //5\nalert(this.x); //undefined\n```\n\n现在我们再看看下面的代码（例4）：\n``` javascript\nvar x;\nvar example = {\n\tfun: function(x){\n\t\tvar fun2 = function(x){\n\t\t\tthis.x = x;\n\t\t\talert(this.x); //5\n\t\t};\n\t\tfun2(x);\n\t\talert(this.x); //undefined\n\t}\n};\nexample.fun(5); \nalert(example.x); //undefined\nalert(this.x); //5\n```\n当我们在对象的方法内定义新的函数，这时候该函数内的this绑定到全局window对象。是不是有点不可思议？\n这也是我们在写代码过程中容易遇到的一些问题，这里补充一下函数的调用方法一起说明吧。\n\n### JavaScript中函数的调用方式\n- 作为对象方法调用\n  - 在JavaScript中，函数也是对象，因此函数可以作为一个对象的属性。\n  - 此时该函数被称为该对象的方法，在使用这种调用方式时，this被自然绑定到该对象。\n- 作为函数调用\n这是我们刚才遇到的现象（例4），也即函数作为函数调用。\n  - 函数也可以直接被调用，此时this绑定到全局对象。\n  - 在浏览器中，window就是该全局对象。\n我们可以使用下面变量替代的方法规避这一缺陷：\n``` javascript\nvar x;\nvar example = {\n\tfun: function(x){\n\t\tvar that = this;\n\t\tvar fun2 = function(x){\n\t\t\tthat.x = x;\n\t\t\talert(this.x); //undefined\n\t\t\talert(that.x); //5\n\t\t};\n\t\tfun2(x);\n\t\talert(this.x); //5\n\t}\n};\nexample.fun(5); \nalert(example.x); //5\nalert(this.x); //undefined\n```\n同时，像setTimeout和setInterval这样的异步回调函数，经常也会遇到执行环境变更的问题，此时我们也可以使用该方法进行规避。\n- 作为构造函数调用（例3）\n  - JavaScript并没有类（class）的概念，而是使用基于原型（prototype）的继承方式。\n  - JavaScript中的构造函数也很特殊，如果不使用new调用，则和普通函数一样。（例1）\n- 使用apply或call调用\n  - 在JavaScript中函数也是对象，对象则有方法，apply和call就是函数对象的方法。\n  - 这两个方法异常强大，他们允许切换函数执行的上下文环境（context），即this绑定的对象。\n现在我们定义一个obj对象，并使它的一个方法等于全局函数：\n``` javascript\nfunction example(){\n\tthis.x = 5;\n\talert(this.x); //5\n}\nvar obj = {};\nobj.x = 1;\nobj.fun = example;\nalert(obj.x); //1\nalert(this.x); //undefined\n```\n1.此时我们直接调用该方法，会修改该对象的属性值。\n``` javascript\nobj.fun();\nalert(obj.x); //5\nalert(this.x); //undefined\n```\n2.如果我们在该方法上进行apply，则会出现以下结果。说明apply()的参数为空时，默认调用全局对象。\n``` javascript\nobj.fun.apply();\nalert(obj.x); //1\nalert(this.x); //5\n```\n3.我们给apply添加该对象作为参数。apply()的作用是改变函数的调用对象，它的第一个参数就表示改变后的调用这个函数的对象。。\n``` javascript\nobj.fun.apply(obj);\nalert(obj.x); //5\nalert(this.x); //undefined\n```\n\n另外，call方法可以用来代替另一个对象调用一个方法。call方法可将一个函数的对象上下文从初始的上下文改变为由thisObj指定的新对象。\n- apply和call两者在作用上是相同的，但两者在参数上有区别的：\n  - 对于第一个参数意义都一样\n  - 对第二个参数：apply传入的是一个参数数组，也就是将多个参数组合成为一个数组传入，而call则作为call的参数传入（从第二个参数开始\n\n### return this链式调用\n最后我们回到最开始的问题，为什么要在代码中使用return this呢？\n其实这是个链式调用的小技巧，我们只需要在对象的方法最后return this，就可以返回该对象，继续调用该对象的其它方法。看以下代码：\n``` javascript\nvar x;\nvar example = {\n\tfun1: function(x){\n\t\tthis.x = x;\n\t\talert(\"fun1: \" + this.x);\n\t\treturn this;\n\t},\n\tfun2: function(){\n\t\tthis.x += 1;\n\t\talert(\"fun2: \" + this.x);\n\t\treturn this;\n\t}\n};\nexample.fun1(5).fun2().fun1(2).fun2(); //链式调用对象的方法\n//fun1: 5\n//fun2: 6\n//fun1: 2\n//fun2: 3\nalert(example.x); //3\nalert(this.x); //undefined\n```\n链式调用是个挺有趣的东西，本骚年当初也是在研究jQuery的源码的时候看到的呢。\n\n### 参考\n[《深入浅出JavaScript中的this》](http://www.ibm.com/developerworks/cn/web/1207_wangqf_jsthis/)\n[《Javascript的this用法》](http://www.ruanyifeng.com/blog/2010/04/using_this_keyword_in_javascript.html)\n\n## 结束语\n-----\n有些人觉得jQuery已经过时了，现在都流行像AngularJS/ReactJS/Backbone.js这些框架。\n其实jQuery只是个库，它帮我们解决了很多兼容问题，也简化了js代码，跟框架不一样。而且本骚年认为jQuery库还是有很多精华的逻辑和思维呢，这些是永远都不会过时的呀。","slug":"js-this","published":1,"updated":"2016-08-20T10:54:21.086Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cix45hugy0037xotuwe6dxp0t","content":"<p>有个同事一直问我代码里面为啥要return this。今天就简单聊聊关于javascript中的this吧。<br><a id=\"more\"></a></p>\n<p>首先，在js里面，this指针代表的是执行当前代码的对象的所有者。</p>\n<h2 id=\"js对象\"><a href=\"#js对象\" class=\"headerlink\" title=\"js对象\"></a>js对象</h2><hr>\n<h3 id=\"一切皆对象\"><a href=\"#一切皆对象\" class=\"headerlink\" title=\"一切皆对象\"></a>一切皆对象</h3><p>一切皆对象相信大家都很熟悉了吧。与其他面向对象语言不同的是，JS并没有Class的概念，在其他语言中，我们基本都需要实例化某个具体类的实例，但JS里却不同，它的做法是：任何函数都可以被实例化为一个对象。<br>JavaScript中的所有事物都是对象：字符串、数值、数组、函数…此外，JavaScript允许自定义对象。</p>\n<h3 id=\"javascript对象\"><a href=\"#javascript对象\" class=\"headerlink\" title=\"javascript对象\"></a>javascript对象</h3><p>JavaScript提供多个内建对象，比如 String、Date、Array等等。<br>对象只是带有属性和方法的特殊数据类型。</p>\n<ul>\n<li><p>访问对象的属性<br>属性是与对象相关的值。访问对象属性的语法是：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">objectName.propertyName</div></pre></td></tr></table></figure>\n</li>\n<li><p>访问对象的方法<br>方法是能够在对象上执行的动作。可以通过以下语法来调用方法：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">objectName.methodName()</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3 id=\"判断对象类型\"><a href=\"#判断对象类型\" class=\"headerlink\" title=\"判断对象类型\"></a>判断对象类型</h3><ul>\n<li>typeof运算符<ul>\n<li>typeof的返回值，主要有五种： undefined, boolean, number, string, object。</li>\n<li>对于typeof的返回值，容易混淆object和null，因为null在js中指的是一个空对象。</li>\n<li>使用typeof的一个不好的地方就是它会把Array还有用户自定义函数都返回为object。</li>\n</ul>\n</li>\n<li>instanceof运算符<ul>\n<li>instanceof也是一个运算符，运算过程中也需要一个参数(Object, Boolean, Number, String, Function)，判断某一个对象是否是所给的构造函数的一个实例，返回值是true或者false。</li>\n</ul>\n</li>\n<li>object.constructor<ul>\n<li>constructor属性返回对创建此对象的数组函数的引用。</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"创建对象的方法\"><a href=\"#创建对象的方法\" class=\"headerlink\" title=\"创建对象的方法\"></a>创建对象的方法</h3><ul>\n<li>使用内置对象<ul>\n<li>JavaScript语言原生对象（语言级对象），如String、Object、Function等； </li>\n<li>JavaScript运行期的宿主对象（环境宿主级对象），如window、document、body等。 </li>\n</ul>\n</li>\n<li><p>使用JSON符号 </p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;<span class=\"attr\">name</span>:<span class=\"string\">\"name\"</span>, <span class=\"attr\">key</span>:<span class=\"string\">\"value\"</span>&#125;</div></pre></td></tr></table></figure>\n</li>\n<li><p>自定义对象构造<br>方法很多，工厂方法、构造函数方法、原型方法、混合的构造函数/原型方法等。《javascript高级程序设计》里面讲得很详细，又或者大家可以上网自行谷哥。</p>\n<ul>\n<li>使用this关键字构造</li>\n<li>使用原型prototype构造</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h3><p><a href=\"http://www.w3school.com.cn/js/js_objects.asp\" target=\"_blank\" rel=\"external\">《JavaScript 对象》</a></p>\n<h2 id=\"js执行环境\"><a href=\"#js执行环境\" class=\"headerlink\" title=\"js执行环境\"></a>js执行环境</h2><hr>\n<p>执行环境定义了变量和函数有权访问的其他数据，决定了他们各自的行为。</p>\n<h3 id=\"全局执行环境\"><a href=\"#全局执行环境\" class=\"headerlink\" title=\"全局执行环境\"></a>全局执行环境</h3><ul>\n<li>在一个页面中，第一次载入JS代码时创建一个全局执行环境，全局执行环境是最外围的执行环境</li>\n<li>在Web浏览器中，全局执行环境被认为是window对象<ul>\n<li>因此，所有的全局变量和函数都是作为window对象的属性和方法创建的。</li>\n<li>全局执行环境直到应用程序退出后—例如关闭浏览器和网页—时才被销毁。</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"函数执行环境\"><a href=\"#函数执行环境\" class=\"headerlink\" title=\"函数执行环境\"></a>函数执行环境</h3><ul>\n<li>ECMAScript程序中的执行流<ul>\n<li>每个函数都有自己的执行环境，当执行进入一个函数时，函数的执行环境就会被推入一个执行环境栈的顶部并获取执行权。</li>\n<li>当这个函数执行完毕，它的执行环境又从这个栈的顶部被删除，并把执行权并还给之前执行环境。</li>\n<li>该执行环境中的所有代码执行完毕后，该环境被销毁，保存在其中的所有变量和函数定义也随之销毁。</li>\n</ul>\n</li>\n<li>定义期<ul>\n<li>全局函数A创建了一个A的[[scope]]属性，包含全局[[scope]]</li>\n<li>函数A里定义函数B，则B的[[scope]]包含全局[[scope]]和A的[[scope]]</li>\n</ul>\n</li>\n<li>执行期<br>当函数被执行的时候，就是进入这个函数的执行环境，首先会创一个它自己的活动对象，包含<ul>\n<li>this</li>\n<li>参数(arguments，全局对象没有arguments)</li>\n<li>局部变量(包括命名的参数)</li>\n<li>一个变量对象的作用域链[[scope chain]]</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"作用域\"><a href=\"#作用域\" class=\"headerlink\" title=\"作用域\"></a>作用域</h3><ul>\n<li>没有块级作用域</li>\n<li>延长作用域链<ul>\n<li>try-catch语句的catch块</li>\n<li>with语句</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"参考-1\"><a href=\"#参考-1\" class=\"headerlink\" title=\"参考\"></a>参考</h3><p><a href=\"http://www.cnblogs.com/pigtail/archive/2012/07/19/2570988.html\" target=\"_blank\" rel=\"external\">《javascript高级程序第三版学习笔记【执行环境、作用域】》</a></p>\n<h2 id=\"js的this\"><a href=\"#js的this\" class=\"headerlink\" title=\"js的this\"></a>js的this</h2><hr>\n<p>讲了那么多，终于来到本节的重点了。不过前面讲的也跟接下来的有关系的哦。</p>\n<h3 id=\"this指向什么\"><a href=\"#this指向什么\" class=\"headerlink\" title=\"this指向什么\"></a>this指向什么</h3><p>this指针代表的是执行当前代码的对象的所有者。即有以下两种：</p>\n<ul>\n<li>this指向全局变量</li>\n<li>this指向某个对象</li>\n</ul>\n<h3 id=\"this与全局变量\"><a href=\"#this与全局变量\" class=\"headerlink\" title=\"this与全局变量\"></a>this与全局变量</h3><p>我们来看以下代码（例1）：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> x;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">example</span>(<span class=\"params\">x</span>) </span>&#123; </div><div class=\"line\"> <span class=\"keyword\">this</span>.x = x; </div><div class=\"line\">&#125; </div><div class=\"line\">example(<span class=\"number\">5</span>); </div><div class=\"line\">alert(x); <span class=\"comment\">//5</span></div></pre></td></tr></table></figure></p>\n<p>在这里，x和函数example均是全局变量，因此它们的全局执行环境是window对象。所以在example中的this也是指向全局的window对象。</p>\n<h3 id=\"this与某个对象\"><a href=\"#this与某个对象\" class=\"headerlink\" title=\"this与某个对象\"></a>this与某个对象</h3><p>来看下面的代码（例2）<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> x;</div><div class=\"line\"><span class=\"keyword\">var</span> example = &#123;</div><div class=\"line\">  <span class=\"attr\">fun</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">x</span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>.x = x;</div><div class=\"line\">    alert(<span class=\"keyword\">this</span>.x); <span class=\"comment\">//5</span></div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;;</div><div class=\"line\">example.fun(<span class=\"number\">5</span>); </div><div class=\"line\">alert(x); <span class=\"comment\">//undefined</span></div><div class=\"line\">alert(<span class=\"keyword\">this</span>.x); <span class=\"comment\">//undefined</span></div></pre></td></tr></table></figure></p>\n<p>在这里，我们定义了一个example对象，同时给该对象添加了x属性和fun方法，因此在调用fun方法时其执行环境为example的fun函数，而this指向该函数的所有者为example对象。<br>故最后全局变量x并没有改变，仍然是undefined。</p>\n<p>当然上面我们也提到过，js对象的创建办法有几种，刚才的是通过json创建，我们还可以使用其它自定义对象构造方法。<br>（例3）：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//构造函数，就是通过这个函数生成一个新对象（object），this就指这个新对象</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">obj</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">  <span class=\"keyword\">this</span>.x = <span class=\"number\">5</span>;</div><div class=\"line\">  alert(<span class=\"keyword\">this</span>.x); <span class=\"comment\">//5</span></div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">var</span> example = <span class=\"keyword\">new</span> obj();</div><div class=\"line\">alert(example.x); <span class=\"comment\">//5</span></div><div class=\"line\">alert(<span class=\"keyword\">this</span>.x); <span class=\"comment\">//undefined</span></div></pre></td></tr></table></figure></p>\n<p>现在我们再看看下面的代码（例4）：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> x;</div><div class=\"line\"><span class=\"keyword\">var</span> example = &#123;</div><div class=\"line\">  <span class=\"attr\">fun</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">x</span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> fun2 = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">x</span>)</span>&#123;</div><div class=\"line\">      <span class=\"keyword\">this</span>.x = x;</div><div class=\"line\">      alert(<span class=\"keyword\">this</span>.x); <span class=\"comment\">//5</span></div><div class=\"line\">    &#125;;</div><div class=\"line\">    fun2(x);</div><div class=\"line\">    alert(<span class=\"keyword\">this</span>.x); <span class=\"comment\">//undefined</span></div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;;</div><div class=\"line\">example.fun(<span class=\"number\">5</span>); </div><div class=\"line\">alert(example.x); <span class=\"comment\">//undefined</span></div><div class=\"line\">alert(<span class=\"keyword\">this</span>.x); <span class=\"comment\">//5</span></div></pre></td></tr></table></figure></p>\n<p>当我们在对象的方法内定义新的函数，这时候该函数内的this绑定到全局window对象。是不是有点不可思议？<br>这也是我们在写代码过程中容易遇到的一些问题，这里补充一下函数的调用方法一起说明吧。</p>\n<h3 id=\"JavaScript中函数的调用方式\"><a href=\"#JavaScript中函数的调用方式\" class=\"headerlink\" title=\"JavaScript中函数的调用方式\"></a>JavaScript中函数的调用方式</h3><ul>\n<li>作为对象方法调用<ul>\n<li>在JavaScript中，函数也是对象，因此函数可以作为一个对象的属性。</li>\n<li>此时该函数被称为该对象的方法，在使用这种调用方式时，this被自然绑定到该对象。</li>\n</ul>\n</li>\n<li>作为函数调用<br>这是我们刚才遇到的现象（例4），也即函数作为函数调用。<ul>\n<li>函数也可以直接被调用，此时this绑定到全局对象。</li>\n<li>在浏览器中，window就是该全局对象。<br>我们可以使用下面变量替代的方法规避这一缺陷：<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> x;</div><div class=\"line\"><span class=\"keyword\">var</span> example = &#123;</div><div class=\"line\">  <span class=\"attr\">fun</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">x</span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> that = <span class=\"keyword\">this</span>;</div><div class=\"line\">    <span class=\"keyword\">var</span> fun2 = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">x</span>)</span>&#123;</div><div class=\"line\">      that.x = x;</div><div class=\"line\">      alert(<span class=\"keyword\">this</span>.x); <span class=\"comment\">//undefined</span></div><div class=\"line\">      alert(that.x); <span class=\"comment\">//5</span></div><div class=\"line\">    &#125;;</div><div class=\"line\">    fun2(x);</div><div class=\"line\">    alert(<span class=\"keyword\">this</span>.x); <span class=\"comment\">//5</span></div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;;</div><div class=\"line\">example.fun(<span class=\"number\">5</span>); </div><div class=\"line\">alert(example.x); <span class=\"comment\">//5</span></div><div class=\"line\">alert(<span class=\"keyword\">this</span>.x); <span class=\"comment\">//undefined</span></div></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n</ul>\n<p>同时，像setTimeout和setInterval这样的异步回调函数，经常也会遇到执行环境变更的问题，此时我们也可以使用该方法进行规避。</p>\n<ul>\n<li>作为构造函数调用（例3）<ul>\n<li>JavaScript并没有类（class）的概念，而是使用基于原型（prototype）的继承方式。</li>\n<li>JavaScript中的构造函数也很特殊，如果不使用new调用，则和普通函数一样。（例1）</li>\n</ul>\n</li>\n<li>使用apply或call调用<ul>\n<li>在JavaScript中函数也是对象，对象则有方法，apply和call就是函数对象的方法。</li>\n<li>这两个方法异常强大，他们允许切换函数执行的上下文环境（context），即this绑定的对象。<br>现在我们定义一个obj对象，并使它的一个方法等于全局函数：<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">example</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">  <span class=\"keyword\">this</span>.x = <span class=\"number\">5</span>;</div><div class=\"line\">  alert(<span class=\"keyword\">this</span>.x); <span class=\"comment\">//5</span></div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">var</span> obj = &#123;&#125;;</div><div class=\"line\">obj.x = <span class=\"number\">1</span>;</div><div class=\"line\">obj.fun = example;</div><div class=\"line\">alert(obj.x); <span class=\"comment\">//1</span></div><div class=\"line\">alert(<span class=\"keyword\">this</span>.x); <span class=\"comment\">//undefined</span></div></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n</ul>\n<p>1.此时我们直接调用该方法，会修改该对象的属性值。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">obj.fun();</div><div class=\"line\">alert(obj.x); <span class=\"comment\">//5</span></div><div class=\"line\">alert(<span class=\"keyword\">this</span>.x); <span class=\"comment\">//undefined</span></div></pre></td></tr></table></figure></p>\n<p>2.如果我们在该方法上进行apply，则会出现以下结果。说明apply()的参数为空时，默认调用全局对象。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">obj.fun.apply();</div><div class=\"line\">alert(obj.x); <span class=\"comment\">//1</span></div><div class=\"line\">alert(<span class=\"keyword\">this</span>.x); <span class=\"comment\">//5</span></div></pre></td></tr></table></figure></p>\n<p>3.我们给apply添加该对象作为参数。apply()的作用是改变函数的调用对象，它的第一个参数就表示改变后的调用这个函数的对象。。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">obj.fun.apply(obj);</div><div class=\"line\">alert(obj.x); <span class=\"comment\">//5</span></div><div class=\"line\">alert(<span class=\"keyword\">this</span>.x); <span class=\"comment\">//undefined</span></div></pre></td></tr></table></figure></p>\n<p>另外，call方法可以用来代替另一个对象调用一个方法。call方法可将一个函数的对象上下文从初始的上下文改变为由thisObj指定的新对象。</p>\n<ul>\n<li>apply和call两者在作用上是相同的，但两者在参数上有区别的：<ul>\n<li>对于第一个参数意义都一样</li>\n<li>对第二个参数：apply传入的是一个参数数组，也就是将多个参数组合成为一个数组传入，而call则作为call的参数传入（从第二个参数开始</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"return-this链式调用\"><a href=\"#return-this链式调用\" class=\"headerlink\" title=\"return this链式调用\"></a>return this链式调用</h3><p>最后我们回到最开始的问题，为什么要在代码中使用return this呢？<br>其实这是个链式调用的小技巧，我们只需要在对象的方法最后return this，就可以返回该对象，继续调用该对象的其它方法。看以下代码：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> x;</div><div class=\"line\"><span class=\"keyword\">var</span> example = &#123;</div><div class=\"line\">  <span class=\"attr\">fun1</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">x</span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>.x = x;</div><div class=\"line\">    alert(<span class=\"string\">\"fun1: \"</span> + <span class=\"keyword\">this</span>.x);</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>;</div><div class=\"line\">  &#125;,</div><div class=\"line\">  <span class=\"attr\">fun2</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>.x += <span class=\"number\">1</span>;</div><div class=\"line\">    alert(<span class=\"string\">\"fun2: \"</span> + <span class=\"keyword\">this</span>.x);</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;;</div><div class=\"line\">example.fun1(<span class=\"number\">5</span>).fun2().fun1(<span class=\"number\">2</span>).fun2(); <span class=\"comment\">//链式调用对象的方法</span></div><div class=\"line\"><span class=\"comment\">//fun1: 5</span></div><div class=\"line\"><span class=\"comment\">//fun2: 6</span></div><div class=\"line\"><span class=\"comment\">//fun1: 2</span></div><div class=\"line\"><span class=\"comment\">//fun2: 3</span></div><div class=\"line\">alert(example.x); <span class=\"comment\">//3</span></div><div class=\"line\">alert(<span class=\"keyword\">this</span>.x); <span class=\"comment\">//undefined</span></div></pre></td></tr></table></figure></p>\n<p>链式调用是个挺有趣的东西，本骚年当初也是在研究jQuery的源码的时候看到的呢。</p>\n<h3 id=\"参考-2\"><a href=\"#参考-2\" class=\"headerlink\" title=\"参考\"></a>参考</h3><p><a href=\"http://www.ibm.com/developerworks/cn/web/1207_wangqf_jsthis/\" target=\"_blank\" rel=\"external\">《深入浅出JavaScript中的this》</a><br><a href=\"http://www.ruanyifeng.com/blog/2010/04/using_this_keyword_in_javascript.html\" target=\"_blank\" rel=\"external\">《Javascript的this用法》</a></p>\n<h2 id=\"结束语\"><a href=\"#结束语\" class=\"headerlink\" title=\"结束语\"></a>结束语</h2><hr>\n<p>有些人觉得jQuery已经过时了，现在都流行像AngularJS/ReactJS/Backbone.js这些框架。<br>其实jQuery只是个库，它帮我们解决了很多兼容问题，也简化了js代码，跟框架不一样。而且本骚年认为jQuery库还是有很多精华的逻辑和思维呢，这些是永远都不会过时的呀。</p>\n","excerpt":"<p>有个同事一直问我代码里面为啥要return this。今天就简单聊聊关于javascript中的this吧。<br>","more":"</p>\n<p>首先，在js里面，this指针代表的是执行当前代码的对象的所有者。</p>\n<h2 id=\"js对象\"><a href=\"#js对象\" class=\"headerlink\" title=\"js对象\"></a>js对象</h2><hr>\n<h3 id=\"一切皆对象\"><a href=\"#一切皆对象\" class=\"headerlink\" title=\"一切皆对象\"></a>一切皆对象</h3><p>一切皆对象相信大家都很熟悉了吧。与其他面向对象语言不同的是，JS并没有Class的概念，在其他语言中，我们基本都需要实例化某个具体类的实例，但JS里却不同，它的做法是：任何函数都可以被实例化为一个对象。<br>JavaScript中的所有事物都是对象：字符串、数值、数组、函数…此外，JavaScript允许自定义对象。</p>\n<h3 id=\"javascript对象\"><a href=\"#javascript对象\" class=\"headerlink\" title=\"javascript对象\"></a>javascript对象</h3><p>JavaScript提供多个内建对象，比如 String、Date、Array等等。<br>对象只是带有属性和方法的特殊数据类型。</p>\n<ul>\n<li><p>访问对象的属性<br>属性是与对象相关的值。访问对象属性的语法是：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">objectName.propertyName</div></pre></td></tr></table></figure>\n</li>\n<li><p>访问对象的方法<br>方法是能够在对象上执行的动作。可以通过以下语法来调用方法：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">objectName.methodName()</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3 id=\"判断对象类型\"><a href=\"#判断对象类型\" class=\"headerlink\" title=\"判断对象类型\"></a>判断对象类型</h3><ul>\n<li>typeof运算符<ul>\n<li>typeof的返回值，主要有五种： undefined, boolean, number, string, object。</li>\n<li>对于typeof的返回值，容易混淆object和null，因为null在js中指的是一个空对象。</li>\n<li>使用typeof的一个不好的地方就是它会把Array还有用户自定义函数都返回为object。</li>\n</ul>\n</li>\n<li>instanceof运算符<ul>\n<li>instanceof也是一个运算符，运算过程中也需要一个参数(Object, Boolean, Number, String, Function)，判断某一个对象是否是所给的构造函数的一个实例，返回值是true或者false。</li>\n</ul>\n</li>\n<li>object.constructor<ul>\n<li>constructor属性返回对创建此对象的数组函数的引用。</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"创建对象的方法\"><a href=\"#创建对象的方法\" class=\"headerlink\" title=\"创建对象的方法\"></a>创建对象的方法</h3><ul>\n<li>使用内置对象<ul>\n<li>JavaScript语言原生对象（语言级对象），如String、Object、Function等； </li>\n<li>JavaScript运行期的宿主对象（环境宿主级对象），如window、document、body等。 </li>\n</ul>\n</li>\n<li><p>使用JSON符号 </p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;<span class=\"attr\">name</span>:<span class=\"string\">\"name\"</span>, <span class=\"attr\">key</span>:<span class=\"string\">\"value\"</span>&#125;</div></pre></td></tr></table></figure>\n</li>\n<li><p>自定义对象构造<br>方法很多，工厂方法、构造函数方法、原型方法、混合的构造函数/原型方法等。《javascript高级程序设计》里面讲得很详细，又或者大家可以上网自行谷哥。</p>\n<ul>\n<li>使用this关键字构造</li>\n<li>使用原型prototype构造</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h3><p><a href=\"http://www.w3school.com.cn/js/js_objects.asp\">《JavaScript 对象》</a></p>\n<h2 id=\"js执行环境\"><a href=\"#js执行环境\" class=\"headerlink\" title=\"js执行环境\"></a>js执行环境</h2><hr>\n<p>执行环境定义了变量和函数有权访问的其他数据，决定了他们各自的行为。</p>\n<h3 id=\"全局执行环境\"><a href=\"#全局执行环境\" class=\"headerlink\" title=\"全局执行环境\"></a>全局执行环境</h3><ul>\n<li>在一个页面中，第一次载入JS代码时创建一个全局执行环境，全局执行环境是最外围的执行环境</li>\n<li>在Web浏览器中，全局执行环境被认为是window对象<ul>\n<li>因此，所有的全局变量和函数都是作为window对象的属性和方法创建的。</li>\n<li>全局执行环境直到应用程序退出后—例如关闭浏览器和网页—时才被销毁。</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"函数执行环境\"><a href=\"#函数执行环境\" class=\"headerlink\" title=\"函数执行环境\"></a>函数执行环境</h3><ul>\n<li>ECMAScript程序中的执行流<ul>\n<li>每个函数都有自己的执行环境，当执行进入一个函数时，函数的执行环境就会被推入一个执行环境栈的顶部并获取执行权。</li>\n<li>当这个函数执行完毕，它的执行环境又从这个栈的顶部被删除，并把执行权并还给之前执行环境。</li>\n<li>该执行环境中的所有代码执行完毕后，该环境被销毁，保存在其中的所有变量和函数定义也随之销毁。</li>\n</ul>\n</li>\n<li>定义期<ul>\n<li>全局函数A创建了一个A的[[scope]]属性，包含全局[[scope]]</li>\n<li>函数A里定义函数B，则B的[[scope]]包含全局[[scope]]和A的[[scope]]</li>\n</ul>\n</li>\n<li>执行期<br>当函数被执行的时候，就是进入这个函数的执行环境，首先会创一个它自己的活动对象，包含<ul>\n<li>this</li>\n<li>参数(arguments，全局对象没有arguments)</li>\n<li>局部变量(包括命名的参数)</li>\n<li>一个变量对象的作用域链[[scope chain]]</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"作用域\"><a href=\"#作用域\" class=\"headerlink\" title=\"作用域\"></a>作用域</h3><ul>\n<li>没有块级作用域</li>\n<li>延长作用域链<ul>\n<li>try-catch语句的catch块</li>\n<li>with语句</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"参考-1\"><a href=\"#参考-1\" class=\"headerlink\" title=\"参考\"></a>参考</h3><p><a href=\"http://www.cnblogs.com/pigtail/archive/2012/07/19/2570988.html\">《javascript高级程序第三版学习笔记【执行环境、作用域】》</a></p>\n<h2 id=\"js的this\"><a href=\"#js的this\" class=\"headerlink\" title=\"js的this\"></a>js的this</h2><hr>\n<p>讲了那么多，终于来到本节的重点了。不过前面讲的也跟接下来的有关系的哦。</p>\n<h3 id=\"this指向什么\"><a href=\"#this指向什么\" class=\"headerlink\" title=\"this指向什么\"></a>this指向什么</h3><p>this指针代表的是执行当前代码的对象的所有者。即有以下两种：</p>\n<ul>\n<li>this指向全局变量</li>\n<li>this指向某个对象</li>\n</ul>\n<h3 id=\"this与全局变量\"><a href=\"#this与全局变量\" class=\"headerlink\" title=\"this与全局变量\"></a>this与全局变量</h3><p>我们来看以下代码（例1）：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> x;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">example</span>(<span class=\"params\">x</span>) </span>&#123; </div><div class=\"line\"> <span class=\"keyword\">this</span>.x = x; </div><div class=\"line\">&#125; </div><div class=\"line\">example(<span class=\"number\">5</span>); </div><div class=\"line\">alert(x); <span class=\"comment\">//5</span></div></pre></td></tr></table></figure></p>\n<p>在这里，x和函数example均是全局变量，因此它们的全局执行环境是window对象。所以在example中的this也是指向全局的window对象。</p>\n<h3 id=\"this与某个对象\"><a href=\"#this与某个对象\" class=\"headerlink\" title=\"this与某个对象\"></a>this与某个对象</h3><p>来看下面的代码（例2）<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> x;</div><div class=\"line\"><span class=\"keyword\">var</span> example = &#123;</div><div class=\"line\">  <span class=\"attr\">fun</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">x</span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>.x = x;</div><div class=\"line\">    alert(<span class=\"keyword\">this</span>.x); <span class=\"comment\">//5</span></div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;;</div><div class=\"line\">example.fun(<span class=\"number\">5</span>); </div><div class=\"line\">alert(x); <span class=\"comment\">//undefined</span></div><div class=\"line\">alert(<span class=\"keyword\">this</span>.x); <span class=\"comment\">//undefined</span></div></pre></td></tr></table></figure></p>\n<p>在这里，我们定义了一个example对象，同时给该对象添加了x属性和fun方法，因此在调用fun方法时其执行环境为example的fun函数，而this指向该函数的所有者为example对象。<br>故最后全局变量x并没有改变，仍然是undefined。</p>\n<p>当然上面我们也提到过，js对象的创建办法有几种，刚才的是通过json创建，我们还可以使用其它自定义对象构造方法。<br>（例3）：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//构造函数，就是通过这个函数生成一个新对象（object），this就指这个新对象</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">obj</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">  <span class=\"keyword\">this</span>.x = <span class=\"number\">5</span>;</div><div class=\"line\">  alert(<span class=\"keyword\">this</span>.x); <span class=\"comment\">//5</span></div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">var</span> example = <span class=\"keyword\">new</span> obj();</div><div class=\"line\">alert(example.x); <span class=\"comment\">//5</span></div><div class=\"line\">alert(<span class=\"keyword\">this</span>.x); <span class=\"comment\">//undefined</span></div></pre></td></tr></table></figure></p>\n<p>现在我们再看看下面的代码（例4）：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> x;</div><div class=\"line\"><span class=\"keyword\">var</span> example = &#123;</div><div class=\"line\">  <span class=\"attr\">fun</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">x</span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> fun2 = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">x</span>)</span>&#123;</div><div class=\"line\">      <span class=\"keyword\">this</span>.x = x;</div><div class=\"line\">      alert(<span class=\"keyword\">this</span>.x); <span class=\"comment\">//5</span></div><div class=\"line\">    &#125;;</div><div class=\"line\">    fun2(x);</div><div class=\"line\">    alert(<span class=\"keyword\">this</span>.x); <span class=\"comment\">//undefined</span></div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;;</div><div class=\"line\">example.fun(<span class=\"number\">5</span>); </div><div class=\"line\">alert(example.x); <span class=\"comment\">//undefined</span></div><div class=\"line\">alert(<span class=\"keyword\">this</span>.x); <span class=\"comment\">//5</span></div></pre></td></tr></table></figure></p>\n<p>当我们在对象的方法内定义新的函数，这时候该函数内的this绑定到全局window对象。是不是有点不可思议？<br>这也是我们在写代码过程中容易遇到的一些问题，这里补充一下函数的调用方法一起说明吧。</p>\n<h3 id=\"JavaScript中函数的调用方式\"><a href=\"#JavaScript中函数的调用方式\" class=\"headerlink\" title=\"JavaScript中函数的调用方式\"></a>JavaScript中函数的调用方式</h3><ul>\n<li>作为对象方法调用<ul>\n<li>在JavaScript中，函数也是对象，因此函数可以作为一个对象的属性。</li>\n<li>此时该函数被称为该对象的方法，在使用这种调用方式时，this被自然绑定到该对象。</li>\n</ul>\n</li>\n<li>作为函数调用<br>这是我们刚才遇到的现象（例4），也即函数作为函数调用。<ul>\n<li>函数也可以直接被调用，此时this绑定到全局对象。</li>\n<li>在浏览器中，window就是该全局对象。<br>我们可以使用下面变量替代的方法规避这一缺陷：<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> x;</div><div class=\"line\"><span class=\"keyword\">var</span> example = &#123;</div><div class=\"line\">  <span class=\"attr\">fun</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">x</span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> that = <span class=\"keyword\">this</span>;</div><div class=\"line\">    <span class=\"keyword\">var</span> fun2 = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">x</span>)</span>&#123;</div><div class=\"line\">      that.x = x;</div><div class=\"line\">      alert(<span class=\"keyword\">this</span>.x); <span class=\"comment\">//undefined</span></div><div class=\"line\">      alert(that.x); <span class=\"comment\">//5</span></div><div class=\"line\">    &#125;;</div><div class=\"line\">    fun2(x);</div><div class=\"line\">    alert(<span class=\"keyword\">this</span>.x); <span class=\"comment\">//5</span></div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;;</div><div class=\"line\">example.fun(<span class=\"number\">5</span>); </div><div class=\"line\">alert(example.x); <span class=\"comment\">//5</span></div><div class=\"line\">alert(<span class=\"keyword\">this</span>.x); <span class=\"comment\">//undefined</span></div></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n</ul>\n<p>同时，像setTimeout和setInterval这样的异步回调函数，经常也会遇到执行环境变更的问题，此时我们也可以使用该方法进行规避。</p>\n<ul>\n<li>作为构造函数调用（例3）<ul>\n<li>JavaScript并没有类（class）的概念，而是使用基于原型（prototype）的继承方式。</li>\n<li>JavaScript中的构造函数也很特殊，如果不使用new调用，则和普通函数一样。（例1）</li>\n</ul>\n</li>\n<li>使用apply或call调用<ul>\n<li>在JavaScript中函数也是对象，对象则有方法，apply和call就是函数对象的方法。</li>\n<li>这两个方法异常强大，他们允许切换函数执行的上下文环境（context），即this绑定的对象。<br>现在我们定义一个obj对象，并使它的一个方法等于全局函数：<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">example</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">  <span class=\"keyword\">this</span>.x = <span class=\"number\">5</span>;</div><div class=\"line\">  alert(<span class=\"keyword\">this</span>.x); <span class=\"comment\">//5</span></div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">var</span> obj = &#123;&#125;;</div><div class=\"line\">obj.x = <span class=\"number\">1</span>;</div><div class=\"line\">obj.fun = example;</div><div class=\"line\">alert(obj.x); <span class=\"comment\">//1</span></div><div class=\"line\">alert(<span class=\"keyword\">this</span>.x); <span class=\"comment\">//undefined</span></div></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n</ul>\n<p>1.此时我们直接调用该方法，会修改该对象的属性值。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">obj.fun();</div><div class=\"line\">alert(obj.x); <span class=\"comment\">//5</span></div><div class=\"line\">alert(<span class=\"keyword\">this</span>.x); <span class=\"comment\">//undefined</span></div></pre></td></tr></table></figure></p>\n<p>2.如果我们在该方法上进行apply，则会出现以下结果。说明apply()的参数为空时，默认调用全局对象。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">obj.fun.apply();</div><div class=\"line\">alert(obj.x); <span class=\"comment\">//1</span></div><div class=\"line\">alert(<span class=\"keyword\">this</span>.x); <span class=\"comment\">//5</span></div></pre></td></tr></table></figure></p>\n<p>3.我们给apply添加该对象作为参数。apply()的作用是改变函数的调用对象，它的第一个参数就表示改变后的调用这个函数的对象。。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">obj.fun.apply(obj);</div><div class=\"line\">alert(obj.x); <span class=\"comment\">//5</span></div><div class=\"line\">alert(<span class=\"keyword\">this</span>.x); <span class=\"comment\">//undefined</span></div></pre></td></tr></table></figure></p>\n<p>另外，call方法可以用来代替另一个对象调用一个方法。call方法可将一个函数的对象上下文从初始的上下文改变为由thisObj指定的新对象。</p>\n<ul>\n<li>apply和call两者在作用上是相同的，但两者在参数上有区别的：<ul>\n<li>对于第一个参数意义都一样</li>\n<li>对第二个参数：apply传入的是一个参数数组，也就是将多个参数组合成为一个数组传入，而call则作为call的参数传入（从第二个参数开始</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"return-this链式调用\"><a href=\"#return-this链式调用\" class=\"headerlink\" title=\"return this链式调用\"></a>return this链式调用</h3><p>最后我们回到最开始的问题，为什么要在代码中使用return this呢？<br>其实这是个链式调用的小技巧，我们只需要在对象的方法最后return this，就可以返回该对象，继续调用该对象的其它方法。看以下代码：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> x;</div><div class=\"line\"><span class=\"keyword\">var</span> example = &#123;</div><div class=\"line\">  <span class=\"attr\">fun1</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">x</span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>.x = x;</div><div class=\"line\">    alert(<span class=\"string\">\"fun1: \"</span> + <span class=\"keyword\">this</span>.x);</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>;</div><div class=\"line\">  &#125;,</div><div class=\"line\">  <span class=\"attr\">fun2</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>.x += <span class=\"number\">1</span>;</div><div class=\"line\">    alert(<span class=\"string\">\"fun2: \"</span> + <span class=\"keyword\">this</span>.x);</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;;</div><div class=\"line\">example.fun1(<span class=\"number\">5</span>).fun2().fun1(<span class=\"number\">2</span>).fun2(); <span class=\"comment\">//链式调用对象的方法</span></div><div class=\"line\"><span class=\"comment\">//fun1: 5</span></div><div class=\"line\"><span class=\"comment\">//fun2: 6</span></div><div class=\"line\"><span class=\"comment\">//fun1: 2</span></div><div class=\"line\"><span class=\"comment\">//fun2: 3</span></div><div class=\"line\">alert(example.x); <span class=\"comment\">//3</span></div><div class=\"line\">alert(<span class=\"keyword\">this</span>.x); <span class=\"comment\">//undefined</span></div></pre></td></tr></table></figure></p>\n<p>链式调用是个挺有趣的东西，本骚年当初也是在研究jQuery的源码的时候看到的呢。</p>\n<h3 id=\"参考-2\"><a href=\"#参考-2\" class=\"headerlink\" title=\"参考\"></a>参考</h3><p><a href=\"http://www.ibm.com/developerworks/cn/web/1207_wangqf_jsthis/\">《深入浅出JavaScript中的this》</a><br><a href=\"http://www.ruanyifeng.com/blog/2010/04/using_this_keyword_in_javascript.html\">《Javascript的this用法》</a></p>\n<h2 id=\"结束语\"><a href=\"#结束语\" class=\"headerlink\" title=\"结束语\"></a>结束语</h2><hr>\n<p>有些人觉得jQuery已经过时了，现在都流行像AngularJS/ReactJS/Backbone.js这些框架。<br>其实jQuery只是个库，它帮我们解决了很多兼容问题，也简化了js代码，跟框架不一样。而且本骚年认为jQuery库还是有很多精华的逻辑和思维呢，这些是永远都不会过时的呀。</p>"},{"title":"jQuery插件--图片居中对齐","date":"2016-06-21T12:41:05.000Z","_content":"需要将不同尺寸的图片居中放置时，可使用该jQuery插件。本文介绍实现方法。\n<!--more-->\n\n代码放在github上，有兴趣的小伙伴可以下载看\n[picture-align](https://github.com/godbasin/godbasin.github.io/tree/blog-codes/picture-align)\n\n最终效果图如下[点击查看页面](http://o92lwol8p.bkt.clouddn.com/index.html)\n![image](http://o905ne85q.bkt.clouddn.com/picture-align.png)\n\n## 插件介绍\n-----\n### 使用方法\n- html\n``` html\n<!--img元素外层裹一层div-->\n<div class=\"fill\">\n\t<img src=\"img/2.png\" />\n</div>\n```\n- js\n``` javascript\n//使用jQuery获取需要的外层容器\n$(\".fill\").bsPictureAlign({\n\t\"img_dom\": \".img\", //img的class/id/其他属性，为0则选中该容器内所有img（tagName === \"img\"）图片\n\t\"style\": \"fill\", //两种style：full为最短边对齐，过长剪裁；fill为最长边对齐，填充背景\n\t\"width\": \"100%\", //容器宽度，默认为100%\n\t\"height\": \"300px\", //容器高度，默认为300px\n\t\"background\": \"#000\" //背景填充颜色，默认为#000黑色\n});\n```\n### 插件封装方法\n- 使用jQuery拓展属性$.fn.xxx来进行封装\n- 这里有超详细教程[《jQuery插件开发精品教程，让你的jQuery提升一个台阶》](http://www.cnblogs.com/Wayou/p/jquery_plugin_tutorial.html)\n\n## 图片居中原理\n-----\n- 使用img.load()确保图片加载完成，此时可精确图片比例\n- 获取图片宽高比例，与容器比例进行比较\n\n### 最短边对齐，过长隐藏：full方法\n- 容器宽高比大于图片时，图片高度100%，宽度按比例缩放按比例缩放\n- 容器宽高比小于图片时，图片宽度100%，高度按比例缩放按比例缩放\n- 使用绝对定位将容器内图片居中\n- 设置容器overflow: hidden;隐藏图片过长部分\n\n### 最长边对齐，填充背景：fill方法\n- 容器宽高比大于图片时，图片宽度100%，高度按比例缩放\n- 容器宽高比小于图片时，图片高度100%，宽度按比例缩放\n- 使用绝对定位将容器内图片居中\n- 设置容器background，填充背景\n\n## 待完善的地方\n-----\n- 需要在图片加载完之后回调，可自行增加回调函数\n- 去到哪里都别忘了优化代码哦\n\n## 插件代码\n-----\n请别叫我下划线狂魔^_^\n``` javascript\n;\n(function($, window, document, undefined) {\n\t$.fn.bsPictureAlign = function(options) {\n\t\tvar num = this.length,\n\t\t\tloadnum = 0;\n\t\t//若为多个容器，分别初始化每个容器\n\t\tfor (i = 0; i < this.length; i++) {\n\t\t\tvar _this = this[i];\n\t\t\t//创建bsPictureAlign实体\n\t\t\tvar bsPictureAlign = new BsPictureAlign(_this, options);\n\t\t\t//调用其方法\n\t\t\tif (options.style == \"full\") bsPictureAlign.full();\n\t\t\tif (options.style == \"fill\") bsPictureAlign.fill({\n\t\t\t\t//这里增加了回调函数，确保所有图片处理完毕后进行回调\n\t\t\t\tcallback: function() {\n\t\t\t\t\tloadnum++;\n\t\t\t\t\tif (num == loadnum && options.loadover) {\n\t\t\t\t\t\toptions.loadover();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t};\n\t//定义原型\n\tvar BsPictureAlign = function(ele, opt) {\n\t\tthis.$ele = ele;\n\t\t//若无定义宽高背景，使用默认值\n\t\t\tthis.defaults = {\n\t\t\t\t\"width\": \"100%\",\n\t\t\t\t\"height\": \"300px\",\n\t\t\t\t\"background\": \"#000\"\n\t\t\t};\n\t\t\tthis.options = $.extend({}, this.defaults, opt);\n\t};\n\tBsPictureAlign.prototype = {\n\t\t//定义fill方法\n\t\tfill: function(opc) {\n\t\t\tvar that = this,\n\t\t\t\t_options = that.options,\n\t\t\t\t_ele = $(this.$ele),\n\t\t\t\t_dom = _options.img_dom,\n\t\t\t\t_img = _dom ? _ele.find(_dom) : _ele.find(\"img\"),\n\t\t\t\t_this, _width, _height, _ratio, _w, _h, _r, _wider;\n\t\t\t//修改图片容器宽高\n\t\t\t_ele.css({\n\t\t\t\t\"width\": _options.width,\n\t\t\t\t\"height\": _options.height,\n\t\t\t\t\"overflow\": \"hidden\",\n\t\t\t\t\"background\": _options.background,\n\t\t\t\t\"position\": \"relative\"\n\t\t\t});\n\t\t\t//容器比例\n\t\t\t_width = _ele.width();\n\t\t\t_height = _ele.height();\n\t\t\t_ratio = _width / _height;\n\t\t\t//每张所选图片进行处理\n\t\t\t_img.each(function() {\n\t\t\t\t_this = $(this);\n\t\t\t\t//此处可选，用来保证图片加载完之前不可见\n\t\t\t\t_this.css({\n\t\t\t\t\t'opacity': 0,\n\t\t\t\t});\n\t\t\t\t//此处确保图片加载完毕\n\t\t\t\t_this.load(function() {\n\t\t\t\t\t_w = _this.width();\n\t\t\t\t\t_h = _this.height();\n\t\t\t\t\t_r = _w / _h;\n\t\t\t\t\t_wider = _r > _ratio ? true : false;\n\t\t\t\t\t//容器宽高比小于图片时，图片高度100%，宽度按比例缩放\n\t\t\t\t\tif (_wider) {\n\t\t\t\t\t\t_this.css({\n\t\t\t\t\t\t\t\"width\": \"100%\",\n\t\t\t\t\t\t\t\"height\": \"auto\"\n\t\t\t\t\t\t});\n\t\t\t\t\t\tvar _top = (_height - _this.height()) / 2;\n\t\t\t\t\t\t_this.css({\n\t\t\t\t\t\t\t\"position\": \"absolute\",\n\t\t\t\t\t\t\t\"top\": _top + \"px\",\n\t\t\t\t\t\t\t\"left\": 0\n\t\t\t\t\t\t});\n\t\t\t\t\t//容器宽高比大于图片时，图片宽度100%，高度按比例缩放\n\t\t\t\t\t} else {\n\t\t\t\t\t\t_this.css({\n\t\t\t\t\t\t\t\"width\": \"auto\",\n\t\t\t\t\t\t\t\"height\": \"100%\"\n\t\t\t\t\t\t});\n\t\t\t\t\t\tvar _left = (_width - _this.width()) / 2;\n\t\t\t\t\t\t_this.css({\n\t\t\t\t\t\t\t\"position\": \"absolute\",\n\t\t\t\t\t\t\t\"top\": 0,\n\t\t\t\t\t\t\t\"left\": _left + \"px\"\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\t\t\t\t_this.css({\n\t\t\t\t\t\t'opacity': 1,\n\t\t\t\t\t});\n\t\t\t\t\tif (opc.callback) opc.callback();\n\t\t\t\t});\n\t\t\t\t//此处图片加载失败处理\n\t\t\t\t_this.error(function() {\n\t\t\t\t\tif (opc.callback) opc.callback();\n\t\t\t\t\t_this.css({\n\t\t\t\t\t\t'opacity': 1,\n\t\t\t\t\t});\n\t\t\t\t});\n\t\t\t});\n\t\t\t//链式回调\n\t\t\treturn this;\n\t\t},\n\t\t//定义full方法\n\t\tfull: function() {\n\t\t\tvar that = this,\n\t\t\t\t_options = that.options,\n\t\t\t\t_ele = $(this.$ele),\n\t\t\t\t_img = _ele.find(\"img\"),\n\t\t\t\t_this, _width, _height, _ratio, _w, _h, _r, _wider;\n\t\t\t//修改图片外壳宽高\n\t\t\t_ele.css({\n\t\t\t\t\"width\": _options.width,\n\t\t\t\t\"height\": _options.height,\n\t\t\t\t\"overflow\": \"hidden\",\n\t\t\t\t\"background\": \"#000\",\n\t\t\t\t\"position\": \"relative\"\n\t\t\t});\n\t\t\t//容器比例\n\t\t\t_width = _ele.width();\n\t\t\t_height = _ele.height();\n\t\t\t_ratio = _width / _height;\n\t\t\t//每张所选图片进行处理\n\t\t\t_img.each(function() {\n\t\t\t\t_this = $(this);\n\t\t\t\t//此处确保图片加载完毕\n\t\t\t\t_this.load(function() {\n\t\t\t\t\t_w = _this.width();\n\t\t\t\t\t_h = _this.height();\n\t\t\t\t\t_r = _w / _h;\n\t\t\t\t\t_wider = _r > _ratio ? true : false;\n\t\t\t\t\t//容器宽高比大于图片时，图片高度100%，宽度按比例缩放按比例缩放\n\t\t\t\t\tif (_wider) {\n\t\t\t\t\t\t_this.css({\n\t\t\t\t\t\t\t\"width\": \"auto\",\n\t\t\t\t\t\t\t\"height\": \"100%\"\n\t\t\t\t\t\t});\n\t\t\t\t\t\tvar _left = (_width - _this.width()) / 2;\n\t\t\t\t\t\t_this.css({\n\t\t\t\t\t\t\t\"position\": \"absolute\",\n\t\t\t\t\t\t\t\"top\": 0,\n\t\t\t\t\t\t\t\"left\": _left + \"px\"\n\t\t\t\t\t\t});\n\t\t\t\t\t//容器宽高比小于图片时，图片宽度100%，高度按比例缩放按比例缩放\n\t\t\t\t\t} else {\n\t\t\t\t\t\t_this.css({\n\t\t\t\t\t\t\t\"width\": \"100%\",\n\t\t\t\t\t\t\t\"height\": \"auto\"\n\t\t\t\t\t\t});\n\t\t\t\t\t\tvar _top = (_height - _this.height()) / 2;\n\t\t\t\t\t\t_this.css({\n\t\t\t\t\t\t\t\"position\": \"absolute\",\n\t\t\t\t\t\t\t\"top\": _top + \"px\",\n\t\t\t\t\t\t\t\"left\": 0\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t});\n\t\t\t//链式回调\n\t\t\treturn this;\n\t\t},\n\t}\n})(jQuery, window, document);\n```\n\n## 结束语\n-----\n插件封装也是个有趣的事情哦，当然有兴趣也可以将逻辑封装成原生js插件哒。","source":"_posts/picture-align.md","raw":"---\ntitle: jQuery插件--图片居中对齐\ndate: 2016-06-21 20:41:05\ncategories: jQuery杂烩\ntags: 自制插件\n---\n需要将不同尺寸的图片居中放置时，可使用该jQuery插件。本文介绍实现方法。\n<!--more-->\n\n代码放在github上，有兴趣的小伙伴可以下载看\n[picture-align](https://github.com/godbasin/godbasin.github.io/tree/blog-codes/picture-align)\n\n最终效果图如下[点击查看页面](http://o92lwol8p.bkt.clouddn.com/index.html)\n![image](http://o905ne85q.bkt.clouddn.com/picture-align.png)\n\n## 插件介绍\n-----\n### 使用方法\n- html\n``` html\n<!--img元素外层裹一层div-->\n<div class=\"fill\">\n\t<img src=\"img/2.png\" />\n</div>\n```\n- js\n``` javascript\n//使用jQuery获取需要的外层容器\n$(\".fill\").bsPictureAlign({\n\t\"img_dom\": \".img\", //img的class/id/其他属性，为0则选中该容器内所有img（tagName === \"img\"）图片\n\t\"style\": \"fill\", //两种style：full为最短边对齐，过长剪裁；fill为最长边对齐，填充背景\n\t\"width\": \"100%\", //容器宽度，默认为100%\n\t\"height\": \"300px\", //容器高度，默认为300px\n\t\"background\": \"#000\" //背景填充颜色，默认为#000黑色\n});\n```\n### 插件封装方法\n- 使用jQuery拓展属性$.fn.xxx来进行封装\n- 这里有超详细教程[《jQuery插件开发精品教程，让你的jQuery提升一个台阶》](http://www.cnblogs.com/Wayou/p/jquery_plugin_tutorial.html)\n\n## 图片居中原理\n-----\n- 使用img.load()确保图片加载完成，此时可精确图片比例\n- 获取图片宽高比例，与容器比例进行比较\n\n### 最短边对齐，过长隐藏：full方法\n- 容器宽高比大于图片时，图片高度100%，宽度按比例缩放按比例缩放\n- 容器宽高比小于图片时，图片宽度100%，高度按比例缩放按比例缩放\n- 使用绝对定位将容器内图片居中\n- 设置容器overflow: hidden;隐藏图片过长部分\n\n### 最长边对齐，填充背景：fill方法\n- 容器宽高比大于图片时，图片宽度100%，高度按比例缩放\n- 容器宽高比小于图片时，图片高度100%，宽度按比例缩放\n- 使用绝对定位将容器内图片居中\n- 设置容器background，填充背景\n\n## 待完善的地方\n-----\n- 需要在图片加载完之后回调，可自行增加回调函数\n- 去到哪里都别忘了优化代码哦\n\n## 插件代码\n-----\n请别叫我下划线狂魔^_^\n``` javascript\n;\n(function($, window, document, undefined) {\n\t$.fn.bsPictureAlign = function(options) {\n\t\tvar num = this.length,\n\t\t\tloadnum = 0;\n\t\t//若为多个容器，分别初始化每个容器\n\t\tfor (i = 0; i < this.length; i++) {\n\t\t\tvar _this = this[i];\n\t\t\t//创建bsPictureAlign实体\n\t\t\tvar bsPictureAlign = new BsPictureAlign(_this, options);\n\t\t\t//调用其方法\n\t\t\tif (options.style == \"full\") bsPictureAlign.full();\n\t\t\tif (options.style == \"fill\") bsPictureAlign.fill({\n\t\t\t\t//这里增加了回调函数，确保所有图片处理完毕后进行回调\n\t\t\t\tcallback: function() {\n\t\t\t\t\tloadnum++;\n\t\t\t\t\tif (num == loadnum && options.loadover) {\n\t\t\t\t\t\toptions.loadover();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t};\n\t//定义原型\n\tvar BsPictureAlign = function(ele, opt) {\n\t\tthis.$ele = ele;\n\t\t//若无定义宽高背景，使用默认值\n\t\t\tthis.defaults = {\n\t\t\t\t\"width\": \"100%\",\n\t\t\t\t\"height\": \"300px\",\n\t\t\t\t\"background\": \"#000\"\n\t\t\t};\n\t\t\tthis.options = $.extend({}, this.defaults, opt);\n\t};\n\tBsPictureAlign.prototype = {\n\t\t//定义fill方法\n\t\tfill: function(opc) {\n\t\t\tvar that = this,\n\t\t\t\t_options = that.options,\n\t\t\t\t_ele = $(this.$ele),\n\t\t\t\t_dom = _options.img_dom,\n\t\t\t\t_img = _dom ? _ele.find(_dom) : _ele.find(\"img\"),\n\t\t\t\t_this, _width, _height, _ratio, _w, _h, _r, _wider;\n\t\t\t//修改图片容器宽高\n\t\t\t_ele.css({\n\t\t\t\t\"width\": _options.width,\n\t\t\t\t\"height\": _options.height,\n\t\t\t\t\"overflow\": \"hidden\",\n\t\t\t\t\"background\": _options.background,\n\t\t\t\t\"position\": \"relative\"\n\t\t\t});\n\t\t\t//容器比例\n\t\t\t_width = _ele.width();\n\t\t\t_height = _ele.height();\n\t\t\t_ratio = _width / _height;\n\t\t\t//每张所选图片进行处理\n\t\t\t_img.each(function() {\n\t\t\t\t_this = $(this);\n\t\t\t\t//此处可选，用来保证图片加载完之前不可见\n\t\t\t\t_this.css({\n\t\t\t\t\t'opacity': 0,\n\t\t\t\t});\n\t\t\t\t//此处确保图片加载完毕\n\t\t\t\t_this.load(function() {\n\t\t\t\t\t_w = _this.width();\n\t\t\t\t\t_h = _this.height();\n\t\t\t\t\t_r = _w / _h;\n\t\t\t\t\t_wider = _r > _ratio ? true : false;\n\t\t\t\t\t//容器宽高比小于图片时，图片高度100%，宽度按比例缩放\n\t\t\t\t\tif (_wider) {\n\t\t\t\t\t\t_this.css({\n\t\t\t\t\t\t\t\"width\": \"100%\",\n\t\t\t\t\t\t\t\"height\": \"auto\"\n\t\t\t\t\t\t});\n\t\t\t\t\t\tvar _top = (_height - _this.height()) / 2;\n\t\t\t\t\t\t_this.css({\n\t\t\t\t\t\t\t\"position\": \"absolute\",\n\t\t\t\t\t\t\t\"top\": _top + \"px\",\n\t\t\t\t\t\t\t\"left\": 0\n\t\t\t\t\t\t});\n\t\t\t\t\t//容器宽高比大于图片时，图片宽度100%，高度按比例缩放\n\t\t\t\t\t} else {\n\t\t\t\t\t\t_this.css({\n\t\t\t\t\t\t\t\"width\": \"auto\",\n\t\t\t\t\t\t\t\"height\": \"100%\"\n\t\t\t\t\t\t});\n\t\t\t\t\t\tvar _left = (_width - _this.width()) / 2;\n\t\t\t\t\t\t_this.css({\n\t\t\t\t\t\t\t\"position\": \"absolute\",\n\t\t\t\t\t\t\t\"top\": 0,\n\t\t\t\t\t\t\t\"left\": _left + \"px\"\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\t\t\t\t_this.css({\n\t\t\t\t\t\t'opacity': 1,\n\t\t\t\t\t});\n\t\t\t\t\tif (opc.callback) opc.callback();\n\t\t\t\t});\n\t\t\t\t//此处图片加载失败处理\n\t\t\t\t_this.error(function() {\n\t\t\t\t\tif (opc.callback) opc.callback();\n\t\t\t\t\t_this.css({\n\t\t\t\t\t\t'opacity': 1,\n\t\t\t\t\t});\n\t\t\t\t});\n\t\t\t});\n\t\t\t//链式回调\n\t\t\treturn this;\n\t\t},\n\t\t//定义full方法\n\t\tfull: function() {\n\t\t\tvar that = this,\n\t\t\t\t_options = that.options,\n\t\t\t\t_ele = $(this.$ele),\n\t\t\t\t_img = _ele.find(\"img\"),\n\t\t\t\t_this, _width, _height, _ratio, _w, _h, _r, _wider;\n\t\t\t//修改图片外壳宽高\n\t\t\t_ele.css({\n\t\t\t\t\"width\": _options.width,\n\t\t\t\t\"height\": _options.height,\n\t\t\t\t\"overflow\": \"hidden\",\n\t\t\t\t\"background\": \"#000\",\n\t\t\t\t\"position\": \"relative\"\n\t\t\t});\n\t\t\t//容器比例\n\t\t\t_width = _ele.width();\n\t\t\t_height = _ele.height();\n\t\t\t_ratio = _width / _height;\n\t\t\t//每张所选图片进行处理\n\t\t\t_img.each(function() {\n\t\t\t\t_this = $(this);\n\t\t\t\t//此处确保图片加载完毕\n\t\t\t\t_this.load(function() {\n\t\t\t\t\t_w = _this.width();\n\t\t\t\t\t_h = _this.height();\n\t\t\t\t\t_r = _w / _h;\n\t\t\t\t\t_wider = _r > _ratio ? true : false;\n\t\t\t\t\t//容器宽高比大于图片时，图片高度100%，宽度按比例缩放按比例缩放\n\t\t\t\t\tif (_wider) {\n\t\t\t\t\t\t_this.css({\n\t\t\t\t\t\t\t\"width\": \"auto\",\n\t\t\t\t\t\t\t\"height\": \"100%\"\n\t\t\t\t\t\t});\n\t\t\t\t\t\tvar _left = (_width - _this.width()) / 2;\n\t\t\t\t\t\t_this.css({\n\t\t\t\t\t\t\t\"position\": \"absolute\",\n\t\t\t\t\t\t\t\"top\": 0,\n\t\t\t\t\t\t\t\"left\": _left + \"px\"\n\t\t\t\t\t\t});\n\t\t\t\t\t//容器宽高比小于图片时，图片宽度100%，高度按比例缩放按比例缩放\n\t\t\t\t\t} else {\n\t\t\t\t\t\t_this.css({\n\t\t\t\t\t\t\t\"width\": \"100%\",\n\t\t\t\t\t\t\t\"height\": \"auto\"\n\t\t\t\t\t\t});\n\t\t\t\t\t\tvar _top = (_height - _this.height()) / 2;\n\t\t\t\t\t\t_this.css({\n\t\t\t\t\t\t\t\"position\": \"absolute\",\n\t\t\t\t\t\t\t\"top\": _top + \"px\",\n\t\t\t\t\t\t\t\"left\": 0\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t});\n\t\t\t//链式回调\n\t\t\treturn this;\n\t\t},\n\t}\n})(jQuery, window, document);\n```\n\n## 结束语\n-----\n插件封装也是个有趣的事情哦，当然有兴趣也可以将逻辑封装成原生js插件哒。","slug":"picture-align","published":1,"updated":"2016-08-20T10:54:21.090Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cix45huh0003axotu3gvc7wmf","content":"<p>需要将不同尺寸的图片居中放置时，可使用该jQuery插件。本文介绍实现方法。<br><a id=\"more\"></a></p>\n<p>代码放在github上，有兴趣的小伙伴可以下载看<br><a href=\"https://github.com/godbasin/godbasin.github.io/tree/blog-codes/picture-align\" target=\"_blank\" rel=\"external\">picture-align</a></p>\n<p>最终效果图如下<a href=\"http://o92lwol8p.bkt.clouddn.com/index.html\" target=\"_blank\" rel=\"external\">点击查看页面</a><br><img src=\"http://o905ne85q.bkt.clouddn.com/picture-align.png\" alt=\"image\"></p>\n<h2 id=\"插件介绍\"><a href=\"#插件介绍\" class=\"headerlink\" title=\"插件介绍\"></a>插件介绍</h2><hr>\n<h3 id=\"使用方法\"><a href=\"#使用方法\" class=\"headerlink\" title=\"使用方法\"></a>使用方法</h3><ul>\n<li><p>html</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">&lt;!--img元素外层裹一层div--&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"fill\"</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">src</span>=<span class=\"string\">\"img/2.png\"</span> /&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div></pre></td></tr></table></figure>\n</li>\n<li><p>js</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//使用jQuery获取需要的外层容器</span></div><div class=\"line\">$(<span class=\"string\">\".fill\"</span>).bsPictureAlign(&#123;</div><div class=\"line\">  <span class=\"string\">\"img_dom\"</span>: <span class=\"string\">\".img\"</span>, <span class=\"comment\">//img的class/id/其他属性，为0则选中该容器内所有img（tagName === \"img\"）图片</span></div><div class=\"line\">  <span class=\"string\">\"style\"</span>: <span class=\"string\">\"fill\"</span>, <span class=\"comment\">//两种style：full为最短边对齐，过长剪裁；fill为最长边对齐，填充背景</span></div><div class=\"line\">  <span class=\"string\">\"width\"</span>: <span class=\"string\">\"100%\"</span>, <span class=\"comment\">//容器宽度，默认为100%</span></div><div class=\"line\">  <span class=\"string\">\"height\"</span>: <span class=\"string\">\"300px\"</span>, <span class=\"comment\">//容器高度，默认为300px</span></div><div class=\"line\">  <span class=\"string\">\"background\"</span>: <span class=\"string\">\"#000\"</span> <span class=\"comment\">//背景填充颜色，默认为#000黑色</span></div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3 id=\"插件封装方法\"><a href=\"#插件封装方法\" class=\"headerlink\" title=\"插件封装方法\"></a>插件封装方法</h3><ul>\n<li>使用jQuery拓展属性$.fn.xxx来进行封装</li>\n<li>这里有超详细教程<a href=\"http://www.cnblogs.com/Wayou/p/jquery_plugin_tutorial.html\" target=\"_blank\" rel=\"external\">《jQuery插件开发精品教程，让你的jQuery提升一个台阶》</a></li>\n</ul>\n<h2 id=\"图片居中原理\"><a href=\"#图片居中原理\" class=\"headerlink\" title=\"图片居中原理\"></a>图片居中原理</h2><hr>\n<ul>\n<li>使用img.load()确保图片加载完成，此时可精确图片比例</li>\n<li>获取图片宽高比例，与容器比例进行比较</li>\n</ul>\n<h3 id=\"最短边对齐，过长隐藏：full方法\"><a href=\"#最短边对齐，过长隐藏：full方法\" class=\"headerlink\" title=\"最短边对齐，过长隐藏：full方法\"></a>最短边对齐，过长隐藏：full方法</h3><ul>\n<li>容器宽高比大于图片时，图片高度100%，宽度按比例缩放按比例缩放</li>\n<li>容器宽高比小于图片时，图片宽度100%，高度按比例缩放按比例缩放</li>\n<li>使用绝对定位将容器内图片居中</li>\n<li>设置容器overflow: hidden;隐藏图片过长部分</li>\n</ul>\n<h3 id=\"最长边对齐，填充背景：fill方法\"><a href=\"#最长边对齐，填充背景：fill方法\" class=\"headerlink\" title=\"最长边对齐，填充背景：fill方法\"></a>最长边对齐，填充背景：fill方法</h3><ul>\n<li>容器宽高比大于图片时，图片宽度100%，高度按比例缩放</li>\n<li>容器宽高比小于图片时，图片高度100%，宽度按比例缩放</li>\n<li>使用绝对定位将容器内图片居中</li>\n<li>设置容器background，填充背景</li>\n</ul>\n<h2 id=\"待完善的地方\"><a href=\"#待完善的地方\" class=\"headerlink\" title=\"待完善的地方\"></a>待完善的地方</h2><hr>\n<ul>\n<li>需要在图片加载完之后回调，可自行增加回调函数</li>\n<li>去到哪里都别忘了优化代码哦</li>\n</ul>\n<h2 id=\"插件代码\"><a href=\"#插件代码\" class=\"headerlink\" title=\"插件代码\"></a>插件代码</h2><hr>\n<p>请别叫我下划线狂魔^_^<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div><div class=\"line\">104</div><div class=\"line\">105</div><div class=\"line\">106</div><div class=\"line\">107</div><div class=\"line\">108</div><div class=\"line\">109</div><div class=\"line\">110</div><div class=\"line\">111</div><div class=\"line\">112</div><div class=\"line\">113</div><div class=\"line\">114</div><div class=\"line\">115</div><div class=\"line\">116</div><div class=\"line\">117</div><div class=\"line\">118</div><div class=\"line\">119</div><div class=\"line\">120</div><div class=\"line\">121</div><div class=\"line\">122</div><div class=\"line\">123</div><div class=\"line\">124</div><div class=\"line\">125</div><div class=\"line\">126</div><div class=\"line\">127</div><div class=\"line\">128</div><div class=\"line\">129</div><div class=\"line\">130</div><div class=\"line\">131</div><div class=\"line\">132</div><div class=\"line\">133</div><div class=\"line\">134</div><div class=\"line\">135</div><div class=\"line\">136</div><div class=\"line\">137</div><div class=\"line\">138</div><div class=\"line\">139</div><div class=\"line\">140</div><div class=\"line\">141</div><div class=\"line\">142</div><div class=\"line\">143</div><div class=\"line\">144</div><div class=\"line\">145</div><div class=\"line\">146</div><div class=\"line\">147</div><div class=\"line\">148</div><div class=\"line\">149</div><div class=\"line\">150</div><div class=\"line\">151</div><div class=\"line\">152</div><div class=\"line\">153</div><div class=\"line\">154</div><div class=\"line\">155</div><div class=\"line\">156</div><div class=\"line\">157</div><div class=\"line\">158</div><div class=\"line\">159</div><div class=\"line\">160</div><div class=\"line\">161</div><div class=\"line\">162</div><div class=\"line\">163</div><div class=\"line\">164</div><div class=\"line\">165</div><div class=\"line\">166</div><div class=\"line\">167</div><div class=\"line\">168</div><div class=\"line\">169</div></pre></td><td class=\"code\"><pre><div class=\"line\">;</div><div class=\"line\">(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">$, window, document, undefined</span>) </span>&#123;</div><div class=\"line\">  $.fn.bsPictureAlign = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">options</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> num = <span class=\"keyword\">this</span>.length,</div><div class=\"line\">      loadnum = <span class=\"number\">0</span>;</div><div class=\"line\">    <span class=\"comment\">//若为多个容器，分别初始化每个容器</span></div><div class=\"line\">    <span class=\"keyword\">for</span> (i = <span class=\"number\">0</span>; i &lt; <span class=\"keyword\">this</span>.length; i++) &#123;</div><div class=\"line\">      <span class=\"keyword\">var</span> _this = <span class=\"keyword\">this</span>[i];</div><div class=\"line\">      <span class=\"comment\">//创建bsPictureAlign实体</span></div><div class=\"line\">      <span class=\"keyword\">var</span> bsPictureAlign = <span class=\"keyword\">new</span> BsPictureAlign(_this, options);</div><div class=\"line\">      <span class=\"comment\">//调用其方法</span></div><div class=\"line\">      <span class=\"keyword\">if</span> (options.style == <span class=\"string\">\"full\"</span>) bsPictureAlign.full();</div><div class=\"line\">      <span class=\"keyword\">if</span> (options.style == <span class=\"string\">\"fill\"</span>) bsPictureAlign.fill(&#123;</div><div class=\"line\">        <span class=\"comment\">//这里增加了回调函数，确保所有图片处理完毕后进行回调</span></div><div class=\"line\">        callback: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">          loadnum++;</div><div class=\"line\">          <span class=\"keyword\">if</span> (num == loadnum &amp;&amp; options.loadover) &#123;</div><div class=\"line\">            options.loadover();</div><div class=\"line\">          &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">      &#125;);</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;;</div><div class=\"line\">  <span class=\"comment\">//定义原型</span></div><div class=\"line\">  <span class=\"keyword\">var</span> BsPictureAlign = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">ele, opt</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>.$ele = ele;</div><div class=\"line\">    <span class=\"comment\">//若无定义宽高背景，使用默认值</span></div><div class=\"line\">      <span class=\"keyword\">this</span>.defaults = &#123;</div><div class=\"line\">        <span class=\"string\">\"width\"</span>: <span class=\"string\">\"100%\"</span>,</div><div class=\"line\">        <span class=\"string\">\"height\"</span>: <span class=\"string\">\"300px\"</span>,</div><div class=\"line\">        <span class=\"string\">\"background\"</span>: <span class=\"string\">\"#000\"</span></div><div class=\"line\">      &#125;;</div><div class=\"line\">      <span class=\"keyword\">this</span>.options = $.extend(&#123;&#125;, <span class=\"keyword\">this</span>.defaults, opt);</div><div class=\"line\">  &#125;;</div><div class=\"line\">  BsPictureAlign.prototype = &#123;</div><div class=\"line\">    <span class=\"comment\">//定义fill方法</span></div><div class=\"line\">    fill: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">opc</span>) </span>&#123;</div><div class=\"line\">      <span class=\"keyword\">var</span> that = <span class=\"keyword\">this</span>,</div><div class=\"line\">        _options = that.options,</div><div class=\"line\">        _ele = $(<span class=\"keyword\">this</span>.$ele),</div><div class=\"line\">        _dom = _options.img_dom,</div><div class=\"line\">        _img = _dom ? _ele.find(_dom) : _ele.find(<span class=\"string\">\"img\"</span>),</div><div class=\"line\">        _this, _width, _height, _ratio, _w, _h, _r, _wider;</div><div class=\"line\">      <span class=\"comment\">//修改图片容器宽高</span></div><div class=\"line\">      _ele.css(&#123;</div><div class=\"line\">        <span class=\"string\">\"width\"</span>: _options.width,</div><div class=\"line\">        <span class=\"string\">\"height\"</span>: _options.height,</div><div class=\"line\">        <span class=\"string\">\"overflow\"</span>: <span class=\"string\">\"hidden\"</span>,</div><div class=\"line\">        <span class=\"string\">\"background\"</span>: _options.background,</div><div class=\"line\">        <span class=\"string\">\"position\"</span>: <span class=\"string\">\"relative\"</span></div><div class=\"line\">      &#125;);</div><div class=\"line\">      <span class=\"comment\">//容器比例</span></div><div class=\"line\">      _width = _ele.width();</div><div class=\"line\">      _height = _ele.height();</div><div class=\"line\">      _ratio = _width / _height;</div><div class=\"line\">      <span class=\"comment\">//每张所选图片进行处理</span></div><div class=\"line\">      _img.each(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">        _this = $(<span class=\"keyword\">this</span>);</div><div class=\"line\">        <span class=\"comment\">//此处可选，用来保证图片加载完之前不可见</span></div><div class=\"line\">        _this.css(&#123;</div><div class=\"line\">          <span class=\"string\">'opacity'</span>: <span class=\"number\">0</span>,</div><div class=\"line\">        &#125;);</div><div class=\"line\">        <span class=\"comment\">//此处确保图片加载完毕</span></div><div class=\"line\">        _this.load(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">          _w = _this.width();</div><div class=\"line\">          _h = _this.height();</div><div class=\"line\">          _r = _w / _h;</div><div class=\"line\">          _wider = _r &gt; _ratio ? <span class=\"literal\">true</span> : <span class=\"literal\">false</span>;</div><div class=\"line\">          <span class=\"comment\">//容器宽高比小于图片时，图片高度100%，宽度按比例缩放</span></div><div class=\"line\">          <span class=\"keyword\">if</span> (_wider) &#123;</div><div class=\"line\">            _this.css(&#123;</div><div class=\"line\">              <span class=\"string\">\"width\"</span>: <span class=\"string\">\"100%\"</span>,</div><div class=\"line\">              <span class=\"string\">\"height\"</span>: <span class=\"string\">\"auto\"</span></div><div class=\"line\">            &#125;);</div><div class=\"line\">            <span class=\"keyword\">var</span> _top = (_height - _this.height()) / <span class=\"number\">2</span>;</div><div class=\"line\">            _this.css(&#123;</div><div class=\"line\">              <span class=\"string\">\"position\"</span>: <span class=\"string\">\"absolute\"</span>,</div><div class=\"line\">              <span class=\"string\">\"top\"</span>: _top + <span class=\"string\">\"px\"</span>,</div><div class=\"line\">              <span class=\"string\">\"left\"</span>: <span class=\"number\">0</span></div><div class=\"line\">            &#125;);</div><div class=\"line\">          <span class=\"comment\">//容器宽高比大于图片时，图片宽度100%，高度按比例缩放</span></div><div class=\"line\">          &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">            _this.css(&#123;</div><div class=\"line\">              <span class=\"string\">\"width\"</span>: <span class=\"string\">\"auto\"</span>,</div><div class=\"line\">              <span class=\"string\">\"height\"</span>: <span class=\"string\">\"100%\"</span></div><div class=\"line\">            &#125;);</div><div class=\"line\">            <span class=\"keyword\">var</span> _left = (_width - _this.width()) / <span class=\"number\">2</span>;</div><div class=\"line\">            _this.css(&#123;</div><div class=\"line\">              <span class=\"string\">\"position\"</span>: <span class=\"string\">\"absolute\"</span>,</div><div class=\"line\">              <span class=\"string\">\"top\"</span>: <span class=\"number\">0</span>,</div><div class=\"line\">              <span class=\"string\">\"left\"</span>: _left + <span class=\"string\">\"px\"</span></div><div class=\"line\">            &#125;);</div><div class=\"line\">          &#125;</div><div class=\"line\">          _this.css(&#123;</div><div class=\"line\">            <span class=\"string\">'opacity'</span>: <span class=\"number\">1</span>,</div><div class=\"line\">          &#125;);</div><div class=\"line\">          <span class=\"keyword\">if</span> (opc.callback) opc.callback();</div><div class=\"line\">        &#125;);</div><div class=\"line\">        <span class=\"comment\">//此处图片加载失败处理</span></div><div class=\"line\">        _this.error(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">          <span class=\"keyword\">if</span> (opc.callback) opc.callback();</div><div class=\"line\">          _this.css(&#123;</div><div class=\"line\">            <span class=\"string\">'opacity'</span>: <span class=\"number\">1</span>,</div><div class=\"line\">          &#125;);</div><div class=\"line\">        &#125;);</div><div class=\"line\">      &#125;);</div><div class=\"line\">      <span class=\"comment\">//链式回调</span></div><div class=\"line\">      <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>;</div><div class=\"line\">    &#125;,</div><div class=\"line\">    <span class=\"comment\">//定义full方法</span></div><div class=\"line\">    full: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">      <span class=\"keyword\">var</span> that = <span class=\"keyword\">this</span>,</div><div class=\"line\">        _options = that.options,</div><div class=\"line\">        _ele = $(<span class=\"keyword\">this</span>.$ele),</div><div class=\"line\">        _img = _ele.find(<span class=\"string\">\"img\"</span>),</div><div class=\"line\">        _this, _width, _height, _ratio, _w, _h, _r, _wider;</div><div class=\"line\">      <span class=\"comment\">//修改图片外壳宽高</span></div><div class=\"line\">      _ele.css(&#123;</div><div class=\"line\">        <span class=\"string\">\"width\"</span>: _options.width,</div><div class=\"line\">        <span class=\"string\">\"height\"</span>: _options.height,</div><div class=\"line\">        <span class=\"string\">\"overflow\"</span>: <span class=\"string\">\"hidden\"</span>,</div><div class=\"line\">        <span class=\"string\">\"background\"</span>: <span class=\"string\">\"#000\"</span>,</div><div class=\"line\">        <span class=\"string\">\"position\"</span>: <span class=\"string\">\"relative\"</span></div><div class=\"line\">      &#125;);</div><div class=\"line\">      <span class=\"comment\">//容器比例</span></div><div class=\"line\">      _width = _ele.width();</div><div class=\"line\">      _height = _ele.height();</div><div class=\"line\">      _ratio = _width / _height;</div><div class=\"line\">      <span class=\"comment\">//每张所选图片进行处理</span></div><div class=\"line\">      _img.each(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">        _this = $(<span class=\"keyword\">this</span>);</div><div class=\"line\">        <span class=\"comment\">//此处确保图片加载完毕</span></div><div class=\"line\">        _this.load(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">          _w = _this.width();</div><div class=\"line\">          _h = _this.height();</div><div class=\"line\">          _r = _w / _h;</div><div class=\"line\">          _wider = _r &gt; _ratio ? <span class=\"literal\">true</span> : <span class=\"literal\">false</span>;</div><div class=\"line\">          <span class=\"comment\">//容器宽高比大于图片时，图片高度100%，宽度按比例缩放按比例缩放</span></div><div class=\"line\">          <span class=\"keyword\">if</span> (_wider) &#123;</div><div class=\"line\">            _this.css(&#123;</div><div class=\"line\">              <span class=\"string\">\"width\"</span>: <span class=\"string\">\"auto\"</span>,</div><div class=\"line\">              <span class=\"string\">\"height\"</span>: <span class=\"string\">\"100%\"</span></div><div class=\"line\">            &#125;);</div><div class=\"line\">            <span class=\"keyword\">var</span> _left = (_width - _this.width()) / <span class=\"number\">2</span>;</div><div class=\"line\">            _this.css(&#123;</div><div class=\"line\">              <span class=\"string\">\"position\"</span>: <span class=\"string\">\"absolute\"</span>,</div><div class=\"line\">              <span class=\"string\">\"top\"</span>: <span class=\"number\">0</span>,</div><div class=\"line\">              <span class=\"string\">\"left\"</span>: _left + <span class=\"string\">\"px\"</span></div><div class=\"line\">            &#125;);</div><div class=\"line\">          <span class=\"comment\">//容器宽高比小于图片时，图片宽度100%，高度按比例缩放按比例缩放</span></div><div class=\"line\">          &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">            _this.css(&#123;</div><div class=\"line\">              <span class=\"string\">\"width\"</span>: <span class=\"string\">\"100%\"</span>,</div><div class=\"line\">              <span class=\"string\">\"height\"</span>: <span class=\"string\">\"auto\"</span></div><div class=\"line\">            &#125;);</div><div class=\"line\">            <span class=\"keyword\">var</span> _top = (_height - _this.height()) / <span class=\"number\">2</span>;</div><div class=\"line\">            _this.css(&#123;</div><div class=\"line\">              <span class=\"string\">\"position\"</span>: <span class=\"string\">\"absolute\"</span>,</div><div class=\"line\">              <span class=\"string\">\"top\"</span>: _top + <span class=\"string\">\"px\"</span>,</div><div class=\"line\">              <span class=\"string\">\"left\"</span>: <span class=\"number\">0</span></div><div class=\"line\">            &#125;);</div><div class=\"line\">          &#125;</div><div class=\"line\">        &#125;);</div><div class=\"line\">      &#125;);</div><div class=\"line\">      <span class=\"comment\">//链式回调</span></div><div class=\"line\">      <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>;</div><div class=\"line\">    &#125;,</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;)(jQuery, <span class=\"built_in\">window</span>, <span class=\"built_in\">document</span>);</div></pre></td></tr></table></figure></p>\n<h2 id=\"结束语\"><a href=\"#结束语\" class=\"headerlink\" title=\"结束语\"></a>结束语</h2><hr>\n<p>插件封装也是个有趣的事情哦，当然有兴趣也可以将逻辑封装成原生js插件哒。</p>\n","excerpt":"<p>需要将不同尺寸的图片居中放置时，可使用该jQuery插件。本文介绍实现方法。<br>","more":"</p>\n<p>代码放在github上，有兴趣的小伙伴可以下载看<br><a href=\"https://github.com/godbasin/godbasin.github.io/tree/blog-codes/picture-align\">picture-align</a></p>\n<p>最终效果图如下<a href=\"http://o92lwol8p.bkt.clouddn.com/index.html\">点击查看页面</a><br><img src=\"http://o905ne85q.bkt.clouddn.com/picture-align.png\" alt=\"image\"></p>\n<h2 id=\"插件介绍\"><a href=\"#插件介绍\" class=\"headerlink\" title=\"插件介绍\"></a>插件介绍</h2><hr>\n<h3 id=\"使用方法\"><a href=\"#使用方法\" class=\"headerlink\" title=\"使用方法\"></a>使用方法</h3><ul>\n<li><p>html</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">&lt;!--img元素外层裹一层div--&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"fill\"</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">src</span>=<span class=\"string\">\"img/2.png\"</span> /&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div></pre></td></tr></table></figure>\n</li>\n<li><p>js</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//使用jQuery获取需要的外层容器</span></div><div class=\"line\">$(<span class=\"string\">\".fill\"</span>).bsPictureAlign(&#123;</div><div class=\"line\">  <span class=\"string\">\"img_dom\"</span>: <span class=\"string\">\".img\"</span>, <span class=\"comment\">//img的class/id/其他属性，为0则选中该容器内所有img（tagName === \"img\"）图片</span></div><div class=\"line\">  <span class=\"string\">\"style\"</span>: <span class=\"string\">\"fill\"</span>, <span class=\"comment\">//两种style：full为最短边对齐，过长剪裁；fill为最长边对齐，填充背景</span></div><div class=\"line\">  <span class=\"string\">\"width\"</span>: <span class=\"string\">\"100%\"</span>, <span class=\"comment\">//容器宽度，默认为100%</span></div><div class=\"line\">  <span class=\"string\">\"height\"</span>: <span class=\"string\">\"300px\"</span>, <span class=\"comment\">//容器高度，默认为300px</span></div><div class=\"line\">  <span class=\"string\">\"background\"</span>: <span class=\"string\">\"#000\"</span> <span class=\"comment\">//背景填充颜色，默认为#000黑色</span></div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3 id=\"插件封装方法\"><a href=\"#插件封装方法\" class=\"headerlink\" title=\"插件封装方法\"></a>插件封装方法</h3><ul>\n<li>使用jQuery拓展属性$.fn.xxx来进行封装</li>\n<li>这里有超详细教程<a href=\"http://www.cnblogs.com/Wayou/p/jquery_plugin_tutorial.html\">《jQuery插件开发精品教程，让你的jQuery提升一个台阶》</a></li>\n</ul>\n<h2 id=\"图片居中原理\"><a href=\"#图片居中原理\" class=\"headerlink\" title=\"图片居中原理\"></a>图片居中原理</h2><hr>\n<ul>\n<li>使用img.load()确保图片加载完成，此时可精确图片比例</li>\n<li>获取图片宽高比例，与容器比例进行比较</li>\n</ul>\n<h3 id=\"最短边对齐，过长隐藏：full方法\"><a href=\"#最短边对齐，过长隐藏：full方法\" class=\"headerlink\" title=\"最短边对齐，过长隐藏：full方法\"></a>最短边对齐，过长隐藏：full方法</h3><ul>\n<li>容器宽高比大于图片时，图片高度100%，宽度按比例缩放按比例缩放</li>\n<li>容器宽高比小于图片时，图片宽度100%，高度按比例缩放按比例缩放</li>\n<li>使用绝对定位将容器内图片居中</li>\n<li>设置容器overflow: hidden;隐藏图片过长部分</li>\n</ul>\n<h3 id=\"最长边对齐，填充背景：fill方法\"><a href=\"#最长边对齐，填充背景：fill方法\" class=\"headerlink\" title=\"最长边对齐，填充背景：fill方法\"></a>最长边对齐，填充背景：fill方法</h3><ul>\n<li>容器宽高比大于图片时，图片宽度100%，高度按比例缩放</li>\n<li>容器宽高比小于图片时，图片高度100%，宽度按比例缩放</li>\n<li>使用绝对定位将容器内图片居中</li>\n<li>设置容器background，填充背景</li>\n</ul>\n<h2 id=\"待完善的地方\"><a href=\"#待完善的地方\" class=\"headerlink\" title=\"待完善的地方\"></a>待完善的地方</h2><hr>\n<ul>\n<li>需要在图片加载完之后回调，可自行增加回调函数</li>\n<li>去到哪里都别忘了优化代码哦</li>\n</ul>\n<h2 id=\"插件代码\"><a href=\"#插件代码\" class=\"headerlink\" title=\"插件代码\"></a>插件代码</h2><hr>\n<p>请别叫我下划线狂魔^_^<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div><div class=\"line\">104</div><div class=\"line\">105</div><div class=\"line\">106</div><div class=\"line\">107</div><div class=\"line\">108</div><div class=\"line\">109</div><div class=\"line\">110</div><div class=\"line\">111</div><div class=\"line\">112</div><div class=\"line\">113</div><div class=\"line\">114</div><div class=\"line\">115</div><div class=\"line\">116</div><div class=\"line\">117</div><div class=\"line\">118</div><div class=\"line\">119</div><div class=\"line\">120</div><div class=\"line\">121</div><div class=\"line\">122</div><div class=\"line\">123</div><div class=\"line\">124</div><div class=\"line\">125</div><div class=\"line\">126</div><div class=\"line\">127</div><div class=\"line\">128</div><div class=\"line\">129</div><div class=\"line\">130</div><div class=\"line\">131</div><div class=\"line\">132</div><div class=\"line\">133</div><div class=\"line\">134</div><div class=\"line\">135</div><div class=\"line\">136</div><div class=\"line\">137</div><div class=\"line\">138</div><div class=\"line\">139</div><div class=\"line\">140</div><div class=\"line\">141</div><div class=\"line\">142</div><div class=\"line\">143</div><div class=\"line\">144</div><div class=\"line\">145</div><div class=\"line\">146</div><div class=\"line\">147</div><div class=\"line\">148</div><div class=\"line\">149</div><div class=\"line\">150</div><div class=\"line\">151</div><div class=\"line\">152</div><div class=\"line\">153</div><div class=\"line\">154</div><div class=\"line\">155</div><div class=\"line\">156</div><div class=\"line\">157</div><div class=\"line\">158</div><div class=\"line\">159</div><div class=\"line\">160</div><div class=\"line\">161</div><div class=\"line\">162</div><div class=\"line\">163</div><div class=\"line\">164</div><div class=\"line\">165</div><div class=\"line\">166</div><div class=\"line\">167</div><div class=\"line\">168</div><div class=\"line\">169</div></pre></td><td class=\"code\"><pre><div class=\"line\">;</div><div class=\"line\">(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">$, window, document, undefined</span>) </span>&#123;</div><div class=\"line\">  $.fn.bsPictureAlign = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">options</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> num = <span class=\"keyword\">this</span>.length,</div><div class=\"line\">      loadnum = <span class=\"number\">0</span>;</div><div class=\"line\">    <span class=\"comment\">//若为多个容器，分别初始化每个容器</span></div><div class=\"line\">    <span class=\"keyword\">for</span> (i = <span class=\"number\">0</span>; i &lt; <span class=\"keyword\">this</span>.length; i++) &#123;</div><div class=\"line\">      <span class=\"keyword\">var</span> _this = <span class=\"keyword\">this</span>[i];</div><div class=\"line\">      <span class=\"comment\">//创建bsPictureAlign实体</span></div><div class=\"line\">      <span class=\"keyword\">var</span> bsPictureAlign = <span class=\"keyword\">new</span> BsPictureAlign(_this, options);</div><div class=\"line\">      <span class=\"comment\">//调用其方法</span></div><div class=\"line\">      <span class=\"keyword\">if</span> (options.style == <span class=\"string\">\"full\"</span>) bsPictureAlign.full();</div><div class=\"line\">      <span class=\"keyword\">if</span> (options.style == <span class=\"string\">\"fill\"</span>) bsPictureAlign.fill(&#123;</div><div class=\"line\">        <span class=\"comment\">//这里增加了回调函数，确保所有图片处理完毕后进行回调</span></div><div class=\"line\">        callback: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">          loadnum++;</div><div class=\"line\">          <span class=\"keyword\">if</span> (num == loadnum &amp;&amp; options.loadover) &#123;</div><div class=\"line\">            options.loadover();</div><div class=\"line\">          &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">      &#125;);</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;;</div><div class=\"line\">  <span class=\"comment\">//定义原型</span></div><div class=\"line\">  <span class=\"keyword\">var</span> BsPictureAlign = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">ele, opt</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>.$ele = ele;</div><div class=\"line\">    <span class=\"comment\">//若无定义宽高背景，使用默认值</span></div><div class=\"line\">      <span class=\"keyword\">this</span>.defaults = &#123;</div><div class=\"line\">        <span class=\"string\">\"width\"</span>: <span class=\"string\">\"100%\"</span>,</div><div class=\"line\">        <span class=\"string\">\"height\"</span>: <span class=\"string\">\"300px\"</span>,</div><div class=\"line\">        <span class=\"string\">\"background\"</span>: <span class=\"string\">\"#000\"</span></div><div class=\"line\">      &#125;;</div><div class=\"line\">      <span class=\"keyword\">this</span>.options = $.extend(&#123;&#125;, <span class=\"keyword\">this</span>.defaults, opt);</div><div class=\"line\">  &#125;;</div><div class=\"line\">  BsPictureAlign.prototype = &#123;</div><div class=\"line\">    <span class=\"comment\">//定义fill方法</span></div><div class=\"line\">    fill: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">opc</span>) </span>&#123;</div><div class=\"line\">      <span class=\"keyword\">var</span> that = <span class=\"keyword\">this</span>,</div><div class=\"line\">        _options = that.options,</div><div class=\"line\">        _ele = $(<span class=\"keyword\">this</span>.$ele),</div><div class=\"line\">        _dom = _options.img_dom,</div><div class=\"line\">        _img = _dom ? _ele.find(_dom) : _ele.find(<span class=\"string\">\"img\"</span>),</div><div class=\"line\">        _this, _width, _height, _ratio, _w, _h, _r, _wider;</div><div class=\"line\">      <span class=\"comment\">//修改图片容器宽高</span></div><div class=\"line\">      _ele.css(&#123;</div><div class=\"line\">        <span class=\"string\">\"width\"</span>: _options.width,</div><div class=\"line\">        <span class=\"string\">\"height\"</span>: _options.height,</div><div class=\"line\">        <span class=\"string\">\"overflow\"</span>: <span class=\"string\">\"hidden\"</span>,</div><div class=\"line\">        <span class=\"string\">\"background\"</span>: _options.background,</div><div class=\"line\">        <span class=\"string\">\"position\"</span>: <span class=\"string\">\"relative\"</span></div><div class=\"line\">      &#125;);</div><div class=\"line\">      <span class=\"comment\">//容器比例</span></div><div class=\"line\">      _width = _ele.width();</div><div class=\"line\">      _height = _ele.height();</div><div class=\"line\">      _ratio = _width / _height;</div><div class=\"line\">      <span class=\"comment\">//每张所选图片进行处理</span></div><div class=\"line\">      _img.each(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">        _this = $(<span class=\"keyword\">this</span>);</div><div class=\"line\">        <span class=\"comment\">//此处可选，用来保证图片加载完之前不可见</span></div><div class=\"line\">        _this.css(&#123;</div><div class=\"line\">          <span class=\"string\">'opacity'</span>: <span class=\"number\">0</span>,</div><div class=\"line\">        &#125;);</div><div class=\"line\">        <span class=\"comment\">//此处确保图片加载完毕</span></div><div class=\"line\">        _this.load(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">          _w = _this.width();</div><div class=\"line\">          _h = _this.height();</div><div class=\"line\">          _r = _w / _h;</div><div class=\"line\">          _wider = _r &gt; _ratio ? <span class=\"literal\">true</span> : <span class=\"literal\">false</span>;</div><div class=\"line\">          <span class=\"comment\">//容器宽高比小于图片时，图片高度100%，宽度按比例缩放</span></div><div class=\"line\">          <span class=\"keyword\">if</span> (_wider) &#123;</div><div class=\"line\">            _this.css(&#123;</div><div class=\"line\">              <span class=\"string\">\"width\"</span>: <span class=\"string\">\"100%\"</span>,</div><div class=\"line\">              <span class=\"string\">\"height\"</span>: <span class=\"string\">\"auto\"</span></div><div class=\"line\">            &#125;);</div><div class=\"line\">            <span class=\"keyword\">var</span> _top = (_height - _this.height()) / <span class=\"number\">2</span>;</div><div class=\"line\">            _this.css(&#123;</div><div class=\"line\">              <span class=\"string\">\"position\"</span>: <span class=\"string\">\"absolute\"</span>,</div><div class=\"line\">              <span class=\"string\">\"top\"</span>: _top + <span class=\"string\">\"px\"</span>,</div><div class=\"line\">              <span class=\"string\">\"left\"</span>: <span class=\"number\">0</span></div><div class=\"line\">            &#125;);</div><div class=\"line\">          <span class=\"comment\">//容器宽高比大于图片时，图片宽度100%，高度按比例缩放</span></div><div class=\"line\">          &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">            _this.css(&#123;</div><div class=\"line\">              <span class=\"string\">\"width\"</span>: <span class=\"string\">\"auto\"</span>,</div><div class=\"line\">              <span class=\"string\">\"height\"</span>: <span class=\"string\">\"100%\"</span></div><div class=\"line\">            &#125;);</div><div class=\"line\">            <span class=\"keyword\">var</span> _left = (_width - _this.width()) / <span class=\"number\">2</span>;</div><div class=\"line\">            _this.css(&#123;</div><div class=\"line\">              <span class=\"string\">\"position\"</span>: <span class=\"string\">\"absolute\"</span>,</div><div class=\"line\">              <span class=\"string\">\"top\"</span>: <span class=\"number\">0</span>,</div><div class=\"line\">              <span class=\"string\">\"left\"</span>: _left + <span class=\"string\">\"px\"</span></div><div class=\"line\">            &#125;);</div><div class=\"line\">          &#125;</div><div class=\"line\">          _this.css(&#123;</div><div class=\"line\">            <span class=\"string\">'opacity'</span>: <span class=\"number\">1</span>,</div><div class=\"line\">          &#125;);</div><div class=\"line\">          <span class=\"keyword\">if</span> (opc.callback) opc.callback();</div><div class=\"line\">        &#125;);</div><div class=\"line\">        <span class=\"comment\">//此处图片加载失败处理</span></div><div class=\"line\">        _this.error(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">          <span class=\"keyword\">if</span> (opc.callback) opc.callback();</div><div class=\"line\">          _this.css(&#123;</div><div class=\"line\">            <span class=\"string\">'opacity'</span>: <span class=\"number\">1</span>,</div><div class=\"line\">          &#125;);</div><div class=\"line\">        &#125;);</div><div class=\"line\">      &#125;);</div><div class=\"line\">      <span class=\"comment\">//链式回调</span></div><div class=\"line\">      <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>;</div><div class=\"line\">    &#125;,</div><div class=\"line\">    <span class=\"comment\">//定义full方法</span></div><div class=\"line\">    full: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">      <span class=\"keyword\">var</span> that = <span class=\"keyword\">this</span>,</div><div class=\"line\">        _options = that.options,</div><div class=\"line\">        _ele = $(<span class=\"keyword\">this</span>.$ele),</div><div class=\"line\">        _img = _ele.find(<span class=\"string\">\"img\"</span>),</div><div class=\"line\">        _this, _width, _height, _ratio, _w, _h, _r, _wider;</div><div class=\"line\">      <span class=\"comment\">//修改图片外壳宽高</span></div><div class=\"line\">      _ele.css(&#123;</div><div class=\"line\">        <span class=\"string\">\"width\"</span>: _options.width,</div><div class=\"line\">        <span class=\"string\">\"height\"</span>: _options.height,</div><div class=\"line\">        <span class=\"string\">\"overflow\"</span>: <span class=\"string\">\"hidden\"</span>,</div><div class=\"line\">        <span class=\"string\">\"background\"</span>: <span class=\"string\">\"#000\"</span>,</div><div class=\"line\">        <span class=\"string\">\"position\"</span>: <span class=\"string\">\"relative\"</span></div><div class=\"line\">      &#125;);</div><div class=\"line\">      <span class=\"comment\">//容器比例</span></div><div class=\"line\">      _width = _ele.width();</div><div class=\"line\">      _height = _ele.height();</div><div class=\"line\">      _ratio = _width / _height;</div><div class=\"line\">      <span class=\"comment\">//每张所选图片进行处理</span></div><div class=\"line\">      _img.each(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">        _this = $(<span class=\"keyword\">this</span>);</div><div class=\"line\">        <span class=\"comment\">//此处确保图片加载完毕</span></div><div class=\"line\">        _this.load(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">          _w = _this.width();</div><div class=\"line\">          _h = _this.height();</div><div class=\"line\">          _r = _w / _h;</div><div class=\"line\">          _wider = _r &gt; _ratio ? <span class=\"literal\">true</span> : <span class=\"literal\">false</span>;</div><div class=\"line\">          <span class=\"comment\">//容器宽高比大于图片时，图片高度100%，宽度按比例缩放按比例缩放</span></div><div class=\"line\">          <span class=\"keyword\">if</span> (_wider) &#123;</div><div class=\"line\">            _this.css(&#123;</div><div class=\"line\">              <span class=\"string\">\"width\"</span>: <span class=\"string\">\"auto\"</span>,</div><div class=\"line\">              <span class=\"string\">\"height\"</span>: <span class=\"string\">\"100%\"</span></div><div class=\"line\">            &#125;);</div><div class=\"line\">            <span class=\"keyword\">var</span> _left = (_width - _this.width()) / <span class=\"number\">2</span>;</div><div class=\"line\">            _this.css(&#123;</div><div class=\"line\">              <span class=\"string\">\"position\"</span>: <span class=\"string\">\"absolute\"</span>,</div><div class=\"line\">              <span class=\"string\">\"top\"</span>: <span class=\"number\">0</span>,</div><div class=\"line\">              <span class=\"string\">\"left\"</span>: _left + <span class=\"string\">\"px\"</span></div><div class=\"line\">            &#125;);</div><div class=\"line\">          <span class=\"comment\">//容器宽高比小于图片时，图片宽度100%，高度按比例缩放按比例缩放</span></div><div class=\"line\">          &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">            _this.css(&#123;</div><div class=\"line\">              <span class=\"string\">\"width\"</span>: <span class=\"string\">\"100%\"</span>,</div><div class=\"line\">              <span class=\"string\">\"height\"</span>: <span class=\"string\">\"auto\"</span></div><div class=\"line\">            &#125;);</div><div class=\"line\">            <span class=\"keyword\">var</span> _top = (_height - _this.height()) / <span class=\"number\">2</span>;</div><div class=\"line\">            _this.css(&#123;</div><div class=\"line\">              <span class=\"string\">\"position\"</span>: <span class=\"string\">\"absolute\"</span>,</div><div class=\"line\">              <span class=\"string\">\"top\"</span>: _top + <span class=\"string\">\"px\"</span>,</div><div class=\"line\">              <span class=\"string\">\"left\"</span>: <span class=\"number\">0</span></div><div class=\"line\">            &#125;);</div><div class=\"line\">          &#125;</div><div class=\"line\">        &#125;);</div><div class=\"line\">      &#125;);</div><div class=\"line\">      <span class=\"comment\">//链式回调</span></div><div class=\"line\">      <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>;</div><div class=\"line\">    &#125;,</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;)(jQuery, <span class=\"built_in\">window</span>, <span class=\"built_in\">document</span>);</div></pre></td></tr></table></figure></p>\n<h2 id=\"结束语\"><a href=\"#结束语\" class=\"headerlink\" title=\"结束语\"></a>结束语</h2><hr>\n<p>插件封装也是个有趣的事情哦，当然有兴趣也可以将逻辑封装成原生js插件哒。</p>"},{"title":"将json输出为html(一)：字符串正则匹配","date":"2016-11-12T16:09:01.000Z","_content":"最近项目需要用到将json格式化展示在html页面中，在这里简答整理一下其中逻辑实现，将json转换为字符串然后用正则匹配。\n<!--more-->\n\n## 分析json格式化样式\n---\n这里我们先分析一下json格式化后的展示方式，例子：\n``` json\n{\n    \"type\": \"type1\",\n    \"total\": 111,\n    \"data\": [{\n        \"time\": \"2016-10-10 22:22:22\",\n        \"flag\": null,\n        \"appear\": {\n            \"head\": \"head\",\n            \"list\": [\"123\",\"123\",\"123\"]\n        }\n    }, {\n        \"time\": \"2016-10-10 22:22:22\",\n        \"flag\": true,\n        \"appear\": {\n            \"head\": \"head\",\n            \"list\": [\"123\",\"123\",\"123\",\"123\",\"123\"]\n        }\n    }]\n}\n```\n\n### 数据类型展示\n从上面的json我们可以大概将数据格式分为以下几种：\n- Object对象\n  - 可通过`{}`来标志判断\n- Array数组\n  - 可通过`[]`来标志判断\n- String字符串\n  - 可通过`\"\"`来进行标志判断\n  - 可分为key和value两种\n- Number数字\n- Null\n- Boolen\n\n### json样式/颜色\n为了使得展示的体验增加，我们可以根据不同的数据类型设置不同的颜色展示。\n- 基本符号，`{}`、`[]`、`:`、`\"\"`、`,`\n- 字符串\n  - key键值\n  - value值\n- 数字\n- true/false/null\n\n## 实现逻辑\n---\n通过上述json分析，我们可以使用两种方式实现json格式化：\n- 分析JSON.stringify()后的字符串，使用正则把需要的格式匹配替换\n- 将json转化为object，然后通过js判断数据类型进行格式化\n\n这里我们先使用第一种方法实现。\n\n### 字符串匹配\n- 需要匹配的值\n  - 需要换行的字符，包括`,`后、`{`后、`}`前\n  - 位于行首需要缩进的字符，这里包括字符串key键值，以及`}`\n  - 字符串\n    - key键值，使用`\"\"`、位于`:`前\n    - value值，使用`\"\"`、不位于`:`前\n  - true/false/null\n  - 其余为数字number\n\n- 匹配方法\n  - 字符使用正则，`/[,\\{\\}:\\[\\]]/`\n  - 字符串，`/(\"(\\\\u[a-zA-Z0-9]{4}|\\\\[^u]|[^\\\\\"])*\"(\\s*:)?/`\n    - key键值，`/:$/`\n    - 其余为value值\n  - ture/false/null，`/\\b(true|false|null)\\b/`\n  - 数字，`/-?\\d+(?:\\.\\d*)?(?:[eE][+\\-]?\\d+)?/`\n\n- 实现\n这里将上述的逻辑进行实现。\n\n- 数组换行实现\n\n``` js\nfunction JsonToHtml(data) {\n    // 若传入数值为json，则转换为字符串\n    var str = typeof data === 'string' ? str : JSON.stringify(data);\n    //将一些需要添加颜色的值匹配出来\n    str = str.replace(/(\"(\\\\u[a-zA-Z0-9]{4}|\\\\[^u]|[^\\\\\"])*\"(\\s*:)?|\\b(true|false|null)\\b|-?\\d+(?:\\.\\d*)?(?:[eE][+\\-]?\\d+)?)/g, match => {\n        var cls = 'number';\n        if (/^\"/.test(match)) {\n            if (/:$/.test(match)) {\n                cls = 'key';\n            } else {\n                cls = 'string';\n            }\n        } else if (/true|false/.test(match)) {\n            cls = 'boolean';\n        } else if (/null/.test(match)) {\n            cls = 'null';\n        }\n        return '<span class=\"' + cls + '\">' + match + '</span>';\n    });\n    // 下面将进行换行匹配，包括,后、{后、}前\n    var indent = 0, // 缩进数\n        line = '</br>', // 换行\n        indentChar = '&nbsp;&nbsp;&nbsp;&nbsp;'; // 缩进量\n    // 将需要换行的元素匹配出来\n    // 这里需要注意，逗号,后若有{则不需要换行，此时我们需要将其匹配出来\n    str = str.replace(/((,(\\t)*[^\\{])|(,(\\t)*\\{)|(\\[(\\t)*\\{)|(\\}(\\t)*\\])|\\}|\\{|\\[|\\])/g, match => {\n        var str = '';\n        // 若为{或者,{，则换行后缩进增加\n        if (match === '{' || match === '[' || /,(\\t)*\\{/.test(match) || /\\[(\\t)*\\{/.test(match)) {\n            indent++;\n            // 若为}，则换行后缩进减少\n        } else if (match === '}' || match === ']' || /\\}(\\t)*\\]/.test(match)) {\n            indent--;\n        }\n        // 转换缩进\n        for (var i = 0, tab = ''; i < indent; i++) {\n            tab += indentChar;\n        }\n        // 若为}，则先换行后进行缩进\n        if (match === '}' || match === ']' || /\\}\\]/.test(match)) {\n            str = line + tab + match;\n            // 若为,后不跟{，则在,后进行换行缩进\n        } else if (/,(\\t)*[^\\{]/.test(match)) {\n            str = ',' + line + tab + match.substring(1);\n            // 其余情况，则在最后进行换行缩进    \n        } else {\n            str = match + line + tab;\n        }\n        return str;\n    });\n    return ('<div class=\"json\">' + str + '</div>');\n}\n```\n\n- 数组不换行实现\n\n``` js\nfunction JsonToHtml(data) {\n    // 若传入数值为json，则转换为字符串\n    var str = typeof data === 'string' ? str : JSON.stringify(data);\n    //将一些需要添加颜色的值匹配出来\n    str = str.replace(/(\"(\\\\u[a-zA-Z0-9]{4}|\\\\[^u]|[^\\\\\"])*\"(\\s*:)?|\\b(true|false|null)\\b|-?\\d+(?:\\.\\d*)?(?:[eE][+\\-]?\\d+)?)/g, match => {\n        var cls = 'number';\n        if (/^\"/.test(match)) {\n            if (/:$/.test(match)) {\n                cls = 'key';\n            } else {\n                cls = 'string';\n            }\n        } else if (/true|false/.test(match)) {\n            cls = 'boolean';\n        } else if (/null/.test(match)) {\n            cls = 'null';\n        }\n        return '<span class=\"' + cls + '\">' + match + '</span>';\n    });\n    // 下面将进行换行匹配，包括,后、{后、}前\n    var indent = 0, // 缩进数\n        line = '</br>', // 换行\n        indentChar = '&nbsp;&nbsp;&nbsp;&nbsp;', // 缩进量\n        inArray = false, // 是否在数组里\n        inObject = true; // 是否在对象里\n    // 将需要换行的元素匹配出来\n    // 这里需要注意，逗号,后若有{则不需要换行，此时我们需要将其匹配出来\n    str = str.replace(/((,(\\t)*[^\\{])|(,(\\t)*\\{)|\\}|\\{|\\]|\\[)/g, match => {\n        var str = '';\n        if (match === ']') {\n            inArray = false;\n            return match;\n        } else if (match === '[') {\n            inArray = true;\n            inObject = false;\n            return match;\n        }\n        // 若为{或者,{，则换行后缩进增加\n        if (match === '{' || /,(\\t)*\\{/.test(match)) {\n            indent++;\n            inObject = true;\n        // 若为}，则换行后缩进减少\n        } else if (match === '}') {\n            indent--;\n            inObject = false;\n        }\n        // 转换缩进\n        for (var i = 0, tab = ''; i < indent; i++) {\n            tab += indentChar;\n        }\n        // 若为}，则先换行后进行缩进\n        if (match === '}') {\n            str = line + tab + match;\n        // 若为,后不跟{，则在,后进行换行缩进\n        } else if (/,(\\t)*[^\\{]/.test(match)) {\n            str = (inArray && !inObject) ? match : (',' + line + tab + match.substring(1));\n        // 其余情况，则在最后进行换行缩进    \n        } else {\n            str = match + line + tab;\n        }\n        return str;\n    });\n    return ('<div class=\"json\">' + str + '</div>');\n}\n```\n\n### 结束语\n这里我们讨论了其中一种方式，后面章节我们将使用另外一种方法实现。\n[此处查看项目代码](https://github.com/godbasin/godbasin.github.io/blob/blog-codes/json-to-html/json-to-html-1-use-string-regular.html)\n[此处点击查看页面](http://og7yu923g.bkt.clouddn.com/json-to-html-1-use-string-regular.html)","source":"_posts/json-to-html-1-use-string-regular.md","raw":"---\ntitle: 将json输出为html(一)：字符串正则匹配\ndate: 2016-11-13 00:09:01\ncategories: js什锦\ntags: 逻辑实现\n---\n最近项目需要用到将json格式化展示在html页面中，在这里简答整理一下其中逻辑实现，将json转换为字符串然后用正则匹配。\n<!--more-->\n\n## 分析json格式化样式\n---\n这里我们先分析一下json格式化后的展示方式，例子：\n``` json\n{\n    \"type\": \"type1\",\n    \"total\": 111,\n    \"data\": [{\n        \"time\": \"2016-10-10 22:22:22\",\n        \"flag\": null,\n        \"appear\": {\n            \"head\": \"head\",\n            \"list\": [\"123\",\"123\",\"123\"]\n        }\n    }, {\n        \"time\": \"2016-10-10 22:22:22\",\n        \"flag\": true,\n        \"appear\": {\n            \"head\": \"head\",\n            \"list\": [\"123\",\"123\",\"123\",\"123\",\"123\"]\n        }\n    }]\n}\n```\n\n### 数据类型展示\n从上面的json我们可以大概将数据格式分为以下几种：\n- Object对象\n  - 可通过`{}`来标志判断\n- Array数组\n  - 可通过`[]`来标志判断\n- String字符串\n  - 可通过`\"\"`来进行标志判断\n  - 可分为key和value两种\n- Number数字\n- Null\n- Boolen\n\n### json样式/颜色\n为了使得展示的体验增加，我们可以根据不同的数据类型设置不同的颜色展示。\n- 基本符号，`{}`、`[]`、`:`、`\"\"`、`,`\n- 字符串\n  - key键值\n  - value值\n- 数字\n- true/false/null\n\n## 实现逻辑\n---\n通过上述json分析，我们可以使用两种方式实现json格式化：\n- 分析JSON.stringify()后的字符串，使用正则把需要的格式匹配替换\n- 将json转化为object，然后通过js判断数据类型进行格式化\n\n这里我们先使用第一种方法实现。\n\n### 字符串匹配\n- 需要匹配的值\n  - 需要换行的字符，包括`,`后、`{`后、`}`前\n  - 位于行首需要缩进的字符，这里包括字符串key键值，以及`}`\n  - 字符串\n    - key键值，使用`\"\"`、位于`:`前\n    - value值，使用`\"\"`、不位于`:`前\n  - true/false/null\n  - 其余为数字number\n\n- 匹配方法\n  - 字符使用正则，`/[,\\{\\}:\\[\\]]/`\n  - 字符串，`/(\"(\\\\u[a-zA-Z0-9]{4}|\\\\[^u]|[^\\\\\"])*\"(\\s*:)?/`\n    - key键值，`/:$/`\n    - 其余为value值\n  - ture/false/null，`/\\b(true|false|null)\\b/`\n  - 数字，`/-?\\d+(?:\\.\\d*)?(?:[eE][+\\-]?\\d+)?/`\n\n- 实现\n这里将上述的逻辑进行实现。\n\n- 数组换行实现\n\n``` js\nfunction JsonToHtml(data) {\n    // 若传入数值为json，则转换为字符串\n    var str = typeof data === 'string' ? str : JSON.stringify(data);\n    //将一些需要添加颜色的值匹配出来\n    str = str.replace(/(\"(\\\\u[a-zA-Z0-9]{4}|\\\\[^u]|[^\\\\\"])*\"(\\s*:)?|\\b(true|false|null)\\b|-?\\d+(?:\\.\\d*)?(?:[eE][+\\-]?\\d+)?)/g, match => {\n        var cls = 'number';\n        if (/^\"/.test(match)) {\n            if (/:$/.test(match)) {\n                cls = 'key';\n            } else {\n                cls = 'string';\n            }\n        } else if (/true|false/.test(match)) {\n            cls = 'boolean';\n        } else if (/null/.test(match)) {\n            cls = 'null';\n        }\n        return '<span class=\"' + cls + '\">' + match + '</span>';\n    });\n    // 下面将进行换行匹配，包括,后、{后、}前\n    var indent = 0, // 缩进数\n        line = '</br>', // 换行\n        indentChar = '&nbsp;&nbsp;&nbsp;&nbsp;'; // 缩进量\n    // 将需要换行的元素匹配出来\n    // 这里需要注意，逗号,后若有{则不需要换行，此时我们需要将其匹配出来\n    str = str.replace(/((,(\\t)*[^\\{])|(,(\\t)*\\{)|(\\[(\\t)*\\{)|(\\}(\\t)*\\])|\\}|\\{|\\[|\\])/g, match => {\n        var str = '';\n        // 若为{或者,{，则换行后缩进增加\n        if (match === '{' || match === '[' || /,(\\t)*\\{/.test(match) || /\\[(\\t)*\\{/.test(match)) {\n            indent++;\n            // 若为}，则换行后缩进减少\n        } else if (match === '}' || match === ']' || /\\}(\\t)*\\]/.test(match)) {\n            indent--;\n        }\n        // 转换缩进\n        for (var i = 0, tab = ''; i < indent; i++) {\n            tab += indentChar;\n        }\n        // 若为}，则先换行后进行缩进\n        if (match === '}' || match === ']' || /\\}\\]/.test(match)) {\n            str = line + tab + match;\n            // 若为,后不跟{，则在,后进行换行缩进\n        } else if (/,(\\t)*[^\\{]/.test(match)) {\n            str = ',' + line + tab + match.substring(1);\n            // 其余情况，则在最后进行换行缩进    \n        } else {\n            str = match + line + tab;\n        }\n        return str;\n    });\n    return ('<div class=\"json\">' + str + '</div>');\n}\n```\n\n- 数组不换行实现\n\n``` js\nfunction JsonToHtml(data) {\n    // 若传入数值为json，则转换为字符串\n    var str = typeof data === 'string' ? str : JSON.stringify(data);\n    //将一些需要添加颜色的值匹配出来\n    str = str.replace(/(\"(\\\\u[a-zA-Z0-9]{4}|\\\\[^u]|[^\\\\\"])*\"(\\s*:)?|\\b(true|false|null)\\b|-?\\d+(?:\\.\\d*)?(?:[eE][+\\-]?\\d+)?)/g, match => {\n        var cls = 'number';\n        if (/^\"/.test(match)) {\n            if (/:$/.test(match)) {\n                cls = 'key';\n            } else {\n                cls = 'string';\n            }\n        } else if (/true|false/.test(match)) {\n            cls = 'boolean';\n        } else if (/null/.test(match)) {\n            cls = 'null';\n        }\n        return '<span class=\"' + cls + '\">' + match + '</span>';\n    });\n    // 下面将进行换行匹配，包括,后、{后、}前\n    var indent = 0, // 缩进数\n        line = '</br>', // 换行\n        indentChar = '&nbsp;&nbsp;&nbsp;&nbsp;', // 缩进量\n        inArray = false, // 是否在数组里\n        inObject = true; // 是否在对象里\n    // 将需要换行的元素匹配出来\n    // 这里需要注意，逗号,后若有{则不需要换行，此时我们需要将其匹配出来\n    str = str.replace(/((,(\\t)*[^\\{])|(,(\\t)*\\{)|\\}|\\{|\\]|\\[)/g, match => {\n        var str = '';\n        if (match === ']') {\n            inArray = false;\n            return match;\n        } else if (match === '[') {\n            inArray = true;\n            inObject = false;\n            return match;\n        }\n        // 若为{或者,{，则换行后缩进增加\n        if (match === '{' || /,(\\t)*\\{/.test(match)) {\n            indent++;\n            inObject = true;\n        // 若为}，则换行后缩进减少\n        } else if (match === '}') {\n            indent--;\n            inObject = false;\n        }\n        // 转换缩进\n        for (var i = 0, tab = ''; i < indent; i++) {\n            tab += indentChar;\n        }\n        // 若为}，则先换行后进行缩进\n        if (match === '}') {\n            str = line + tab + match;\n        // 若为,后不跟{，则在,后进行换行缩进\n        } else if (/,(\\t)*[^\\{]/.test(match)) {\n            str = (inArray && !inObject) ? match : (',' + line + tab + match.substring(1));\n        // 其余情况，则在最后进行换行缩进    \n        } else {\n            str = match + line + tab;\n        }\n        return str;\n    });\n    return ('<div class=\"json\">' + str + '</div>');\n}\n```\n\n### 结束语\n这里我们讨论了其中一种方式，后面章节我们将使用另外一种方法实现。\n[此处查看项目代码](https://github.com/godbasin/godbasin.github.io/blob/blog-codes/json-to-html/json-to-html-1-use-string-regular.html)\n[此处点击查看页面](http://og7yu923g.bkt.clouddn.com/json-to-html-1-use-string-regular.html)","slug":"json-to-html-1-use-string-regular","published":1,"updated":"2016-11-12T16:09:13.062Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cix45huh5003exotul8odcmx6","content":"<p>最近项目需要用到将json格式化展示在html页面中，在这里简答整理一下其中逻辑实现，将json转换为字符串然后用正则匹配。<br><a id=\"more\"></a></p>\n<h2 id=\"分析json格式化样式\"><a href=\"#分析json格式化样式\" class=\"headerlink\" title=\"分析json格式化样式\"></a>分析json格式化样式</h2><hr>\n<p>这里我们先分析一下json格式化后的展示方式，例子：<br><figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"attr\">\"type\"</span>: <span class=\"string\">\"type1\"</span>,</div><div class=\"line\">    <span class=\"attr\">\"total\"</span>: <span class=\"number\">111</span>,</div><div class=\"line\">    <span class=\"attr\">\"data\"</span>: [&#123;</div><div class=\"line\">        <span class=\"attr\">\"time\"</span>: <span class=\"string\">\"2016-10-10 22:22:22\"</span>,</div><div class=\"line\">        <span class=\"attr\">\"flag\"</span>: <span class=\"literal\">null</span>,</div><div class=\"line\">        <span class=\"attr\">\"appear\"</span>: &#123;</div><div class=\"line\">            <span class=\"attr\">\"head\"</span>: <span class=\"string\">\"head\"</span>,</div><div class=\"line\">            <span class=\"attr\">\"list\"</span>: [<span class=\"string\">\"123\"</span>,<span class=\"string\">\"123\"</span>,<span class=\"string\">\"123\"</span>]</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;, &#123;</div><div class=\"line\">        <span class=\"attr\">\"time\"</span>: <span class=\"string\">\"2016-10-10 22:22:22\"</span>,</div><div class=\"line\">        <span class=\"attr\">\"flag\"</span>: <span class=\"literal\">true</span>,</div><div class=\"line\">        <span class=\"attr\">\"appear\"</span>: &#123;</div><div class=\"line\">            <span class=\"attr\">\"head\"</span>: <span class=\"string\">\"head\"</span>,</div><div class=\"line\">            <span class=\"attr\">\"list\"</span>: [<span class=\"string\">\"123\"</span>,<span class=\"string\">\"123\"</span>,<span class=\"string\">\"123\"</span>,<span class=\"string\">\"123\"</span>,<span class=\"string\">\"123\"</span>]</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;]</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h3 id=\"数据类型展示\"><a href=\"#数据类型展示\" class=\"headerlink\" title=\"数据类型展示\"></a>数据类型展示</h3><p>从上面的json我们可以大概将数据格式分为以下几种：</p>\n<ul>\n<li>Object对象<ul>\n<li>可通过<code>{}</code>来标志判断</li>\n</ul>\n</li>\n<li>Array数组<ul>\n<li>可通过<code>[]</code>来标志判断</li>\n</ul>\n</li>\n<li>String字符串<ul>\n<li>可通过<code>&quot;&quot;</code>来进行标志判断</li>\n<li>可分为key和value两种</li>\n</ul>\n</li>\n<li>Number数字</li>\n<li>Null</li>\n<li>Boolen</li>\n</ul>\n<h3 id=\"json样式-颜色\"><a href=\"#json样式-颜色\" class=\"headerlink\" title=\"json样式/颜色\"></a>json样式/颜色</h3><p>为了使得展示的体验增加，我们可以根据不同的数据类型设置不同的颜色展示。</p>\n<ul>\n<li>基本符号，<code>{}</code>、<code>[]</code>、<code>:</code>、<code>&quot;&quot;</code>、<code>,</code></li>\n<li>字符串<ul>\n<li>key键值</li>\n<li>value值</li>\n</ul>\n</li>\n<li>数字</li>\n<li>true/false/null</li>\n</ul>\n<h2 id=\"实现逻辑\"><a href=\"#实现逻辑\" class=\"headerlink\" title=\"实现逻辑\"></a>实现逻辑</h2><hr>\n<p>通过上述json分析，我们可以使用两种方式实现json格式化：</p>\n<ul>\n<li>分析JSON.stringify()后的字符串，使用正则把需要的格式匹配替换</li>\n<li>将json转化为object，然后通过js判断数据类型进行格式化</li>\n</ul>\n<p>这里我们先使用第一种方法实现。</p>\n<h3 id=\"字符串匹配\"><a href=\"#字符串匹配\" class=\"headerlink\" title=\"字符串匹配\"></a>字符串匹配</h3><ul>\n<li><p>需要匹配的值</p>\n<ul>\n<li>需要换行的字符，包括<code>,</code>后、<code>{</code>后、<code>}</code>前</li>\n<li>位于行首需要缩进的字符，这里包括字符串key键值，以及<code>}</code></li>\n<li>字符串<ul>\n<li>key键值，使用<code>&quot;&quot;</code>、位于<code>:</code>前</li>\n<li>value值，使用<code>&quot;&quot;</code>、不位于<code>:</code>前</li>\n</ul>\n</li>\n<li>true/false/null</li>\n<li>其余为数字number</li>\n</ul>\n</li>\n<li><p>匹配方法</p>\n<ul>\n<li>字符使用正则，<code>/[,\\{\\}:\\[\\]]/</code></li>\n<li>字符串，<code>/(&quot;(\\\\u[a-zA-Z0-9]{4}|\\\\[^u]|[^\\\\&quot;])*&quot;(\\s*:)?/</code><ul>\n<li>key键值，<code>/:$/</code></li>\n<li>其余为value值</li>\n</ul>\n</li>\n<li>ture/false/null，<code>/\\b(true|false|null)\\b/</code></li>\n<li>数字，<code>/-?\\d+(?:\\.\\d*)?(?:[eE][+\\-]?\\d+)?/</code></li>\n</ul>\n</li>\n<li><p>实现<br>这里将上述的逻辑进行实现。</p>\n</li>\n<li><p>数组换行实现</p>\n</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">JsonToHtml</span>(<span class=\"params\">data</span>) </span>&#123;</div><div class=\"line\">    <span class=\"comment\">// 若传入数值为json，则转换为字符串</span></div><div class=\"line\">    <span class=\"keyword\">var</span> str = <span class=\"keyword\">typeof</span> data === <span class=\"string\">'string'</span> ? str : <span class=\"built_in\">JSON</span>.stringify(data);</div><div class=\"line\">    <span class=\"comment\">//将一些需要添加颜色的值匹配出来</span></div><div class=\"line\">    str = str.replace(<span class=\"regexp\">/(\"(\\\\u[a-zA-Z0-9]&#123;4&#125;|\\\\[^u]|[^\\\\\"])*\"(\\s*:)?|\\b(true|false|null)\\b|-?\\d+(?:\\.\\d*)?(?:[eE][+\\-]?\\d+)?)/g</span>, match =&gt; &#123;</div><div class=\"line\">        <span class=\"keyword\">var</span> cls = <span class=\"string\">'number'</span>;</div><div class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"regexp\">/^\"/</span>.test(match)) &#123;</div><div class=\"line\">            <span class=\"keyword\">if</span> (<span class=\"regexp\">/:$/</span>.test(match)) &#123;</div><div class=\"line\">                cls = <span class=\"string\">'key'</span>;</div><div class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">                cls = <span class=\"string\">'string'</span>;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (<span class=\"regexp\">/true|false/</span>.test(match)) &#123;</div><div class=\"line\">            cls = <span class=\"string\">'boolean'</span>;</div><div class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (<span class=\"regexp\">/null/</span>.test(match)) &#123;</div><div class=\"line\">            cls = <span class=\"string\">'null'</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">'&lt;span class=\"'</span> + cls + <span class=\"string\">'\"&gt;'</span> + match + <span class=\"string\">'&lt;/span&gt;'</span>;</div><div class=\"line\">    &#125;);</div><div class=\"line\">    <span class=\"comment\">// 下面将进行换行匹配，包括,后、&#123;后、&#125;前</span></div><div class=\"line\">    <span class=\"keyword\">var</span> indent = <span class=\"number\">0</span>, <span class=\"comment\">// 缩进数</span></div><div class=\"line\">        line = <span class=\"string\">'&lt;/br&gt;'</span>, <span class=\"comment\">// 换行</span></div><div class=\"line\">        indentChar = <span class=\"string\">'&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;'</span>; <span class=\"comment\">// 缩进量</span></div><div class=\"line\">    <span class=\"comment\">// 将需要换行的元素匹配出来</span></div><div class=\"line\">    <span class=\"comment\">// 这里需要注意，逗号,后若有&#123;则不需要换行，此时我们需要将其匹配出来</span></div><div class=\"line\">    str = str.replace(<span class=\"regexp\">/((,(\\t)*[^\\&#123;])|(,(\\t)*\\&#123;)|(\\[(\\t)*\\&#123;)|(\\&#125;(\\t)*\\])|\\&#125;|\\&#123;|\\[|\\])/g</span>, match =&gt; &#123;</div><div class=\"line\">        <span class=\"keyword\">var</span> str = <span class=\"string\">''</span>;</div><div class=\"line\">        <span class=\"comment\">// 若为&#123;或者,&#123;，则换行后缩进增加</span></div><div class=\"line\">        <span class=\"keyword\">if</span> (match === <span class=\"string\">'&#123;'</span> || match === <span class=\"string\">'['</span> || <span class=\"regexp\">/,(\\t)*\\&#123;/</span>.test(match) || <span class=\"regexp\">/\\[(\\t)*\\&#123;/</span>.test(match)) &#123;</div><div class=\"line\">            indent++;</div><div class=\"line\">            <span class=\"comment\">// 若为&#125;，则换行后缩进减少</span></div><div class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (match === <span class=\"string\">'&#125;'</span> || match === <span class=\"string\">']'</span> || <span class=\"regexp\">/\\&#125;(\\t)*\\]/</span>.test(match)) &#123;</div><div class=\"line\">            indent--;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"comment\">// 转换缩进</span></div><div class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>, tab = <span class=\"string\">''</span>; i &lt; indent; i++) &#123;</div><div class=\"line\">            tab += indentChar;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"comment\">// 若为&#125;，则先换行后进行缩进</span></div><div class=\"line\">        <span class=\"keyword\">if</span> (match === <span class=\"string\">'&#125;'</span> || match === <span class=\"string\">']'</span> || <span class=\"regexp\">/\\&#125;\\]/</span>.test(match)) &#123;</div><div class=\"line\">            str = line + tab + match;</div><div class=\"line\">            <span class=\"comment\">// 若为,后不跟&#123;，则在,后进行换行缩进</span></div><div class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (<span class=\"regexp\">/,(\\t)*[^\\&#123;]/</span>.test(match)) &#123;</div><div class=\"line\">            str = <span class=\"string\">','</span> + line + tab + match.substring(<span class=\"number\">1</span>);</div><div class=\"line\">            <span class=\"comment\">// 其余情况，则在最后进行换行缩进    </span></div><div class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">            str = match + line + tab;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">return</span> str;</div><div class=\"line\">    &#125;);</div><div class=\"line\">    <span class=\"keyword\">return</span> (<span class=\"string\">'&lt;div class=\"json\"&gt;'</span> + str + <span class=\"string\">'&lt;/div&gt;'</span>);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<ul>\n<li>数组不换行实现</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">JsonToHtml</span>(<span class=\"params\">data</span>) </span>&#123;</div><div class=\"line\">    <span class=\"comment\">// 若传入数值为json，则转换为字符串</span></div><div class=\"line\">    <span class=\"keyword\">var</span> str = <span class=\"keyword\">typeof</span> data === <span class=\"string\">'string'</span> ? str : <span class=\"built_in\">JSON</span>.stringify(data);</div><div class=\"line\">    <span class=\"comment\">//将一些需要添加颜色的值匹配出来</span></div><div class=\"line\">    str = str.replace(<span class=\"regexp\">/(\"(\\\\u[a-zA-Z0-9]&#123;4&#125;|\\\\[^u]|[^\\\\\"])*\"(\\s*:)?|\\b(true|false|null)\\b|-?\\d+(?:\\.\\d*)?(?:[eE][+\\-]?\\d+)?)/g</span>, match =&gt; &#123;</div><div class=\"line\">        <span class=\"keyword\">var</span> cls = <span class=\"string\">'number'</span>;</div><div class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"regexp\">/^\"/</span>.test(match)) &#123;</div><div class=\"line\">            <span class=\"keyword\">if</span> (<span class=\"regexp\">/:$/</span>.test(match)) &#123;</div><div class=\"line\">                cls = <span class=\"string\">'key'</span>;</div><div class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">                cls = <span class=\"string\">'string'</span>;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (<span class=\"regexp\">/true|false/</span>.test(match)) &#123;</div><div class=\"line\">            cls = <span class=\"string\">'boolean'</span>;</div><div class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (<span class=\"regexp\">/null/</span>.test(match)) &#123;</div><div class=\"line\">            cls = <span class=\"string\">'null'</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">'&lt;span class=\"'</span> + cls + <span class=\"string\">'\"&gt;'</span> + match + <span class=\"string\">'&lt;/span&gt;'</span>;</div><div class=\"line\">    &#125;);</div><div class=\"line\">    <span class=\"comment\">// 下面将进行换行匹配，包括,后、&#123;后、&#125;前</span></div><div class=\"line\">    <span class=\"keyword\">var</span> indent = <span class=\"number\">0</span>, <span class=\"comment\">// 缩进数</span></div><div class=\"line\">        line = <span class=\"string\">'&lt;/br&gt;'</span>, <span class=\"comment\">// 换行</span></div><div class=\"line\">        indentChar = <span class=\"string\">'&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;'</span>, <span class=\"comment\">// 缩进量</span></div><div class=\"line\">        inArray = <span class=\"literal\">false</span>, <span class=\"comment\">// 是否在数组里</span></div><div class=\"line\">        inObject = <span class=\"literal\">true</span>; <span class=\"comment\">// 是否在对象里</span></div><div class=\"line\">    <span class=\"comment\">// 将需要换行的元素匹配出来</span></div><div class=\"line\">    <span class=\"comment\">// 这里需要注意，逗号,后若有&#123;则不需要换行，此时我们需要将其匹配出来</span></div><div class=\"line\">    str = str.replace(<span class=\"regexp\">/((,(\\t)*[^\\&#123;])|(,(\\t)*\\&#123;)|\\&#125;|\\&#123;|\\]|\\[)/g</span>, match =&gt; &#123;</div><div class=\"line\">        <span class=\"keyword\">var</span> str = <span class=\"string\">''</span>;</div><div class=\"line\">        <span class=\"keyword\">if</span> (match === <span class=\"string\">']'</span>) &#123;</div><div class=\"line\">            inArray = <span class=\"literal\">false</span>;</div><div class=\"line\">            <span class=\"keyword\">return</span> match;</div><div class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (match === <span class=\"string\">'['</span>) &#123;</div><div class=\"line\">            inArray = <span class=\"literal\">true</span>;</div><div class=\"line\">            inObject = <span class=\"literal\">false</span>;</div><div class=\"line\">            <span class=\"keyword\">return</span> match;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"comment\">// 若为&#123;或者,&#123;，则换行后缩进增加</span></div><div class=\"line\">        <span class=\"keyword\">if</span> (match === <span class=\"string\">'&#123;'</span> || <span class=\"regexp\">/,(\\t)*\\&#123;/</span>.test(match)) &#123;</div><div class=\"line\">            indent++;</div><div class=\"line\">            inObject = <span class=\"literal\">true</span>;</div><div class=\"line\">        <span class=\"comment\">// 若为&#125;，则换行后缩进减少</span></div><div class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (match === <span class=\"string\">'&#125;'</span>) &#123;</div><div class=\"line\">            indent--;</div><div class=\"line\">            inObject = <span class=\"literal\">false</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"comment\">// 转换缩进</span></div><div class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>, tab = <span class=\"string\">''</span>; i &lt; indent; i++) &#123;</div><div class=\"line\">            tab += indentChar;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"comment\">// 若为&#125;，则先换行后进行缩进</span></div><div class=\"line\">        <span class=\"keyword\">if</span> (match === <span class=\"string\">'&#125;'</span>) &#123;</div><div class=\"line\">            str = line + tab + match;</div><div class=\"line\">        <span class=\"comment\">// 若为,后不跟&#123;，则在,后进行换行缩进</span></div><div class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (<span class=\"regexp\">/,(\\t)*[^\\&#123;]/</span>.test(match)) &#123;</div><div class=\"line\">            str = (inArray &amp;&amp; !inObject) ? match : (<span class=\"string\">','</span> + line + tab + match.substring(<span class=\"number\">1</span>));</div><div class=\"line\">        <span class=\"comment\">// 其余情况，则在最后进行换行缩进    </span></div><div class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">            str = match + line + tab;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">return</span> str;</div><div class=\"line\">    &#125;);</div><div class=\"line\">    <span class=\"keyword\">return</span> (<span class=\"string\">'&lt;div class=\"json\"&gt;'</span> + str + <span class=\"string\">'&lt;/div&gt;'</span>);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"结束语\"><a href=\"#结束语\" class=\"headerlink\" title=\"结束语\"></a>结束语</h3><p>这里我们讨论了其中一种方式，后面章节我们将使用另外一种方法实现。<br><a href=\"https://github.com/godbasin/godbasin.github.io/blob/blog-codes/json-to-html/json-to-html-1-use-string-regular.html\" target=\"_blank\" rel=\"external\">此处查看项目代码</a><br><a href=\"http://og7yu923g.bkt.clouddn.com/json-to-html-1-use-string-regular.html\" target=\"_blank\" rel=\"external\">此处点击查看页面</a></p>\n","excerpt":"<p>最近项目需要用到将json格式化展示在html页面中，在这里简答整理一下其中逻辑实现，将json转换为字符串然后用正则匹配。<br>","more":"</p>\n<h2 id=\"分析json格式化样式\"><a href=\"#分析json格式化样式\" class=\"headerlink\" title=\"分析json格式化样式\"></a>分析json格式化样式</h2><hr>\n<p>这里我们先分析一下json格式化后的展示方式，例子：<br><figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"attr\">\"type\"</span>: <span class=\"string\">\"type1\"</span>,</div><div class=\"line\">    <span class=\"attr\">\"total\"</span>: <span class=\"number\">111</span>,</div><div class=\"line\">    <span class=\"attr\">\"data\"</span>: [&#123;</div><div class=\"line\">        <span class=\"attr\">\"time\"</span>: <span class=\"string\">\"2016-10-10 22:22:22\"</span>,</div><div class=\"line\">        <span class=\"attr\">\"flag\"</span>: <span class=\"literal\">null</span>,</div><div class=\"line\">        <span class=\"attr\">\"appear\"</span>: &#123;</div><div class=\"line\">            <span class=\"attr\">\"head\"</span>: <span class=\"string\">\"head\"</span>,</div><div class=\"line\">            <span class=\"attr\">\"list\"</span>: [<span class=\"string\">\"123\"</span>,<span class=\"string\">\"123\"</span>,<span class=\"string\">\"123\"</span>]</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;, &#123;</div><div class=\"line\">        <span class=\"attr\">\"time\"</span>: <span class=\"string\">\"2016-10-10 22:22:22\"</span>,</div><div class=\"line\">        <span class=\"attr\">\"flag\"</span>: <span class=\"literal\">true</span>,</div><div class=\"line\">        <span class=\"attr\">\"appear\"</span>: &#123;</div><div class=\"line\">            <span class=\"attr\">\"head\"</span>: <span class=\"string\">\"head\"</span>,</div><div class=\"line\">            <span class=\"attr\">\"list\"</span>: [<span class=\"string\">\"123\"</span>,<span class=\"string\">\"123\"</span>,<span class=\"string\">\"123\"</span>,<span class=\"string\">\"123\"</span>,<span class=\"string\">\"123\"</span>]</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;]</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h3 id=\"数据类型展示\"><a href=\"#数据类型展示\" class=\"headerlink\" title=\"数据类型展示\"></a>数据类型展示</h3><p>从上面的json我们可以大概将数据格式分为以下几种：</p>\n<ul>\n<li>Object对象<ul>\n<li>可通过<code>{}</code>来标志判断</li>\n</ul>\n</li>\n<li>Array数组<ul>\n<li>可通过<code>[]</code>来标志判断</li>\n</ul>\n</li>\n<li>String字符串<ul>\n<li>可通过<code>&quot;&quot;</code>来进行标志判断</li>\n<li>可分为key和value两种</li>\n</ul>\n</li>\n<li>Number数字</li>\n<li>Null</li>\n<li>Boolen</li>\n</ul>\n<h3 id=\"json样式-颜色\"><a href=\"#json样式-颜色\" class=\"headerlink\" title=\"json样式/颜色\"></a>json样式/颜色</h3><p>为了使得展示的体验增加，我们可以根据不同的数据类型设置不同的颜色展示。</p>\n<ul>\n<li>基本符号，<code>{}</code>、<code>[]</code>、<code>:</code>、<code>&quot;&quot;</code>、<code>,</code></li>\n<li>字符串<ul>\n<li>key键值</li>\n<li>value值</li>\n</ul>\n</li>\n<li>数字</li>\n<li>true/false/null</li>\n</ul>\n<h2 id=\"实现逻辑\"><a href=\"#实现逻辑\" class=\"headerlink\" title=\"实现逻辑\"></a>实现逻辑</h2><hr>\n<p>通过上述json分析，我们可以使用两种方式实现json格式化：</p>\n<ul>\n<li>分析JSON.stringify()后的字符串，使用正则把需要的格式匹配替换</li>\n<li>将json转化为object，然后通过js判断数据类型进行格式化</li>\n</ul>\n<p>这里我们先使用第一种方法实现。</p>\n<h3 id=\"字符串匹配\"><a href=\"#字符串匹配\" class=\"headerlink\" title=\"字符串匹配\"></a>字符串匹配</h3><ul>\n<li><p>需要匹配的值</p>\n<ul>\n<li>需要换行的字符，包括<code>,</code>后、<code>{</code>后、<code>}</code>前</li>\n<li>位于行首需要缩进的字符，这里包括字符串key键值，以及<code>}</code></li>\n<li>字符串<ul>\n<li>key键值，使用<code>&quot;&quot;</code>、位于<code>:</code>前</li>\n<li>value值，使用<code>&quot;&quot;</code>、不位于<code>:</code>前</li>\n</ul>\n</li>\n<li>true/false/null</li>\n<li>其余为数字number</li>\n</ul>\n</li>\n<li><p>匹配方法</p>\n<ul>\n<li>字符使用正则，<code>/[,\\{\\}:\\[\\]]/</code></li>\n<li>字符串，<code>/(&quot;(\\\\u[a-zA-Z0-9]{4}|\\\\[^u]|[^\\\\&quot;])*&quot;(\\s*:)?/</code><ul>\n<li>key键值，<code>/:$/</code></li>\n<li>其余为value值</li>\n</ul>\n</li>\n<li>ture/false/null，<code>/\\b(true|false|null)\\b/</code></li>\n<li>数字，<code>/-?\\d+(?:\\.\\d*)?(?:[eE][+\\-]?\\d+)?/</code></li>\n</ul>\n</li>\n<li><p>实现<br>这里将上述的逻辑进行实现。</p>\n</li>\n<li><p>数组换行实现</p>\n</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">JsonToHtml</span>(<span class=\"params\">data</span>) </span>&#123;</div><div class=\"line\">    <span class=\"comment\">// 若传入数值为json，则转换为字符串</span></div><div class=\"line\">    <span class=\"keyword\">var</span> str = <span class=\"keyword\">typeof</span> data === <span class=\"string\">'string'</span> ? str : <span class=\"built_in\">JSON</span>.stringify(data);</div><div class=\"line\">    <span class=\"comment\">//将一些需要添加颜色的值匹配出来</span></div><div class=\"line\">    str = str.replace(<span class=\"regexp\">/(\"(\\\\u[a-zA-Z0-9]&#123;4&#125;|\\\\[^u]|[^\\\\\"])*\"(\\s*:)?|\\b(true|false|null)\\b|-?\\d+(?:\\.\\d*)?(?:[eE][+\\-]?\\d+)?)/g</span>, match =&gt; &#123;</div><div class=\"line\">        <span class=\"keyword\">var</span> cls = <span class=\"string\">'number'</span>;</div><div class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"regexp\">/^\"/</span>.test(match)) &#123;</div><div class=\"line\">            <span class=\"keyword\">if</span> (<span class=\"regexp\">/:$/</span>.test(match)) &#123;</div><div class=\"line\">                cls = <span class=\"string\">'key'</span>;</div><div class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">                cls = <span class=\"string\">'string'</span>;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (<span class=\"regexp\">/true|false/</span>.test(match)) &#123;</div><div class=\"line\">            cls = <span class=\"string\">'boolean'</span>;</div><div class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (<span class=\"regexp\">/null/</span>.test(match)) &#123;</div><div class=\"line\">            cls = <span class=\"string\">'null'</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">'&lt;span class=\"'</span> + cls + <span class=\"string\">'\"&gt;'</span> + match + <span class=\"string\">'&lt;/span&gt;'</span>;</div><div class=\"line\">    &#125;);</div><div class=\"line\">    <span class=\"comment\">// 下面将进行换行匹配，包括,后、&#123;后、&#125;前</span></div><div class=\"line\">    <span class=\"keyword\">var</span> indent = <span class=\"number\">0</span>, <span class=\"comment\">// 缩进数</span></div><div class=\"line\">        line = <span class=\"string\">'&lt;/br&gt;'</span>, <span class=\"comment\">// 换行</span></div><div class=\"line\">        indentChar = <span class=\"string\">'&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;'</span>; <span class=\"comment\">// 缩进量</span></div><div class=\"line\">    <span class=\"comment\">// 将需要换行的元素匹配出来</span></div><div class=\"line\">    <span class=\"comment\">// 这里需要注意，逗号,后若有&#123;则不需要换行，此时我们需要将其匹配出来</span></div><div class=\"line\">    str = str.replace(<span class=\"regexp\">/((,(\\t)*[^\\&#123;])|(,(\\t)*\\&#123;)|(\\[(\\t)*\\&#123;)|(\\&#125;(\\t)*\\])|\\&#125;|\\&#123;|\\[|\\])/g</span>, match =&gt; &#123;</div><div class=\"line\">        <span class=\"keyword\">var</span> str = <span class=\"string\">''</span>;</div><div class=\"line\">        <span class=\"comment\">// 若为&#123;或者,&#123;，则换行后缩进增加</span></div><div class=\"line\">        <span class=\"keyword\">if</span> (match === <span class=\"string\">'&#123;'</span> || match === <span class=\"string\">'['</span> || <span class=\"regexp\">/,(\\t)*\\&#123;/</span>.test(match) || <span class=\"regexp\">/\\[(\\t)*\\&#123;/</span>.test(match)) &#123;</div><div class=\"line\">            indent++;</div><div class=\"line\">            <span class=\"comment\">// 若为&#125;，则换行后缩进减少</span></div><div class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (match === <span class=\"string\">'&#125;'</span> || match === <span class=\"string\">']'</span> || <span class=\"regexp\">/\\&#125;(\\t)*\\]/</span>.test(match)) &#123;</div><div class=\"line\">            indent--;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"comment\">// 转换缩进</span></div><div class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>, tab = <span class=\"string\">''</span>; i &lt; indent; i++) &#123;</div><div class=\"line\">            tab += indentChar;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"comment\">// 若为&#125;，则先换行后进行缩进</span></div><div class=\"line\">        <span class=\"keyword\">if</span> (match === <span class=\"string\">'&#125;'</span> || match === <span class=\"string\">']'</span> || <span class=\"regexp\">/\\&#125;\\]/</span>.test(match)) &#123;</div><div class=\"line\">            str = line + tab + match;</div><div class=\"line\">            <span class=\"comment\">// 若为,后不跟&#123;，则在,后进行换行缩进</span></div><div class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (<span class=\"regexp\">/,(\\t)*[^\\&#123;]/</span>.test(match)) &#123;</div><div class=\"line\">            str = <span class=\"string\">','</span> + line + tab + match.substring(<span class=\"number\">1</span>);</div><div class=\"line\">            <span class=\"comment\">// 其余情况，则在最后进行换行缩进    </span></div><div class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">            str = match + line + tab;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">return</span> str;</div><div class=\"line\">    &#125;);</div><div class=\"line\">    <span class=\"keyword\">return</span> (<span class=\"string\">'&lt;div class=\"json\"&gt;'</span> + str + <span class=\"string\">'&lt;/div&gt;'</span>);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<ul>\n<li>数组不换行实现</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">JsonToHtml</span>(<span class=\"params\">data</span>) </span>&#123;</div><div class=\"line\">    <span class=\"comment\">// 若传入数值为json，则转换为字符串</span></div><div class=\"line\">    <span class=\"keyword\">var</span> str = <span class=\"keyword\">typeof</span> data === <span class=\"string\">'string'</span> ? str : <span class=\"built_in\">JSON</span>.stringify(data);</div><div class=\"line\">    <span class=\"comment\">//将一些需要添加颜色的值匹配出来</span></div><div class=\"line\">    str = str.replace(<span class=\"regexp\">/(\"(\\\\u[a-zA-Z0-9]&#123;4&#125;|\\\\[^u]|[^\\\\\"])*\"(\\s*:)?|\\b(true|false|null)\\b|-?\\d+(?:\\.\\d*)?(?:[eE][+\\-]?\\d+)?)/g</span>, match =&gt; &#123;</div><div class=\"line\">        <span class=\"keyword\">var</span> cls = <span class=\"string\">'number'</span>;</div><div class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"regexp\">/^\"/</span>.test(match)) &#123;</div><div class=\"line\">            <span class=\"keyword\">if</span> (<span class=\"regexp\">/:$/</span>.test(match)) &#123;</div><div class=\"line\">                cls = <span class=\"string\">'key'</span>;</div><div class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">                cls = <span class=\"string\">'string'</span>;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (<span class=\"regexp\">/true|false/</span>.test(match)) &#123;</div><div class=\"line\">            cls = <span class=\"string\">'boolean'</span>;</div><div class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (<span class=\"regexp\">/null/</span>.test(match)) &#123;</div><div class=\"line\">            cls = <span class=\"string\">'null'</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">'&lt;span class=\"'</span> + cls + <span class=\"string\">'\"&gt;'</span> + match + <span class=\"string\">'&lt;/span&gt;'</span>;</div><div class=\"line\">    &#125;);</div><div class=\"line\">    <span class=\"comment\">// 下面将进行换行匹配，包括,后、&#123;后、&#125;前</span></div><div class=\"line\">    <span class=\"keyword\">var</span> indent = <span class=\"number\">0</span>, <span class=\"comment\">// 缩进数</span></div><div class=\"line\">        line = <span class=\"string\">'&lt;/br&gt;'</span>, <span class=\"comment\">// 换行</span></div><div class=\"line\">        indentChar = <span class=\"string\">'&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;'</span>, <span class=\"comment\">// 缩进量</span></div><div class=\"line\">        inArray = <span class=\"literal\">false</span>, <span class=\"comment\">// 是否在数组里</span></div><div class=\"line\">        inObject = <span class=\"literal\">true</span>; <span class=\"comment\">// 是否在对象里</span></div><div class=\"line\">    <span class=\"comment\">// 将需要换行的元素匹配出来</span></div><div class=\"line\">    <span class=\"comment\">// 这里需要注意，逗号,后若有&#123;则不需要换行，此时我们需要将其匹配出来</span></div><div class=\"line\">    str = str.replace(<span class=\"regexp\">/((,(\\t)*[^\\&#123;])|(,(\\t)*\\&#123;)|\\&#125;|\\&#123;|\\]|\\[)/g</span>, match =&gt; &#123;</div><div class=\"line\">        <span class=\"keyword\">var</span> str = <span class=\"string\">''</span>;</div><div class=\"line\">        <span class=\"keyword\">if</span> (match === <span class=\"string\">']'</span>) &#123;</div><div class=\"line\">            inArray = <span class=\"literal\">false</span>;</div><div class=\"line\">            <span class=\"keyword\">return</span> match;</div><div class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (match === <span class=\"string\">'['</span>) &#123;</div><div class=\"line\">            inArray = <span class=\"literal\">true</span>;</div><div class=\"line\">            inObject = <span class=\"literal\">false</span>;</div><div class=\"line\">            <span class=\"keyword\">return</span> match;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"comment\">// 若为&#123;或者,&#123;，则换行后缩进增加</span></div><div class=\"line\">        <span class=\"keyword\">if</span> (match === <span class=\"string\">'&#123;'</span> || <span class=\"regexp\">/,(\\t)*\\&#123;/</span>.test(match)) &#123;</div><div class=\"line\">            indent++;</div><div class=\"line\">            inObject = <span class=\"literal\">true</span>;</div><div class=\"line\">        <span class=\"comment\">// 若为&#125;，则换行后缩进减少</span></div><div class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (match === <span class=\"string\">'&#125;'</span>) &#123;</div><div class=\"line\">            indent--;</div><div class=\"line\">            inObject = <span class=\"literal\">false</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"comment\">// 转换缩进</span></div><div class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>, tab = <span class=\"string\">''</span>; i &lt; indent; i++) &#123;</div><div class=\"line\">            tab += indentChar;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"comment\">// 若为&#125;，则先换行后进行缩进</span></div><div class=\"line\">        <span class=\"keyword\">if</span> (match === <span class=\"string\">'&#125;'</span>) &#123;</div><div class=\"line\">            str = line + tab + match;</div><div class=\"line\">        <span class=\"comment\">// 若为,后不跟&#123;，则在,后进行换行缩进</span></div><div class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (<span class=\"regexp\">/,(\\t)*[^\\&#123;]/</span>.test(match)) &#123;</div><div class=\"line\">            str = (inArray &amp;&amp; !inObject) ? match : (<span class=\"string\">','</span> + line + tab + match.substring(<span class=\"number\">1</span>));</div><div class=\"line\">        <span class=\"comment\">// 其余情况，则在最后进行换行缩进    </span></div><div class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">            str = match + line + tab;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">return</span> str;</div><div class=\"line\">    &#125;);</div><div class=\"line\">    <span class=\"keyword\">return</span> (<span class=\"string\">'&lt;div class=\"json\"&gt;'</span> + str + <span class=\"string\">'&lt;/div&gt;'</span>);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"结束语\"><a href=\"#结束语\" class=\"headerlink\" title=\"结束语\"></a>结束语</h3><p>这里我们讨论了其中一种方式，后面章节我们将使用另外一种方法实现。<br><a href=\"https://github.com/godbasin/godbasin.github.io/blob/blog-codes/json-to-html/json-to-html-1-use-string-regular.html\">此处查看项目代码</a><br><a href=\"http://og7yu923g.bkt.clouddn.com/json-to-html-1-use-string-regular.html\">此处点击查看页面</a></p>"},{"title":"jQuery插件--Canvas实现图片裁剪","date":"2016-06-22T11:44:20.000Z","_content":"需要对图片进行裁剪时，可使用该jQuery插件。本文介绍实现方法。\n<!--more-->\n\n代码放在github上，有兴趣的小伙伴可以下载看\n[picture-cut](https://github.com/godbasin/godbasin.github.io/tree/blog-codes/picture-cut)\n\n最终效果图如下[点击查看页面](http://o92md66rk.bkt.clouddn.com/index.html)\n![image](http://o905ne85q.bkt.clouddn.com/picture-cut.png)\n\n## 插件介绍\n-----\n### 使用方法\n- html\n``` html\n<img class=\"img-to-cut\" src=\"img/1.png\" />\n<img class=\"img-to-cut\" src=\"img/2.png\" />\n<img class=\"img-to-cut\" src=\"img/3.png\" />\n<!--需加上一个包裹的外壳-->\n<section id=\"bsphotocut-con\"></section>\n```\n- js\n``` javascript\n//初始化能进行裁剪的图片：此处使用class='img-to-cut'\n$(\".img-to-cut\").click(function() {\n\t$(this).bsPhotoCut({\n\t\t\"section\": \"#bsphotocut-con\", //外框\n\t\t\"ratio\": \"0\", //裁剪框宽度和高度比例n:m, 为0则不限比例\n\t\t\"success\": function(src, obj) { //src为返回图片src, obj为调用此插件的DOM对象this\n\t\t\tvar _img = $(\"<img src='\" + src + \"' />\");\n\t\t\t$(\"body\").append(_img);\n\t\t}\n\t});\n});\n```\n### 插件封装方法\n- 使用jQuery拓展属性$.fn.xxx来进行封装\n- 这里有超详细教程[《jQuery插件开发精品教程，让你的jQuery提升一个台阶》](http://www.cnblogs.com/Wayou/p/jquery_plugin_tutorial.html)\n- 本插件的封装不是特别完美，因为涉及事件绑定，当时还没想到很好的办法，欢迎小伙伴们提意见\n\n## 图片裁剪原理\n-----\n### 使用HTML5 Canvas实现裁剪过程\n- 创建两个canvas：canvas1--装载图片 canvas2--装载裁剪框\n### canvas1\n- 装载图片，实现图片居中处理，具体相关原理可参考[picture-align插件](https://github.com/godbasin/godbasin.github.io/blob/blog-codes/picture-align/js/style.js)\n\n### canvas2\n- 装载裁剪框，若有限制比例则按照比例缩放\n- 裁剪框溢出canvas1时候的处理\n\n### 获取裁剪后图片\n- 使用Canvas函数getImageData可读取特定区域的图片数据\n- 使用Canvas函数putImageData可导出图片数据至canvas\n- 使用Canvas函数toDataURL可将canvas导出为图片格式\n- 这里需要注意，getImageData可能产生跨域问题，解决办法可自行google（似乎没有特别好的解决方法）\n``` javascript\ncutOver: function(obj) {\n\tvar _options = obj.options,\n\t\t//获取canvas1图片数据\n\t\tcanvas1 = document.getElementById(_options.canvas_id + \"1\"),\n\t\tctx1 = canvas1.getContext('2d'),\n\t\t//导出canvas1图片数据，可能有跨域问题哦\n\t\timgData = ctx1.getImageData(_options.canvas_left, _options.canvas_top, _options.canvas_width, _options.canvas_height),\n\t\tcanvas3 = document.createElement(\"canvas\"),\n\t\tctx3 = canvas3.getContext('2d'),\n\t\t_image;\n\tcanvas3.width = _options.canvas_width;\n\tcanvas3.height = _options.canvas_height;\n\t//将图片数据输出到canvas3\n\tctx3.putImageData(imgData, 0, 0);\n\t//将canvas3转换成图片\n\t_image = canvas3.toDataURL(\"image/jpg\");\n\treturn _image;\n}\n```\n\n\n## 鼠标或者触屏事件处理\n-----\n- 鼠标事件为mousedown/mousemove/mouseup，相应js文件为mousestyle.js\n  - 鼠标获取坐标位置可参考[js判断某个位置是否特定元素]()\n- 触屏事件为touchstart/touchmove/touchend，相应js文件为touchstyle.js\n  - 触屏事件获取坐标位置为event.touches[0].clientX和event.touches[0].clientY\n- 在裁剪过程中，全程绑定开始事件（mousedown/touchstart）的检测\n``` javascript\n//此处为鼠标事件部分代码\nfunction mouseStart() {\n\t//getMousePos为获取鼠标坐标的方法，此处不详细讲解\n\tmousestartX = that.getMousePos(event).x - _l;\n\tmousestartY = that.getMousePos(event).y - _t;\n\t//判断鼠标位置是否为裁剪框的角，并针对不同角绑定不同的移动事件\n\tif (((_left - 20) < mousestartX && mousestartX < (_left + 20)) && ((_top - 20) < mousestartY && mousestartY < (_top + 20))) {\n\t\t//此处为裁剪框左上角，可调整裁剪框大小\n\t\tdocument.addEventListener(\"mousemove\", changeLeftTop, false);\n\t\tdocument.addEventListener(\"mouseup\", mouseEnd, false);\n\t} else if (((_right - 20) < mousestartX && mousestartX < (_right + 20)) && ((_bottom - 20) < mousestartY && mousestartY < (_bottom + 20))) {\n\t\t//此处为裁剪框右下角，可调整裁剪框大小\n\t\tdocument.addEventListener(\"mousemove\", changeRightBottom, false);\n\t\tdocument.addEventListener(\"mouseup\", mouseEnd, false);\n\t} else if ((_left + 20) < mousestartX && (_right - 20) > mousestartX && (_top + 20) < mousestartY && (_bottom - 20) > mousestartY) {\n\t\t//此处为裁剪框里面，可移动裁剪框\n\t\tdocument.addEventListener(\"mousemove\", changeMove, false);\n\t\tdocument.addEventListener(\"mouseup\", mouseEnd, false);\n\t} else {\n\t\treturn;\n\t}\n}\n```\n- 触发开始事件后，开始绑定移动（mousemove/touchmove）和结束事件（mouseup/touchend）的检测\n  - 具体的实现这里不详细说明，大家可查看源文件获取\n\n## 结束语\n-----\n曾经我很喜欢用下划线命名变量，被小伙伴们吐槽过很多遍，这些代码还处于那个时代的产物，小伙伴们请见谅呀。","source":"_posts/picture-cut.md","raw":"---\ntitle: jQuery插件--Canvas实现图片裁剪\ndate: 2016-06-22 19:44:20\ncategories: jQuery杂烩\ntags: 自制插件\n---\n需要对图片进行裁剪时，可使用该jQuery插件。本文介绍实现方法。\n<!--more-->\n\n代码放在github上，有兴趣的小伙伴可以下载看\n[picture-cut](https://github.com/godbasin/godbasin.github.io/tree/blog-codes/picture-cut)\n\n最终效果图如下[点击查看页面](http://o92md66rk.bkt.clouddn.com/index.html)\n![image](http://o905ne85q.bkt.clouddn.com/picture-cut.png)\n\n## 插件介绍\n-----\n### 使用方法\n- html\n``` html\n<img class=\"img-to-cut\" src=\"img/1.png\" />\n<img class=\"img-to-cut\" src=\"img/2.png\" />\n<img class=\"img-to-cut\" src=\"img/3.png\" />\n<!--需加上一个包裹的外壳-->\n<section id=\"bsphotocut-con\"></section>\n```\n- js\n``` javascript\n//初始化能进行裁剪的图片：此处使用class='img-to-cut'\n$(\".img-to-cut\").click(function() {\n\t$(this).bsPhotoCut({\n\t\t\"section\": \"#bsphotocut-con\", //外框\n\t\t\"ratio\": \"0\", //裁剪框宽度和高度比例n:m, 为0则不限比例\n\t\t\"success\": function(src, obj) { //src为返回图片src, obj为调用此插件的DOM对象this\n\t\t\tvar _img = $(\"<img src='\" + src + \"' />\");\n\t\t\t$(\"body\").append(_img);\n\t\t}\n\t});\n});\n```\n### 插件封装方法\n- 使用jQuery拓展属性$.fn.xxx来进行封装\n- 这里有超详细教程[《jQuery插件开发精品教程，让你的jQuery提升一个台阶》](http://www.cnblogs.com/Wayou/p/jquery_plugin_tutorial.html)\n- 本插件的封装不是特别完美，因为涉及事件绑定，当时还没想到很好的办法，欢迎小伙伴们提意见\n\n## 图片裁剪原理\n-----\n### 使用HTML5 Canvas实现裁剪过程\n- 创建两个canvas：canvas1--装载图片 canvas2--装载裁剪框\n### canvas1\n- 装载图片，实现图片居中处理，具体相关原理可参考[picture-align插件](https://github.com/godbasin/godbasin.github.io/blob/blog-codes/picture-align/js/style.js)\n\n### canvas2\n- 装载裁剪框，若有限制比例则按照比例缩放\n- 裁剪框溢出canvas1时候的处理\n\n### 获取裁剪后图片\n- 使用Canvas函数getImageData可读取特定区域的图片数据\n- 使用Canvas函数putImageData可导出图片数据至canvas\n- 使用Canvas函数toDataURL可将canvas导出为图片格式\n- 这里需要注意，getImageData可能产生跨域问题，解决办法可自行google（似乎没有特别好的解决方法）\n``` javascript\ncutOver: function(obj) {\n\tvar _options = obj.options,\n\t\t//获取canvas1图片数据\n\t\tcanvas1 = document.getElementById(_options.canvas_id + \"1\"),\n\t\tctx1 = canvas1.getContext('2d'),\n\t\t//导出canvas1图片数据，可能有跨域问题哦\n\t\timgData = ctx1.getImageData(_options.canvas_left, _options.canvas_top, _options.canvas_width, _options.canvas_height),\n\t\tcanvas3 = document.createElement(\"canvas\"),\n\t\tctx3 = canvas3.getContext('2d'),\n\t\t_image;\n\tcanvas3.width = _options.canvas_width;\n\tcanvas3.height = _options.canvas_height;\n\t//将图片数据输出到canvas3\n\tctx3.putImageData(imgData, 0, 0);\n\t//将canvas3转换成图片\n\t_image = canvas3.toDataURL(\"image/jpg\");\n\treturn _image;\n}\n```\n\n\n## 鼠标或者触屏事件处理\n-----\n- 鼠标事件为mousedown/mousemove/mouseup，相应js文件为mousestyle.js\n  - 鼠标获取坐标位置可参考[js判断某个位置是否特定元素]()\n- 触屏事件为touchstart/touchmove/touchend，相应js文件为touchstyle.js\n  - 触屏事件获取坐标位置为event.touches[0].clientX和event.touches[0].clientY\n- 在裁剪过程中，全程绑定开始事件（mousedown/touchstart）的检测\n``` javascript\n//此处为鼠标事件部分代码\nfunction mouseStart() {\n\t//getMousePos为获取鼠标坐标的方法，此处不详细讲解\n\tmousestartX = that.getMousePos(event).x - _l;\n\tmousestartY = that.getMousePos(event).y - _t;\n\t//判断鼠标位置是否为裁剪框的角，并针对不同角绑定不同的移动事件\n\tif (((_left - 20) < mousestartX && mousestartX < (_left + 20)) && ((_top - 20) < mousestartY && mousestartY < (_top + 20))) {\n\t\t//此处为裁剪框左上角，可调整裁剪框大小\n\t\tdocument.addEventListener(\"mousemove\", changeLeftTop, false);\n\t\tdocument.addEventListener(\"mouseup\", mouseEnd, false);\n\t} else if (((_right - 20) < mousestartX && mousestartX < (_right + 20)) && ((_bottom - 20) < mousestartY && mousestartY < (_bottom + 20))) {\n\t\t//此处为裁剪框右下角，可调整裁剪框大小\n\t\tdocument.addEventListener(\"mousemove\", changeRightBottom, false);\n\t\tdocument.addEventListener(\"mouseup\", mouseEnd, false);\n\t} else if ((_left + 20) < mousestartX && (_right - 20) > mousestartX && (_top + 20) < mousestartY && (_bottom - 20) > mousestartY) {\n\t\t//此处为裁剪框里面，可移动裁剪框\n\t\tdocument.addEventListener(\"mousemove\", changeMove, false);\n\t\tdocument.addEventListener(\"mouseup\", mouseEnd, false);\n\t} else {\n\t\treturn;\n\t}\n}\n```\n- 触发开始事件后，开始绑定移动（mousemove/touchmove）和结束事件（mouseup/touchend）的检测\n  - 具体的实现这里不详细说明，大家可查看源文件获取\n\n## 结束语\n-----\n曾经我很喜欢用下划线命名变量，被小伙伴们吐槽过很多遍，这些代码还处于那个时代的产物，小伙伴们请见谅呀。","slug":"picture-cut","published":1,"updated":"2016-08-20T10:54:21.093Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cix45huh6003ixotu7894kkhk","content":"<p>需要对图片进行裁剪时，可使用该jQuery插件。本文介绍实现方法。<br><a id=\"more\"></a></p>\n<p>代码放在github上，有兴趣的小伙伴可以下载看<br><a href=\"https://github.com/godbasin/godbasin.github.io/tree/blog-codes/picture-cut\" target=\"_blank\" rel=\"external\">picture-cut</a></p>\n<p>最终效果图如下<a href=\"http://o92md66rk.bkt.clouddn.com/index.html\" target=\"_blank\" rel=\"external\">点击查看页面</a><br><img src=\"http://o905ne85q.bkt.clouddn.com/picture-cut.png\" alt=\"image\"></p>\n<h2 id=\"插件介绍\"><a href=\"#插件介绍\" class=\"headerlink\" title=\"插件介绍\"></a>插件介绍</h2><hr>\n<h3 id=\"使用方法\"><a href=\"#使用方法\" class=\"headerlink\" title=\"使用方法\"></a>使用方法</h3><ul>\n<li><p>html</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">class</span>=<span class=\"string\">\"img-to-cut\"</span> <span class=\"attr\">src</span>=<span class=\"string\">\"img/1.png\"</span> /&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">class</span>=<span class=\"string\">\"img-to-cut\"</span> <span class=\"attr\">src</span>=<span class=\"string\">\"img/2.png\"</span> /&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">class</span>=<span class=\"string\">\"img-to-cut\"</span> <span class=\"attr\">src</span>=<span class=\"string\">\"img/3.png\"</span> /&gt;</span></div><div class=\"line\"><span class=\"comment\">&lt;!--需加上一个包裹的外壳--&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">section</span> <span class=\"attr\">id</span>=<span class=\"string\">\"bsphotocut-con\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">section</span>&gt;</span></div></pre></td></tr></table></figure>\n</li>\n<li><p>js</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//初始化能进行裁剪的图片：此处使用class='img-to-cut'</span></div><div class=\"line\">$(<span class=\"string\">\".img-to-cut\"</span>).click(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">  $(<span class=\"keyword\">this</span>).bsPhotoCut(&#123;</div><div class=\"line\">    <span class=\"string\">\"section\"</span>: <span class=\"string\">\"#bsphotocut-con\"</span>, <span class=\"comment\">//外框</span></div><div class=\"line\">    <span class=\"string\">\"ratio\"</span>: <span class=\"string\">\"0\"</span>, <span class=\"comment\">//裁剪框宽度和高度比例n:m, 为0则不限比例</span></div><div class=\"line\">    <span class=\"string\">\"success\"</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">src, obj</span>) </span>&#123; <span class=\"comment\">//src为返回图片src, obj为调用此插件的DOM对象this</span></div><div class=\"line\">      <span class=\"keyword\">var</span> _img = $(<span class=\"string\">\"&lt;img src='\"</span> + src + <span class=\"string\">\"' /&gt;\"</span>);</div><div class=\"line\">      $(<span class=\"string\">\"body\"</span>).append(_img);</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3 id=\"插件封装方法\"><a href=\"#插件封装方法\" class=\"headerlink\" title=\"插件封装方法\"></a>插件封装方法</h3><ul>\n<li>使用jQuery拓展属性$.fn.xxx来进行封装</li>\n<li>这里有超详细教程<a href=\"http://www.cnblogs.com/Wayou/p/jquery_plugin_tutorial.html\" target=\"_blank\" rel=\"external\">《jQuery插件开发精品教程，让你的jQuery提升一个台阶》</a></li>\n<li>本插件的封装不是特别完美，因为涉及事件绑定，当时还没想到很好的办法，欢迎小伙伴们提意见</li>\n</ul>\n<h2 id=\"图片裁剪原理\"><a href=\"#图片裁剪原理\" class=\"headerlink\" title=\"图片裁剪原理\"></a>图片裁剪原理</h2><hr>\n<h3 id=\"使用HTML5-Canvas实现裁剪过程\"><a href=\"#使用HTML5-Canvas实现裁剪过程\" class=\"headerlink\" title=\"使用HTML5 Canvas实现裁剪过程\"></a>使用HTML5 Canvas实现裁剪过程</h3><ul>\n<li>创建两个canvas：canvas1–装载图片 canvas2–装载裁剪框<h3 id=\"canvas1\"><a href=\"#canvas1\" class=\"headerlink\" title=\"canvas1\"></a>canvas1</h3></li>\n<li>装载图片，实现图片居中处理，具体相关原理可参考<a href=\"https://github.com/godbasin/godbasin.github.io/blob/blog-codes/picture-align/js/style.js\" target=\"_blank\" rel=\"external\">picture-align插件</a></li>\n</ul>\n<h3 id=\"canvas2\"><a href=\"#canvas2\" class=\"headerlink\" title=\"canvas2\"></a>canvas2</h3><ul>\n<li>装载裁剪框，若有限制比例则按照比例缩放</li>\n<li>裁剪框溢出canvas1时候的处理</li>\n</ul>\n<h3 id=\"获取裁剪后图片\"><a href=\"#获取裁剪后图片\" class=\"headerlink\" title=\"获取裁剪后图片\"></a>获取裁剪后图片</h3><ul>\n<li>使用Canvas函数getImageData可读取特定区域的图片数据</li>\n<li>使用Canvas函数putImageData可导出图片数据至canvas</li>\n<li>使用Canvas函数toDataURL可将canvas导出为图片格式</li>\n<li>这里需要注意，getImageData可能产生跨域问题，解决办法可自行google（似乎没有特别好的解决方法）<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\">cutOver: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">obj</span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">var</span> _options = obj.options,</div><div class=\"line\">    <span class=\"comment\">//获取canvas1图片数据</span></div><div class=\"line\">    canvas1 = <span class=\"built_in\">document</span>.getElementById(_options.canvas_id + <span class=\"string\">\"1\"</span>),</div><div class=\"line\">    ctx1 = canvas1.getContext(<span class=\"string\">'2d'</span>),</div><div class=\"line\">    <span class=\"comment\">//导出canvas1图片数据，可能有跨域问题哦</span></div><div class=\"line\">    imgData = ctx1.getImageData(_options.canvas_left, _options.canvas_top, _options.canvas_width, _options.canvas_height),</div><div class=\"line\">    canvas3 = <span class=\"built_in\">document</span>.createElement(<span class=\"string\">\"canvas\"</span>),</div><div class=\"line\">    ctx3 = canvas3.getContext(<span class=\"string\">'2d'</span>),</div><div class=\"line\">    _image;</div><div class=\"line\">  canvas3.width = _options.canvas_width;</div><div class=\"line\">  canvas3.height = _options.canvas_height;</div><div class=\"line\">  <span class=\"comment\">//将图片数据输出到canvas3</span></div><div class=\"line\">  ctx3.putImageData(imgData, <span class=\"number\">0</span>, <span class=\"number\">0</span>);</div><div class=\"line\">  <span class=\"comment\">//将canvas3转换成图片</span></div><div class=\"line\">  _image = canvas3.toDataURL(<span class=\"string\">\"image/jpg\"</span>);</div><div class=\"line\">  <span class=\"keyword\">return</span> _image;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<h2 id=\"鼠标或者触屏事件处理\"><a href=\"#鼠标或者触屏事件处理\" class=\"headerlink\" title=\"鼠标或者触屏事件处理\"></a>鼠标或者触屏事件处理</h2><hr>\n<ul>\n<li>鼠标事件为mousedown/mousemove/mouseup，相应js文件为mousestyle.js<ul>\n<li>鼠标获取坐标位置可参考<a href=\"\">js判断某个位置是否特定元素</a></li>\n</ul>\n</li>\n<li>触屏事件为touchstart/touchmove/touchend，相应js文件为touchstyle.js<ul>\n<li>触屏事件获取坐标位置为event.touches[0].clientX和event.touches[0].clientY</li>\n</ul>\n</li>\n<li><p>在裁剪过程中，全程绑定开始事件（mousedown/touchstart）的检测</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//此处为鼠标事件部分代码</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">mouseStart</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">  <span class=\"comment\">//getMousePos为获取鼠标坐标的方法，此处不详细讲解</span></div><div class=\"line\">  mousestartX = that.getMousePos(event).x - _l;</div><div class=\"line\">  mousestartY = that.getMousePos(event).y - _t;</div><div class=\"line\">  <span class=\"comment\">//判断鼠标位置是否为裁剪框的角，并针对不同角绑定不同的移动事件</span></div><div class=\"line\">  <span class=\"keyword\">if</span> (((_left - <span class=\"number\">20</span>) &lt; mousestartX &amp;&amp; mousestartX &lt; (_left + <span class=\"number\">20</span>)) &amp;&amp; ((_top - <span class=\"number\">20</span>) &lt; mousestartY &amp;&amp; mousestartY &lt; (_top + <span class=\"number\">20</span>))) &#123;</div><div class=\"line\">    <span class=\"comment\">//此处为裁剪框左上角，可调整裁剪框大小</span></div><div class=\"line\">    <span class=\"built_in\">document</span>.addEventListener(<span class=\"string\">\"mousemove\"</span>, changeLeftTop, <span class=\"literal\">false</span>);</div><div class=\"line\">    <span class=\"built_in\">document</span>.addEventListener(<span class=\"string\">\"mouseup\"</span>, mouseEnd, <span class=\"literal\">false</span>);</div><div class=\"line\">  &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (((_right - <span class=\"number\">20</span>) &lt; mousestartX &amp;&amp; mousestartX &lt; (_right + <span class=\"number\">20</span>)) &amp;&amp; ((_bottom - <span class=\"number\">20</span>) &lt; mousestartY &amp;&amp; mousestartY &lt; (_bottom + <span class=\"number\">20</span>))) &#123;</div><div class=\"line\">    <span class=\"comment\">//此处为裁剪框右下角，可调整裁剪框大小</span></div><div class=\"line\">    <span class=\"built_in\">document</span>.addEventListener(<span class=\"string\">\"mousemove\"</span>, changeRightBottom, <span class=\"literal\">false</span>);</div><div class=\"line\">    <span class=\"built_in\">document</span>.addEventListener(<span class=\"string\">\"mouseup\"</span>, mouseEnd, <span class=\"literal\">false</span>);</div><div class=\"line\">  &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> ((_left + <span class=\"number\">20</span>) &lt; mousestartX &amp;&amp; (_right - <span class=\"number\">20</span>) &gt; mousestartX &amp;&amp; (_top + <span class=\"number\">20</span>) &lt; mousestartY &amp;&amp; (_bottom - <span class=\"number\">20</span>) &gt; mousestartY) &#123;</div><div class=\"line\">    <span class=\"comment\">//此处为裁剪框里面，可移动裁剪框</span></div><div class=\"line\">    <span class=\"built_in\">document</span>.addEventListener(<span class=\"string\">\"mousemove\"</span>, changeMove, <span class=\"literal\">false</span>);</div><div class=\"line\">    <span class=\"built_in\">document</span>.addEventListener(<span class=\"string\">\"mouseup\"</span>, mouseEnd, <span class=\"literal\">false</span>);</div><div class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">    <span class=\"keyword\">return</span>;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n<li><p>触发开始事件后，开始绑定移动（mousemove/touchmove）和结束事件（mouseup/touchend）的检测</p>\n<ul>\n<li>具体的实现这里不详细说明，大家可查看源文件获取</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"结束语\"><a href=\"#结束语\" class=\"headerlink\" title=\"结束语\"></a>结束语</h2><hr>\n<p>曾经我很喜欢用下划线命名变量，被小伙伴们吐槽过很多遍，这些代码还处于那个时代的产物，小伙伴们请见谅呀。</p>\n","excerpt":"<p>需要对图片进行裁剪时，可使用该jQuery插件。本文介绍实现方法。<br>","more":"</p>\n<p>代码放在github上，有兴趣的小伙伴可以下载看<br><a href=\"https://github.com/godbasin/godbasin.github.io/tree/blog-codes/picture-cut\">picture-cut</a></p>\n<p>最终效果图如下<a href=\"http://o92md66rk.bkt.clouddn.com/index.html\">点击查看页面</a><br><img src=\"http://o905ne85q.bkt.clouddn.com/picture-cut.png\" alt=\"image\"></p>\n<h2 id=\"插件介绍\"><a href=\"#插件介绍\" class=\"headerlink\" title=\"插件介绍\"></a>插件介绍</h2><hr>\n<h3 id=\"使用方法\"><a href=\"#使用方法\" class=\"headerlink\" title=\"使用方法\"></a>使用方法</h3><ul>\n<li><p>html</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">class</span>=<span class=\"string\">\"img-to-cut\"</span> <span class=\"attr\">src</span>=<span class=\"string\">\"img/1.png\"</span> /&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">class</span>=<span class=\"string\">\"img-to-cut\"</span> <span class=\"attr\">src</span>=<span class=\"string\">\"img/2.png\"</span> /&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">class</span>=<span class=\"string\">\"img-to-cut\"</span> <span class=\"attr\">src</span>=<span class=\"string\">\"img/3.png\"</span> /&gt;</span></div><div class=\"line\"><span class=\"comment\">&lt;!--需加上一个包裹的外壳--&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">section</span> <span class=\"attr\">id</span>=<span class=\"string\">\"bsphotocut-con\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">section</span>&gt;</span></div></pre></td></tr></table></figure>\n</li>\n<li><p>js</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//初始化能进行裁剪的图片：此处使用class='img-to-cut'</span></div><div class=\"line\">$(<span class=\"string\">\".img-to-cut\"</span>).click(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">  $(<span class=\"keyword\">this</span>).bsPhotoCut(&#123;</div><div class=\"line\">    <span class=\"string\">\"section\"</span>: <span class=\"string\">\"#bsphotocut-con\"</span>, <span class=\"comment\">//外框</span></div><div class=\"line\">    <span class=\"string\">\"ratio\"</span>: <span class=\"string\">\"0\"</span>, <span class=\"comment\">//裁剪框宽度和高度比例n:m, 为0则不限比例</span></div><div class=\"line\">    <span class=\"string\">\"success\"</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">src, obj</span>) </span>&#123; <span class=\"comment\">//src为返回图片src, obj为调用此插件的DOM对象this</span></div><div class=\"line\">      <span class=\"keyword\">var</span> _img = $(<span class=\"string\">\"&lt;img src='\"</span> + src + <span class=\"string\">\"' /&gt;\"</span>);</div><div class=\"line\">      $(<span class=\"string\">\"body\"</span>).append(_img);</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3 id=\"插件封装方法\"><a href=\"#插件封装方法\" class=\"headerlink\" title=\"插件封装方法\"></a>插件封装方法</h3><ul>\n<li>使用jQuery拓展属性$.fn.xxx来进行封装</li>\n<li>这里有超详细教程<a href=\"http://www.cnblogs.com/Wayou/p/jquery_plugin_tutorial.html\">《jQuery插件开发精品教程，让你的jQuery提升一个台阶》</a></li>\n<li>本插件的封装不是特别完美，因为涉及事件绑定，当时还没想到很好的办法，欢迎小伙伴们提意见</li>\n</ul>\n<h2 id=\"图片裁剪原理\"><a href=\"#图片裁剪原理\" class=\"headerlink\" title=\"图片裁剪原理\"></a>图片裁剪原理</h2><hr>\n<h3 id=\"使用HTML5-Canvas实现裁剪过程\"><a href=\"#使用HTML5-Canvas实现裁剪过程\" class=\"headerlink\" title=\"使用HTML5 Canvas实现裁剪过程\"></a>使用HTML5 Canvas实现裁剪过程</h3><ul>\n<li>创建两个canvas：canvas1–装载图片 canvas2–装载裁剪框<h3 id=\"canvas1\"><a href=\"#canvas1\" class=\"headerlink\" title=\"canvas1\"></a>canvas1</h3></li>\n<li>装载图片，实现图片居中处理，具体相关原理可参考<a href=\"https://github.com/godbasin/godbasin.github.io/blob/blog-codes/picture-align/js/style.js\">picture-align插件</a></li>\n</ul>\n<h3 id=\"canvas2\"><a href=\"#canvas2\" class=\"headerlink\" title=\"canvas2\"></a>canvas2</h3><ul>\n<li>装载裁剪框，若有限制比例则按照比例缩放</li>\n<li>裁剪框溢出canvas1时候的处理</li>\n</ul>\n<h3 id=\"获取裁剪后图片\"><a href=\"#获取裁剪后图片\" class=\"headerlink\" title=\"获取裁剪后图片\"></a>获取裁剪后图片</h3><ul>\n<li>使用Canvas函数getImageData可读取特定区域的图片数据</li>\n<li>使用Canvas函数putImageData可导出图片数据至canvas</li>\n<li>使用Canvas函数toDataURL可将canvas导出为图片格式</li>\n<li>这里需要注意，getImageData可能产生跨域问题，解决办法可自行google（似乎没有特别好的解决方法）<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\">cutOver: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">obj</span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">var</span> _options = obj.options,</div><div class=\"line\">    <span class=\"comment\">//获取canvas1图片数据</span></div><div class=\"line\">    canvas1 = <span class=\"built_in\">document</span>.getElementById(_options.canvas_id + <span class=\"string\">\"1\"</span>),</div><div class=\"line\">    ctx1 = canvas1.getContext(<span class=\"string\">'2d'</span>),</div><div class=\"line\">    <span class=\"comment\">//导出canvas1图片数据，可能有跨域问题哦</span></div><div class=\"line\">    imgData = ctx1.getImageData(_options.canvas_left, _options.canvas_top, _options.canvas_width, _options.canvas_height),</div><div class=\"line\">    canvas3 = <span class=\"built_in\">document</span>.createElement(<span class=\"string\">\"canvas\"</span>),</div><div class=\"line\">    ctx3 = canvas3.getContext(<span class=\"string\">'2d'</span>),</div><div class=\"line\">    _image;</div><div class=\"line\">  canvas3.width = _options.canvas_width;</div><div class=\"line\">  canvas3.height = _options.canvas_height;</div><div class=\"line\">  <span class=\"comment\">//将图片数据输出到canvas3</span></div><div class=\"line\">  ctx3.putImageData(imgData, <span class=\"number\">0</span>, <span class=\"number\">0</span>);</div><div class=\"line\">  <span class=\"comment\">//将canvas3转换成图片</span></div><div class=\"line\">  _image = canvas3.toDataURL(<span class=\"string\">\"image/jpg\"</span>);</div><div class=\"line\">  <span class=\"keyword\">return</span> _image;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<h2 id=\"鼠标或者触屏事件处理\"><a href=\"#鼠标或者触屏事件处理\" class=\"headerlink\" title=\"鼠标或者触屏事件处理\"></a>鼠标或者触屏事件处理</h2><hr>\n<ul>\n<li>鼠标事件为mousedown/mousemove/mouseup，相应js文件为mousestyle.js<ul>\n<li>鼠标获取坐标位置可参考<a href=\"\">js判断某个位置是否特定元素</a></li>\n</ul>\n</li>\n<li>触屏事件为touchstart/touchmove/touchend，相应js文件为touchstyle.js<ul>\n<li>触屏事件获取坐标位置为event.touches[0].clientX和event.touches[0].clientY</li>\n</ul>\n</li>\n<li><p>在裁剪过程中，全程绑定开始事件（mousedown/touchstart）的检测</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//此处为鼠标事件部分代码</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">mouseStart</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">  <span class=\"comment\">//getMousePos为获取鼠标坐标的方法，此处不详细讲解</span></div><div class=\"line\">  mousestartX = that.getMousePos(event).x - _l;</div><div class=\"line\">  mousestartY = that.getMousePos(event).y - _t;</div><div class=\"line\">  <span class=\"comment\">//判断鼠标位置是否为裁剪框的角，并针对不同角绑定不同的移动事件</span></div><div class=\"line\">  <span class=\"keyword\">if</span> (((_left - <span class=\"number\">20</span>) &lt; mousestartX &amp;&amp; mousestartX &lt; (_left + <span class=\"number\">20</span>)) &amp;&amp; ((_top - <span class=\"number\">20</span>) &lt; mousestartY &amp;&amp; mousestartY &lt; (_top + <span class=\"number\">20</span>))) &#123;</div><div class=\"line\">    <span class=\"comment\">//此处为裁剪框左上角，可调整裁剪框大小</span></div><div class=\"line\">    <span class=\"built_in\">document</span>.addEventListener(<span class=\"string\">\"mousemove\"</span>, changeLeftTop, <span class=\"literal\">false</span>);</div><div class=\"line\">    <span class=\"built_in\">document</span>.addEventListener(<span class=\"string\">\"mouseup\"</span>, mouseEnd, <span class=\"literal\">false</span>);</div><div class=\"line\">  &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (((_right - <span class=\"number\">20</span>) &lt; mousestartX &amp;&amp; mousestartX &lt; (_right + <span class=\"number\">20</span>)) &amp;&amp; ((_bottom - <span class=\"number\">20</span>) &lt; mousestartY &amp;&amp; mousestartY &lt; (_bottom + <span class=\"number\">20</span>))) &#123;</div><div class=\"line\">    <span class=\"comment\">//此处为裁剪框右下角，可调整裁剪框大小</span></div><div class=\"line\">    <span class=\"built_in\">document</span>.addEventListener(<span class=\"string\">\"mousemove\"</span>, changeRightBottom, <span class=\"literal\">false</span>);</div><div class=\"line\">    <span class=\"built_in\">document</span>.addEventListener(<span class=\"string\">\"mouseup\"</span>, mouseEnd, <span class=\"literal\">false</span>);</div><div class=\"line\">  &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> ((_left + <span class=\"number\">20</span>) &lt; mousestartX &amp;&amp; (_right - <span class=\"number\">20</span>) &gt; mousestartX &amp;&amp; (_top + <span class=\"number\">20</span>) &lt; mousestartY &amp;&amp; (_bottom - <span class=\"number\">20</span>) &gt; mousestartY) &#123;</div><div class=\"line\">    <span class=\"comment\">//此处为裁剪框里面，可移动裁剪框</span></div><div class=\"line\">    <span class=\"built_in\">document</span>.addEventListener(<span class=\"string\">\"mousemove\"</span>, changeMove, <span class=\"literal\">false</span>);</div><div class=\"line\">    <span class=\"built_in\">document</span>.addEventListener(<span class=\"string\">\"mouseup\"</span>, mouseEnd, <span class=\"literal\">false</span>);</div><div class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">    <span class=\"keyword\">return</span>;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n<li><p>触发开始事件后，开始绑定移动（mousemove/touchmove）和结束事件（mouseup/touchend）的检测</p>\n<ul>\n<li>具体的实现这里不详细说明，大家可查看源文件获取</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"结束语\"><a href=\"#结束语\" class=\"headerlink\" title=\"结束语\"></a>结束语</h2><hr>\n<p>曾经我很喜欢用下划线命名变量，被小伙伴们吐槽过很多遍，这些代码还处于那个时代的产物，小伙伴们请见谅呀。</p>"},{"title":"js判断某个位置是否特定元素","date":"2016-06-18T16:15:36.000Z","_content":"需要获取鼠标所在位置是否为某种特定元素，然后进行相关处理。本文介绍一种实现方法。\n<!--more-->\n\n## 常用坐标相关属性\n-----\n首先，获取鼠标坐标的兼容问题大家都很熟悉了。\n此处粘贴一些常用坐标相关属性：\n``` javascript\nscrollHeight //获取对象的滚动高度\nscrollLeft //设置或获取位于对象左边界和窗口中目前可见内容的最左端之间的距离\nscrollTop //设置或获取位于对象最顶端和窗口中可见内容的最顶端之间的距离\nscrollWidth //获取对象的滚动宽度\noffsetHeight //获取对象相对于版面或由父坐标 offsetParent 属性指定的父坐标的高度\noffsetLeft //获取对象相对于版面或由 offsetParent 属性指定的父坐标的计算左侧位置\noffsetTop //获取对象相对于版面或由 offsetTop 属性指定的父坐标的计算顶端位置\nevent.clientX //相对文档的水平座标\nevent.clientY //相对文档的垂直座标\nevent.offsetX //相对容器的水平坐标\nevent.offsetY //相对容器的垂直坐标\ndocument.documentElement.scrollTop 垂直方向滚动的值\nevent.clientX + document.documentElement.scrollTop //相对文档的水平座标+垂直方向滚动的量\n```\n\n## 绑定鼠标事件\n-----\n现在我们来获取鼠标位置\n此处需对IE事件、FireFox事件等兼容\n- 绑定方式有几种\n  - 1.在元素中，onXXX（事件）绑定\n  - 2.在Javascript代码中，获得元素并为元素的onXXX（事件）绑定\n\n``` javascript\nif (document.addEventListener) {\n\telement.addEventListener(event, eventFunction);//IE之外的绑定事件方法\n}else{\n\telement.attachEvent(event, eventFunction);//IE \n}\n```\n## 获取鼠标坐标\n-----\nIE中可以直接使用 event对象，而 FF中则不可以\n- 1.window.event || arguments.callee.caller.arguments[0]获取event对象\n- 2.将 event 作为参数来传递, function xxx(e){var e = e || window.event;}\n\n## 计算鼠标位置\n-----\n``` javascript\nvar eventX = e.pageX - scrollX || e.clientX ;\nvar eventY = e.pageY - scrollY || e.clientY ;\n```\n\n## 获取当前位置是否有特定元素\n-----\n- 给需要检测的元素绑定id或者自定义属性\n- 通过不断获取当前元素父元素，直至获取成功（通过自定义属性判断）或者元素为body\n\n```javascript\nfunction fnGetTable(oEl) {\n\twhile (null !== oEl && $(oEl).attr(\"自定义属性\") !== \"特定属性值\" && target.tagName !== \"BODY\") {\n\t\toEl = oEl.parentElement;\n\t}\n\treturn oEl;\n}\n```\n\n## 实例：下拉菜单点击外围自动关闭\n-----\n- 通过点击当前元素时绑定到事件\n\n``` javascript\nif (document.addEventListener) {\n\telement.addEventListener(event, clickOutside);//IE之外的绑定事件方法\n}else{\n\telement.attachEvent(event, clickOutside);//IE \n}\n```\n\n- clickOutside对象维护队列，该队列对象为id和callback事件\n\n``` javascript\nfunction clickOutside() {\t\n\tvar list = {}; //队列, 对象为id和callback事件\n\treturn function(id, cb) {\n\t\tlist.id.push(id); //id队列\n\t\tlist.cb[id] = cb; //callback事件队列\n\t\t//绑定点击事件\n\t\t$(document).off(\"click\").on(\"click\", function(e) {\n\t\t\tvar e = e || window.event,\n\t\t\t\teventX = e.pageX - scrollX || e.clientX,\n\t\t\t\teventY = e.pageY - scrollY || e.clientY,\n\t\t\t\ttarget = document.elementFromPoint(eventX, eventY),\n\t\t\t\tid = $(target).attr(\"id\");\n\t\t\t//判断当前事件位置是否有ID队列里元素\n\t\t\twhile (list.id.indexOf(id) == -1 && target.tagName != \"BODY\") {\n\t\t\t\ttarget = target.parentElement;\n\t\t\t\tid = $(target).attr(\"id\");\n\t\t\t}\n\t\t\t//若有相关元素，则调用对应callback事件，完了移出队列\n\t\t\tfor (i in list.id) {\n\t\t\t\tif (list.id[i] != id) {\n\t\t\t\t\tlist.cb[list.id[i]]();\n\t\t\t\t\tlist.cb.splice(list.id[i], 1);\n\t\t\t\t\tlist.id.splice(i, 1);\n\t\t\t\t}\n\t\t\t}\n\t\t\t//若队列为空，关闭事件绑定\n\t\t\tif (!list.id.length) $(document).off(\"click\");\n\t\t});\n\t};\n}\n```\n\n## 结束语\n-----\n解决办法很多，优化方法也很多，代码都是在一次又一次重构和提炼中变得出彩的呢。","source":"_posts/position-object.md","raw":"---\ntitle: js判断某个位置是否特定元素\ndate: 2016-06-19 00:15:36\ncategories: js什锦\ntags: 逻辑实现\n---\n需要获取鼠标所在位置是否为某种特定元素，然后进行相关处理。本文介绍一种实现方法。\n<!--more-->\n\n## 常用坐标相关属性\n-----\n首先，获取鼠标坐标的兼容问题大家都很熟悉了。\n此处粘贴一些常用坐标相关属性：\n``` javascript\nscrollHeight //获取对象的滚动高度\nscrollLeft //设置或获取位于对象左边界和窗口中目前可见内容的最左端之间的距离\nscrollTop //设置或获取位于对象最顶端和窗口中可见内容的最顶端之间的距离\nscrollWidth //获取对象的滚动宽度\noffsetHeight //获取对象相对于版面或由父坐标 offsetParent 属性指定的父坐标的高度\noffsetLeft //获取对象相对于版面或由 offsetParent 属性指定的父坐标的计算左侧位置\noffsetTop //获取对象相对于版面或由 offsetTop 属性指定的父坐标的计算顶端位置\nevent.clientX //相对文档的水平座标\nevent.clientY //相对文档的垂直座标\nevent.offsetX //相对容器的水平坐标\nevent.offsetY //相对容器的垂直坐标\ndocument.documentElement.scrollTop 垂直方向滚动的值\nevent.clientX + document.documentElement.scrollTop //相对文档的水平座标+垂直方向滚动的量\n```\n\n## 绑定鼠标事件\n-----\n现在我们来获取鼠标位置\n此处需对IE事件、FireFox事件等兼容\n- 绑定方式有几种\n  - 1.在元素中，onXXX（事件）绑定\n  - 2.在Javascript代码中，获得元素并为元素的onXXX（事件）绑定\n\n``` javascript\nif (document.addEventListener) {\n\telement.addEventListener(event, eventFunction);//IE之外的绑定事件方法\n}else{\n\telement.attachEvent(event, eventFunction);//IE \n}\n```\n## 获取鼠标坐标\n-----\nIE中可以直接使用 event对象，而 FF中则不可以\n- 1.window.event || arguments.callee.caller.arguments[0]获取event对象\n- 2.将 event 作为参数来传递, function xxx(e){var e = e || window.event;}\n\n## 计算鼠标位置\n-----\n``` javascript\nvar eventX = e.pageX - scrollX || e.clientX ;\nvar eventY = e.pageY - scrollY || e.clientY ;\n```\n\n## 获取当前位置是否有特定元素\n-----\n- 给需要检测的元素绑定id或者自定义属性\n- 通过不断获取当前元素父元素，直至获取成功（通过自定义属性判断）或者元素为body\n\n```javascript\nfunction fnGetTable(oEl) {\n\twhile (null !== oEl && $(oEl).attr(\"自定义属性\") !== \"特定属性值\" && target.tagName !== \"BODY\") {\n\t\toEl = oEl.parentElement;\n\t}\n\treturn oEl;\n}\n```\n\n## 实例：下拉菜单点击外围自动关闭\n-----\n- 通过点击当前元素时绑定到事件\n\n``` javascript\nif (document.addEventListener) {\n\telement.addEventListener(event, clickOutside);//IE之外的绑定事件方法\n}else{\n\telement.attachEvent(event, clickOutside);//IE \n}\n```\n\n- clickOutside对象维护队列，该队列对象为id和callback事件\n\n``` javascript\nfunction clickOutside() {\t\n\tvar list = {}; //队列, 对象为id和callback事件\n\treturn function(id, cb) {\n\t\tlist.id.push(id); //id队列\n\t\tlist.cb[id] = cb; //callback事件队列\n\t\t//绑定点击事件\n\t\t$(document).off(\"click\").on(\"click\", function(e) {\n\t\t\tvar e = e || window.event,\n\t\t\t\teventX = e.pageX - scrollX || e.clientX,\n\t\t\t\teventY = e.pageY - scrollY || e.clientY,\n\t\t\t\ttarget = document.elementFromPoint(eventX, eventY),\n\t\t\t\tid = $(target).attr(\"id\");\n\t\t\t//判断当前事件位置是否有ID队列里元素\n\t\t\twhile (list.id.indexOf(id) == -1 && target.tagName != \"BODY\") {\n\t\t\t\ttarget = target.parentElement;\n\t\t\t\tid = $(target).attr(\"id\");\n\t\t\t}\n\t\t\t//若有相关元素，则调用对应callback事件，完了移出队列\n\t\t\tfor (i in list.id) {\n\t\t\t\tif (list.id[i] != id) {\n\t\t\t\t\tlist.cb[list.id[i]]();\n\t\t\t\t\tlist.cb.splice(list.id[i], 1);\n\t\t\t\t\tlist.id.splice(i, 1);\n\t\t\t\t}\n\t\t\t}\n\t\t\t//若队列为空，关闭事件绑定\n\t\t\tif (!list.id.length) $(document).off(\"click\");\n\t\t});\n\t};\n}\n```\n\n## 结束语\n-----\n解决办法很多，优化方法也很多，代码都是在一次又一次重构和提炼中变得出彩的呢。","slug":"position-object","published":1,"updated":"2016-08-20T10:54:21.096Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cix45huh8003kxotu79o6cf3l","content":"<p>需要获取鼠标所在位置是否为某种特定元素，然后进行相关处理。本文介绍一种实现方法。<br><a id=\"more\"></a></p>\n<h2 id=\"常用坐标相关属性\"><a href=\"#常用坐标相关属性\" class=\"headerlink\" title=\"常用坐标相关属性\"></a>常用坐标相关属性</h2><hr>\n<p>首先，获取鼠标坐标的兼容问题大家都很熟悉了。<br>此处粘贴一些常用坐标相关属性：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\">scrollHeight <span class=\"comment\">//获取对象的滚动高度</span></div><div class=\"line\">scrollLeft <span class=\"comment\">//设置或获取位于对象左边界和窗口中目前可见内容的最左端之间的距离</span></div><div class=\"line\">scrollTop <span class=\"comment\">//设置或获取位于对象最顶端和窗口中可见内容的最顶端之间的距离</span></div><div class=\"line\">scrollWidth <span class=\"comment\">//获取对象的滚动宽度</span></div><div class=\"line\">offsetHeight <span class=\"comment\">//获取对象相对于版面或由父坐标 offsetParent 属性指定的父坐标的高度</span></div><div class=\"line\">offsetLeft <span class=\"comment\">//获取对象相对于版面或由 offsetParent 属性指定的父坐标的计算左侧位置</span></div><div class=\"line\">offsetTop <span class=\"comment\">//获取对象相对于版面或由 offsetTop 属性指定的父坐标的计算顶端位置</span></div><div class=\"line\">event.clientX <span class=\"comment\">//相对文档的水平座标</span></div><div class=\"line\">event.clientY <span class=\"comment\">//相对文档的垂直座标</span></div><div class=\"line\">event.offsetX <span class=\"comment\">//相对容器的水平坐标</span></div><div class=\"line\">event.offsetY <span class=\"comment\">//相对容器的垂直坐标</span></div><div class=\"line\"><span class=\"built_in\">document</span>.documentElement.scrollTop 垂直方向滚动的值</div><div class=\"line\">event.clientX + <span class=\"built_in\">document</span>.documentElement.scrollTop <span class=\"comment\">//相对文档的水平座标+垂直方向滚动的量</span></div></pre></td></tr></table></figure></p>\n<h2 id=\"绑定鼠标事件\"><a href=\"#绑定鼠标事件\" class=\"headerlink\" title=\"绑定鼠标事件\"></a>绑定鼠标事件</h2><hr>\n<p>现在我们来获取鼠标位置<br>此处需对IE事件、FireFox事件等兼容</p>\n<ul>\n<li>绑定方式有几种<ul>\n<li>1.在元素中，onXXX（事件）绑定</li>\n<li>2.在Javascript代码中，获得元素并为元素的onXXX（事件）绑定</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">if</span> (<span class=\"built_in\">document</span>.addEventListener) &#123;</div><div class=\"line\">  element.addEventListener(event, eventFunction);<span class=\"comment\">//IE之外的绑定事件方法</span></div><div class=\"line\">&#125;<span class=\"keyword\">else</span>&#123;</div><div class=\"line\">  element.attachEvent(event, eventFunction);<span class=\"comment\">//IE </span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"获取鼠标坐标\"><a href=\"#获取鼠标坐标\" class=\"headerlink\" title=\"获取鼠标坐标\"></a>获取鼠标坐标</h2><hr>\n<p>IE中可以直接使用 event对象，而 FF中则不可以</p>\n<ul>\n<li>1.window.event || arguments.callee.caller.arguments[0]获取event对象</li>\n<li>2.将 event 作为参数来传递, function xxx(e){var e = e || window.event;}</li>\n</ul>\n<h2 id=\"计算鼠标位置\"><a href=\"#计算鼠标位置\" class=\"headerlink\" title=\"计算鼠标位置\"></a>计算鼠标位置</h2><hr>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> eventX = e.pageX - scrollX || e.clientX ;</div><div class=\"line\"><span class=\"keyword\">var</span> eventY = e.pageY - scrollY || e.clientY ;</div></pre></td></tr></table></figure>\n<h2 id=\"获取当前位置是否有特定元素\"><a href=\"#获取当前位置是否有特定元素\" class=\"headerlink\" title=\"获取当前位置是否有特定元素\"></a>获取当前位置是否有特定元素</h2><hr>\n<ul>\n<li>给需要检测的元素绑定id或者自定义属性</li>\n<li>通过不断获取当前元素父元素，直至获取成功（通过自定义属性判断）或者元素为body</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fnGetTable</span>(<span class=\"params\">oEl</span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">while</span> (<span class=\"literal\">null</span> !== oEl &amp;&amp; $(oEl).attr(<span class=\"string\">\"自定义属性\"</span>) !== <span class=\"string\">\"特定属性值\"</span> &amp;&amp; target.tagName !== <span class=\"string\">\"BODY\"</span>) &#123;</div><div class=\"line\">    oEl = oEl.parentElement;</div><div class=\"line\">  &#125;</div><div class=\"line\">  <span class=\"keyword\">return</span> oEl;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"实例：下拉菜单点击外围自动关闭\"><a href=\"#实例：下拉菜单点击外围自动关闭\" class=\"headerlink\" title=\"实例：下拉菜单点击外围自动关闭\"></a>实例：下拉菜单点击外围自动关闭</h2><hr>\n<ul>\n<li>通过点击当前元素时绑定到事件</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">if</span> (<span class=\"built_in\">document</span>.addEventListener) &#123;</div><div class=\"line\">  element.addEventListener(event, clickOutside);<span class=\"comment\">//IE之外的绑定事件方法</span></div><div class=\"line\">&#125;<span class=\"keyword\">else</span>&#123;</div><div class=\"line\">  element.attachEvent(event, clickOutside);<span class=\"comment\">//IE </span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<ul>\n<li>clickOutside对象维护队列，该队列对象为id和callback事件</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">clickOutside</span>(<span class=\"params\"></span>) </span>&#123;\t</div><div class=\"line\">  <span class=\"keyword\">var</span> list = &#123;&#125;; <span class=\"comment\">//队列, 对象为id和callback事件</span></div><div class=\"line\">  <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">id, cb</span>) </span>&#123;</div><div class=\"line\">    list.id.push(id); <span class=\"comment\">//id队列</span></div><div class=\"line\">    list.cb[id] = cb; <span class=\"comment\">//callback事件队列</span></div><div class=\"line\">    <span class=\"comment\">//绑定点击事件</span></div><div class=\"line\">    $(<span class=\"built_in\">document</span>).off(<span class=\"string\">\"click\"</span>).on(<span class=\"string\">\"click\"</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">e</span>) </span>&#123;</div><div class=\"line\">      <span class=\"keyword\">var</span> e = e || <span class=\"built_in\">window</span>.event,</div><div class=\"line\">        eventX = e.pageX - scrollX || e.clientX,</div><div class=\"line\">        eventY = e.pageY - scrollY || e.clientY,</div><div class=\"line\">        target = <span class=\"built_in\">document</span>.elementFromPoint(eventX, eventY),</div><div class=\"line\">        id = $(target).attr(<span class=\"string\">\"id\"</span>);</div><div class=\"line\">      <span class=\"comment\">//判断当前事件位置是否有ID队列里元素</span></div><div class=\"line\">      <span class=\"keyword\">while</span> (list.id.indexOf(id) == <span class=\"number\">-1</span> &amp;&amp; target.tagName != <span class=\"string\">\"BODY\"</span>) &#123;</div><div class=\"line\">        target = target.parentElement;</div><div class=\"line\">        id = $(target).attr(<span class=\"string\">\"id\"</span>);</div><div class=\"line\">      &#125;</div><div class=\"line\">      <span class=\"comment\">//若有相关元素，则调用对应callback事件，完了移出队列</span></div><div class=\"line\">      <span class=\"keyword\">for</span> (i <span class=\"keyword\">in</span> list.id) &#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (list.id[i] != id) &#123;</div><div class=\"line\">          list.cb[list.id[i]]();</div><div class=\"line\">          list.cb.splice(list.id[i], <span class=\"number\">1</span>);</div><div class=\"line\">          list.id.splice(i, <span class=\"number\">1</span>);</div><div class=\"line\">        &#125;</div><div class=\"line\">      &#125;</div><div class=\"line\">      <span class=\"comment\">//若队列为空，关闭事件绑定</span></div><div class=\"line\">      <span class=\"keyword\">if</span> (!list.id.length) $(<span class=\"built_in\">document</span>).off(<span class=\"string\">\"click\"</span>);</div><div class=\"line\">    &#125;);</div><div class=\"line\">  &#125;;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"结束语\"><a href=\"#结束语\" class=\"headerlink\" title=\"结束语\"></a>结束语</h2><hr>\n<p>解决办法很多，优化方法也很多，代码都是在一次又一次重构和提炼中变得出彩的呢。</p>\n","excerpt":"<p>需要获取鼠标所在位置是否为某种特定元素，然后进行相关处理。本文介绍一种实现方法。<br>","more":"</p>\n<h2 id=\"常用坐标相关属性\"><a href=\"#常用坐标相关属性\" class=\"headerlink\" title=\"常用坐标相关属性\"></a>常用坐标相关属性</h2><hr>\n<p>首先，获取鼠标坐标的兼容问题大家都很熟悉了。<br>此处粘贴一些常用坐标相关属性：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\">scrollHeight <span class=\"comment\">//获取对象的滚动高度</span></div><div class=\"line\">scrollLeft <span class=\"comment\">//设置或获取位于对象左边界和窗口中目前可见内容的最左端之间的距离</span></div><div class=\"line\">scrollTop <span class=\"comment\">//设置或获取位于对象最顶端和窗口中可见内容的最顶端之间的距离</span></div><div class=\"line\">scrollWidth <span class=\"comment\">//获取对象的滚动宽度</span></div><div class=\"line\">offsetHeight <span class=\"comment\">//获取对象相对于版面或由父坐标 offsetParent 属性指定的父坐标的高度</span></div><div class=\"line\">offsetLeft <span class=\"comment\">//获取对象相对于版面或由 offsetParent 属性指定的父坐标的计算左侧位置</span></div><div class=\"line\">offsetTop <span class=\"comment\">//获取对象相对于版面或由 offsetTop 属性指定的父坐标的计算顶端位置</span></div><div class=\"line\">event.clientX <span class=\"comment\">//相对文档的水平座标</span></div><div class=\"line\">event.clientY <span class=\"comment\">//相对文档的垂直座标</span></div><div class=\"line\">event.offsetX <span class=\"comment\">//相对容器的水平坐标</span></div><div class=\"line\">event.offsetY <span class=\"comment\">//相对容器的垂直坐标</span></div><div class=\"line\"><span class=\"built_in\">document</span>.documentElement.scrollTop 垂直方向滚动的值</div><div class=\"line\">event.clientX + <span class=\"built_in\">document</span>.documentElement.scrollTop <span class=\"comment\">//相对文档的水平座标+垂直方向滚动的量</span></div></pre></td></tr></table></figure></p>\n<h2 id=\"绑定鼠标事件\"><a href=\"#绑定鼠标事件\" class=\"headerlink\" title=\"绑定鼠标事件\"></a>绑定鼠标事件</h2><hr>\n<p>现在我们来获取鼠标位置<br>此处需对IE事件、FireFox事件等兼容</p>\n<ul>\n<li>绑定方式有几种<ul>\n<li>1.在元素中，onXXX（事件）绑定</li>\n<li>2.在Javascript代码中，获得元素并为元素的onXXX（事件）绑定</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">if</span> (<span class=\"built_in\">document</span>.addEventListener) &#123;</div><div class=\"line\">  element.addEventListener(event, eventFunction);<span class=\"comment\">//IE之外的绑定事件方法</span></div><div class=\"line\">&#125;<span class=\"keyword\">else</span>&#123;</div><div class=\"line\">  element.attachEvent(event, eventFunction);<span class=\"comment\">//IE </span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"获取鼠标坐标\"><a href=\"#获取鼠标坐标\" class=\"headerlink\" title=\"获取鼠标坐标\"></a>获取鼠标坐标</h2><hr>\n<p>IE中可以直接使用 event对象，而 FF中则不可以</p>\n<ul>\n<li>1.window.event || arguments.callee.caller.arguments[0]获取event对象</li>\n<li>2.将 event 作为参数来传递, function xxx(e){var e = e || window.event;}</li>\n</ul>\n<h2 id=\"计算鼠标位置\"><a href=\"#计算鼠标位置\" class=\"headerlink\" title=\"计算鼠标位置\"></a>计算鼠标位置</h2><hr>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> eventX = e.pageX - scrollX || e.clientX ;</div><div class=\"line\"><span class=\"keyword\">var</span> eventY = e.pageY - scrollY || e.clientY ;</div></pre></td></tr></table></figure>\n<h2 id=\"获取当前位置是否有特定元素\"><a href=\"#获取当前位置是否有特定元素\" class=\"headerlink\" title=\"获取当前位置是否有特定元素\"></a>获取当前位置是否有特定元素</h2><hr>\n<ul>\n<li>给需要检测的元素绑定id或者自定义属性</li>\n<li>通过不断获取当前元素父元素，直至获取成功（通过自定义属性判断）或者元素为body</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fnGetTable</span>(<span class=\"params\">oEl</span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">while</span> (<span class=\"literal\">null</span> !== oEl &amp;&amp; $(oEl).attr(<span class=\"string\">\"自定义属性\"</span>) !== <span class=\"string\">\"特定属性值\"</span> &amp;&amp; target.tagName !== <span class=\"string\">\"BODY\"</span>) &#123;</div><div class=\"line\">    oEl = oEl.parentElement;</div><div class=\"line\">  &#125;</div><div class=\"line\">  <span class=\"keyword\">return</span> oEl;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"实例：下拉菜单点击外围自动关闭\"><a href=\"#实例：下拉菜单点击外围自动关闭\" class=\"headerlink\" title=\"实例：下拉菜单点击外围自动关闭\"></a>实例：下拉菜单点击外围自动关闭</h2><hr>\n<ul>\n<li>通过点击当前元素时绑定到事件</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">if</span> (<span class=\"built_in\">document</span>.addEventListener) &#123;</div><div class=\"line\">  element.addEventListener(event, clickOutside);<span class=\"comment\">//IE之外的绑定事件方法</span></div><div class=\"line\">&#125;<span class=\"keyword\">else</span>&#123;</div><div class=\"line\">  element.attachEvent(event, clickOutside);<span class=\"comment\">//IE </span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<ul>\n<li>clickOutside对象维护队列，该队列对象为id和callback事件</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">clickOutside</span>(<span class=\"params\"></span>) </span>&#123;\t</div><div class=\"line\">  <span class=\"keyword\">var</span> list = &#123;&#125;; <span class=\"comment\">//队列, 对象为id和callback事件</span></div><div class=\"line\">  <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">id, cb</span>) </span>&#123;</div><div class=\"line\">    list.id.push(id); <span class=\"comment\">//id队列</span></div><div class=\"line\">    list.cb[id] = cb; <span class=\"comment\">//callback事件队列</span></div><div class=\"line\">    <span class=\"comment\">//绑定点击事件</span></div><div class=\"line\">    $(<span class=\"built_in\">document</span>).off(<span class=\"string\">\"click\"</span>).on(<span class=\"string\">\"click\"</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">e</span>) </span>&#123;</div><div class=\"line\">      <span class=\"keyword\">var</span> e = e || <span class=\"built_in\">window</span>.event,</div><div class=\"line\">        eventX = e.pageX - scrollX || e.clientX,</div><div class=\"line\">        eventY = e.pageY - scrollY || e.clientY,</div><div class=\"line\">        target = <span class=\"built_in\">document</span>.elementFromPoint(eventX, eventY),</div><div class=\"line\">        id = $(target).attr(<span class=\"string\">\"id\"</span>);</div><div class=\"line\">      <span class=\"comment\">//判断当前事件位置是否有ID队列里元素</span></div><div class=\"line\">      <span class=\"keyword\">while</span> (list.id.indexOf(id) == <span class=\"number\">-1</span> &amp;&amp; target.tagName != <span class=\"string\">\"BODY\"</span>) &#123;</div><div class=\"line\">        target = target.parentElement;</div><div class=\"line\">        id = $(target).attr(<span class=\"string\">\"id\"</span>);</div><div class=\"line\">      &#125;</div><div class=\"line\">      <span class=\"comment\">//若有相关元素，则调用对应callback事件，完了移出队列</span></div><div class=\"line\">      <span class=\"keyword\">for</span> (i <span class=\"keyword\">in</span> list.id) &#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (list.id[i] != id) &#123;</div><div class=\"line\">          list.cb[list.id[i]]();</div><div class=\"line\">          list.cb.splice(list.id[i], <span class=\"number\">1</span>);</div><div class=\"line\">          list.id.splice(i, <span class=\"number\">1</span>);</div><div class=\"line\">        &#125;</div><div class=\"line\">      &#125;</div><div class=\"line\">      <span class=\"comment\">//若队列为空，关闭事件绑定</span></div><div class=\"line\">      <span class=\"keyword\">if</span> (!list.id.length) $(<span class=\"built_in\">document</span>).off(<span class=\"string\">\"click\"</span>);</div><div class=\"line\">    &#125;);</div><div class=\"line\">  &#125;;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"结束语\"><a href=\"#结束语\" class=\"headerlink\" title=\"结束语\"></a>结束语</h2><hr>\n<p>解决办法很多，优化方法也很多，代码都是在一次又一次重构和提炼中变得出彩的呢。</p>"},{"title":"React使用笔记2--创建登录组件","date":"2016-08-12T15:34:32.000Z","_content":"最近在学习使用React作为前端的框架，《React使用笔记》系列用于记录过程中的一些使用和解决方法。\n本文记录搭建登录页面的过程。\n<!--more-->\n\n## 根据产品规划划分模块\n-----\n### 主要页面逻辑\n在这里，本骚年就建一个比较简单的项目。该项目与之前的Angular使用笔记项目长得完全一致，但我们这里用React来实现吧。\n- 我们的主要页面逻辑如下：\n  - 1.登录页面，输入账号和密码即可\n  - 2.模块页面\n\n### 创建登录页面\n- 首先我们在components文件夹内添加一个login.jsx\n\n``` jsx\nimport React from 'react';\nconst Login = React.createClass({\n\trender() {\n\t\treturn (\n\t\t\t<div className=\"container\" id=\"login\">\n\t\t\t\t<form id=\"login-form\">\n\t\t\t\t\t<h3 className=\"text-center\">login</h3>\n\t\t\t\t\t<div className=\"form-group\">\n\t\t\t\t\t\t<label>account</label>\n\t\t\t\t\t\t<input type=\"text\" className=\"form-control\" placeholder=\"Account\" ref=\"loginName\" required />\n\t\t\t\t\t</div>\n\t\t\t\t\t<div className=\"form-group\">\n\t\t\t\t\t\t<label>Password</label>\n\t\t\t\t\t\t<input type=\"password\" className=\"form-control\" placeholder=\"Password\" ref=\"loginPwd\" required />\n\t\t\t\t\t</div>\n\t\t\t\t\t<button type=\"submit\"  className=\"btn btn-default\" onClick={this.loginSubmit}>登录</button>\n\t\t\t\t</form>\n\t\t\t</div>\n\t\t)\n\t}\n});\n\nmodule.exports = Login;\n```\n- 在jsx中，因为js中class为保留字，所以要写成className\n- 此处引用了Bootstrap的样式，在templates/index.ejs中添加\n\n``` html\n<link rel=\"stylesheet\" href=\"https://maxcdn.bootstrapcdn.com/bootstrap/latest/css/bootstrap.min.css\">\n```\n\n## React Router\n-----\n### 安装使用\n- 通过npm安装\n\n``` bash\n$ npm install history react-router@latest\n```\n- 还需要安装history，它也是React Router的依赖，且在npm 3+下不会自动安装\n\n``` bash\n$ npm install --save history\n```\n- 添加Route组件\n\n``` javascript\nimport { Router, Route, Link, hashHistory, IndexRoute } from 'react-router';\n```\n\n### React Router组件\n- Router组件\nRouter组件本身只是一个容器，真正的路由要通过Route组件定义。\n- Route组件\nRoute组件还可以嵌套。\n``` html\n<Router history={hashHistory}>\n  <Route path=\"/\" component={App}>\n    <Route path=\"/repos\" component={Repos}/>\n  </Route>\n</Router>\n```\n- Link组件\nLink组件用于取代<a>元素，生成一个链接，允许用户点击后跳转到另一个路由，可接收Router的状态。\n- IndexLink组件\n如果链接到根路由/，不要使用Link组件，而要使用IndexLink组件。\n- IndexRoute组件\nIndexRoute显式指定Home是根路由的子组件，即指定默认情况下加载的子组件，即该路径的index.html。\n- Redirect组件\nRedirect组件用于路由的跳转，即用户访问一个路由，会自动跳转到另一个路由。\n- IndexRedirect组件\nIndexRedirect组件用于访问根路由的时候，将用户重定向到某个子组件。\n\n### path属性\nRoute组件的path属性指定路由的匹配规则。\npath属性可以使用相对路径（不以/开头），匹配时就会相对于父组件的路径。\n- :paramName\n - 匹配URL的一个部分，直到遇到下一个/、?、#为止。\n - 这个路径参数可以通过this.props.params.paramName取出。\n- ()\n - ()表示URL的这个部分是可选的。\n- *\n*匹配任意字符，直到模式里面的下一个字符为止。匹配方式是非贪婪模式。\n- **\n**匹配任意字符，直到下一个/、?、#为止。匹配方式是贪婪模式。\n\n### Histories\nReact Router是建立在history之上的。 简而言之，一个history知道如何去监听浏览器地址栏的变化，并解析这个URL转化为location对象，然后router使用它匹配到路由，最后正确地渲染对应的组件。\n- createHashHistory\n - 这是一个你会获取到的默认history，如果你不指定某个history（即 <Router>{/* your routes */}</Router>）。\n - 它用到的是URL 的hash（#）部分去创建形如example.com/#/some/path的路由。\n - ?_k=ckuvup是每一个location创建的一个唯一的key，并把它们的状态存储在session storage中。当访客点击“后退”和“前进”时，我们就会有一个机制去恢复这些location state。可使用queryKey: false关闭。\n- createBrowserHistory\n - Browser history使用History API在浏览器中被创建用于处理URL，新建一个像这样真实的URL example.com/some/path。\n - 使用Browser history需要在服务器进行配置。\n- createMemoryHistory\n - Memory history不会在地址栏被操作或读取。\n\n### js中设置跳转\n- 使用browserHistory.push\n\n``` javascript\nimport { browserHistory } from 'react-router';\nexample(event) {\n\tbrowserHistory.push(path);\n}\n```\n- 使用context对象\n\n``` javascript\nexport example React.createClass({\n  // ask for `router` from context\n  contextTypes: {\n    router: React.PropTypes.object\n  },\n  example(event) {\n    this.context.router.push(path)\n  },\n})\n```\n\n## 添加路由\n-----\n### 在index.js设置路由\n``` javascript\nimport { Router, Route, Link, hashHistory, IndexRoute, useRouterHistory } from 'react-router'; //router组件\nimport { createHistory, createHashHistory } from 'history'; //history组件\nimport Login from  './components/login.jsx'; //login自定义组件\nimport Index from  './components/index.jsx'; //index自定义组件\nlet history = useRouterHistory(createHashHistory)({ queryKey: false });\n//将其渲染到页面上id为test的DOM元素内\nReactDOM.render(<Router history={history}>\n    <Route path=\"/\">\n      <Route path=\"index\" component={Index} />\n      <IndexRoute component={Login} />\n    </Route>\n  </Router>, \ndocument.body);\n```\n\n### 在components里login.ejs添加路由跳转\n- 添加登录按钮的click事件\n- 添加loginSubmit属性以及跳转\n\n``` jsx\nimport React from 'react'; //导入react组件\nconst Login = React.createClass({\n\tcontextTypes: {\n\t\trouter: React.PropTypes.object\n\t},\n\tloginSubmit: function() {\n\t\tthis.context.router.push('/index'); //使用this.content进行跳转\n\t},\n\trender() {\n\t\treturn (\n\t\t\t<div className=\"container\" id=\"login\">\n\t\t\t\t<form id=\"login-form\">\n\t\t\t\t\t<h3 className=\"text-center\">login</h3>\n\t\t\t\t\t<div className=\"form-group\">\n\t\t\t\t\t\t<label>account</label>\n\t\t\t\t\t\t<input type=\"text\" className=\"form-control\" placeholder=\"Account\" ref=\"loginName\" required />\n\t\t\t\t\t</div>\n\t\t\t\t\t<div className=\"form-group\">\n\t\t\t\t\t\t<label>Password</label>\n\t\t\t\t\t\t<input type=\"password\" className=\"form-control\" placeholder=\"Password\" ref=\"loginPwd\" required />\n\t\t\t\t\t</div>\n\t\t\t\t\t<button type=\"submit\"  className=\"btn btn-default\" onClick={this.loginSubmit}>登录</button>\n\t\t\t\t</form>\n\t\t\t</div>\n\t\t)\n\t}\n});\nmodule.exports = Login;\n```\n\n## 结束语\n-----\n从Angular转React中遇到不少问题呢，毕竟两者很多概念和使用方法都很不一样，使用过程中也是大开眼界了呀。\n[此处查看项目代码（仅包含app部分）](https://github.com/godbasin/godbasin.github.io/tree/blog-codes/react-notes/2-create-login)\n[此处查看页面效果](http://o9j9owc7b.bkt.clouddn.com/2-create-login/index.html)\n","source":"_posts/react-notes-2-create-login.md","raw":"---\ntitle:  React使用笔记2--创建登录组件\ndate: 2016-08-12 23:34:32\ncategories: react沙拉\ntags: 笔记\n---\n最近在学习使用React作为前端的框架，《React使用笔记》系列用于记录过程中的一些使用和解决方法。\n本文记录搭建登录页面的过程。\n<!--more-->\n\n## 根据产品规划划分模块\n-----\n### 主要页面逻辑\n在这里，本骚年就建一个比较简单的项目。该项目与之前的Angular使用笔记项目长得完全一致，但我们这里用React来实现吧。\n- 我们的主要页面逻辑如下：\n  - 1.登录页面，输入账号和密码即可\n  - 2.模块页面\n\n### 创建登录页面\n- 首先我们在components文件夹内添加一个login.jsx\n\n``` jsx\nimport React from 'react';\nconst Login = React.createClass({\n\trender() {\n\t\treturn (\n\t\t\t<div className=\"container\" id=\"login\">\n\t\t\t\t<form id=\"login-form\">\n\t\t\t\t\t<h3 className=\"text-center\">login</h3>\n\t\t\t\t\t<div className=\"form-group\">\n\t\t\t\t\t\t<label>account</label>\n\t\t\t\t\t\t<input type=\"text\" className=\"form-control\" placeholder=\"Account\" ref=\"loginName\" required />\n\t\t\t\t\t</div>\n\t\t\t\t\t<div className=\"form-group\">\n\t\t\t\t\t\t<label>Password</label>\n\t\t\t\t\t\t<input type=\"password\" className=\"form-control\" placeholder=\"Password\" ref=\"loginPwd\" required />\n\t\t\t\t\t</div>\n\t\t\t\t\t<button type=\"submit\"  className=\"btn btn-default\" onClick={this.loginSubmit}>登录</button>\n\t\t\t\t</form>\n\t\t\t</div>\n\t\t)\n\t}\n});\n\nmodule.exports = Login;\n```\n- 在jsx中，因为js中class为保留字，所以要写成className\n- 此处引用了Bootstrap的样式，在templates/index.ejs中添加\n\n``` html\n<link rel=\"stylesheet\" href=\"https://maxcdn.bootstrapcdn.com/bootstrap/latest/css/bootstrap.min.css\">\n```\n\n## React Router\n-----\n### 安装使用\n- 通过npm安装\n\n``` bash\n$ npm install history react-router@latest\n```\n- 还需要安装history，它也是React Router的依赖，且在npm 3+下不会自动安装\n\n``` bash\n$ npm install --save history\n```\n- 添加Route组件\n\n``` javascript\nimport { Router, Route, Link, hashHistory, IndexRoute } from 'react-router';\n```\n\n### React Router组件\n- Router组件\nRouter组件本身只是一个容器，真正的路由要通过Route组件定义。\n- Route组件\nRoute组件还可以嵌套。\n``` html\n<Router history={hashHistory}>\n  <Route path=\"/\" component={App}>\n    <Route path=\"/repos\" component={Repos}/>\n  </Route>\n</Router>\n```\n- Link组件\nLink组件用于取代<a>元素，生成一个链接，允许用户点击后跳转到另一个路由，可接收Router的状态。\n- IndexLink组件\n如果链接到根路由/，不要使用Link组件，而要使用IndexLink组件。\n- IndexRoute组件\nIndexRoute显式指定Home是根路由的子组件，即指定默认情况下加载的子组件，即该路径的index.html。\n- Redirect组件\nRedirect组件用于路由的跳转，即用户访问一个路由，会自动跳转到另一个路由。\n- IndexRedirect组件\nIndexRedirect组件用于访问根路由的时候，将用户重定向到某个子组件。\n\n### path属性\nRoute组件的path属性指定路由的匹配规则。\npath属性可以使用相对路径（不以/开头），匹配时就会相对于父组件的路径。\n- :paramName\n - 匹配URL的一个部分，直到遇到下一个/、?、#为止。\n - 这个路径参数可以通过this.props.params.paramName取出。\n- ()\n - ()表示URL的这个部分是可选的。\n- *\n*匹配任意字符，直到模式里面的下一个字符为止。匹配方式是非贪婪模式。\n- **\n**匹配任意字符，直到下一个/、?、#为止。匹配方式是贪婪模式。\n\n### Histories\nReact Router是建立在history之上的。 简而言之，一个history知道如何去监听浏览器地址栏的变化，并解析这个URL转化为location对象，然后router使用它匹配到路由，最后正确地渲染对应的组件。\n- createHashHistory\n - 这是一个你会获取到的默认history，如果你不指定某个history（即 <Router>{/* your routes */}</Router>）。\n - 它用到的是URL 的hash（#）部分去创建形如example.com/#/some/path的路由。\n - ?_k=ckuvup是每一个location创建的一个唯一的key，并把它们的状态存储在session storage中。当访客点击“后退”和“前进”时，我们就会有一个机制去恢复这些location state。可使用queryKey: false关闭。\n- createBrowserHistory\n - Browser history使用History API在浏览器中被创建用于处理URL，新建一个像这样真实的URL example.com/some/path。\n - 使用Browser history需要在服务器进行配置。\n- createMemoryHistory\n - Memory history不会在地址栏被操作或读取。\n\n### js中设置跳转\n- 使用browserHistory.push\n\n``` javascript\nimport { browserHistory } from 'react-router';\nexample(event) {\n\tbrowserHistory.push(path);\n}\n```\n- 使用context对象\n\n``` javascript\nexport example React.createClass({\n  // ask for `router` from context\n  contextTypes: {\n    router: React.PropTypes.object\n  },\n  example(event) {\n    this.context.router.push(path)\n  },\n})\n```\n\n## 添加路由\n-----\n### 在index.js设置路由\n``` javascript\nimport { Router, Route, Link, hashHistory, IndexRoute, useRouterHistory } from 'react-router'; //router组件\nimport { createHistory, createHashHistory } from 'history'; //history组件\nimport Login from  './components/login.jsx'; //login自定义组件\nimport Index from  './components/index.jsx'; //index自定义组件\nlet history = useRouterHistory(createHashHistory)({ queryKey: false });\n//将其渲染到页面上id为test的DOM元素内\nReactDOM.render(<Router history={history}>\n    <Route path=\"/\">\n      <Route path=\"index\" component={Index} />\n      <IndexRoute component={Login} />\n    </Route>\n  </Router>, \ndocument.body);\n```\n\n### 在components里login.ejs添加路由跳转\n- 添加登录按钮的click事件\n- 添加loginSubmit属性以及跳转\n\n``` jsx\nimport React from 'react'; //导入react组件\nconst Login = React.createClass({\n\tcontextTypes: {\n\t\trouter: React.PropTypes.object\n\t},\n\tloginSubmit: function() {\n\t\tthis.context.router.push('/index'); //使用this.content进行跳转\n\t},\n\trender() {\n\t\treturn (\n\t\t\t<div className=\"container\" id=\"login\">\n\t\t\t\t<form id=\"login-form\">\n\t\t\t\t\t<h3 className=\"text-center\">login</h3>\n\t\t\t\t\t<div className=\"form-group\">\n\t\t\t\t\t\t<label>account</label>\n\t\t\t\t\t\t<input type=\"text\" className=\"form-control\" placeholder=\"Account\" ref=\"loginName\" required />\n\t\t\t\t\t</div>\n\t\t\t\t\t<div className=\"form-group\">\n\t\t\t\t\t\t<label>Password</label>\n\t\t\t\t\t\t<input type=\"password\" className=\"form-control\" placeholder=\"Password\" ref=\"loginPwd\" required />\n\t\t\t\t\t</div>\n\t\t\t\t\t<button type=\"submit\"  className=\"btn btn-default\" onClick={this.loginSubmit}>登录</button>\n\t\t\t\t</form>\n\t\t\t</div>\n\t\t)\n\t}\n});\nmodule.exports = Login;\n```\n\n## 结束语\n-----\n从Angular转React中遇到不少问题呢，毕竟两者很多概念和使用方法都很不一样，使用过程中也是大开眼界了呀。\n[此处查看项目代码（仅包含app部分）](https://github.com/godbasin/godbasin.github.io/tree/blog-codes/react-notes/2-create-login)\n[此处查看页面效果](http://o9j9owc7b.bkt.clouddn.com/2-create-login/index.html)\n","slug":"react-notes-2-create-login","published":1,"updated":"2016-08-20T10:54:21.103Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cix45huha003mxotui1zuk0zk","content":"<p>最近在学习使用React作为前端的框架，《React使用笔记》系列用于记录过程中的一些使用和解决方法。<br>本文记录搭建登录页面的过程。<br><a id=\"more\"></a></p>\n<h2 id=\"根据产品规划划分模块\"><a href=\"#根据产品规划划分模块\" class=\"headerlink\" title=\"根据产品规划划分模块\"></a>根据产品规划划分模块</h2><hr>\n<h3 id=\"主要页面逻辑\"><a href=\"#主要页面逻辑\" class=\"headerlink\" title=\"主要页面逻辑\"></a>主要页面逻辑</h3><p>在这里，本骚年就建一个比较简单的项目。该项目与之前的Angular使用笔记项目长得完全一致，但我们这里用React来实现吧。</p>\n<ul>\n<li>我们的主要页面逻辑如下：<ul>\n<li>1.登录页面，输入账号和密码即可</li>\n<li>2.模块页面</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"创建登录页面\"><a href=\"#创建登录页面\" class=\"headerlink\" title=\"创建登录页面\"></a>创建登录页面</h3><ul>\n<li>首先我们在components文件夹内添加一个login.jsx</li>\n</ul>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> React <span class=\"keyword\">from</span> <span class=\"string\">'react'</span>;</div><div class=\"line\"><span class=\"keyword\">const</span> Login = React.createClass(&#123;</div><div class=\"line\">  render() &#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> (</div><div class=\"line\">      &lt;div className=\"container\" id=\"login\"&gt;</div><div class=\"line\">        &lt;form id=\"login-form\"&gt;</div><div class=\"line\">          &lt;h3 className=\"text-center\"&gt;login&lt;/h3&gt;</div><div class=\"line\">          &lt;div className=\"form-group\"&gt;</div><div class=\"line\">            &lt;label&gt;account&lt;/label&gt;</div><div class=\"line\">            &lt;input type=\"text\" className=\"form-control\" placeholder=\"Account\" ref=\"loginName\" required /&gt;</div><div class=\"line\">          &lt;/div&gt;</div><div class=\"line\">          &lt;div className=\"form-group\"&gt;</div><div class=\"line\">            &lt;label&gt;Password&lt;/label&gt;</div><div class=\"line\">            &lt;input type=\"password\" className=\"form-control\" placeholder=\"Password\" ref=\"loginPwd\" required /&gt;</div><div class=\"line\">          &lt;/div&gt;</div><div class=\"line\">          &lt;button type=\"submit\"  className=\"btn btn-default\" onClick=&#123;this.loginSubmit&#125;&gt;登录&lt;/button&gt;</div><div class=\"line\">        &lt;/form&gt;</div><div class=\"line\">      &lt;/div&gt;</div><div class=\"line\">    )</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\">module.exports = Login;</div></pre></td></tr></table></figure>\n<ul>\n<li>在jsx中，因为js中class为保留字，所以要写成className</li>\n<li>此处引用了Bootstrap的样式，在templates/index.ejs中添加</li>\n</ul>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">link</span> <span class=\"attr\">rel</span>=<span class=\"string\">\"stylesheet\"</span> <span class=\"attr\">href</span>=<span class=\"string\">\"https://maxcdn.bootstrapcdn.com/bootstrap/latest/css/bootstrap.min.css\"</span>&gt;</span></div></pre></td></tr></table></figure>\n<h2 id=\"React-Router\"><a href=\"#React-Router\" class=\"headerlink\" title=\"React Router\"></a>React Router</h2><hr>\n<h3 id=\"安装使用\"><a href=\"#安装使用\" class=\"headerlink\" title=\"安装使用\"></a>安装使用</h3><ul>\n<li>通过npm安装</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ npm install <span class=\"built_in\">history</span> react-router@latest</div></pre></td></tr></table></figure>\n<ul>\n<li>还需要安装history，它也是React Router的依赖，且在npm 3+下不会自动安装</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ npm install --save <span class=\"built_in\">history</span></div></pre></td></tr></table></figure>\n<ul>\n<li>添加Route组件</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> &#123; Router, Route, Link, hashHistory, IndexRoute &#125; <span class=\"keyword\">from</span> <span class=\"string\">'react-router'</span>;</div></pre></td></tr></table></figure>\n<h3 id=\"React-Router组件\"><a href=\"#React-Router组件\" class=\"headerlink\" title=\"React Router组件\"></a>React Router组件</h3><ul>\n<li>Router组件<br>Router组件本身只是一个容器，真正的路由要通过Route组件定义。</li>\n<li><p>Route组件<br>Route组件还可以嵌套。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">Router</span> <span class=\"attr\">history</span>=<span class=\"string\">&#123;hashHistory&#125;</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">Route</span> <span class=\"attr\">path</span>=<span class=\"string\">\"/\"</span> <span class=\"attr\">component</span>=<span class=\"string\">&#123;App&#125;</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">Route</span> <span class=\"attr\">path</span>=<span class=\"string\">\"/repos\"</span> <span class=\"attr\">component</span>=<span class=\"string\">&#123;Repos&#125;/</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">Route</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">Router</span>&gt;</span></div></pre></td></tr></table></figure>\n</li>\n<li><p>Link组件<br>Link组件用于取代<a>元素，生成一个链接，允许用户点击后跳转到另一个路由，可接收Router的状态。</a></p>\n</li>\n<li>IndexLink组件<br>如果链接到根路由/，不要使用Link组件，而要使用IndexLink组件。</li>\n<li>IndexRoute组件<br>IndexRoute显式指定Home是根路由的子组件，即指定默认情况下加载的子组件，即该路径的index.html。</li>\n<li>Redirect组件<br>Redirect组件用于路由的跳转，即用户访问一个路由，会自动跳转到另一个路由。</li>\n<li>IndexRedirect组件<br>IndexRedirect组件用于访问根路由的时候，将用户重定向到某个子组件。</li>\n</ul>\n<h3 id=\"path属性\"><a href=\"#path属性\" class=\"headerlink\" title=\"path属性\"></a>path属性</h3><p>Route组件的path属性指定路由的匹配规则。<br>path属性可以使用相对路径（不以/开头），匹配时就会相对于父组件的路径。</p>\n<ul>\n<li>:paramName<ul>\n<li>匹配URL的一个部分，直到遇到下一个/、?、#为止。</li>\n<li>这个路径参数可以通过this.props.params.paramName取出。</li>\n</ul>\n</li>\n<li>()<ul>\n<li>()表示URL的这个部分是可选的。</li>\n</ul>\n</li>\n<li><em>\n</em>匹配任意字符，直到模式里面的下一个字符为止。匹配方式是非贪婪模式。</li>\n</ul>\n<hr>\n<p>**匹配任意字符，直到下一个/、?、#为止。匹配方式是贪婪模式。</p>\n<h3 id=\"Histories\"><a href=\"#Histories\" class=\"headerlink\" title=\"Histories\"></a>Histories</h3><p>React Router是建立在history之上的。 简而言之，一个history知道如何去监听浏览器地址栏的变化，并解析这个URL转化为location对象，然后router使用它匹配到路由，最后正确地渲染对应的组件。</p>\n<ul>\n<li>createHashHistory<ul>\n<li>这是一个你会获取到的默认history，如果你不指定某个history（即 <router>{/<em> your routes </em>/}</router>）。</li>\n<li>它用到的是URL 的hash（#）部分去创建形如example.com/#/some/path的路由。</li>\n<li>?_k=ckuvup是每一个location创建的一个唯一的key，并把它们的状态存储在session storage中。当访客点击“后退”和“前进”时，我们就会有一个机制去恢复这些location state。可使用queryKey: false关闭。</li>\n</ul>\n</li>\n<li>createBrowserHistory<ul>\n<li>Browser history使用History API在浏览器中被创建用于处理URL，新建一个像这样真实的URL example.com/some/path。</li>\n<li>使用Browser history需要在服务器进行配置。</li>\n</ul>\n</li>\n<li>createMemoryHistory<ul>\n<li>Memory history不会在地址栏被操作或读取。</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"js中设置跳转\"><a href=\"#js中设置跳转\" class=\"headerlink\" title=\"js中设置跳转\"></a>js中设置跳转</h3><ul>\n<li>使用browserHistory.push</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> &#123; browserHistory &#125; <span class=\"keyword\">from</span> <span class=\"string\">'react-router'</span>;</div><div class=\"line\">example(event) &#123;</div><div class=\"line\">  browserHistory.push(path);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<ul>\n<li>使用context对象</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">export</span> example React.createClass(&#123;</div><div class=\"line\">  <span class=\"comment\">// ask for `router` from context</span></div><div class=\"line\">  contextTypes: &#123;</div><div class=\"line\">    <span class=\"attr\">router</span>: React.PropTypes.object</div><div class=\"line\">  &#125;,</div><div class=\"line\">  example(event) &#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>.context.router.push(path)</div><div class=\"line\">  &#125;,</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<h2 id=\"添加路由\"><a href=\"#添加路由\" class=\"headerlink\" title=\"添加路由\"></a>添加路由</h2><hr>\n<h3 id=\"在index-js设置路由\"><a href=\"#在index-js设置路由\" class=\"headerlink\" title=\"在index.js设置路由\"></a>在index.js设置路由</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> &#123; Router, Route, Link, hashHistory, IndexRoute, useRouterHistory &#125; <span class=\"keyword\">from</span> <span class=\"string\">'react-router'</span>; <span class=\"comment\">//router组件</span></div><div class=\"line\"><span class=\"keyword\">import</span> &#123; createHistory, createHashHistory &#125; <span class=\"keyword\">from</span> <span class=\"string\">'history'</span>; <span class=\"comment\">//history组件</span></div><div class=\"line\"><span class=\"keyword\">import</span> Login <span class=\"keyword\">from</span>  <span class=\"string\">'./components/login.jsx'</span>; <span class=\"comment\">//login自定义组件</span></div><div class=\"line\"><span class=\"keyword\">import</span> Index <span class=\"keyword\">from</span>  <span class=\"string\">'./components/index.jsx'</span>; <span class=\"comment\">//index自定义组件</span></div><div class=\"line\"><span class=\"keyword\">let</span> history = useRouterHistory(createHashHistory)(&#123; <span class=\"attr\">queryKey</span>: <span class=\"literal\">false</span> &#125;);</div><div class=\"line\"><span class=\"comment\">//将其渲染到页面上id为test的DOM元素内</span></div><div class=\"line\">ReactDOM.render(&lt;Router history=&#123;history&#125;&gt;</div><div class=\"line\">    &lt;Route path=\"/\"&gt;</div><div class=\"line\">      &lt;Route path=\"index\" component=&#123;Index&#125; /&gt;</div><div class=\"line\">      &lt;IndexRoute component=&#123;Login&#125; /&gt;</div><div class=\"line\">    &lt;/Route&gt;</div><div class=\"line\">  &lt;/Router&gt;, </div><div class=\"line\">document.body);</div></pre></td></tr></table></figure>\n<h3 id=\"在components里login-ejs添加路由跳转\"><a href=\"#在components里login-ejs添加路由跳转\" class=\"headerlink\" title=\"在components里login.ejs添加路由跳转\"></a>在components里login.ejs添加路由跳转</h3><ul>\n<li>添加登录按钮的click事件</li>\n<li>添加loginSubmit属性以及跳转</li>\n</ul>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> React <span class=\"keyword\">from</span> <span class=\"string\">'react'</span>; <span class=\"comment\">//导入react组件</span></div><div class=\"line\"><span class=\"keyword\">const</span> Login = React.createClass(&#123;</div><div class=\"line\">  <span class=\"attr\">contextTypes</span>: &#123;</div><div class=\"line\">    <span class=\"attr\">router</span>: React.PropTypes.object</div><div class=\"line\">  &#125;,</div><div class=\"line\">  <span class=\"attr\">loginSubmit</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>.context.router.push(<span class=\"string\">'/index'</span>); <span class=\"comment\">//使用this.content进行跳转</span></div><div class=\"line\">  &#125;,</div><div class=\"line\">  render() &#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> (</div><div class=\"line\">      &lt;div className=\"container\" id=\"login\"&gt;</div><div class=\"line\">        &lt;form id=\"login-form\"&gt;</div><div class=\"line\">          &lt;h3 className=\"text-center\"&gt;login&lt;/h3&gt;</div><div class=\"line\">          &lt;div className=\"form-group\"&gt;</div><div class=\"line\">            &lt;label&gt;account&lt;/label&gt;</div><div class=\"line\">            &lt;input type=\"text\" className=\"form-control\" placeholder=\"Account\" ref=\"loginName\" required /&gt;</div><div class=\"line\">          &lt;/div&gt;</div><div class=\"line\">          &lt;div className=\"form-group\"&gt;</div><div class=\"line\">            &lt;label&gt;Password&lt;/label&gt;</div><div class=\"line\">            &lt;input type=\"password\" className=\"form-control\" placeholder=\"Password\" ref=\"loginPwd\" required /&gt;</div><div class=\"line\">          &lt;/div&gt;</div><div class=\"line\">          &lt;button type=\"submit\"  className=\"btn btn-default\" onClick=&#123;this.loginSubmit&#125;&gt;登录&lt;/button&gt;</div><div class=\"line\">        &lt;/form&gt;</div><div class=\"line\">      &lt;/div&gt;</div><div class=\"line\">    )</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;);</div><div class=\"line\">module.exports = Login;</div></pre></td></tr></table></figure>\n<h2 id=\"结束语\"><a href=\"#结束语\" class=\"headerlink\" title=\"结束语\"></a>结束语</h2><hr>\n<p>从Angular转React中遇到不少问题呢，毕竟两者很多概念和使用方法都很不一样，使用过程中也是大开眼界了呀。<br><a href=\"https://github.com/godbasin/godbasin.github.io/tree/blog-codes/react-notes/2-create-login\" target=\"_blank\" rel=\"external\">此处查看项目代码（仅包含app部分）</a><br><a href=\"http://o9j9owc7b.bkt.clouddn.com/2-create-login/index.html\" target=\"_blank\" rel=\"external\">此处查看页面效果</a></p>\n","excerpt":"<p>最近在学习使用React作为前端的框架，《React使用笔记》系列用于记录过程中的一些使用和解决方法。<br>本文记录搭建登录页面的过程。<br>","more":"</p>\n<h2 id=\"根据产品规划划分模块\"><a href=\"#根据产品规划划分模块\" class=\"headerlink\" title=\"根据产品规划划分模块\"></a>根据产品规划划分模块</h2><hr>\n<h3 id=\"主要页面逻辑\"><a href=\"#主要页面逻辑\" class=\"headerlink\" title=\"主要页面逻辑\"></a>主要页面逻辑</h3><p>在这里，本骚年就建一个比较简单的项目。该项目与之前的Angular使用笔记项目长得完全一致，但我们这里用React来实现吧。</p>\n<ul>\n<li>我们的主要页面逻辑如下：<ul>\n<li>1.登录页面，输入账号和密码即可</li>\n<li>2.模块页面</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"创建登录页面\"><a href=\"#创建登录页面\" class=\"headerlink\" title=\"创建登录页面\"></a>创建登录页面</h3><ul>\n<li>首先我们在components文件夹内添加一个login.jsx</li>\n</ul>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> React <span class=\"keyword\">from</span> <span class=\"string\">'react'</span>;</div><div class=\"line\"><span class=\"keyword\">const</span> Login = React.createClass(&#123;</div><div class=\"line\">  render() &#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> (</div><div class=\"line\">      &lt;div className=\"container\" id=\"login\"&gt;</div><div class=\"line\">        &lt;form id=\"login-form\"&gt;</div><div class=\"line\">          &lt;h3 className=\"text-center\"&gt;login&lt;/h3&gt;</div><div class=\"line\">          &lt;div className=\"form-group\"&gt;</div><div class=\"line\">            &lt;label&gt;account&lt;/label&gt;</div><div class=\"line\">            &lt;input type=\"text\" className=\"form-control\" placeholder=\"Account\" ref=\"loginName\" required /&gt;</div><div class=\"line\">          &lt;/div&gt;</div><div class=\"line\">          &lt;div className=\"form-group\"&gt;</div><div class=\"line\">            &lt;label&gt;Password&lt;/label&gt;</div><div class=\"line\">            &lt;input type=\"password\" className=\"form-control\" placeholder=\"Password\" ref=\"loginPwd\" required /&gt;</div><div class=\"line\">          &lt;/div&gt;</div><div class=\"line\">          &lt;button type=\"submit\"  className=\"btn btn-default\" onClick=&#123;this.loginSubmit&#125;&gt;登录&lt;/button&gt;</div><div class=\"line\">        &lt;/form&gt;</div><div class=\"line\">      &lt;/div&gt;</div><div class=\"line\">    )</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\">module.exports = Login;</div></pre></td></tr></table></figure>\n<ul>\n<li>在jsx中，因为js中class为保留字，所以要写成className</li>\n<li>此处引用了Bootstrap的样式，在templates/index.ejs中添加</li>\n</ul>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">link</span> <span class=\"attr\">rel</span>=<span class=\"string\">\"stylesheet\"</span> <span class=\"attr\">href</span>=<span class=\"string\">\"https://maxcdn.bootstrapcdn.com/bootstrap/latest/css/bootstrap.min.css\"</span>&gt;</span></div></pre></td></tr></table></figure>\n<h2 id=\"React-Router\"><a href=\"#React-Router\" class=\"headerlink\" title=\"React Router\"></a>React Router</h2><hr>\n<h3 id=\"安装使用\"><a href=\"#安装使用\" class=\"headerlink\" title=\"安装使用\"></a>安装使用</h3><ul>\n<li>通过npm安装</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ npm install <span class=\"built_in\">history</span> react-router@latest</div></pre></td></tr></table></figure>\n<ul>\n<li>还需要安装history，它也是React Router的依赖，且在npm 3+下不会自动安装</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ npm install --save <span class=\"built_in\">history</span></div></pre></td></tr></table></figure>\n<ul>\n<li>添加Route组件</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> &#123; Router, Route, Link, hashHistory, IndexRoute &#125; <span class=\"keyword\">from</span> <span class=\"string\">'react-router'</span>;</div></pre></td></tr></table></figure>\n<h3 id=\"React-Router组件\"><a href=\"#React-Router组件\" class=\"headerlink\" title=\"React Router组件\"></a>React Router组件</h3><ul>\n<li>Router组件<br>Router组件本身只是一个容器，真正的路由要通过Route组件定义。</li>\n<li><p>Route组件<br>Route组件还可以嵌套。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">Router</span> <span class=\"attr\">history</span>=<span class=\"string\">&#123;hashHistory&#125;</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">Route</span> <span class=\"attr\">path</span>=<span class=\"string\">\"/\"</span> <span class=\"attr\">component</span>=<span class=\"string\">&#123;App&#125;</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">Route</span> <span class=\"attr\">path</span>=<span class=\"string\">\"/repos\"</span> <span class=\"attr\">component</span>=<span class=\"string\">&#123;Repos&#125;/</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">Route</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">Router</span>&gt;</span></div></pre></td></tr></table></figure>\n</li>\n<li><p>Link组件<br>Link组件用于取代<a>元素，生成一个链接，允许用户点击后跳转到另一个路由，可接收Router的状态。</p>\n</li>\n<li>IndexLink组件<br>如果链接到根路由/，不要使用Link组件，而要使用IndexLink组件。</li>\n<li>IndexRoute组件<br>IndexRoute显式指定Home是根路由的子组件，即指定默认情况下加载的子组件，即该路径的index.html。</li>\n<li>Redirect组件<br>Redirect组件用于路由的跳转，即用户访问一个路由，会自动跳转到另一个路由。</li>\n<li>IndexRedirect组件<br>IndexRedirect组件用于访问根路由的时候，将用户重定向到某个子组件。</li>\n</ul>\n<h3 id=\"path属性\"><a href=\"#path属性\" class=\"headerlink\" title=\"path属性\"></a>path属性</h3><p>Route组件的path属性指定路由的匹配规则。<br>path属性可以使用相对路径（不以/开头），匹配时就会相对于父组件的路径。</p>\n<ul>\n<li>:paramName<ul>\n<li>匹配URL的一个部分，直到遇到下一个/、?、#为止。</li>\n<li>这个路径参数可以通过this.props.params.paramName取出。</li>\n</ul>\n</li>\n<li>()<ul>\n<li>()表示URL的这个部分是可选的。</li>\n</ul>\n</li>\n<li><em>\n</em>匹配任意字符，直到模式里面的下一个字符为止。匹配方式是非贪婪模式。</li>\n</ul>\n<hr>\n<p>**匹配任意字符，直到下一个/、?、#为止。匹配方式是贪婪模式。</p>\n<h3 id=\"Histories\"><a href=\"#Histories\" class=\"headerlink\" title=\"Histories\"></a>Histories</h3><p>React Router是建立在history之上的。 简而言之，一个history知道如何去监听浏览器地址栏的变化，并解析这个URL转化为location对象，然后router使用它匹配到路由，最后正确地渲染对应的组件。</p>\n<ul>\n<li>createHashHistory<ul>\n<li>这是一个你会获取到的默认history，如果你不指定某个history（即 <Router>{/<em> your routes </em>/}</Router>）。</li>\n<li>它用到的是URL 的hash（#）部分去创建形如example.com/#/some/path的路由。</li>\n<li>?_k=ckuvup是每一个location创建的一个唯一的key，并把它们的状态存储在session storage中。当访客点击“后退”和“前进”时，我们就会有一个机制去恢复这些location state。可使用queryKey: false关闭。</li>\n</ul>\n</li>\n<li>createBrowserHistory<ul>\n<li>Browser history使用History API在浏览器中被创建用于处理URL，新建一个像这样真实的URL example.com/some/path。</li>\n<li>使用Browser history需要在服务器进行配置。</li>\n</ul>\n</li>\n<li>createMemoryHistory<ul>\n<li>Memory history不会在地址栏被操作或读取。</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"js中设置跳转\"><a href=\"#js中设置跳转\" class=\"headerlink\" title=\"js中设置跳转\"></a>js中设置跳转</h3><ul>\n<li>使用browserHistory.push</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> &#123; browserHistory &#125; <span class=\"keyword\">from</span> <span class=\"string\">'react-router'</span>;</div><div class=\"line\">example(event) &#123;</div><div class=\"line\">  browserHistory.push(path);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<ul>\n<li>使用context对象</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">export</span> example React.createClass(&#123;</div><div class=\"line\">  <span class=\"comment\">// ask for `router` from context</span></div><div class=\"line\">  contextTypes: &#123;</div><div class=\"line\">    <span class=\"attr\">router</span>: React.PropTypes.object</div><div class=\"line\">  &#125;,</div><div class=\"line\">  example(event) &#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>.context.router.push(path)</div><div class=\"line\">  &#125;,</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<h2 id=\"添加路由\"><a href=\"#添加路由\" class=\"headerlink\" title=\"添加路由\"></a>添加路由</h2><hr>\n<h3 id=\"在index-js设置路由\"><a href=\"#在index-js设置路由\" class=\"headerlink\" title=\"在index.js设置路由\"></a>在index.js设置路由</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> &#123; Router, Route, Link, hashHistory, IndexRoute, useRouterHistory &#125; <span class=\"keyword\">from</span> <span class=\"string\">'react-router'</span>; <span class=\"comment\">//router组件</span></div><div class=\"line\"><span class=\"keyword\">import</span> &#123; createHistory, createHashHistory &#125; <span class=\"keyword\">from</span> <span class=\"string\">'history'</span>; <span class=\"comment\">//history组件</span></div><div class=\"line\"><span class=\"keyword\">import</span> Login <span class=\"keyword\">from</span>  <span class=\"string\">'./components/login.jsx'</span>; <span class=\"comment\">//login自定义组件</span></div><div class=\"line\"><span class=\"keyword\">import</span> Index <span class=\"keyword\">from</span>  <span class=\"string\">'./components/index.jsx'</span>; <span class=\"comment\">//index自定义组件</span></div><div class=\"line\"><span class=\"keyword\">let</span> history = useRouterHistory(createHashHistory)(&#123; <span class=\"attr\">queryKey</span>: <span class=\"literal\">false</span> &#125;);</div><div class=\"line\"><span class=\"comment\">//将其渲染到页面上id为test的DOM元素内</span></div><div class=\"line\">ReactDOM.render(&lt;Router history=&#123;history&#125;&gt;</div><div class=\"line\">    &lt;Route path=\"/\"&gt;</div><div class=\"line\">      &lt;Route path=\"index\" component=&#123;Index&#125; /&gt;</div><div class=\"line\">      &lt;IndexRoute component=&#123;Login&#125; /&gt;</div><div class=\"line\">    &lt;/Route&gt;</div><div class=\"line\">  &lt;/Router&gt;, </div><div class=\"line\">document.body);</div></pre></td></tr></table></figure>\n<h3 id=\"在components里login-ejs添加路由跳转\"><a href=\"#在components里login-ejs添加路由跳转\" class=\"headerlink\" title=\"在components里login.ejs添加路由跳转\"></a>在components里login.ejs添加路由跳转</h3><ul>\n<li>添加登录按钮的click事件</li>\n<li>添加loginSubmit属性以及跳转</li>\n</ul>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> React <span class=\"keyword\">from</span> <span class=\"string\">'react'</span>; <span class=\"comment\">//导入react组件</span></div><div class=\"line\"><span class=\"keyword\">const</span> Login = React.createClass(&#123;</div><div class=\"line\">  <span class=\"attr\">contextTypes</span>: &#123;</div><div class=\"line\">    <span class=\"attr\">router</span>: React.PropTypes.object</div><div class=\"line\">  &#125;,</div><div class=\"line\">  <span class=\"attr\">loginSubmit</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>.context.router.push(<span class=\"string\">'/index'</span>); <span class=\"comment\">//使用this.content进行跳转</span></div><div class=\"line\">  &#125;,</div><div class=\"line\">  render() &#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> (</div><div class=\"line\">      &lt;div className=\"container\" id=\"login\"&gt;</div><div class=\"line\">        &lt;form id=\"login-form\"&gt;</div><div class=\"line\">          &lt;h3 className=\"text-center\"&gt;login&lt;/h3&gt;</div><div class=\"line\">          &lt;div className=\"form-group\"&gt;</div><div class=\"line\">            &lt;label&gt;account&lt;/label&gt;</div><div class=\"line\">            &lt;input type=\"text\" className=\"form-control\" placeholder=\"Account\" ref=\"loginName\" required /&gt;</div><div class=\"line\">          &lt;/div&gt;</div><div class=\"line\">          &lt;div className=\"form-group\"&gt;</div><div class=\"line\">            &lt;label&gt;Password&lt;/label&gt;</div><div class=\"line\">            &lt;input type=\"password\" className=\"form-control\" placeholder=\"Password\" ref=\"loginPwd\" required /&gt;</div><div class=\"line\">          &lt;/div&gt;</div><div class=\"line\">          &lt;button type=\"submit\"  className=\"btn btn-default\" onClick=&#123;this.loginSubmit&#125;&gt;登录&lt;/button&gt;</div><div class=\"line\">        &lt;/form&gt;</div><div class=\"line\">      &lt;/div&gt;</div><div class=\"line\">    )</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;);</div><div class=\"line\">module.exports = Login;</div></pre></td></tr></table></figure>\n<h2 id=\"结束语\"><a href=\"#结束语\" class=\"headerlink\" title=\"结束语\"></a>结束语</h2><hr>\n<p>从Angular转React中遇到不少问题呢，毕竟两者很多概念和使用方法都很不一样，使用过程中也是大开眼界了呀。<br><a href=\"https://github.com/godbasin/godbasin.github.io/tree/blog-codes/react-notes/2-create-login\">此处查看项目代码（仅包含app部分）</a><br><a href=\"http://o9j9owc7b.bkt.clouddn.com/2-create-login/index.html\">此处查看页面效果</a></p>"},{"title":"React使用笔记3--组件的State/Props与生命周期","date":"2016-08-12T18:30:45.000Z","_content":"最近在学习使用React作为前端的框架，《React使用笔记》系列用于记录过程中的一些使用和解决方法。\n本文记录组件的生命周期与状态State相关的学习笔记。\n<!--more-->\n\n## React State(状态)\n-----\n### React与State\n- React把组件看成是一个状态机（State Machines）\n- 通过与用户的交互，实现不同状态，然后渲染UI，让用户界面和数据保持一致\n- React里，只需更新组件的state，然后根据新的state重新渲染用户界面（不要操作 DOM）\n\n### State的方法和属性\n- this.state属性可获取状态对象\n- getInitialState方法用于定义初始状态，也就是一个对象，这个对象可以通过this.state属性读取\n- this.setState方法就修改状态值，每次修改以后，自动调用this.render方法，再次渲染组件\n- this.replaceState方法替换状态值，与setState相似，但删除之前所有已存在的state键，这些键都不在nextState中\n\n### 使用State\n- 使用state的组件\n> 大部分组件的工作应该是从props里取数据并渲染出来。需要对用户输入、服务器请求或者时间变化等作出响应时，才需要使用state。\n> 常用的模式是创建多个只负责渲染数据的无状态（stateless）组件，在它们的上层创建一个有状态（stateful）组件并把它的状态通过 props 传给子级。这个有状态的组件封装了所有用户的交互逻辑，而这些无状态组件则负责声明式地渲染数据。\n\n- 作为State\n> State应该包括那些可能被组件的事件处理器改变并触发用户界面更新的数据。\n> 当创建一个状态化的组件时，想象一下表示它的状态最少需要哪些数据，并只把这些数据存入this.state。\n\n- 不作为State\nthis.state 应该仅包括能表示用户界面状态所需的最少数据。不应该包括：\n  - 计算所得数据\n  - React组件\n  - 基于props的重复数据\n\n### 参考\n[《富交互性的动态用户界面》](http://www.css88.com/react/docs/interactivity-and-dynamic-uis.html)\n[《React State(状态)》](http://www.runoob.com/react/react-state.html)\n\n## React Props(属性)\n-----\n### Props用法\nthis.props表示一旦定义，就不再改变的特性。\n- 键值对（键： 值）\n- 展开语法{...props}\n  - React会自动把对象中的属性和值当做属性的赋值。\n\n### Props方法和属性\n- propTypes属性\n  - 属性校验器，用来验证组件实例的属性是否符合要求。\n- getDefaultProps方法\n  - 可以用来设置组件属性的默认值。\n- this.props.children属性\n  - this.props.children表示组件的所有子节点，除此之外this.props对象的属性与组件的属性一一对应。\n  - 如果当前组件没有子节点，数据类型是undefined\n  - 如果有一个子节点，数据类型是object\n  - 如果有多个子节点，数据类型是array\n- React.Children方法\n  - React提供一个工具方法React.Children来处理this.props.children，不用处理this.props.children的数据类型。\n  - React.Children.map/forEach/count/only\n\n### Props与State\nstate和props主要的区别在于props是不可变的，而state可以根据与用户交互来改变。\n- 状态只与组件本身相关，由自己本身维护。与父组件与子组件无关\n- 组件不能修改自己的属性，但可以从父组件获取属性，父组件也能修改其属性，组件也可以修改子组件的属性\n\n### 参考\n[《React.js学习笔记之组件属性与状态》](https://segmentfault.com/a/1190000004490882)\n\n## React生命周期\n-----\nReact组件就是一个状态机，它接受两个输入参数: this.props和this.state，返回一个虚拟DOM。\nReact组件的生命周期分几个阶段，每个阶段会有若干个回调函数可以响应不同的时刻。\n组件的生命周期包含三个主要部分：\n- 挂载： 组件被插入到DOM中。\n- 更新： 组件被重新渲染，查明DOM是否应该刷新。\n- 移除： 组件从DOM中移除。\n\n### 创建类\n- getDefaultProps\n  - 在组件类创建的时候调用一次，然后返回值被缓存下来。\n  - 该方法在任何实例创建之前调用，因此不能依赖于 this.props。\n  - 返回的任何复杂对象将会在实例间共享，而不是每个实例拥有一份拷贝。\n\n### 首次实例化/挂载\n类创建完成之后，就可以进行实例化。\n- getInitialState\n  - 在组件挂载之前调用一次。返回值将会作为this.state的初始值。\n- componentWillMount: \n  - 在初始化渲染执行render之前立刻调用。\n  - 如果在这个方法内调用setState，render()将会感知到更新后的state，将会执行仅一次，尽管state改变了。\n  - render就是一个模板的作用，他只处理和展示相关的逻辑，如果有业务逻辑，应放在componentWillMount中执行。\n- render: 渲染并返回一个虚拟DOM\n- componentDidMount\n  - 在初始化渲染render后，react会使用render返回的虚拟DOM来创建真实DOM，之后立刻调用此方法一次。\n  - 在生命周期中的这个时间点，组件拥有一个DOM展现，可以通过this.getDOMNode()来获取相应DOM节点。\n  - 如果想和其它JavaScript框架集成，使用setTimeout或者setInterval来设置定时器，或者发送AJAX请求，可以在该方法中执行这些操作。\n\n### 更新\n当组件实例化完成，就进入了存在期，这时候一般会响应用户操作和父组件的更新来更新视图。\n- componentWillRecieveProps\n  - 在组件接收到新的props的时候调用。在初始化渲染的时候，该方法不会调用。\n  - 用此函数可以作为react在prop传入之后， render()渲染之前更新state的机会。\n- shouldComponentUpdate\n  - 在接收到新的props或者state，将要渲染之前调用。\n  - 如果确定新的props和state不会导致组件更新，则此处应该 返回 false。\n- componentWillUpdate\n  - 在接收到新的props或者state之前立刻调用。在初始化渲染的时候该方法不会被调用。\n  - 使用该方法做一些更新render之前的准备工作。\n- render: 更新并返回一个虚拟DOM\n- componentDidUpdate\n  - 在组件的更新已经同步到DOM中之后立刻被调用。该方法不会在初始化渲染的时候调用。\n  - 使用该方法可以在组件更新之后操作DOM元素。\n\n### 移除\n- componentWillUnmount\n  - 在组件从 DOM 中移除的时候立刻被调用。\n  - 在该方法中执行任何必要的清理，比如无效的定时器，或者清除在componentDidMount中创建的DOM元素。\n\n### 参考\n[《组件的详细说明和生命周期》](http://reactjs.cn/react/docs/component-specs.html)\n[《ReactJS读书笔记二：组件生命周期》](http://blog.csdn.net/lihongxun945/article/details/46334379)\n\n## 结束语\n-----\n该节主要记录本骚年在使用过程中遇到的一些不理解的地方，其实大都是借鉴，而且也是不是很深入的呢。\n下节我们就使用这些东西来建个头部的组件吧。","source":"_posts/react-notes-3-props-state-lifecycle.md","raw":"---\ntitle:  React使用笔记3--组件的State/Props与生命周期\ndate: 2016-08-13 02:30:45\ncategories: react沙拉\ntags: 笔记\n---\n最近在学习使用React作为前端的框架，《React使用笔记》系列用于记录过程中的一些使用和解决方法。\n本文记录组件的生命周期与状态State相关的学习笔记。\n<!--more-->\n\n## React State(状态)\n-----\n### React与State\n- React把组件看成是一个状态机（State Machines）\n- 通过与用户的交互，实现不同状态，然后渲染UI，让用户界面和数据保持一致\n- React里，只需更新组件的state，然后根据新的state重新渲染用户界面（不要操作 DOM）\n\n### State的方法和属性\n- this.state属性可获取状态对象\n- getInitialState方法用于定义初始状态，也就是一个对象，这个对象可以通过this.state属性读取\n- this.setState方法就修改状态值，每次修改以后，自动调用this.render方法，再次渲染组件\n- this.replaceState方法替换状态值，与setState相似，但删除之前所有已存在的state键，这些键都不在nextState中\n\n### 使用State\n- 使用state的组件\n> 大部分组件的工作应该是从props里取数据并渲染出来。需要对用户输入、服务器请求或者时间变化等作出响应时，才需要使用state。\n> 常用的模式是创建多个只负责渲染数据的无状态（stateless）组件，在它们的上层创建一个有状态（stateful）组件并把它的状态通过 props 传给子级。这个有状态的组件封装了所有用户的交互逻辑，而这些无状态组件则负责声明式地渲染数据。\n\n- 作为State\n> State应该包括那些可能被组件的事件处理器改变并触发用户界面更新的数据。\n> 当创建一个状态化的组件时，想象一下表示它的状态最少需要哪些数据，并只把这些数据存入this.state。\n\n- 不作为State\nthis.state 应该仅包括能表示用户界面状态所需的最少数据。不应该包括：\n  - 计算所得数据\n  - React组件\n  - 基于props的重复数据\n\n### 参考\n[《富交互性的动态用户界面》](http://www.css88.com/react/docs/interactivity-and-dynamic-uis.html)\n[《React State(状态)》](http://www.runoob.com/react/react-state.html)\n\n## React Props(属性)\n-----\n### Props用法\nthis.props表示一旦定义，就不再改变的特性。\n- 键值对（键： 值）\n- 展开语法{...props}\n  - React会自动把对象中的属性和值当做属性的赋值。\n\n### Props方法和属性\n- propTypes属性\n  - 属性校验器，用来验证组件实例的属性是否符合要求。\n- getDefaultProps方法\n  - 可以用来设置组件属性的默认值。\n- this.props.children属性\n  - this.props.children表示组件的所有子节点，除此之外this.props对象的属性与组件的属性一一对应。\n  - 如果当前组件没有子节点，数据类型是undefined\n  - 如果有一个子节点，数据类型是object\n  - 如果有多个子节点，数据类型是array\n- React.Children方法\n  - React提供一个工具方法React.Children来处理this.props.children，不用处理this.props.children的数据类型。\n  - React.Children.map/forEach/count/only\n\n### Props与State\nstate和props主要的区别在于props是不可变的，而state可以根据与用户交互来改变。\n- 状态只与组件本身相关，由自己本身维护。与父组件与子组件无关\n- 组件不能修改自己的属性，但可以从父组件获取属性，父组件也能修改其属性，组件也可以修改子组件的属性\n\n### 参考\n[《React.js学习笔记之组件属性与状态》](https://segmentfault.com/a/1190000004490882)\n\n## React生命周期\n-----\nReact组件就是一个状态机，它接受两个输入参数: this.props和this.state，返回一个虚拟DOM。\nReact组件的生命周期分几个阶段，每个阶段会有若干个回调函数可以响应不同的时刻。\n组件的生命周期包含三个主要部分：\n- 挂载： 组件被插入到DOM中。\n- 更新： 组件被重新渲染，查明DOM是否应该刷新。\n- 移除： 组件从DOM中移除。\n\n### 创建类\n- getDefaultProps\n  - 在组件类创建的时候调用一次，然后返回值被缓存下来。\n  - 该方法在任何实例创建之前调用，因此不能依赖于 this.props。\n  - 返回的任何复杂对象将会在实例间共享，而不是每个实例拥有一份拷贝。\n\n### 首次实例化/挂载\n类创建完成之后，就可以进行实例化。\n- getInitialState\n  - 在组件挂载之前调用一次。返回值将会作为this.state的初始值。\n- componentWillMount: \n  - 在初始化渲染执行render之前立刻调用。\n  - 如果在这个方法内调用setState，render()将会感知到更新后的state，将会执行仅一次，尽管state改变了。\n  - render就是一个模板的作用，他只处理和展示相关的逻辑，如果有业务逻辑，应放在componentWillMount中执行。\n- render: 渲染并返回一个虚拟DOM\n- componentDidMount\n  - 在初始化渲染render后，react会使用render返回的虚拟DOM来创建真实DOM，之后立刻调用此方法一次。\n  - 在生命周期中的这个时间点，组件拥有一个DOM展现，可以通过this.getDOMNode()来获取相应DOM节点。\n  - 如果想和其它JavaScript框架集成，使用setTimeout或者setInterval来设置定时器，或者发送AJAX请求，可以在该方法中执行这些操作。\n\n### 更新\n当组件实例化完成，就进入了存在期，这时候一般会响应用户操作和父组件的更新来更新视图。\n- componentWillRecieveProps\n  - 在组件接收到新的props的时候调用。在初始化渲染的时候，该方法不会调用。\n  - 用此函数可以作为react在prop传入之后， render()渲染之前更新state的机会。\n- shouldComponentUpdate\n  - 在接收到新的props或者state，将要渲染之前调用。\n  - 如果确定新的props和state不会导致组件更新，则此处应该 返回 false。\n- componentWillUpdate\n  - 在接收到新的props或者state之前立刻调用。在初始化渲染的时候该方法不会被调用。\n  - 使用该方法做一些更新render之前的准备工作。\n- render: 更新并返回一个虚拟DOM\n- componentDidUpdate\n  - 在组件的更新已经同步到DOM中之后立刻被调用。该方法不会在初始化渲染的时候调用。\n  - 使用该方法可以在组件更新之后操作DOM元素。\n\n### 移除\n- componentWillUnmount\n  - 在组件从 DOM 中移除的时候立刻被调用。\n  - 在该方法中执行任何必要的清理，比如无效的定时器，或者清除在componentDidMount中创建的DOM元素。\n\n### 参考\n[《组件的详细说明和生命周期》](http://reactjs.cn/react/docs/component-specs.html)\n[《ReactJS读书笔记二：组件生命周期》](http://blog.csdn.net/lihongxun945/article/details/46334379)\n\n## 结束语\n-----\n该节主要记录本骚年在使用过程中遇到的一些不理解的地方，其实大都是借鉴，而且也是不是很深入的呢。\n下节我们就使用这些东西来建个头部的组件吧。","slug":"react-notes-3-props-state-lifecycle","published":1,"updated":"2016-08-20T10:54:21.106Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cix45huhc003qxotuhdnydbck","content":"<p>最近在学习使用React作为前端的框架，《React使用笔记》系列用于记录过程中的一些使用和解决方法。<br>本文记录组件的生命周期与状态State相关的学习笔记。<br><a id=\"more\"></a></p>\n<h2 id=\"React-State-状态\"><a href=\"#React-State-状态\" class=\"headerlink\" title=\"React State(状态)\"></a>React State(状态)</h2><hr>\n<h3 id=\"React与State\"><a href=\"#React与State\" class=\"headerlink\" title=\"React与State\"></a>React与State</h3><ul>\n<li>React把组件看成是一个状态机（State Machines）</li>\n<li>通过与用户的交互，实现不同状态，然后渲染UI，让用户界面和数据保持一致</li>\n<li>React里，只需更新组件的state，然后根据新的state重新渲染用户界面（不要操作 DOM）</li>\n</ul>\n<h3 id=\"State的方法和属性\"><a href=\"#State的方法和属性\" class=\"headerlink\" title=\"State的方法和属性\"></a>State的方法和属性</h3><ul>\n<li>this.state属性可获取状态对象</li>\n<li>getInitialState方法用于定义初始状态，也就是一个对象，这个对象可以通过this.state属性读取</li>\n<li>this.setState方法就修改状态值，每次修改以后，自动调用this.render方法，再次渲染组件</li>\n<li>this.replaceState方法替换状态值，与setState相似，但删除之前所有已存在的state键，这些键都不在nextState中</li>\n</ul>\n<h3 id=\"使用State\"><a href=\"#使用State\" class=\"headerlink\" title=\"使用State\"></a>使用State</h3><ul>\n<li><p>使用state的组件</p>\n<blockquote>\n<p>大部分组件的工作应该是从props里取数据并渲染出来。需要对用户输入、服务器请求或者时间变化等作出响应时，才需要使用state。<br>常用的模式是创建多个只负责渲染数据的无状态（stateless）组件，在它们的上层创建一个有状态（stateful）组件并把它的状态通过 props 传给子级。这个有状态的组件封装了所有用户的交互逻辑，而这些无状态组件则负责声明式地渲染数据。</p>\n</blockquote>\n</li>\n<li><p>作为State</p>\n<blockquote>\n<p>State应该包括那些可能被组件的事件处理器改变并触发用户界面更新的数据。<br>当创建一个状态化的组件时，想象一下表示它的状态最少需要哪些数据，并只把这些数据存入this.state。</p>\n</blockquote>\n</li>\n<li><p>不作为State<br>this.state 应该仅包括能表示用户界面状态所需的最少数据。不应该包括：</p>\n<ul>\n<li>计算所得数据</li>\n<li>React组件</li>\n<li>基于props的重复数据</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h3><p><a href=\"http://www.css88.com/react/docs/interactivity-and-dynamic-uis.html\" target=\"_blank\" rel=\"external\">《富交互性的动态用户界面》</a><br><a href=\"http://www.runoob.com/react/react-state.html\" target=\"_blank\" rel=\"external\">《React State(状态)》</a></p>\n<h2 id=\"React-Props-属性\"><a href=\"#React-Props-属性\" class=\"headerlink\" title=\"React Props(属性)\"></a>React Props(属性)</h2><hr>\n<h3 id=\"Props用法\"><a href=\"#Props用法\" class=\"headerlink\" title=\"Props用法\"></a>Props用法</h3><p>this.props表示一旦定义，就不再改变的特性。</p>\n<ul>\n<li>键值对（键： 值）</li>\n<li>展开语法{…props}<ul>\n<li>React会自动把对象中的属性和值当做属性的赋值。</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"Props方法和属性\"><a href=\"#Props方法和属性\" class=\"headerlink\" title=\"Props方法和属性\"></a>Props方法和属性</h3><ul>\n<li>propTypes属性<ul>\n<li>属性校验器，用来验证组件实例的属性是否符合要求。</li>\n</ul>\n</li>\n<li>getDefaultProps方法<ul>\n<li>可以用来设置组件属性的默认值。</li>\n</ul>\n</li>\n<li>this.props.children属性<ul>\n<li>this.props.children表示组件的所有子节点，除此之外this.props对象的属性与组件的属性一一对应。</li>\n<li>如果当前组件没有子节点，数据类型是undefined</li>\n<li>如果有一个子节点，数据类型是object</li>\n<li>如果有多个子节点，数据类型是array</li>\n</ul>\n</li>\n<li>React.Children方法<ul>\n<li>React提供一个工具方法React.Children来处理this.props.children，不用处理this.props.children的数据类型。</li>\n<li>React.Children.map/forEach/count/only</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"Props与State\"><a href=\"#Props与State\" class=\"headerlink\" title=\"Props与State\"></a>Props与State</h3><p>state和props主要的区别在于props是不可变的，而state可以根据与用户交互来改变。</p>\n<ul>\n<li>状态只与组件本身相关，由自己本身维护。与父组件与子组件无关</li>\n<li>组件不能修改自己的属性，但可以从父组件获取属性，父组件也能修改其属性，组件也可以修改子组件的属性</li>\n</ul>\n<h3 id=\"参考-1\"><a href=\"#参考-1\" class=\"headerlink\" title=\"参考\"></a>参考</h3><p><a href=\"https://segmentfault.com/a/1190000004490882\" target=\"_blank\" rel=\"external\">《React.js学习笔记之组件属性与状态》</a></p>\n<h2 id=\"React生命周期\"><a href=\"#React生命周期\" class=\"headerlink\" title=\"React生命周期\"></a>React生命周期</h2><hr>\n<p>React组件就是一个状态机，它接受两个输入参数: this.props和this.state，返回一个虚拟DOM。<br>React组件的生命周期分几个阶段，每个阶段会有若干个回调函数可以响应不同的时刻。<br>组件的生命周期包含三个主要部分：</p>\n<ul>\n<li>挂载： 组件被插入到DOM中。</li>\n<li>更新： 组件被重新渲染，查明DOM是否应该刷新。</li>\n<li>移除： 组件从DOM中移除。</li>\n</ul>\n<h3 id=\"创建类\"><a href=\"#创建类\" class=\"headerlink\" title=\"创建类\"></a>创建类</h3><ul>\n<li>getDefaultProps<ul>\n<li>在组件类创建的时候调用一次，然后返回值被缓存下来。</li>\n<li>该方法在任何实例创建之前调用，因此不能依赖于 this.props。</li>\n<li>返回的任何复杂对象将会在实例间共享，而不是每个实例拥有一份拷贝。</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"首次实例化-挂载\"><a href=\"#首次实例化-挂载\" class=\"headerlink\" title=\"首次实例化/挂载\"></a>首次实例化/挂载</h3><p>类创建完成之后，就可以进行实例化。</p>\n<ul>\n<li>getInitialState<ul>\n<li>在组件挂载之前调用一次。返回值将会作为this.state的初始值。</li>\n</ul>\n</li>\n<li>componentWillMount: <ul>\n<li>在初始化渲染执行render之前立刻调用。</li>\n<li>如果在这个方法内调用setState，render()将会感知到更新后的state，将会执行仅一次，尽管state改变了。</li>\n<li>render就是一个模板的作用，他只处理和展示相关的逻辑，如果有业务逻辑，应放在componentWillMount中执行。</li>\n</ul>\n</li>\n<li>render: 渲染并返回一个虚拟DOM</li>\n<li>componentDidMount<ul>\n<li>在初始化渲染render后，react会使用render返回的虚拟DOM来创建真实DOM，之后立刻调用此方法一次。</li>\n<li>在生命周期中的这个时间点，组件拥有一个DOM展现，可以通过this.getDOMNode()来获取相应DOM节点。</li>\n<li>如果想和其它JavaScript框架集成，使用setTimeout或者setInterval来设置定时器，或者发送AJAX请求，可以在该方法中执行这些操作。</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"更新\"><a href=\"#更新\" class=\"headerlink\" title=\"更新\"></a>更新</h3><p>当组件实例化完成，就进入了存在期，这时候一般会响应用户操作和父组件的更新来更新视图。</p>\n<ul>\n<li>componentWillRecieveProps<ul>\n<li>在组件接收到新的props的时候调用。在初始化渲染的时候，该方法不会调用。</li>\n<li>用此函数可以作为react在prop传入之后， render()渲染之前更新state的机会。</li>\n</ul>\n</li>\n<li>shouldComponentUpdate<ul>\n<li>在接收到新的props或者state，将要渲染之前调用。</li>\n<li>如果确定新的props和state不会导致组件更新，则此处应该 返回 false。</li>\n</ul>\n</li>\n<li>componentWillUpdate<ul>\n<li>在接收到新的props或者state之前立刻调用。在初始化渲染的时候该方法不会被调用。</li>\n<li>使用该方法做一些更新render之前的准备工作。</li>\n</ul>\n</li>\n<li>render: 更新并返回一个虚拟DOM</li>\n<li>componentDidUpdate<ul>\n<li>在组件的更新已经同步到DOM中之后立刻被调用。该方法不会在初始化渲染的时候调用。</li>\n<li>使用该方法可以在组件更新之后操作DOM元素。</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"移除\"><a href=\"#移除\" class=\"headerlink\" title=\"移除\"></a>移除</h3><ul>\n<li>componentWillUnmount<ul>\n<li>在组件从 DOM 中移除的时候立刻被调用。</li>\n<li>在该方法中执行任何必要的清理，比如无效的定时器，或者清除在componentDidMount中创建的DOM元素。</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"参考-2\"><a href=\"#参考-2\" class=\"headerlink\" title=\"参考\"></a>参考</h3><p><a href=\"http://reactjs.cn/react/docs/component-specs.html\" target=\"_blank\" rel=\"external\">《组件的详细说明和生命周期》</a><br><a href=\"http://blog.csdn.net/lihongxun945/article/details/46334379\" target=\"_blank\" rel=\"external\">《ReactJS读书笔记二：组件生命周期》</a></p>\n<h2 id=\"结束语\"><a href=\"#结束语\" class=\"headerlink\" title=\"结束语\"></a>结束语</h2><hr>\n<p>该节主要记录本骚年在使用过程中遇到的一些不理解的地方，其实大都是借鉴，而且也是不是很深入的呢。<br>下节我们就使用这些东西来建个头部的组件吧。</p>\n","excerpt":"<p>最近在学习使用React作为前端的框架，《React使用笔记》系列用于记录过程中的一些使用和解决方法。<br>本文记录组件的生命周期与状态State相关的学习笔记。<br>","more":"</p>\n<h2 id=\"React-State-状态\"><a href=\"#React-State-状态\" class=\"headerlink\" title=\"React State(状态)\"></a>React State(状态)</h2><hr>\n<h3 id=\"React与State\"><a href=\"#React与State\" class=\"headerlink\" title=\"React与State\"></a>React与State</h3><ul>\n<li>React把组件看成是一个状态机（State Machines）</li>\n<li>通过与用户的交互，实现不同状态，然后渲染UI，让用户界面和数据保持一致</li>\n<li>React里，只需更新组件的state，然后根据新的state重新渲染用户界面（不要操作 DOM）</li>\n</ul>\n<h3 id=\"State的方法和属性\"><a href=\"#State的方法和属性\" class=\"headerlink\" title=\"State的方法和属性\"></a>State的方法和属性</h3><ul>\n<li>this.state属性可获取状态对象</li>\n<li>getInitialState方法用于定义初始状态，也就是一个对象，这个对象可以通过this.state属性读取</li>\n<li>this.setState方法就修改状态值，每次修改以后，自动调用this.render方法，再次渲染组件</li>\n<li>this.replaceState方法替换状态值，与setState相似，但删除之前所有已存在的state键，这些键都不在nextState中</li>\n</ul>\n<h3 id=\"使用State\"><a href=\"#使用State\" class=\"headerlink\" title=\"使用State\"></a>使用State</h3><ul>\n<li><p>使用state的组件</p>\n<blockquote>\n<p>大部分组件的工作应该是从props里取数据并渲染出来。需要对用户输入、服务器请求或者时间变化等作出响应时，才需要使用state。<br>常用的模式是创建多个只负责渲染数据的无状态（stateless）组件，在它们的上层创建一个有状态（stateful）组件并把它的状态通过 props 传给子级。这个有状态的组件封装了所有用户的交互逻辑，而这些无状态组件则负责声明式地渲染数据。</p>\n</blockquote>\n</li>\n<li><p>作为State</p>\n<blockquote>\n<p>State应该包括那些可能被组件的事件处理器改变并触发用户界面更新的数据。<br>当创建一个状态化的组件时，想象一下表示它的状态最少需要哪些数据，并只把这些数据存入this.state。</p>\n</blockquote>\n</li>\n<li><p>不作为State<br>this.state 应该仅包括能表示用户界面状态所需的最少数据。不应该包括：</p>\n<ul>\n<li>计算所得数据</li>\n<li>React组件</li>\n<li>基于props的重复数据</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h3><p><a href=\"http://www.css88.com/react/docs/interactivity-and-dynamic-uis.html\">《富交互性的动态用户界面》</a><br><a href=\"http://www.runoob.com/react/react-state.html\">《React State(状态)》</a></p>\n<h2 id=\"React-Props-属性\"><a href=\"#React-Props-属性\" class=\"headerlink\" title=\"React Props(属性)\"></a>React Props(属性)</h2><hr>\n<h3 id=\"Props用法\"><a href=\"#Props用法\" class=\"headerlink\" title=\"Props用法\"></a>Props用法</h3><p>this.props表示一旦定义，就不再改变的特性。</p>\n<ul>\n<li>键值对（键： 值）</li>\n<li>展开语法{…props}<ul>\n<li>React会自动把对象中的属性和值当做属性的赋值。</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"Props方法和属性\"><a href=\"#Props方法和属性\" class=\"headerlink\" title=\"Props方法和属性\"></a>Props方法和属性</h3><ul>\n<li>propTypes属性<ul>\n<li>属性校验器，用来验证组件实例的属性是否符合要求。</li>\n</ul>\n</li>\n<li>getDefaultProps方法<ul>\n<li>可以用来设置组件属性的默认值。</li>\n</ul>\n</li>\n<li>this.props.children属性<ul>\n<li>this.props.children表示组件的所有子节点，除此之外this.props对象的属性与组件的属性一一对应。</li>\n<li>如果当前组件没有子节点，数据类型是undefined</li>\n<li>如果有一个子节点，数据类型是object</li>\n<li>如果有多个子节点，数据类型是array</li>\n</ul>\n</li>\n<li>React.Children方法<ul>\n<li>React提供一个工具方法React.Children来处理this.props.children，不用处理this.props.children的数据类型。</li>\n<li>React.Children.map/forEach/count/only</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"Props与State\"><a href=\"#Props与State\" class=\"headerlink\" title=\"Props与State\"></a>Props与State</h3><p>state和props主要的区别在于props是不可变的，而state可以根据与用户交互来改变。</p>\n<ul>\n<li>状态只与组件本身相关，由自己本身维护。与父组件与子组件无关</li>\n<li>组件不能修改自己的属性，但可以从父组件获取属性，父组件也能修改其属性，组件也可以修改子组件的属性</li>\n</ul>\n<h3 id=\"参考-1\"><a href=\"#参考-1\" class=\"headerlink\" title=\"参考\"></a>参考</h3><p><a href=\"https://segmentfault.com/a/1190000004490882\">《React.js学习笔记之组件属性与状态》</a></p>\n<h2 id=\"React生命周期\"><a href=\"#React生命周期\" class=\"headerlink\" title=\"React生命周期\"></a>React生命周期</h2><hr>\n<p>React组件就是一个状态机，它接受两个输入参数: this.props和this.state，返回一个虚拟DOM。<br>React组件的生命周期分几个阶段，每个阶段会有若干个回调函数可以响应不同的时刻。<br>组件的生命周期包含三个主要部分：</p>\n<ul>\n<li>挂载： 组件被插入到DOM中。</li>\n<li>更新： 组件被重新渲染，查明DOM是否应该刷新。</li>\n<li>移除： 组件从DOM中移除。</li>\n</ul>\n<h3 id=\"创建类\"><a href=\"#创建类\" class=\"headerlink\" title=\"创建类\"></a>创建类</h3><ul>\n<li>getDefaultProps<ul>\n<li>在组件类创建的时候调用一次，然后返回值被缓存下来。</li>\n<li>该方法在任何实例创建之前调用，因此不能依赖于 this.props。</li>\n<li>返回的任何复杂对象将会在实例间共享，而不是每个实例拥有一份拷贝。</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"首次实例化-挂载\"><a href=\"#首次实例化-挂载\" class=\"headerlink\" title=\"首次实例化/挂载\"></a>首次实例化/挂载</h3><p>类创建完成之后，就可以进行实例化。</p>\n<ul>\n<li>getInitialState<ul>\n<li>在组件挂载之前调用一次。返回值将会作为this.state的初始值。</li>\n</ul>\n</li>\n<li>componentWillMount: <ul>\n<li>在初始化渲染执行render之前立刻调用。</li>\n<li>如果在这个方法内调用setState，render()将会感知到更新后的state，将会执行仅一次，尽管state改变了。</li>\n<li>render就是一个模板的作用，他只处理和展示相关的逻辑，如果有业务逻辑，应放在componentWillMount中执行。</li>\n</ul>\n</li>\n<li>render: 渲染并返回一个虚拟DOM</li>\n<li>componentDidMount<ul>\n<li>在初始化渲染render后，react会使用render返回的虚拟DOM来创建真实DOM，之后立刻调用此方法一次。</li>\n<li>在生命周期中的这个时间点，组件拥有一个DOM展现，可以通过this.getDOMNode()来获取相应DOM节点。</li>\n<li>如果想和其它JavaScript框架集成，使用setTimeout或者setInterval来设置定时器，或者发送AJAX请求，可以在该方法中执行这些操作。</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"更新\"><a href=\"#更新\" class=\"headerlink\" title=\"更新\"></a>更新</h3><p>当组件实例化完成，就进入了存在期，这时候一般会响应用户操作和父组件的更新来更新视图。</p>\n<ul>\n<li>componentWillRecieveProps<ul>\n<li>在组件接收到新的props的时候调用。在初始化渲染的时候，该方法不会调用。</li>\n<li>用此函数可以作为react在prop传入之后， render()渲染之前更新state的机会。</li>\n</ul>\n</li>\n<li>shouldComponentUpdate<ul>\n<li>在接收到新的props或者state，将要渲染之前调用。</li>\n<li>如果确定新的props和state不会导致组件更新，则此处应该 返回 false。</li>\n</ul>\n</li>\n<li>componentWillUpdate<ul>\n<li>在接收到新的props或者state之前立刻调用。在初始化渲染的时候该方法不会被调用。</li>\n<li>使用该方法做一些更新render之前的准备工作。</li>\n</ul>\n</li>\n<li>render: 更新并返回一个虚拟DOM</li>\n<li>componentDidUpdate<ul>\n<li>在组件的更新已经同步到DOM中之后立刻被调用。该方法不会在初始化渲染的时候调用。</li>\n<li>使用该方法可以在组件更新之后操作DOM元素。</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"移除\"><a href=\"#移除\" class=\"headerlink\" title=\"移除\"></a>移除</h3><ul>\n<li>componentWillUnmount<ul>\n<li>在组件从 DOM 中移除的时候立刻被调用。</li>\n<li>在该方法中执行任何必要的清理，比如无效的定时器，或者清除在componentDidMount中创建的DOM元素。</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"参考-2\"><a href=\"#参考-2\" class=\"headerlink\" title=\"参考\"></a>参考</h3><p><a href=\"http://reactjs.cn/react/docs/component-specs.html\">《组件的详细说明和生命周期》</a><br><a href=\"http://blog.csdn.net/lihongxun945/article/details/46334379\">《ReactJS读书笔记二：组件生命周期》</a></p>\n<h2 id=\"结束语\"><a href=\"#结束语\" class=\"headerlink\" title=\"结束语\"></a>结束语</h2><hr>\n<p>该节主要记录本骚年在使用过程中遇到的一些不理解的地方，其实大都是借鉴，而且也是不是很深入的呢。<br>下节我们就使用这些东西来建个头部的组件吧。</p>"},{"title":"React使用笔记4--创建头部组件","date":"2016-08-14T06:51:07.000Z","_content":"最近在学习使用React作为前端的框架，《React使用笔记》系列用于记录过程中的一些使用和解决方法。\n本文记录创建头部组件的过程。\n<!--more-->\n\n## react-bootstrap\n-----\n想要在react中使用bootstrap吗？\n如果只是需要使用样式相关的，可以在tempaltes的index.ejs中引用css文件就可以。\n``` html\n<link rel=\"stylesheet\" href=\"https://maxcdn.bootstrapcdn.com/bootstrap/latest/css/bootstrap.min.css\">\n```\n如果你还想要使用bootstrap的组件，那么就可以使用[react-bootstrap库](http://react-bootstrap.github.io/introduction.html)啦。\n### 安装react-bootstrap\n- 使用npm安装\n\n``` bash\n$ npm install react-bootstrap --save\n```\n\n- 引用css文件\n\n``` html\n<link rel=\"stylesheet\" href=\"https://maxcdn.bootstrapcdn.com/bootstrap/latest/css/bootstrap.min.css\">\n```\n\n### 导入相关组件\nreact-bootstrap的组件都需要一一导入。\n``` jsx\nimport Button from 'react-bootstrap/lib/Button';\n//或者\nimport { Button } from 'react-bootstrap';\n```\n\n### 使用\n使用方法如下，其中组件会有大写的标签，以及一定的属性。\n``` jsx\n<Button bsStyle=\"success\" bsSize=\"small\" onClick={someCallback}>\n  Something\n</Button>\n```\n具体每个组件的使用方法可到[组件库](http://react-bootstrap.github.io/components.html)中查看。\n\n## 创建头部菜单\n-----\n该头部菜单与前一个AngularJS使用笔记中完全一致。如图：\n![image](http://o905ne85q.bkt.clouddn.com/C902.tmp.png)\n\n### 添加头部组件\n- 在components文件夹中添加header.jsx文件\n- 定义并输出Header组件\n\n``` jsx\nimport React from 'react'; //导入react组件\n//定义Header组件\nconst Header = React.createClass({\n\trender() {\n\t\treturn <header>暂时头部</header>;\n\t}\n});\nmodule.exports = Header; //输出Header组件\n```\n\n- 在components中的index.jsx中使用该组件\n\n``` jsx\nimport Header from  './header.jsx'; //Header自定义组件\nconst Index = React.createClass({\n  render() {\n    return <Header></Header>;\n  }\n});\n```\n\n此时我们可以在/index路由页面看到头部了。\n接下来会运用到react有关的Props/State和生命周期，大家如果不是很清楚可以翻上一篇[《React使用笔记3--组件的State/Props与生命周期》](https://godbasin.github.io/2016/08/13/react-notes-3-props-state-lifecycle/)进行预热。\n\n### 添加属性Props\n由于菜单的内容不变，我们可以将其写成Props属性。\n``` jsx\npropTypes: { //属性校验器\n\t\tmenus: React.PropTypes.array, //表示menus属性必须是array，否则报错\n\t\tusermenus: React.PropTypes.array, //表示usermenus属性必须是array，否则报错\n},\ngetDefaultProps: function() {\n\treturn { //设置默认属性\n\t\tmenus: [{\n\t\t\ttitle: 'index', //title用于储存路由对应的路径\n\t\t\thref: '/index', //href用于设定该菜单跳转路由\n\t\t\ttext: '首页', //text用于储存该菜单显示名称\n\t\t}, {\n\t\t\ttitle: 'others',\n\t\t\thref: '/other',\n\t\t\ttext: '其他',\n\t\t}],\n\t\t//usermenus用于储存侧边下拉菜单\n\t\tusermenus: [{\n\t\t\tclick: function(){}, //click用于设置该菜单点击事件\n\t\t\ttext: '退出', //text用于储存该菜单显示名称\n\t\t}],\n\t};\n},\n```\n\n### 添加state状态\n像时间这种每500毫秒刷新一次的，我们将其放在state中。\n``` jsx\ngetInitialState: function() {\n\treturn {clock: ''}; //设置初始state值\n},\n//定义clockRender事件，用于改变this.state.clock值\nclockRender: function(){\n\tlet numberStandard = function(num) {\n\t\tlet _val = Number(num), _num;\n\t\t_num = (_val < 10) ? ('0' + _val) : ('' + _val);\n\t\treturn _num;\n\t}, _date = new Date(),\n\t\tclock = _date.getFullYear() + '年' + (_date.getMonth() + 1) + '月' +\n\t\t\t_date.getDate() + '日' + ' ' + numberStandard(_date.getHours()) + ':' + numberStandard(_date.getMinutes()) +\n\t\t\t':' + numberStandard(_date.getSeconds());\n\tthis.setState({clock: clock});\n},\n```\n注意：state不应存储计算后的值，计算应该在render中进行，但由于比较长，本骚年也就这样将就用了。小伙伴们有更好的方法也可以提出来哦。\n\n### setInterval时钟\n在componentDidMount中进行setInterval时钟。componentDidMount属于react生命周期，在初始化渲染执行之后立刻调用一次，仅客户端有效。\nrender就是一个模板的作用，他只处理和展示相关的逻辑，如果有业务逻辑，应放在componentWillMount和componentDidMount中执行。\n``` jsx\n//进行setInterval时钟\ncomponentDidMount: function(){\n\tlet that = this;\t\t\t\n\tthis.interval = setInterval(function() {\n\t\tthat.clockRender();\n\t}, 500);\n},\n//组件注销时需销毁定时器\ncomponentWillUnmount: function(){\n\tclearInterval(this.interval);\n},\n```\n\n### 设置render模板\n在这里大家可以看到react-bootstrap的使用方法啦。当然每个组件都是已经在该文件中引入了的。\n还有jsx的遍历方法也会在这里展示。\n- 在index.jsx页面引入Header时添加属性active=\"index\"，作为菜单选中样式的判断\n\n``` jsx\nrender() {\n\treturn (\n\t\tlet active = this.props.active; //获取父组件传递的props\n\t\t<Navbar className=\"header\" fluid>\n\t\t\t<Navbar.Header className=\"navbar-header\">\n\t\t\t\t<Navbar.Brand>Godbasin</Navbar.Brand>\n\t\t\t</Navbar.Header>\n\t\t\t<Navbar.Collapse id=\"bs-example-navbar-collapse-1\">\n\t\t\t\t<Nav navbar>     \t\n\t\t\t\t{ //遍历头部菜单menus\n\t\t\t\t\tthis.props.menus.map(function(menu, i) {\n\t\t\t\t\t\t//判断，若title等于active，则加载选中样式\n\t\t\t\t\t\treturn (<li key={i} className={ menu.title == active ? \"active\" : \"\"}><a href={menu.href}>{ menu.text }<span className=\"sr-only\">(current)</span></a></li>);\n\t\t\t\t\t})\n\t\t\t\t}\n\t\t\t\t</Nav>\n\t\t\t\t<Nav navbar pullRight>\n\t\t\t\t\t<li><a>{ this.state.clock }</a></li>\n\t\t\t\t\t<NavDropdown title=\"菜单\" id=\"top-aside-menu\">\n\t\t\t\t\t\t{ //遍历右侧下拉菜单usermenus\n\t\t\t\t\t\t\tthis.props.usermenus.map(function(usermenu,i) {\n\t\t\t\t\t\t\t\treturn (<MenuItem key={i}>{ usermenu.text }</MenuItem>);\n\t\t\t\t\t\t\t})\n\t\t\t\t\t\t}\n\t\t\t\t\t</NavDropdown>\n\t\t\t\t</Nav>\n\t\t\t</Navbar.Collapse>\n\t\t</Navbar>\n\t)\n}\n```\n\n## 结束语\n-----\n不得不说框架之间的切换还是有很多问题呢，这时候需要的就是坚持不懈地学习和排除bug啦。\n当然本骚年本来还想用ES6装装逼的，奈何不熟练的使用后果就是很多报错，看来也还是要加强ES6语法呀。\n[此处查看项目代码（仅包含app部分）](https://github.com/godbasin/godbasin.github.io/tree/blog-codes/react-notes/4-create-header)\n[此处查看页面效果](http://o9j9owc7b.bkt.clouddn.com/4-create-header/index.html?#/index)\n","source":"_posts/react-notes-4-create-header.md","raw":"---\ntitle:  React使用笔记4--创建头部组件\ndate: 2016-08-14 14:51:07\ncategories: react沙拉\ntags: 笔记\n---\n最近在学习使用React作为前端的框架，《React使用笔记》系列用于记录过程中的一些使用和解决方法。\n本文记录创建头部组件的过程。\n<!--more-->\n\n## react-bootstrap\n-----\n想要在react中使用bootstrap吗？\n如果只是需要使用样式相关的，可以在tempaltes的index.ejs中引用css文件就可以。\n``` html\n<link rel=\"stylesheet\" href=\"https://maxcdn.bootstrapcdn.com/bootstrap/latest/css/bootstrap.min.css\">\n```\n如果你还想要使用bootstrap的组件，那么就可以使用[react-bootstrap库](http://react-bootstrap.github.io/introduction.html)啦。\n### 安装react-bootstrap\n- 使用npm安装\n\n``` bash\n$ npm install react-bootstrap --save\n```\n\n- 引用css文件\n\n``` html\n<link rel=\"stylesheet\" href=\"https://maxcdn.bootstrapcdn.com/bootstrap/latest/css/bootstrap.min.css\">\n```\n\n### 导入相关组件\nreact-bootstrap的组件都需要一一导入。\n``` jsx\nimport Button from 'react-bootstrap/lib/Button';\n//或者\nimport { Button } from 'react-bootstrap';\n```\n\n### 使用\n使用方法如下，其中组件会有大写的标签，以及一定的属性。\n``` jsx\n<Button bsStyle=\"success\" bsSize=\"small\" onClick={someCallback}>\n  Something\n</Button>\n```\n具体每个组件的使用方法可到[组件库](http://react-bootstrap.github.io/components.html)中查看。\n\n## 创建头部菜单\n-----\n该头部菜单与前一个AngularJS使用笔记中完全一致。如图：\n![image](http://o905ne85q.bkt.clouddn.com/C902.tmp.png)\n\n### 添加头部组件\n- 在components文件夹中添加header.jsx文件\n- 定义并输出Header组件\n\n``` jsx\nimport React from 'react'; //导入react组件\n//定义Header组件\nconst Header = React.createClass({\n\trender() {\n\t\treturn <header>暂时头部</header>;\n\t}\n});\nmodule.exports = Header; //输出Header组件\n```\n\n- 在components中的index.jsx中使用该组件\n\n``` jsx\nimport Header from  './header.jsx'; //Header自定义组件\nconst Index = React.createClass({\n  render() {\n    return <Header></Header>;\n  }\n});\n```\n\n此时我们可以在/index路由页面看到头部了。\n接下来会运用到react有关的Props/State和生命周期，大家如果不是很清楚可以翻上一篇[《React使用笔记3--组件的State/Props与生命周期》](https://godbasin.github.io/2016/08/13/react-notes-3-props-state-lifecycle/)进行预热。\n\n### 添加属性Props\n由于菜单的内容不变，我们可以将其写成Props属性。\n``` jsx\npropTypes: { //属性校验器\n\t\tmenus: React.PropTypes.array, //表示menus属性必须是array，否则报错\n\t\tusermenus: React.PropTypes.array, //表示usermenus属性必须是array，否则报错\n},\ngetDefaultProps: function() {\n\treturn { //设置默认属性\n\t\tmenus: [{\n\t\t\ttitle: 'index', //title用于储存路由对应的路径\n\t\t\thref: '/index', //href用于设定该菜单跳转路由\n\t\t\ttext: '首页', //text用于储存该菜单显示名称\n\t\t}, {\n\t\t\ttitle: 'others',\n\t\t\thref: '/other',\n\t\t\ttext: '其他',\n\t\t}],\n\t\t//usermenus用于储存侧边下拉菜单\n\t\tusermenus: [{\n\t\t\tclick: function(){}, //click用于设置该菜单点击事件\n\t\t\ttext: '退出', //text用于储存该菜单显示名称\n\t\t}],\n\t};\n},\n```\n\n### 添加state状态\n像时间这种每500毫秒刷新一次的，我们将其放在state中。\n``` jsx\ngetInitialState: function() {\n\treturn {clock: ''}; //设置初始state值\n},\n//定义clockRender事件，用于改变this.state.clock值\nclockRender: function(){\n\tlet numberStandard = function(num) {\n\t\tlet _val = Number(num), _num;\n\t\t_num = (_val < 10) ? ('0' + _val) : ('' + _val);\n\t\treturn _num;\n\t}, _date = new Date(),\n\t\tclock = _date.getFullYear() + '年' + (_date.getMonth() + 1) + '月' +\n\t\t\t_date.getDate() + '日' + ' ' + numberStandard(_date.getHours()) + ':' + numberStandard(_date.getMinutes()) +\n\t\t\t':' + numberStandard(_date.getSeconds());\n\tthis.setState({clock: clock});\n},\n```\n注意：state不应存储计算后的值，计算应该在render中进行，但由于比较长，本骚年也就这样将就用了。小伙伴们有更好的方法也可以提出来哦。\n\n### setInterval时钟\n在componentDidMount中进行setInterval时钟。componentDidMount属于react生命周期，在初始化渲染执行之后立刻调用一次，仅客户端有效。\nrender就是一个模板的作用，他只处理和展示相关的逻辑，如果有业务逻辑，应放在componentWillMount和componentDidMount中执行。\n``` jsx\n//进行setInterval时钟\ncomponentDidMount: function(){\n\tlet that = this;\t\t\t\n\tthis.interval = setInterval(function() {\n\t\tthat.clockRender();\n\t}, 500);\n},\n//组件注销时需销毁定时器\ncomponentWillUnmount: function(){\n\tclearInterval(this.interval);\n},\n```\n\n### 设置render模板\n在这里大家可以看到react-bootstrap的使用方法啦。当然每个组件都是已经在该文件中引入了的。\n还有jsx的遍历方法也会在这里展示。\n- 在index.jsx页面引入Header时添加属性active=\"index\"，作为菜单选中样式的判断\n\n``` jsx\nrender() {\n\treturn (\n\t\tlet active = this.props.active; //获取父组件传递的props\n\t\t<Navbar className=\"header\" fluid>\n\t\t\t<Navbar.Header className=\"navbar-header\">\n\t\t\t\t<Navbar.Brand>Godbasin</Navbar.Brand>\n\t\t\t</Navbar.Header>\n\t\t\t<Navbar.Collapse id=\"bs-example-navbar-collapse-1\">\n\t\t\t\t<Nav navbar>     \t\n\t\t\t\t{ //遍历头部菜单menus\n\t\t\t\t\tthis.props.menus.map(function(menu, i) {\n\t\t\t\t\t\t//判断，若title等于active，则加载选中样式\n\t\t\t\t\t\treturn (<li key={i} className={ menu.title == active ? \"active\" : \"\"}><a href={menu.href}>{ menu.text }<span className=\"sr-only\">(current)</span></a></li>);\n\t\t\t\t\t})\n\t\t\t\t}\n\t\t\t\t</Nav>\n\t\t\t\t<Nav navbar pullRight>\n\t\t\t\t\t<li><a>{ this.state.clock }</a></li>\n\t\t\t\t\t<NavDropdown title=\"菜单\" id=\"top-aside-menu\">\n\t\t\t\t\t\t{ //遍历右侧下拉菜单usermenus\n\t\t\t\t\t\t\tthis.props.usermenus.map(function(usermenu,i) {\n\t\t\t\t\t\t\t\treturn (<MenuItem key={i}>{ usermenu.text }</MenuItem>);\n\t\t\t\t\t\t\t})\n\t\t\t\t\t\t}\n\t\t\t\t\t</NavDropdown>\n\t\t\t\t</Nav>\n\t\t\t</Navbar.Collapse>\n\t\t</Navbar>\n\t)\n}\n```\n\n## 结束语\n-----\n不得不说框架之间的切换还是有很多问题呢，这时候需要的就是坚持不懈地学习和排除bug啦。\n当然本骚年本来还想用ES6装装逼的，奈何不熟练的使用后果就是很多报错，看来也还是要加强ES6语法呀。\n[此处查看项目代码（仅包含app部分）](https://github.com/godbasin/godbasin.github.io/tree/blog-codes/react-notes/4-create-header)\n[此处查看页面效果](http://o9j9owc7b.bkt.clouddn.com/4-create-header/index.html?#/index)\n","slug":"react-notes-4-create-header","published":1,"updated":"2016-08-20T10:54:21.110Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cix45huhf003txotu9mt9qj93","content":"<p>最近在学习使用React作为前端的框架，《React使用笔记》系列用于记录过程中的一些使用和解决方法。<br>本文记录创建头部组件的过程。<br><a id=\"more\"></a></p>\n<h2 id=\"react-bootstrap\"><a href=\"#react-bootstrap\" class=\"headerlink\" title=\"react-bootstrap\"></a>react-bootstrap</h2><hr>\n<p>想要在react中使用bootstrap吗？<br>如果只是需要使用样式相关的，可以在tempaltes的index.ejs中引用css文件就可以。<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">link</span> <span class=\"attr\">rel</span>=<span class=\"string\">\"stylesheet\"</span> <span class=\"attr\">href</span>=<span class=\"string\">\"https://maxcdn.bootstrapcdn.com/bootstrap/latest/css/bootstrap.min.css\"</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<p>如果你还想要使用bootstrap的组件，那么就可以使用<a href=\"http://react-bootstrap.github.io/introduction.html\" target=\"_blank\" rel=\"external\">react-bootstrap库</a>啦。</p>\n<h3 id=\"安装react-bootstrap\"><a href=\"#安装react-bootstrap\" class=\"headerlink\" title=\"安装react-bootstrap\"></a>安装react-bootstrap</h3><ul>\n<li>使用npm安装</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ npm install react-bootstrap --save</div></pre></td></tr></table></figure>\n<ul>\n<li>引用css文件</li>\n</ul>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">link</span> <span class=\"attr\">rel</span>=<span class=\"string\">\"stylesheet\"</span> <span class=\"attr\">href</span>=<span class=\"string\">\"https://maxcdn.bootstrapcdn.com/bootstrap/latest/css/bootstrap.min.css\"</span>&gt;</span></div></pre></td></tr></table></figure>\n<h3 id=\"导入相关组件\"><a href=\"#导入相关组件\" class=\"headerlink\" title=\"导入相关组件\"></a>导入相关组件</h3><p>react-bootstrap的组件都需要一一导入。<br><figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> Button <span class=\"keyword\">from</span> <span class=\"string\">'react-bootstrap/lib/Button'</span>;</div><div class=\"line\"><span class=\"comment\">//或者</span></div><div class=\"line\"><span class=\"keyword\">import</span> &#123; Button &#125; <span class=\"keyword\">from</span> <span class=\"string\">'react-bootstrap'</span>;</div></pre></td></tr></table></figure></p>\n<h3 id=\"使用\"><a href=\"#使用\" class=\"headerlink\" title=\"使用\"></a>使用</h3><p>使用方法如下，其中组件会有大写的标签，以及一定的属性。<br><figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;Button bsStyle=<span class=\"string\">\"success\"</span> bsSize=<span class=\"string\">\"small\"</span> onClick=&#123;someCallback&#125;&gt;</div><div class=\"line\">  Something</div><div class=\"line\">&lt;<span class=\"regexp\">/Button&gt;</span></div></pre></td></tr></table></figure></p>\n<p>具体每个组件的使用方法可到<a href=\"http://react-bootstrap.github.io/components.html\" target=\"_blank\" rel=\"external\">组件库</a>中查看。</p>\n<h2 id=\"创建头部菜单\"><a href=\"#创建头部菜单\" class=\"headerlink\" title=\"创建头部菜单\"></a>创建头部菜单</h2><hr>\n<p>该头部菜单与前一个AngularJS使用笔记中完全一致。如图：<br><img src=\"http://o905ne85q.bkt.clouddn.com/C902.tmp.png\" alt=\"image\"></p>\n<h3 id=\"添加头部组件\"><a href=\"#添加头部组件\" class=\"headerlink\" title=\"添加头部组件\"></a>添加头部组件</h3><ul>\n<li>在components文件夹中添加header.jsx文件</li>\n<li>定义并输出Header组件</li>\n</ul>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> React <span class=\"keyword\">from</span> <span class=\"string\">'react'</span>; <span class=\"comment\">//导入react组件</span></div><div class=\"line\"><span class=\"comment\">//定义Header组件</span></div><div class=\"line\"><span class=\"keyword\">const</span> Header = React.createClass(&#123;</div><div class=\"line\">  render() &#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">header</span>&gt;</span>暂时头部<span class=\"tag\">&lt;/<span class=\"name\">header</span>&gt;</span></span>;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;);</div><div class=\"line\"><span class=\"built_in\">module</span>.exports = Header; <span class=\"comment\">//输出Header组件</span></div></pre></td></tr></table></figure>\n<ul>\n<li>在components中的index.jsx中使用该组件</li>\n</ul>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> Header <span class=\"keyword\">from</span>  <span class=\"string\">'./header.jsx'</span>; <span class=\"comment\">//Header自定义组件</span></div><div class=\"line\"><span class=\"keyword\">const</span> Index = React.createClass(&#123;</div><div class=\"line\">  render() &#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">Header</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">Header</span>&gt;</span></span>;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<p>此时我们可以在/index路由页面看到头部了。<br>接下来会运用到react有关的Props/State和生命周期，大家如果不是很清楚可以翻上一篇<a href=\"https://godbasin.github.io/2016/08/13/react-notes-3-props-state-lifecycle/\">《React使用笔记3–组件的State/Props与生命周期》</a>进行预热。</p>\n<h3 id=\"添加属性Props\"><a href=\"#添加属性Props\" class=\"headerlink\" title=\"添加属性Props\"></a>添加属性Props</h3><p>由于菜单的内容不变，我们可以将其写成Props属性。<br><figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div></pre></td><td class=\"code\"><pre><div class=\"line\">propTypes: &#123; <span class=\"comment\">//属性校验器</span></div><div class=\"line\">    menus: React.PropTypes.array, <span class=\"comment\">//表示menus属性必须是array，否则报错</span></div><div class=\"line\">    usermenus: React.PropTypes.array, <span class=\"comment\">//表示usermenus属性必须是array，否则报错</span></div><div class=\"line\">&#125;,</div><div class=\"line\"><span class=\"attr\">getDefaultProps</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> &#123; <span class=\"comment\">//设置默认属性</span></div><div class=\"line\">    menus: [&#123;</div><div class=\"line\">      <span class=\"attr\">title</span>: <span class=\"string\">'index'</span>, <span class=\"comment\">//title用于储存路由对应的路径</span></div><div class=\"line\">      href: <span class=\"string\">'/index'</span>, <span class=\"comment\">//href用于设定该菜单跳转路由</span></div><div class=\"line\">      text: <span class=\"string\">'首页'</span>, <span class=\"comment\">//text用于储存该菜单显示名称</span></div><div class=\"line\">    &#125;, &#123;</div><div class=\"line\">      <span class=\"attr\">title</span>: <span class=\"string\">'others'</span>,</div><div class=\"line\">      <span class=\"attr\">href</span>: <span class=\"string\">'/other'</span>,</div><div class=\"line\">      <span class=\"attr\">text</span>: <span class=\"string\">'其他'</span>,</div><div class=\"line\">    &#125;],</div><div class=\"line\">    <span class=\"comment\">//usermenus用于储存侧边下拉菜单</span></div><div class=\"line\">    usermenus: [&#123;</div><div class=\"line\">      <span class=\"attr\">click</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;&#125;, <span class=\"comment\">//click用于设置该菜单点击事件</span></div><div class=\"line\">      text: <span class=\"string\">'退出'</span>, <span class=\"comment\">//text用于储存该菜单显示名称</span></div><div class=\"line\">    &#125;],</div><div class=\"line\">  &#125;;</div><div class=\"line\">&#125;,</div></pre></td></tr></table></figure></p>\n<h3 id=\"添加state状态\"><a href=\"#添加state状态\" class=\"headerlink\" title=\"添加state状态\"></a>添加state状态</h3><p>像时间这种每500毫秒刷新一次的，我们将其放在state中。<br><figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\">getInitialState: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> &#123;<span class=\"attr\">clock</span>: <span class=\"string\">''</span>&#125;; <span class=\"comment\">//设置初始state值</span></div><div class=\"line\">&#125;,</div><div class=\"line\"><span class=\"comment\">//定义clockRender事件，用于改变this.state.clock值</span></div><div class=\"line\">clockRender: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">  <span class=\"keyword\">let</span> numberStandard = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">num</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">let</span> _val = <span class=\"built_in\">Number</span>(num), _num;</div><div class=\"line\">    _num = (_val &lt; <span class=\"number\">10</span>) ? (<span class=\"string\">'0'</span> + _val) : (<span class=\"string\">''</span> + _val);</div><div class=\"line\">    <span class=\"keyword\">return</span> _num;</div><div class=\"line\">  &#125;, _date = <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>(),</div><div class=\"line\">    clock = _date.getFullYear() + <span class=\"string\">'年'</span> + (_date.getMonth() + <span class=\"number\">1</span>) + <span class=\"string\">'月'</span> +</div><div class=\"line\">      _date.getDate() + <span class=\"string\">'日'</span> + <span class=\"string\">' '</span> + numberStandard(_date.getHours()) + <span class=\"string\">':'</span> + numberStandard(_date.getMinutes()) +</div><div class=\"line\">      <span class=\"string\">':'</span> + numberStandard(_date.getSeconds());</div><div class=\"line\">  <span class=\"keyword\">this</span>.setState(&#123;<span class=\"attr\">clock</span>: clock&#125;);</div><div class=\"line\">&#125;,</div></pre></td></tr></table></figure></p>\n<p>注意：state不应存储计算后的值，计算应该在render中进行，但由于比较长，本骚年也就这样将就用了。小伙伴们有更好的方法也可以提出来哦。</p>\n<h3 id=\"setInterval时钟\"><a href=\"#setInterval时钟\" class=\"headerlink\" title=\"setInterval时钟\"></a>setInterval时钟</h3><p>在componentDidMount中进行setInterval时钟。componentDidMount属于react生命周期，在初始化渲染执行之后立刻调用一次，仅客户端有效。<br>render就是一个模板的作用，他只处理和展示相关的逻辑，如果有业务逻辑，应放在componentWillMount和componentDidMount中执行。<br><figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//进行setInterval时钟</span></div><div class=\"line\">componentDidMount: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">  <span class=\"keyword\">let</span> that = <span class=\"keyword\">this</span>;\t\t\t</div><div class=\"line\">  <span class=\"keyword\">this</span>.interval = setInterval(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    that.clockRender();</div><div class=\"line\">  &#125;, <span class=\"number\">500</span>);</div><div class=\"line\">&#125;,</div><div class=\"line\"><span class=\"comment\">//组件注销时需销毁定时器</span></div><div class=\"line\">componentWillUnmount: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">  clearInterval(<span class=\"keyword\">this</span>.interval);</div><div class=\"line\">&#125;,</div></pre></td></tr></table></figure></p>\n<h3 id=\"设置render模板\"><a href=\"#设置render模板\" class=\"headerlink\" title=\"设置render模板\"></a>设置render模板</h3><p>在这里大家可以看到react-bootstrap的使用方法啦。当然每个组件都是已经在该文件中引入了的。<br>还有jsx的遍历方法也会在这里展示。</p>\n<ul>\n<li>在index.jsx页面引入Header时添加属性active=”index”，作为菜单选中样式的判断</li>\n</ul>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div></pre></td><td class=\"code\"><pre><div class=\"line\">render() &#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> (</div><div class=\"line\">    <span class=\"keyword\">let</span> active = <span class=\"keyword\">this</span>.props.active; <span class=\"comment\">//获取父组件传递的props</span></div><div class=\"line\">    &lt;Navbar className=<span class=\"string\">\"header\"</span> fluid&gt;</div><div class=\"line\">      &lt;Navbar.Header className=\"navbar-header\"&gt;</div><div class=\"line\">        &lt;Navbar.Brand&gt;Godbasin&lt;/Navbar.Brand&gt;</div><div class=\"line\">      &lt;/Navbar.Header&gt;</div><div class=\"line\">      &lt;Navbar.Collapse id=\"bs-example-navbar-collapse-1\"&gt;</div><div class=\"line\">        &lt;Nav navbar&gt;     \t</div><div class=\"line\">        &#123; //遍历头部菜单menus</div><div class=\"line\">          this.props.menus.map(function(menu, i) &#123;</div><div class=\"line\">            //判断，若title等于active，则加载选中样式</div><div class=\"line\">            return (&lt;li key=&#123;i&#125; className=&#123; menu.title == active ? \"active\" : \"\"&#125;&gt;&lt;a href=&#123;menu.href&#125;&gt;&#123; menu.text &#125;&lt;span className=\"sr-only\"&gt;(current)&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;);</div><div class=\"line\">          &#125;)</div><div class=\"line\">        &#125;</div><div class=\"line\">        &lt;/Nav&gt;</div><div class=\"line\">        &lt;Nav navbar pullRight&gt;</div><div class=\"line\">          &lt;li&gt;&lt;a&gt;&#123; this.state.clock &#125;&lt;/a&gt;&lt;/li&gt;</div><div class=\"line\">          &lt;NavDropdown title=\"菜单\" id=\"top-aside-menu\"&gt;</div><div class=\"line\">            &#123; //遍历右侧下拉菜单usermenus</div><div class=\"line\">              this.props.usermenus.map(function(usermenu,i) &#123;</div><div class=\"line\">                return (&lt;MenuItem key=&#123;i&#125;&gt;&#123; usermenu.text &#125;&lt;/MenuItem&gt;);</div><div class=\"line\">              &#125;)</div><div class=\"line\">            &#125;</div><div class=\"line\">          &lt;/NavDropdown&gt;</div><div class=\"line\">        &lt;/Nav&gt;</div><div class=\"line\">      &lt;/Navbar.Collapse&gt;</div><div class=\"line\">    &lt;/Navbar&gt;</div><div class=\"line\">  )</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"结束语\"><a href=\"#结束语\" class=\"headerlink\" title=\"结束语\"></a>结束语</h2><hr>\n<p>不得不说框架之间的切换还是有很多问题呢，这时候需要的就是坚持不懈地学习和排除bug啦。<br>当然本骚年本来还想用ES6装装逼的，奈何不熟练的使用后果就是很多报错，看来也还是要加强ES6语法呀。<br><a href=\"https://github.com/godbasin/godbasin.github.io/tree/blog-codes/react-notes/4-create-header\" target=\"_blank\" rel=\"external\">此处查看项目代码（仅包含app部分）</a><br><a href=\"http://o9j9owc7b.bkt.clouddn.com/4-create-header/index.html?#/index\" target=\"_blank\" rel=\"external\">此处查看页面效果</a></p>\n","excerpt":"<p>最近在学习使用React作为前端的框架，《React使用笔记》系列用于记录过程中的一些使用和解决方法。<br>本文记录创建头部组件的过程。<br>","more":"</p>\n<h2 id=\"react-bootstrap\"><a href=\"#react-bootstrap\" class=\"headerlink\" title=\"react-bootstrap\"></a>react-bootstrap</h2><hr>\n<p>想要在react中使用bootstrap吗？<br>如果只是需要使用样式相关的，可以在tempaltes的index.ejs中引用css文件就可以。<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">link</span> <span class=\"attr\">rel</span>=<span class=\"string\">\"stylesheet\"</span> <span class=\"attr\">href</span>=<span class=\"string\">\"https://maxcdn.bootstrapcdn.com/bootstrap/latest/css/bootstrap.min.css\"</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<p>如果你还想要使用bootstrap的组件，那么就可以使用<a href=\"http://react-bootstrap.github.io/introduction.html\">react-bootstrap库</a>啦。</p>\n<h3 id=\"安装react-bootstrap\"><a href=\"#安装react-bootstrap\" class=\"headerlink\" title=\"安装react-bootstrap\"></a>安装react-bootstrap</h3><ul>\n<li>使用npm安装</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ npm install react-bootstrap --save</div></pre></td></tr></table></figure>\n<ul>\n<li>引用css文件</li>\n</ul>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">link</span> <span class=\"attr\">rel</span>=<span class=\"string\">\"stylesheet\"</span> <span class=\"attr\">href</span>=<span class=\"string\">\"https://maxcdn.bootstrapcdn.com/bootstrap/latest/css/bootstrap.min.css\"</span>&gt;</span></div></pre></td></tr></table></figure>\n<h3 id=\"导入相关组件\"><a href=\"#导入相关组件\" class=\"headerlink\" title=\"导入相关组件\"></a>导入相关组件</h3><p>react-bootstrap的组件都需要一一导入。<br><figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> Button <span class=\"keyword\">from</span> <span class=\"string\">'react-bootstrap/lib/Button'</span>;</div><div class=\"line\"><span class=\"comment\">//或者</span></div><div class=\"line\"><span class=\"keyword\">import</span> &#123; Button &#125; <span class=\"keyword\">from</span> <span class=\"string\">'react-bootstrap'</span>;</div></pre></td></tr></table></figure></p>\n<h3 id=\"使用\"><a href=\"#使用\" class=\"headerlink\" title=\"使用\"></a>使用</h3><p>使用方法如下，其中组件会有大写的标签，以及一定的属性。<br><figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;Button bsStyle=<span class=\"string\">\"success\"</span> bsSize=<span class=\"string\">\"small\"</span> onClick=&#123;someCallback&#125;&gt;</div><div class=\"line\">  Something</div><div class=\"line\">&lt;<span class=\"regexp\">/Button&gt;</span></div></pre></td></tr></table></figure></p>\n<p>具体每个组件的使用方法可到<a href=\"http://react-bootstrap.github.io/components.html\">组件库</a>中查看。</p>\n<h2 id=\"创建头部菜单\"><a href=\"#创建头部菜单\" class=\"headerlink\" title=\"创建头部菜单\"></a>创建头部菜单</h2><hr>\n<p>该头部菜单与前一个AngularJS使用笔记中完全一致。如图：<br><img src=\"http://o905ne85q.bkt.clouddn.com/C902.tmp.png\" alt=\"image\"></p>\n<h3 id=\"添加头部组件\"><a href=\"#添加头部组件\" class=\"headerlink\" title=\"添加头部组件\"></a>添加头部组件</h3><ul>\n<li>在components文件夹中添加header.jsx文件</li>\n<li>定义并输出Header组件</li>\n</ul>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> React <span class=\"keyword\">from</span> <span class=\"string\">'react'</span>; <span class=\"comment\">//导入react组件</span></div><div class=\"line\"><span class=\"comment\">//定义Header组件</span></div><div class=\"line\"><span class=\"keyword\">const</span> Header = React.createClass(&#123;</div><div class=\"line\">  render() &#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">header</span>&gt;</span>暂时头部<span class=\"tag\">&lt;/<span class=\"name\">header</span>&gt;</span></span>;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;);</div><div class=\"line\"><span class=\"built_in\">module</span>.exports = Header; <span class=\"comment\">//输出Header组件</span></div></pre></td></tr></table></figure>\n<ul>\n<li>在components中的index.jsx中使用该组件</li>\n</ul>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> Header <span class=\"keyword\">from</span>  <span class=\"string\">'./header.jsx'</span>; <span class=\"comment\">//Header自定义组件</span></div><div class=\"line\"><span class=\"keyword\">const</span> Index = React.createClass(&#123;</div><div class=\"line\">  render() &#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">Header</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">Header</span>&gt;</span></span>;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<p>此时我们可以在/index路由页面看到头部了。<br>接下来会运用到react有关的Props/State和生命周期，大家如果不是很清楚可以翻上一篇<a href=\"https://godbasin.github.io/2016/08/13/react-notes-3-props-state-lifecycle/\">《React使用笔记3–组件的State/Props与生命周期》</a>进行预热。</p>\n<h3 id=\"添加属性Props\"><a href=\"#添加属性Props\" class=\"headerlink\" title=\"添加属性Props\"></a>添加属性Props</h3><p>由于菜单的内容不变，我们可以将其写成Props属性。<br><figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div></pre></td><td class=\"code\"><pre><div class=\"line\">propTypes: &#123; <span class=\"comment\">//属性校验器</span></div><div class=\"line\">    menus: React.PropTypes.array, <span class=\"comment\">//表示menus属性必须是array，否则报错</span></div><div class=\"line\">    usermenus: React.PropTypes.array, <span class=\"comment\">//表示usermenus属性必须是array，否则报错</span></div><div class=\"line\">&#125;,</div><div class=\"line\"><span class=\"attr\">getDefaultProps</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> &#123; <span class=\"comment\">//设置默认属性</span></div><div class=\"line\">    menus: [&#123;</div><div class=\"line\">      <span class=\"attr\">title</span>: <span class=\"string\">'index'</span>, <span class=\"comment\">//title用于储存路由对应的路径</span></div><div class=\"line\">      href: <span class=\"string\">'/index'</span>, <span class=\"comment\">//href用于设定该菜单跳转路由</span></div><div class=\"line\">      text: <span class=\"string\">'首页'</span>, <span class=\"comment\">//text用于储存该菜单显示名称</span></div><div class=\"line\">    &#125;, &#123;</div><div class=\"line\">      <span class=\"attr\">title</span>: <span class=\"string\">'others'</span>,</div><div class=\"line\">      <span class=\"attr\">href</span>: <span class=\"string\">'/other'</span>,</div><div class=\"line\">      <span class=\"attr\">text</span>: <span class=\"string\">'其他'</span>,</div><div class=\"line\">    &#125;],</div><div class=\"line\">    <span class=\"comment\">//usermenus用于储存侧边下拉菜单</span></div><div class=\"line\">    usermenus: [&#123;</div><div class=\"line\">      <span class=\"attr\">click</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;&#125;, <span class=\"comment\">//click用于设置该菜单点击事件</span></div><div class=\"line\">      text: <span class=\"string\">'退出'</span>, <span class=\"comment\">//text用于储存该菜单显示名称</span></div><div class=\"line\">    &#125;],</div><div class=\"line\">  &#125;;</div><div class=\"line\">&#125;,</div></pre></td></tr></table></figure></p>\n<h3 id=\"添加state状态\"><a href=\"#添加state状态\" class=\"headerlink\" title=\"添加state状态\"></a>添加state状态</h3><p>像时间这种每500毫秒刷新一次的，我们将其放在state中。<br><figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\">getInitialState: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> &#123;<span class=\"attr\">clock</span>: <span class=\"string\">''</span>&#125;; <span class=\"comment\">//设置初始state值</span></div><div class=\"line\">&#125;,</div><div class=\"line\"><span class=\"comment\">//定义clockRender事件，用于改变this.state.clock值</span></div><div class=\"line\">clockRender: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">  <span class=\"keyword\">let</span> numberStandard = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">num</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">let</span> _val = <span class=\"built_in\">Number</span>(num), _num;</div><div class=\"line\">    _num = (_val &lt; <span class=\"number\">10</span>) ? (<span class=\"string\">'0'</span> + _val) : (<span class=\"string\">''</span> + _val);</div><div class=\"line\">    <span class=\"keyword\">return</span> _num;</div><div class=\"line\">  &#125;, _date = <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>(),</div><div class=\"line\">    clock = _date.getFullYear() + <span class=\"string\">'年'</span> + (_date.getMonth() + <span class=\"number\">1</span>) + <span class=\"string\">'月'</span> +</div><div class=\"line\">      _date.getDate() + <span class=\"string\">'日'</span> + <span class=\"string\">' '</span> + numberStandard(_date.getHours()) + <span class=\"string\">':'</span> + numberStandard(_date.getMinutes()) +</div><div class=\"line\">      <span class=\"string\">':'</span> + numberStandard(_date.getSeconds());</div><div class=\"line\">  <span class=\"keyword\">this</span>.setState(&#123;<span class=\"attr\">clock</span>: clock&#125;);</div><div class=\"line\">&#125;,</div></pre></td></tr></table></figure></p>\n<p>注意：state不应存储计算后的值，计算应该在render中进行，但由于比较长，本骚年也就这样将就用了。小伙伴们有更好的方法也可以提出来哦。</p>\n<h3 id=\"setInterval时钟\"><a href=\"#setInterval时钟\" class=\"headerlink\" title=\"setInterval时钟\"></a>setInterval时钟</h3><p>在componentDidMount中进行setInterval时钟。componentDidMount属于react生命周期，在初始化渲染执行之后立刻调用一次，仅客户端有效。<br>render就是一个模板的作用，他只处理和展示相关的逻辑，如果有业务逻辑，应放在componentWillMount和componentDidMount中执行。<br><figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//进行setInterval时钟</span></div><div class=\"line\">componentDidMount: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">  <span class=\"keyword\">let</span> that = <span class=\"keyword\">this</span>;\t\t\t</div><div class=\"line\">  <span class=\"keyword\">this</span>.interval = setInterval(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    that.clockRender();</div><div class=\"line\">  &#125;, <span class=\"number\">500</span>);</div><div class=\"line\">&#125;,</div><div class=\"line\"><span class=\"comment\">//组件注销时需销毁定时器</span></div><div class=\"line\">componentWillUnmount: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">  clearInterval(<span class=\"keyword\">this</span>.interval);</div><div class=\"line\">&#125;,</div></pre></td></tr></table></figure></p>\n<h3 id=\"设置render模板\"><a href=\"#设置render模板\" class=\"headerlink\" title=\"设置render模板\"></a>设置render模板</h3><p>在这里大家可以看到react-bootstrap的使用方法啦。当然每个组件都是已经在该文件中引入了的。<br>还有jsx的遍历方法也会在这里展示。</p>\n<ul>\n<li>在index.jsx页面引入Header时添加属性active=”index”，作为菜单选中样式的判断</li>\n</ul>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div></pre></td><td class=\"code\"><pre><div class=\"line\">render() &#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> (</div><div class=\"line\">    <span class=\"keyword\">let</span> active = <span class=\"keyword\">this</span>.props.active; <span class=\"comment\">//获取父组件传递的props</span></div><div class=\"line\">    &lt;Navbar className=<span class=\"string\">\"header\"</span> fluid&gt;</div><div class=\"line\">      &lt;Navbar.Header className=\"navbar-header\"&gt;</div><div class=\"line\">        &lt;Navbar.Brand&gt;Godbasin&lt;/Navbar.Brand&gt;</div><div class=\"line\">      &lt;/Navbar.Header&gt;</div><div class=\"line\">      &lt;Navbar.Collapse id=\"bs-example-navbar-collapse-1\"&gt;</div><div class=\"line\">        &lt;Nav navbar&gt;     \t</div><div class=\"line\">        &#123; //遍历头部菜单menus</div><div class=\"line\">          this.props.menus.map(function(menu, i) &#123;</div><div class=\"line\">            //判断，若title等于active，则加载选中样式</div><div class=\"line\">            return (&lt;li key=&#123;i&#125; className=&#123; menu.title == active ? \"active\" : \"\"&#125;&gt;&lt;a href=&#123;menu.href&#125;&gt;&#123; menu.text &#125;&lt;span className=\"sr-only\"&gt;(current)&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;);</div><div class=\"line\">          &#125;)</div><div class=\"line\">        &#125;</div><div class=\"line\">        &lt;/Nav&gt;</div><div class=\"line\">        &lt;Nav navbar pullRight&gt;</div><div class=\"line\">          &lt;li&gt;&lt;a&gt;&#123; this.state.clock &#125;&lt;/a&gt;&lt;/li&gt;</div><div class=\"line\">          &lt;NavDropdown title=\"菜单\" id=\"top-aside-menu\"&gt;</div><div class=\"line\">            &#123; //遍历右侧下拉菜单usermenus</div><div class=\"line\">              this.props.usermenus.map(function(usermenu,i) &#123;</div><div class=\"line\">                return (&lt;MenuItem key=&#123;i&#125;&gt;&#123; usermenu.text &#125;&lt;/MenuItem&gt;);</div><div class=\"line\">              &#125;)</div><div class=\"line\">            &#125;</div><div class=\"line\">          &lt;/NavDropdown&gt;</div><div class=\"line\">        &lt;/Nav&gt;</div><div class=\"line\">      &lt;/Navbar.Collapse&gt;</div><div class=\"line\">    &lt;/Navbar&gt;</div><div class=\"line\">  )</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"结束语\"><a href=\"#结束语\" class=\"headerlink\" title=\"结束语\"></a>结束语</h2><hr>\n<p>不得不说框架之间的切换还是有很多问题呢，这时候需要的就是坚持不懈地学习和排除bug啦。<br>当然本骚年本来还想用ES6装装逼的，奈何不熟练的使用后果就是很多报错，看来也还是要加强ES6语法呀。<br><a href=\"https://github.com/godbasin/godbasin.github.io/tree/blog-codes/react-notes/4-create-header\">此处查看项目代码（仅包含app部分）</a><br><a href=\"http://o9j9owc7b.bkt.clouddn.com/4-create-header/index.html?#/index\">此处查看页面效果</a></p>"},{"title":"React使用笔记6--使用flux\"单向流动\"你的应用","date":"2016-08-20T18:19:51.000Z","_content":"最近在学习使用React作为前端的框架，《React使用笔记》系列用于记录过程中的一些使用和解决方法。\n本文简单介绍React Flux架构，以及记录使用flux改造当前应用的过程。\n<!--more-->\n## React Flux架构简介\n-----\n### 什么是Flux\nFlux是Facebook用来构建客户端Web应用的应用架构。它利用单向数据流的方式来组合React中的视图组件。\nFlux是一种架构思想，专门解决软件的结构问题。它跟MVC架构是同一类东西，更像一个模式而不是一个正式的框架。\n\n### Flux基本概念\n- Views： 视图层\n  - controller-view\n    - 可以理解成MVC模型中的controller，它一般由应用的顶层容器充当，负责从store中获取数据并将数据传递到子组件中。\n    - 简单的应用一般只有一个controller-view，复杂应用中也可以有多个。\n    - controller-view是应用中唯一可以操作state的地方(setState())\n  - view(UI组件)\n    - ui-component职责单一只允许调用action触发事件，数据从由上层容器通过属性传递过来。\n\n- Action（动作）：视图层发出的消息，可通过调用它来响应用户交互\n  - 是dispatcher提供了一个可以允许我们向store中触发分发的方法\n  - 包含了一个数据的payload。action生成被包含进一个语义化的辅助方法中，来发送action到dispatcher\n\n- Dispatcher（派发器）：用来接收Actions、执行回调函数\n  - dispatcher就像是一个中央的集线器，管理着所有的数据流\n  - 本质上是store callback的注册表，本身并没有实际的高度功能\n  - 每个Store注册它自己并提供一个回调函数\n\n- Store（数据层）：负责封装应用的业务逻辑跟数据的交互\n  - 用来存放应用的状态，一旦发生变动，就提醒Views要更新页面\n  - Store中包含应用所有的数据，是应用中唯一的数据发生变更的地方\n  - Store中没有赋值接口---所有数据变更都是由dispatcher发送到store，新的数据随着Store触发的change事件传回view\n\n### Flux数据流\n![image](http://o905ne85q.bkt.clouddn.com/bg2016011503.png)\n- store在dispatcher中注册，并提供相应的回调。回调会接收action并把它当成自己的一个参数。\n- 通过调用action来响应用户交互。\n- 当action被触发，回调函数会使用switch语句来解析action中的type参数，并在合适的type下提供钩子来执行内部方法。\n- action通过dispatcher来响应store中的state更新。\n- store更新完成之后，会向应用中广播一个change事件，views可以选择响应事件来重新获取新的数据并更新。\n\n### 参考\n[《Flux 架构入门教程》](http://www.ruanyifeng.com/blog/2016/01/flux.html)\n[《谈一谈我对 React Flux 架构的理解》](http://www.cocoachina.com/webapp/20150928/13600.html)\n\n## 使用Flux\n-----\n这里使用改造头部组件作为例子，简述使用flux过程。\n\n### 目录组织\n使用flux之后，目录组织如下：\n![image](http://o905ne85q.bkt.clouddn.com/FCB5.tmp.png)\n这里再简单描述一下新增和改变的文件：\n- actions: 存放Flux的Action文件\n- components: 存放Flux的Views文件（包括Controller-Views）\n- dispatcher: 存放Flux的Dispatcher文件\n- stores: 存放Flux的Store文件\n\n### 添加HeaderStore\n在stores文件夹添加HeaderStore.js文件，封装头部相关的业务逻辑和数据交互。\n``` javascript\nvar EventEmitter = require('events').EventEmitter;\nvar assign = require('object-assign');\n//封装头部相关的业务逻辑和数据交互\nvar HeaderStore = assign({}, EventEmitter.prototype, {\n\tmenus: [{\n\t\ttitle: 'index', //title用于储存路由对应的路径\n\t\thref: '?#/index', //href用于设定该菜单跳转路由\n\t\ttext: '首页', //text用于储存该菜单显示名称\n\t}, {\n\t\ttitle: 'others',\n\t\thref: '?#/other',\n\t\ttext: '其他',\n\t}],\n\tusermenus: [{\n\t\tclick: function() {}, //click用于设置该菜单点击事件\n\t\ttext: '退出', //text用于储存该菜单显示名称\n\t}],\n\tclock: '', //clock用于保存时钟\n\tgetMenus: function() {return this.menus;}, //获取menus\n\tgetUsermenus: function() {return this.usermenus;}, //获取usermenus\n\tgetClock: function() {return this.clock;}, //获取clock\n\tclockRender: function(callback) { //刷新时钟\n\t\tlet numberStandard = function(num) {\n\t\t\t\tlet _val = Number(num),\n\t\t\t\t\t_num;\n\t\t\t\t_num = (_val < 10) ? ('0' + _val) : ('' + _val);\n\t\t\t\treturn _num;\n\t\t\t},\n\t\t\t_date = new Date();\n\t\tthis.clock = _date.getFullYear() + '年' + (_date.getMonth() + 1) + '月' +\n\t\t\t_date.getDate() + '日' + ' ' + numberStandard(_date.getHours()) + ':' + numberStandard(_date.getMinutes()) +\n\t\t\t':' + numberStandard(_date.getSeconds());\n\t\tcallback(); //可使用回调触发刷新\n\t},\n});\nmodule.exports = HeaderStore;\n```\n\n### 通过Controller-View传递数据\n在components文件夹添加HeaderController.jsx和Header.jsx文件。\n- HeaderController.jsx\nHeaderController负责从Headerstore中获取数据并将数据传递到Header中，以及定义相关交互逻辑。\n\n``` javascript\nimport React from 'react'; //导入react组件\nimport HeaderStore from '../stores/HeaderStore.js';  //获取HeaderStore\nimport HeaderActions from '../actions/HeaderActions.js'; //获取HeaderActions\nimport Header from './Header.jsx'; //获取子组件Header\n\nconst HeaderController = React.createClass({\n\tgetDefaultProps : function () { //设置props数据\n\t  return {\n\t\t\tmenus: HeaderStore.getMenus(), //从HeaderStore获取menus数据\n\t\t\tusermenus:  HeaderStore.getUsermenus(), //从HeaderStore获取usermenus数据\n\t\t};\n\t},\n\tgetInitialState: function() { //设置state数据\n\t\treturn {clock: HeaderStore.getClock()}; //从HeaderStore获取clock数据\n\t},\n\tsetClock: function(time) { //从HeaderStore获取clock并更新状态\n\t\tthis.setState({clock: HeaderStore.getClock()});\n\t},\n\tcomponentDidMount: function(){\n\t\tvar that = this;\n\t\tthis.interval = setInterval(function() { //设置定时器500ms刷新一次clock\n\t\t\tHeaderActions.clockRender(that.setClock); //传入回调触发刷新\n\t\t}, 500);\n\t},\n\tcomponentWillUnmount: function(){\n\t\tclearInterval(this.interval); //移除定时器\n\t},\n\trender() {\n\t\t//将数据以props传入子组件\n\t\treturn <Header clock={this.state.clock} menus={this.props.menus} usermenus={this.props.usermenus} active={this.props.active}  />;\n\t}\n});\n\nmodule.exports = HeaderController;\n```\n当然，如果需要更新页面的事件变多了，也可以使用event事件来进行广播哦。\n- Header.jsx\nHeader只负责简单的页面显示即可。\n\n``` javascript\nimport React from 'react'; //导入react组件\nimport { NavDropdown, MenuItem, Navbar, Nav } from 'react-bootstrap';\n\nconst Header = React.createClass({\n\trender() {\n\t\tlet active = this.props.active;\n\t\treturn (\n\t\t\t<Navbar className=\"header\" fluid>\n\t\t\t\t<Navbar.Header className=\"navbar-header\">\n\t\t\t\t\t<Navbar.Brand>Godbasin</Navbar.Brand>\n\t\t\t\t</Navbar.Header>\n\t\t\t\t<Navbar.Collapse id=\"bs-example-navbar-collapse-1\">\n\t\t\t\t\t<Nav navbar>     \t\n\t\t\t\t\t{\t\t\t\t\t\t\t\n\t\t\t\t\t\tthis.props.menus.map(function(menu, i) {\n\t\t\t\t\t\t\treturn (<li key={i} className={ menu.title == active ? \"active\" : \"\"}><a href={menu.href}>{ menu.text }<span className=\"sr-only\">(current)</span></a></li>);\n\t\t\t\t\t\t})\n\t\t\t\t\t}\n\t\t\t\t\t</Nav>\n\t\t\t\t\t<Nav navbar pullRight>\n\t\t\t\t\t\t<li><a>{ this.props.clock }</a></li>\n\t\t\t\t\t\t<NavDropdown title=\"菜单\" id=\"top-aside-menu\">\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tthis.props.usermenus.map(function(usermenu,i) {\n\t\t\t\t\t\t\t\t\treturn (<MenuItem key={i}>{ usermenu.text }</MenuItem>);\n\t\t\t\t\t\t\t\t})\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t</NavDropdown>\n\t\t\t\t\t</Nav>\n\t\t\t\t</Navbar.Collapse>\n\t\t\t</Navbar>\n\t\t)\n\t}\n});\n\nmodule.exports = Header;\n```\n\n### 添加Actions\n在actions文件夹添加HeaderActions.js文件，负责发送Action到Dispatcher。\n``` javascript\nimport AppDispatcher from '../dispatcher/AppDispatcher.js';\n\nvar HeaderActions = {\n  clockRender: function (callback) { //定义clockRender事件\n    AppDispatcher.dispatch({\n      actionType: 'CLOCK_RENDER', //发送Action的类型\n      callback: callback //携带回调事件参数\n    });\n  },\n};\n\nmodule.exports = HeaderActions;\n```\n\n### 注册Store到Dispatcher\n在dispacther文件夹添加AppDispatcher.js文件，用来注册所有的Store。\n``` javascript\nimport { Dispatcher } from 'flux'; //导入react组件\nimport HeaderStore from '../stores/HeaderStore.js'; //导入HeaderStore\n\nvar AppDispatcher = new Dispatcher();\nAppDispatcher.register(function(action) {\n\tswitch (action.actionType) {\n\t\tcase 'CLOCK_RENDER':\n\t\t\tHeaderStore.clockRender(action.callback); //执行clockRender事件\n\t\t\tbreak;\n\t\tdefault:\n\t}\n});\n\nmodule.exports = AppDispatcher;\n```\n\n## 结束语\n-----\n虽然说使用Flux会使得代码量增加了不少，但这样的架构模式也不失为一种管理应用逻辑的方法呢，使用之后应用结构也清晰很多了。\n[此处查看项目代码（仅包含app部分）](https://github.com/godbasin/godbasin.github.io/tree/blog-codes/react-notes/6-use-flux)\n[此处查看页面效果](http://o9j9owc7b.bkt.clouddn.com/6-use-flux/index.html)","source":"_posts/react-notes-6-use-flux.md","raw":"---\ntitle: React使用笔记6--使用flux\"单向流动\"你的应用\ndate: 2016-08-21 02:19:51\ncategories: react沙拉\ntags: 笔记\n---\n最近在学习使用React作为前端的框架，《React使用笔记》系列用于记录过程中的一些使用和解决方法。\n本文简单介绍React Flux架构，以及记录使用flux改造当前应用的过程。\n<!--more-->\n## React Flux架构简介\n-----\n### 什么是Flux\nFlux是Facebook用来构建客户端Web应用的应用架构。它利用单向数据流的方式来组合React中的视图组件。\nFlux是一种架构思想，专门解决软件的结构问题。它跟MVC架构是同一类东西，更像一个模式而不是一个正式的框架。\n\n### Flux基本概念\n- Views： 视图层\n  - controller-view\n    - 可以理解成MVC模型中的controller，它一般由应用的顶层容器充当，负责从store中获取数据并将数据传递到子组件中。\n    - 简单的应用一般只有一个controller-view，复杂应用中也可以有多个。\n    - controller-view是应用中唯一可以操作state的地方(setState())\n  - view(UI组件)\n    - ui-component职责单一只允许调用action触发事件，数据从由上层容器通过属性传递过来。\n\n- Action（动作）：视图层发出的消息，可通过调用它来响应用户交互\n  - 是dispatcher提供了一个可以允许我们向store中触发分发的方法\n  - 包含了一个数据的payload。action生成被包含进一个语义化的辅助方法中，来发送action到dispatcher\n\n- Dispatcher（派发器）：用来接收Actions、执行回调函数\n  - dispatcher就像是一个中央的集线器，管理着所有的数据流\n  - 本质上是store callback的注册表，本身并没有实际的高度功能\n  - 每个Store注册它自己并提供一个回调函数\n\n- Store（数据层）：负责封装应用的业务逻辑跟数据的交互\n  - 用来存放应用的状态，一旦发生变动，就提醒Views要更新页面\n  - Store中包含应用所有的数据，是应用中唯一的数据发生变更的地方\n  - Store中没有赋值接口---所有数据变更都是由dispatcher发送到store，新的数据随着Store触发的change事件传回view\n\n### Flux数据流\n![image](http://o905ne85q.bkt.clouddn.com/bg2016011503.png)\n- store在dispatcher中注册，并提供相应的回调。回调会接收action并把它当成自己的一个参数。\n- 通过调用action来响应用户交互。\n- 当action被触发，回调函数会使用switch语句来解析action中的type参数，并在合适的type下提供钩子来执行内部方法。\n- action通过dispatcher来响应store中的state更新。\n- store更新完成之后，会向应用中广播一个change事件，views可以选择响应事件来重新获取新的数据并更新。\n\n### 参考\n[《Flux 架构入门教程》](http://www.ruanyifeng.com/blog/2016/01/flux.html)\n[《谈一谈我对 React Flux 架构的理解》](http://www.cocoachina.com/webapp/20150928/13600.html)\n\n## 使用Flux\n-----\n这里使用改造头部组件作为例子，简述使用flux过程。\n\n### 目录组织\n使用flux之后，目录组织如下：\n![image](http://o905ne85q.bkt.clouddn.com/FCB5.tmp.png)\n这里再简单描述一下新增和改变的文件：\n- actions: 存放Flux的Action文件\n- components: 存放Flux的Views文件（包括Controller-Views）\n- dispatcher: 存放Flux的Dispatcher文件\n- stores: 存放Flux的Store文件\n\n### 添加HeaderStore\n在stores文件夹添加HeaderStore.js文件，封装头部相关的业务逻辑和数据交互。\n``` javascript\nvar EventEmitter = require('events').EventEmitter;\nvar assign = require('object-assign');\n//封装头部相关的业务逻辑和数据交互\nvar HeaderStore = assign({}, EventEmitter.prototype, {\n\tmenus: [{\n\t\ttitle: 'index', //title用于储存路由对应的路径\n\t\thref: '?#/index', //href用于设定该菜单跳转路由\n\t\ttext: '首页', //text用于储存该菜单显示名称\n\t}, {\n\t\ttitle: 'others',\n\t\thref: '?#/other',\n\t\ttext: '其他',\n\t}],\n\tusermenus: [{\n\t\tclick: function() {}, //click用于设置该菜单点击事件\n\t\ttext: '退出', //text用于储存该菜单显示名称\n\t}],\n\tclock: '', //clock用于保存时钟\n\tgetMenus: function() {return this.menus;}, //获取menus\n\tgetUsermenus: function() {return this.usermenus;}, //获取usermenus\n\tgetClock: function() {return this.clock;}, //获取clock\n\tclockRender: function(callback) { //刷新时钟\n\t\tlet numberStandard = function(num) {\n\t\t\t\tlet _val = Number(num),\n\t\t\t\t\t_num;\n\t\t\t\t_num = (_val < 10) ? ('0' + _val) : ('' + _val);\n\t\t\t\treturn _num;\n\t\t\t},\n\t\t\t_date = new Date();\n\t\tthis.clock = _date.getFullYear() + '年' + (_date.getMonth() + 1) + '月' +\n\t\t\t_date.getDate() + '日' + ' ' + numberStandard(_date.getHours()) + ':' + numberStandard(_date.getMinutes()) +\n\t\t\t':' + numberStandard(_date.getSeconds());\n\t\tcallback(); //可使用回调触发刷新\n\t},\n});\nmodule.exports = HeaderStore;\n```\n\n### 通过Controller-View传递数据\n在components文件夹添加HeaderController.jsx和Header.jsx文件。\n- HeaderController.jsx\nHeaderController负责从Headerstore中获取数据并将数据传递到Header中，以及定义相关交互逻辑。\n\n``` javascript\nimport React from 'react'; //导入react组件\nimport HeaderStore from '../stores/HeaderStore.js';  //获取HeaderStore\nimport HeaderActions from '../actions/HeaderActions.js'; //获取HeaderActions\nimport Header from './Header.jsx'; //获取子组件Header\n\nconst HeaderController = React.createClass({\n\tgetDefaultProps : function () { //设置props数据\n\t  return {\n\t\t\tmenus: HeaderStore.getMenus(), //从HeaderStore获取menus数据\n\t\t\tusermenus:  HeaderStore.getUsermenus(), //从HeaderStore获取usermenus数据\n\t\t};\n\t},\n\tgetInitialState: function() { //设置state数据\n\t\treturn {clock: HeaderStore.getClock()}; //从HeaderStore获取clock数据\n\t},\n\tsetClock: function(time) { //从HeaderStore获取clock并更新状态\n\t\tthis.setState({clock: HeaderStore.getClock()});\n\t},\n\tcomponentDidMount: function(){\n\t\tvar that = this;\n\t\tthis.interval = setInterval(function() { //设置定时器500ms刷新一次clock\n\t\t\tHeaderActions.clockRender(that.setClock); //传入回调触发刷新\n\t\t}, 500);\n\t},\n\tcomponentWillUnmount: function(){\n\t\tclearInterval(this.interval); //移除定时器\n\t},\n\trender() {\n\t\t//将数据以props传入子组件\n\t\treturn <Header clock={this.state.clock} menus={this.props.menus} usermenus={this.props.usermenus} active={this.props.active}  />;\n\t}\n});\n\nmodule.exports = HeaderController;\n```\n当然，如果需要更新页面的事件变多了，也可以使用event事件来进行广播哦。\n- Header.jsx\nHeader只负责简单的页面显示即可。\n\n``` javascript\nimport React from 'react'; //导入react组件\nimport { NavDropdown, MenuItem, Navbar, Nav } from 'react-bootstrap';\n\nconst Header = React.createClass({\n\trender() {\n\t\tlet active = this.props.active;\n\t\treturn (\n\t\t\t<Navbar className=\"header\" fluid>\n\t\t\t\t<Navbar.Header className=\"navbar-header\">\n\t\t\t\t\t<Navbar.Brand>Godbasin</Navbar.Brand>\n\t\t\t\t</Navbar.Header>\n\t\t\t\t<Navbar.Collapse id=\"bs-example-navbar-collapse-1\">\n\t\t\t\t\t<Nav navbar>     \t\n\t\t\t\t\t{\t\t\t\t\t\t\t\n\t\t\t\t\t\tthis.props.menus.map(function(menu, i) {\n\t\t\t\t\t\t\treturn (<li key={i} className={ menu.title == active ? \"active\" : \"\"}><a href={menu.href}>{ menu.text }<span className=\"sr-only\">(current)</span></a></li>);\n\t\t\t\t\t\t})\n\t\t\t\t\t}\n\t\t\t\t\t</Nav>\n\t\t\t\t\t<Nav navbar pullRight>\n\t\t\t\t\t\t<li><a>{ this.props.clock }</a></li>\n\t\t\t\t\t\t<NavDropdown title=\"菜单\" id=\"top-aside-menu\">\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tthis.props.usermenus.map(function(usermenu,i) {\n\t\t\t\t\t\t\t\t\treturn (<MenuItem key={i}>{ usermenu.text }</MenuItem>);\n\t\t\t\t\t\t\t\t})\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t</NavDropdown>\n\t\t\t\t\t</Nav>\n\t\t\t\t</Navbar.Collapse>\n\t\t\t</Navbar>\n\t\t)\n\t}\n});\n\nmodule.exports = Header;\n```\n\n### 添加Actions\n在actions文件夹添加HeaderActions.js文件，负责发送Action到Dispatcher。\n``` javascript\nimport AppDispatcher from '../dispatcher/AppDispatcher.js';\n\nvar HeaderActions = {\n  clockRender: function (callback) { //定义clockRender事件\n    AppDispatcher.dispatch({\n      actionType: 'CLOCK_RENDER', //发送Action的类型\n      callback: callback //携带回调事件参数\n    });\n  },\n};\n\nmodule.exports = HeaderActions;\n```\n\n### 注册Store到Dispatcher\n在dispacther文件夹添加AppDispatcher.js文件，用来注册所有的Store。\n``` javascript\nimport { Dispatcher } from 'flux'; //导入react组件\nimport HeaderStore from '../stores/HeaderStore.js'; //导入HeaderStore\n\nvar AppDispatcher = new Dispatcher();\nAppDispatcher.register(function(action) {\n\tswitch (action.actionType) {\n\t\tcase 'CLOCK_RENDER':\n\t\t\tHeaderStore.clockRender(action.callback); //执行clockRender事件\n\t\t\tbreak;\n\t\tdefault:\n\t}\n});\n\nmodule.exports = AppDispatcher;\n```\n\n## 结束语\n-----\n虽然说使用Flux会使得代码量增加了不少，但这样的架构模式也不失为一种管理应用逻辑的方法呢，使用之后应用结构也清晰很多了。\n[此处查看项目代码（仅包含app部分）](https://github.com/godbasin/godbasin.github.io/tree/blog-codes/react-notes/6-use-flux)\n[此处查看页面效果](http://o9j9owc7b.bkt.clouddn.com/6-use-flux/index.html)","slug":"react-notes-6-use-flux","published":1,"updated":"2016-08-20T18:23:36.901Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cix45huhh003xxotuiqn0mlzc","content":"<p>最近在学习使用React作为前端的框架，《React使用笔记》系列用于记录过程中的一些使用和解决方法。<br>本文简单介绍React Flux架构，以及记录使用flux改造当前应用的过程。<br><a id=\"more\"></a></p>\n<h2 id=\"React-Flux架构简介\"><a href=\"#React-Flux架构简介\" class=\"headerlink\" title=\"React Flux架构简介\"></a>React Flux架构简介</h2><hr>\n<h3 id=\"什么是Flux\"><a href=\"#什么是Flux\" class=\"headerlink\" title=\"什么是Flux\"></a>什么是Flux</h3><p>Flux是Facebook用来构建客户端Web应用的应用架构。它利用单向数据流的方式来组合React中的视图组件。<br>Flux是一种架构思想，专门解决软件的结构问题。它跟MVC架构是同一类东西，更像一个模式而不是一个正式的框架。</p>\n<h3 id=\"Flux基本概念\"><a href=\"#Flux基本概念\" class=\"headerlink\" title=\"Flux基本概念\"></a>Flux基本概念</h3><ul>\n<li><p>Views： 视图层</p>\n<ul>\n<li>controller-view<ul>\n<li>可以理解成MVC模型中的controller，它一般由应用的顶层容器充当，负责从store中获取数据并将数据传递到子组件中。</li>\n<li>简单的应用一般只有一个controller-view，复杂应用中也可以有多个。</li>\n<li>controller-view是应用中唯一可以操作state的地方(setState())</li>\n</ul>\n</li>\n<li>view(UI组件)<ul>\n<li>ui-component职责单一只允许调用action触发事件，数据从由上层容器通过属性传递过来。</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>Action（动作）：视图层发出的消息，可通过调用它来响应用户交互</p>\n<ul>\n<li>是dispatcher提供了一个可以允许我们向store中触发分发的方法</li>\n<li>包含了一个数据的payload。action生成被包含进一个语义化的辅助方法中，来发送action到dispatcher</li>\n</ul>\n</li>\n<li><p>Dispatcher（派发器）：用来接收Actions、执行回调函数</p>\n<ul>\n<li>dispatcher就像是一个中央的集线器，管理着所有的数据流</li>\n<li>本质上是store callback的注册表，本身并没有实际的高度功能</li>\n<li>每个Store注册它自己并提供一个回调函数</li>\n</ul>\n</li>\n<li><p>Store（数据层）：负责封装应用的业务逻辑跟数据的交互</p>\n<ul>\n<li>用来存放应用的状态，一旦发生变动，就提醒Views要更新页面</li>\n<li>Store中包含应用所有的数据，是应用中唯一的数据发生变更的地方</li>\n<li>Store中没有赋值接口—所有数据变更都是由dispatcher发送到store，新的数据随着Store触发的change事件传回view</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"Flux数据流\"><a href=\"#Flux数据流\" class=\"headerlink\" title=\"Flux数据流\"></a>Flux数据流</h3><p><img src=\"http://o905ne85q.bkt.clouddn.com/bg2016011503.png\" alt=\"image\"></p>\n<ul>\n<li>store在dispatcher中注册，并提供相应的回调。回调会接收action并把它当成自己的一个参数。</li>\n<li>通过调用action来响应用户交互。</li>\n<li>当action被触发，回调函数会使用switch语句来解析action中的type参数，并在合适的type下提供钩子来执行内部方法。</li>\n<li>action通过dispatcher来响应store中的state更新。</li>\n<li>store更新完成之后，会向应用中广播一个change事件，views可以选择响应事件来重新获取新的数据并更新。</li>\n</ul>\n<h3 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h3><p><a href=\"http://www.ruanyifeng.com/blog/2016/01/flux.html\" target=\"_blank\" rel=\"external\">《Flux 架构入门教程》</a><br><a href=\"http://www.cocoachina.com/webapp/20150928/13600.html\" target=\"_blank\" rel=\"external\">《谈一谈我对 React Flux 架构的理解》</a></p>\n<h2 id=\"使用Flux\"><a href=\"#使用Flux\" class=\"headerlink\" title=\"使用Flux\"></a>使用Flux</h2><hr>\n<p>这里使用改造头部组件作为例子，简述使用flux过程。</p>\n<h3 id=\"目录组织\"><a href=\"#目录组织\" class=\"headerlink\" title=\"目录组织\"></a>目录组织</h3><p>使用flux之后，目录组织如下：<br><img src=\"http://o905ne85q.bkt.clouddn.com/FCB5.tmp.png\" alt=\"image\"><br>这里再简单描述一下新增和改变的文件：</p>\n<ul>\n<li>actions: 存放Flux的Action文件</li>\n<li>components: 存放Flux的Views文件（包括Controller-Views）</li>\n<li>dispatcher: 存放Flux的Dispatcher文件</li>\n<li>stores: 存放Flux的Store文件</li>\n</ul>\n<h3 id=\"添加HeaderStore\"><a href=\"#添加HeaderStore\" class=\"headerlink\" title=\"添加HeaderStore\"></a>添加HeaderStore</h3><p>在stores文件夹添加HeaderStore.js文件，封装头部相关的业务逻辑和数据交互。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> EventEmitter = <span class=\"built_in\">require</span>(<span class=\"string\">'events'</span>).EventEmitter;</div><div class=\"line\"><span class=\"keyword\">var</span> assign = <span class=\"built_in\">require</span>(<span class=\"string\">'object-assign'</span>);</div><div class=\"line\"><span class=\"comment\">//封装头部相关的业务逻辑和数据交互</span></div><div class=\"line\"><span class=\"keyword\">var</span> HeaderStore = assign(&#123;&#125;, EventEmitter.prototype, &#123;</div><div class=\"line\">  <span class=\"attr\">menus</span>: [&#123;</div><div class=\"line\">    <span class=\"attr\">title</span>: <span class=\"string\">'index'</span>, <span class=\"comment\">//title用于储存路由对应的路径</span></div><div class=\"line\">    href: <span class=\"string\">'?#/index'</span>, <span class=\"comment\">//href用于设定该菜单跳转路由</span></div><div class=\"line\">    text: <span class=\"string\">'首页'</span>, <span class=\"comment\">//text用于储存该菜单显示名称</span></div><div class=\"line\">  &#125;, &#123;</div><div class=\"line\">    <span class=\"attr\">title</span>: <span class=\"string\">'others'</span>,</div><div class=\"line\">    <span class=\"attr\">href</span>: <span class=\"string\">'?#/other'</span>,</div><div class=\"line\">    <span class=\"attr\">text</span>: <span class=\"string\">'其他'</span>,</div><div class=\"line\">  &#125;],</div><div class=\"line\">  <span class=\"attr\">usermenus</span>: [&#123;</div><div class=\"line\">    <span class=\"attr\">click</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;&#125;, <span class=\"comment\">//click用于设置该菜单点击事件</span></div><div class=\"line\">    text: <span class=\"string\">'退出'</span>, <span class=\"comment\">//text用于储存该菜单显示名称</span></div><div class=\"line\">  &#125;],</div><div class=\"line\">  <span class=\"attr\">clock</span>: <span class=\"string\">''</span>, <span class=\"comment\">//clock用于保存时钟</span></div><div class=\"line\">  getMenus: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;<span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.menus;&#125;, <span class=\"comment\">//获取menus</span></div><div class=\"line\">  getUsermenus: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;<span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.usermenus;&#125;, <span class=\"comment\">//获取usermenus</span></div><div class=\"line\">  getClock: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;<span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.clock;&#125;, <span class=\"comment\">//获取clock</span></div><div class=\"line\">  clockRender: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">callback</span>) </span>&#123; <span class=\"comment\">//刷新时钟</span></div><div class=\"line\">    <span class=\"keyword\">let</span> numberStandard = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">num</span>) </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">let</span> _val = <span class=\"built_in\">Number</span>(num),</div><div class=\"line\">          _num;</div><div class=\"line\">        _num = (_val &lt; <span class=\"number\">10</span>) ? (<span class=\"string\">'0'</span> + _val) : (<span class=\"string\">''</span> + _val);</div><div class=\"line\">        <span class=\"keyword\">return</span> _num;</div><div class=\"line\">      &#125;,</div><div class=\"line\">      _date = <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>();</div><div class=\"line\">    <span class=\"keyword\">this</span>.clock = _date.getFullYear() + <span class=\"string\">'年'</span> + (_date.getMonth() + <span class=\"number\">1</span>) + <span class=\"string\">'月'</span> +</div><div class=\"line\">      _date.getDate() + <span class=\"string\">'日'</span> + <span class=\"string\">' '</span> + numberStandard(_date.getHours()) + <span class=\"string\">':'</span> + numberStandard(_date.getMinutes()) +</div><div class=\"line\">      <span class=\"string\">':'</span> + numberStandard(_date.getSeconds());</div><div class=\"line\">    callback(); <span class=\"comment\">//可使用回调触发刷新</span></div><div class=\"line\">  &#125;,</div><div class=\"line\">&#125;);</div><div class=\"line\"><span class=\"built_in\">module</span>.exports = HeaderStore;</div></pre></td></tr></table></figure></p>\n<h3 id=\"通过Controller-View传递数据\"><a href=\"#通过Controller-View传递数据\" class=\"headerlink\" title=\"通过Controller-View传递数据\"></a>通过Controller-View传递数据</h3><p>在components文件夹添加HeaderController.jsx和Header.jsx文件。</p>\n<ul>\n<li>HeaderController.jsx<br>HeaderController负责从Headerstore中获取数据并将数据传递到Header中，以及定义相关交互逻辑。</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> React <span class=\"keyword\">from</span> <span class=\"string\">'react'</span>; <span class=\"comment\">//导入react组件</span></div><div class=\"line\"><span class=\"keyword\">import</span> HeaderStore <span class=\"keyword\">from</span> <span class=\"string\">'../stores/HeaderStore.js'</span>;  <span class=\"comment\">//获取HeaderStore</span></div><div class=\"line\"><span class=\"keyword\">import</span> HeaderActions <span class=\"keyword\">from</span> <span class=\"string\">'../actions/HeaderActions.js'</span>; <span class=\"comment\">//获取HeaderActions</span></div><div class=\"line\"><span class=\"keyword\">import</span> Header <span class=\"keyword\">from</span> <span class=\"string\">'./Header.jsx'</span>; <span class=\"comment\">//获取子组件Header</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">const</span> HeaderController = React.createClass(&#123;</div><div class=\"line\">  <span class=\"attr\">getDefaultProps</span> : <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123; <span class=\"comment\">//设置props数据</span></div><div class=\"line\">    <span class=\"keyword\">return</span> &#123;</div><div class=\"line\">      <span class=\"attr\">menus</span>: HeaderStore.getMenus(), <span class=\"comment\">//从HeaderStore获取menus数据</span></div><div class=\"line\">      usermenus:  HeaderStore.getUsermenus(), <span class=\"comment\">//从HeaderStore获取usermenus数据</span></div><div class=\"line\">    &#125;;</div><div class=\"line\">  &#125;,</div><div class=\"line\">  <span class=\"attr\">getInitialState</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123; <span class=\"comment\">//设置state数据</span></div><div class=\"line\">    <span class=\"keyword\">return</span> &#123;<span class=\"attr\">clock</span>: HeaderStore.getClock()&#125;; <span class=\"comment\">//从HeaderStore获取clock数据</span></div><div class=\"line\">  &#125;,</div><div class=\"line\">  <span class=\"attr\">setClock</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">time</span>) </span>&#123; <span class=\"comment\">//从HeaderStore获取clock并更新状态</span></div><div class=\"line\">    <span class=\"keyword\">this</span>.setState(&#123;<span class=\"attr\">clock</span>: HeaderStore.getClock()&#125;);</div><div class=\"line\">  &#125;,</div><div class=\"line\">  <span class=\"attr\">componentDidMount</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> that = <span class=\"keyword\">this</span>;</div><div class=\"line\">    <span class=\"keyword\">this</span>.interval = setInterval(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123; <span class=\"comment\">//设置定时器500ms刷新一次clock</span></div><div class=\"line\">      HeaderActions.clockRender(that.setClock); <span class=\"comment\">//传入回调触发刷新</span></div><div class=\"line\">    &#125;, <span class=\"number\">500</span>);</div><div class=\"line\">  &#125;,</div><div class=\"line\">  <span class=\"attr\">componentWillUnmount</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    clearInterval(<span class=\"keyword\">this</span>.interval); <span class=\"comment\">//移除定时器</span></div><div class=\"line\">  &#125;,</div><div class=\"line\">  render() &#123;</div><div class=\"line\">    <span class=\"comment\">//将数据以props传入子组件</span></div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">Header</span> <span class=\"attr\">clock</span>=<span class=\"string\">&#123;this.state.clock&#125;</span> <span class=\"attr\">menus</span>=<span class=\"string\">&#123;this.props.menus&#125;</span> <span class=\"attr\">usermenus</span>=<span class=\"string\">&#123;this.props.usermenus&#125;</span> <span class=\"attr\">active</span>=<span class=\"string\">&#123;this.props.active&#125;</span>  /&gt;</span>;</span></div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\">module.exports = HeaderController;</div></pre></td></tr></table></figure>\n<p>当然，如果需要更新页面的事件变多了，也可以使用event事件来进行广播哦。</p>\n<ul>\n<li>Header.jsx<br>Header只负责简单的页面显示即可。</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> React <span class=\"keyword\">from</span> <span class=\"string\">'react'</span>; <span class=\"comment\">//导入react组件</span></div><div class=\"line\"><span class=\"keyword\">import</span> &#123; NavDropdown, MenuItem, Navbar, Nav &#125; <span class=\"keyword\">from</span> <span class=\"string\">'react-bootstrap'</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">const</span> Header = React.createClass(&#123;</div><div class=\"line\">  render() &#123;</div><div class=\"line\">    <span class=\"keyword\">let</span> active = <span class=\"keyword\">this</span>.props.active;</div><div class=\"line\">    <span class=\"keyword\">return</span> (</div><div class=\"line\">      &lt;Navbar className=\"header\" fluid&gt;</div><div class=\"line\">        &lt;Navbar.Header className=\"navbar-header\"&gt;</div><div class=\"line\">          &lt;Navbar.Brand&gt;Godbasin&lt;/Navbar.Brand&gt;</div><div class=\"line\">        &lt;/Navbar.Header&gt;</div><div class=\"line\">        &lt;Navbar.Collapse id=\"bs-example-navbar-collapse-1\"&gt;</div><div class=\"line\">          &lt;Nav navbar&gt;     \t</div><div class=\"line\">          &#123;\t\t\t\t\t\t\t</div><div class=\"line\">            this.props.menus.map(function(menu, i) &#123;</div><div class=\"line\">              return (&lt;li key=&#123;i&#125; className=&#123; menu.title == active ? \"active\" : \"\"&#125;&gt;&lt;a href=&#123;menu.href&#125;&gt;&#123; menu.text &#125;&lt;span className=\"sr-only\"&gt;(current)&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;);</div><div class=\"line\">            &#125;)</div><div class=\"line\">          &#125;</div><div class=\"line\">          &lt;/Nav&gt;</div><div class=\"line\">          &lt;Nav navbar pullRight&gt;</div><div class=\"line\">            &lt;li&gt;&lt;a&gt;&#123; this.props.clock &#125;&lt;/a&gt;&lt;/li&gt;</div><div class=\"line\">            &lt;NavDropdown title=\"菜单\" id=\"top-aside-menu\"&gt;</div><div class=\"line\">              &#123;</div><div class=\"line\">                this.props.usermenus.map(function(usermenu,i) &#123;</div><div class=\"line\">                  return (&lt;MenuItem key=&#123;i&#125;&gt;&#123; usermenu.text &#125;&lt;/MenuItem&gt;);</div><div class=\"line\">                &#125;)</div><div class=\"line\">              &#125;</div><div class=\"line\">            &lt;/NavDropdown&gt;</div><div class=\"line\">          &lt;/Nav&gt;</div><div class=\"line\">        &lt;/Navbar.Collapse&gt;</div><div class=\"line\">      &lt;/Navbar&gt;</div><div class=\"line\">    )</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\">module.exports = Header;</div></pre></td></tr></table></figure>\n<h3 id=\"添加Actions\"><a href=\"#添加Actions\" class=\"headerlink\" title=\"添加Actions\"></a>添加Actions</h3><p>在actions文件夹添加HeaderActions.js文件，负责发送Action到Dispatcher。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> AppDispatcher <span class=\"keyword\">from</span> <span class=\"string\">'../dispatcher/AppDispatcher.js'</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> HeaderActions = &#123;</div><div class=\"line\">  <span class=\"attr\">clockRender</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">callback</span>) </span>&#123; <span class=\"comment\">//定义clockRender事件</span></div><div class=\"line\">    AppDispatcher.dispatch(&#123;</div><div class=\"line\">      <span class=\"attr\">actionType</span>: <span class=\"string\">'CLOCK_RENDER'</span>, <span class=\"comment\">//发送Action的类型</span></div><div class=\"line\">      callback: callback <span class=\"comment\">//携带回调事件参数</span></div><div class=\"line\">    &#125;);</div><div class=\"line\">  &#125;,</div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">module</span>.exports = HeaderActions;</div></pre></td></tr></table></figure></p>\n<h3 id=\"注册Store到Dispatcher\"><a href=\"#注册Store到Dispatcher\" class=\"headerlink\" title=\"注册Store到Dispatcher\"></a>注册Store到Dispatcher</h3><p>在dispacther文件夹添加AppDispatcher.js文件，用来注册所有的Store。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> &#123; Dispatcher &#125; <span class=\"keyword\">from</span> <span class=\"string\">'flux'</span>; <span class=\"comment\">//导入react组件</span></div><div class=\"line\"><span class=\"keyword\">import</span> HeaderStore <span class=\"keyword\">from</span> <span class=\"string\">'../stores/HeaderStore.js'</span>; <span class=\"comment\">//导入HeaderStore</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> AppDispatcher = <span class=\"keyword\">new</span> Dispatcher();</div><div class=\"line\">AppDispatcher.register(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">action</span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">switch</span> (action.actionType) &#123;</div><div class=\"line\">    <span class=\"keyword\">case</span> <span class=\"string\">'CLOCK_RENDER'</span>:</div><div class=\"line\">      HeaderStore.clockRender(action.callback); <span class=\"comment\">//执行clockRender事件</span></div><div class=\"line\">      <span class=\"keyword\">break</span>;</div><div class=\"line\">    <span class=\"keyword\">default</span>:</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">module</span>.exports = AppDispatcher;</div></pre></td></tr></table></figure></p>\n<h2 id=\"结束语\"><a href=\"#结束语\" class=\"headerlink\" title=\"结束语\"></a>结束语</h2><hr>\n<p>虽然说使用Flux会使得代码量增加了不少，但这样的架构模式也不失为一种管理应用逻辑的方法呢，使用之后应用结构也清晰很多了。<br><a href=\"https://github.com/godbasin/godbasin.github.io/tree/blog-codes/react-notes/6-use-flux\" target=\"_blank\" rel=\"external\">此处查看项目代码（仅包含app部分）</a><br><a href=\"http://o9j9owc7b.bkt.clouddn.com/6-use-flux/index.html\" target=\"_blank\" rel=\"external\">此处查看页面效果</a></p>\n","excerpt":"<p>最近在学习使用React作为前端的框架，《React使用笔记》系列用于记录过程中的一些使用和解决方法。<br>本文简单介绍React Flux架构，以及记录使用flux改造当前应用的过程。<br>","more":"</p>\n<h2 id=\"React-Flux架构简介\"><a href=\"#React-Flux架构简介\" class=\"headerlink\" title=\"React Flux架构简介\"></a>React Flux架构简介</h2><hr>\n<h3 id=\"什么是Flux\"><a href=\"#什么是Flux\" class=\"headerlink\" title=\"什么是Flux\"></a>什么是Flux</h3><p>Flux是Facebook用来构建客户端Web应用的应用架构。它利用单向数据流的方式来组合React中的视图组件。<br>Flux是一种架构思想，专门解决软件的结构问题。它跟MVC架构是同一类东西，更像一个模式而不是一个正式的框架。</p>\n<h3 id=\"Flux基本概念\"><a href=\"#Flux基本概念\" class=\"headerlink\" title=\"Flux基本概念\"></a>Flux基本概念</h3><ul>\n<li><p>Views： 视图层</p>\n<ul>\n<li>controller-view<ul>\n<li>可以理解成MVC模型中的controller，它一般由应用的顶层容器充当，负责从store中获取数据并将数据传递到子组件中。</li>\n<li>简单的应用一般只有一个controller-view，复杂应用中也可以有多个。</li>\n<li>controller-view是应用中唯一可以操作state的地方(setState())</li>\n</ul>\n</li>\n<li>view(UI组件)<ul>\n<li>ui-component职责单一只允许调用action触发事件，数据从由上层容器通过属性传递过来。</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>Action（动作）：视图层发出的消息，可通过调用它来响应用户交互</p>\n<ul>\n<li>是dispatcher提供了一个可以允许我们向store中触发分发的方法</li>\n<li>包含了一个数据的payload。action生成被包含进一个语义化的辅助方法中，来发送action到dispatcher</li>\n</ul>\n</li>\n<li><p>Dispatcher（派发器）：用来接收Actions、执行回调函数</p>\n<ul>\n<li>dispatcher就像是一个中央的集线器，管理着所有的数据流</li>\n<li>本质上是store callback的注册表，本身并没有实际的高度功能</li>\n<li>每个Store注册它自己并提供一个回调函数</li>\n</ul>\n</li>\n<li><p>Store（数据层）：负责封装应用的业务逻辑跟数据的交互</p>\n<ul>\n<li>用来存放应用的状态，一旦发生变动，就提醒Views要更新页面</li>\n<li>Store中包含应用所有的数据，是应用中唯一的数据发生变更的地方</li>\n<li>Store中没有赋值接口—所有数据变更都是由dispatcher发送到store，新的数据随着Store触发的change事件传回view</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"Flux数据流\"><a href=\"#Flux数据流\" class=\"headerlink\" title=\"Flux数据流\"></a>Flux数据流</h3><p><img src=\"http://o905ne85q.bkt.clouddn.com/bg2016011503.png\" alt=\"image\"></p>\n<ul>\n<li>store在dispatcher中注册，并提供相应的回调。回调会接收action并把它当成自己的一个参数。</li>\n<li>通过调用action来响应用户交互。</li>\n<li>当action被触发，回调函数会使用switch语句来解析action中的type参数，并在合适的type下提供钩子来执行内部方法。</li>\n<li>action通过dispatcher来响应store中的state更新。</li>\n<li>store更新完成之后，会向应用中广播一个change事件，views可以选择响应事件来重新获取新的数据并更新。</li>\n</ul>\n<h3 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h3><p><a href=\"http://www.ruanyifeng.com/blog/2016/01/flux.html\">《Flux 架构入门教程》</a><br><a href=\"http://www.cocoachina.com/webapp/20150928/13600.html\">《谈一谈我对 React Flux 架构的理解》</a></p>\n<h2 id=\"使用Flux\"><a href=\"#使用Flux\" class=\"headerlink\" title=\"使用Flux\"></a>使用Flux</h2><hr>\n<p>这里使用改造头部组件作为例子，简述使用flux过程。</p>\n<h3 id=\"目录组织\"><a href=\"#目录组织\" class=\"headerlink\" title=\"目录组织\"></a>目录组织</h3><p>使用flux之后，目录组织如下：<br><img src=\"http://o905ne85q.bkt.clouddn.com/FCB5.tmp.png\" alt=\"image\"><br>这里再简单描述一下新增和改变的文件：</p>\n<ul>\n<li>actions: 存放Flux的Action文件</li>\n<li>components: 存放Flux的Views文件（包括Controller-Views）</li>\n<li>dispatcher: 存放Flux的Dispatcher文件</li>\n<li>stores: 存放Flux的Store文件</li>\n</ul>\n<h3 id=\"添加HeaderStore\"><a href=\"#添加HeaderStore\" class=\"headerlink\" title=\"添加HeaderStore\"></a>添加HeaderStore</h3><p>在stores文件夹添加HeaderStore.js文件，封装头部相关的业务逻辑和数据交互。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> EventEmitter = <span class=\"built_in\">require</span>(<span class=\"string\">'events'</span>).EventEmitter;</div><div class=\"line\"><span class=\"keyword\">var</span> assign = <span class=\"built_in\">require</span>(<span class=\"string\">'object-assign'</span>);</div><div class=\"line\"><span class=\"comment\">//封装头部相关的业务逻辑和数据交互</span></div><div class=\"line\"><span class=\"keyword\">var</span> HeaderStore = assign(&#123;&#125;, EventEmitter.prototype, &#123;</div><div class=\"line\">  <span class=\"attr\">menus</span>: [&#123;</div><div class=\"line\">    <span class=\"attr\">title</span>: <span class=\"string\">'index'</span>, <span class=\"comment\">//title用于储存路由对应的路径</span></div><div class=\"line\">    href: <span class=\"string\">'?#/index'</span>, <span class=\"comment\">//href用于设定该菜单跳转路由</span></div><div class=\"line\">    text: <span class=\"string\">'首页'</span>, <span class=\"comment\">//text用于储存该菜单显示名称</span></div><div class=\"line\">  &#125;, &#123;</div><div class=\"line\">    <span class=\"attr\">title</span>: <span class=\"string\">'others'</span>,</div><div class=\"line\">    <span class=\"attr\">href</span>: <span class=\"string\">'?#/other'</span>,</div><div class=\"line\">    <span class=\"attr\">text</span>: <span class=\"string\">'其他'</span>,</div><div class=\"line\">  &#125;],</div><div class=\"line\">  <span class=\"attr\">usermenus</span>: [&#123;</div><div class=\"line\">    <span class=\"attr\">click</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;&#125;, <span class=\"comment\">//click用于设置该菜单点击事件</span></div><div class=\"line\">    text: <span class=\"string\">'退出'</span>, <span class=\"comment\">//text用于储存该菜单显示名称</span></div><div class=\"line\">  &#125;],</div><div class=\"line\">  <span class=\"attr\">clock</span>: <span class=\"string\">''</span>, <span class=\"comment\">//clock用于保存时钟</span></div><div class=\"line\">  getMenus: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;<span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.menus;&#125;, <span class=\"comment\">//获取menus</span></div><div class=\"line\">  getUsermenus: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;<span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.usermenus;&#125;, <span class=\"comment\">//获取usermenus</span></div><div class=\"line\">  getClock: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;<span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.clock;&#125;, <span class=\"comment\">//获取clock</span></div><div class=\"line\">  clockRender: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">callback</span>) </span>&#123; <span class=\"comment\">//刷新时钟</span></div><div class=\"line\">    <span class=\"keyword\">let</span> numberStandard = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">num</span>) </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">let</span> _val = <span class=\"built_in\">Number</span>(num),</div><div class=\"line\">          _num;</div><div class=\"line\">        _num = (_val &lt; <span class=\"number\">10</span>) ? (<span class=\"string\">'0'</span> + _val) : (<span class=\"string\">''</span> + _val);</div><div class=\"line\">        <span class=\"keyword\">return</span> _num;</div><div class=\"line\">      &#125;,</div><div class=\"line\">      _date = <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>();</div><div class=\"line\">    <span class=\"keyword\">this</span>.clock = _date.getFullYear() + <span class=\"string\">'年'</span> + (_date.getMonth() + <span class=\"number\">1</span>) + <span class=\"string\">'月'</span> +</div><div class=\"line\">      _date.getDate() + <span class=\"string\">'日'</span> + <span class=\"string\">' '</span> + numberStandard(_date.getHours()) + <span class=\"string\">':'</span> + numberStandard(_date.getMinutes()) +</div><div class=\"line\">      <span class=\"string\">':'</span> + numberStandard(_date.getSeconds());</div><div class=\"line\">    callback(); <span class=\"comment\">//可使用回调触发刷新</span></div><div class=\"line\">  &#125;,</div><div class=\"line\">&#125;);</div><div class=\"line\"><span class=\"built_in\">module</span>.exports = HeaderStore;</div></pre></td></tr></table></figure></p>\n<h3 id=\"通过Controller-View传递数据\"><a href=\"#通过Controller-View传递数据\" class=\"headerlink\" title=\"通过Controller-View传递数据\"></a>通过Controller-View传递数据</h3><p>在components文件夹添加HeaderController.jsx和Header.jsx文件。</p>\n<ul>\n<li>HeaderController.jsx<br>HeaderController负责从Headerstore中获取数据并将数据传递到Header中，以及定义相关交互逻辑。</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> React <span class=\"keyword\">from</span> <span class=\"string\">'react'</span>; <span class=\"comment\">//导入react组件</span></div><div class=\"line\"><span class=\"keyword\">import</span> HeaderStore <span class=\"keyword\">from</span> <span class=\"string\">'../stores/HeaderStore.js'</span>;  <span class=\"comment\">//获取HeaderStore</span></div><div class=\"line\"><span class=\"keyword\">import</span> HeaderActions <span class=\"keyword\">from</span> <span class=\"string\">'../actions/HeaderActions.js'</span>; <span class=\"comment\">//获取HeaderActions</span></div><div class=\"line\"><span class=\"keyword\">import</span> Header <span class=\"keyword\">from</span> <span class=\"string\">'./Header.jsx'</span>; <span class=\"comment\">//获取子组件Header</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">const</span> HeaderController = React.createClass(&#123;</div><div class=\"line\">  <span class=\"attr\">getDefaultProps</span> : <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123; <span class=\"comment\">//设置props数据</span></div><div class=\"line\">    <span class=\"keyword\">return</span> &#123;</div><div class=\"line\">      <span class=\"attr\">menus</span>: HeaderStore.getMenus(), <span class=\"comment\">//从HeaderStore获取menus数据</span></div><div class=\"line\">      usermenus:  HeaderStore.getUsermenus(), <span class=\"comment\">//从HeaderStore获取usermenus数据</span></div><div class=\"line\">    &#125;;</div><div class=\"line\">  &#125;,</div><div class=\"line\">  <span class=\"attr\">getInitialState</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123; <span class=\"comment\">//设置state数据</span></div><div class=\"line\">    <span class=\"keyword\">return</span> &#123;<span class=\"attr\">clock</span>: HeaderStore.getClock()&#125;; <span class=\"comment\">//从HeaderStore获取clock数据</span></div><div class=\"line\">  &#125;,</div><div class=\"line\">  <span class=\"attr\">setClock</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">time</span>) </span>&#123; <span class=\"comment\">//从HeaderStore获取clock并更新状态</span></div><div class=\"line\">    <span class=\"keyword\">this</span>.setState(&#123;<span class=\"attr\">clock</span>: HeaderStore.getClock()&#125;);</div><div class=\"line\">  &#125;,</div><div class=\"line\">  <span class=\"attr\">componentDidMount</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> that = <span class=\"keyword\">this</span>;</div><div class=\"line\">    <span class=\"keyword\">this</span>.interval = setInterval(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123; <span class=\"comment\">//设置定时器500ms刷新一次clock</span></div><div class=\"line\">      HeaderActions.clockRender(that.setClock); <span class=\"comment\">//传入回调触发刷新</span></div><div class=\"line\">    &#125;, <span class=\"number\">500</span>);</div><div class=\"line\">  &#125;,</div><div class=\"line\">  <span class=\"attr\">componentWillUnmount</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    clearInterval(<span class=\"keyword\">this</span>.interval); <span class=\"comment\">//移除定时器</span></div><div class=\"line\">  &#125;,</div><div class=\"line\">  render() &#123;</div><div class=\"line\">    <span class=\"comment\">//将数据以props传入子组件</span></div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">Header</span> <span class=\"attr\">clock</span>=<span class=\"string\">&#123;this.state.clock&#125;</span> <span class=\"attr\">menus</span>=<span class=\"string\">&#123;this.props.menus&#125;</span> <span class=\"attr\">usermenus</span>=<span class=\"string\">&#123;this.props.usermenus&#125;</span> <span class=\"attr\">active</span>=<span class=\"string\">&#123;this.props.active&#125;</span>  /&gt;</span>;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\">module.exports = HeaderController;</span></div></pre></td></tr></table></figure>\n<p>当然，如果需要更新页面的事件变多了，也可以使用event事件来进行广播哦。</p>\n<ul>\n<li>Header.jsx<br>Header只负责简单的页面显示即可。</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> React <span class=\"keyword\">from</span> <span class=\"string\">'react'</span>; <span class=\"comment\">//导入react组件</span></div><div class=\"line\"><span class=\"keyword\">import</span> &#123; NavDropdown, MenuItem, Navbar, Nav &#125; <span class=\"keyword\">from</span> <span class=\"string\">'react-bootstrap'</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">const</span> Header = React.createClass(&#123;</div><div class=\"line\">  render() &#123;</div><div class=\"line\">    <span class=\"keyword\">let</span> active = <span class=\"keyword\">this</span>.props.active;</div><div class=\"line\">    <span class=\"keyword\">return</span> (</div><div class=\"line\">      &lt;Navbar className=\"header\" fluid&gt;</div><div class=\"line\">        &lt;Navbar.Header className=\"navbar-header\"&gt;</div><div class=\"line\">          &lt;Navbar.Brand&gt;Godbasin&lt;/Navbar.Brand&gt;</div><div class=\"line\">        &lt;/Navbar.Header&gt;</div><div class=\"line\">        &lt;Navbar.Collapse id=\"bs-example-navbar-collapse-1\"&gt;</div><div class=\"line\">          &lt;Nav navbar&gt;     \t</div><div class=\"line\">          &#123;\t\t\t\t\t\t\t</div><div class=\"line\">            this.props.menus.map(function(menu, i) &#123;</div><div class=\"line\">              return (&lt;li key=&#123;i&#125; className=&#123; menu.title == active ? \"active\" : \"\"&#125;&gt;&lt;a href=&#123;menu.href&#125;&gt;&#123; menu.text &#125;&lt;span className=\"sr-only\"&gt;(current)&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;);</div><div class=\"line\">            &#125;)</div><div class=\"line\">          &#125;</div><div class=\"line\">          &lt;/Nav&gt;</div><div class=\"line\">          &lt;Nav navbar pullRight&gt;</div><div class=\"line\">            &lt;li&gt;&lt;a&gt;&#123; this.props.clock &#125;&lt;/a&gt;&lt;/li&gt;</div><div class=\"line\">            &lt;NavDropdown title=\"菜单\" id=\"top-aside-menu\"&gt;</div><div class=\"line\">              &#123;</div><div class=\"line\">                this.props.usermenus.map(function(usermenu,i) &#123;</div><div class=\"line\">                  return (&lt;MenuItem key=&#123;i&#125;&gt;&#123; usermenu.text &#125;&lt;/MenuItem&gt;);</div><div class=\"line\">                &#125;)</div><div class=\"line\">              &#125;</div><div class=\"line\">            &lt;/NavDropdown&gt;</div><div class=\"line\">          &lt;/Nav&gt;</div><div class=\"line\">        &lt;/Navbar.Collapse&gt;</div><div class=\"line\">      &lt;/Navbar&gt;</div><div class=\"line\">    )</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\">module.exports = Header;</div></pre></td></tr></table></figure>\n<h3 id=\"添加Actions\"><a href=\"#添加Actions\" class=\"headerlink\" title=\"添加Actions\"></a>添加Actions</h3><p>在actions文件夹添加HeaderActions.js文件，负责发送Action到Dispatcher。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> AppDispatcher <span class=\"keyword\">from</span> <span class=\"string\">'../dispatcher/AppDispatcher.js'</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> HeaderActions = &#123;</div><div class=\"line\">  <span class=\"attr\">clockRender</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">callback</span>) </span>&#123; <span class=\"comment\">//定义clockRender事件</span></div><div class=\"line\">    AppDispatcher.dispatch(&#123;</div><div class=\"line\">      <span class=\"attr\">actionType</span>: <span class=\"string\">'CLOCK_RENDER'</span>, <span class=\"comment\">//发送Action的类型</span></div><div class=\"line\">      callback: callback <span class=\"comment\">//携带回调事件参数</span></div><div class=\"line\">    &#125;);</div><div class=\"line\">  &#125;,</div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">module</span>.exports = HeaderActions;</div></pre></td></tr></table></figure></p>\n<h3 id=\"注册Store到Dispatcher\"><a href=\"#注册Store到Dispatcher\" class=\"headerlink\" title=\"注册Store到Dispatcher\"></a>注册Store到Dispatcher</h3><p>在dispacther文件夹添加AppDispatcher.js文件，用来注册所有的Store。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> &#123; Dispatcher &#125; <span class=\"keyword\">from</span> <span class=\"string\">'flux'</span>; <span class=\"comment\">//导入react组件</span></div><div class=\"line\"><span class=\"keyword\">import</span> HeaderStore <span class=\"keyword\">from</span> <span class=\"string\">'../stores/HeaderStore.js'</span>; <span class=\"comment\">//导入HeaderStore</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> AppDispatcher = <span class=\"keyword\">new</span> Dispatcher();</div><div class=\"line\">AppDispatcher.register(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">action</span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">switch</span> (action.actionType) &#123;</div><div class=\"line\">    <span class=\"keyword\">case</span> <span class=\"string\">'CLOCK_RENDER'</span>:</div><div class=\"line\">      HeaderStore.clockRender(action.callback); <span class=\"comment\">//执行clockRender事件</span></div><div class=\"line\">      <span class=\"keyword\">break</span>;</div><div class=\"line\">    <span class=\"keyword\">default</span>:</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">module</span>.exports = AppDispatcher;</div></pre></td></tr></table></figure></p>\n<h2 id=\"结束语\"><a href=\"#结束语\" class=\"headerlink\" title=\"结束语\"></a>结束语</h2><hr>\n<p>虽然说使用Flux会使得代码量增加了不少，但这样的架构模式也不失为一种管理应用逻辑的方法呢，使用之后应用结构也清晰很多了。<br><a href=\"https://github.com/godbasin/godbasin.github.io/tree/blog-codes/react-notes/6-use-flux\">此处查看项目代码（仅包含app部分）</a><br><a href=\"http://o9j9owc7b.bkt.clouddn.com/6-use-flux/index.html\">此处查看页面效果</a></p>"},{"title":"React使用笔记1--使用webpack搭建React项目","date":"2016-08-06T00:52:22.000Z","_content":"最近在学习使用React作为前端的框架，《React使用笔记》系列用于记录过程中的一些使用和解决方法。\n本文记录使用webpack初步搭建项目的过程。\n<!--more-->\n\n## 初步使用React应用\n\n### 直接使用React源码\n- 下载[React源代码](https://facebook.github.io/react/downloads.html)\n- 引入到页面内\n- 页面模板\n\n``` html\n<!DOCTYPE html>\n<html>\n  <head>\n    <meta charset=\"UTF-8\" />\n    <title>Hello React!</title>\n\t<!-- 引入源文件到页面内 -->\n    <script src=\"build/react.js\"></script>\n    <script src=\"build/react-dom.js\"></script>\n    <script src=\"https://cdnjs.cloudflare.com/ajax/libs/babel-core/5.8.34/browser.min.js\"></script>\n  </head>\n  <body>\n    <div id=\"example\"></div>\n\t<!-- type属性为text/babel -->\n    <script type=\"text/babel\">\n      ReactDOM.render(\n        <h1>Hello, world!</h1>,\n        document.getElementById('example')\n      );\n    </script>\n  </body>\n</html>\n```\n- 注意\n  - 在这里type属性为text/babel，原因是React的JSX语法，跟 JavaScript不兼容\n  - ReactDOM.render是React的最基本方法，用于将模板转为HTML语言，并插入指定的DOM节点\n- 参考[React官方教程](https://facebook.github.io/react/docs/getting-started.html)\n\n### 自动化搭建\n- 本骚念使用的是Webpack自动搭建，后面附上详细教程\n- 自动化搭建的好处：\n  - 1.可快速了解React通过Webpack工程化的过程\n  - 2.通过npm可选择引入需要使用的React模块，像React/React-dom/bootstrap/jQuery/less等可以添加并导入到应用中\n  - 3.自动ES6转换，React对ES6的支持程度很不错，怎么能错过使用的机会呢\n  - 4.自动jsx格式转换，React的特色JSX也必须少不了哒\n  - 5.热部署，文件修改保存之后自动刷新页面\n  - 6.可快速搭建单元测试环境\n- 参考[《手把手教你基于ES6架构自己的React Boilerplate项目》](http://www.open-open.com/lib/view/open1462013660085.html)\n\n### Webpack\n- webpack支持的功能特性：\n1. 支持CommonJs和AMD模块，意思也就是我们基本可以无痛迁移旧项目。\n2. 支持模块加载器和插件机制，可对模块灵活定制。特别是babel-loader，有效支持ES6。\n3. 可以通过配置，打包成多个文件。有效利用浏览器的缓存功能提升性能。\n4. 将样式文件和图片等静态资源也可视为模块进行打包。配合loader加载器，可以支持sass，less等CSS预处理器。\n5. 内置有source map，即使打包在一起依旧方便调试。\n\n- loader加载器\n  - loaders被应用于应用程序的资源文件中，通常用来做转换。\n  - 它们都是函数（运行在nodejs中），将资源文件的源码作为入参，处理完后，返回新的源码文件。\n  - less/sass loader加载器\n  - url-loader可对图片资源打包\n  - babel ES6预处理器\n\n- webpack安装\n\n``` javascript\n//按照webpack依赖\n$ npm install webpack -g\n//html-webpack-plugin插件用来简化创建服务于webpack bundle的HTML文件\n$ npm install html-webpack-plugin --save-dev\n//在本地启动一个web服务器\n$ npm install webpack-dev-server --save-dev\n//安装各个必须的loader\n$ npm install style-loader css-loader url-loader babel-loader less-loader file-loader --save-dev\n```\n- 参考[《webpack前端模块加载工具》](http://www.cnblogs.com/YikaJ/p/4586703.html)\n\n## 目录组织\n-----\nReact的目录组织相对自由，但自由通常也会带来不好维护的问题呢，所以建议大家好好管理文件哦。\n### 本骚年目录组织\n如下：\n![image](http://o905ne85q.bkt.clouddn.com/C315.tmp.png)\n- build用于存放最终生成的代码\n- components用于存放React的组件\n- images/less不用说当然是用来存放图片和样式文件的\n- node_modules大家都知道是npm的依赖文件\n- templates里面存放页面模板，index.ejs则是主页的模板\n- index.js是启动入口啦\n- package.json是管理npm依赖的文件\n- webpack.config.js则是webpack的配置项\n\n### webpack.config.js\n``` javascript\nvar webpack = require('webpack'); //引入node的webpack库\nvar path = require('path'); //引入node的path库\nvar HtmlwebpackPlugin = require('html-webpack-plugin'); //引入node的html-webpack-plugin库\nvar config = {\n\t//页面入口文件配置\n\tentry: [\n\t\t'webpack/hot/dev-server', //热部署\n\t\t'webpack-dev-server/client?http://localhost:3000', //本地服务端口\n\t\t'./index.js' //入口文件\n\t],\n\t//入口文件输出配置\n\toutput: {\n\t\tpath: path.resolve(__dirname, 'build'), // 指定编译后的代码位置为 build\n\t\tfilename: 'bundle.js' //打包JavaScript文件以及依赖(就是那些第三方的库)文件\n\t},\n\tmodule: {\n\t\t//加载器配置\n\t\tloaders: [\n\t\t\t//.jsx 文件使用babel-loader来编译处理\n\t\t\t{test: /\\.jsx?$/, loader: 'babel', exclude: /node_modules/, query: {presets: ['react', 'es2015']}},\n\t\t\t//.less 文件使用 style-loader/css-loader/less-loader 来处理\n\t\t\t{test: /\\.less$/, loaders: ['style', 'css', 'less'], include: path.resolve(__dirname, 'less')},\n\t\t\t//.jsx 文件使用babel-loader来编译处理\n\t\t\t{test: /\\.js$/, loaders: ['babel'], exclude: /node_modules/ },\n\t\t\t//图片文件使用 url-loader 来处理，小于8kb的直接转为base64\n\t\t\t{test: /\\.(jpg|png)$/, loader: \"url?limit=8192\"}\n\t\t]\n\t},\n\t//插件项\n\tplugins: [\n\t\tnew HtmlwebpackPlugin({\n\t\t\ttitle: 'React',\n\t\t\ttemplate: path.resolve(__dirname, 'templates/index.ejs'),\n\t\t\tinject: 'body'\n\t\t}),\n\t],\n};\nmodule.exports = config;\n```\n\n### package.json\n``` json\n\"devDependencies\": {\n\t\"babel-core\": \"^6.10.4\",\n\t\"babel-loader\": \"^6.2.4\",\n\t\"babel-preset-es2015\": \"^6.9.0\",\n\t\"babel-preset-react\": \"^6.11.1\",\n\t\"bootstrap\": \"^3.3.6\",\n\t\"css-loader\": \"^0.23.1\",\n\t\"file-loader\": \"^0.9.0\",\n\t\"html-webpack-plugin\": \"^2.21.0\",\n\t\"jquery\": \"^3.0.0\",\n\t\"less\": \"^2.7.1\",\n\t\"less-loader\": \"^2.2.3\",\n\t\"moment\": \"^2.13.0\",\n\t\"npm-install-webpack-plugin\": \"^4.0.3\",\n\t\"sass-loader\": \"^4.0.0\",\n\t\"style-loader\": \"^0.13.1\",\n\t\"url-loader\": \"^0.5.7\",\n\t\"webpack\": \"^1.13.1\",\n\t\"webpack-dev-server\": \"^1.14.1\"\n},\n\"dependencies\": {\n\t\"react\": \"^15.1.0\",\n\t\"react-dom\": \"^15.1.0\",\n\t\"webpack\": \"^1.13.1\"\n}\n```\n\n### 基本搭建项目\n- 在templates/index.ejs中添加初始模板\n\n``` javascript\n<!DOCTYPE html>\n<html>\n  <head>\n    <meta charset=\"utf-8\">\n    <title>react-test</title>   \n  </head>\n  <body>\n    <div id=\"test\"></div>\n  </body>\n</html>\n```\n\n- 在index.js中加入启动和依赖文件\n\n``` javascript\nimport './less/index.less'; //less样式文件\nimport React from 'react'; //react\nimport ReactDOM from 'react-dom'; //react-dom\nimport Component from  './components/component.jsx'; //你的自定义组件\nimport $ from 'jquery'; //这里引入jquery\n//将其渲染到页面上id为test的DOM元素内\nReactDOM.render(<Component></Component>, $('#test')[0]);\n```\n\n- 在components/component.jsx中添加组件\n\n``` javascript\nimport React from 'react';\n\nclass Component extends React.Component{\n  render() {\n    return <h1>Hello React</h1>;\n  }\n}\nmodule.exports = Component;\n```\n\n- 启动本地服务以及热部署\n\n``` javascript\nnpm run dev\n```\n\n- 生成文件到build\n\n``` javascript\nnpm run build\n```\n生成文件要注意把webpack.config.js里的热部署相关去掉哦\n``` javascript\nentry: [\n\t'./index.js' //入口文件\n],\n```\n- 至此，我们初步搭建了个React的项目\n效果如下：\n![image](http://o905ne85q.bkt.clouddn.com/3867.tmp.png)\n\n## 结束语\n-----\n自动化搭建可是个高效又酷酷的工程哦，而且在这过程中学到的也很多呢。\n[此处查看项目代码（仅包含app部分）](https://github.com/godbasin/godbasin.github.io/tree/blog-codes/react-notes/1-build-react-project)\n[此处查看页面效果](http://o9j9owc7b.bkt.clouddn.com/1-build-react-project/index.html)","source":"_posts/react-notes-1-build-react-project.md","raw":"---\ntitle: React使用笔记1--使用webpack搭建React项目\ndate: 2016-08-06 08:52:22\ncategories: react沙拉\ntags: 笔记\n---\n最近在学习使用React作为前端的框架，《React使用笔记》系列用于记录过程中的一些使用和解决方法。\n本文记录使用webpack初步搭建项目的过程。\n<!--more-->\n\n## 初步使用React应用\n\n### 直接使用React源码\n- 下载[React源代码](https://facebook.github.io/react/downloads.html)\n- 引入到页面内\n- 页面模板\n\n``` html\n<!DOCTYPE html>\n<html>\n  <head>\n    <meta charset=\"UTF-8\" />\n    <title>Hello React!</title>\n\t<!-- 引入源文件到页面内 -->\n    <script src=\"build/react.js\"></script>\n    <script src=\"build/react-dom.js\"></script>\n    <script src=\"https://cdnjs.cloudflare.com/ajax/libs/babel-core/5.8.34/browser.min.js\"></script>\n  </head>\n  <body>\n    <div id=\"example\"></div>\n\t<!-- type属性为text/babel -->\n    <script type=\"text/babel\">\n      ReactDOM.render(\n        <h1>Hello, world!</h1>,\n        document.getElementById('example')\n      );\n    </script>\n  </body>\n</html>\n```\n- 注意\n  - 在这里type属性为text/babel，原因是React的JSX语法，跟 JavaScript不兼容\n  - ReactDOM.render是React的最基本方法，用于将模板转为HTML语言，并插入指定的DOM节点\n- 参考[React官方教程](https://facebook.github.io/react/docs/getting-started.html)\n\n### 自动化搭建\n- 本骚念使用的是Webpack自动搭建，后面附上详细教程\n- 自动化搭建的好处：\n  - 1.可快速了解React通过Webpack工程化的过程\n  - 2.通过npm可选择引入需要使用的React模块，像React/React-dom/bootstrap/jQuery/less等可以添加并导入到应用中\n  - 3.自动ES6转换，React对ES6的支持程度很不错，怎么能错过使用的机会呢\n  - 4.自动jsx格式转换，React的特色JSX也必须少不了哒\n  - 5.热部署，文件修改保存之后自动刷新页面\n  - 6.可快速搭建单元测试环境\n- 参考[《手把手教你基于ES6架构自己的React Boilerplate项目》](http://www.open-open.com/lib/view/open1462013660085.html)\n\n### Webpack\n- webpack支持的功能特性：\n1. 支持CommonJs和AMD模块，意思也就是我们基本可以无痛迁移旧项目。\n2. 支持模块加载器和插件机制，可对模块灵活定制。特别是babel-loader，有效支持ES6。\n3. 可以通过配置，打包成多个文件。有效利用浏览器的缓存功能提升性能。\n4. 将样式文件和图片等静态资源也可视为模块进行打包。配合loader加载器，可以支持sass，less等CSS预处理器。\n5. 内置有source map，即使打包在一起依旧方便调试。\n\n- loader加载器\n  - loaders被应用于应用程序的资源文件中，通常用来做转换。\n  - 它们都是函数（运行在nodejs中），将资源文件的源码作为入参，处理完后，返回新的源码文件。\n  - less/sass loader加载器\n  - url-loader可对图片资源打包\n  - babel ES6预处理器\n\n- webpack安装\n\n``` javascript\n//按照webpack依赖\n$ npm install webpack -g\n//html-webpack-plugin插件用来简化创建服务于webpack bundle的HTML文件\n$ npm install html-webpack-plugin --save-dev\n//在本地启动一个web服务器\n$ npm install webpack-dev-server --save-dev\n//安装各个必须的loader\n$ npm install style-loader css-loader url-loader babel-loader less-loader file-loader --save-dev\n```\n- 参考[《webpack前端模块加载工具》](http://www.cnblogs.com/YikaJ/p/4586703.html)\n\n## 目录组织\n-----\nReact的目录组织相对自由，但自由通常也会带来不好维护的问题呢，所以建议大家好好管理文件哦。\n### 本骚年目录组织\n如下：\n![image](http://o905ne85q.bkt.clouddn.com/C315.tmp.png)\n- build用于存放最终生成的代码\n- components用于存放React的组件\n- images/less不用说当然是用来存放图片和样式文件的\n- node_modules大家都知道是npm的依赖文件\n- templates里面存放页面模板，index.ejs则是主页的模板\n- index.js是启动入口啦\n- package.json是管理npm依赖的文件\n- webpack.config.js则是webpack的配置项\n\n### webpack.config.js\n``` javascript\nvar webpack = require('webpack'); //引入node的webpack库\nvar path = require('path'); //引入node的path库\nvar HtmlwebpackPlugin = require('html-webpack-plugin'); //引入node的html-webpack-plugin库\nvar config = {\n\t//页面入口文件配置\n\tentry: [\n\t\t'webpack/hot/dev-server', //热部署\n\t\t'webpack-dev-server/client?http://localhost:3000', //本地服务端口\n\t\t'./index.js' //入口文件\n\t],\n\t//入口文件输出配置\n\toutput: {\n\t\tpath: path.resolve(__dirname, 'build'), // 指定编译后的代码位置为 build\n\t\tfilename: 'bundle.js' //打包JavaScript文件以及依赖(就是那些第三方的库)文件\n\t},\n\tmodule: {\n\t\t//加载器配置\n\t\tloaders: [\n\t\t\t//.jsx 文件使用babel-loader来编译处理\n\t\t\t{test: /\\.jsx?$/, loader: 'babel', exclude: /node_modules/, query: {presets: ['react', 'es2015']}},\n\t\t\t//.less 文件使用 style-loader/css-loader/less-loader 来处理\n\t\t\t{test: /\\.less$/, loaders: ['style', 'css', 'less'], include: path.resolve(__dirname, 'less')},\n\t\t\t//.jsx 文件使用babel-loader来编译处理\n\t\t\t{test: /\\.js$/, loaders: ['babel'], exclude: /node_modules/ },\n\t\t\t//图片文件使用 url-loader 来处理，小于8kb的直接转为base64\n\t\t\t{test: /\\.(jpg|png)$/, loader: \"url?limit=8192\"}\n\t\t]\n\t},\n\t//插件项\n\tplugins: [\n\t\tnew HtmlwebpackPlugin({\n\t\t\ttitle: 'React',\n\t\t\ttemplate: path.resolve(__dirname, 'templates/index.ejs'),\n\t\t\tinject: 'body'\n\t\t}),\n\t],\n};\nmodule.exports = config;\n```\n\n### package.json\n``` json\n\"devDependencies\": {\n\t\"babel-core\": \"^6.10.4\",\n\t\"babel-loader\": \"^6.2.4\",\n\t\"babel-preset-es2015\": \"^6.9.0\",\n\t\"babel-preset-react\": \"^6.11.1\",\n\t\"bootstrap\": \"^3.3.6\",\n\t\"css-loader\": \"^0.23.1\",\n\t\"file-loader\": \"^0.9.0\",\n\t\"html-webpack-plugin\": \"^2.21.0\",\n\t\"jquery\": \"^3.0.0\",\n\t\"less\": \"^2.7.1\",\n\t\"less-loader\": \"^2.2.3\",\n\t\"moment\": \"^2.13.0\",\n\t\"npm-install-webpack-plugin\": \"^4.0.3\",\n\t\"sass-loader\": \"^4.0.0\",\n\t\"style-loader\": \"^0.13.1\",\n\t\"url-loader\": \"^0.5.7\",\n\t\"webpack\": \"^1.13.1\",\n\t\"webpack-dev-server\": \"^1.14.1\"\n},\n\"dependencies\": {\n\t\"react\": \"^15.1.0\",\n\t\"react-dom\": \"^15.1.0\",\n\t\"webpack\": \"^1.13.1\"\n}\n```\n\n### 基本搭建项目\n- 在templates/index.ejs中添加初始模板\n\n``` javascript\n<!DOCTYPE html>\n<html>\n  <head>\n    <meta charset=\"utf-8\">\n    <title>react-test</title>   \n  </head>\n  <body>\n    <div id=\"test\"></div>\n  </body>\n</html>\n```\n\n- 在index.js中加入启动和依赖文件\n\n``` javascript\nimport './less/index.less'; //less样式文件\nimport React from 'react'; //react\nimport ReactDOM from 'react-dom'; //react-dom\nimport Component from  './components/component.jsx'; //你的自定义组件\nimport $ from 'jquery'; //这里引入jquery\n//将其渲染到页面上id为test的DOM元素内\nReactDOM.render(<Component></Component>, $('#test')[0]);\n```\n\n- 在components/component.jsx中添加组件\n\n``` javascript\nimport React from 'react';\n\nclass Component extends React.Component{\n  render() {\n    return <h1>Hello React</h1>;\n  }\n}\nmodule.exports = Component;\n```\n\n- 启动本地服务以及热部署\n\n``` javascript\nnpm run dev\n```\n\n- 生成文件到build\n\n``` javascript\nnpm run build\n```\n生成文件要注意把webpack.config.js里的热部署相关去掉哦\n``` javascript\nentry: [\n\t'./index.js' //入口文件\n],\n```\n- 至此，我们初步搭建了个React的项目\n效果如下：\n![image](http://o905ne85q.bkt.clouddn.com/3867.tmp.png)\n\n## 结束语\n-----\n自动化搭建可是个高效又酷酷的工程哦，而且在这过程中学到的也很多呢。\n[此处查看项目代码（仅包含app部分）](https://github.com/godbasin/godbasin.github.io/tree/blog-codes/react-notes/1-build-react-project)\n[此处查看页面效果](http://o9j9owc7b.bkt.clouddn.com/1-build-react-project/index.html)","slug":"react-notes-1-build-react-project","published":1,"updated":"2016-08-20T10:54:21.098Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cix45huhl0040xotulo59grh9","content":"<p>最近在学习使用React作为前端的框架，《React使用笔记》系列用于记录过程中的一些使用和解决方法。<br>本文记录使用webpack初步搭建项目的过程。<br><a id=\"more\"></a></p>\n<h2 id=\"初步使用React应用\"><a href=\"#初步使用React应用\" class=\"headerlink\" title=\"初步使用React应用\"></a>初步使用React应用</h2><h3 id=\"直接使用React源码\"><a href=\"#直接使用React源码\" class=\"headerlink\" title=\"直接使用React源码\"></a>直接使用React源码</h3><ul>\n<li>下载<a href=\"https://facebook.github.io/react/downloads.html\" target=\"_blank\" rel=\"external\">React源代码</a></li>\n<li>引入到页面内</li>\n<li>页面模板</li>\n</ul>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&lt;!DOCTYPE html&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"UTF-8\"</span> /&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>Hello React!<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></div><div class=\"line\">  <span class=\"comment\">&lt;!-- 引入源文件到页面内 --&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"build/react.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"build/react-dom.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"https://cdnjs.cloudflare.com/ajax/libs/babel-core/5.8.34/browser.min.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"example\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">  <span class=\"comment\">&lt;!-- type属性为text/babel --&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/babel\"</span>&gt;</span><span class=\"javascript\"></span></div><div class=\"line\">      ReactDOM.render(</div><div class=\"line\">        <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>Hello, world!<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span>,</div><div class=\"line\">        <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'example'</span>)</div><div class=\"line\">      );</div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></div></pre></td></tr></table></figure>\n<ul>\n<li>注意<ul>\n<li>在这里type属性为text/babel，原因是React的JSX语法，跟 JavaScript不兼容</li>\n<li>ReactDOM.render是React的最基本方法，用于将模板转为HTML语言，并插入指定的DOM节点</li>\n</ul>\n</li>\n<li>参考<a href=\"https://facebook.github.io/react/docs/getting-started.html\" target=\"_blank\" rel=\"external\">React官方教程</a></li>\n</ul>\n<h3 id=\"自动化搭建\"><a href=\"#自动化搭建\" class=\"headerlink\" title=\"自动化搭建\"></a>自动化搭建</h3><ul>\n<li>本骚念使用的是Webpack自动搭建，后面附上详细教程</li>\n<li>自动化搭建的好处：<ul>\n<li>1.可快速了解React通过Webpack工程化的过程</li>\n<li>2.通过npm可选择引入需要使用的React模块，像React/React-dom/bootstrap/jQuery/less等可以添加并导入到应用中</li>\n<li>3.自动ES6转换，React对ES6的支持程度很不错，怎么能错过使用的机会呢</li>\n<li>4.自动jsx格式转换，React的特色JSX也必须少不了哒</li>\n<li>5.热部署，文件修改保存之后自动刷新页面</li>\n<li>6.可快速搭建单元测试环境</li>\n</ul>\n</li>\n<li>参考<a href=\"http://www.open-open.com/lib/view/open1462013660085.html\" target=\"_blank\" rel=\"external\">《手把手教你基于ES6架构自己的React Boilerplate项目》</a></li>\n</ul>\n<h3 id=\"Webpack\"><a href=\"#Webpack\" class=\"headerlink\" title=\"Webpack\"></a>Webpack</h3><ul>\n<li>webpack支持的功能特性：</li>\n</ul>\n<ol>\n<li>支持CommonJs和AMD模块，意思也就是我们基本可以无痛迁移旧项目。</li>\n<li>支持模块加载器和插件机制，可对模块灵活定制。特别是babel-loader，有效支持ES6。</li>\n<li>可以通过配置，打包成多个文件。有效利用浏览器的缓存功能提升性能。</li>\n<li>将样式文件和图片等静态资源也可视为模块进行打包。配合loader加载器，可以支持sass，less等CSS预处理器。</li>\n<li>内置有source map，即使打包在一起依旧方便调试。</li>\n</ol>\n<ul>\n<li><p>loader加载器</p>\n<ul>\n<li>loaders被应用于应用程序的资源文件中，通常用来做转换。</li>\n<li>它们都是函数（运行在nodejs中），将资源文件的源码作为入参，处理完后，返回新的源码文件。</li>\n<li>less/sass loader加载器</li>\n<li>url-loader可对图片资源打包</li>\n<li>babel ES6预处理器</li>\n</ul>\n</li>\n<li><p>webpack安装</p>\n</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//按照webpack依赖</span></div><div class=\"line\">$ npm install webpack -g</div><div class=\"line\"><span class=\"comment\">//html-webpack-plugin插件用来简化创建服务于webpack bundle的HTML文件</span></div><div class=\"line\">$ npm install html-webpack-plugin --save-dev</div><div class=\"line\"><span class=\"comment\">//在本地启动一个web服务器</span></div><div class=\"line\">$ npm install webpack-dev-server --save-dev</div><div class=\"line\"><span class=\"comment\">//安装各个必须的loader</span></div><div class=\"line\">$ npm install style-loader css-loader url-loader babel-loader less-loader file-loader --save-dev</div></pre></td></tr></table></figure>\n<ul>\n<li>参考<a href=\"http://www.cnblogs.com/YikaJ/p/4586703.html\" target=\"_blank\" rel=\"external\">《webpack前端模块加载工具》</a></li>\n</ul>\n<h2 id=\"目录组织\"><a href=\"#目录组织\" class=\"headerlink\" title=\"目录组织\"></a>目录组织</h2><hr>\n<p>React的目录组织相对自由，但自由通常也会带来不好维护的问题呢，所以建议大家好好管理文件哦。</p>\n<h3 id=\"本骚年目录组织\"><a href=\"#本骚年目录组织\" class=\"headerlink\" title=\"本骚年目录组织\"></a>本骚年目录组织</h3><p>如下：<br><img src=\"http://o905ne85q.bkt.clouddn.com/C315.tmp.png\" alt=\"image\"></p>\n<ul>\n<li>build用于存放最终生成的代码</li>\n<li>components用于存放React的组件</li>\n<li>images/less不用说当然是用来存放图片和样式文件的</li>\n<li>node_modules大家都知道是npm的依赖文件</li>\n<li>templates里面存放页面模板，index.ejs则是主页的模板</li>\n<li>index.js是启动入口啦</li>\n<li>package.json是管理npm依赖的文件</li>\n<li>webpack.config.js则是webpack的配置项</li>\n</ul>\n<h3 id=\"webpack-config-js\"><a href=\"#webpack-config-js\" class=\"headerlink\" title=\"webpack.config.js\"></a>webpack.config.js</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> webpack = <span class=\"built_in\">require</span>(<span class=\"string\">'webpack'</span>); <span class=\"comment\">//引入node的webpack库</span></div><div class=\"line\"><span class=\"keyword\">var</span> path = <span class=\"built_in\">require</span>(<span class=\"string\">'path'</span>); <span class=\"comment\">//引入node的path库</span></div><div class=\"line\"><span class=\"keyword\">var</span> HtmlwebpackPlugin = <span class=\"built_in\">require</span>(<span class=\"string\">'html-webpack-plugin'</span>); <span class=\"comment\">//引入node的html-webpack-plugin库</span></div><div class=\"line\"><span class=\"keyword\">var</span> config = &#123;</div><div class=\"line\">  <span class=\"comment\">//页面入口文件配置</span></div><div class=\"line\">  entry: [</div><div class=\"line\">    <span class=\"string\">'webpack/hot/dev-server'</span>, <span class=\"comment\">//热部署</span></div><div class=\"line\">    <span class=\"string\">'webpack-dev-server/client?http://localhost:3000'</span>, <span class=\"comment\">//本地服务端口</span></div><div class=\"line\">    <span class=\"string\">'./index.js'</span> <span class=\"comment\">//入口文件</span></div><div class=\"line\">  ],</div><div class=\"line\">  <span class=\"comment\">//入口文件输出配置</span></div><div class=\"line\">  output: &#123;</div><div class=\"line\">    <span class=\"attr\">path</span>: path.resolve(__dirname, <span class=\"string\">'build'</span>), <span class=\"comment\">// 指定编译后的代码位置为 build</span></div><div class=\"line\">    filename: <span class=\"string\">'bundle.js'</span> <span class=\"comment\">//打包JavaScript文件以及依赖(就是那些第三方的库)文件</span></div><div class=\"line\">  &#125;,</div><div class=\"line\">  <span class=\"attr\">module</span>: &#123;</div><div class=\"line\">    <span class=\"comment\">//加载器配置</span></div><div class=\"line\">    loaders: [</div><div class=\"line\">      <span class=\"comment\">//.jsx 文件使用babel-loader来编译处理</span></div><div class=\"line\">      &#123;<span class=\"attr\">test</span>: <span class=\"regexp\">/\\.jsx?$/</span>, <span class=\"attr\">loader</span>: <span class=\"string\">'babel'</span>, <span class=\"attr\">exclude</span>: <span class=\"regexp\">/node_modules/</span>, <span class=\"attr\">query</span>: &#123;<span class=\"attr\">presets</span>: [<span class=\"string\">'react'</span>, <span class=\"string\">'es2015'</span>]&#125;&#125;,</div><div class=\"line\">      <span class=\"comment\">//.less 文件使用 style-loader/css-loader/less-loader 来处理</span></div><div class=\"line\">      &#123;<span class=\"attr\">test</span>: <span class=\"regexp\">/\\.less$/</span>, <span class=\"attr\">loaders</span>: [<span class=\"string\">'style'</span>, <span class=\"string\">'css'</span>, <span class=\"string\">'less'</span>], <span class=\"attr\">include</span>: path.resolve(__dirname, <span class=\"string\">'less'</span>)&#125;,</div><div class=\"line\">      <span class=\"comment\">//.jsx 文件使用babel-loader来编译处理</span></div><div class=\"line\">      &#123;<span class=\"attr\">test</span>: <span class=\"regexp\">/\\.js$/</span>, <span class=\"attr\">loaders</span>: [<span class=\"string\">'babel'</span>], <span class=\"attr\">exclude</span>: <span class=\"regexp\">/node_modules/</span> &#125;,</div><div class=\"line\">      <span class=\"comment\">//图片文件使用 url-loader 来处理，小于8kb的直接转为base64</span></div><div class=\"line\">      &#123;<span class=\"attr\">test</span>: <span class=\"regexp\">/\\.(jpg|png)$/</span>, <span class=\"attr\">loader</span>: <span class=\"string\">\"url?limit=8192\"</span>&#125;</div><div class=\"line\">    ]</div><div class=\"line\">  &#125;,</div><div class=\"line\">  <span class=\"comment\">//插件项</span></div><div class=\"line\">  plugins: [</div><div class=\"line\">    <span class=\"keyword\">new</span> HtmlwebpackPlugin(&#123;</div><div class=\"line\">      <span class=\"attr\">title</span>: <span class=\"string\">'React'</span>,</div><div class=\"line\">      <span class=\"attr\">template</span>: path.resolve(__dirname, <span class=\"string\">'templates/index.ejs'</span>),</div><div class=\"line\">      <span class=\"attr\">inject</span>: <span class=\"string\">'body'</span></div><div class=\"line\">    &#125;),</div><div class=\"line\">  ],</div><div class=\"line\">&#125;;</div><div class=\"line\"><span class=\"built_in\">module</span>.exports = config;</div></pre></td></tr></table></figure>\n<h3 id=\"package-json\"><a href=\"#package-json\" class=\"headerlink\" title=\"package.json\"></a>package.json</h3><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div></pre></td><td class=\"code\"><pre><div class=\"line\">\"devDependencies\": &#123;</div><div class=\"line\">  \"babel-core\": \"^6.10.4\",</div><div class=\"line\">  \"babel-loader\": \"^6.2.4\",</div><div class=\"line\">  \"babel-preset-es2015\": \"^6.9.0\",</div><div class=\"line\">  \"babel-preset-react\": \"^6.11.1\",</div><div class=\"line\">  \"bootstrap\": \"^3.3.6\",</div><div class=\"line\">  \"css-loader\": \"^0.23.1\",</div><div class=\"line\">  \"file-loader\": \"^0.9.0\",</div><div class=\"line\">  \"html-webpack-plugin\": \"^2.21.0\",</div><div class=\"line\">  \"jquery\": \"^3.0.0\",</div><div class=\"line\">  \"less\": \"^2.7.1\",</div><div class=\"line\">  \"less-loader\": \"^2.2.3\",</div><div class=\"line\">  \"moment\": \"^2.13.0\",</div><div class=\"line\">  \"npm-install-webpack-plugin\": \"^4.0.3\",</div><div class=\"line\">  \"sass-loader\": \"^4.0.0\",</div><div class=\"line\">  \"style-loader\": \"^0.13.1\",</div><div class=\"line\">  \"url-loader\": \"^0.5.7\",</div><div class=\"line\">  \"webpack\": \"^1.13.1\",</div><div class=\"line\">  \"webpack-dev-server\": \"^1.14.1\"</div><div class=\"line\">&#125;,</div><div class=\"line\">\"dependencies\": &#123;</div><div class=\"line\">  \"react\": \"^15.1.0\",</div><div class=\"line\">  \"react-dom\": \"^15.1.0\",</div><div class=\"line\">  \"webpack\": \"^1.13.1\"</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"基本搭建项目\"><a href=\"#基本搭建项目\" class=\"headerlink\" title=\"基本搭建项目\"></a>基本搭建项目</h3><ul>\n<li>在templates/index.ejs中添加初始模板</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;!DOCTYPE html&gt;</div><div class=\"line\"><span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"utf-8\"</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>react-test<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span>   </div><div class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"test\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></div></pre></td></tr></table></figure>\n<ul>\n<li>在index.js中加入启动和依赖文件</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">'./less/index.less'</span>; <span class=\"comment\">//less样式文件</span></div><div class=\"line\"><span class=\"keyword\">import</span> React <span class=\"keyword\">from</span> <span class=\"string\">'react'</span>; <span class=\"comment\">//react</span></div><div class=\"line\"><span class=\"keyword\">import</span> ReactDOM <span class=\"keyword\">from</span> <span class=\"string\">'react-dom'</span>; <span class=\"comment\">//react-dom</span></div><div class=\"line\"><span class=\"keyword\">import</span> Component <span class=\"keyword\">from</span>  <span class=\"string\">'./components/component.jsx'</span>; <span class=\"comment\">//你的自定义组件</span></div><div class=\"line\"><span class=\"keyword\">import</span> $ <span class=\"keyword\">from</span> <span class=\"string\">'jquery'</span>; <span class=\"comment\">//这里引入jquery</span></div><div class=\"line\"><span class=\"comment\">//将其渲染到页面上id为test的DOM元素内</span></div><div class=\"line\">ReactDOM.render(<span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">Component</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">Component</span>&gt;</span></span>, $(<span class=\"string\">'#test'</span>)[<span class=\"number\">0</span>]);</div></pre></td></tr></table></figure>\n<ul>\n<li>在components/component.jsx中添加组件</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> React <span class=\"keyword\">from</span> <span class=\"string\">'react'</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Component</span> <span class=\"keyword\">extends</span> <span class=\"title\">React</span>.<span class=\"title\">Component</span></span>&#123;</div><div class=\"line\">  render() &#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>Hello React<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span>;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"built_in\">module</span>.exports = Component;</div></pre></td></tr></table></figure>\n<ul>\n<li>启动本地服务以及热部署</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">npm run dev</div></pre></td></tr></table></figure>\n<ul>\n<li>生成文件到build</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">npm run build</div></pre></td></tr></table></figure>\n<p>生成文件要注意把webpack.config.js里的热部署相关去掉哦<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">entry: [</div><div class=\"line\">  <span class=\"string\">'./index.js'</span> <span class=\"comment\">//入口文件</span></div><div class=\"line\">],</div></pre></td></tr></table></figure></p>\n<ul>\n<li>至此，我们初步搭建了个React的项目<br>效果如下：<br><img src=\"http://o905ne85q.bkt.clouddn.com/3867.tmp.png\" alt=\"image\"></li>\n</ul>\n<h2 id=\"结束语\"><a href=\"#结束语\" class=\"headerlink\" title=\"结束语\"></a>结束语</h2><hr>\n<p>自动化搭建可是个高效又酷酷的工程哦，而且在这过程中学到的也很多呢。<br><a href=\"https://github.com/godbasin/godbasin.github.io/tree/blog-codes/react-notes/1-build-react-project\" target=\"_blank\" rel=\"external\">此处查看项目代码（仅包含app部分）</a><br><a href=\"http://o9j9owc7b.bkt.clouddn.com/1-build-react-project/index.html\" target=\"_blank\" rel=\"external\">此处查看页面效果</a></p>\n","excerpt":"<p>最近在学习使用React作为前端的框架，《React使用笔记》系列用于记录过程中的一些使用和解决方法。<br>本文记录使用webpack初步搭建项目的过程。<br>","more":"</p>\n<h2 id=\"初步使用React应用\"><a href=\"#初步使用React应用\" class=\"headerlink\" title=\"初步使用React应用\"></a>初步使用React应用</h2><h3 id=\"直接使用React源码\"><a href=\"#直接使用React源码\" class=\"headerlink\" title=\"直接使用React源码\"></a>直接使用React源码</h3><ul>\n<li>下载<a href=\"https://facebook.github.io/react/downloads.html\">React源代码</a></li>\n<li>引入到页面内</li>\n<li>页面模板</li>\n</ul>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&lt;!DOCTYPE html&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"UTF-8\"</span> /&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>Hello React!<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></div><div class=\"line\">  <span class=\"comment\">&lt;!-- 引入源文件到页面内 --&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"build/react.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"build/react-dom.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"https://cdnjs.cloudflare.com/ajax/libs/babel-core/5.8.34/browser.min.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"example\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">  <span class=\"comment\">&lt;!-- type属性为text/babel --&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/babel\"</span>&gt;</span><span class=\"javascript\"></div><div class=\"line\">      ReactDOM.render(</div><div class=\"line\">        <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>Hello, world!<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span>,</div><div class=\"line\">        <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'example'</span>)</div><div class=\"line\">      );</div><div class=\"line\">    </span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></div></pre></td></tr></table></figure>\n<ul>\n<li>注意<ul>\n<li>在这里type属性为text/babel，原因是React的JSX语法，跟 JavaScript不兼容</li>\n<li>ReactDOM.render是React的最基本方法，用于将模板转为HTML语言，并插入指定的DOM节点</li>\n</ul>\n</li>\n<li>参考<a href=\"https://facebook.github.io/react/docs/getting-started.html\">React官方教程</a></li>\n</ul>\n<h3 id=\"自动化搭建\"><a href=\"#自动化搭建\" class=\"headerlink\" title=\"自动化搭建\"></a>自动化搭建</h3><ul>\n<li>本骚念使用的是Webpack自动搭建，后面附上详细教程</li>\n<li>自动化搭建的好处：<ul>\n<li>1.可快速了解React通过Webpack工程化的过程</li>\n<li>2.通过npm可选择引入需要使用的React模块，像React/React-dom/bootstrap/jQuery/less等可以添加并导入到应用中</li>\n<li>3.自动ES6转换，React对ES6的支持程度很不错，怎么能错过使用的机会呢</li>\n<li>4.自动jsx格式转换，React的特色JSX也必须少不了哒</li>\n<li>5.热部署，文件修改保存之后自动刷新页面</li>\n<li>6.可快速搭建单元测试环境</li>\n</ul>\n</li>\n<li>参考<a href=\"http://www.open-open.com/lib/view/open1462013660085.html\">《手把手教你基于ES6架构自己的React Boilerplate项目》</a></li>\n</ul>\n<h3 id=\"Webpack\"><a href=\"#Webpack\" class=\"headerlink\" title=\"Webpack\"></a>Webpack</h3><ul>\n<li>webpack支持的功能特性：</li>\n</ul>\n<ol>\n<li>支持CommonJs和AMD模块，意思也就是我们基本可以无痛迁移旧项目。</li>\n<li>支持模块加载器和插件机制，可对模块灵活定制。特别是babel-loader，有效支持ES6。</li>\n<li>可以通过配置，打包成多个文件。有效利用浏览器的缓存功能提升性能。</li>\n<li>将样式文件和图片等静态资源也可视为模块进行打包。配合loader加载器，可以支持sass，less等CSS预处理器。</li>\n<li>内置有source map，即使打包在一起依旧方便调试。</li>\n</ol>\n<ul>\n<li><p>loader加载器</p>\n<ul>\n<li>loaders被应用于应用程序的资源文件中，通常用来做转换。</li>\n<li>它们都是函数（运行在nodejs中），将资源文件的源码作为入参，处理完后，返回新的源码文件。</li>\n<li>less/sass loader加载器</li>\n<li>url-loader可对图片资源打包</li>\n<li>babel ES6预处理器</li>\n</ul>\n</li>\n<li><p>webpack安装</p>\n</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//按照webpack依赖</span></div><div class=\"line\">$ npm install webpack -g</div><div class=\"line\"><span class=\"comment\">//html-webpack-plugin插件用来简化创建服务于webpack bundle的HTML文件</span></div><div class=\"line\">$ npm install html-webpack-plugin --save-dev</div><div class=\"line\"><span class=\"comment\">//在本地启动一个web服务器</span></div><div class=\"line\">$ npm install webpack-dev-server --save-dev</div><div class=\"line\"><span class=\"comment\">//安装各个必须的loader</span></div><div class=\"line\">$ npm install style-loader css-loader url-loader babel-loader less-loader file-loader --save-dev</div></pre></td></tr></table></figure>\n<ul>\n<li>参考<a href=\"http://www.cnblogs.com/YikaJ/p/4586703.html\">《webpack前端模块加载工具》</a></li>\n</ul>\n<h2 id=\"目录组织\"><a href=\"#目录组织\" class=\"headerlink\" title=\"目录组织\"></a>目录组织</h2><hr>\n<p>React的目录组织相对自由，但自由通常也会带来不好维护的问题呢，所以建议大家好好管理文件哦。</p>\n<h3 id=\"本骚年目录组织\"><a href=\"#本骚年目录组织\" class=\"headerlink\" title=\"本骚年目录组织\"></a>本骚年目录组织</h3><p>如下：<br><img src=\"http://o905ne85q.bkt.clouddn.com/C315.tmp.png\" alt=\"image\"></p>\n<ul>\n<li>build用于存放最终生成的代码</li>\n<li>components用于存放React的组件</li>\n<li>images/less不用说当然是用来存放图片和样式文件的</li>\n<li>node_modules大家都知道是npm的依赖文件</li>\n<li>templates里面存放页面模板，index.ejs则是主页的模板</li>\n<li>index.js是启动入口啦</li>\n<li>package.json是管理npm依赖的文件</li>\n<li>webpack.config.js则是webpack的配置项</li>\n</ul>\n<h3 id=\"webpack-config-js\"><a href=\"#webpack-config-js\" class=\"headerlink\" title=\"webpack.config.js\"></a>webpack.config.js</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> webpack = <span class=\"built_in\">require</span>(<span class=\"string\">'webpack'</span>); <span class=\"comment\">//引入node的webpack库</span></div><div class=\"line\"><span class=\"keyword\">var</span> path = <span class=\"built_in\">require</span>(<span class=\"string\">'path'</span>); <span class=\"comment\">//引入node的path库</span></div><div class=\"line\"><span class=\"keyword\">var</span> HtmlwebpackPlugin = <span class=\"built_in\">require</span>(<span class=\"string\">'html-webpack-plugin'</span>); <span class=\"comment\">//引入node的html-webpack-plugin库</span></div><div class=\"line\"><span class=\"keyword\">var</span> config = &#123;</div><div class=\"line\">  <span class=\"comment\">//页面入口文件配置</span></div><div class=\"line\">  entry: [</div><div class=\"line\">    <span class=\"string\">'webpack/hot/dev-server'</span>, <span class=\"comment\">//热部署</span></div><div class=\"line\">    <span class=\"string\">'webpack-dev-server/client?http://localhost:3000'</span>, <span class=\"comment\">//本地服务端口</span></div><div class=\"line\">    <span class=\"string\">'./index.js'</span> <span class=\"comment\">//入口文件</span></div><div class=\"line\">  ],</div><div class=\"line\">  <span class=\"comment\">//入口文件输出配置</span></div><div class=\"line\">  output: &#123;</div><div class=\"line\">    <span class=\"attr\">path</span>: path.resolve(__dirname, <span class=\"string\">'build'</span>), <span class=\"comment\">// 指定编译后的代码位置为 build</span></div><div class=\"line\">    filename: <span class=\"string\">'bundle.js'</span> <span class=\"comment\">//打包JavaScript文件以及依赖(就是那些第三方的库)文件</span></div><div class=\"line\">  &#125;,</div><div class=\"line\">  <span class=\"attr\">module</span>: &#123;</div><div class=\"line\">    <span class=\"comment\">//加载器配置</span></div><div class=\"line\">    loaders: [</div><div class=\"line\">      <span class=\"comment\">//.jsx 文件使用babel-loader来编译处理</span></div><div class=\"line\">      &#123;<span class=\"attr\">test</span>: <span class=\"regexp\">/\\.jsx?$/</span>, <span class=\"attr\">loader</span>: <span class=\"string\">'babel'</span>, <span class=\"attr\">exclude</span>: <span class=\"regexp\">/node_modules/</span>, <span class=\"attr\">query</span>: &#123;<span class=\"attr\">presets</span>: [<span class=\"string\">'react'</span>, <span class=\"string\">'es2015'</span>]&#125;&#125;,</div><div class=\"line\">      <span class=\"comment\">//.less 文件使用 style-loader/css-loader/less-loader 来处理</span></div><div class=\"line\">      &#123;<span class=\"attr\">test</span>: <span class=\"regexp\">/\\.less$/</span>, <span class=\"attr\">loaders</span>: [<span class=\"string\">'style'</span>, <span class=\"string\">'css'</span>, <span class=\"string\">'less'</span>], <span class=\"attr\">include</span>: path.resolve(__dirname, <span class=\"string\">'less'</span>)&#125;,</div><div class=\"line\">      <span class=\"comment\">//.jsx 文件使用babel-loader来编译处理</span></div><div class=\"line\">      &#123;<span class=\"attr\">test</span>: <span class=\"regexp\">/\\.js$/</span>, <span class=\"attr\">loaders</span>: [<span class=\"string\">'babel'</span>], <span class=\"attr\">exclude</span>: <span class=\"regexp\">/node_modules/</span> &#125;,</div><div class=\"line\">      <span class=\"comment\">//图片文件使用 url-loader 来处理，小于8kb的直接转为base64</span></div><div class=\"line\">      &#123;<span class=\"attr\">test</span>: <span class=\"regexp\">/\\.(jpg|png)$/</span>, <span class=\"attr\">loader</span>: <span class=\"string\">\"url?limit=8192\"</span>&#125;</div><div class=\"line\">    ]</div><div class=\"line\">  &#125;,</div><div class=\"line\">  <span class=\"comment\">//插件项</span></div><div class=\"line\">  plugins: [</div><div class=\"line\">    <span class=\"keyword\">new</span> HtmlwebpackPlugin(&#123;</div><div class=\"line\">      <span class=\"attr\">title</span>: <span class=\"string\">'React'</span>,</div><div class=\"line\">      <span class=\"attr\">template</span>: path.resolve(__dirname, <span class=\"string\">'templates/index.ejs'</span>),</div><div class=\"line\">      <span class=\"attr\">inject</span>: <span class=\"string\">'body'</span></div><div class=\"line\">    &#125;),</div><div class=\"line\">  ],</div><div class=\"line\">&#125;;</div><div class=\"line\"><span class=\"built_in\">module</span>.exports = config;</div></pre></td></tr></table></figure>\n<h3 id=\"package-json\"><a href=\"#package-json\" class=\"headerlink\" title=\"package.json\"></a>package.json</h3><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div></pre></td><td class=\"code\"><pre><div class=\"line\">\"devDependencies\": &#123;</div><div class=\"line\">  \"babel-core\": \"^6.10.4\",</div><div class=\"line\">  \"babel-loader\": \"^6.2.4\",</div><div class=\"line\">  \"babel-preset-es2015\": \"^6.9.0\",</div><div class=\"line\">  \"babel-preset-react\": \"^6.11.1\",</div><div class=\"line\">  \"bootstrap\": \"^3.3.6\",</div><div class=\"line\">  \"css-loader\": \"^0.23.1\",</div><div class=\"line\">  \"file-loader\": \"^0.9.0\",</div><div class=\"line\">  \"html-webpack-plugin\": \"^2.21.0\",</div><div class=\"line\">  \"jquery\": \"^3.0.0\",</div><div class=\"line\">  \"less\": \"^2.7.1\",</div><div class=\"line\">  \"less-loader\": \"^2.2.3\",</div><div class=\"line\">  \"moment\": \"^2.13.0\",</div><div class=\"line\">  \"npm-install-webpack-plugin\": \"^4.0.3\",</div><div class=\"line\">  \"sass-loader\": \"^4.0.0\",</div><div class=\"line\">  \"style-loader\": \"^0.13.1\",</div><div class=\"line\">  \"url-loader\": \"^0.5.7\",</div><div class=\"line\">  \"webpack\": \"^1.13.1\",</div><div class=\"line\">  \"webpack-dev-server\": \"^1.14.1\"</div><div class=\"line\">&#125;,</div><div class=\"line\">\"dependencies\": &#123;</div><div class=\"line\">  \"react\": \"^15.1.0\",</div><div class=\"line\">  \"react-dom\": \"^15.1.0\",</div><div class=\"line\">  \"webpack\": \"^1.13.1\"</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"基本搭建项目\"><a href=\"#基本搭建项目\" class=\"headerlink\" title=\"基本搭建项目\"></a>基本搭建项目</h3><ul>\n<li>在templates/index.ejs中添加初始模板</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;!DOCTYPE html&gt;</div><div class=\"line\"><span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"utf-8\"</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>react-test<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span>   </div><div class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"test\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span></div></pre></td></tr></table></figure>\n<ul>\n<li>在index.js中加入启动和依赖文件</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">'./less/index.less'</span>; <span class=\"comment\">//less样式文件</span></div><div class=\"line\"><span class=\"keyword\">import</span> React <span class=\"keyword\">from</span> <span class=\"string\">'react'</span>; <span class=\"comment\">//react</span></div><div class=\"line\"><span class=\"keyword\">import</span> ReactDOM <span class=\"keyword\">from</span> <span class=\"string\">'react-dom'</span>; <span class=\"comment\">//react-dom</span></div><div class=\"line\"><span class=\"keyword\">import</span> Component <span class=\"keyword\">from</span>  <span class=\"string\">'./components/component.jsx'</span>; <span class=\"comment\">//你的自定义组件</span></div><div class=\"line\"><span class=\"keyword\">import</span> $ <span class=\"keyword\">from</span> <span class=\"string\">'jquery'</span>; <span class=\"comment\">//这里引入jquery</span></div><div class=\"line\"><span class=\"comment\">//将其渲染到页面上id为test的DOM元素内</span></div><div class=\"line\">ReactDOM.render(<span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">Component</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">Component</span>&gt;</span></span>, $(<span class=\"string\">'#test'</span>)[<span class=\"number\">0</span>]);</div></pre></td></tr></table></figure>\n<ul>\n<li>在components/component.jsx中添加组件</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> React <span class=\"keyword\">from</span> <span class=\"string\">'react'</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Component</span> <span class=\"keyword\">extends</span> <span class=\"title\">React</span>.<span class=\"title\">Component</span></span>&#123;</div><div class=\"line\">  render() &#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>Hello React<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span>;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"built_in\">module</span>.exports = Component;</div></pre></td></tr></table></figure>\n<ul>\n<li>启动本地服务以及热部署</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">npm run dev</div></pre></td></tr></table></figure>\n<ul>\n<li>生成文件到build</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">npm run build</div></pre></td></tr></table></figure>\n<p>生成文件要注意把webpack.config.js里的热部署相关去掉哦<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">entry: [</div><div class=\"line\">  <span class=\"string\">'./index.js'</span> <span class=\"comment\">//入口文件</span></div><div class=\"line\">],</div></pre></td></tr></table></figure></p>\n<ul>\n<li>至此，我们初步搭建了个React的项目<br>效果如下：<br><img src=\"http://o905ne85q.bkt.clouddn.com/3867.tmp.png\" alt=\"image\"></li>\n</ul>\n<h2 id=\"结束语\"><a href=\"#结束语\" class=\"headerlink\" title=\"结束语\"></a>结束语</h2><hr>\n<p>自动化搭建可是个高效又酷酷的工程哦，而且在这过程中学到的也很多呢。<br><a href=\"https://github.com/godbasin/godbasin.github.io/tree/blog-codes/react-notes/1-build-react-project\">此处查看项目代码（仅包含app部分）</a><br><a href=\"http://o9j9owc7b.bkt.clouddn.com/1-build-react-project/index.html\">此处查看页面效果</a></p>"},{"title":"React使用笔记5--理解jsx以及制作index页面","date":"2016-08-20T10:49:32.000Z","_content":"最近在学习使用React作为前端的框架，《React使用笔记》系列用于记录过程中的一些使用和解决方法。\n本文简单介绍jsx，以及记录制作首页的过程。\n<!--more-->\n## 理解jsx\n-----\n### 什么是JSX\nJSX即JavaScript XML，是一个看起来很像XML的JavaScript语法扩展。\nJSX能定义简洁且我们熟知的包含属性的树状结构语法。\n\n### 使用JSX\nJSX把类XML的语法转成纯粹JavaScript，XML元素、属性和子节点被转换成React.createElement的参数。\n- JSX标签\nReact的JSX里约定分别使用首字母大、小写来区分本地组件的类和HTML标签。\n- JavaScript表达式\n  - 表达式用{}包起来，不要加引号，加引号就会被当成字符串。\n  - JSX是HTML和JavaScript混写的语法，当遇到<，JSX就当HTML解析，遇到{就当JavaScript解析。\n  - 同样地，JavaScript表达式可用于描述子结点。\n\n### JSX与HTML区别\n- HTML实体\n如果想在JSX表达式中显示HTML实体，可以会遇到二次转义的问题，因为React默认会转义所有字符串，为了防止各种XSS攻击。\n  - 1.安全的做法是先找到实体的Unicode编号 ，然后在JavaScript字符串里使用。\n  - 2.可以在数组里混合使用字符串和JSX元素。\n  - 3.万不得已，可以直接使用原始HTML。\n- HTML属性\n一些标识符像class和for不建议作为XML属性名。作为替代，React DOM使用className和htmlFor来做对应的属性。\n- 内联样式\n在React中写行内样式时，要使用双大括号，不能采用引号的书写方式\n- 自定义HTML属性\n如果往原生HTML元素里传入HTML规范里不存在的属性，React不会显示它们。如果需要使用自定义属性，要加data-前缀。\n- 注释\nJSX里添加注释很容易，它们只是JS表达式而已。你只需要在一个标签的子节点内(非最外层)小心地用单大括号包围要注释的部分。\n- 事件绑定\n在JSX中事件属性都是以驼峰命名的方式，HTML中的内嵌事件的编写方式在JSX语法中是无效的。\n\n### 参考\n[《深入理解JSX》](http://reactjs.cn/react/docs/jsx-in-depth.html)\n\n## JSX的if...else...\n-----\n你没法在JSX中使用if-else语句，因为JSX只是函数调用和对象创建的语法糖。\n这里我们结合首页来说明一些使用方法吧。\n\n### 使用三元表达式\n页面中我们使用一个loading的state(状态来表示当前查看的模块)。现在我们结合hidden样式来进行界面的显示控制吧。\n- hidden样式\n\n``` css\n.hidden { display:none; }\n```\n- 显示控制\n\n``` javascript\n<div className={loading == 'sethead' ? '' : 'hidden'}>这里是设置头像页面</div>\n<div className={loading == 'setinfo' ? '' : 'hidden'}>这里是修改资料页面</div>\n<div className={loading == 'other' ? '' : 'hidden'}>这里是其他页面</div>\n```\n\n### JS代码中使用if表达式\n当三元操作表达式不够健壮，你也可以使用if语句来决定应该渲染那个组件。\n这里我们使用两层的map遍历菜单，需要判断是否有子菜单，然后加载。\n``` javascript\nif(menu.menus){ //判断是否有子菜单\n\tmenus = menu.menus.map(function(item, j){\n\t\treturn (<ListGroupItem} key={j}>{ item.text }</ListGroupItem>);\n\t});\n\tmenusgroup = (\n\t\t<ListGroup>\n\t\t{ menus }\n\t\t</ListGroup>\n\t);  \t\t\t\n}\n```\n\n## 制作index页面\n-----\n页面结构如下：\n![image](http://o905ne85q.bkt.clouddn.com/F3A2.tmp.png)\n\n### 添加props属性值\n菜单内容等使用pros属性保存（不会发生改变）。\n``` javascript\ngetDefaultProps : function () {\n\tvar that = this;\n\treturn {//设置默认属性\n\t\tasidemenus: [{\n\t\t\ttitle: '基本资料', //title用于储存该菜单显示名称\n\t\t\tclick: 'init', //click用于储存该菜单对应点击时loading的状态值\n\t\t\tmenus: [{\n\t\t\t\ttext: '名字',\n\t\t\t\tclick: 'name',\n\t\t\t}, {\n\t\t\t\ttext: '邮箱',\n\t\t\t\tclick: 'email',\n\t\t\t}, {\n\t\t\t\ttext: 'github',\n\t\t\t\tclick: 'github',\n\t\t\t}, ]\n\t\t}, {\n\t\t\ttitle: '设置头像',\n\t\t\tclick: 'sethead',\n\t\t}, {\n\t\t\ttitle: '修改资料',\n\t\t\tclick: 'setinfo',\n\t\t}, {\n\t\t\ttitle: '其他',\n\t\t\tclick: 'other',\n\t\t}],\n\t};\n},\n```\n\n### 添加state值\nloading状态使用state状态保存（会发生改变）。\n``` javascript\ngetInitialState: function() {\n\treturn {loading: 'init'};\n},\n```\n\n### 添加改变状态事件\n创建事件用来改变loading状态。\n``` javascript\nchangeState: function(state){\n\tthis.setState({loading: state});\n},\n```\n\n### map遍历数据\n上面也有提到map的使用。\n在这里有个需要注意的地方就是，遍历的时候需要给元素设置key，下面介绍一下key。\n- key\n给组件设置独一无二的键，并确保它在一个渲染周期中保持一致，是的React能够更智能地决定应该重用一个组件，还是销毁并重新创建一个组件，进而提升渲染性能。\n``` javascript\nmenus = menu.menus.map(function(item, j){\n\treturn (<ListGroupItem} key={j}>{ item.text }</ListGroupItem>);\n});\n```\n\n### 添加点击事件onClick\n- 事件处理\nReact里只需把事件处理器（event handler）以骆峰命名（camelCased）形式当作组件的props传入即可，就像使用普通HTML那样。\n- 自动绑定\nReact中，所有方法被自动绑定到了它的组件实例上。React还缓存这些绑定方法，所以CPU和内存都是非常高效。\n- 事件代理\n  - React实际并没有把事件处理器绑定到节点本身。\n  - 当React启动的时候，它在最外层使用唯一一个事件监听器处理所有事件。\n  - 当组件被加载和卸载时，只是在内部映射里添加或删除事件处理器。\n  - 当事件触发，React根据映射来决定如何分发。当映射里处理器时，会当作空操作处理。\n- 虚拟事件对象\n  - 事件处理器将会传入虚拟事件对象的实例，一个对浏览器本地事件的跨浏览器封装。\n  - 它有和浏览器本地事件相同的属性和方法，包括 stopPropagation()和preventDefault()，但是没有浏览器兼容问题。\n  - 要在捕获阶段触发某个事件处理器，在事件名字后面追加Capture字符串\n\n介绍完了React的事件处理相关，我们这里提一个在map里面使用事件绑定需要注意的地方。\n当使用map遍历时，map函数里面的this对象不再指向该组件，此时我们只需要在函数后面添加.bind(this)就好。\n\n需要传递参数时，可以在事件的后面使用bind进行传参，然后直接在事件函数中获取就好啦。\n- bind\n  - bind与call很相似，例如，可接受的参数都分为两部分，且第一个参数都是作为执行时函数上下文中的this的对象。\n  - 不同点有两个：\n  - 1.bind的返回值是函数。\n  - 2.call是把第二个及以后的参数作为函数方法的实参传进去，而bind虽说也是获取第二个及以后的参数用于之后方法的执行，但是返回的函数中传入的实参则是在bind中传入参数的基础上往后排的。\n\n``` javascript\nmenus = menu.menus.map(function(item, j){\n\treturn (<ListGroupItem} key={j} onClick={this.changeState.bind(null,item.click)>{ item.text }</ListGroupItem>);\n}.bind(this));\n```\n\n### 组件代码\n这里贴一下我们组件的代码，有点长哦。\n``` javascript\nimport React from 'react';\nimport { Panel, PanelGroup, ListGroup, ListGroupItem } from 'react-bootstrap';\nimport Header from  './header.jsx'; //login自定义组件\n\nconst Index = React.createClass({\n\tgetDefaultProps : function () {\n\t   return {//设置默认属性\n\t\t\tasidemenus: '', //这里就省略啦，大家可以看前面的菜单数据\n\t\t};\n\t},\n\tchangeState: function(state){\n\t\tthis.setState({loading: state});\n\t},\n\tgetInitialState: function() {\n\t\treturn {loading: 'init'};\n\t},\n  render() {\n  \tvar loading = this.state.loading;\n  \tvar that = this;\n  \tvar changeState = this.changeState;\n  \tvar asidemenus = this.props.asidemenus.map(function(menu, i){\n  \t\tvar menus, menusgroup; \t\t\n  \t\tif(menu.menus){\n  \t\t\tmenus = menu.menus.map(function(item, j){\n  \t\t\t\treturn (<ListGroupItem onClick={this.changeState.bind(null,item.click)} key={j}>{ item.text }</ListGroupItem>);\n  \t\t\t}.bind(this));\n  \t\t\tmenusgroup = (\n  \t\t\t\t<ListGroup>\n  \t\t\t\t\t{ menus }\n  \t\t\t\t</ListGroup>\n  \t\t\t);  \t\t\t\n  \t\t}\n  \t\tvar menuheader = (\n  \t\t\t<ul class=\"panel-title \">\n\t\t\t\t<li onClick={this.changeState.bind(null,menu.click)}>\n\t\t\t\t\t\t{ menu.title }\n\t\t\t\t</li>\n\t\t\t</ul>\n  \t\t);\n  \t\treturn (\n  \t\t\t<Panel collapsible defaultExpanded className=\"list-group\" key={i} header={menuheader}>\n\t\t\t\t<div id=\"collapse{i}\" className=\"panel-collapse collapse in\">\n\t\t\t\t\t{ menusgroup }\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t</div>\n\t\t\t</Panel>\n  \t\t);\n  \t}.bind(this));\n    return (\n    \t<div className=\"container-fluid row\">\n    \t\t<Header active=\"index\"></Header>\n\t\t\t\t<aside className=\"col-md-2 col-md-offset-1\">\n\t\t\t\t\t<PanelGroup id=\"accordion\">\n\t\t\t\t\t\t{\tasidemenus }\t\t\t\t\t\t\n\t\t\t\t\t</PanelGroup>\n\t\t\t\t</aside>\n\t\t\t\t<article className=\"col-md-7\">\n\t\t\t\t\t<section className=\"index-content\">\n\t\t\t\t\t\t<p className={loading == 'init' || loading == 'name' ? '' : 'hidden'}>昵称：被删</p>\n\t\t\t\t\t\t<p className={loading == 'init' || loading == 'email' ? '' : 'hidden'}>邮箱：wangbeishan@163.com</p>\n\t\t\t\t\t\t<p className={loading == 'init' || loading == 'github' ? '' : 'hidden'}>github: <a href=\"https://github.com/godbasin\">github.com/godbasin</a></p>\n\t\t\t\t\t\t<div className={loading == 'sethead' ? '' : 'hidden'}>这里是设置头像页面</div>\n\t\t\t\t\t\t<div className={loading == 'setinfo' ? '' : 'hidden'}>这里是修改资料页面</div>\n\t\t\t\t\t\t<div className={loading == 'other' ? '' : 'hidden'}>这里是其他页面</div>\n\t\t\t\t\t</section>\n\t\t\t\t</article>\n\t\t\t</div>\n\t\t);\n\t}\n});\n\nmodule.exports = Index;\n```\n\n## 结束语\n-----\n其实从AngularJS转React的时候，有很多模板引擎的使用方式不一致了，还是很不习惯的呢。相对Angular来说，React似乎教程更少呢，所以本骚年有些时候遇到bug也不是很懂，大家一起来探寻吧。\n[此处查看项目代码（仅包含app部分）](https://github.com/godbasin/godbasin.github.io/tree/blog-codes/react-notes/5-fullfill-index)\n[此处查看页面效果](http://o9j9owc7b.bkt.clouddn.com/5-fullfill-index/index.html?#/index)","source":"_posts/react-notes-5-fullfill-index.md","raw":"---\ntitle: React使用笔记5--理解jsx以及制作index页面\ndate: 2016-08-20 18:49:32\ncategories: react沙拉\ntags: 笔记\n---\n最近在学习使用React作为前端的框架，《React使用笔记》系列用于记录过程中的一些使用和解决方法。\n本文简单介绍jsx，以及记录制作首页的过程。\n<!--more-->\n## 理解jsx\n-----\n### 什么是JSX\nJSX即JavaScript XML，是一个看起来很像XML的JavaScript语法扩展。\nJSX能定义简洁且我们熟知的包含属性的树状结构语法。\n\n### 使用JSX\nJSX把类XML的语法转成纯粹JavaScript，XML元素、属性和子节点被转换成React.createElement的参数。\n- JSX标签\nReact的JSX里约定分别使用首字母大、小写来区分本地组件的类和HTML标签。\n- JavaScript表达式\n  - 表达式用{}包起来，不要加引号，加引号就会被当成字符串。\n  - JSX是HTML和JavaScript混写的语法，当遇到<，JSX就当HTML解析，遇到{就当JavaScript解析。\n  - 同样地，JavaScript表达式可用于描述子结点。\n\n### JSX与HTML区别\n- HTML实体\n如果想在JSX表达式中显示HTML实体，可以会遇到二次转义的问题，因为React默认会转义所有字符串，为了防止各种XSS攻击。\n  - 1.安全的做法是先找到实体的Unicode编号 ，然后在JavaScript字符串里使用。\n  - 2.可以在数组里混合使用字符串和JSX元素。\n  - 3.万不得已，可以直接使用原始HTML。\n- HTML属性\n一些标识符像class和for不建议作为XML属性名。作为替代，React DOM使用className和htmlFor来做对应的属性。\n- 内联样式\n在React中写行内样式时，要使用双大括号，不能采用引号的书写方式\n- 自定义HTML属性\n如果往原生HTML元素里传入HTML规范里不存在的属性，React不会显示它们。如果需要使用自定义属性，要加data-前缀。\n- 注释\nJSX里添加注释很容易，它们只是JS表达式而已。你只需要在一个标签的子节点内(非最外层)小心地用单大括号包围要注释的部分。\n- 事件绑定\n在JSX中事件属性都是以驼峰命名的方式，HTML中的内嵌事件的编写方式在JSX语法中是无效的。\n\n### 参考\n[《深入理解JSX》](http://reactjs.cn/react/docs/jsx-in-depth.html)\n\n## JSX的if...else...\n-----\n你没法在JSX中使用if-else语句，因为JSX只是函数调用和对象创建的语法糖。\n这里我们结合首页来说明一些使用方法吧。\n\n### 使用三元表达式\n页面中我们使用一个loading的state(状态来表示当前查看的模块)。现在我们结合hidden样式来进行界面的显示控制吧。\n- hidden样式\n\n``` css\n.hidden { display:none; }\n```\n- 显示控制\n\n``` javascript\n<div className={loading == 'sethead' ? '' : 'hidden'}>这里是设置头像页面</div>\n<div className={loading == 'setinfo' ? '' : 'hidden'}>这里是修改资料页面</div>\n<div className={loading == 'other' ? '' : 'hidden'}>这里是其他页面</div>\n```\n\n### JS代码中使用if表达式\n当三元操作表达式不够健壮，你也可以使用if语句来决定应该渲染那个组件。\n这里我们使用两层的map遍历菜单，需要判断是否有子菜单，然后加载。\n``` javascript\nif(menu.menus){ //判断是否有子菜单\n\tmenus = menu.menus.map(function(item, j){\n\t\treturn (<ListGroupItem} key={j}>{ item.text }</ListGroupItem>);\n\t});\n\tmenusgroup = (\n\t\t<ListGroup>\n\t\t{ menus }\n\t\t</ListGroup>\n\t);  \t\t\t\n}\n```\n\n## 制作index页面\n-----\n页面结构如下：\n![image](http://o905ne85q.bkt.clouddn.com/F3A2.tmp.png)\n\n### 添加props属性值\n菜单内容等使用pros属性保存（不会发生改变）。\n``` javascript\ngetDefaultProps : function () {\n\tvar that = this;\n\treturn {//设置默认属性\n\t\tasidemenus: [{\n\t\t\ttitle: '基本资料', //title用于储存该菜单显示名称\n\t\t\tclick: 'init', //click用于储存该菜单对应点击时loading的状态值\n\t\t\tmenus: [{\n\t\t\t\ttext: '名字',\n\t\t\t\tclick: 'name',\n\t\t\t}, {\n\t\t\t\ttext: '邮箱',\n\t\t\t\tclick: 'email',\n\t\t\t}, {\n\t\t\t\ttext: 'github',\n\t\t\t\tclick: 'github',\n\t\t\t}, ]\n\t\t}, {\n\t\t\ttitle: '设置头像',\n\t\t\tclick: 'sethead',\n\t\t}, {\n\t\t\ttitle: '修改资料',\n\t\t\tclick: 'setinfo',\n\t\t}, {\n\t\t\ttitle: '其他',\n\t\t\tclick: 'other',\n\t\t}],\n\t};\n},\n```\n\n### 添加state值\nloading状态使用state状态保存（会发生改变）。\n``` javascript\ngetInitialState: function() {\n\treturn {loading: 'init'};\n},\n```\n\n### 添加改变状态事件\n创建事件用来改变loading状态。\n``` javascript\nchangeState: function(state){\n\tthis.setState({loading: state});\n},\n```\n\n### map遍历数据\n上面也有提到map的使用。\n在这里有个需要注意的地方就是，遍历的时候需要给元素设置key，下面介绍一下key。\n- key\n给组件设置独一无二的键，并确保它在一个渲染周期中保持一致，是的React能够更智能地决定应该重用一个组件，还是销毁并重新创建一个组件，进而提升渲染性能。\n``` javascript\nmenus = menu.menus.map(function(item, j){\n\treturn (<ListGroupItem} key={j}>{ item.text }</ListGroupItem>);\n});\n```\n\n### 添加点击事件onClick\n- 事件处理\nReact里只需把事件处理器（event handler）以骆峰命名（camelCased）形式当作组件的props传入即可，就像使用普通HTML那样。\n- 自动绑定\nReact中，所有方法被自动绑定到了它的组件实例上。React还缓存这些绑定方法，所以CPU和内存都是非常高效。\n- 事件代理\n  - React实际并没有把事件处理器绑定到节点本身。\n  - 当React启动的时候，它在最外层使用唯一一个事件监听器处理所有事件。\n  - 当组件被加载和卸载时，只是在内部映射里添加或删除事件处理器。\n  - 当事件触发，React根据映射来决定如何分发。当映射里处理器时，会当作空操作处理。\n- 虚拟事件对象\n  - 事件处理器将会传入虚拟事件对象的实例，一个对浏览器本地事件的跨浏览器封装。\n  - 它有和浏览器本地事件相同的属性和方法，包括 stopPropagation()和preventDefault()，但是没有浏览器兼容问题。\n  - 要在捕获阶段触发某个事件处理器，在事件名字后面追加Capture字符串\n\n介绍完了React的事件处理相关，我们这里提一个在map里面使用事件绑定需要注意的地方。\n当使用map遍历时，map函数里面的this对象不再指向该组件，此时我们只需要在函数后面添加.bind(this)就好。\n\n需要传递参数时，可以在事件的后面使用bind进行传参，然后直接在事件函数中获取就好啦。\n- bind\n  - bind与call很相似，例如，可接受的参数都分为两部分，且第一个参数都是作为执行时函数上下文中的this的对象。\n  - 不同点有两个：\n  - 1.bind的返回值是函数。\n  - 2.call是把第二个及以后的参数作为函数方法的实参传进去，而bind虽说也是获取第二个及以后的参数用于之后方法的执行，但是返回的函数中传入的实参则是在bind中传入参数的基础上往后排的。\n\n``` javascript\nmenus = menu.menus.map(function(item, j){\n\treturn (<ListGroupItem} key={j} onClick={this.changeState.bind(null,item.click)>{ item.text }</ListGroupItem>);\n}.bind(this));\n```\n\n### 组件代码\n这里贴一下我们组件的代码，有点长哦。\n``` javascript\nimport React from 'react';\nimport { Panel, PanelGroup, ListGroup, ListGroupItem } from 'react-bootstrap';\nimport Header from  './header.jsx'; //login自定义组件\n\nconst Index = React.createClass({\n\tgetDefaultProps : function () {\n\t   return {//设置默认属性\n\t\t\tasidemenus: '', //这里就省略啦，大家可以看前面的菜单数据\n\t\t};\n\t},\n\tchangeState: function(state){\n\t\tthis.setState({loading: state});\n\t},\n\tgetInitialState: function() {\n\t\treturn {loading: 'init'};\n\t},\n  render() {\n  \tvar loading = this.state.loading;\n  \tvar that = this;\n  \tvar changeState = this.changeState;\n  \tvar asidemenus = this.props.asidemenus.map(function(menu, i){\n  \t\tvar menus, menusgroup; \t\t\n  \t\tif(menu.menus){\n  \t\t\tmenus = menu.menus.map(function(item, j){\n  \t\t\t\treturn (<ListGroupItem onClick={this.changeState.bind(null,item.click)} key={j}>{ item.text }</ListGroupItem>);\n  \t\t\t}.bind(this));\n  \t\t\tmenusgroup = (\n  \t\t\t\t<ListGroup>\n  \t\t\t\t\t{ menus }\n  \t\t\t\t</ListGroup>\n  \t\t\t);  \t\t\t\n  \t\t}\n  \t\tvar menuheader = (\n  \t\t\t<ul class=\"panel-title \">\n\t\t\t\t<li onClick={this.changeState.bind(null,menu.click)}>\n\t\t\t\t\t\t{ menu.title }\n\t\t\t\t</li>\n\t\t\t</ul>\n  \t\t);\n  \t\treturn (\n  \t\t\t<Panel collapsible defaultExpanded className=\"list-group\" key={i} header={menuheader}>\n\t\t\t\t<div id=\"collapse{i}\" className=\"panel-collapse collapse in\">\n\t\t\t\t\t{ menusgroup }\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t</div>\n\t\t\t</Panel>\n  \t\t);\n  \t}.bind(this));\n    return (\n    \t<div className=\"container-fluid row\">\n    \t\t<Header active=\"index\"></Header>\n\t\t\t\t<aside className=\"col-md-2 col-md-offset-1\">\n\t\t\t\t\t<PanelGroup id=\"accordion\">\n\t\t\t\t\t\t{\tasidemenus }\t\t\t\t\t\t\n\t\t\t\t\t</PanelGroup>\n\t\t\t\t</aside>\n\t\t\t\t<article className=\"col-md-7\">\n\t\t\t\t\t<section className=\"index-content\">\n\t\t\t\t\t\t<p className={loading == 'init' || loading == 'name' ? '' : 'hidden'}>昵称：被删</p>\n\t\t\t\t\t\t<p className={loading == 'init' || loading == 'email' ? '' : 'hidden'}>邮箱：wangbeishan@163.com</p>\n\t\t\t\t\t\t<p className={loading == 'init' || loading == 'github' ? '' : 'hidden'}>github: <a href=\"https://github.com/godbasin\">github.com/godbasin</a></p>\n\t\t\t\t\t\t<div className={loading == 'sethead' ? '' : 'hidden'}>这里是设置头像页面</div>\n\t\t\t\t\t\t<div className={loading == 'setinfo' ? '' : 'hidden'}>这里是修改资料页面</div>\n\t\t\t\t\t\t<div className={loading == 'other' ? '' : 'hidden'}>这里是其他页面</div>\n\t\t\t\t\t</section>\n\t\t\t\t</article>\n\t\t\t</div>\n\t\t);\n\t}\n});\n\nmodule.exports = Index;\n```\n\n## 结束语\n-----\n其实从AngularJS转React的时候，有很多模板引擎的使用方式不一致了，还是很不习惯的呢。相对Angular来说，React似乎教程更少呢，所以本骚年有些时候遇到bug也不是很懂，大家一起来探寻吧。\n[此处查看项目代码（仅包含app部分）](https://github.com/godbasin/godbasin.github.io/tree/blog-codes/react-notes/5-fullfill-index)\n[此处查看页面效果](http://o9j9owc7b.bkt.clouddn.com/5-fullfill-index/index.html?#/index)","slug":"react-notes-5-fullfill-index","published":1,"updated":"2016-08-20T18:45:05.881Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cix45huho0043xotud2s9my0q","content":"<p>最近在学习使用React作为前端的框架，《React使用笔记》系列用于记录过程中的一些使用和解决方法。<br>本文简单介绍jsx，以及记录制作首页的过程。<br><a id=\"more\"></a></p>\n<h2 id=\"理解jsx\"><a href=\"#理解jsx\" class=\"headerlink\" title=\"理解jsx\"></a>理解jsx</h2><hr>\n<h3 id=\"什么是JSX\"><a href=\"#什么是JSX\" class=\"headerlink\" title=\"什么是JSX\"></a>什么是JSX</h3><p>JSX即JavaScript XML，是一个看起来很像XML的JavaScript语法扩展。<br>JSX能定义简洁且我们熟知的包含属性的树状结构语法。</p>\n<h3 id=\"使用JSX\"><a href=\"#使用JSX\" class=\"headerlink\" title=\"使用JSX\"></a>使用JSX</h3><p>JSX把类XML的语法转成纯粹JavaScript，XML元素、属性和子节点被转换成React.createElement的参数。</p>\n<ul>\n<li>JSX标签<br>React的JSX里约定分别使用首字母大、小写来区分本地组件的类和HTML标签。</li>\n<li>JavaScript表达式<ul>\n<li>表达式用{}包起来，不要加引号，加引号就会被当成字符串。</li>\n<li>JSX是HTML和JavaScript混写的语法，当遇到&lt;，JSX就当HTML解析，遇到{就当JavaScript解析。</li>\n<li>同样地，JavaScript表达式可用于描述子结点。</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"JSX与HTML区别\"><a href=\"#JSX与HTML区别\" class=\"headerlink\" title=\"JSX与HTML区别\"></a>JSX与HTML区别</h3><ul>\n<li>HTML实体<br>如果想在JSX表达式中显示HTML实体，可以会遇到二次转义的问题，因为React默认会转义所有字符串，为了防止各种XSS攻击。<ul>\n<li>1.安全的做法是先找到实体的Unicode编号 ，然后在JavaScript字符串里使用。</li>\n<li>2.可以在数组里混合使用字符串和JSX元素。</li>\n<li>3.万不得已，可以直接使用原始HTML。</li>\n</ul>\n</li>\n<li>HTML属性<br>一些标识符像class和for不建议作为XML属性名。作为替代，React DOM使用className和htmlFor来做对应的属性。</li>\n<li>内联样式<br>在React中写行内样式时，要使用双大括号，不能采用引号的书写方式</li>\n<li>自定义HTML属性<br>如果往原生HTML元素里传入HTML规范里不存在的属性，React不会显示它们。如果需要使用自定义属性，要加data-前缀。</li>\n<li>注释<br>JSX里添加注释很容易，它们只是JS表达式而已。你只需要在一个标签的子节点内(非最外层)小心地用单大括号包围要注释的部分。</li>\n<li>事件绑定<br>在JSX中事件属性都是以驼峰命名的方式，HTML中的内嵌事件的编写方式在JSX语法中是无效的。</li>\n</ul>\n<h3 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h3><p><a href=\"http://reactjs.cn/react/docs/jsx-in-depth.html\" target=\"_blank\" rel=\"external\">《深入理解JSX》</a></p>\n<h2 id=\"JSX的if…else…\"><a href=\"#JSX的if…else…\" class=\"headerlink\" title=\"JSX的if…else…\"></a>JSX的if…else…</h2><hr>\n<p>你没法在JSX中使用if-else语句，因为JSX只是函数调用和对象创建的语法糖。<br>这里我们结合首页来说明一些使用方法吧。</p>\n<h3 id=\"使用三元表达式\"><a href=\"#使用三元表达式\" class=\"headerlink\" title=\"使用三元表达式\"></a>使用三元表达式</h3><p>页面中我们使用一个loading的state(状态来表示当前查看的模块)。现在我们结合hidden样式来进行界面的显示控制吧。</p>\n<ul>\n<li>hidden样式</li>\n</ul>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"selector-class\">.hidden</span> &#123; <span class=\"attribute\">display</span>:none; &#125;</div></pre></td></tr></table></figure>\n<ul>\n<li>显示控制</li>\n</ul>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;div className=&#123;loading == 'sethead' ? '' : 'hidden'&#125;&gt;这里是设置头像页面&lt;/div&gt;</div><div class=\"line\">&lt;div className=&#123;loading == 'setinfo' ? '' : 'hidden'&#125;&gt;这里是修改资料页面&lt;/div&gt;</div><div class=\"line\">&lt;div className=&#123;loading == 'other' ? '' : 'hidden'&#125;&gt;这里是其他页面&lt;/div&gt;</div></pre></td></tr></table></figure>\n<h3 id=\"JS代码中使用if表达式\"><a href=\"#JS代码中使用if表达式\" class=\"headerlink\" title=\"JS代码中使用if表达式\"></a>JS代码中使用if表达式</h3><p>当三元操作表达式不够健壮，你也可以使用if语句来决定应该渲染那个组件。<br>这里我们使用两层的map遍历菜单，需要判断是否有子菜单，然后加载。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">if</span>(menu.menus)&#123; <span class=\"comment\">//判断是否有子菜单</span></div><div class=\"line\">  menus = menu.menus.map(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">item, j</span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> (<span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">ListGroupItem&#125;</span> <span class=\"attr\">key</span>=<span class=\"string\">&#123;j&#125;</span>&gt;</span>&#123; item.text &#125;<span class=\"tag\">&lt;/<span class=\"name\">ListGroupItem</span>&gt;</span></span>);</div><div class=\"line\">  &#125;);</div><div class=\"line\">  menusgroup = (</div><div class=\"line\">    <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">ListGroup</span>&gt;</span></span></div><div class=\"line\">    &#123; menus &#125;</div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">ListGroup</span>&gt;</span></div><div class=\"line\">  );  \t\t\t</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h2 id=\"制作index页面\"><a href=\"#制作index页面\" class=\"headerlink\" title=\"制作index页面\"></a>制作index页面</h2><hr>\n<p>页面结构如下：<br><img src=\"http://o905ne85q.bkt.clouddn.com/F3A2.tmp.png\" alt=\"image\"></p>\n<h3 id=\"添加props属性值\"><a href=\"#添加props属性值\" class=\"headerlink\" title=\"添加props属性值\"></a>添加props属性值</h3><p>菜单内容等使用pros属性保存（不会发生改变）。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div></pre></td><td class=\"code\"><pre><div class=\"line\">getDefaultProps : <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">var</span> that = <span class=\"keyword\">this</span>;</div><div class=\"line\">  <span class=\"keyword\">return</span> &#123;<span class=\"comment\">//设置默认属性</span></div><div class=\"line\">    asidemenus: [&#123;</div><div class=\"line\">      <span class=\"attr\">title</span>: <span class=\"string\">'基本资料'</span>, <span class=\"comment\">//title用于储存该菜单显示名称</span></div><div class=\"line\">      click: <span class=\"string\">'init'</span>, <span class=\"comment\">//click用于储存该菜单对应点击时loading的状态值</span></div><div class=\"line\">      menus: [&#123;</div><div class=\"line\">        <span class=\"attr\">text</span>: <span class=\"string\">'名字'</span>,</div><div class=\"line\">        <span class=\"attr\">click</span>: <span class=\"string\">'name'</span>,</div><div class=\"line\">      &#125;, &#123;</div><div class=\"line\">        <span class=\"attr\">text</span>: <span class=\"string\">'邮箱'</span>,</div><div class=\"line\">        <span class=\"attr\">click</span>: <span class=\"string\">'email'</span>,</div><div class=\"line\">      &#125;, &#123;</div><div class=\"line\">        <span class=\"attr\">text</span>: <span class=\"string\">'github'</span>,</div><div class=\"line\">        <span class=\"attr\">click</span>: <span class=\"string\">'github'</span>,</div><div class=\"line\">      &#125;, ]</div><div class=\"line\">    &#125;, &#123;</div><div class=\"line\">      <span class=\"attr\">title</span>: <span class=\"string\">'设置头像'</span>,</div><div class=\"line\">      <span class=\"attr\">click</span>: <span class=\"string\">'sethead'</span>,</div><div class=\"line\">    &#125;, &#123;</div><div class=\"line\">      <span class=\"attr\">title</span>: <span class=\"string\">'修改资料'</span>,</div><div class=\"line\">      <span class=\"attr\">click</span>: <span class=\"string\">'setinfo'</span>,</div><div class=\"line\">    &#125;, &#123;</div><div class=\"line\">      <span class=\"attr\">title</span>: <span class=\"string\">'其他'</span>,</div><div class=\"line\">      <span class=\"attr\">click</span>: <span class=\"string\">'other'</span>,</div><div class=\"line\">    &#125;],</div><div class=\"line\">  &#125;;</div><div class=\"line\">&#125;,</div></pre></td></tr></table></figure></p>\n<h3 id=\"添加state值\"><a href=\"#添加state值\" class=\"headerlink\" title=\"添加state值\"></a>添加state值</h3><p>loading状态使用state状态保存（会发生改变）。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">getInitialState: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> &#123;<span class=\"attr\">loading</span>: <span class=\"string\">'init'</span>&#125;;</div><div class=\"line\">&#125;,</div></pre></td></tr></table></figure></p>\n<h3 id=\"添加改变状态事件\"><a href=\"#添加改变状态事件\" class=\"headerlink\" title=\"添加改变状态事件\"></a>添加改变状态事件</h3><p>创建事件用来改变loading状态。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">changeState: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">state</span>)</span>&#123;</div><div class=\"line\">  <span class=\"keyword\">this</span>.setState(&#123;<span class=\"attr\">loading</span>: state&#125;);</div><div class=\"line\">&#125;,</div></pre></td></tr></table></figure></p>\n<h3 id=\"map遍历数据\"><a href=\"#map遍历数据\" class=\"headerlink\" title=\"map遍历数据\"></a>map遍历数据</h3><p>上面也有提到map的使用。<br>在这里有个需要注意的地方就是，遍历的时候需要给元素设置key，下面介绍一下key。</p>\n<ul>\n<li>key<br>给组件设置独一无二的键，并确保它在一个渲染周期中保持一致，是的React能够更智能地决定应该重用一个组件，还是销毁并重新创建一个组件，进而提升渲染性能。<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">menus = menu.menus.map(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">item, j</span>)</span>&#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> (<span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">ListGroupItem&#125;</span> <span class=\"attr\">key</span>=<span class=\"string\">&#123;j&#125;</span>&gt;</span>&#123; item.text &#125;<span class=\"tag\">&lt;/<span class=\"name\">ListGroupItem</span>&gt;</span></span>);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3 id=\"添加点击事件onClick\"><a href=\"#添加点击事件onClick\" class=\"headerlink\" title=\"添加点击事件onClick\"></a>添加点击事件onClick</h3><ul>\n<li>事件处理<br>React里只需把事件处理器（event handler）以骆峰命名（camelCased）形式当作组件的props传入即可，就像使用普通HTML那样。</li>\n<li>自动绑定<br>React中，所有方法被自动绑定到了它的组件实例上。React还缓存这些绑定方法，所以CPU和内存都是非常高效。</li>\n<li>事件代理<ul>\n<li>React实际并没有把事件处理器绑定到节点本身。</li>\n<li>当React启动的时候，它在最外层使用唯一一个事件监听器处理所有事件。</li>\n<li>当组件被加载和卸载时，只是在内部映射里添加或删除事件处理器。</li>\n<li>当事件触发，React根据映射来决定如何分发。当映射里处理器时，会当作空操作处理。</li>\n</ul>\n</li>\n<li>虚拟事件对象<ul>\n<li>事件处理器将会传入虚拟事件对象的实例，一个对浏览器本地事件的跨浏览器封装。</li>\n<li>它有和浏览器本地事件相同的属性和方法，包括 stopPropagation()和preventDefault()，但是没有浏览器兼容问题。</li>\n<li>要在捕获阶段触发某个事件处理器，在事件名字后面追加Capture字符串</li>\n</ul>\n</li>\n</ul>\n<p>介绍完了React的事件处理相关，我们这里提一个在map里面使用事件绑定需要注意的地方。<br>当使用map遍历时，map函数里面的this对象不再指向该组件，此时我们只需要在函数后面添加.bind(this)就好。</p>\n<p>需要传递参数时，可以在事件的后面使用bind进行传参，然后直接在事件函数中获取就好啦。</p>\n<ul>\n<li>bind<ul>\n<li>bind与call很相似，例如，可接受的参数都分为两部分，且第一个参数都是作为执行时函数上下文中的this的对象。</li>\n<li>不同点有两个：</li>\n<li>1.bind的返回值是函数。</li>\n<li>2.call是把第二个及以后的参数作为函数方法的实参传进去，而bind虽说也是获取第二个及以后的参数用于之后方法的执行，但是返回的函数中传入的实参则是在bind中传入参数的基础上往后排的。</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">menus = menu.menus.map(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">item, j</span>)</span>&#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> (<span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">ListGroupItem&#125;</span> <span class=\"attr\">key</span>=<span class=\"string\">&#123;j&#125;</span> <span class=\"attr\">onClick</span>=<span class=\"string\">&#123;this.changeState.bind(null,item.click)</span>&gt;</span>&#123; item.text &#125;<span class=\"tag\">&lt;/<span class=\"name\">ListGroupItem</span>&gt;</span></span>);</div><div class=\"line\">&#125;.bind(<span class=\"keyword\">this</span>));</div></pre></td></tr></table></figure>\n<h3 id=\"组件代码\"><a href=\"#组件代码\" class=\"headerlink\" title=\"组件代码\"></a>组件代码</h3><p>这里贴一下我们组件的代码，有点长哦。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> React <span class=\"keyword\">from</span> <span class=\"string\">'react'</span>;</div><div class=\"line\"><span class=\"keyword\">import</span> &#123; Panel, PanelGroup, ListGroup, ListGroupItem &#125; <span class=\"keyword\">from</span> <span class=\"string\">'react-bootstrap'</span>;</div><div class=\"line\"><span class=\"keyword\">import</span> Header <span class=\"keyword\">from</span>  <span class=\"string\">'./header.jsx'</span>; <span class=\"comment\">//login自定义组件</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">const</span> Index = React.createClass(&#123;</div><div class=\"line\">  <span class=\"attr\">getDefaultProps</span> : <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">     <span class=\"keyword\">return</span> &#123;<span class=\"comment\">//设置默认属性</span></div><div class=\"line\">      asidemenus: <span class=\"string\">''</span>, <span class=\"comment\">//这里就省略啦，大家可以看前面的菜单数据</span></div><div class=\"line\">    &#125;;</div><div class=\"line\">  &#125;,</div><div class=\"line\">  <span class=\"attr\">changeState</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">state</span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>.setState(&#123;<span class=\"attr\">loading</span>: state&#125;);</div><div class=\"line\">  &#125;,</div><div class=\"line\">  <span class=\"attr\">getInitialState</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> &#123;<span class=\"attr\">loading</span>: <span class=\"string\">'init'</span>&#125;;</div><div class=\"line\">  &#125;,</div><div class=\"line\">  render() &#123;</div><div class=\"line\">  \t<span class=\"keyword\">var</span> loading = <span class=\"keyword\">this</span>.state.loading;</div><div class=\"line\">  \t<span class=\"keyword\">var</span> that = <span class=\"keyword\">this</span>;</div><div class=\"line\">  \t<span class=\"keyword\">var</span> changeState = <span class=\"keyword\">this</span>.changeState;</div><div class=\"line\">  \t<span class=\"keyword\">var</span> asidemenus = <span class=\"keyword\">this</span>.props.asidemenus.map(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">menu, i</span>)</span>&#123;</div><div class=\"line\">  \t\t<span class=\"keyword\">var</span> menus, menusgroup; \t\t</div><div class=\"line\">  \t\t<span class=\"keyword\">if</span>(menu.menus)&#123;</div><div class=\"line\">  \t\t\tmenus = menu.menus.map(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">item, j</span>)</span>&#123;</div><div class=\"line\">  \t\t\t\t<span class=\"keyword\">return</span> (<span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">ListGroupItem</span> <span class=\"attr\">onClick</span>=<span class=\"string\">&#123;this.changeState.bind(null,item.click)&#125;</span> <span class=\"attr\">key</span>=<span class=\"string\">&#123;j&#125;</span>&gt;</span>&#123; item.text &#125;<span class=\"tag\">&lt;/<span class=\"name\">ListGroupItem</span>&gt;</span></span>);</div><div class=\"line\">  \t\t\t&#125;.bind(<span class=\"keyword\">this</span>));</div><div class=\"line\">  \t\t\tmenusgroup = (</div><div class=\"line\">  \t\t\t\t<span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">ListGroup</span>&gt;</span></span></div><div class=\"line\">  \t\t\t\t\t&#123; menus &#125;</div><div class=\"line\">  \t\t\t\t<span class=\"tag\">&lt;/<span class=\"name\">ListGroup</span>&gt;</span></div><div class=\"line\">  \t\t\t);  \t\t\t</div><div class=\"line\">  \t\t&#125;</div><div class=\"line\">  \t\t<span class=\"keyword\">var</span> menuheader = (</div><div class=\"line\">  \t\t\t<span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">ul</span> <span class=\"attr\">class</span>=<span class=\"string\">\"panel-title \"</span>&gt;</span></span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">onClick</span>=<span class=\"string\">&#123;this.changeState.bind(null,menu.click)&#125;</span>&gt;</span></div><div class=\"line\">            &#123; menu.title &#125;</div><div class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></div><div class=\"line\">  \t\t);</div><div class=\"line\">  \t\t<span class=\"keyword\">return</span> (</div><div class=\"line\">  \t\t\t<span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">Panel</span> <span class=\"attr\">collapsible</span> <span class=\"attr\">defaultExpanded</span> <span class=\"attr\">className</span>=<span class=\"string\">\"list-group\"</span> <span class=\"attr\">key</span>=<span class=\"string\">&#123;i&#125;</span> <span class=\"attr\">header</span>=<span class=\"string\">&#123;menuheader&#125;</span>&gt;</span></span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"collapse&#123;i&#125;\"</span> <span class=\"attr\">className</span>=<span class=\"string\">\"panel-collapse collapse in\"</span>&gt;</span></div><div class=\"line\">          &#123; menusgroup &#125;\t\t\t\t\t\t\t\t\t\t</div><div class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">Panel</span>&gt;</span></div><div class=\"line\">  \t\t);</div><div class=\"line\">  \t&#125;.bind(<span class=\"keyword\">this</span>));</div><div class=\"line\">    <span class=\"keyword\">return</span> (</div><div class=\"line\">    \t<span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">className</span>=<span class=\"string\">\"container-fluid row\"</span>&gt;</span></span></div><div class=\"line\">    \t\t<span class=\"tag\">&lt;<span class=\"name\">Header</span> <span class=\"attr\">active</span>=<span class=\"string\">\"index\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">Header</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">aside</span> <span class=\"attr\">className</span>=<span class=\"string\">\"col-md-2 col-md-offset-1\"</span>&gt;</span></div><div class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">PanelGroup</span> <span class=\"attr\">id</span>=<span class=\"string\">\"accordion\"</span>&gt;</span></div><div class=\"line\">            &#123;\tasidemenus &#125;\t\t\t\t\t\t</div><div class=\"line\">          <span class=\"tag\">&lt;/<span class=\"name\">PanelGroup</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">aside</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">article</span> <span class=\"attr\">className</span>=<span class=\"string\">\"col-md-7\"</span>&gt;</span></div><div class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">section</span> <span class=\"attr\">className</span>=<span class=\"string\">\"index-content\"</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">className</span>=<span class=\"string\">&#123;loading</span> == <span class=\"string\">'init'</span> || <span class=\"attr\">loading</span> == <span class=\"string\">'name'</span> ? '' <span class=\"attr\">:</span> '<span class=\"attr\">hidden</span>'&#125;&gt;</span>昵称：被删<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">className</span>=<span class=\"string\">&#123;loading</span> == <span class=\"string\">'init'</span> || <span class=\"attr\">loading</span> == <span class=\"string\">'email'</span> ? '' <span class=\"attr\">:</span> '<span class=\"attr\">hidden</span>'&#125;&gt;</span>邮箱：wangbeishan@163.com<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">className</span>=<span class=\"string\">&#123;loading</span> == <span class=\"string\">'init'</span> || <span class=\"attr\">loading</span> == <span class=\"string\">'github'</span> ? '' <span class=\"attr\">:</span> '<span class=\"attr\">hidden</span>'&#125;&gt;</span>github: <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"https://github.com/godbasin\"</span>&gt;</span>github.com/godbasin<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">className</span>=<span class=\"string\">&#123;loading</span> == <span class=\"string\">'sethead'</span> ? '' <span class=\"attr\">:</span> '<span class=\"attr\">hidden</span>'&#125;&gt;</span>这里是设置头像页面<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">className</span>=<span class=\"string\">&#123;loading</span> == <span class=\"string\">'setinfo'</span> ? '' <span class=\"attr\">:</span> '<span class=\"attr\">hidden</span>'&#125;&gt;</span>这里是修改资料页面<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">className</span>=<span class=\"string\">&#123;loading</span> == <span class=\"string\">'other'</span> ? '' <span class=\"attr\">:</span> '<span class=\"attr\">hidden</span>'&#125;&gt;</span>这里是其他页面<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">          <span class=\"tag\">&lt;/<span class=\"name\">section</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">article</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">    );</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">module</span>.exports = Index;</div></pre></td></tr></table></figure></p>\n<h2 id=\"结束语\"><a href=\"#结束语\" class=\"headerlink\" title=\"结束语\"></a>结束语</h2><hr>\n<p>其实从AngularJS转React的时候，有很多模板引擎的使用方式不一致了，还是很不习惯的呢。相对Angular来说，React似乎教程更少呢，所以本骚年有些时候遇到bug也不是很懂，大家一起来探寻吧。<br><a href=\"https://github.com/godbasin/godbasin.github.io/tree/blog-codes/react-notes/5-fullfill-index\" target=\"_blank\" rel=\"external\">此处查看项目代码（仅包含app部分）</a><br><a href=\"http://o9j9owc7b.bkt.clouddn.com/5-fullfill-index/index.html?#/index\" target=\"_blank\" rel=\"external\">此处查看页面效果</a></p>\n","excerpt":"<p>最近在学习使用React作为前端的框架，《React使用笔记》系列用于记录过程中的一些使用和解决方法。<br>本文简单介绍jsx，以及记录制作首页的过程。<br>","more":"</p>\n<h2 id=\"理解jsx\"><a href=\"#理解jsx\" class=\"headerlink\" title=\"理解jsx\"></a>理解jsx</h2><hr>\n<h3 id=\"什么是JSX\"><a href=\"#什么是JSX\" class=\"headerlink\" title=\"什么是JSX\"></a>什么是JSX</h3><p>JSX即JavaScript XML，是一个看起来很像XML的JavaScript语法扩展。<br>JSX能定义简洁且我们熟知的包含属性的树状结构语法。</p>\n<h3 id=\"使用JSX\"><a href=\"#使用JSX\" class=\"headerlink\" title=\"使用JSX\"></a>使用JSX</h3><p>JSX把类XML的语法转成纯粹JavaScript，XML元素、属性和子节点被转换成React.createElement的参数。</p>\n<ul>\n<li>JSX标签<br>React的JSX里约定分别使用首字母大、小写来区分本地组件的类和HTML标签。</li>\n<li>JavaScript表达式<ul>\n<li>表达式用{}包起来，不要加引号，加引号就会被当成字符串。</li>\n<li>JSX是HTML和JavaScript混写的语法，当遇到&lt;，JSX就当HTML解析，遇到{就当JavaScript解析。</li>\n<li>同样地，JavaScript表达式可用于描述子结点。</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"JSX与HTML区别\"><a href=\"#JSX与HTML区别\" class=\"headerlink\" title=\"JSX与HTML区别\"></a>JSX与HTML区别</h3><ul>\n<li>HTML实体<br>如果想在JSX表达式中显示HTML实体，可以会遇到二次转义的问题，因为React默认会转义所有字符串，为了防止各种XSS攻击。<ul>\n<li>1.安全的做法是先找到实体的Unicode编号 ，然后在JavaScript字符串里使用。</li>\n<li>2.可以在数组里混合使用字符串和JSX元素。</li>\n<li>3.万不得已，可以直接使用原始HTML。</li>\n</ul>\n</li>\n<li>HTML属性<br>一些标识符像class和for不建议作为XML属性名。作为替代，React DOM使用className和htmlFor来做对应的属性。</li>\n<li>内联样式<br>在React中写行内样式时，要使用双大括号，不能采用引号的书写方式</li>\n<li>自定义HTML属性<br>如果往原生HTML元素里传入HTML规范里不存在的属性，React不会显示它们。如果需要使用自定义属性，要加data-前缀。</li>\n<li>注释<br>JSX里添加注释很容易，它们只是JS表达式而已。你只需要在一个标签的子节点内(非最外层)小心地用单大括号包围要注释的部分。</li>\n<li>事件绑定<br>在JSX中事件属性都是以驼峰命名的方式，HTML中的内嵌事件的编写方式在JSX语法中是无效的。</li>\n</ul>\n<h3 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h3><p><a href=\"http://reactjs.cn/react/docs/jsx-in-depth.html\">《深入理解JSX》</a></p>\n<h2 id=\"JSX的if…else…\"><a href=\"#JSX的if…else…\" class=\"headerlink\" title=\"JSX的if…else…\"></a>JSX的if…else…</h2><hr>\n<p>你没法在JSX中使用if-else语句，因为JSX只是函数调用和对象创建的语法糖。<br>这里我们结合首页来说明一些使用方法吧。</p>\n<h3 id=\"使用三元表达式\"><a href=\"#使用三元表达式\" class=\"headerlink\" title=\"使用三元表达式\"></a>使用三元表达式</h3><p>页面中我们使用一个loading的state(状态来表示当前查看的模块)。现在我们结合hidden样式来进行界面的显示控制吧。</p>\n<ul>\n<li>hidden样式</li>\n</ul>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"selector-class\">.hidden</span> &#123; <span class=\"attribute\">display</span>:none; &#125;</div></pre></td></tr></table></figure>\n<ul>\n<li>显示控制</li>\n</ul>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;div className=&#123;loading == 'sethead' ? '' : 'hidden'&#125;&gt;这里是设置头像页面&lt;/div&gt;</div><div class=\"line\">&lt;div className=&#123;loading == 'setinfo' ? '' : 'hidden'&#125;&gt;这里是修改资料页面&lt;/div&gt;</div><div class=\"line\">&lt;div className=&#123;loading == 'other' ? '' : 'hidden'&#125;&gt;这里是其他页面&lt;/div&gt;</div></pre></td></tr></table></figure>\n<h3 id=\"JS代码中使用if表达式\"><a href=\"#JS代码中使用if表达式\" class=\"headerlink\" title=\"JS代码中使用if表达式\"></a>JS代码中使用if表达式</h3><p>当三元操作表达式不够健壮，你也可以使用if语句来决定应该渲染那个组件。<br>这里我们使用两层的map遍历菜单，需要判断是否有子菜单，然后加载。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">if</span>(menu.menus)&#123; <span class=\"comment\">//判断是否有子菜单</span></div><div class=\"line\">  menus = menu.menus.map(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">item, j</span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> (<span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">ListGroupItem&#125;</span> <span class=\"attr\">key</span>=<span class=\"string\">&#123;j&#125;</span>&gt;</span>&#123; item.text &#125;<span class=\"tag\">&lt;/<span class=\"name\">ListGroupItem</span>&gt;</span></span>);</div><div class=\"line\">  &#125;);</div><div class=\"line\">  menusgroup = (</div><div class=\"line\">    <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">ListGroup</span>&gt;</span></div><div class=\"line\">    &#123; menus &#125;</div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">ListGroup</span>&gt;</span></span></div><div class=\"line\">  );  \t\t\t</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h2 id=\"制作index页面\"><a href=\"#制作index页面\" class=\"headerlink\" title=\"制作index页面\"></a>制作index页面</h2><hr>\n<p>页面结构如下：<br><img src=\"http://o905ne85q.bkt.clouddn.com/F3A2.tmp.png\" alt=\"image\"></p>\n<h3 id=\"添加props属性值\"><a href=\"#添加props属性值\" class=\"headerlink\" title=\"添加props属性值\"></a>添加props属性值</h3><p>菜单内容等使用pros属性保存（不会发生改变）。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div></pre></td><td class=\"code\"><pre><div class=\"line\">getDefaultProps : <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">var</span> that = <span class=\"keyword\">this</span>;</div><div class=\"line\">  <span class=\"keyword\">return</span> &#123;<span class=\"comment\">//设置默认属性</span></div><div class=\"line\">    asidemenus: [&#123;</div><div class=\"line\">      <span class=\"attr\">title</span>: <span class=\"string\">'基本资料'</span>, <span class=\"comment\">//title用于储存该菜单显示名称</span></div><div class=\"line\">      click: <span class=\"string\">'init'</span>, <span class=\"comment\">//click用于储存该菜单对应点击时loading的状态值</span></div><div class=\"line\">      menus: [&#123;</div><div class=\"line\">        <span class=\"attr\">text</span>: <span class=\"string\">'名字'</span>,</div><div class=\"line\">        <span class=\"attr\">click</span>: <span class=\"string\">'name'</span>,</div><div class=\"line\">      &#125;, &#123;</div><div class=\"line\">        <span class=\"attr\">text</span>: <span class=\"string\">'邮箱'</span>,</div><div class=\"line\">        <span class=\"attr\">click</span>: <span class=\"string\">'email'</span>,</div><div class=\"line\">      &#125;, &#123;</div><div class=\"line\">        <span class=\"attr\">text</span>: <span class=\"string\">'github'</span>,</div><div class=\"line\">        <span class=\"attr\">click</span>: <span class=\"string\">'github'</span>,</div><div class=\"line\">      &#125;, ]</div><div class=\"line\">    &#125;, &#123;</div><div class=\"line\">      <span class=\"attr\">title</span>: <span class=\"string\">'设置头像'</span>,</div><div class=\"line\">      <span class=\"attr\">click</span>: <span class=\"string\">'sethead'</span>,</div><div class=\"line\">    &#125;, &#123;</div><div class=\"line\">      <span class=\"attr\">title</span>: <span class=\"string\">'修改资料'</span>,</div><div class=\"line\">      <span class=\"attr\">click</span>: <span class=\"string\">'setinfo'</span>,</div><div class=\"line\">    &#125;, &#123;</div><div class=\"line\">      <span class=\"attr\">title</span>: <span class=\"string\">'其他'</span>,</div><div class=\"line\">      <span class=\"attr\">click</span>: <span class=\"string\">'other'</span>,</div><div class=\"line\">    &#125;],</div><div class=\"line\">  &#125;;</div><div class=\"line\">&#125;,</div></pre></td></tr></table></figure></p>\n<h3 id=\"添加state值\"><a href=\"#添加state值\" class=\"headerlink\" title=\"添加state值\"></a>添加state值</h3><p>loading状态使用state状态保存（会发生改变）。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">getInitialState: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> &#123;<span class=\"attr\">loading</span>: <span class=\"string\">'init'</span>&#125;;</div><div class=\"line\">&#125;,</div></pre></td></tr></table></figure></p>\n<h3 id=\"添加改变状态事件\"><a href=\"#添加改变状态事件\" class=\"headerlink\" title=\"添加改变状态事件\"></a>添加改变状态事件</h3><p>创建事件用来改变loading状态。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">changeState: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">state</span>)</span>&#123;</div><div class=\"line\">  <span class=\"keyword\">this</span>.setState(&#123;<span class=\"attr\">loading</span>: state&#125;);</div><div class=\"line\">&#125;,</div></pre></td></tr></table></figure></p>\n<h3 id=\"map遍历数据\"><a href=\"#map遍历数据\" class=\"headerlink\" title=\"map遍历数据\"></a>map遍历数据</h3><p>上面也有提到map的使用。<br>在这里有个需要注意的地方就是，遍历的时候需要给元素设置key，下面介绍一下key。</p>\n<ul>\n<li>key<br>给组件设置独一无二的键，并确保它在一个渲染周期中保持一致，是的React能够更智能地决定应该重用一个组件，还是销毁并重新创建一个组件，进而提升渲染性能。<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">menus = menu.menus.map(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">item, j</span>)</span>&#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> (<span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">ListGroupItem&#125;</span> <span class=\"attr\">key</span>=<span class=\"string\">&#123;j&#125;</span>&gt;</span>&#123; item.text &#125;<span class=\"tag\">&lt;/<span class=\"name\">ListGroupItem</span>&gt;</span></span>);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3 id=\"添加点击事件onClick\"><a href=\"#添加点击事件onClick\" class=\"headerlink\" title=\"添加点击事件onClick\"></a>添加点击事件onClick</h3><ul>\n<li>事件处理<br>React里只需把事件处理器（event handler）以骆峰命名（camelCased）形式当作组件的props传入即可，就像使用普通HTML那样。</li>\n<li>自动绑定<br>React中，所有方法被自动绑定到了它的组件实例上。React还缓存这些绑定方法，所以CPU和内存都是非常高效。</li>\n<li>事件代理<ul>\n<li>React实际并没有把事件处理器绑定到节点本身。</li>\n<li>当React启动的时候，它在最外层使用唯一一个事件监听器处理所有事件。</li>\n<li>当组件被加载和卸载时，只是在内部映射里添加或删除事件处理器。</li>\n<li>当事件触发，React根据映射来决定如何分发。当映射里处理器时，会当作空操作处理。</li>\n</ul>\n</li>\n<li>虚拟事件对象<ul>\n<li>事件处理器将会传入虚拟事件对象的实例，一个对浏览器本地事件的跨浏览器封装。</li>\n<li>它有和浏览器本地事件相同的属性和方法，包括 stopPropagation()和preventDefault()，但是没有浏览器兼容问题。</li>\n<li>要在捕获阶段触发某个事件处理器，在事件名字后面追加Capture字符串</li>\n</ul>\n</li>\n</ul>\n<p>介绍完了React的事件处理相关，我们这里提一个在map里面使用事件绑定需要注意的地方。<br>当使用map遍历时，map函数里面的this对象不再指向该组件，此时我们只需要在函数后面添加.bind(this)就好。</p>\n<p>需要传递参数时，可以在事件的后面使用bind进行传参，然后直接在事件函数中获取就好啦。</p>\n<ul>\n<li>bind<ul>\n<li>bind与call很相似，例如，可接受的参数都分为两部分，且第一个参数都是作为执行时函数上下文中的this的对象。</li>\n<li>不同点有两个：</li>\n<li>1.bind的返回值是函数。</li>\n<li>2.call是把第二个及以后的参数作为函数方法的实参传进去，而bind虽说也是获取第二个及以后的参数用于之后方法的执行，但是返回的函数中传入的实参则是在bind中传入参数的基础上往后排的。</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">menus = menu.menus.map(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">item, j</span>)</span>&#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> (<span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">ListGroupItem&#125;</span> <span class=\"attr\">key</span>=<span class=\"string\">&#123;j&#125;</span> <span class=\"attr\">onClick</span>=<span class=\"string\">&#123;this.changeState.bind(null,item.click)</span>&gt;</span>&#123; item.text &#125;<span class=\"tag\">&lt;/<span class=\"name\">ListGroupItem</span>&gt;</span></span>);</div><div class=\"line\">&#125;.bind(<span class=\"keyword\">this</span>));</div></pre></td></tr></table></figure>\n<h3 id=\"组件代码\"><a href=\"#组件代码\" class=\"headerlink\" title=\"组件代码\"></a>组件代码</h3><p>这里贴一下我们组件的代码，有点长哦。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> React <span class=\"keyword\">from</span> <span class=\"string\">'react'</span>;</div><div class=\"line\"><span class=\"keyword\">import</span> &#123; Panel, PanelGroup, ListGroup, ListGroupItem &#125; <span class=\"keyword\">from</span> <span class=\"string\">'react-bootstrap'</span>;</div><div class=\"line\"><span class=\"keyword\">import</span> Header <span class=\"keyword\">from</span>  <span class=\"string\">'./header.jsx'</span>; <span class=\"comment\">//login自定义组件</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">const</span> Index = React.createClass(&#123;</div><div class=\"line\">  <span class=\"attr\">getDefaultProps</span> : <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">     <span class=\"keyword\">return</span> &#123;<span class=\"comment\">//设置默认属性</span></div><div class=\"line\">      asidemenus: <span class=\"string\">''</span>, <span class=\"comment\">//这里就省略啦，大家可以看前面的菜单数据</span></div><div class=\"line\">    &#125;;</div><div class=\"line\">  &#125;,</div><div class=\"line\">  <span class=\"attr\">changeState</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">state</span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>.setState(&#123;<span class=\"attr\">loading</span>: state&#125;);</div><div class=\"line\">  &#125;,</div><div class=\"line\">  <span class=\"attr\">getInitialState</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> &#123;<span class=\"attr\">loading</span>: <span class=\"string\">'init'</span>&#125;;</div><div class=\"line\">  &#125;,</div><div class=\"line\">  render() &#123;</div><div class=\"line\">  \t<span class=\"keyword\">var</span> loading = <span class=\"keyword\">this</span>.state.loading;</div><div class=\"line\">  \t<span class=\"keyword\">var</span> that = <span class=\"keyword\">this</span>;</div><div class=\"line\">  \t<span class=\"keyword\">var</span> changeState = <span class=\"keyword\">this</span>.changeState;</div><div class=\"line\">  \t<span class=\"keyword\">var</span> asidemenus = <span class=\"keyword\">this</span>.props.asidemenus.map(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">menu, i</span>)</span>&#123;</div><div class=\"line\">  \t\t<span class=\"keyword\">var</span> menus, menusgroup; \t\t</div><div class=\"line\">  \t\t<span class=\"keyword\">if</span>(menu.menus)&#123;</div><div class=\"line\">  \t\t\tmenus = menu.menus.map(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">item, j</span>)</span>&#123;</div><div class=\"line\">  \t\t\t\t<span class=\"keyword\">return</span> (<span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">ListGroupItem</span> <span class=\"attr\">onClick</span>=<span class=\"string\">&#123;this.changeState.bind(null,item.click)&#125;</span> <span class=\"attr\">key</span>=<span class=\"string\">&#123;j&#125;</span>&gt;</span>&#123; item.text &#125;<span class=\"tag\">&lt;/<span class=\"name\">ListGroupItem</span>&gt;</span></span>);</div><div class=\"line\">  \t\t\t&#125;.bind(<span class=\"keyword\">this</span>));</div><div class=\"line\">  \t\t\tmenusgroup = (</div><div class=\"line\">  \t\t\t\t<span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">ListGroup</span>&gt;</span></div><div class=\"line\">  \t\t\t\t\t&#123; menus &#125;</div><div class=\"line\">  \t\t\t\t<span class=\"tag\">&lt;/<span class=\"name\">ListGroup</span>&gt;</span></span></div><div class=\"line\">  \t\t\t);  \t\t\t</div><div class=\"line\">  \t\t&#125;</div><div class=\"line\">  \t\t<span class=\"keyword\">var</span> menuheader = (</div><div class=\"line\">  \t\t\t<span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">ul</span> <span class=\"attr\">class</span>=<span class=\"string\">\"panel-title \"</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">onClick</span>=<span class=\"string\">&#123;this.changeState.bind(null,menu.click)&#125;</span>&gt;</span></div><div class=\"line\">            &#123; menu.title &#125;</div><div class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></span></div><div class=\"line\">  \t\t);</div><div class=\"line\">  \t\t<span class=\"keyword\">return</span> (</div><div class=\"line\">  \t\t\t<span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">Panel</span> <span class=\"attr\">collapsible</span> <span class=\"attr\">defaultExpanded</span> <span class=\"attr\">className</span>=<span class=\"string\">\"list-group\"</span> <span class=\"attr\">key</span>=<span class=\"string\">&#123;i&#125;</span> <span class=\"attr\">header</span>=<span class=\"string\">&#123;menuheader&#125;</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"collapse&#123;i&#125;\"</span> <span class=\"attr\">className</span>=<span class=\"string\">\"panel-collapse collapse in\"</span>&gt;</span></div><div class=\"line\">          &#123; menusgroup &#125;\t\t\t\t\t\t\t\t\t\t</div><div class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">Panel</span>&gt;</span></span></div><div class=\"line\">  \t\t);</div><div class=\"line\">  \t&#125;.bind(<span class=\"keyword\">this</span>));</div><div class=\"line\">    <span class=\"keyword\">return</span> (</div><div class=\"line\">    \t<span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">className</span>=<span class=\"string\">\"container-fluid row\"</span>&gt;</span></div><div class=\"line\">    \t\t<span class=\"tag\">&lt;<span class=\"name\">Header</span> <span class=\"attr\">active</span>=<span class=\"string\">\"index\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">Header</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">aside</span> <span class=\"attr\">className</span>=<span class=\"string\">\"col-md-2 col-md-offset-1\"</span>&gt;</span></div><div class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">PanelGroup</span> <span class=\"attr\">id</span>=<span class=\"string\">\"accordion\"</span>&gt;</span></div><div class=\"line\">            &#123;\tasidemenus &#125;\t\t\t\t\t\t</div><div class=\"line\">          <span class=\"tag\">&lt;/<span class=\"name\">PanelGroup</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">aside</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">article</span> <span class=\"attr\">className</span>=<span class=\"string\">\"col-md-7\"</span>&gt;</span></div><div class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">section</span> <span class=\"attr\">className</span>=<span class=\"string\">\"index-content\"</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">className</span>=<span class=\"string\">&#123;loading</span> == <span class=\"string\">'init'</span> || <span class=\"attr\">loading</span> == <span class=\"string\">'name'</span> ? '' <span class=\"attr\">:</span> '<span class=\"attr\">hidden</span>'&#125;&gt;</span>昵称：被删<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">className</span>=<span class=\"string\">&#123;loading</span> == <span class=\"string\">'init'</span> || <span class=\"attr\">loading</span> == <span class=\"string\">'email'</span> ? '' <span class=\"attr\">:</span> '<span class=\"attr\">hidden</span>'&#125;&gt;</span>邮箱：wangbeishan@163.com<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">className</span>=<span class=\"string\">&#123;loading</span> == <span class=\"string\">'init'</span> || <span class=\"attr\">loading</span> == <span class=\"string\">'github'</span> ? '' <span class=\"attr\">:</span> '<span class=\"attr\">hidden</span>'&#125;&gt;</span>github: <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"https://github.com/godbasin\"</span>&gt;</span>github.com/godbasin<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">className</span>=<span class=\"string\">&#123;loading</span> == <span class=\"string\">'sethead'</span> ? '' <span class=\"attr\">:</span> '<span class=\"attr\">hidden</span>'&#125;&gt;</span>这里是设置头像页面<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">className</span>=<span class=\"string\">&#123;loading</span> == <span class=\"string\">'setinfo'</span> ? '' <span class=\"attr\">:</span> '<span class=\"attr\">hidden</span>'&#125;&gt;</span>这里是修改资料页面<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">className</span>=<span class=\"string\">&#123;loading</span> == <span class=\"string\">'other'</span> ? '' <span class=\"attr\">:</span> '<span class=\"attr\">hidden</span>'&#125;&gt;</span>这里是其他页面<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">          <span class=\"tag\">&lt;/<span class=\"name\">section</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">article</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></div><div class=\"line\">    );</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">module</span>.exports = Index;</div></pre></td></tr></table></figure></p>\n<h2 id=\"结束语\"><a href=\"#结束语\" class=\"headerlink\" title=\"结束语\"></a>结束语</h2><hr>\n<p>其实从AngularJS转React的时候，有很多模板引擎的使用方式不一致了，还是很不习惯的呢。相对Angular来说，React似乎教程更少呢，所以本骚年有些时候遇到bug也不是很懂，大家一起来探寻吧。<br><a href=\"https://github.com/godbasin/godbasin.github.io/tree/blog-codes/react-notes/5-fullfill-index\">此处查看项目代码（仅包含app部分）</a><br><a href=\"http://o9j9owc7b.bkt.clouddn.com/5-fullfill-index/index.html?#/index\">此处查看页面效果</a></p>"},{"title":"React使用笔记7--关于Refs和React表单","date":"2016-08-27T01:10:49.000Z","_content":"最近在学习使用React作为前端的框架，《React使用笔记》系列用于记录过程中的一些使用和解决方法。\n本文简单介绍Refs相关，以及记录React表单相关的绑定和focus的过程。\n<!--more-->\n## React Refs\n-----\n### Refs\n为了获取一个到React组件的引用，你可以使用this来得到当前的React组件，或者你可以使用refs来指向一个你拥有的组件。\n- React支持一种非常特殊的属性，你可以用来绑定到render()输出的任何组件上去。\n- Ref属性允许你引用render()返回的相应的支撑实例（ backing instance ）。\n这样就可以确保在任何时间总是拿到正确的实例。\n- 做法很简单：\n  - 1.绑定一个ref属性到render返回的东西上面去，例如：\n\n``` jsx\n<input ref=\"myInput\" />\n```\n\n  - 2、在其它代码中（典型地事件处理代码），通过this.refs获取支撑实例（ backing instance ），就像这样：\n\n``` jsx\nthis.refs.myInput\n```\n\n### findDOMNode()\n为了和浏览器交互，你将需要对DOM节点的引用。React提供了React.findDOMNode(component)函数，你可以调用这个函数来获取该组件的DOM结点。\n- 注意：React v0.14以上版本中，需使用ReactDOM.findDOMNode(component)，且需引入react-don。\n\n``` javascript\nimport ReactDOM from 'react-dom'; //react-dom\n```\n\n- findDOMNode()仅在挂载的组件上有效（也就是说，组件已经被放进了DOM中）。如果你尝试在一个未被挂载的组件上调用这个函数（例如在创建组件的render()函数中调用findDOMNode()），将会抛出异常。\n- 从 render() 中返回的内容并不是实际渲染出来的子组件实例。从 render() 返回的仅仅是子组件层级树实例在特定时间的一个描述。可参考[组件的生命周期](https://godbasin.github.io/2016/08/13/react-notes-3-props-state-lifecycle/)。\n\n### Ref优点\nRefs是一种给指定的子组件实例发送消息的很好的方式，从某种程度上来看，通过props和state来做这件事倒显得不太方便。\n- 可以在组件类里面定义任何公共的方法（比如在输入之前的重置方法），然后通过refs来调用这些公共的方法（比如this.refs.myTypeahead.reset() ）。\n- 管理DOM几乎总是需要冲出“本地”组件的限制，比如通过this.refs.myInput.getDOMNode()获取`<input />`元素的底层DOM节点。Refs是做这件事唯一可靠的方式。\n- Refs是被自动管理的！如果某个子级实例被销毁了，它的ref也会自动销毁。不用考虑内存问题（除非你自己做一些疯狂的操作，保存了什么引用）。\n\n### 参考\n[《关于Refs的更多内容》](http://reactjs.cn/react/docs/more-about-refs.html)\n\n### Flux数据流\n![image](http://o905ne85q.bkt.clouddn.com/bg2016011503.png)\n- store在dispatcher中注册，并提供相应的回调。回调会接收action并把它当成自己的一个参数。\n- 通过调用action来响应用户交互。\n- 当action被触发，回调函数会使用switch语句来解析action中的type参数，并在合适的type下提供钩子来执行内部方法。\n- action通过dispatcher来响应store中的state更新。\n- store更新完成之后，会向应用中广播一个change事件，views可以选择响应事件来重新获取新的数据并更新。\n\n### 参考\n[《Flux 架构入门教程》](http://www.ruanyifeng.com/blog/2016/01/flux.html)\n[《谈一谈我对 React Flux 架构的理解》](http://www.cocoachina.com/webapp/20150928/13600.html)\n\n## 使用Ref属性对表单进行focus\n-----\n这里简述使用Ref属性对表单进行focus的过程。\n\n### Index组件中\n在index的修改资料部分，添加表单，这里使用了react-bootstrap。\n- 给两个input分别加上ref属性\n\n``` jsx\n<FormControl type=\"email\" placeholder=\"Email\" ref=\"email\" required />\n<FormControl type=\"text\" placeholder=\"Name\" ref=\"name\" required />\n```\n\n- 添加两个按钮，绑定点击对input进行focus\n\n``` jsx\n<Button onClick={this.props.focusInput.bind(null, 'email')}>focus邮件</Button>\n<Button onClick={this.props.focusName}>focus名字</Button>\n```\n\n### IndexController组件中\n- 添加子组件ref属性\n  - 在父组件中获取子组件的refs，可通过给子组件添加ref属性来获取子组件，再获取其refs\n  - 该方法可以用在父组件和子组件之间的通信，父组件获取子组件的数据\n\n``` jsx\n<Index ref=\"index\" />\n```\n\n- 添加事件focusInpu和focusName\n\n``` jsx\nfocusInput: function(name){\n\tReactDOM.findDOMNode(this.refs.index.refs[name]).focus(); \n},\nfocusName: function(name){\n\tReactDOM.findDOMNode(this.refs.index.refs.name).focus(); \t\t\n},\n```\n\n这里我们可以看到，refs的获取有两种方法，可以通过refs[name]和refs.name来获取。第一种方法可以帮助我们创建通用的获取方法。\n- 通过props传递方法给子组件\n  - 该方法可用于父组件和子组件之间的通信，子组件获取父组件的数据\n\n``` jsx\n<Index ref=\"index\" focusInput={this.focusInput} focusName={this.focusName} />\n```\n\n此时我们完成了使用refs来控制组件元素的过程。下面将简单讲述一下React中表单组件的onChange事件。\n\n## React表单的onChange\n-----\n诸如`<input>`、`<textarea>`、`<option>`这样的表单组件不同于其他组件，因为他们可以通过用户交互发生变化。这些组件提供的界面使响应用户交互的表单数据处理更加容易。\n\n### 表单事件\nReact中表单事件分别有：\n- onChange: 执行并通过浏览器做出以下响应\n  - `<input>`或`<textarea>`的value发生变化时\n  - `<input>`的checked状态改变时\n  - `<option>`的selected状态改变时\n- onInput: 只作用于`<input>`或`<textarea>`的value发生变化时\n- onSubmit: 表单提交时执行\n\n### 添加onChange事件并输出\n- Index组件中，添加value值，以及绑定onChange事件。（由父组件通过props传递）\n\n``` javascript\n<FormControl type=\"email\" ref=\"email\" value={this.props.email} onChange={this.props.changeInput.bind(null, 'email')} required />\n<FormControl type=\"text\" ref=\"name\" value={this.props.name} onChange={this.props.changeInput.bind(null, 'name')} required />\n```\n\n- IndexController组件中，添加email和name作为状态state，以及事件changeInput\n\n``` javascript\ngetInitialState: function() {\n\treturn {\n\t\tname: '',\n\t\temail: '',\n\t};\n},\nchangeInput: function(name, event) { //通过event获取当前事件，总是最后一个参数传入\n\tswitch(name){\n\t\tcase 'name':\n\t\t\t//通过event.target获取当前元素，再获取value\n\t\t\tthis.setState({name: event.target.value}); \n\t\t\tbreak;\n\t\tcase 'email':\n\t\t\tthis.setState({email: event.target.value});\n\t\t\tbreak;\n\t}\t\t\n},\n```\n\n- IndexController组件中，通过props传递事件以及值给Index组件\n\n``` javascript\n<Index ref=\"index\" asidemenus={this.props.asidemenus} loading={this.state.loading} changeInput={this.changeInput} focusInput={this.focusInput} focusName={this.focusName} email={this.state.email} name={this.state.name} />\n```\n\n- 在flux中通过单向数据流处理\n上一节我们[将react通过flux进行了改造](https://godbasin.github.io/2016/08/21/react-notes-6-use-flux/)，现在我们需要将以上的方法调整来符合flux的单向数据流。具体方法步骤就不介绍了，大家可以到代码中查看。\n\n## 结束语\n-----\n不像Angular的双向绑定，React是单向的数据绑定，故在获取表单值的时候需要另外进行处理呢。\nReact中组件的props和refs属性在父子组件间的通信上有很大的作用哦。\n[此处查看项目代码（仅包含app部分）](https://github.com/godbasin/godbasin.github.io/tree/blog-codes/react-notes/7-form-and-ref)\n[此处查看页面效果](http://o9j9owc7b.bkt.clouddn.com/7-form-and-ref/index.html)","source":"_posts/react-notes-7-form-and-ref.md","raw":"---\ntitle: React使用笔记7--关于Refs和React表单\ndate: 2016-08-27 09:10:49\ncategories: react沙拉\ntags: 笔记\n---\n最近在学习使用React作为前端的框架，《React使用笔记》系列用于记录过程中的一些使用和解决方法。\n本文简单介绍Refs相关，以及记录React表单相关的绑定和focus的过程。\n<!--more-->\n## React Refs\n-----\n### Refs\n为了获取一个到React组件的引用，你可以使用this来得到当前的React组件，或者你可以使用refs来指向一个你拥有的组件。\n- React支持一种非常特殊的属性，你可以用来绑定到render()输出的任何组件上去。\n- Ref属性允许你引用render()返回的相应的支撑实例（ backing instance ）。\n这样就可以确保在任何时间总是拿到正确的实例。\n- 做法很简单：\n  - 1.绑定一个ref属性到render返回的东西上面去，例如：\n\n``` jsx\n<input ref=\"myInput\" />\n```\n\n  - 2、在其它代码中（典型地事件处理代码），通过this.refs获取支撑实例（ backing instance ），就像这样：\n\n``` jsx\nthis.refs.myInput\n```\n\n### findDOMNode()\n为了和浏览器交互，你将需要对DOM节点的引用。React提供了React.findDOMNode(component)函数，你可以调用这个函数来获取该组件的DOM结点。\n- 注意：React v0.14以上版本中，需使用ReactDOM.findDOMNode(component)，且需引入react-don。\n\n``` javascript\nimport ReactDOM from 'react-dom'; //react-dom\n```\n\n- findDOMNode()仅在挂载的组件上有效（也就是说，组件已经被放进了DOM中）。如果你尝试在一个未被挂载的组件上调用这个函数（例如在创建组件的render()函数中调用findDOMNode()），将会抛出异常。\n- 从 render() 中返回的内容并不是实际渲染出来的子组件实例。从 render() 返回的仅仅是子组件层级树实例在特定时间的一个描述。可参考[组件的生命周期](https://godbasin.github.io/2016/08/13/react-notes-3-props-state-lifecycle/)。\n\n### Ref优点\nRefs是一种给指定的子组件实例发送消息的很好的方式，从某种程度上来看，通过props和state来做这件事倒显得不太方便。\n- 可以在组件类里面定义任何公共的方法（比如在输入之前的重置方法），然后通过refs来调用这些公共的方法（比如this.refs.myTypeahead.reset() ）。\n- 管理DOM几乎总是需要冲出“本地”组件的限制，比如通过this.refs.myInput.getDOMNode()获取`<input />`元素的底层DOM节点。Refs是做这件事唯一可靠的方式。\n- Refs是被自动管理的！如果某个子级实例被销毁了，它的ref也会自动销毁。不用考虑内存问题（除非你自己做一些疯狂的操作，保存了什么引用）。\n\n### 参考\n[《关于Refs的更多内容》](http://reactjs.cn/react/docs/more-about-refs.html)\n\n### Flux数据流\n![image](http://o905ne85q.bkt.clouddn.com/bg2016011503.png)\n- store在dispatcher中注册，并提供相应的回调。回调会接收action并把它当成自己的一个参数。\n- 通过调用action来响应用户交互。\n- 当action被触发，回调函数会使用switch语句来解析action中的type参数，并在合适的type下提供钩子来执行内部方法。\n- action通过dispatcher来响应store中的state更新。\n- store更新完成之后，会向应用中广播一个change事件，views可以选择响应事件来重新获取新的数据并更新。\n\n### 参考\n[《Flux 架构入门教程》](http://www.ruanyifeng.com/blog/2016/01/flux.html)\n[《谈一谈我对 React Flux 架构的理解》](http://www.cocoachina.com/webapp/20150928/13600.html)\n\n## 使用Ref属性对表单进行focus\n-----\n这里简述使用Ref属性对表单进行focus的过程。\n\n### Index组件中\n在index的修改资料部分，添加表单，这里使用了react-bootstrap。\n- 给两个input分别加上ref属性\n\n``` jsx\n<FormControl type=\"email\" placeholder=\"Email\" ref=\"email\" required />\n<FormControl type=\"text\" placeholder=\"Name\" ref=\"name\" required />\n```\n\n- 添加两个按钮，绑定点击对input进行focus\n\n``` jsx\n<Button onClick={this.props.focusInput.bind(null, 'email')}>focus邮件</Button>\n<Button onClick={this.props.focusName}>focus名字</Button>\n```\n\n### IndexController组件中\n- 添加子组件ref属性\n  - 在父组件中获取子组件的refs，可通过给子组件添加ref属性来获取子组件，再获取其refs\n  - 该方法可以用在父组件和子组件之间的通信，父组件获取子组件的数据\n\n``` jsx\n<Index ref=\"index\" />\n```\n\n- 添加事件focusInpu和focusName\n\n``` jsx\nfocusInput: function(name){\n\tReactDOM.findDOMNode(this.refs.index.refs[name]).focus(); \n},\nfocusName: function(name){\n\tReactDOM.findDOMNode(this.refs.index.refs.name).focus(); \t\t\n},\n```\n\n这里我们可以看到，refs的获取有两种方法，可以通过refs[name]和refs.name来获取。第一种方法可以帮助我们创建通用的获取方法。\n- 通过props传递方法给子组件\n  - 该方法可用于父组件和子组件之间的通信，子组件获取父组件的数据\n\n``` jsx\n<Index ref=\"index\" focusInput={this.focusInput} focusName={this.focusName} />\n```\n\n此时我们完成了使用refs来控制组件元素的过程。下面将简单讲述一下React中表单组件的onChange事件。\n\n## React表单的onChange\n-----\n诸如`<input>`、`<textarea>`、`<option>`这样的表单组件不同于其他组件，因为他们可以通过用户交互发生变化。这些组件提供的界面使响应用户交互的表单数据处理更加容易。\n\n### 表单事件\nReact中表单事件分别有：\n- onChange: 执行并通过浏览器做出以下响应\n  - `<input>`或`<textarea>`的value发生变化时\n  - `<input>`的checked状态改变时\n  - `<option>`的selected状态改变时\n- onInput: 只作用于`<input>`或`<textarea>`的value发生变化时\n- onSubmit: 表单提交时执行\n\n### 添加onChange事件并输出\n- Index组件中，添加value值，以及绑定onChange事件。（由父组件通过props传递）\n\n``` javascript\n<FormControl type=\"email\" ref=\"email\" value={this.props.email} onChange={this.props.changeInput.bind(null, 'email')} required />\n<FormControl type=\"text\" ref=\"name\" value={this.props.name} onChange={this.props.changeInput.bind(null, 'name')} required />\n```\n\n- IndexController组件中，添加email和name作为状态state，以及事件changeInput\n\n``` javascript\ngetInitialState: function() {\n\treturn {\n\t\tname: '',\n\t\temail: '',\n\t};\n},\nchangeInput: function(name, event) { //通过event获取当前事件，总是最后一个参数传入\n\tswitch(name){\n\t\tcase 'name':\n\t\t\t//通过event.target获取当前元素，再获取value\n\t\t\tthis.setState({name: event.target.value}); \n\t\t\tbreak;\n\t\tcase 'email':\n\t\t\tthis.setState({email: event.target.value});\n\t\t\tbreak;\n\t}\t\t\n},\n```\n\n- IndexController组件中，通过props传递事件以及值给Index组件\n\n``` javascript\n<Index ref=\"index\" asidemenus={this.props.asidemenus} loading={this.state.loading} changeInput={this.changeInput} focusInput={this.focusInput} focusName={this.focusName} email={this.state.email} name={this.state.name} />\n```\n\n- 在flux中通过单向数据流处理\n上一节我们[将react通过flux进行了改造](https://godbasin.github.io/2016/08/21/react-notes-6-use-flux/)，现在我们需要将以上的方法调整来符合flux的单向数据流。具体方法步骤就不介绍了，大家可以到代码中查看。\n\n## 结束语\n-----\n不像Angular的双向绑定，React是单向的数据绑定，故在获取表单值的时候需要另外进行处理呢。\nReact中组件的props和refs属性在父子组件间的通信上有很大的作用哦。\n[此处查看项目代码（仅包含app部分）](https://github.com/godbasin/godbasin.github.io/tree/blog-codes/react-notes/7-form-and-ref)\n[此处查看页面效果](http://o9j9owc7b.bkt.clouddn.com/7-form-and-ref/index.html)","slug":"react-notes-7-form-and-ref","published":1,"updated":"2016-08-28T08:49:41.106Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cix45huhq0046xotu1pt8suy7","content":"<p>最近在学习使用React作为前端的框架，《React使用笔记》系列用于记录过程中的一些使用和解决方法。<br>本文简单介绍Refs相关，以及记录React表单相关的绑定和focus的过程。<br><a id=\"more\"></a></p>\n<h2 id=\"React-Refs\"><a href=\"#React-Refs\" class=\"headerlink\" title=\"React Refs\"></a>React Refs</h2><hr>\n<h3 id=\"Refs\"><a href=\"#Refs\" class=\"headerlink\" title=\"Refs\"></a>Refs</h3><p>为了获取一个到React组件的引用，你可以使用this来得到当前的React组件，或者你可以使用refs来指向一个你拥有的组件。</p>\n<ul>\n<li>React支持一种非常特殊的属性，你可以用来绑定到render()输出的任何组件上去。</li>\n<li>Ref属性允许你引用render()返回的相应的支撑实例（ backing instance ）。<br>这样就可以确保在任何时间总是拿到正确的实例。</li>\n<li>做法很简单：<ul>\n<li>1.绑定一个ref属性到render返回的东西上面去，例如：</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;input ref=<span class=\"string\">\"myInput\"</span> /&gt;</div></pre></td></tr></table></figure>\n<ul>\n<li>2、在其它代码中（典型地事件处理代码），通过this.refs获取支撑实例（ backing instance ），就像这样：</li>\n</ul>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">this</span>.refs.myInput</div></pre></td></tr></table></figure>\n<h3 id=\"findDOMNode\"><a href=\"#findDOMNode\" class=\"headerlink\" title=\"findDOMNode()\"></a>findDOMNode()</h3><p>为了和浏览器交互，你将需要对DOM节点的引用。React提供了React.findDOMNode(component)函数，你可以调用这个函数来获取该组件的DOM结点。</p>\n<ul>\n<li>注意：React v0.14以上版本中，需使用ReactDOM.findDOMNode(component)，且需引入react-don。</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> ReactDOM <span class=\"keyword\">from</span> <span class=\"string\">'react-dom'</span>; <span class=\"comment\">//react-dom</span></div></pre></td></tr></table></figure>\n<ul>\n<li>findDOMNode()仅在挂载的组件上有效（也就是说，组件已经被放进了DOM中）。如果你尝试在一个未被挂载的组件上调用这个函数（例如在创建组件的render()函数中调用findDOMNode()），将会抛出异常。</li>\n<li>从 render() 中返回的内容并不是实际渲染出来的子组件实例。从 render() 返回的仅仅是子组件层级树实例在特定时间的一个描述。可参考<a href=\"https://godbasin.github.io/2016/08/13/react-notes-3-props-state-lifecycle/\">组件的生命周期</a>。</li>\n</ul>\n<h3 id=\"Ref优点\"><a href=\"#Ref优点\" class=\"headerlink\" title=\"Ref优点\"></a>Ref优点</h3><p>Refs是一种给指定的子组件实例发送消息的很好的方式，从某种程度上来看，通过props和state来做这件事倒显得不太方便。</p>\n<ul>\n<li>可以在组件类里面定义任何公共的方法（比如在输入之前的重置方法），然后通过refs来调用这些公共的方法（比如this.refs.myTypeahead.reset() ）。</li>\n<li>管理DOM几乎总是需要冲出“本地”组件的限制，比如通过this.refs.myInput.getDOMNode()获取<code>&lt;input /&gt;</code>元素的底层DOM节点。Refs是做这件事唯一可靠的方式。</li>\n<li>Refs是被自动管理的！如果某个子级实例被销毁了，它的ref也会自动销毁。不用考虑内存问题（除非你自己做一些疯狂的操作，保存了什么引用）。</li>\n</ul>\n<h3 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h3><p><a href=\"http://reactjs.cn/react/docs/more-about-refs.html\" target=\"_blank\" rel=\"external\">《关于Refs的更多内容》</a></p>\n<h3 id=\"Flux数据流\"><a href=\"#Flux数据流\" class=\"headerlink\" title=\"Flux数据流\"></a>Flux数据流</h3><p><img src=\"http://o905ne85q.bkt.clouddn.com/bg2016011503.png\" alt=\"image\"></p>\n<ul>\n<li>store在dispatcher中注册，并提供相应的回调。回调会接收action并把它当成自己的一个参数。</li>\n<li>通过调用action来响应用户交互。</li>\n<li>当action被触发，回调函数会使用switch语句来解析action中的type参数，并在合适的type下提供钩子来执行内部方法。</li>\n<li>action通过dispatcher来响应store中的state更新。</li>\n<li>store更新完成之后，会向应用中广播一个change事件，views可以选择响应事件来重新获取新的数据并更新。</li>\n</ul>\n<h3 id=\"参考-1\"><a href=\"#参考-1\" class=\"headerlink\" title=\"参考\"></a>参考</h3><p><a href=\"http://www.ruanyifeng.com/blog/2016/01/flux.html\" target=\"_blank\" rel=\"external\">《Flux 架构入门教程》</a><br><a href=\"http://www.cocoachina.com/webapp/20150928/13600.html\" target=\"_blank\" rel=\"external\">《谈一谈我对 React Flux 架构的理解》</a></p>\n<h2 id=\"使用Ref属性对表单进行focus\"><a href=\"#使用Ref属性对表单进行focus\" class=\"headerlink\" title=\"使用Ref属性对表单进行focus\"></a>使用Ref属性对表单进行focus</h2><hr>\n<p>这里简述使用Ref属性对表单进行focus的过程。</p>\n<h3 id=\"Index组件中\"><a href=\"#Index组件中\" class=\"headerlink\" title=\"Index组件中\"></a>Index组件中</h3><p>在index的修改资料部分，添加表单，这里使用了react-bootstrap。</p>\n<ul>\n<li>给两个input分别加上ref属性</li>\n</ul>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;FormControl type=<span class=\"string\">\"email\"</span> placeholder=<span class=\"string\">\"Email\"</span> ref=<span class=\"string\">\"email\"</span> required /&gt;</div><div class=\"line\"><span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">FormControl</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text\"</span> <span class=\"attr\">placeholder</span>=<span class=\"string\">\"Name\"</span> <span class=\"attr\">ref</span>=<span class=\"string\">\"name\"</span> <span class=\"attr\">required</span> /&gt;</span></span></div></pre></td></tr></table></figure>\n<ul>\n<li>添加两个按钮，绑定点击对input进行focus</li>\n</ul>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;Button onClick=&#123;this.props.focusInput.bind(null, 'email')&#125;&gt;focus邮件&lt;/Button&gt;</div><div class=\"line\">&lt;Button onClick=&#123;this.props.focusName&#125;&gt;focus名字&lt;/Button&gt;</div></pre></td></tr></table></figure>\n<h3 id=\"IndexController组件中\"><a href=\"#IndexController组件中\" class=\"headerlink\" title=\"IndexController组件中\"></a>IndexController组件中</h3><ul>\n<li>添加子组件ref属性<ul>\n<li>在父组件中获取子组件的refs，可通过给子组件添加ref属性来获取子组件，再获取其refs</li>\n<li>该方法可以用在父组件和子组件之间的通信，父组件获取子组件的数据</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;Index ref=<span class=\"string\">\"index\"</span> /&gt;</div></pre></td></tr></table></figure>\n<ul>\n<li>添加事件focusInpu和focusName</li>\n</ul>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">focusInput: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">name</span>)</span>&#123;</div><div class=\"line\">  ReactDOM.findDOMNode(<span class=\"keyword\">this</span>.refs.index.refs[name]).focus(); </div><div class=\"line\">&#125;,</div><div class=\"line\"><span class=\"attr\">focusName</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">name</span>)</span>&#123;</div><div class=\"line\">  ReactDOM.findDOMNode(<span class=\"keyword\">this</span>.refs.index.refs.name).focus(); \t\t</div><div class=\"line\">&#125;,</div></pre></td></tr></table></figure>\n<p>这里我们可以看到，refs的获取有两种方法，可以通过refs[name]和refs.name来获取。第一种方法可以帮助我们创建通用的获取方法。</p>\n<ul>\n<li>通过props传递方法给子组件<ul>\n<li>该方法可用于父组件和子组件之间的通信，子组件获取父组件的数据</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;Index ref=<span class=\"string\">\"index\"</span> focusInput=&#123;<span class=\"keyword\">this</span>.focusInput&#125; focusName=&#123;<span class=\"keyword\">this</span>.focusName&#125; /&gt;</div></pre></td></tr></table></figure>\n<p>此时我们完成了使用refs来控制组件元素的过程。下面将简单讲述一下React中表单组件的onChange事件。</p>\n<h2 id=\"React表单的onChange\"><a href=\"#React表单的onChange\" class=\"headerlink\" title=\"React表单的onChange\"></a>React表单的onChange</h2><hr>\n<p>诸如<code>&lt;input&gt;</code>、<code>&lt;textarea&gt;</code>、<code>&lt;option&gt;</code>这样的表单组件不同于其他组件，因为他们可以通过用户交互发生变化。这些组件提供的界面使响应用户交互的表单数据处理更加容易。</p>\n<h3 id=\"表单事件\"><a href=\"#表单事件\" class=\"headerlink\" title=\"表单事件\"></a>表单事件</h3><p>React中表单事件分别有：</p>\n<ul>\n<li>onChange: 执行并通过浏览器做出以下响应<ul>\n<li><code>&lt;input&gt;</code>或<code>&lt;textarea&gt;</code>的value发生变化时</li>\n<li><code>&lt;input&gt;</code>的checked状态改变时</li>\n<li><code>&lt;option&gt;</code>的selected状态改变时</li>\n</ul>\n</li>\n<li>onInput: 只作用于<code>&lt;input&gt;</code>或<code>&lt;textarea&gt;</code>的value发生变化时</li>\n<li>onSubmit: 表单提交时执行</li>\n</ul>\n<h3 id=\"添加onChange事件并输出\"><a href=\"#添加onChange事件并输出\" class=\"headerlink\" title=\"添加onChange事件并输出\"></a>添加onChange事件并输出</h3><ul>\n<li>Index组件中，添加value值，以及绑定onChange事件。（由父组件通过props传递）</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;FormControl type=<span class=\"string\">\"email\"</span> ref=<span class=\"string\">\"email\"</span> value=&#123;<span class=\"keyword\">this</span>.props.email&#125; onChange=&#123;<span class=\"keyword\">this</span>.props.changeInput.bind(<span class=\"literal\">null</span>, <span class=\"string\">'email'</span>)&#125; required /&gt;</div><div class=\"line\"><span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">FormControl</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text\"</span> <span class=\"attr\">ref</span>=<span class=\"string\">\"name\"</span> <span class=\"attr\">value</span>=<span class=\"string\">&#123;this.props.name&#125;</span> <span class=\"attr\">onChange</span>=<span class=\"string\">&#123;this.props.changeInput.bind(null,</span> '<span class=\"attr\">name</span>')&#125; <span class=\"attr\">required</span> /&gt;</span></span></div></pre></td></tr></table></figure>\n<ul>\n<li>IndexController组件中，添加email和name作为状态state，以及事件changeInput</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\">getInitialState: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> &#123;</div><div class=\"line\">    <span class=\"attr\">name</span>: <span class=\"string\">''</span>,</div><div class=\"line\">    <span class=\"attr\">email</span>: <span class=\"string\">''</span>,</div><div class=\"line\">  &#125;;</div><div class=\"line\">&#125;,</div><div class=\"line\"><span class=\"attr\">changeInput</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">name, event</span>) </span>&#123; <span class=\"comment\">//通过event获取当前事件，总是最后一个参数传入</span></div><div class=\"line\">  <span class=\"keyword\">switch</span>(name)&#123;</div><div class=\"line\">    <span class=\"keyword\">case</span> <span class=\"string\">'name'</span>:</div><div class=\"line\">      <span class=\"comment\">//通过event.target获取当前元素，再获取value</span></div><div class=\"line\">      <span class=\"keyword\">this</span>.setState(&#123;<span class=\"attr\">name</span>: event.target.value&#125;); </div><div class=\"line\">      <span class=\"keyword\">break</span>;</div><div class=\"line\">    <span class=\"keyword\">case</span> <span class=\"string\">'email'</span>:</div><div class=\"line\">      <span class=\"keyword\">this</span>.setState(&#123;<span class=\"attr\">email</span>: event.target.value&#125;);</div><div class=\"line\">      <span class=\"keyword\">break</span>;</div><div class=\"line\">  &#125;\t\t</div><div class=\"line\">&#125;,</div></pre></td></tr></table></figure>\n<ul>\n<li>IndexController组件中，通过props传递事件以及值给Index组件</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;Index ref=<span class=\"string\">\"index\"</span> asidemenus=&#123;<span class=\"keyword\">this</span>.props.asidemenus&#125; loading=&#123;<span class=\"keyword\">this</span>.state.loading&#125; changeInput=&#123;<span class=\"keyword\">this</span>.changeInput&#125; focusInput=&#123;<span class=\"keyword\">this</span>.focusInput&#125; focusName=&#123;<span class=\"keyword\">this</span>.focusName&#125; email=&#123;<span class=\"keyword\">this</span>.state.email&#125; name=&#123;<span class=\"keyword\">this</span>.state.name&#125; /&gt;</div></pre></td></tr></table></figure>\n<ul>\n<li>在flux中通过单向数据流处理<br>上一节我们<a href=\"https://godbasin.github.io/2016/08/21/react-notes-6-use-flux/\">将react通过flux进行了改造</a>，现在我们需要将以上的方法调整来符合flux的单向数据流。具体方法步骤就不介绍了，大家可以到代码中查看。</li>\n</ul>\n<h2 id=\"结束语\"><a href=\"#结束语\" class=\"headerlink\" title=\"结束语\"></a>结束语</h2><hr>\n<p>不像Angular的双向绑定，React是单向的数据绑定，故在获取表单值的时候需要另外进行处理呢。<br>React中组件的props和refs属性在父子组件间的通信上有很大的作用哦。<br><a href=\"https://github.com/godbasin/godbasin.github.io/tree/blog-codes/react-notes/7-form-and-ref\" target=\"_blank\" rel=\"external\">此处查看项目代码（仅包含app部分）</a><br><a href=\"http://o9j9owc7b.bkt.clouddn.com/7-form-and-ref/index.html\" target=\"_blank\" rel=\"external\">此处查看页面效果</a></p>\n","excerpt":"<p>最近在学习使用React作为前端的框架，《React使用笔记》系列用于记录过程中的一些使用和解决方法。<br>本文简单介绍Refs相关，以及记录React表单相关的绑定和focus的过程。<br>","more":"</p>\n<h2 id=\"React-Refs\"><a href=\"#React-Refs\" class=\"headerlink\" title=\"React Refs\"></a>React Refs</h2><hr>\n<h3 id=\"Refs\"><a href=\"#Refs\" class=\"headerlink\" title=\"Refs\"></a>Refs</h3><p>为了获取一个到React组件的引用，你可以使用this来得到当前的React组件，或者你可以使用refs来指向一个你拥有的组件。</p>\n<ul>\n<li>React支持一种非常特殊的属性，你可以用来绑定到render()输出的任何组件上去。</li>\n<li>Ref属性允许你引用render()返回的相应的支撑实例（ backing instance ）。<br>这样就可以确保在任何时间总是拿到正确的实例。</li>\n<li>做法很简单：<ul>\n<li>1.绑定一个ref属性到render返回的东西上面去，例如：</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;input ref=<span class=\"string\">\"myInput\"</span> /&gt;</div></pre></td></tr></table></figure>\n<ul>\n<li>2、在其它代码中（典型地事件处理代码），通过this.refs获取支撑实例（ backing instance ），就像这样：</li>\n</ul>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">this</span>.refs.myInput</div></pre></td></tr></table></figure>\n<h3 id=\"findDOMNode\"><a href=\"#findDOMNode\" class=\"headerlink\" title=\"findDOMNode()\"></a>findDOMNode()</h3><p>为了和浏览器交互，你将需要对DOM节点的引用。React提供了React.findDOMNode(component)函数，你可以调用这个函数来获取该组件的DOM结点。</p>\n<ul>\n<li>注意：React v0.14以上版本中，需使用ReactDOM.findDOMNode(component)，且需引入react-don。</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> ReactDOM <span class=\"keyword\">from</span> <span class=\"string\">'react-dom'</span>; <span class=\"comment\">//react-dom</span></div></pre></td></tr></table></figure>\n<ul>\n<li>findDOMNode()仅在挂载的组件上有效（也就是说，组件已经被放进了DOM中）。如果你尝试在一个未被挂载的组件上调用这个函数（例如在创建组件的render()函数中调用findDOMNode()），将会抛出异常。</li>\n<li>从 render() 中返回的内容并不是实际渲染出来的子组件实例。从 render() 返回的仅仅是子组件层级树实例在特定时间的一个描述。可参考<a href=\"https://godbasin.github.io/2016/08/13/react-notes-3-props-state-lifecycle/\">组件的生命周期</a>。</li>\n</ul>\n<h3 id=\"Ref优点\"><a href=\"#Ref优点\" class=\"headerlink\" title=\"Ref优点\"></a>Ref优点</h3><p>Refs是一种给指定的子组件实例发送消息的很好的方式，从某种程度上来看，通过props和state来做这件事倒显得不太方便。</p>\n<ul>\n<li>可以在组件类里面定义任何公共的方法（比如在输入之前的重置方法），然后通过refs来调用这些公共的方法（比如this.refs.myTypeahead.reset() ）。</li>\n<li>管理DOM几乎总是需要冲出“本地”组件的限制，比如通过this.refs.myInput.getDOMNode()获取<code>&lt;input /&gt;</code>元素的底层DOM节点。Refs是做这件事唯一可靠的方式。</li>\n<li>Refs是被自动管理的！如果某个子级实例被销毁了，它的ref也会自动销毁。不用考虑内存问题（除非你自己做一些疯狂的操作，保存了什么引用）。</li>\n</ul>\n<h3 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h3><p><a href=\"http://reactjs.cn/react/docs/more-about-refs.html\">《关于Refs的更多内容》</a></p>\n<h3 id=\"Flux数据流\"><a href=\"#Flux数据流\" class=\"headerlink\" title=\"Flux数据流\"></a>Flux数据流</h3><p><img src=\"http://o905ne85q.bkt.clouddn.com/bg2016011503.png\" alt=\"image\"></p>\n<ul>\n<li>store在dispatcher中注册，并提供相应的回调。回调会接收action并把它当成自己的一个参数。</li>\n<li>通过调用action来响应用户交互。</li>\n<li>当action被触发，回调函数会使用switch语句来解析action中的type参数，并在合适的type下提供钩子来执行内部方法。</li>\n<li>action通过dispatcher来响应store中的state更新。</li>\n<li>store更新完成之后，会向应用中广播一个change事件，views可以选择响应事件来重新获取新的数据并更新。</li>\n</ul>\n<h3 id=\"参考-1\"><a href=\"#参考-1\" class=\"headerlink\" title=\"参考\"></a>参考</h3><p><a href=\"http://www.ruanyifeng.com/blog/2016/01/flux.html\">《Flux 架构入门教程》</a><br><a href=\"http://www.cocoachina.com/webapp/20150928/13600.html\">《谈一谈我对 React Flux 架构的理解》</a></p>\n<h2 id=\"使用Ref属性对表单进行focus\"><a href=\"#使用Ref属性对表单进行focus\" class=\"headerlink\" title=\"使用Ref属性对表单进行focus\"></a>使用Ref属性对表单进行focus</h2><hr>\n<p>这里简述使用Ref属性对表单进行focus的过程。</p>\n<h3 id=\"Index组件中\"><a href=\"#Index组件中\" class=\"headerlink\" title=\"Index组件中\"></a>Index组件中</h3><p>在index的修改资料部分，添加表单，这里使用了react-bootstrap。</p>\n<ul>\n<li>给两个input分别加上ref属性</li>\n</ul>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;FormControl type=<span class=\"string\">\"email\"</span> placeholder=<span class=\"string\">\"Email\"</span> ref=<span class=\"string\">\"email\"</span> required /&gt;</div><div class=\"line\"><span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">FormControl</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text\"</span> <span class=\"attr\">placeholder</span>=<span class=\"string\">\"Name\"</span> <span class=\"attr\">ref</span>=<span class=\"string\">\"name\"</span> <span class=\"attr\">required</span> /&gt;</span></span></div></pre></td></tr></table></figure>\n<ul>\n<li>添加两个按钮，绑定点击对input进行focus</li>\n</ul>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;Button onClick=&#123;this.props.focusInput.bind(null, 'email')&#125;&gt;focus邮件&lt;/Button&gt;</div><div class=\"line\">&lt;Button onClick=&#123;this.props.focusName&#125;&gt;focus名字&lt;/Button&gt;</div></pre></td></tr></table></figure>\n<h3 id=\"IndexController组件中\"><a href=\"#IndexController组件中\" class=\"headerlink\" title=\"IndexController组件中\"></a>IndexController组件中</h3><ul>\n<li>添加子组件ref属性<ul>\n<li>在父组件中获取子组件的refs，可通过给子组件添加ref属性来获取子组件，再获取其refs</li>\n<li>该方法可以用在父组件和子组件之间的通信，父组件获取子组件的数据</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;Index ref=<span class=\"string\">\"index\"</span> /&gt;</div></pre></td></tr></table></figure>\n<ul>\n<li>添加事件focusInpu和focusName</li>\n</ul>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">focusInput: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">name</span>)</span>&#123;</div><div class=\"line\">  ReactDOM.findDOMNode(<span class=\"keyword\">this</span>.refs.index.refs[name]).focus(); </div><div class=\"line\">&#125;,</div><div class=\"line\"><span class=\"attr\">focusName</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">name</span>)</span>&#123;</div><div class=\"line\">  ReactDOM.findDOMNode(<span class=\"keyword\">this</span>.refs.index.refs.name).focus(); \t\t</div><div class=\"line\">&#125;,</div></pre></td></tr></table></figure>\n<p>这里我们可以看到，refs的获取有两种方法，可以通过refs[name]和refs.name来获取。第一种方法可以帮助我们创建通用的获取方法。</p>\n<ul>\n<li>通过props传递方法给子组件<ul>\n<li>该方法可用于父组件和子组件之间的通信，子组件获取父组件的数据</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;Index ref=<span class=\"string\">\"index\"</span> focusInput=&#123;<span class=\"keyword\">this</span>.focusInput&#125; focusName=&#123;<span class=\"keyword\">this</span>.focusName&#125; /&gt;</div></pre></td></tr></table></figure>\n<p>此时我们完成了使用refs来控制组件元素的过程。下面将简单讲述一下React中表单组件的onChange事件。</p>\n<h2 id=\"React表单的onChange\"><a href=\"#React表单的onChange\" class=\"headerlink\" title=\"React表单的onChange\"></a>React表单的onChange</h2><hr>\n<p>诸如<code>&lt;input&gt;</code>、<code>&lt;textarea&gt;</code>、<code>&lt;option&gt;</code>这样的表单组件不同于其他组件，因为他们可以通过用户交互发生变化。这些组件提供的界面使响应用户交互的表单数据处理更加容易。</p>\n<h3 id=\"表单事件\"><a href=\"#表单事件\" class=\"headerlink\" title=\"表单事件\"></a>表单事件</h3><p>React中表单事件分别有：</p>\n<ul>\n<li>onChange: 执行并通过浏览器做出以下响应<ul>\n<li><code>&lt;input&gt;</code>或<code>&lt;textarea&gt;</code>的value发生变化时</li>\n<li><code>&lt;input&gt;</code>的checked状态改变时</li>\n<li><code>&lt;option&gt;</code>的selected状态改变时</li>\n</ul>\n</li>\n<li>onInput: 只作用于<code>&lt;input&gt;</code>或<code>&lt;textarea&gt;</code>的value发生变化时</li>\n<li>onSubmit: 表单提交时执行</li>\n</ul>\n<h3 id=\"添加onChange事件并输出\"><a href=\"#添加onChange事件并输出\" class=\"headerlink\" title=\"添加onChange事件并输出\"></a>添加onChange事件并输出</h3><ul>\n<li>Index组件中，添加value值，以及绑定onChange事件。（由父组件通过props传递）</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;FormControl type=<span class=\"string\">\"email\"</span> ref=<span class=\"string\">\"email\"</span> value=&#123;<span class=\"keyword\">this</span>.props.email&#125; onChange=&#123;<span class=\"keyword\">this</span>.props.changeInput.bind(<span class=\"literal\">null</span>, <span class=\"string\">'email'</span>)&#125; required /&gt;</div><div class=\"line\"><span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">FormControl</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text\"</span> <span class=\"attr\">ref</span>=<span class=\"string\">\"name\"</span> <span class=\"attr\">value</span>=<span class=\"string\">&#123;this.props.name&#125;</span> <span class=\"attr\">onChange</span>=<span class=\"string\">&#123;this.props.changeInput.bind(null,</span> '<span class=\"attr\">name</span>')&#125; <span class=\"attr\">required</span> /&gt;</span></span></div></pre></td></tr></table></figure>\n<ul>\n<li>IndexController组件中，添加email和name作为状态state，以及事件changeInput</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\">getInitialState: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> &#123;</div><div class=\"line\">    <span class=\"attr\">name</span>: <span class=\"string\">''</span>,</div><div class=\"line\">    <span class=\"attr\">email</span>: <span class=\"string\">''</span>,</div><div class=\"line\">  &#125;;</div><div class=\"line\">&#125;,</div><div class=\"line\"><span class=\"attr\">changeInput</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">name, event</span>) </span>&#123; <span class=\"comment\">//通过event获取当前事件，总是最后一个参数传入</span></div><div class=\"line\">  <span class=\"keyword\">switch</span>(name)&#123;</div><div class=\"line\">    <span class=\"keyword\">case</span> <span class=\"string\">'name'</span>:</div><div class=\"line\">      <span class=\"comment\">//通过event.target获取当前元素，再获取value</span></div><div class=\"line\">      <span class=\"keyword\">this</span>.setState(&#123;<span class=\"attr\">name</span>: event.target.value&#125;); </div><div class=\"line\">      <span class=\"keyword\">break</span>;</div><div class=\"line\">    <span class=\"keyword\">case</span> <span class=\"string\">'email'</span>:</div><div class=\"line\">      <span class=\"keyword\">this</span>.setState(&#123;<span class=\"attr\">email</span>: event.target.value&#125;);</div><div class=\"line\">      <span class=\"keyword\">break</span>;</div><div class=\"line\">  &#125;\t\t</div><div class=\"line\">&#125;,</div></pre></td></tr></table></figure>\n<ul>\n<li>IndexController组件中，通过props传递事件以及值给Index组件</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;Index ref=<span class=\"string\">\"index\"</span> asidemenus=&#123;<span class=\"keyword\">this</span>.props.asidemenus&#125; loading=&#123;<span class=\"keyword\">this</span>.state.loading&#125; changeInput=&#123;<span class=\"keyword\">this</span>.changeInput&#125; focusInput=&#123;<span class=\"keyword\">this</span>.focusInput&#125; focusName=&#123;<span class=\"keyword\">this</span>.focusName&#125; email=&#123;<span class=\"keyword\">this</span>.state.email&#125; name=&#123;<span class=\"keyword\">this</span>.state.name&#125; /&gt;</div></pre></td></tr></table></figure>\n<ul>\n<li>在flux中通过单向数据流处理<br>上一节我们<a href=\"https://godbasin.github.io/2016/08/21/react-notes-6-use-flux/\">将react通过flux进行了改造</a>，现在我们需要将以上的方法调整来符合flux的单向数据流。具体方法步骤就不介绍了，大家可以到代码中查看。</li>\n</ul>\n<h2 id=\"结束语\"><a href=\"#结束语\" class=\"headerlink\" title=\"结束语\"></a>结束语</h2><hr>\n<p>不像Angular的双向绑定，React是单向的数据绑定，故在获取表单值的时候需要另外进行处理呢。<br>React中组件的props和refs属性在父子组件间的通信上有很大的作用哦。<br><a href=\"https://github.com/godbasin/godbasin.github.io/tree/blog-codes/react-notes/7-form-and-ref\">此处查看项目代码（仅包含app部分）</a><br><a href=\"http://o9j9owc7b.bkt.clouddn.com/7-form-and-ref/index.html\">此处查看页面效果</a></p>"},{"title":"React使用笔记8--组件间的通信","date":"2016-08-28T02:15:16.000Z","_content":"最近在学习使用React作为前端的框架，《React使用笔记》系列用于记录过程中的一些使用和解决方法。\n本文结合前面出现过的一些方法，简单介绍组件间的通信。\n<!--more-->\n## 父组件与子组件\n-----\n### 父-子 通信\n- 利用props属性\n父组件利用props向子组件传值，在使用React开发的过程中经常会使用到。\n\n``` jsx\n//父组件\nvar Parent = React.createClass({\n\tgetInitialState: function () {\n\t\treturn {\n\t\t\tparent: 'from parent'\n\t\t};\n\t},  \n\trender: function() {\n\t\treturn (\n\t\t\t<Child parent={this.state.parent} />\n\t\t);\n\t}\n});\n\n// 子组件\nvar Child = React.createClass({\n\trender: function () {\n\t\t// 从父组件获取的值\n\t\tvar parent = this.props.parent;\n\t\treturn (\n\t\t\t<p>{parent}</p>\n\t\t);\n\t}\n});\n```\n\n如果组件嵌套层次太深，那么从外到内组件的交流成本就变得很高，通过props传递值的优势就不那么明显了。\n- 利用refs属性\nrefs属性可获取子组件，当然父组件可以通过调用子组件的方法来给子组件传值。\n\n``` jsx\n//父组件\nvar Parent = React.createClass({\n\tchangeChild: function(){\n\t\t// 通过refs属性调用子组件方法改变子组件的值\n\t\tthis.refs.child.setState({child: 'now from parent'});\n\t},\n\trender: function() {\n\t\treturn (\n\t\t\t<div>\n\t\t\t\t//子组件绑定ref属性\n\t\t\t\t<Child ref=\"child\" />\n\t\t\t\t<button onClick={this.changeChild} />\n\t\t\t</div>\n\t\t);\n\t}\n});\n\n// 子组件\nvar Child = React.createClass({\n\tgetInitialState: function () {\n\t\treturn {\n\t\t\tchild: 'from child',\n\t\t};\n\t},  \n\trender: function () {\n\t\treturn (\n\t\t\t<p>{this.state.child}</p>\t\t\n\t\t);\n\t}\n});\n```\n\n### 子-父 通信\n- 利用props属性\n既然父组件可以通过props属性向子组件传值，子组件可用父组件的方法反向给父组件传值。\n\n``` jsx\n//父组件\nvar Parent = React.createClass({\n\tgetInitialState: function () {\n\t\treturn {\n\t\t\tparent: 'from parent',\n\t\t\tchild: '',\n\t\t};\n\t},  \n\tgetFromChild: function(value){\n\t\t//子组件调用该方法返回值\n\t\tthis.setState({child: value});\n\t},\n\trender: function() {\n\t\treturn (\n\t\t\t<div>\n\t\t\t\t<p>child: {this.state.child}</p>\n\t\t\t\t<Child parent={this.state.parent} getFromChild={this.getFromChild} />\n\t\t\t</div>\n\t\t);\n\t}\n});\n\n// 子组件\nvar Child = React.createClass({\n\trender: function () {\n\t\t// 从父组件获取的值\n\t\tvar parent = this.props.parent;\n\t\treturn (\n\t\t\t<p>{parent}</p>\n\t\t\t// 从父组件获取的方法返回值\n\t\t\t<button onClick={this.props.getFromChild.bind(null,'form child')} />\n\t\t);\n\t}\n});\n```\n\n- 利用refs属性\nrefs属性允许你引用render()返回的相应的支撑实例。该属性多用于获取子组件的真实DOM元素。\n\n``` jsx\n//父组件\nvar Parent = React.createClass({\n\tgetInitialState: function () {\n\t\treturn {\n\t\t\tparent: 'from parent',\n\t\t\tchild: '',\n\t\t};\n\t},  \n\tgetFromChild: function(){\n\t\t// 通过refs属性从子组件获取state状态\n\t\tthis.setState({child: this.refs.child.state.child});\n\t},\n\trender: function() {\n\t\treturn (\n\t\t\t<div>\n\t\t\t\t<p>child: {this.state.child}</p>\n\t\t\t\t//子组件绑定ref属性\n\t\t\t\t<Child ref=\"child\" parent={this.state.parent} getFromChild={this.getFromChild} />\n\t\t\t</div>\n\t\t);\n\t}\n});\n\n// 子组件\nvar Child = React.createClass({\n\tgetInitialState: function () {\n\t\treturn {\n\t\t\tchild: 'from child',\n\t\t};\n\t},  \n\trender: function () {\n\t\t// 从父组件获取的值\n\t\tvar parent = this.props.parent;\n\t\treturn (\n\t\t\t<p>{parent}</p>\n\t\t\t<button onClick={this.props.getFromChild} />\n\t\t);\n\t}\n});\n```\n\n## 通用组件之间传值\n-----\n如果组件之间没有任何关系，组件嵌套层次比较深，或者你为了一些组件能够订阅、写入一些信号，不想让组件之间插入一个组件，让两个组件处于独立的关系时，我们可以使用下面的方法。\n\n### Event\n``` jsx\n//使用EventEmitter\nimport {EventEmitter} from 'events';\nEventEmitter.prototype.emit() //发送事件\nEventEmitter.prototype.on() //捕获事件\n//使用EventListener\naddEventListener() //捕获change事件\nvar event =  Document.createEvent(); //创建事件\ndispatchEvent(event) //发送事件\n```\n\n### Pub/Sub\n全局广播的方式来处理事件，可参考Redux。\n\n### 单向数据流\n可以创建单向数据流，使用一个数据中心管理，可参考Flux。\n\n### Events in React\n使用 React 事件的时候，必须关注下面两个方法：\n``` jsx\ncomponentDidMount\ncomponentWillUnmount\n```\n在componentDidMount事件中，如果组件挂载（mounted）完成，再订阅事件。\n当组件卸载（unmounted）的时候，在componentWillUnmount事件中取消事件的订阅。\n\n### 参考\n[《React 组件之间如何交流》](http://www.tuicool.com/articles/AzQzEbq)\n\n## 结束语\n-----\nReact中没有像Angular中服务的概念，这也是因为React只是View层的原因吧。数据的流动和共享方面我们需要自己想办法，又或者是借助Flux、Redux等的模式来管理数据。","source":"_posts/react-notes-8-conmunicate-in-react.md","raw":"---\ntitle: React使用笔记8--组件间的通信\ndate: 2016-08-28 10:15:16\ncategories: react沙拉\ntags: 笔记\n---\n最近在学习使用React作为前端的框架，《React使用笔记》系列用于记录过程中的一些使用和解决方法。\n本文结合前面出现过的一些方法，简单介绍组件间的通信。\n<!--more-->\n## 父组件与子组件\n-----\n### 父-子 通信\n- 利用props属性\n父组件利用props向子组件传值，在使用React开发的过程中经常会使用到。\n\n``` jsx\n//父组件\nvar Parent = React.createClass({\n\tgetInitialState: function () {\n\t\treturn {\n\t\t\tparent: 'from parent'\n\t\t};\n\t},  \n\trender: function() {\n\t\treturn (\n\t\t\t<Child parent={this.state.parent} />\n\t\t);\n\t}\n});\n\n// 子组件\nvar Child = React.createClass({\n\trender: function () {\n\t\t// 从父组件获取的值\n\t\tvar parent = this.props.parent;\n\t\treturn (\n\t\t\t<p>{parent}</p>\n\t\t);\n\t}\n});\n```\n\n如果组件嵌套层次太深，那么从外到内组件的交流成本就变得很高，通过props传递值的优势就不那么明显了。\n- 利用refs属性\nrefs属性可获取子组件，当然父组件可以通过调用子组件的方法来给子组件传值。\n\n``` jsx\n//父组件\nvar Parent = React.createClass({\n\tchangeChild: function(){\n\t\t// 通过refs属性调用子组件方法改变子组件的值\n\t\tthis.refs.child.setState({child: 'now from parent'});\n\t},\n\trender: function() {\n\t\treturn (\n\t\t\t<div>\n\t\t\t\t//子组件绑定ref属性\n\t\t\t\t<Child ref=\"child\" />\n\t\t\t\t<button onClick={this.changeChild} />\n\t\t\t</div>\n\t\t);\n\t}\n});\n\n// 子组件\nvar Child = React.createClass({\n\tgetInitialState: function () {\n\t\treturn {\n\t\t\tchild: 'from child',\n\t\t};\n\t},  \n\trender: function () {\n\t\treturn (\n\t\t\t<p>{this.state.child}</p>\t\t\n\t\t);\n\t}\n});\n```\n\n### 子-父 通信\n- 利用props属性\n既然父组件可以通过props属性向子组件传值，子组件可用父组件的方法反向给父组件传值。\n\n``` jsx\n//父组件\nvar Parent = React.createClass({\n\tgetInitialState: function () {\n\t\treturn {\n\t\t\tparent: 'from parent',\n\t\t\tchild: '',\n\t\t};\n\t},  \n\tgetFromChild: function(value){\n\t\t//子组件调用该方法返回值\n\t\tthis.setState({child: value});\n\t},\n\trender: function() {\n\t\treturn (\n\t\t\t<div>\n\t\t\t\t<p>child: {this.state.child}</p>\n\t\t\t\t<Child parent={this.state.parent} getFromChild={this.getFromChild} />\n\t\t\t</div>\n\t\t);\n\t}\n});\n\n// 子组件\nvar Child = React.createClass({\n\trender: function () {\n\t\t// 从父组件获取的值\n\t\tvar parent = this.props.parent;\n\t\treturn (\n\t\t\t<p>{parent}</p>\n\t\t\t// 从父组件获取的方法返回值\n\t\t\t<button onClick={this.props.getFromChild.bind(null,'form child')} />\n\t\t);\n\t}\n});\n```\n\n- 利用refs属性\nrefs属性允许你引用render()返回的相应的支撑实例。该属性多用于获取子组件的真实DOM元素。\n\n``` jsx\n//父组件\nvar Parent = React.createClass({\n\tgetInitialState: function () {\n\t\treturn {\n\t\t\tparent: 'from parent',\n\t\t\tchild: '',\n\t\t};\n\t},  \n\tgetFromChild: function(){\n\t\t// 通过refs属性从子组件获取state状态\n\t\tthis.setState({child: this.refs.child.state.child});\n\t},\n\trender: function() {\n\t\treturn (\n\t\t\t<div>\n\t\t\t\t<p>child: {this.state.child}</p>\n\t\t\t\t//子组件绑定ref属性\n\t\t\t\t<Child ref=\"child\" parent={this.state.parent} getFromChild={this.getFromChild} />\n\t\t\t</div>\n\t\t);\n\t}\n});\n\n// 子组件\nvar Child = React.createClass({\n\tgetInitialState: function () {\n\t\treturn {\n\t\t\tchild: 'from child',\n\t\t};\n\t},  \n\trender: function () {\n\t\t// 从父组件获取的值\n\t\tvar parent = this.props.parent;\n\t\treturn (\n\t\t\t<p>{parent}</p>\n\t\t\t<button onClick={this.props.getFromChild} />\n\t\t);\n\t}\n});\n```\n\n## 通用组件之间传值\n-----\n如果组件之间没有任何关系，组件嵌套层次比较深，或者你为了一些组件能够订阅、写入一些信号，不想让组件之间插入一个组件，让两个组件处于独立的关系时，我们可以使用下面的方法。\n\n### Event\n``` jsx\n//使用EventEmitter\nimport {EventEmitter} from 'events';\nEventEmitter.prototype.emit() //发送事件\nEventEmitter.prototype.on() //捕获事件\n//使用EventListener\naddEventListener() //捕获change事件\nvar event =  Document.createEvent(); //创建事件\ndispatchEvent(event) //发送事件\n```\n\n### Pub/Sub\n全局广播的方式来处理事件，可参考Redux。\n\n### 单向数据流\n可以创建单向数据流，使用一个数据中心管理，可参考Flux。\n\n### Events in React\n使用 React 事件的时候，必须关注下面两个方法：\n``` jsx\ncomponentDidMount\ncomponentWillUnmount\n```\n在componentDidMount事件中，如果组件挂载（mounted）完成，再订阅事件。\n当组件卸载（unmounted）的时候，在componentWillUnmount事件中取消事件的订阅。\n\n### 参考\n[《React 组件之间如何交流》](http://www.tuicool.com/articles/AzQzEbq)\n\n## 结束语\n-----\nReact中没有像Angular中服务的概念，这也是因为React只是View层的原因吧。数据的流动和共享方面我们需要自己想办法，又或者是借助Flux、Redux等的模式来管理数据。","slug":"react-notes-8-conmunicate-in-react","published":1,"updated":"2016-08-28T02:16:02.229Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cix45huhs004axotu0xbaequ5","content":"<p>最近在学习使用React作为前端的框架，《React使用笔记》系列用于记录过程中的一些使用和解决方法。<br>本文结合前面出现过的一些方法，简单介绍组件间的通信。<br><a id=\"more\"></a></p>\n<h2 id=\"父组件与子组件\"><a href=\"#父组件与子组件\" class=\"headerlink\" title=\"父组件与子组件\"></a>父组件与子组件</h2><hr>\n<h3 id=\"父-子-通信\"><a href=\"#父-子-通信\" class=\"headerlink\" title=\"父-子 通信\"></a>父-子 通信</h3><ul>\n<li>利用props属性<br>父组件利用props向子组件传值，在使用React开发的过程中经常会使用到。</li>\n</ul>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//父组件</span></div><div class=\"line\"><span class=\"keyword\">var</span> Parent = React.createClass(&#123;</div><div class=\"line\">  <span class=\"attr\">getInitialState</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> &#123;</div><div class=\"line\">      <span class=\"attr\">parent</span>: <span class=\"string\">'from parent'</span></div><div class=\"line\">    &#125;;</div><div class=\"line\">  &#125;,  </div><div class=\"line\">  <span class=\"attr\">render</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> (</div><div class=\"line\">      <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">Child</span> <span class=\"attr\">parent</span>=<span class=\"string\">&#123;this.state.parent&#125;</span> /&gt;</span></span></div><div class=\"line\">    );</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\">// 子组件</div><div class=\"line\">var Child = React.createClass(&#123;</div><div class=\"line\">  render: function () &#123;</div><div class=\"line\">    // 从父组件获取的值</div><div class=\"line\">    var parent = this.props.parent;</div><div class=\"line\">    return (</div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>&#123;parent&#125;<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></div><div class=\"line\">    );</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<p>如果组件嵌套层次太深，那么从外到内组件的交流成本就变得很高，通过props传递值的优势就不那么明显了。</p>\n<ul>\n<li>利用refs属性<br>refs属性可获取子组件，当然父组件可以通过调用子组件的方法来给子组件传值。</li>\n</ul>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//父组件</span></div><div class=\"line\"><span class=\"keyword\">var</span> Parent = React.createClass(&#123;</div><div class=\"line\">  <span class=\"attr\">changeChild</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    <span class=\"comment\">// 通过refs属性调用子组件方法改变子组件的值</span></div><div class=\"line\">    <span class=\"keyword\">this</span>.refs.child.setState(&#123;<span class=\"attr\">child</span>: <span class=\"string\">'now from parent'</span>&#125;);</div><div class=\"line\">  &#125;,</div><div class=\"line\">  <span class=\"attr\">render</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> (</div><div class=\"line\">      &lt;div&gt;</div><div class=\"line\">        //子组件绑定ref属性</div><div class=\"line\">        &lt;Child ref=\"child\" /&gt;</div><div class=\"line\">        &lt;button onClick=&#123;this.changeChild&#125; /&gt;</div><div class=\"line\">      &lt;/div&gt;</div><div class=\"line\">    );</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\">// 子组件</div><div class=\"line\">var Child = React.createClass(&#123;</div><div class=\"line\">  getInitialState: function () &#123;</div><div class=\"line\">    return &#123;</div><div class=\"line\">      child: 'from child',</div><div class=\"line\">    &#125;;</div><div class=\"line\">  &#125;,  </div><div class=\"line\">  render: function () &#123;</div><div class=\"line\">    return (</div><div class=\"line\">      &lt;p&gt;&#123;this.state.child&#125;&lt;/p&gt;\t\t</div><div class=\"line\">    );</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<h3 id=\"子-父-通信\"><a href=\"#子-父-通信\" class=\"headerlink\" title=\"子-父 通信\"></a>子-父 通信</h3><ul>\n<li>利用props属性<br>既然父组件可以通过props属性向子组件传值，子组件可用父组件的方法反向给父组件传值。</li>\n</ul>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//父组件</span></div><div class=\"line\"><span class=\"keyword\">var</span> Parent = React.createClass(&#123;</div><div class=\"line\">  <span class=\"attr\">getInitialState</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> &#123;</div><div class=\"line\">      <span class=\"attr\">parent</span>: <span class=\"string\">'from parent'</span>,</div><div class=\"line\">      <span class=\"attr\">child</span>: <span class=\"string\">''</span>,</div><div class=\"line\">    &#125;;</div><div class=\"line\">  &#125;,  </div><div class=\"line\">  <span class=\"attr\">getFromChild</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">value</span>)</span>&#123;</div><div class=\"line\">    <span class=\"comment\">//子组件调用该方法返回值</span></div><div class=\"line\">    <span class=\"keyword\">this</span>.setState(&#123;<span class=\"attr\">child</span>: value&#125;);</div><div class=\"line\">  &#125;,</div><div class=\"line\">  <span class=\"attr\">render</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> (</div><div class=\"line\">      &lt;div&gt;</div><div class=\"line\">        &lt;p&gt;child: &#123;this.state.child&#125;&lt;/p&gt;</div><div class=\"line\">        &lt;Child parent=&#123;this.state.parent&#125; getFromChild=&#123;this.getFromChild&#125; /&gt;</div><div class=\"line\">      &lt;/div&gt;</div><div class=\"line\">    );</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\">// 子组件</div><div class=\"line\">var Child = React.createClass(&#123;</div><div class=\"line\">  render: function () &#123;</div><div class=\"line\">    // 从父组件获取的值</div><div class=\"line\">    var parent = this.props.parent;</div><div class=\"line\">    return (</div><div class=\"line\">      &lt;p&gt;&#123;parent&#125;&lt;/p&gt;</div><div class=\"line\">      // 从父组件获取的方法返回值</div><div class=\"line\">      &lt;button onClick=&#123;this.props.getFromChild.bind(null,'form child')&#125; /&gt;</div><div class=\"line\">    );</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<ul>\n<li>利用refs属性<br>refs属性允许你引用render()返回的相应的支撑实例。该属性多用于获取子组件的真实DOM元素。</li>\n</ul>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//父组件</span></div><div class=\"line\"><span class=\"keyword\">var</span> Parent = React.createClass(&#123;</div><div class=\"line\">  <span class=\"attr\">getInitialState</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> &#123;</div><div class=\"line\">      <span class=\"attr\">parent</span>: <span class=\"string\">'from parent'</span>,</div><div class=\"line\">      <span class=\"attr\">child</span>: <span class=\"string\">''</span>,</div><div class=\"line\">    &#125;;</div><div class=\"line\">  &#125;,  </div><div class=\"line\">  <span class=\"attr\">getFromChild</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    <span class=\"comment\">// 通过refs属性从子组件获取state状态</span></div><div class=\"line\">    <span class=\"keyword\">this</span>.setState(&#123;<span class=\"attr\">child</span>: <span class=\"keyword\">this</span>.refs.child.state.child&#125;);</div><div class=\"line\">  &#125;,</div><div class=\"line\">  <span class=\"attr\">render</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> (</div><div class=\"line\">      &lt;div&gt;</div><div class=\"line\">        &lt;p&gt;child: &#123;this.state.child&#125;&lt;/p&gt;</div><div class=\"line\">        //子组件绑定ref属性</div><div class=\"line\">        &lt;Child ref=\"child\" parent=&#123;this.state.parent&#125; getFromChild=&#123;this.getFromChild&#125; /&gt;</div><div class=\"line\">      &lt;/div&gt;</div><div class=\"line\">    );</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\">// 子组件</div><div class=\"line\">var Child = React.createClass(&#123;</div><div class=\"line\">  getInitialState: function () &#123;</div><div class=\"line\">    return &#123;</div><div class=\"line\">      child: 'from child',</div><div class=\"line\">    &#125;;</div><div class=\"line\">  &#125;,  </div><div class=\"line\">  render: function () &#123;</div><div class=\"line\">    // 从父组件获取的值</div><div class=\"line\">    var parent = this.props.parent;</div><div class=\"line\">    return (</div><div class=\"line\">      &lt;p&gt;&#123;parent&#125;&lt;/p&gt;</div><div class=\"line\">      &lt;button onClick=&#123;this.props.getFromChild&#125; /&gt;</div><div class=\"line\">    );</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<h2 id=\"通用组件之间传值\"><a href=\"#通用组件之间传值\" class=\"headerlink\" title=\"通用组件之间传值\"></a>通用组件之间传值</h2><hr>\n<p>如果组件之间没有任何关系，组件嵌套层次比较深，或者你为了一些组件能够订阅、写入一些信号，不想让组件之间插入一个组件，让两个组件处于独立的关系时，我们可以使用下面的方法。</p>\n<h3 id=\"Event\"><a href=\"#Event\" class=\"headerlink\" title=\"Event\"></a>Event</h3><figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//使用EventEmitter</span></div><div class=\"line\"><span class=\"keyword\">import</span> &#123;EventEmitter&#125; <span class=\"keyword\">from</span> <span class=\"string\">'events'</span>;</div><div class=\"line\">EventEmitter.prototype.emit() <span class=\"comment\">//发送事件</span></div><div class=\"line\">EventEmitter.prototype.on() <span class=\"comment\">//捕获事件</span></div><div class=\"line\"><span class=\"comment\">//使用EventListener</span></div><div class=\"line\">addEventListener() <span class=\"comment\">//捕获change事件</span></div><div class=\"line\"><span class=\"keyword\">var</span> event =  Document.createEvent(); <span class=\"comment\">//创建事件</span></div><div class=\"line\">dispatchEvent(event) <span class=\"comment\">//发送事件</span></div></pre></td></tr></table></figure>\n<h3 id=\"Pub-Sub\"><a href=\"#Pub-Sub\" class=\"headerlink\" title=\"Pub/Sub\"></a>Pub/Sub</h3><p>全局广播的方式来处理事件，可参考Redux。</p>\n<h3 id=\"单向数据流\"><a href=\"#单向数据流\" class=\"headerlink\" title=\"单向数据流\"></a>单向数据流</h3><p>可以创建单向数据流，使用一个数据中心管理，可参考Flux。</p>\n<h3 id=\"Events-in-React\"><a href=\"#Events-in-React\" class=\"headerlink\" title=\"Events in React\"></a>Events in React</h3><p>使用 React 事件的时候，必须关注下面两个方法：<br><figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">componentDidMount</div><div class=\"line\">componentWillUnmount</div></pre></td></tr></table></figure></p>\n<p>在componentDidMount事件中，如果组件挂载（mounted）完成，再订阅事件。<br>当组件卸载（unmounted）的时候，在componentWillUnmount事件中取消事件的订阅。</p>\n<h3 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h3><p><a href=\"http://www.tuicool.com/articles/AzQzEbq\" target=\"_blank\" rel=\"external\">《React 组件之间如何交流》</a></p>\n<h2 id=\"结束语\"><a href=\"#结束语\" class=\"headerlink\" title=\"结束语\"></a>结束语</h2><hr>\n<p>React中没有像Angular中服务的概念，这也是因为React只是View层的原因吧。数据的流动和共享方面我们需要自己想办法，又或者是借助Flux、Redux等的模式来管理数据。</p>\n","excerpt":"<p>最近在学习使用React作为前端的框架，《React使用笔记》系列用于记录过程中的一些使用和解决方法。<br>本文结合前面出现过的一些方法，简单介绍组件间的通信。<br>","more":"</p>\n<h2 id=\"父组件与子组件\"><a href=\"#父组件与子组件\" class=\"headerlink\" title=\"父组件与子组件\"></a>父组件与子组件</h2><hr>\n<h3 id=\"父-子-通信\"><a href=\"#父-子-通信\" class=\"headerlink\" title=\"父-子 通信\"></a>父-子 通信</h3><ul>\n<li>利用props属性<br>父组件利用props向子组件传值，在使用React开发的过程中经常会使用到。</li>\n</ul>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//父组件</span></div><div class=\"line\"><span class=\"keyword\">var</span> Parent = React.createClass(&#123;</div><div class=\"line\">  <span class=\"attr\">getInitialState</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> &#123;</div><div class=\"line\">      <span class=\"attr\">parent</span>: <span class=\"string\">'from parent'</span></div><div class=\"line\">    &#125;;</div><div class=\"line\">  &#125;,  </div><div class=\"line\">  <span class=\"attr\">render</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> (</div><div class=\"line\">      <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">Child</span> <span class=\"attr\">parent</span>=<span class=\"string\">&#123;this.state.parent&#125;</span> /&gt;</span></div><div class=\"line\">    );</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\">// 子组件</div><div class=\"line\">var Child = React.createClass(&#123;</div><div class=\"line\">  render: function () &#123;</div><div class=\"line\">    // 从父组件获取的值</div><div class=\"line\">    var parent = this.props.parent;</div><div class=\"line\">    return (</div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>&#123;parent&#125;<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></div><div class=\"line\">    );</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;);</span></div></pre></td></tr></table></figure>\n<p>如果组件嵌套层次太深，那么从外到内组件的交流成本就变得很高，通过props传递值的优势就不那么明显了。</p>\n<ul>\n<li>利用refs属性<br>refs属性可获取子组件，当然父组件可以通过调用子组件的方法来给子组件传值。</li>\n</ul>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//父组件</span></div><div class=\"line\"><span class=\"keyword\">var</span> Parent = React.createClass(&#123;</div><div class=\"line\">  <span class=\"attr\">changeChild</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    <span class=\"comment\">// 通过refs属性调用子组件方法改变子组件的值</span></div><div class=\"line\">    <span class=\"keyword\">this</span>.refs.child.setState(&#123;<span class=\"attr\">child</span>: <span class=\"string\">'now from parent'</span>&#125;);</div><div class=\"line\">  &#125;,</div><div class=\"line\">  <span class=\"attr\">render</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> (</div><div class=\"line\">      &lt;div&gt;</div><div class=\"line\">        //子组件绑定ref属性</div><div class=\"line\">        &lt;Child ref=\"child\" /&gt;</div><div class=\"line\">        &lt;button onClick=&#123;this.changeChild&#125; /&gt;</div><div class=\"line\">      &lt;/div&gt;</div><div class=\"line\">    );</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\">// 子组件</div><div class=\"line\">var Child = React.createClass(&#123;</div><div class=\"line\">  getInitialState: function () &#123;</div><div class=\"line\">    return &#123;</div><div class=\"line\">      child: 'from child',</div><div class=\"line\">    &#125;;</div><div class=\"line\">  &#125;,  </div><div class=\"line\">  render: function () &#123;</div><div class=\"line\">    return (</div><div class=\"line\">      &lt;p&gt;&#123;this.state.child&#125;&lt;/p&gt;\t\t</div><div class=\"line\">    );</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<h3 id=\"子-父-通信\"><a href=\"#子-父-通信\" class=\"headerlink\" title=\"子-父 通信\"></a>子-父 通信</h3><ul>\n<li>利用props属性<br>既然父组件可以通过props属性向子组件传值，子组件可用父组件的方法反向给父组件传值。</li>\n</ul>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//父组件</span></div><div class=\"line\"><span class=\"keyword\">var</span> Parent = React.createClass(&#123;</div><div class=\"line\">  <span class=\"attr\">getInitialState</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> &#123;</div><div class=\"line\">      <span class=\"attr\">parent</span>: <span class=\"string\">'from parent'</span>,</div><div class=\"line\">      <span class=\"attr\">child</span>: <span class=\"string\">''</span>,</div><div class=\"line\">    &#125;;</div><div class=\"line\">  &#125;,  </div><div class=\"line\">  <span class=\"attr\">getFromChild</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">value</span>)</span>&#123;</div><div class=\"line\">    <span class=\"comment\">//子组件调用该方法返回值</span></div><div class=\"line\">    <span class=\"keyword\">this</span>.setState(&#123;<span class=\"attr\">child</span>: value&#125;);</div><div class=\"line\">  &#125;,</div><div class=\"line\">  <span class=\"attr\">render</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> (</div><div class=\"line\">      &lt;div&gt;</div><div class=\"line\">        &lt;p&gt;child: &#123;this.state.child&#125;&lt;/p&gt;</div><div class=\"line\">        &lt;Child parent=&#123;this.state.parent&#125; getFromChild=&#123;this.getFromChild&#125; /&gt;</div><div class=\"line\">      &lt;/div&gt;</div><div class=\"line\">    );</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\">// 子组件</div><div class=\"line\">var Child = React.createClass(&#123;</div><div class=\"line\">  render: function () &#123;</div><div class=\"line\">    // 从父组件获取的值</div><div class=\"line\">    var parent = this.props.parent;</div><div class=\"line\">    return (</div><div class=\"line\">      &lt;p&gt;&#123;parent&#125;&lt;/p&gt;</div><div class=\"line\">      // 从父组件获取的方法返回值</div><div class=\"line\">      &lt;button onClick=&#123;this.props.getFromChild.bind(null,'form child')&#125; /&gt;</div><div class=\"line\">    );</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<ul>\n<li>利用refs属性<br>refs属性允许你引用render()返回的相应的支撑实例。该属性多用于获取子组件的真实DOM元素。</li>\n</ul>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//父组件</span></div><div class=\"line\"><span class=\"keyword\">var</span> Parent = React.createClass(&#123;</div><div class=\"line\">  <span class=\"attr\">getInitialState</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> &#123;</div><div class=\"line\">      <span class=\"attr\">parent</span>: <span class=\"string\">'from parent'</span>,</div><div class=\"line\">      <span class=\"attr\">child</span>: <span class=\"string\">''</span>,</div><div class=\"line\">    &#125;;</div><div class=\"line\">  &#125;,  </div><div class=\"line\">  <span class=\"attr\">getFromChild</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    <span class=\"comment\">// 通过refs属性从子组件获取state状态</span></div><div class=\"line\">    <span class=\"keyword\">this</span>.setState(&#123;<span class=\"attr\">child</span>: <span class=\"keyword\">this</span>.refs.child.state.child&#125;);</div><div class=\"line\">  &#125;,</div><div class=\"line\">  <span class=\"attr\">render</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> (</div><div class=\"line\">      &lt;div&gt;</div><div class=\"line\">        &lt;p&gt;child: &#123;this.state.child&#125;&lt;/p&gt;</div><div class=\"line\">        //子组件绑定ref属性</div><div class=\"line\">        &lt;Child ref=\"child\" parent=&#123;this.state.parent&#125; getFromChild=&#123;this.getFromChild&#125; /&gt;</div><div class=\"line\">      &lt;/div&gt;</div><div class=\"line\">    );</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\">// 子组件</div><div class=\"line\">var Child = React.createClass(&#123;</div><div class=\"line\">  getInitialState: function () &#123;</div><div class=\"line\">    return &#123;</div><div class=\"line\">      child: 'from child',</div><div class=\"line\">    &#125;;</div><div class=\"line\">  &#125;,  </div><div class=\"line\">  render: function () &#123;</div><div class=\"line\">    // 从父组件获取的值</div><div class=\"line\">    var parent = this.props.parent;</div><div class=\"line\">    return (</div><div class=\"line\">      &lt;p&gt;&#123;parent&#125;&lt;/p&gt;</div><div class=\"line\">      &lt;button onClick=&#123;this.props.getFromChild&#125; /&gt;</div><div class=\"line\">    );</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<h2 id=\"通用组件之间传值\"><a href=\"#通用组件之间传值\" class=\"headerlink\" title=\"通用组件之间传值\"></a>通用组件之间传值</h2><hr>\n<p>如果组件之间没有任何关系，组件嵌套层次比较深，或者你为了一些组件能够订阅、写入一些信号，不想让组件之间插入一个组件，让两个组件处于独立的关系时，我们可以使用下面的方法。</p>\n<h3 id=\"Event\"><a href=\"#Event\" class=\"headerlink\" title=\"Event\"></a>Event</h3><figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//使用EventEmitter</span></div><div class=\"line\"><span class=\"keyword\">import</span> &#123;EventEmitter&#125; <span class=\"keyword\">from</span> <span class=\"string\">'events'</span>;</div><div class=\"line\">EventEmitter.prototype.emit() <span class=\"comment\">//发送事件</span></div><div class=\"line\">EventEmitter.prototype.on() <span class=\"comment\">//捕获事件</span></div><div class=\"line\"><span class=\"comment\">//使用EventListener</span></div><div class=\"line\">addEventListener() <span class=\"comment\">//捕获change事件</span></div><div class=\"line\"><span class=\"keyword\">var</span> event =  Document.createEvent(); <span class=\"comment\">//创建事件</span></div><div class=\"line\">dispatchEvent(event) <span class=\"comment\">//发送事件</span></div></pre></td></tr></table></figure>\n<h3 id=\"Pub-Sub\"><a href=\"#Pub-Sub\" class=\"headerlink\" title=\"Pub/Sub\"></a>Pub/Sub</h3><p>全局广播的方式来处理事件，可参考Redux。</p>\n<h3 id=\"单向数据流\"><a href=\"#单向数据流\" class=\"headerlink\" title=\"单向数据流\"></a>单向数据流</h3><p>可以创建单向数据流，使用一个数据中心管理，可参考Flux。</p>\n<h3 id=\"Events-in-React\"><a href=\"#Events-in-React\" class=\"headerlink\" title=\"Events in React\"></a>Events in React</h3><p>使用 React 事件的时候，必须关注下面两个方法：<br><figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">componentDidMount</div><div class=\"line\">componentWillUnmount</div></pre></td></tr></table></figure></p>\n<p>在componentDidMount事件中，如果组件挂载（mounted）完成，再订阅事件。<br>当组件卸载（unmounted）的时候，在componentWillUnmount事件中取消事件的订阅。</p>\n<h3 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h3><p><a href=\"http://www.tuicool.com/articles/AzQzEbq\">《React 组件之间如何交流》</a></p>\n<h2 id=\"结束语\"><a href=\"#结束语\" class=\"headerlink\" title=\"结束语\"></a>结束语</h2><hr>\n<p>React中没有像Angular中服务的概念，这也是因为React只是View层的原因吧。数据的流动和共享方面我们需要自己想办法，又或者是借助Flux、Redux等的模式来管理数据。</p>"},{"title":"React-Redux使用笔记1--使用webpack搭建React开发环境","date":"2016-12-24T04:09:26.000Z","_content":"最近又重新拾起了React框架，并配合开源模板gentelella以及Redux建立了个简单的项目。《React-Redux使用笔记》系列用于记录过程中的一些使用和解决方法。\n本文记录使用Webpack初步搭建开发环境的过程。\n<!--more-->\n\n自从引入了一套后台管理模板gentelella，越使用越感觉心情愉快呢。\n[gentelella github](https://github.com/puikinsh/gentelella)\n\n## 安装配置webpack\n---\n\nWebpack将项目中的所有静态资源都当做模块，模块之间可以互相依赖，由webpack对它们进行统一的管理和打包发布。\n\n这里主要参考[《手把手教你基于ES6架构自己的React Boilerplate项目》](http://www.open-open.com/lib/view/open1462013660085.html)。\n\n### Webpack\n- webpack支持的功能特性：\n1.支持CommonJs和AMD模块，意思也就是我们基本可以无痛迁移旧项目。\n2.支持模块加载器和插件机制，可对模块灵活定制。特别是babel-loader，有效支持ES6。\n3.可以通过配置，打包成多个文件。有效利用浏览器的缓存功能提升性能。\n4.将样式文件和图片等静态资源也可视为模块进行打包。配合loader加载器，可以支持sass，less等CSS预处理器。\n5.内置有source map，即使打包在一起依旧方便调试。\n\n- loader加载器\n> loaders被应用于应用程序的资源文件中，通常用来做转换。\n> 它们都是函数（运行在nodejs中），将资源文件的源码作为入参，处理完后，返回新的源码文件。\n  - less/sass loader加载器\n  - url-loader可对图片资源打包\n  - babel ES6预处理器\n\n### 安装nodejs和npm\n在[nodejs官网](https://nodejs.org/)下载nodejs(里面携带npm)并安装。\n\n### 初始化项目环境\n新建package.json文件，如下：\n``` bash\n// package.json\n{\n    \"dependencies\": {\n        \"react\": \"^15.3.2\",\n        \"react-dom\": \"^15.3.2\",\n        \"react-router\": \"^3.0.0\",\n        \"webpack\": \"^1.13.3\"\n    },\n    \"scripts\": {},\n    \"devDependencies\": {}\n}\n```\n使用`npm install`则可安装webpack和react。\n\n### 初始化项目结构\n项目代码结构如下：\n![image](http://o905ne85q.bkt.clouddn.com/703C.tmp.png)\n其中入口文件为`app/index.js`，模板文件为`templates/index.js`。\n\n### webpack设置\n新建webpack.config.js文件，如下：\n``` js\n// webpack.config.js\nvar webpack = require('webpack');\nvar path = require('path'); //引入node的path库\n\nvar config = {\n    entry: [path.resolve(__dirname, 'app/index.js')], //入口文件\n    output: {\n        path: path.resolve(__dirname, 'dist'), // 指定编译后的代码位置为 dist/bundle.js\n        filename: 'bundle.js'\n    },\n    module: {\n        loaders: []\n    },\n    devtool: 'source-map'\n}\n\nmodule.exports = config;\n```\n\n### 安装 html-webpack-plugin\n- 使用命令安装：\n\n``` npm \nnpm install html-webpack-plugin --save-dev\n```\n\n- 在webpack.config.js中增加:\n\n``` js\nplugins: [\n\t// 入口模板文件解析\n\tnew HtmlwebpackPlugin({\n\t\ttitle: 'React Redux Test',\n\t\ttemplate: path.resolve(__dirname, 'templates/index.ejs'),\n\t\tinject: 'body'\n\t})\n]\n```\n\n### 添加less样式loader\n- 使用命令安装：\n\n``` npm \nnpm install css-loader style-loader less-loader --save-dev\n```\n\n- 在webpack.config.js中增加loader:\n\n``` js\n{\n\ttest: /\\.less$/,\n\tloaders: ['style', 'css', 'less'],\n\tinclude: path.resolve(__dirname, 'app')\n},\n{ test: /\\.css$/, loader: \"style-loader!css-loader\" }\n```\n\n### 添加jsx loader\n- 使用命令安装：\n\n``` npm \nnpm install babel-core babel-loader babel-preset-latest babel-preset-react --save-dev\n```\n\n- 在webpack.config.js中增加loader:\n\n``` js\n{\n\ttest: /\\.jsx?$/,\n\tloader: 'babel-loader',\n\texclude: 'node_modules'\n}\n```\n\n- 新建.babelrc文件\n\n``` json\n{\n    \"presets\": [\n        \"latest\", \"react\", {\n            \"ignore\": [\"/node_modules\"]\n        }\n    ],\n    \"plugins\": []\n}\n```\n\n### 安装webpack-dev-server\nwebpack-dev-server是一个小型的node.js Express服务器,它使用webpack-dev-middleware中间件来为通过webpack打包生成的资源文件提供Web服务。\nwebpack-dev-server可以让我们在本地启动一个web服务器，使我们更方便的查看正在开发的项目。\n\nwebpack-dev-server支持两种模式来自动刷新页面：\n1. iframe模式(页面放在iframe中,当发生改变时重载)\n2. inline模式(将webpack-dev-sever的客户端入口添加到包(bundle)中)\n具体的大家查看[文档](http://webpack.github.io/docs/webpack-dev-server.html)呗。\n\n- 使用命令安装：\n\n``` npm \nnpm install webpack-dev-server --save-dev\n```\n\n- 在webpack.config.js中修改entry:\n\n``` js\nentry: [\n\t'webpack/hot/dev-server',\n\t'webpack-dev-server/client?http://localhost:3333',\n\tpath.resolve(__dirname, 'app/index.js')\n], //入口文件\n```\n\n- 在 package.json 中增加 webpack-dev-server 的快捷方式\n\n``` json\n// package.json\n\"scripts\": {\n\t\"dev\": \"webpack-dev-server --port 3333 --devtool eval --progress --colors --hot --content-base dist --host 0.0.0.0\",\n}\n```\n配置中指定web服务器端口号为3333，指定目录为dist。\n\n### 完整的package.json\n代码如下：\n``` json\n{\n    \"dependencies\": {\n        \"react\": \"^15.3.2\",\n        \"react-dom\": \"^15.3.2\",\n        \"react-router\": \"^3.0.0\",\n        \"webpack\": \"^1.13.3\"\n    },\n    \"scripts\": {\n        \"dev\": \"webpack-dev-server --port 3333 --devtool eval --progress --colors --hot --content-base dist --host 0.0.0.0\"\n    },\n    \"devDependencies\": {\n        \"babel-core\": \"^6.18.2\",\n        \"babel-loader\": \"^6.2.7\",\n        \"babel-preset-latest\": \"^6.16.0\",\n        \"babel-preset-react\": \"^6.16.0\",\n        \"css-loader\": \"^0.25.0\",\n        \"html-webpack-plugin\": \"^2.24.1\",\n        \"less-loader\": \"^2.2.3\",\n        \"style-loader\": \"^0.13.1\",\n        \"webpack-dev-server\": \"^1.16.2\"\n    }\n}\n```\n\n### 完整的webpack.config.js\n``` js\nvar webpack = require('webpack');\nvar path = require('path'); //引入node的path库\nvar HtmlwebpackPlugin = require('html-webpack-plugin');\n\nvar config = {\n    entry: ['webpack/hot/dev-server',\n        'webpack-dev-server/client?http://localhost:3000',\n        path.resolve(__dirname, 'app/index.js')\n    ], //入口文件\n    output: {\n        path: path.resolve(__dirname, 'dist'), // 指定编译后的代码位置为 dist/bundle.js\n        filename: 'bundle.js'\n    },\n    module: {\n        loaders: [\n            // 为webpack指定loaders\n            {\n                test: /\\.less$/,\n                loaders: ['style', 'css', 'less'],\n                include: path.resolve(__dirname, 'app')\n            },\n            {\n                test: /\\.jsx?$/,\n                loader: 'babel-loader',\n                exclude: 'node_modules'\n            }\n        ]\n    },\n    plugins: [\n        // 入口模板文件解析\n        new HtmlwebpackPlugin({\n            title: 'React Redux Test',\n            template: path.resolve(__dirname, 'templates/index.ejs'),\n            inject: 'body'\n        })\n    ],\n    devtool: 'source-map'\n}\n\nmodule.exports = config;\n```\n\n此时我们使用`npm run dev`就可以启动项目。\n\n## 项目代码初始化\n---\n### 模板文件\n``` ejs\n// templates/index.ejs\n<!DOCTYPE html>\n<html>\n  <head>\n    <meta charset=\"utf-8\">\n    <title>react-redux-test</title>   \n  </head>\n  <body class=\"nav-md\">\n    <div id=\"app\"></div>\n  </body>\n</html>\n```\n\n### index.js入口文件\n``` js\nimport React from 'react'; //react\nimport ReactDOM from 'react-dom'; //react-dom\nimport Index from './components/index.jsx'; //index自定义组件\n\n//将其渲染到页面上id为app的DOM元素内\nReactDOM.render( < Index / > , document.getElementById(\"app\"));\n```\n\n### Index组件\n``` jsx\n// app/components/index.ejs\nimport React from 'react';\n\nconst Index = React.createClass({\n\trender() {\n\t\treturn (\n\t\t\t<div>Hello\tWorld!</div>\n\t\t);\n\t}\n});\n\nmodule.exports = Index;\n```\n\n至此，我们初步搭建了个React的项目。\n[打开页面](http://localhost:3333/)就可以看到输出的Hello World!啦。\n\n## 结束语\n-----\n关于webpack，其实大家可以花更多的时间去学习一下，这个工具真的是棒棒哒，像其他热加载方式或者是其他更加自动化的流程也是需要大家不断去发现和完善的呢。\n[此处查看项目代码](https://github.com/godbasin/godbasin.github.io/tree/blog-codes/react-redux-notes/1-build-react-project)","source":"_posts/react-redux-notes-1-build-react-project.md","raw":"---\ntitle: React-Redux使用笔记1--使用webpack搭建React开发环境\ndate: 2016-12-24 12:09:26\ncategories: react沙拉\ntags: 笔记\n---\n最近又重新拾起了React框架，并配合开源模板gentelella以及Redux建立了个简单的项目。《React-Redux使用笔记》系列用于记录过程中的一些使用和解决方法。\n本文记录使用Webpack初步搭建开发环境的过程。\n<!--more-->\n\n自从引入了一套后台管理模板gentelella，越使用越感觉心情愉快呢。\n[gentelella github](https://github.com/puikinsh/gentelella)\n\n## 安装配置webpack\n---\n\nWebpack将项目中的所有静态资源都当做模块，模块之间可以互相依赖，由webpack对它们进行统一的管理和打包发布。\n\n这里主要参考[《手把手教你基于ES6架构自己的React Boilerplate项目》](http://www.open-open.com/lib/view/open1462013660085.html)。\n\n### Webpack\n- webpack支持的功能特性：\n1.支持CommonJs和AMD模块，意思也就是我们基本可以无痛迁移旧项目。\n2.支持模块加载器和插件机制，可对模块灵活定制。特别是babel-loader，有效支持ES6。\n3.可以通过配置，打包成多个文件。有效利用浏览器的缓存功能提升性能。\n4.将样式文件和图片等静态资源也可视为模块进行打包。配合loader加载器，可以支持sass，less等CSS预处理器。\n5.内置有source map，即使打包在一起依旧方便调试。\n\n- loader加载器\n> loaders被应用于应用程序的资源文件中，通常用来做转换。\n> 它们都是函数（运行在nodejs中），将资源文件的源码作为入参，处理完后，返回新的源码文件。\n  - less/sass loader加载器\n  - url-loader可对图片资源打包\n  - babel ES6预处理器\n\n### 安装nodejs和npm\n在[nodejs官网](https://nodejs.org/)下载nodejs(里面携带npm)并安装。\n\n### 初始化项目环境\n新建package.json文件，如下：\n``` bash\n// package.json\n{\n    \"dependencies\": {\n        \"react\": \"^15.3.2\",\n        \"react-dom\": \"^15.3.2\",\n        \"react-router\": \"^3.0.0\",\n        \"webpack\": \"^1.13.3\"\n    },\n    \"scripts\": {},\n    \"devDependencies\": {}\n}\n```\n使用`npm install`则可安装webpack和react。\n\n### 初始化项目结构\n项目代码结构如下：\n![image](http://o905ne85q.bkt.clouddn.com/703C.tmp.png)\n其中入口文件为`app/index.js`，模板文件为`templates/index.js`。\n\n### webpack设置\n新建webpack.config.js文件，如下：\n``` js\n// webpack.config.js\nvar webpack = require('webpack');\nvar path = require('path'); //引入node的path库\n\nvar config = {\n    entry: [path.resolve(__dirname, 'app/index.js')], //入口文件\n    output: {\n        path: path.resolve(__dirname, 'dist'), // 指定编译后的代码位置为 dist/bundle.js\n        filename: 'bundle.js'\n    },\n    module: {\n        loaders: []\n    },\n    devtool: 'source-map'\n}\n\nmodule.exports = config;\n```\n\n### 安装 html-webpack-plugin\n- 使用命令安装：\n\n``` npm \nnpm install html-webpack-plugin --save-dev\n```\n\n- 在webpack.config.js中增加:\n\n``` js\nplugins: [\n\t// 入口模板文件解析\n\tnew HtmlwebpackPlugin({\n\t\ttitle: 'React Redux Test',\n\t\ttemplate: path.resolve(__dirname, 'templates/index.ejs'),\n\t\tinject: 'body'\n\t})\n]\n```\n\n### 添加less样式loader\n- 使用命令安装：\n\n``` npm \nnpm install css-loader style-loader less-loader --save-dev\n```\n\n- 在webpack.config.js中增加loader:\n\n``` js\n{\n\ttest: /\\.less$/,\n\tloaders: ['style', 'css', 'less'],\n\tinclude: path.resolve(__dirname, 'app')\n},\n{ test: /\\.css$/, loader: \"style-loader!css-loader\" }\n```\n\n### 添加jsx loader\n- 使用命令安装：\n\n``` npm \nnpm install babel-core babel-loader babel-preset-latest babel-preset-react --save-dev\n```\n\n- 在webpack.config.js中增加loader:\n\n``` js\n{\n\ttest: /\\.jsx?$/,\n\tloader: 'babel-loader',\n\texclude: 'node_modules'\n}\n```\n\n- 新建.babelrc文件\n\n``` json\n{\n    \"presets\": [\n        \"latest\", \"react\", {\n            \"ignore\": [\"/node_modules\"]\n        }\n    ],\n    \"plugins\": []\n}\n```\n\n### 安装webpack-dev-server\nwebpack-dev-server是一个小型的node.js Express服务器,它使用webpack-dev-middleware中间件来为通过webpack打包生成的资源文件提供Web服务。\nwebpack-dev-server可以让我们在本地启动一个web服务器，使我们更方便的查看正在开发的项目。\n\nwebpack-dev-server支持两种模式来自动刷新页面：\n1. iframe模式(页面放在iframe中,当发生改变时重载)\n2. inline模式(将webpack-dev-sever的客户端入口添加到包(bundle)中)\n具体的大家查看[文档](http://webpack.github.io/docs/webpack-dev-server.html)呗。\n\n- 使用命令安装：\n\n``` npm \nnpm install webpack-dev-server --save-dev\n```\n\n- 在webpack.config.js中修改entry:\n\n``` js\nentry: [\n\t'webpack/hot/dev-server',\n\t'webpack-dev-server/client?http://localhost:3333',\n\tpath.resolve(__dirname, 'app/index.js')\n], //入口文件\n```\n\n- 在 package.json 中增加 webpack-dev-server 的快捷方式\n\n``` json\n// package.json\n\"scripts\": {\n\t\"dev\": \"webpack-dev-server --port 3333 --devtool eval --progress --colors --hot --content-base dist --host 0.0.0.0\",\n}\n```\n配置中指定web服务器端口号为3333，指定目录为dist。\n\n### 完整的package.json\n代码如下：\n``` json\n{\n    \"dependencies\": {\n        \"react\": \"^15.3.2\",\n        \"react-dom\": \"^15.3.2\",\n        \"react-router\": \"^3.0.0\",\n        \"webpack\": \"^1.13.3\"\n    },\n    \"scripts\": {\n        \"dev\": \"webpack-dev-server --port 3333 --devtool eval --progress --colors --hot --content-base dist --host 0.0.0.0\"\n    },\n    \"devDependencies\": {\n        \"babel-core\": \"^6.18.2\",\n        \"babel-loader\": \"^6.2.7\",\n        \"babel-preset-latest\": \"^6.16.0\",\n        \"babel-preset-react\": \"^6.16.0\",\n        \"css-loader\": \"^0.25.0\",\n        \"html-webpack-plugin\": \"^2.24.1\",\n        \"less-loader\": \"^2.2.3\",\n        \"style-loader\": \"^0.13.1\",\n        \"webpack-dev-server\": \"^1.16.2\"\n    }\n}\n```\n\n### 完整的webpack.config.js\n``` js\nvar webpack = require('webpack');\nvar path = require('path'); //引入node的path库\nvar HtmlwebpackPlugin = require('html-webpack-plugin');\n\nvar config = {\n    entry: ['webpack/hot/dev-server',\n        'webpack-dev-server/client?http://localhost:3000',\n        path.resolve(__dirname, 'app/index.js')\n    ], //入口文件\n    output: {\n        path: path.resolve(__dirname, 'dist'), // 指定编译后的代码位置为 dist/bundle.js\n        filename: 'bundle.js'\n    },\n    module: {\n        loaders: [\n            // 为webpack指定loaders\n            {\n                test: /\\.less$/,\n                loaders: ['style', 'css', 'less'],\n                include: path.resolve(__dirname, 'app')\n            },\n            {\n                test: /\\.jsx?$/,\n                loader: 'babel-loader',\n                exclude: 'node_modules'\n            }\n        ]\n    },\n    plugins: [\n        // 入口模板文件解析\n        new HtmlwebpackPlugin({\n            title: 'React Redux Test',\n            template: path.resolve(__dirname, 'templates/index.ejs'),\n            inject: 'body'\n        })\n    ],\n    devtool: 'source-map'\n}\n\nmodule.exports = config;\n```\n\n此时我们使用`npm run dev`就可以启动项目。\n\n## 项目代码初始化\n---\n### 模板文件\n``` ejs\n// templates/index.ejs\n<!DOCTYPE html>\n<html>\n  <head>\n    <meta charset=\"utf-8\">\n    <title>react-redux-test</title>   \n  </head>\n  <body class=\"nav-md\">\n    <div id=\"app\"></div>\n  </body>\n</html>\n```\n\n### index.js入口文件\n``` js\nimport React from 'react'; //react\nimport ReactDOM from 'react-dom'; //react-dom\nimport Index from './components/index.jsx'; //index自定义组件\n\n//将其渲染到页面上id为app的DOM元素内\nReactDOM.render( < Index / > , document.getElementById(\"app\"));\n```\n\n### Index组件\n``` jsx\n// app/components/index.ejs\nimport React from 'react';\n\nconst Index = React.createClass({\n\trender() {\n\t\treturn (\n\t\t\t<div>Hello\tWorld!</div>\n\t\t);\n\t}\n});\n\nmodule.exports = Index;\n```\n\n至此，我们初步搭建了个React的项目。\n[打开页面](http://localhost:3333/)就可以看到输出的Hello World!啦。\n\n## 结束语\n-----\n关于webpack，其实大家可以花更多的时间去学习一下，这个工具真的是棒棒哒，像其他热加载方式或者是其他更加自动化的流程也是需要大家不断去发现和完善的呢。\n[此处查看项目代码](https://github.com/godbasin/godbasin.github.io/tree/blog-codes/react-redux-notes/1-build-react-project)","slug":"react-redux-notes-1-build-react-project","published":1,"updated":"2016-12-24T04:09:44.756Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cix45huhu004dxotu8fkqds04","content":"<p>最近又重新拾起了React框架，并配合开源模板gentelella以及Redux建立了个简单的项目。《React-Redux使用笔记》系列用于记录过程中的一些使用和解决方法。<br>本文记录使用Webpack初步搭建开发环境的过程。<br><a id=\"more\"></a></p>\n<p>自从引入了一套后台管理模板gentelella，越使用越感觉心情愉快呢。<br><a href=\"https://github.com/puikinsh/gentelella\" target=\"_blank\" rel=\"external\">gentelella github</a></p>\n<h2 id=\"安装配置webpack\"><a href=\"#安装配置webpack\" class=\"headerlink\" title=\"安装配置webpack\"></a>安装配置webpack</h2><hr>\n<p>Webpack将项目中的所有静态资源都当做模块，模块之间可以互相依赖，由webpack对它们进行统一的管理和打包发布。</p>\n<p>这里主要参考<a href=\"http://www.open-open.com/lib/view/open1462013660085.html\" target=\"_blank\" rel=\"external\">《手把手教你基于ES6架构自己的React Boilerplate项目》</a>。</p>\n<h3 id=\"Webpack\"><a href=\"#Webpack\" class=\"headerlink\" title=\"Webpack\"></a>Webpack</h3><ul>\n<li><p>webpack支持的功能特性：<br>1.支持CommonJs和AMD模块，意思也就是我们基本可以无痛迁移旧项目。<br>2.支持模块加载器和插件机制，可对模块灵活定制。特别是babel-loader，有效支持ES6。<br>3.可以通过配置，打包成多个文件。有效利用浏览器的缓存功能提升性能。<br>4.将样式文件和图片等静态资源也可视为模块进行打包。配合loader加载器，可以支持sass，less等CSS预处理器。<br>5.内置有source map，即使打包在一起依旧方便调试。</p>\n</li>\n<li><p>loader加载器</p>\n<blockquote>\n<p>loaders被应用于应用程序的资源文件中，通常用来做转换。<br>它们都是函数（运行在nodejs中），将资源文件的源码作为入参，处理完后，返回新的源码文件。</p>\n<ul>\n<li>less/sass loader加载器</li>\n<li>url-loader可对图片资源打包</li>\n<li>babel ES6预处理器</li>\n</ul>\n</blockquote>\n</li>\n</ul>\n<h3 id=\"安装nodejs和npm\"><a href=\"#安装nodejs和npm\" class=\"headerlink\" title=\"安装nodejs和npm\"></a>安装nodejs和npm</h3><p>在<a href=\"https://nodejs.org/\" target=\"_blank\" rel=\"external\">nodejs官网</a>下载nodejs(里面携带npm)并安装。</p>\n<h3 id=\"初始化项目环境\"><a href=\"#初始化项目环境\" class=\"headerlink\" title=\"初始化项目环境\"></a>初始化项目环境</h3><p>新建package.json文件，如下：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">// package.json</div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"string\">\"dependencies\"</span>: &#123;</div><div class=\"line\">        <span class=\"string\">\"react\"</span>: <span class=\"string\">\"^15.3.2\"</span>,</div><div class=\"line\">        <span class=\"string\">\"react-dom\"</span>: <span class=\"string\">\"^15.3.2\"</span>,</div><div class=\"line\">        <span class=\"string\">\"react-router\"</span>: <span class=\"string\">\"^3.0.0\"</span>,</div><div class=\"line\">        <span class=\"string\">\"webpack\"</span>: <span class=\"string\">\"^1.13.3\"</span></div><div class=\"line\">    &#125;,</div><div class=\"line\">    <span class=\"string\">\"scripts\"</span>: &#123;&#125;,</div><div class=\"line\">    <span class=\"string\">\"devDependencies\"</span>: &#123;&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>使用<code>npm install</code>则可安装webpack和react。</p>\n<h3 id=\"初始化项目结构\"><a href=\"#初始化项目结构\" class=\"headerlink\" title=\"初始化项目结构\"></a>初始化项目结构</h3><p>项目代码结构如下：<br><img src=\"http://o905ne85q.bkt.clouddn.com/703C.tmp.png\" alt=\"image\"><br>其中入口文件为<code>app/index.js</code>，模板文件为<code>templates/index.js</code>。</p>\n<h3 id=\"webpack设置\"><a href=\"#webpack设置\" class=\"headerlink\" title=\"webpack设置\"></a>webpack设置</h3><p>新建webpack.config.js文件，如下：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// webpack.config.js</span></div><div class=\"line\"><span class=\"keyword\">var</span> webpack = <span class=\"built_in\">require</span>(<span class=\"string\">'webpack'</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> path = <span class=\"built_in\">require</span>(<span class=\"string\">'path'</span>); <span class=\"comment\">//引入node的path库</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> config = &#123;</div><div class=\"line\">    <span class=\"attr\">entry</span>: [path.resolve(__dirname, <span class=\"string\">'app/index.js'</span>)], <span class=\"comment\">//入口文件</span></div><div class=\"line\">    output: &#123;</div><div class=\"line\">        <span class=\"attr\">path</span>: path.resolve(__dirname, <span class=\"string\">'dist'</span>), <span class=\"comment\">// 指定编译后的代码位置为 dist/bundle.js</span></div><div class=\"line\">        filename: <span class=\"string\">'bundle.js'</span></div><div class=\"line\">    &#125;,</div><div class=\"line\">    <span class=\"attr\">module</span>: &#123;</div><div class=\"line\">        <span class=\"attr\">loaders</span>: []</div><div class=\"line\">    &#125;,</div><div class=\"line\">    <span class=\"attr\">devtool</span>: <span class=\"string\">'source-map'</span></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">module</span>.exports = config;</div></pre></td></tr></table></figure></p>\n<h3 id=\"安装-html-webpack-plugin\"><a href=\"#安装-html-webpack-plugin\" class=\"headerlink\" title=\"安装 html-webpack-plugin\"></a>安装 html-webpack-plugin</h3><ul>\n<li>使用命令安装：</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">npm install html-webpack-plugin --save-dev</div></pre></td></tr></table></figure>\n<ul>\n<li>在webpack.config.js中增加:</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">plugins: [</div><div class=\"line\">  <span class=\"comment\">// 入口模板文件解析</span></div><div class=\"line\">  <span class=\"keyword\">new</span> HtmlwebpackPlugin(&#123;</div><div class=\"line\">    <span class=\"attr\">title</span>: <span class=\"string\">'React Redux Test'</span>,</div><div class=\"line\">    <span class=\"attr\">template</span>: path.resolve(__dirname, <span class=\"string\">'templates/index.ejs'</span>),</div><div class=\"line\">    <span class=\"attr\">inject</span>: <span class=\"string\">'body'</span></div><div class=\"line\">  &#125;)</div><div class=\"line\">]</div></pre></td></tr></table></figure>\n<h3 id=\"添加less样式loader\"><a href=\"#添加less样式loader\" class=\"headerlink\" title=\"添加less样式loader\"></a>添加less样式loader</h3><ul>\n<li>使用命令安装：</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">npm install css-loader style-loader less-loader --save-dev</div></pre></td></tr></table></figure>\n<ul>\n<li>在webpack.config.js中增加loader:</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;</div><div class=\"line\">  <span class=\"attr\">test</span>: <span class=\"regexp\">/\\.less$/</span>,</div><div class=\"line\">  <span class=\"attr\">loaders</span>: [<span class=\"string\">'style'</span>, <span class=\"string\">'css'</span>, <span class=\"string\">'less'</span>],</div><div class=\"line\">  <span class=\"attr\">include</span>: path.resolve(__dirname, <span class=\"string\">'app'</span>)</div><div class=\"line\">&#125;,</div><div class=\"line\">&#123; <span class=\"attr\">test</span>: <span class=\"regexp\">/\\.css$/</span>, <span class=\"attr\">loader</span>: <span class=\"string\">\"style-loader!css-loader\"</span> &#125;</div></pre></td></tr></table></figure>\n<h3 id=\"添加jsx-loader\"><a href=\"#添加jsx-loader\" class=\"headerlink\" title=\"添加jsx loader\"></a>添加jsx loader</h3><ul>\n<li>使用命令安装：</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">npm install babel-core babel-loader babel-preset-latest babel-preset-react --save-dev</div></pre></td></tr></table></figure>\n<ul>\n<li>在webpack.config.js中增加loader:</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;</div><div class=\"line\">  <span class=\"attr\">test</span>: <span class=\"regexp\">/\\.jsx?$/</span>,</div><div class=\"line\">  <span class=\"attr\">loader</span>: <span class=\"string\">'babel-loader'</span>,</div><div class=\"line\">  <span class=\"attr\">exclude</span>: <span class=\"string\">'node_modules'</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<ul>\n<li>新建.babelrc文件</li>\n</ul>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"attr\">\"presets\"</span>: [</div><div class=\"line\">        <span class=\"string\">\"latest\"</span>, <span class=\"string\">\"react\"</span>, &#123;</div><div class=\"line\">            <span class=\"attr\">\"ignore\"</span>: [<span class=\"string\">\"/node_modules\"</span>]</div><div class=\"line\">        &#125;</div><div class=\"line\">    ],</div><div class=\"line\">    <span class=\"attr\">\"plugins\"</span>: []</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"安装webpack-dev-server\"><a href=\"#安装webpack-dev-server\" class=\"headerlink\" title=\"安装webpack-dev-server\"></a>安装webpack-dev-server</h3><p>webpack-dev-server是一个小型的node.js Express服务器,它使用webpack-dev-middleware中间件来为通过webpack打包生成的资源文件提供Web服务。<br>webpack-dev-server可以让我们在本地启动一个web服务器，使我们更方便的查看正在开发的项目。</p>\n<p>webpack-dev-server支持两种模式来自动刷新页面：</p>\n<ol>\n<li>iframe模式(页面放在iframe中,当发生改变时重载)</li>\n<li>inline模式(将webpack-dev-sever的客户端入口添加到包(bundle)中)<br>具体的大家查看<a href=\"http://webpack.github.io/docs/webpack-dev-server.html\" target=\"_blank\" rel=\"external\">文档</a>呗。</li>\n</ol>\n<ul>\n<li>使用命令安装：</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">npm install webpack-dev-server --save-dev</div></pre></td></tr></table></figure>\n<ul>\n<li>在webpack.config.js中修改entry:</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">entry: [</div><div class=\"line\">  <span class=\"string\">'webpack/hot/dev-server'</span>,</div><div class=\"line\">  <span class=\"string\">'webpack-dev-server/client?http://localhost:3333'</span>,</div><div class=\"line\">  path.resolve(__dirname, <span class=\"string\">'app/index.js'</span>)</div><div class=\"line\">], <span class=\"comment\">//入口文件</span></div></pre></td></tr></table></figure>\n<ul>\n<li>在 package.json 中增加 webpack-dev-server 的快捷方式</li>\n</ul>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">// package.json</div><div class=\"line\">\"scripts\": &#123;</div><div class=\"line\">  \"dev\": \"webpack-dev-server --port 3333 --devtool eval --progress --colors --hot --content-base dist --host 0.0.0.0\",</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>配置中指定web服务器端口号为3333，指定目录为dist。</p>\n<h3 id=\"完整的package-json\"><a href=\"#完整的package-json\" class=\"headerlink\" title=\"完整的package.json\"></a>完整的package.json</h3><p>代码如下：<br><figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"attr\">\"dependencies\"</span>: &#123;</div><div class=\"line\">        <span class=\"attr\">\"react\"</span>: <span class=\"string\">\"^15.3.2\"</span>,</div><div class=\"line\">        <span class=\"attr\">\"react-dom\"</span>: <span class=\"string\">\"^15.3.2\"</span>,</div><div class=\"line\">        <span class=\"attr\">\"react-router\"</span>: <span class=\"string\">\"^3.0.0\"</span>,</div><div class=\"line\">        <span class=\"attr\">\"webpack\"</span>: <span class=\"string\">\"^1.13.3\"</span></div><div class=\"line\">    &#125;,</div><div class=\"line\">    <span class=\"attr\">\"scripts\"</span>: &#123;</div><div class=\"line\">        <span class=\"attr\">\"dev\"</span>: <span class=\"string\">\"webpack-dev-server --port 3333 --devtool eval --progress --colors --hot --content-base dist --host 0.0.0.0\"</span></div><div class=\"line\">    &#125;,</div><div class=\"line\">    <span class=\"attr\">\"devDependencies\"</span>: &#123;</div><div class=\"line\">        <span class=\"attr\">\"babel-core\"</span>: <span class=\"string\">\"^6.18.2\"</span>,</div><div class=\"line\">        <span class=\"attr\">\"babel-loader\"</span>: <span class=\"string\">\"^6.2.7\"</span>,</div><div class=\"line\">        <span class=\"attr\">\"babel-preset-latest\"</span>: <span class=\"string\">\"^6.16.0\"</span>,</div><div class=\"line\">        <span class=\"attr\">\"babel-preset-react\"</span>: <span class=\"string\">\"^6.16.0\"</span>,</div><div class=\"line\">        <span class=\"attr\">\"css-loader\"</span>: <span class=\"string\">\"^0.25.0\"</span>,</div><div class=\"line\">        <span class=\"attr\">\"html-webpack-plugin\"</span>: <span class=\"string\">\"^2.24.1\"</span>,</div><div class=\"line\">        <span class=\"attr\">\"less-loader\"</span>: <span class=\"string\">\"^2.2.3\"</span>,</div><div class=\"line\">        <span class=\"attr\">\"style-loader\"</span>: <span class=\"string\">\"^0.13.1\"</span>,</div><div class=\"line\">        <span class=\"attr\">\"webpack-dev-server\"</span>: <span class=\"string\">\"^1.16.2\"</span></div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h3 id=\"完整的webpack-config-js\"><a href=\"#完整的webpack-config-js\" class=\"headerlink\" title=\"完整的webpack.config.js\"></a>完整的webpack.config.js</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> webpack = <span class=\"built_in\">require</span>(<span class=\"string\">'webpack'</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> path = <span class=\"built_in\">require</span>(<span class=\"string\">'path'</span>); <span class=\"comment\">//引入node的path库</span></div><div class=\"line\"><span class=\"keyword\">var</span> HtmlwebpackPlugin = <span class=\"built_in\">require</span>(<span class=\"string\">'html-webpack-plugin'</span>);</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> config = &#123;</div><div class=\"line\">    <span class=\"attr\">entry</span>: [<span class=\"string\">'webpack/hot/dev-server'</span>,</div><div class=\"line\">        <span class=\"string\">'webpack-dev-server/client?http://localhost:3000'</span>,</div><div class=\"line\">        path.resolve(__dirname, <span class=\"string\">'app/index.js'</span>)</div><div class=\"line\">    ], <span class=\"comment\">//入口文件</span></div><div class=\"line\">    output: &#123;</div><div class=\"line\">        <span class=\"attr\">path</span>: path.resolve(__dirname, <span class=\"string\">'dist'</span>), <span class=\"comment\">// 指定编译后的代码位置为 dist/bundle.js</span></div><div class=\"line\">        filename: <span class=\"string\">'bundle.js'</span></div><div class=\"line\">    &#125;,</div><div class=\"line\">    <span class=\"attr\">module</span>: &#123;</div><div class=\"line\">        <span class=\"attr\">loaders</span>: [</div><div class=\"line\">            <span class=\"comment\">// 为webpack指定loaders</span></div><div class=\"line\">            &#123;</div><div class=\"line\">                <span class=\"attr\">test</span>: <span class=\"regexp\">/\\.less$/</span>,</div><div class=\"line\">                <span class=\"attr\">loaders</span>: [<span class=\"string\">'style'</span>, <span class=\"string\">'css'</span>, <span class=\"string\">'less'</span>],</div><div class=\"line\">                <span class=\"attr\">include</span>: path.resolve(__dirname, <span class=\"string\">'app'</span>)</div><div class=\"line\">            &#125;,</div><div class=\"line\">            &#123;</div><div class=\"line\">                <span class=\"attr\">test</span>: <span class=\"regexp\">/\\.jsx?$/</span>,</div><div class=\"line\">                <span class=\"attr\">loader</span>: <span class=\"string\">'babel-loader'</span>,</div><div class=\"line\">                <span class=\"attr\">exclude</span>: <span class=\"string\">'node_modules'</span></div><div class=\"line\">            &#125;</div><div class=\"line\">        ]</div><div class=\"line\">    &#125;,</div><div class=\"line\">    <span class=\"attr\">plugins</span>: [</div><div class=\"line\">        <span class=\"comment\">// 入口模板文件解析</span></div><div class=\"line\">        <span class=\"keyword\">new</span> HtmlwebpackPlugin(&#123;</div><div class=\"line\">            <span class=\"attr\">title</span>: <span class=\"string\">'React Redux Test'</span>,</div><div class=\"line\">            <span class=\"attr\">template</span>: path.resolve(__dirname, <span class=\"string\">'templates/index.ejs'</span>),</div><div class=\"line\">            <span class=\"attr\">inject</span>: <span class=\"string\">'body'</span></div><div class=\"line\">        &#125;)</div><div class=\"line\">    ],</div><div class=\"line\">    <span class=\"attr\">devtool</span>: <span class=\"string\">'source-map'</span></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">module</span>.exports = config;</div></pre></td></tr></table></figure>\n<p>此时我们使用<code>npm run dev</code>就可以启动项目。</p>\n<h2 id=\"项目代码初始化\"><a href=\"#项目代码初始化\" class=\"headerlink\" title=\"项目代码初始化\"></a>项目代码初始化</h2><hr>\n<h3 id=\"模板文件\"><a href=\"#模板文件\" class=\"headerlink\" title=\"模板文件\"></a>模板文件</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">// templates/index.ejs</div><div class=\"line\">&lt;!DOCTYPE html&gt;</div><div class=\"line\">&lt;html&gt;</div><div class=\"line\">  &lt;head&gt;</div><div class=\"line\">    &lt;meta charset=&quot;utf-8&quot;&gt;</div><div class=\"line\">    &lt;title&gt;react-redux-test&lt;/title&gt;   </div><div class=\"line\">  &lt;/head&gt;</div><div class=\"line\">  &lt;body class=&quot;nav-md&quot;&gt;</div><div class=\"line\">    &lt;div id=&quot;app&quot;&gt;&lt;/div&gt;</div><div class=\"line\">  &lt;/body&gt;</div><div class=\"line\">&lt;/html&gt;</div></pre></td></tr></table></figure>\n<h3 id=\"index-js入口文件\"><a href=\"#index-js入口文件\" class=\"headerlink\" title=\"index.js入口文件\"></a>index.js入口文件</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> React <span class=\"keyword\">from</span> <span class=\"string\">'react'</span>; <span class=\"comment\">//react</span></div><div class=\"line\"><span class=\"keyword\">import</span> ReactDOM <span class=\"keyword\">from</span> <span class=\"string\">'react-dom'</span>; <span class=\"comment\">//react-dom</span></div><div class=\"line\"><span class=\"keyword\">import</span> Index <span class=\"keyword\">from</span> <span class=\"string\">'./components/index.jsx'</span>; <span class=\"comment\">//index自定义组件</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//将其渲染到页面上id为app的DOM元素内</span></div><div class=\"line\">ReactDOM.render( <span class=\"xml\"><span class=\"tag\">&lt; <span class=\"attr\">Index</span> / &gt;</span> , document.getElementById(\"app\"));</span></div></pre></td></tr></table></figure>\n<h3 id=\"Index组件\"><a href=\"#Index组件\" class=\"headerlink\" title=\"Index组件\"></a>Index组件</h3><figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// app/components/index.ejs</span></div><div class=\"line\"><span class=\"keyword\">import</span> React <span class=\"keyword\">from</span> <span class=\"string\">'react'</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">const</span> Index = React.createClass(&#123;</div><div class=\"line\">  render() &#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> (</div><div class=\"line\">      <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span>Hello\tWorld!<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></div><div class=\"line\">    );</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">module</span>.exports = Index;</div></pre></td></tr></table></figure>\n<p>至此，我们初步搭建了个React的项目。<br><a href=\"http://localhost:3333/\" target=\"_blank\" rel=\"external\">打开页面</a>就可以看到输出的Hello World!啦。</p>\n<h2 id=\"结束语\"><a href=\"#结束语\" class=\"headerlink\" title=\"结束语\"></a>结束语</h2><hr>\n<p>关于webpack，其实大家可以花更多的时间去学习一下，这个工具真的是棒棒哒，像其他热加载方式或者是其他更加自动化的流程也是需要大家不断去发现和完善的呢。<br><a href=\"https://github.com/godbasin/godbasin.github.io/tree/blog-codes/react-redux-notes/1-build-react-project\" target=\"_blank\" rel=\"external\">此处查看项目代码</a></p>\n","excerpt":"<p>最近又重新拾起了React框架，并配合开源模板gentelella以及Redux建立了个简单的项目。《React-Redux使用笔记》系列用于记录过程中的一些使用和解决方法。<br>本文记录使用Webpack初步搭建开发环境的过程。<br>","more":"</p>\n<p>自从引入了一套后台管理模板gentelella，越使用越感觉心情愉快呢。<br><a href=\"https://github.com/puikinsh/gentelella\">gentelella github</a></p>\n<h2 id=\"安装配置webpack\"><a href=\"#安装配置webpack\" class=\"headerlink\" title=\"安装配置webpack\"></a>安装配置webpack</h2><hr>\n<p>Webpack将项目中的所有静态资源都当做模块，模块之间可以互相依赖，由webpack对它们进行统一的管理和打包发布。</p>\n<p>这里主要参考<a href=\"http://www.open-open.com/lib/view/open1462013660085.html\">《手把手教你基于ES6架构自己的React Boilerplate项目》</a>。</p>\n<h3 id=\"Webpack\"><a href=\"#Webpack\" class=\"headerlink\" title=\"Webpack\"></a>Webpack</h3><ul>\n<li><p>webpack支持的功能特性：<br>1.支持CommonJs和AMD模块，意思也就是我们基本可以无痛迁移旧项目。<br>2.支持模块加载器和插件机制，可对模块灵活定制。特别是babel-loader，有效支持ES6。<br>3.可以通过配置，打包成多个文件。有效利用浏览器的缓存功能提升性能。<br>4.将样式文件和图片等静态资源也可视为模块进行打包。配合loader加载器，可以支持sass，less等CSS预处理器。<br>5.内置有source map，即使打包在一起依旧方便调试。</p>\n</li>\n<li><p>loader加载器</p>\n<blockquote>\n<p>loaders被应用于应用程序的资源文件中，通常用来做转换。<br>它们都是函数（运行在nodejs中），将资源文件的源码作为入参，处理完后，返回新的源码文件。</p>\n<ul>\n<li>less/sass loader加载器</li>\n<li>url-loader可对图片资源打包</li>\n<li>babel ES6预处理器</li>\n</ul>\n</blockquote>\n</li>\n</ul>\n<h3 id=\"安装nodejs和npm\"><a href=\"#安装nodejs和npm\" class=\"headerlink\" title=\"安装nodejs和npm\"></a>安装nodejs和npm</h3><p>在<a href=\"https://nodejs.org/\">nodejs官网</a>下载nodejs(里面携带npm)并安装。</p>\n<h3 id=\"初始化项目环境\"><a href=\"#初始化项目环境\" class=\"headerlink\" title=\"初始化项目环境\"></a>初始化项目环境</h3><p>新建package.json文件，如下：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">// package.json</div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"string\">\"dependencies\"</span>: &#123;</div><div class=\"line\">        <span class=\"string\">\"react\"</span>: <span class=\"string\">\"^15.3.2\"</span>,</div><div class=\"line\">        <span class=\"string\">\"react-dom\"</span>: <span class=\"string\">\"^15.3.2\"</span>,</div><div class=\"line\">        <span class=\"string\">\"react-router\"</span>: <span class=\"string\">\"^3.0.0\"</span>,</div><div class=\"line\">        <span class=\"string\">\"webpack\"</span>: <span class=\"string\">\"^1.13.3\"</span></div><div class=\"line\">    &#125;,</div><div class=\"line\">    <span class=\"string\">\"scripts\"</span>: &#123;&#125;,</div><div class=\"line\">    <span class=\"string\">\"devDependencies\"</span>: &#123;&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>使用<code>npm install</code>则可安装webpack和react。</p>\n<h3 id=\"初始化项目结构\"><a href=\"#初始化项目结构\" class=\"headerlink\" title=\"初始化项目结构\"></a>初始化项目结构</h3><p>项目代码结构如下：<br><img src=\"http://o905ne85q.bkt.clouddn.com/703C.tmp.png\" alt=\"image\"><br>其中入口文件为<code>app/index.js</code>，模板文件为<code>templates/index.js</code>。</p>\n<h3 id=\"webpack设置\"><a href=\"#webpack设置\" class=\"headerlink\" title=\"webpack设置\"></a>webpack设置</h3><p>新建webpack.config.js文件，如下：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// webpack.config.js</span></div><div class=\"line\"><span class=\"keyword\">var</span> webpack = <span class=\"built_in\">require</span>(<span class=\"string\">'webpack'</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> path = <span class=\"built_in\">require</span>(<span class=\"string\">'path'</span>); <span class=\"comment\">//引入node的path库</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> config = &#123;</div><div class=\"line\">    <span class=\"attr\">entry</span>: [path.resolve(__dirname, <span class=\"string\">'app/index.js'</span>)], <span class=\"comment\">//入口文件</span></div><div class=\"line\">    output: &#123;</div><div class=\"line\">        <span class=\"attr\">path</span>: path.resolve(__dirname, <span class=\"string\">'dist'</span>), <span class=\"comment\">// 指定编译后的代码位置为 dist/bundle.js</span></div><div class=\"line\">        filename: <span class=\"string\">'bundle.js'</span></div><div class=\"line\">    &#125;,</div><div class=\"line\">    <span class=\"attr\">module</span>: &#123;</div><div class=\"line\">        <span class=\"attr\">loaders</span>: []</div><div class=\"line\">    &#125;,</div><div class=\"line\">    <span class=\"attr\">devtool</span>: <span class=\"string\">'source-map'</span></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">module</span>.exports = config;</div></pre></td></tr></table></figure></p>\n<h3 id=\"安装-html-webpack-plugin\"><a href=\"#安装-html-webpack-plugin\" class=\"headerlink\" title=\"安装 html-webpack-plugin\"></a>安装 html-webpack-plugin</h3><ul>\n<li>使用命令安装：</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">npm install html-webpack-plugin --save-dev</div></pre></td></tr></table></figure>\n<ul>\n<li>在webpack.config.js中增加:</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">plugins: [</div><div class=\"line\">  <span class=\"comment\">// 入口模板文件解析</span></div><div class=\"line\">  <span class=\"keyword\">new</span> HtmlwebpackPlugin(&#123;</div><div class=\"line\">    <span class=\"attr\">title</span>: <span class=\"string\">'React Redux Test'</span>,</div><div class=\"line\">    <span class=\"attr\">template</span>: path.resolve(__dirname, <span class=\"string\">'templates/index.ejs'</span>),</div><div class=\"line\">    <span class=\"attr\">inject</span>: <span class=\"string\">'body'</span></div><div class=\"line\">  &#125;)</div><div class=\"line\">]</div></pre></td></tr></table></figure>\n<h3 id=\"添加less样式loader\"><a href=\"#添加less样式loader\" class=\"headerlink\" title=\"添加less样式loader\"></a>添加less样式loader</h3><ul>\n<li>使用命令安装：</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">npm install css-loader style-loader less-loader --save-dev</div></pre></td></tr></table></figure>\n<ul>\n<li>在webpack.config.js中增加loader:</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;</div><div class=\"line\">  <span class=\"attr\">test</span>: <span class=\"regexp\">/\\.less$/</span>,</div><div class=\"line\">  <span class=\"attr\">loaders</span>: [<span class=\"string\">'style'</span>, <span class=\"string\">'css'</span>, <span class=\"string\">'less'</span>],</div><div class=\"line\">  <span class=\"attr\">include</span>: path.resolve(__dirname, <span class=\"string\">'app'</span>)</div><div class=\"line\">&#125;,</div><div class=\"line\">&#123; <span class=\"attr\">test</span>: <span class=\"regexp\">/\\.css$/</span>, <span class=\"attr\">loader</span>: <span class=\"string\">\"style-loader!css-loader\"</span> &#125;</div></pre></td></tr></table></figure>\n<h3 id=\"添加jsx-loader\"><a href=\"#添加jsx-loader\" class=\"headerlink\" title=\"添加jsx loader\"></a>添加jsx loader</h3><ul>\n<li>使用命令安装：</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">npm install babel-core babel-loader babel-preset-latest babel-preset-react --save-dev</div></pre></td></tr></table></figure>\n<ul>\n<li>在webpack.config.js中增加loader:</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;</div><div class=\"line\">  <span class=\"attr\">test</span>: <span class=\"regexp\">/\\.jsx?$/</span>,</div><div class=\"line\">  <span class=\"attr\">loader</span>: <span class=\"string\">'babel-loader'</span>,</div><div class=\"line\">  <span class=\"attr\">exclude</span>: <span class=\"string\">'node_modules'</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<ul>\n<li>新建.babelrc文件</li>\n</ul>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"attr\">\"presets\"</span>: [</div><div class=\"line\">        <span class=\"string\">\"latest\"</span>, <span class=\"string\">\"react\"</span>, &#123;</div><div class=\"line\">            <span class=\"attr\">\"ignore\"</span>: [<span class=\"string\">\"/node_modules\"</span>]</div><div class=\"line\">        &#125;</div><div class=\"line\">    ],</div><div class=\"line\">    <span class=\"attr\">\"plugins\"</span>: []</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"安装webpack-dev-server\"><a href=\"#安装webpack-dev-server\" class=\"headerlink\" title=\"安装webpack-dev-server\"></a>安装webpack-dev-server</h3><p>webpack-dev-server是一个小型的node.js Express服务器,它使用webpack-dev-middleware中间件来为通过webpack打包生成的资源文件提供Web服务。<br>webpack-dev-server可以让我们在本地启动一个web服务器，使我们更方便的查看正在开发的项目。</p>\n<p>webpack-dev-server支持两种模式来自动刷新页面：</p>\n<ol>\n<li>iframe模式(页面放在iframe中,当发生改变时重载)</li>\n<li>inline模式(将webpack-dev-sever的客户端入口添加到包(bundle)中)<br>具体的大家查看<a href=\"http://webpack.github.io/docs/webpack-dev-server.html\">文档</a>呗。</li>\n</ol>\n<ul>\n<li>使用命令安装：</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">npm install webpack-dev-server --save-dev</div></pre></td></tr></table></figure>\n<ul>\n<li>在webpack.config.js中修改entry:</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">entry: [</div><div class=\"line\">  <span class=\"string\">'webpack/hot/dev-server'</span>,</div><div class=\"line\">  <span class=\"string\">'webpack-dev-server/client?http://localhost:3333'</span>,</div><div class=\"line\">  path.resolve(__dirname, <span class=\"string\">'app/index.js'</span>)</div><div class=\"line\">], <span class=\"comment\">//入口文件</span></div></pre></td></tr></table></figure>\n<ul>\n<li>在 package.json 中增加 webpack-dev-server 的快捷方式</li>\n</ul>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">// package.json</div><div class=\"line\">\"scripts\": &#123;</div><div class=\"line\">  \"dev\": \"webpack-dev-server --port 3333 --devtool eval --progress --colors --hot --content-base dist --host 0.0.0.0\",</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>配置中指定web服务器端口号为3333，指定目录为dist。</p>\n<h3 id=\"完整的package-json\"><a href=\"#完整的package-json\" class=\"headerlink\" title=\"完整的package.json\"></a>完整的package.json</h3><p>代码如下：<br><figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"attr\">\"dependencies\"</span>: &#123;</div><div class=\"line\">        <span class=\"attr\">\"react\"</span>: <span class=\"string\">\"^15.3.2\"</span>,</div><div class=\"line\">        <span class=\"attr\">\"react-dom\"</span>: <span class=\"string\">\"^15.3.2\"</span>,</div><div class=\"line\">        <span class=\"attr\">\"react-router\"</span>: <span class=\"string\">\"^3.0.0\"</span>,</div><div class=\"line\">        <span class=\"attr\">\"webpack\"</span>: <span class=\"string\">\"^1.13.3\"</span></div><div class=\"line\">    &#125;,</div><div class=\"line\">    <span class=\"attr\">\"scripts\"</span>: &#123;</div><div class=\"line\">        <span class=\"attr\">\"dev\"</span>: <span class=\"string\">\"webpack-dev-server --port 3333 --devtool eval --progress --colors --hot --content-base dist --host 0.0.0.0\"</span></div><div class=\"line\">    &#125;,</div><div class=\"line\">    <span class=\"attr\">\"devDependencies\"</span>: &#123;</div><div class=\"line\">        <span class=\"attr\">\"babel-core\"</span>: <span class=\"string\">\"^6.18.2\"</span>,</div><div class=\"line\">        <span class=\"attr\">\"babel-loader\"</span>: <span class=\"string\">\"^6.2.7\"</span>,</div><div class=\"line\">        <span class=\"attr\">\"babel-preset-latest\"</span>: <span class=\"string\">\"^6.16.0\"</span>,</div><div class=\"line\">        <span class=\"attr\">\"babel-preset-react\"</span>: <span class=\"string\">\"^6.16.0\"</span>,</div><div class=\"line\">        <span class=\"attr\">\"css-loader\"</span>: <span class=\"string\">\"^0.25.0\"</span>,</div><div class=\"line\">        <span class=\"attr\">\"html-webpack-plugin\"</span>: <span class=\"string\">\"^2.24.1\"</span>,</div><div class=\"line\">        <span class=\"attr\">\"less-loader\"</span>: <span class=\"string\">\"^2.2.3\"</span>,</div><div class=\"line\">        <span class=\"attr\">\"style-loader\"</span>: <span class=\"string\">\"^0.13.1\"</span>,</div><div class=\"line\">        <span class=\"attr\">\"webpack-dev-server\"</span>: <span class=\"string\">\"^1.16.2\"</span></div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h3 id=\"完整的webpack-config-js\"><a href=\"#完整的webpack-config-js\" class=\"headerlink\" title=\"完整的webpack.config.js\"></a>完整的webpack.config.js</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> webpack = <span class=\"built_in\">require</span>(<span class=\"string\">'webpack'</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> path = <span class=\"built_in\">require</span>(<span class=\"string\">'path'</span>); <span class=\"comment\">//引入node的path库</span></div><div class=\"line\"><span class=\"keyword\">var</span> HtmlwebpackPlugin = <span class=\"built_in\">require</span>(<span class=\"string\">'html-webpack-plugin'</span>);</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> config = &#123;</div><div class=\"line\">    <span class=\"attr\">entry</span>: [<span class=\"string\">'webpack/hot/dev-server'</span>,</div><div class=\"line\">        <span class=\"string\">'webpack-dev-server/client?http://localhost:3000'</span>,</div><div class=\"line\">        path.resolve(__dirname, <span class=\"string\">'app/index.js'</span>)</div><div class=\"line\">    ], <span class=\"comment\">//入口文件</span></div><div class=\"line\">    output: &#123;</div><div class=\"line\">        <span class=\"attr\">path</span>: path.resolve(__dirname, <span class=\"string\">'dist'</span>), <span class=\"comment\">// 指定编译后的代码位置为 dist/bundle.js</span></div><div class=\"line\">        filename: <span class=\"string\">'bundle.js'</span></div><div class=\"line\">    &#125;,</div><div class=\"line\">    <span class=\"attr\">module</span>: &#123;</div><div class=\"line\">        <span class=\"attr\">loaders</span>: [</div><div class=\"line\">            <span class=\"comment\">// 为webpack指定loaders</span></div><div class=\"line\">            &#123;</div><div class=\"line\">                <span class=\"attr\">test</span>: <span class=\"regexp\">/\\.less$/</span>,</div><div class=\"line\">                <span class=\"attr\">loaders</span>: [<span class=\"string\">'style'</span>, <span class=\"string\">'css'</span>, <span class=\"string\">'less'</span>],</div><div class=\"line\">                <span class=\"attr\">include</span>: path.resolve(__dirname, <span class=\"string\">'app'</span>)</div><div class=\"line\">            &#125;,</div><div class=\"line\">            &#123;</div><div class=\"line\">                <span class=\"attr\">test</span>: <span class=\"regexp\">/\\.jsx?$/</span>,</div><div class=\"line\">                <span class=\"attr\">loader</span>: <span class=\"string\">'babel-loader'</span>,</div><div class=\"line\">                <span class=\"attr\">exclude</span>: <span class=\"string\">'node_modules'</span></div><div class=\"line\">            &#125;</div><div class=\"line\">        ]</div><div class=\"line\">    &#125;,</div><div class=\"line\">    <span class=\"attr\">plugins</span>: [</div><div class=\"line\">        <span class=\"comment\">// 入口模板文件解析</span></div><div class=\"line\">        <span class=\"keyword\">new</span> HtmlwebpackPlugin(&#123;</div><div class=\"line\">            <span class=\"attr\">title</span>: <span class=\"string\">'React Redux Test'</span>,</div><div class=\"line\">            <span class=\"attr\">template</span>: path.resolve(__dirname, <span class=\"string\">'templates/index.ejs'</span>),</div><div class=\"line\">            <span class=\"attr\">inject</span>: <span class=\"string\">'body'</span></div><div class=\"line\">        &#125;)</div><div class=\"line\">    ],</div><div class=\"line\">    <span class=\"attr\">devtool</span>: <span class=\"string\">'source-map'</span></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">module</span>.exports = config;</div></pre></td></tr></table></figure>\n<p>此时我们使用<code>npm run dev</code>就可以启动项目。</p>\n<h2 id=\"项目代码初始化\"><a href=\"#项目代码初始化\" class=\"headerlink\" title=\"项目代码初始化\"></a>项目代码初始化</h2><hr>\n<h3 id=\"模板文件\"><a href=\"#模板文件\" class=\"headerlink\" title=\"模板文件\"></a>模板文件</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">// templates/index.ejs</div><div class=\"line\">&lt;!DOCTYPE html&gt;</div><div class=\"line\">&lt;html&gt;</div><div class=\"line\">  &lt;head&gt;</div><div class=\"line\">    &lt;meta charset=&quot;utf-8&quot;&gt;</div><div class=\"line\">    &lt;title&gt;react-redux-test&lt;/title&gt;   </div><div class=\"line\">  &lt;/head&gt;</div><div class=\"line\">  &lt;body class=&quot;nav-md&quot;&gt;</div><div class=\"line\">    &lt;div id=&quot;app&quot;&gt;&lt;/div&gt;</div><div class=\"line\">  &lt;/body&gt;</div><div class=\"line\">&lt;/html&gt;</div></pre></td></tr></table></figure>\n<h3 id=\"index-js入口文件\"><a href=\"#index-js入口文件\" class=\"headerlink\" title=\"index.js入口文件\"></a>index.js入口文件</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> React <span class=\"keyword\">from</span> <span class=\"string\">'react'</span>; <span class=\"comment\">//react</span></div><div class=\"line\"><span class=\"keyword\">import</span> ReactDOM <span class=\"keyword\">from</span> <span class=\"string\">'react-dom'</span>; <span class=\"comment\">//react-dom</span></div><div class=\"line\"><span class=\"keyword\">import</span> Index <span class=\"keyword\">from</span> <span class=\"string\">'./components/index.jsx'</span>; <span class=\"comment\">//index自定义组件</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//将其渲染到页面上id为app的DOM元素内</span></div><div class=\"line\">ReactDOM.render( <span class=\"xml\"><span class=\"tag\">&lt; <span class=\"attr\">Index</span> / &gt;</span> , document.getElementById(\"app\"));</span></div></pre></td></tr></table></figure>\n<h3 id=\"Index组件\"><a href=\"#Index组件\" class=\"headerlink\" title=\"Index组件\"></a>Index组件</h3><figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// app/components/index.ejs</span></div><div class=\"line\"><span class=\"keyword\">import</span> React <span class=\"keyword\">from</span> <span class=\"string\">'react'</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">const</span> Index = React.createClass(&#123;</div><div class=\"line\">  render() &#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> (</div><div class=\"line\">      <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span>Hello\tWorld!<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></div><div class=\"line\">    );</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">module</span>.exports = Index;</div></pre></td></tr></table></figure>\n<p>至此，我们初步搭建了个React的项目。<br><a href=\"http://localhost:3333/\">打开页面</a>就可以看到输出的Hello World!啦。</p>\n<h2 id=\"结束语\"><a href=\"#结束语\" class=\"headerlink\" title=\"结束语\"></a>结束语</h2><hr>\n<p>关于webpack，其实大家可以花更多的时间去学习一下，这个工具真的是棒棒哒，像其他热加载方式或者是其他更加自动化的流程也是需要大家不断去发现和完善的呢。<br><a href=\"https://github.com/godbasin/godbasin.github.io/tree/blog-codes/react-redux-notes/1-build-react-project\">此处查看项目代码</a></p>"},{"title":"jQuery响应式瀑布流","date":"2016-06-20T12:42:49.000Z","_content":"之前用jQuery写过一个响应式的瀑布流。本文介绍实现方法。\n<!--more-->\n\n代码放在github上，有兴趣的小伙伴可以下载看\n[responsive-waterfall](https://github.com/godbasin/godbasin.github.io/tree/blog-codes/responsive-waterfall)\n\n最终效果图如下，改变浏览器大小效果更棒哦[点击查看页面](http://o922dcmwp.bkt.clouddn.com/index.html)\n![image](http://o905ne85q.bkt.clouddn.com/responsive-waterfall.png)\n\n以下我们将每个瀑布流盒子简称为box\n\n## 使用数组记录每个box宽和高\n-----\n\n### 设置不同屏幕宽度下每一行box的数量\n- 使用$(window).width()获取屏幕宽度\n- 根据不同屏幕宽度设置每一行box的数量\n- 得到每个box的宽度\n- 这里使用最傻的方法计算，有待优化\n\n``` javascript\nvar num = 4; //每行box数量\nif ($(window).width() <= 500) num = 1;\nif ($(window).width() > 500) num = 2;\nif ($(window).width() > 800) num = 3;\nif ($(window).width() > 1200) num = 5;\nvar boxWidth = $(window).width() / num; //每个box宽度\n```\n\n### 创建数组对象\n- 每个数组元素为对象，该对象属性有width/height/top/left等\n\n``` javascript\nfunction boxStyle(width, height, top, left) {\n\tthis.position = \"absolute\";\n\tthis.width = width;\n\tthis.height = height;\n\tthis.top = top;\n\tthis.left = left;\n}\n```\n\n### 创建数组记录元素宽高\n这里简述一下瀑布流原理：第一行box从左往右排列，第二行开始box的添加位置为各列中高度最小的一列，添加后该列高度则加上该box高度，以此类推\n- 设置每个元素宽度，高度自定义auto\n- 创建数组boxStyleArr来保存每个元素宽高\n- 使用数组boxArr保存每一竖列的高度，即每一竖列最后一个box的底部位置\n- 使用瀑布流原理计算每个box的位置（left和top）,并保存到数组boxStyleArr\n\n``` javascript\nbox.each(function(index, value) {\n\t//设置每个元素宽度，高度自定义auto\n\t$(value).css({\n\t\t\"width\": boxWidth,\n\t\t\"height\": \"auto\"\n\t});\n\t//数组boxStyleArr保存每个元素宽高\n\tboxStyleArr[index] = new boxStyle();\n\tboxStyleArr[index].width = boxWidth;\n\tboxStyleArr[index].height = box.eq(index).height();\n\t//首行box从左到右依次排列\n\tif (index < num) {\n\t\tboxArr[index] = boxStyleArr[index].height;\n\t\tboxStyleArr[index].left = boxWidth * index;\n\t\tboxStyleArr[index].top = 0;\n\t//瀑布流原理计算每个box的位置（left和top）\n\t} else {\n\t\tvar minboxHeight = Math.min.apply(null, boxArr);\n\t\tvar minboxIndex = $.inArray(minboxHeight, boxArr);\n\t\tboxStyleArr[index].left = boxStyleArr[minboxIndex].left;\n\t\tboxStyleArr[index].top = minboxHeight;\n\t\tboxArr[minboxIndex] += boxStyleArr[index].height;\n\t}\n});\n```\n\n\n## 放置box\n-----\n- 根据数组boxStyleArr，将每个box使用绝对定位放置到相应位置\n- 这里使用了动画效果，使所有box从左上角伸展\n\n``` javascript\nfunction boxLocation() {\n\tvar box = $(\".response\");\n\tvar boxStyleArr = [];\n\tboxArrBuild(boxStyleArr);\n\tbox.each(function(index, value) {\n\t\t//设置每个box最初位置为左上角，宽高为0\n\t\t$(value).css({\n\t\t\t\"position\": \"absolute\",\n\t\t\t\"top\": 0,\n\t\t\t\"left\": 0,\n\t\t\t\"width\": 0,\n\t\t\t\"height\": 0\n\t\t});\n\t\t//动画效果使box们进行伸展\n\t\t$(value).animate({\n\t\t\ttop: boxStyleArr[index].top,\n\t\t\tleft: boxStyleArr[index].left,\n\t\t\theight: boxStyleArr[index].height,\n\t\t\twidth: boxStyleArr[index].width\n\t\t}, 500);\n\t});\n}\n```\n\n## 绑定屏幕宽度改变事件\n-----\n- 当屏幕大小改变时，触发重新计算box位置\n  - 为了避免浏览器频繁改变宽度，这里增加了个小判断\n  - 当屏幕改变后200毫秒内不再改变，才触发重新计算\n\n``` javascript\n$(window).on(\"load\", function() {\n\tboxLocation();\n\twindow.onresize = function() {\n\t\twindowWidth = $(window).width();\n\t\tif (interval == null) {\n\t\t\tinterval = setInterval(\"test()\", 200);\n\t\t}\n\t}\n});\n```\n\n## 待完善的地方\n-----\n### 考虑图片加载\n- 图片加载过程可能影响对box高度判断\n- 可通过img.load来确保图片加载完成或者失败之后才进行计算\n### 代码优化&封装\n- 尽情发挥你的创造力吧\n\n## 结束语\n-----\n这个效果是我从别人的博客看到的，然后自己用jQuery实现，这也不失为创造的乐趣呢。","source":"_posts/responsive-waterfall.md","raw":"---\ntitle: jQuery响应式瀑布流\ndate: 2016-06-20 20:42:49\ncategories: jQuery杂烩\ntags: 逻辑实现\n---\n之前用jQuery写过一个响应式的瀑布流。本文介绍实现方法。\n<!--more-->\n\n代码放在github上，有兴趣的小伙伴可以下载看\n[responsive-waterfall](https://github.com/godbasin/godbasin.github.io/tree/blog-codes/responsive-waterfall)\n\n最终效果图如下，改变浏览器大小效果更棒哦[点击查看页面](http://o922dcmwp.bkt.clouddn.com/index.html)\n![image](http://o905ne85q.bkt.clouddn.com/responsive-waterfall.png)\n\n以下我们将每个瀑布流盒子简称为box\n\n## 使用数组记录每个box宽和高\n-----\n\n### 设置不同屏幕宽度下每一行box的数量\n- 使用$(window).width()获取屏幕宽度\n- 根据不同屏幕宽度设置每一行box的数量\n- 得到每个box的宽度\n- 这里使用最傻的方法计算，有待优化\n\n``` javascript\nvar num = 4; //每行box数量\nif ($(window).width() <= 500) num = 1;\nif ($(window).width() > 500) num = 2;\nif ($(window).width() > 800) num = 3;\nif ($(window).width() > 1200) num = 5;\nvar boxWidth = $(window).width() / num; //每个box宽度\n```\n\n### 创建数组对象\n- 每个数组元素为对象，该对象属性有width/height/top/left等\n\n``` javascript\nfunction boxStyle(width, height, top, left) {\n\tthis.position = \"absolute\";\n\tthis.width = width;\n\tthis.height = height;\n\tthis.top = top;\n\tthis.left = left;\n}\n```\n\n### 创建数组记录元素宽高\n这里简述一下瀑布流原理：第一行box从左往右排列，第二行开始box的添加位置为各列中高度最小的一列，添加后该列高度则加上该box高度，以此类推\n- 设置每个元素宽度，高度自定义auto\n- 创建数组boxStyleArr来保存每个元素宽高\n- 使用数组boxArr保存每一竖列的高度，即每一竖列最后一个box的底部位置\n- 使用瀑布流原理计算每个box的位置（left和top）,并保存到数组boxStyleArr\n\n``` javascript\nbox.each(function(index, value) {\n\t//设置每个元素宽度，高度自定义auto\n\t$(value).css({\n\t\t\"width\": boxWidth,\n\t\t\"height\": \"auto\"\n\t});\n\t//数组boxStyleArr保存每个元素宽高\n\tboxStyleArr[index] = new boxStyle();\n\tboxStyleArr[index].width = boxWidth;\n\tboxStyleArr[index].height = box.eq(index).height();\n\t//首行box从左到右依次排列\n\tif (index < num) {\n\t\tboxArr[index] = boxStyleArr[index].height;\n\t\tboxStyleArr[index].left = boxWidth * index;\n\t\tboxStyleArr[index].top = 0;\n\t//瀑布流原理计算每个box的位置（left和top）\n\t} else {\n\t\tvar minboxHeight = Math.min.apply(null, boxArr);\n\t\tvar minboxIndex = $.inArray(minboxHeight, boxArr);\n\t\tboxStyleArr[index].left = boxStyleArr[minboxIndex].left;\n\t\tboxStyleArr[index].top = minboxHeight;\n\t\tboxArr[minboxIndex] += boxStyleArr[index].height;\n\t}\n});\n```\n\n\n## 放置box\n-----\n- 根据数组boxStyleArr，将每个box使用绝对定位放置到相应位置\n- 这里使用了动画效果，使所有box从左上角伸展\n\n``` javascript\nfunction boxLocation() {\n\tvar box = $(\".response\");\n\tvar boxStyleArr = [];\n\tboxArrBuild(boxStyleArr);\n\tbox.each(function(index, value) {\n\t\t//设置每个box最初位置为左上角，宽高为0\n\t\t$(value).css({\n\t\t\t\"position\": \"absolute\",\n\t\t\t\"top\": 0,\n\t\t\t\"left\": 0,\n\t\t\t\"width\": 0,\n\t\t\t\"height\": 0\n\t\t});\n\t\t//动画效果使box们进行伸展\n\t\t$(value).animate({\n\t\t\ttop: boxStyleArr[index].top,\n\t\t\tleft: boxStyleArr[index].left,\n\t\t\theight: boxStyleArr[index].height,\n\t\t\twidth: boxStyleArr[index].width\n\t\t}, 500);\n\t});\n}\n```\n\n## 绑定屏幕宽度改变事件\n-----\n- 当屏幕大小改变时，触发重新计算box位置\n  - 为了避免浏览器频繁改变宽度，这里增加了个小判断\n  - 当屏幕改变后200毫秒内不再改变，才触发重新计算\n\n``` javascript\n$(window).on(\"load\", function() {\n\tboxLocation();\n\twindow.onresize = function() {\n\t\twindowWidth = $(window).width();\n\t\tif (interval == null) {\n\t\t\tinterval = setInterval(\"test()\", 200);\n\t\t}\n\t}\n});\n```\n\n## 待完善的地方\n-----\n### 考虑图片加载\n- 图片加载过程可能影响对box高度判断\n- 可通过img.load来确保图片加载完成或者失败之后才进行计算\n### 代码优化&封装\n- 尽情发挥你的创造力吧\n\n## 结束语\n-----\n这个效果是我从别人的博客看到的，然后自己用jQuery实现，这也不失为创造的乐趣呢。","slug":"responsive-waterfall","published":1,"updated":"2016-08-20T10:54:21.113Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cix45huhw004gxotu2rjs1kd5","content":"<p>之前用jQuery写过一个响应式的瀑布流。本文介绍实现方法。<br><a id=\"more\"></a></p>\n<p>代码放在github上，有兴趣的小伙伴可以下载看<br><a href=\"https://github.com/godbasin/godbasin.github.io/tree/blog-codes/responsive-waterfall\" target=\"_blank\" rel=\"external\">responsive-waterfall</a></p>\n<p>最终效果图如下，改变浏览器大小效果更棒哦<a href=\"http://o922dcmwp.bkt.clouddn.com/index.html\" target=\"_blank\" rel=\"external\">点击查看页面</a><br><img src=\"http://o905ne85q.bkt.clouddn.com/responsive-waterfall.png\" alt=\"image\"></p>\n<p>以下我们将每个瀑布流盒子简称为box</p>\n<h2 id=\"使用数组记录每个box宽和高\"><a href=\"#使用数组记录每个box宽和高\" class=\"headerlink\" title=\"使用数组记录每个box宽和高\"></a>使用数组记录每个box宽和高</h2><hr>\n<h3 id=\"设置不同屏幕宽度下每一行box的数量\"><a href=\"#设置不同屏幕宽度下每一行box的数量\" class=\"headerlink\" title=\"设置不同屏幕宽度下每一行box的数量\"></a>设置不同屏幕宽度下每一行box的数量</h3><ul>\n<li>使用$(window).width()获取屏幕宽度</li>\n<li>根据不同屏幕宽度设置每一行box的数量</li>\n<li>得到每个box的宽度</li>\n<li>这里使用最傻的方法计算，有待优化</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> num = <span class=\"number\">4</span>; <span class=\"comment\">//每行box数量</span></div><div class=\"line\"><span class=\"keyword\">if</span> ($(<span class=\"built_in\">window</span>).width() &lt;= <span class=\"number\">500</span>) num = <span class=\"number\">1</span>;</div><div class=\"line\"><span class=\"keyword\">if</span> ($(<span class=\"built_in\">window</span>).width() &gt; <span class=\"number\">500</span>) num = <span class=\"number\">2</span>;</div><div class=\"line\"><span class=\"keyword\">if</span> ($(<span class=\"built_in\">window</span>).width() &gt; <span class=\"number\">800</span>) num = <span class=\"number\">3</span>;</div><div class=\"line\"><span class=\"keyword\">if</span> ($(<span class=\"built_in\">window</span>).width() &gt; <span class=\"number\">1200</span>) num = <span class=\"number\">5</span>;</div><div class=\"line\"><span class=\"keyword\">var</span> boxWidth = $(<span class=\"built_in\">window</span>).width() / num; <span class=\"comment\">//每个box宽度</span></div></pre></td></tr></table></figure>\n<h3 id=\"创建数组对象\"><a href=\"#创建数组对象\" class=\"headerlink\" title=\"创建数组对象\"></a>创建数组对象</h3><ul>\n<li>每个数组元素为对象，该对象属性有width/height/top/left等</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">boxStyle</span>(<span class=\"params\">width, height, top, left</span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">this</span>.position = <span class=\"string\">\"absolute\"</span>;</div><div class=\"line\">  <span class=\"keyword\">this</span>.width = width;</div><div class=\"line\">  <span class=\"keyword\">this</span>.height = height;</div><div class=\"line\">  <span class=\"keyword\">this</span>.top = top;</div><div class=\"line\">  <span class=\"keyword\">this</span>.left = left;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"创建数组记录元素宽高\"><a href=\"#创建数组记录元素宽高\" class=\"headerlink\" title=\"创建数组记录元素宽高\"></a>创建数组记录元素宽高</h3><p>这里简述一下瀑布流原理：第一行box从左往右排列，第二行开始box的添加位置为各列中高度最小的一列，添加后该列高度则加上该box高度，以此类推</p>\n<ul>\n<li>设置每个元素宽度，高度自定义auto</li>\n<li>创建数组boxStyleArr来保存每个元素宽高</li>\n<li>使用数组boxArr保存每一竖列的高度，即每一竖列最后一个box的底部位置</li>\n<li>使用瀑布流原理计算每个box的位置（left和top）,并保存到数组boxStyleArr</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div></pre></td><td class=\"code\"><pre><div class=\"line\">box.each(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">index, value</span>) </span>&#123;</div><div class=\"line\">  <span class=\"comment\">//设置每个元素宽度，高度自定义auto</span></div><div class=\"line\">  $(value).css(&#123;</div><div class=\"line\">    <span class=\"string\">\"width\"</span>: boxWidth,</div><div class=\"line\">    <span class=\"string\">\"height\"</span>: <span class=\"string\">\"auto\"</span></div><div class=\"line\">  &#125;);</div><div class=\"line\">  <span class=\"comment\">//数组boxStyleArr保存每个元素宽高</span></div><div class=\"line\">  boxStyleArr[index] = <span class=\"keyword\">new</span> boxStyle();</div><div class=\"line\">  boxStyleArr[index].width = boxWidth;</div><div class=\"line\">  boxStyleArr[index].height = box.eq(index).height();</div><div class=\"line\">  <span class=\"comment\">//首行box从左到右依次排列</span></div><div class=\"line\">  <span class=\"keyword\">if</span> (index &lt; num) &#123;</div><div class=\"line\">    boxArr[index] = boxStyleArr[index].height;</div><div class=\"line\">    boxStyleArr[index].left = boxWidth * index;</div><div class=\"line\">    boxStyleArr[index].top = <span class=\"number\">0</span>;</div><div class=\"line\">  <span class=\"comment\">//瀑布流原理计算每个box的位置（left和top）</span></div><div class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> minboxHeight = <span class=\"built_in\">Math</span>.min.apply(<span class=\"literal\">null</span>, boxArr);</div><div class=\"line\">    <span class=\"keyword\">var</span> minboxIndex = $.inArray(minboxHeight, boxArr);</div><div class=\"line\">    boxStyleArr[index].left = boxStyleArr[minboxIndex].left;</div><div class=\"line\">    boxStyleArr[index].top = minboxHeight;</div><div class=\"line\">    boxArr[minboxIndex] += boxStyleArr[index].height;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<h2 id=\"放置box\"><a href=\"#放置box\" class=\"headerlink\" title=\"放置box\"></a>放置box</h2><hr>\n<ul>\n<li>根据数组boxStyleArr，将每个box使用绝对定位放置到相应位置</li>\n<li>这里使用了动画效果，使所有box从左上角伸展</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">boxLocation</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">var</span> box = $(<span class=\"string\">\".response\"</span>);</div><div class=\"line\">  <span class=\"keyword\">var</span> boxStyleArr = [];</div><div class=\"line\">  boxArrBuild(boxStyleArr);</div><div class=\"line\">  box.each(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">index, value</span>) </span>&#123;</div><div class=\"line\">    <span class=\"comment\">//设置每个box最初位置为左上角，宽高为0</span></div><div class=\"line\">    $(value).css(&#123;</div><div class=\"line\">      <span class=\"string\">\"position\"</span>: <span class=\"string\">\"absolute\"</span>,</div><div class=\"line\">      <span class=\"string\">\"top\"</span>: <span class=\"number\">0</span>,</div><div class=\"line\">      <span class=\"string\">\"left\"</span>: <span class=\"number\">0</span>,</div><div class=\"line\">      <span class=\"string\">\"width\"</span>: <span class=\"number\">0</span>,</div><div class=\"line\">      <span class=\"string\">\"height\"</span>: <span class=\"number\">0</span></div><div class=\"line\">    &#125;);</div><div class=\"line\">    <span class=\"comment\">//动画效果使box们进行伸展</span></div><div class=\"line\">    $(value).animate(&#123;</div><div class=\"line\">      <span class=\"attr\">top</span>: boxStyleArr[index].top,</div><div class=\"line\">      <span class=\"attr\">left</span>: boxStyleArr[index].left,</div><div class=\"line\">      <span class=\"attr\">height</span>: boxStyleArr[index].height,</div><div class=\"line\">      <span class=\"attr\">width</span>: boxStyleArr[index].width</div><div class=\"line\">    &#125;, <span class=\"number\">500</span>);</div><div class=\"line\">  &#125;);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"绑定屏幕宽度改变事件\"><a href=\"#绑定屏幕宽度改变事件\" class=\"headerlink\" title=\"绑定屏幕宽度改变事件\"></a>绑定屏幕宽度改变事件</h2><hr>\n<ul>\n<li>当屏幕大小改变时，触发重新计算box位置<ul>\n<li>为了避免浏览器频繁改变宽度，这里增加了个小判断</li>\n<li>当屏幕改变后200毫秒内不再改变，才触发重新计算</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">$(<span class=\"built_in\">window</span>).on(<span class=\"string\">\"load\"</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">  boxLocation();</div><div class=\"line\">  <span class=\"built_in\">window</span>.onresize = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    windowWidth = $(<span class=\"built_in\">window</span>).width();</div><div class=\"line\">    <span class=\"keyword\">if</span> (interval == <span class=\"literal\">null</span>) &#123;</div><div class=\"line\">      interval = setInterval(<span class=\"string\">\"test()\"</span>, <span class=\"number\">200</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<h2 id=\"待完善的地方\"><a href=\"#待完善的地方\" class=\"headerlink\" title=\"待完善的地方\"></a>待完善的地方</h2><hr>\n<h3 id=\"考虑图片加载\"><a href=\"#考虑图片加载\" class=\"headerlink\" title=\"考虑图片加载\"></a>考虑图片加载</h3><ul>\n<li>图片加载过程可能影响对box高度判断</li>\n<li>可通过img.load来确保图片加载完成或者失败之后才进行计算<h3 id=\"代码优化-amp-封装\"><a href=\"#代码优化-amp-封装\" class=\"headerlink\" title=\"代码优化&amp;封装\"></a>代码优化&amp;封装</h3></li>\n<li>尽情发挥你的创造力吧</li>\n</ul>\n<h2 id=\"结束语\"><a href=\"#结束语\" class=\"headerlink\" title=\"结束语\"></a>结束语</h2><hr>\n<p>这个效果是我从别人的博客看到的，然后自己用jQuery实现，这也不失为创造的乐趣呢。</p>\n","excerpt":"<p>之前用jQuery写过一个响应式的瀑布流。本文介绍实现方法。<br>","more":"</p>\n<p>代码放在github上，有兴趣的小伙伴可以下载看<br><a href=\"https://github.com/godbasin/godbasin.github.io/tree/blog-codes/responsive-waterfall\">responsive-waterfall</a></p>\n<p>最终效果图如下，改变浏览器大小效果更棒哦<a href=\"http://o922dcmwp.bkt.clouddn.com/index.html\">点击查看页面</a><br><img src=\"http://o905ne85q.bkt.clouddn.com/responsive-waterfall.png\" alt=\"image\"></p>\n<p>以下我们将每个瀑布流盒子简称为box</p>\n<h2 id=\"使用数组记录每个box宽和高\"><a href=\"#使用数组记录每个box宽和高\" class=\"headerlink\" title=\"使用数组记录每个box宽和高\"></a>使用数组记录每个box宽和高</h2><hr>\n<h3 id=\"设置不同屏幕宽度下每一行box的数量\"><a href=\"#设置不同屏幕宽度下每一行box的数量\" class=\"headerlink\" title=\"设置不同屏幕宽度下每一行box的数量\"></a>设置不同屏幕宽度下每一行box的数量</h3><ul>\n<li>使用$(window).width()获取屏幕宽度</li>\n<li>根据不同屏幕宽度设置每一行box的数量</li>\n<li>得到每个box的宽度</li>\n<li>这里使用最傻的方法计算，有待优化</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> num = <span class=\"number\">4</span>; <span class=\"comment\">//每行box数量</span></div><div class=\"line\"><span class=\"keyword\">if</span> ($(<span class=\"built_in\">window</span>).width() &lt;= <span class=\"number\">500</span>) num = <span class=\"number\">1</span>;</div><div class=\"line\"><span class=\"keyword\">if</span> ($(<span class=\"built_in\">window</span>).width() &gt; <span class=\"number\">500</span>) num = <span class=\"number\">2</span>;</div><div class=\"line\"><span class=\"keyword\">if</span> ($(<span class=\"built_in\">window</span>).width() &gt; <span class=\"number\">800</span>) num = <span class=\"number\">3</span>;</div><div class=\"line\"><span class=\"keyword\">if</span> ($(<span class=\"built_in\">window</span>).width() &gt; <span class=\"number\">1200</span>) num = <span class=\"number\">5</span>;</div><div class=\"line\"><span class=\"keyword\">var</span> boxWidth = $(<span class=\"built_in\">window</span>).width() / num; <span class=\"comment\">//每个box宽度</span></div></pre></td></tr></table></figure>\n<h3 id=\"创建数组对象\"><a href=\"#创建数组对象\" class=\"headerlink\" title=\"创建数组对象\"></a>创建数组对象</h3><ul>\n<li>每个数组元素为对象，该对象属性有width/height/top/left等</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">boxStyle</span>(<span class=\"params\">width, height, top, left</span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">this</span>.position = <span class=\"string\">\"absolute\"</span>;</div><div class=\"line\">  <span class=\"keyword\">this</span>.width = width;</div><div class=\"line\">  <span class=\"keyword\">this</span>.height = height;</div><div class=\"line\">  <span class=\"keyword\">this</span>.top = top;</div><div class=\"line\">  <span class=\"keyword\">this</span>.left = left;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"创建数组记录元素宽高\"><a href=\"#创建数组记录元素宽高\" class=\"headerlink\" title=\"创建数组记录元素宽高\"></a>创建数组记录元素宽高</h3><p>这里简述一下瀑布流原理：第一行box从左往右排列，第二行开始box的添加位置为各列中高度最小的一列，添加后该列高度则加上该box高度，以此类推</p>\n<ul>\n<li>设置每个元素宽度，高度自定义auto</li>\n<li>创建数组boxStyleArr来保存每个元素宽高</li>\n<li>使用数组boxArr保存每一竖列的高度，即每一竖列最后一个box的底部位置</li>\n<li>使用瀑布流原理计算每个box的位置（left和top）,并保存到数组boxStyleArr</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div></pre></td><td class=\"code\"><pre><div class=\"line\">box.each(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">index, value</span>) </span>&#123;</div><div class=\"line\">  <span class=\"comment\">//设置每个元素宽度，高度自定义auto</span></div><div class=\"line\">  $(value).css(&#123;</div><div class=\"line\">    <span class=\"string\">\"width\"</span>: boxWidth,</div><div class=\"line\">    <span class=\"string\">\"height\"</span>: <span class=\"string\">\"auto\"</span></div><div class=\"line\">  &#125;);</div><div class=\"line\">  <span class=\"comment\">//数组boxStyleArr保存每个元素宽高</span></div><div class=\"line\">  boxStyleArr[index] = <span class=\"keyword\">new</span> boxStyle();</div><div class=\"line\">  boxStyleArr[index].width = boxWidth;</div><div class=\"line\">  boxStyleArr[index].height = box.eq(index).height();</div><div class=\"line\">  <span class=\"comment\">//首行box从左到右依次排列</span></div><div class=\"line\">  <span class=\"keyword\">if</span> (index &lt; num) &#123;</div><div class=\"line\">    boxArr[index] = boxStyleArr[index].height;</div><div class=\"line\">    boxStyleArr[index].left = boxWidth * index;</div><div class=\"line\">    boxStyleArr[index].top = <span class=\"number\">0</span>;</div><div class=\"line\">  <span class=\"comment\">//瀑布流原理计算每个box的位置（left和top）</span></div><div class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> minboxHeight = <span class=\"built_in\">Math</span>.min.apply(<span class=\"literal\">null</span>, boxArr);</div><div class=\"line\">    <span class=\"keyword\">var</span> minboxIndex = $.inArray(minboxHeight, boxArr);</div><div class=\"line\">    boxStyleArr[index].left = boxStyleArr[minboxIndex].left;</div><div class=\"line\">    boxStyleArr[index].top = minboxHeight;</div><div class=\"line\">    boxArr[minboxIndex] += boxStyleArr[index].height;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<h2 id=\"放置box\"><a href=\"#放置box\" class=\"headerlink\" title=\"放置box\"></a>放置box</h2><hr>\n<ul>\n<li>根据数组boxStyleArr，将每个box使用绝对定位放置到相应位置</li>\n<li>这里使用了动画效果，使所有box从左上角伸展</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">boxLocation</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">var</span> box = $(<span class=\"string\">\".response\"</span>);</div><div class=\"line\">  <span class=\"keyword\">var</span> boxStyleArr = [];</div><div class=\"line\">  boxArrBuild(boxStyleArr);</div><div class=\"line\">  box.each(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">index, value</span>) </span>&#123;</div><div class=\"line\">    <span class=\"comment\">//设置每个box最初位置为左上角，宽高为0</span></div><div class=\"line\">    $(value).css(&#123;</div><div class=\"line\">      <span class=\"string\">\"position\"</span>: <span class=\"string\">\"absolute\"</span>,</div><div class=\"line\">      <span class=\"string\">\"top\"</span>: <span class=\"number\">0</span>,</div><div class=\"line\">      <span class=\"string\">\"left\"</span>: <span class=\"number\">0</span>,</div><div class=\"line\">      <span class=\"string\">\"width\"</span>: <span class=\"number\">0</span>,</div><div class=\"line\">      <span class=\"string\">\"height\"</span>: <span class=\"number\">0</span></div><div class=\"line\">    &#125;);</div><div class=\"line\">    <span class=\"comment\">//动画效果使box们进行伸展</span></div><div class=\"line\">    $(value).animate(&#123;</div><div class=\"line\">      <span class=\"attr\">top</span>: boxStyleArr[index].top,</div><div class=\"line\">      <span class=\"attr\">left</span>: boxStyleArr[index].left,</div><div class=\"line\">      <span class=\"attr\">height</span>: boxStyleArr[index].height,</div><div class=\"line\">      <span class=\"attr\">width</span>: boxStyleArr[index].width</div><div class=\"line\">    &#125;, <span class=\"number\">500</span>);</div><div class=\"line\">  &#125;);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"绑定屏幕宽度改变事件\"><a href=\"#绑定屏幕宽度改变事件\" class=\"headerlink\" title=\"绑定屏幕宽度改变事件\"></a>绑定屏幕宽度改变事件</h2><hr>\n<ul>\n<li>当屏幕大小改变时，触发重新计算box位置<ul>\n<li>为了避免浏览器频繁改变宽度，这里增加了个小判断</li>\n<li>当屏幕改变后200毫秒内不再改变，才触发重新计算</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">$(<span class=\"built_in\">window</span>).on(<span class=\"string\">\"load\"</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">  boxLocation();</div><div class=\"line\">  <span class=\"built_in\">window</span>.onresize = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    windowWidth = $(<span class=\"built_in\">window</span>).width();</div><div class=\"line\">    <span class=\"keyword\">if</span> (interval == <span class=\"literal\">null</span>) &#123;</div><div class=\"line\">      interval = setInterval(<span class=\"string\">\"test()\"</span>, <span class=\"number\">200</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<h2 id=\"待完善的地方\"><a href=\"#待完善的地方\" class=\"headerlink\" title=\"待完善的地方\"></a>待完善的地方</h2><hr>\n<h3 id=\"考虑图片加载\"><a href=\"#考虑图片加载\" class=\"headerlink\" title=\"考虑图片加载\"></a>考虑图片加载</h3><ul>\n<li>图片加载过程可能影响对box高度判断</li>\n<li>可通过img.load来确保图片加载完成或者失败之后才进行计算<h3 id=\"代码优化-amp-封装\"><a href=\"#代码优化-amp-封装\" class=\"headerlink\" title=\"代码优化&amp;封装\"></a>代码优化&amp;封装</h3></li>\n<li>尽情发挥你的创造力吧</li>\n</ul>\n<h2 id=\"结束语\"><a href=\"#结束语\" class=\"headerlink\" title=\"结束语\"></a>结束语</h2><hr>\n<p>这个效果是我从别人的博客看到的，然后自己用jQuery实现，这也不失为创造的乐趣呢。</p>"},{"title":"React-Redux使用笔记2--完善打包生产代码流程","date":"2016-12-25T04:23:23.000Z","_content":"最近又重新拾起了React框架，并配合开源模板gentelella以及Redux建立了个简单的项目。《React-Redux使用笔记》系列用于记录过程中的一些使用和解决方法。\n本文记录完善打包生产代码流程的过程。\n<!--more-->\n\n## 分离webpack和webpack-dev配置\n---\n在开发过程中，我们需要使用到webpack-dev-server。\n而在打包生产代码的过程中，我们仅需要使用webpack进行编译打包就够了。\n\n### 安装babel-polyfill\nBabel默认只转换新的JavaScript句法（syntax），而不转换新的API，比如Iterator、Generator、Set、Maps、Proxy、Reflect、Symbol、Promise等全局对象，以及一些定义在全局对象上的方法（比如Object.assign）都不会转码。\n举例来说，ES6在Array对象上新增了Array.from方法。Babel就不会转码这个方法。如果想让这个方法运行，必须使用babel-polyfill，为当前环境提供一个垫片。\n\n使用命令安装：\n``` npm \nnpm install babel-polyfill --save-dev\n```\n\n- 参考[《Babel 入门教程》](http://www.ruanyifeng.com/blog/2016/01/babel.html)\n\n### webpack.config.js\n``` js\n// webpack.config.js\nvar webpack = require('webpack');\nvar path = require('path'); //引入node的path库\nvar HtmlwebpackPlugin = require('html-webpack-plugin');\n\nvar config = {\n    entry: ['babel-polyfill',\n        path.resolve(__dirname, 'app/index.js')\n    ], //入口文件\n    output: {\n        path: path.resolve(__dirname, 'dist'), // 指定编译后的代码位置为 dist/bundle.js\n        filename: 'bundle.js'\n    },\n    module: {\n        loaders: [\n            // 为webpack指定loaders\n            {\n                test: /\\.less$/,\n                loaders: ['style', 'css', 'less'],\n                include: path.resolve(__dirname, 'app')\n            },\n            {\n                test: /\\.jsx?$/,\n                loader: 'babel-loader',\n                exclude: 'node_modules'\n            },\n            { test: /\\.css$/, loader: \"style-loader!css-loader\" }\n        ]\n    },\n    plugins: [\n        new HtmlwebpackPlugin({\n            title: 'React Biolerplate by Linghucong',\n            template: path.resolve(__dirname, 'templates/index.ejs'),\n            inject: 'body'\n        })\n    ],\n    devtool: 'source-map'\n}\n\nmodule.exports = config;\n```\n\n### webpackdev.config.js\n``` js\n// webpackdev.config.js\nvar webpack = require('webpack');\nvar path = require('path'); //引入node的path库\nvar HtmlwebpackPlugin = require('html-webpack-plugin');\nvar config = require(\"./webpack.config.js\");\nconfig.entry.unshift('webpack/hot/dev-server',\n    'webpack-dev-server/client?http://localhost:3333');\nmodule.exports = config;\n```\n\n### 修改package.json的命令\n``` json\n// package.json\n\"scripts\": {\n\t\"dev\": \"webpack-dev-server --config webpackdev.config.js --port 3333 --host 0.0.0.0 --devtool eval --progress --colors --hot --content-base dist\",\n\t\"build\": \"webpack --config webpack.config.js\"\n}\n```\n\n## 打包代码\n---\n### 使用shell脚本打包代码\n本项目中使用shell脚本打包代码：\n``` sh\n// publish.sh\n# clean dist\nrm -rf dist\n\n# webpack build\nnpm run build\n\n# copy static\ncp -r app/static dist\n```\n### 使用shelljs打包代码\n像windows下面，默认没有运行shell脚本的命令，此时我们可以借助shelljs来完成。\n``` js\n// publish.js\n// https://github.com/shelljs/shelljs\nrequire('shelljs/global');\nvar webpack = require('webpack');\nvar webpackConfig = require('./webpack.config.js');\n\n// clean dist\nrm('-rf', 'dist');\n\n// webpack build\nwebpack(webpackConfig, function (err, stats) {\n  if (err) throw err\n  process.stdout.write(stats.toString({\n    colors: true,\n    modules: false,\n    children: false,\n    chunks: false,\n    chunkModules: false\n  }) + '\\n')\n});\n\n// copy static\ncp('-R', 'app/static/*', 'dist');\n```\n\n## 结束语\n-----\n至此，我们完成了打包代码的过程。其实我们也可以直接使用webpack来完成后续的打包流程，不过本骚年还没仔细去研究，这里就先使用shell脚本打包啦，后面如果有改进再更新哈。\n[此处查看项目代码](https://github.com/godbasin/godbasin.github.io/tree/blog-codes/react-redux-notes/2-complete-publish)\n[此处查看页面效果](http://ohpt01s4n.bkt.clouddn.com/2-complete-publish/index.html)","source":"_posts/react-redux-notes-2-complete-publish.md","raw":"---\ntitle: React-Redux使用笔记2--完善打包生产代码流程\ndate: 2016-12-25 12:23:23\ncategories: react沙拉\ntags: 笔记\n---\n最近又重新拾起了React框架，并配合开源模板gentelella以及Redux建立了个简单的项目。《React-Redux使用笔记》系列用于记录过程中的一些使用和解决方法。\n本文记录完善打包生产代码流程的过程。\n<!--more-->\n\n## 分离webpack和webpack-dev配置\n---\n在开发过程中，我们需要使用到webpack-dev-server。\n而在打包生产代码的过程中，我们仅需要使用webpack进行编译打包就够了。\n\n### 安装babel-polyfill\nBabel默认只转换新的JavaScript句法（syntax），而不转换新的API，比如Iterator、Generator、Set、Maps、Proxy、Reflect、Symbol、Promise等全局对象，以及一些定义在全局对象上的方法（比如Object.assign）都不会转码。\n举例来说，ES6在Array对象上新增了Array.from方法。Babel就不会转码这个方法。如果想让这个方法运行，必须使用babel-polyfill，为当前环境提供一个垫片。\n\n使用命令安装：\n``` npm \nnpm install babel-polyfill --save-dev\n```\n\n- 参考[《Babel 入门教程》](http://www.ruanyifeng.com/blog/2016/01/babel.html)\n\n### webpack.config.js\n``` js\n// webpack.config.js\nvar webpack = require('webpack');\nvar path = require('path'); //引入node的path库\nvar HtmlwebpackPlugin = require('html-webpack-plugin');\n\nvar config = {\n    entry: ['babel-polyfill',\n        path.resolve(__dirname, 'app/index.js')\n    ], //入口文件\n    output: {\n        path: path.resolve(__dirname, 'dist'), // 指定编译后的代码位置为 dist/bundle.js\n        filename: 'bundle.js'\n    },\n    module: {\n        loaders: [\n            // 为webpack指定loaders\n            {\n                test: /\\.less$/,\n                loaders: ['style', 'css', 'less'],\n                include: path.resolve(__dirname, 'app')\n            },\n            {\n                test: /\\.jsx?$/,\n                loader: 'babel-loader',\n                exclude: 'node_modules'\n            },\n            { test: /\\.css$/, loader: \"style-loader!css-loader\" }\n        ]\n    },\n    plugins: [\n        new HtmlwebpackPlugin({\n            title: 'React Biolerplate by Linghucong',\n            template: path.resolve(__dirname, 'templates/index.ejs'),\n            inject: 'body'\n        })\n    ],\n    devtool: 'source-map'\n}\n\nmodule.exports = config;\n```\n\n### webpackdev.config.js\n``` js\n// webpackdev.config.js\nvar webpack = require('webpack');\nvar path = require('path'); //引入node的path库\nvar HtmlwebpackPlugin = require('html-webpack-plugin');\nvar config = require(\"./webpack.config.js\");\nconfig.entry.unshift('webpack/hot/dev-server',\n    'webpack-dev-server/client?http://localhost:3333');\nmodule.exports = config;\n```\n\n### 修改package.json的命令\n``` json\n// package.json\n\"scripts\": {\n\t\"dev\": \"webpack-dev-server --config webpackdev.config.js --port 3333 --host 0.0.0.0 --devtool eval --progress --colors --hot --content-base dist\",\n\t\"build\": \"webpack --config webpack.config.js\"\n}\n```\n\n## 打包代码\n---\n### 使用shell脚本打包代码\n本项目中使用shell脚本打包代码：\n``` sh\n// publish.sh\n# clean dist\nrm -rf dist\n\n# webpack build\nnpm run build\n\n# copy static\ncp -r app/static dist\n```\n### 使用shelljs打包代码\n像windows下面，默认没有运行shell脚本的命令，此时我们可以借助shelljs来完成。\n``` js\n// publish.js\n// https://github.com/shelljs/shelljs\nrequire('shelljs/global');\nvar webpack = require('webpack');\nvar webpackConfig = require('./webpack.config.js');\n\n// clean dist\nrm('-rf', 'dist');\n\n// webpack build\nwebpack(webpackConfig, function (err, stats) {\n  if (err) throw err\n  process.stdout.write(stats.toString({\n    colors: true,\n    modules: false,\n    children: false,\n    chunks: false,\n    chunkModules: false\n  }) + '\\n')\n});\n\n// copy static\ncp('-R', 'app/static/*', 'dist');\n```\n\n## 结束语\n-----\n至此，我们完成了打包代码的过程。其实我们也可以直接使用webpack来完成后续的打包流程，不过本骚年还没仔细去研究，这里就先使用shell脚本打包啦，后面如果有改进再更新哈。\n[此处查看项目代码](https://github.com/godbasin/godbasin.github.io/tree/blog-codes/react-redux-notes/2-complete-publish)\n[此处查看页面效果](http://ohpt01s4n.bkt.clouddn.com/2-complete-publish/index.html)","slug":"react-redux-notes-2-complete-publish","published":1,"updated":"2016-12-25T04:23:36.992Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cix45huhy004jxotul0pqgs1d","content":"<p>最近又重新拾起了React框架，并配合开源模板gentelella以及Redux建立了个简单的项目。《React-Redux使用笔记》系列用于记录过程中的一些使用和解决方法。<br>本文记录完善打包生产代码流程的过程。<br><a id=\"more\"></a></p>\n<h2 id=\"分离webpack和webpack-dev配置\"><a href=\"#分离webpack和webpack-dev配置\" class=\"headerlink\" title=\"分离webpack和webpack-dev配置\"></a>分离webpack和webpack-dev配置</h2><hr>\n<p>在开发过程中，我们需要使用到webpack-dev-server。<br>而在打包生产代码的过程中，我们仅需要使用webpack进行编译打包就够了。</p>\n<h3 id=\"安装babel-polyfill\"><a href=\"#安装babel-polyfill\" class=\"headerlink\" title=\"安装babel-polyfill\"></a>安装babel-polyfill</h3><p>Babel默认只转换新的JavaScript句法（syntax），而不转换新的API，比如Iterator、Generator、Set、Maps、Proxy、Reflect、Symbol、Promise等全局对象，以及一些定义在全局对象上的方法（比如Object.assign）都不会转码。<br>举例来说，ES6在Array对象上新增了Array.from方法。Babel就不会转码这个方法。如果想让这个方法运行，必须使用babel-polyfill，为当前环境提供一个垫片。</p>\n<p>使用命令安装：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">npm install babel-polyfill --save-dev</div></pre></td></tr></table></figure></p>\n<ul>\n<li>参考<a href=\"http://www.ruanyifeng.com/blog/2016/01/babel.html\" target=\"_blank\" rel=\"external\">《Babel 入门教程》</a></li>\n</ul>\n<h3 id=\"webpack-config-js\"><a href=\"#webpack-config-js\" class=\"headerlink\" title=\"webpack.config.js\"></a>webpack.config.js</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// webpack.config.js</span></div><div class=\"line\"><span class=\"keyword\">var</span> webpack = <span class=\"built_in\">require</span>(<span class=\"string\">'webpack'</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> path = <span class=\"built_in\">require</span>(<span class=\"string\">'path'</span>); <span class=\"comment\">//引入node的path库</span></div><div class=\"line\"><span class=\"keyword\">var</span> HtmlwebpackPlugin = <span class=\"built_in\">require</span>(<span class=\"string\">'html-webpack-plugin'</span>);</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> config = &#123;</div><div class=\"line\">    <span class=\"attr\">entry</span>: [<span class=\"string\">'babel-polyfill'</span>,</div><div class=\"line\">        path.resolve(__dirname, <span class=\"string\">'app/index.js'</span>)</div><div class=\"line\">    ], <span class=\"comment\">//入口文件</span></div><div class=\"line\">    output: &#123;</div><div class=\"line\">        <span class=\"attr\">path</span>: path.resolve(__dirname, <span class=\"string\">'dist'</span>), <span class=\"comment\">// 指定编译后的代码位置为 dist/bundle.js</span></div><div class=\"line\">        filename: <span class=\"string\">'bundle.js'</span></div><div class=\"line\">    &#125;,</div><div class=\"line\">    <span class=\"attr\">module</span>: &#123;</div><div class=\"line\">        <span class=\"attr\">loaders</span>: [</div><div class=\"line\">            <span class=\"comment\">// 为webpack指定loaders</span></div><div class=\"line\">            &#123;</div><div class=\"line\">                <span class=\"attr\">test</span>: <span class=\"regexp\">/\\.less$/</span>,</div><div class=\"line\">                <span class=\"attr\">loaders</span>: [<span class=\"string\">'style'</span>, <span class=\"string\">'css'</span>, <span class=\"string\">'less'</span>],</div><div class=\"line\">                <span class=\"attr\">include</span>: path.resolve(__dirname, <span class=\"string\">'app'</span>)</div><div class=\"line\">            &#125;,</div><div class=\"line\">            &#123;</div><div class=\"line\">                <span class=\"attr\">test</span>: <span class=\"regexp\">/\\.jsx?$/</span>,</div><div class=\"line\">                <span class=\"attr\">loader</span>: <span class=\"string\">'babel-loader'</span>,</div><div class=\"line\">                <span class=\"attr\">exclude</span>: <span class=\"string\">'node_modules'</span></div><div class=\"line\">            &#125;,</div><div class=\"line\">            &#123; <span class=\"attr\">test</span>: <span class=\"regexp\">/\\.css$/</span>, <span class=\"attr\">loader</span>: <span class=\"string\">\"style-loader!css-loader\"</span> &#125;</div><div class=\"line\">        ]</div><div class=\"line\">    &#125;,</div><div class=\"line\">    <span class=\"attr\">plugins</span>: [</div><div class=\"line\">        <span class=\"keyword\">new</span> HtmlwebpackPlugin(&#123;</div><div class=\"line\">            <span class=\"attr\">title</span>: <span class=\"string\">'React Biolerplate by Linghucong'</span>,</div><div class=\"line\">            <span class=\"attr\">template</span>: path.resolve(__dirname, <span class=\"string\">'templates/index.ejs'</span>),</div><div class=\"line\">            <span class=\"attr\">inject</span>: <span class=\"string\">'body'</span></div><div class=\"line\">        &#125;)</div><div class=\"line\">    ],</div><div class=\"line\">    <span class=\"attr\">devtool</span>: <span class=\"string\">'source-map'</span></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">module</span>.exports = config;</div></pre></td></tr></table></figure>\n<h3 id=\"webpackdev-config-js\"><a href=\"#webpackdev-config-js\" class=\"headerlink\" title=\"webpackdev.config.js\"></a>webpackdev.config.js</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// webpackdev.config.js</span></div><div class=\"line\"><span class=\"keyword\">var</span> webpack = <span class=\"built_in\">require</span>(<span class=\"string\">'webpack'</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> path = <span class=\"built_in\">require</span>(<span class=\"string\">'path'</span>); <span class=\"comment\">//引入node的path库</span></div><div class=\"line\"><span class=\"keyword\">var</span> HtmlwebpackPlugin = <span class=\"built_in\">require</span>(<span class=\"string\">'html-webpack-plugin'</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> config = <span class=\"built_in\">require</span>(<span class=\"string\">\"./webpack.config.js\"</span>);</div><div class=\"line\">config.entry.unshift(<span class=\"string\">'webpack/hot/dev-server'</span>,</div><div class=\"line\">    <span class=\"string\">'webpack-dev-server/client?http://localhost:3333'</span>);</div><div class=\"line\"><span class=\"built_in\">module</span>.exports = config;</div></pre></td></tr></table></figure>\n<h3 id=\"修改package-json的命令\"><a href=\"#修改package-json的命令\" class=\"headerlink\" title=\"修改package.json的命令\"></a>修改package.json的命令</h3><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">// package.json</div><div class=\"line\">\"scripts\": &#123;</div><div class=\"line\">  \"dev\": \"webpack-dev-server --config webpackdev.config.js --port 3333 --host 0.0.0.0 --devtool eval --progress --colors --hot --content-base dist\",</div><div class=\"line\">  \"build\": \"webpack --config webpack.config.js\"</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"打包代码\"><a href=\"#打包代码\" class=\"headerlink\" title=\"打包代码\"></a>打包代码</h2><hr>\n<h3 id=\"使用shell脚本打包代码\"><a href=\"#使用shell脚本打包代码\" class=\"headerlink\" title=\"使用shell脚本打包代码\"></a>使用shell脚本打包代码</h3><p>本项目中使用shell脚本打包代码：<br><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">// publish.sh</div><div class=\"line\"><span class=\"comment\"># clean dist</span></div><div class=\"line\">rm -rf dist</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># webpack build</span></div><div class=\"line\">npm run build</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># copy static</span></div><div class=\"line\">cp -r app/static dist</div></pre></td></tr></table></figure></p>\n<h3 id=\"使用shelljs打包代码\"><a href=\"#使用shelljs打包代码\" class=\"headerlink\" title=\"使用shelljs打包代码\"></a>使用shelljs打包代码</h3><p>像windows下面，默认没有运行shell脚本的命令，此时我们可以借助shelljs来完成。<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// publish.js</span></div><div class=\"line\"><span class=\"comment\">// https://github.com/shelljs/shelljs</span></div><div class=\"line\"><span class=\"built_in\">require</span>(<span class=\"string\">'shelljs/global'</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> webpack = <span class=\"built_in\">require</span>(<span class=\"string\">'webpack'</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> webpackConfig = <span class=\"built_in\">require</span>(<span class=\"string\">'./webpack.config.js'</span>);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// clean dist</span></div><div class=\"line\">rm(<span class=\"string\">'-rf'</span>, <span class=\"string\">'dist'</span>);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// webpack build</span></div><div class=\"line\">webpack(webpackConfig, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">err, stats</span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">if</span> (err) <span class=\"keyword\">throw</span> err</div><div class=\"line\">  process.stdout.write(stats.toString(&#123;</div><div class=\"line\">    <span class=\"attr\">colors</span>: <span class=\"literal\">true</span>,</div><div class=\"line\">    <span class=\"attr\">modules</span>: <span class=\"literal\">false</span>,</div><div class=\"line\">    <span class=\"attr\">children</span>: <span class=\"literal\">false</span>,</div><div class=\"line\">    <span class=\"attr\">chunks</span>: <span class=\"literal\">false</span>,</div><div class=\"line\">    <span class=\"attr\">chunkModules</span>: <span class=\"literal\">false</span></div><div class=\"line\">  &#125;) + <span class=\"string\">'\\n'</span>)</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// copy static</span></div><div class=\"line\">cp(<span class=\"string\">'-R'</span>, <span class=\"string\">'app/static/*'</span>, <span class=\"string\">'dist'</span>);</div></pre></td></tr></table></figure></p>\n<h2 id=\"结束语\"><a href=\"#结束语\" class=\"headerlink\" title=\"结束语\"></a>结束语</h2><hr>\n<p>至此，我们完成了打包代码的过程。其实我们也可以直接使用webpack来完成后续的打包流程，不过本骚年还没仔细去研究，这里就先使用shell脚本打包啦，后面如果有改进再更新哈。<br><a href=\"https://github.com/godbasin/godbasin.github.io/tree/blog-codes/react-redux-notes/2-complete-publish\" target=\"_blank\" rel=\"external\">此处查看项目代码</a><br><a href=\"http://ohpt01s4n.bkt.clouddn.com/2-complete-publish/index.html\" target=\"_blank\" rel=\"external\">此处查看页面效果</a></p>\n","excerpt":"<p>最近又重新拾起了React框架，并配合开源模板gentelella以及Redux建立了个简单的项目。《React-Redux使用笔记》系列用于记录过程中的一些使用和解决方法。<br>本文记录完善打包生产代码流程的过程。<br>","more":"</p>\n<h2 id=\"分离webpack和webpack-dev配置\"><a href=\"#分离webpack和webpack-dev配置\" class=\"headerlink\" title=\"分离webpack和webpack-dev配置\"></a>分离webpack和webpack-dev配置</h2><hr>\n<p>在开发过程中，我们需要使用到webpack-dev-server。<br>而在打包生产代码的过程中，我们仅需要使用webpack进行编译打包就够了。</p>\n<h3 id=\"安装babel-polyfill\"><a href=\"#安装babel-polyfill\" class=\"headerlink\" title=\"安装babel-polyfill\"></a>安装babel-polyfill</h3><p>Babel默认只转换新的JavaScript句法（syntax），而不转换新的API，比如Iterator、Generator、Set、Maps、Proxy、Reflect、Symbol、Promise等全局对象，以及一些定义在全局对象上的方法（比如Object.assign）都不会转码。<br>举例来说，ES6在Array对象上新增了Array.from方法。Babel就不会转码这个方法。如果想让这个方法运行，必须使用babel-polyfill，为当前环境提供一个垫片。</p>\n<p>使用命令安装：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">npm install babel-polyfill --save-dev</div></pre></td></tr></table></figure></p>\n<ul>\n<li>参考<a href=\"http://www.ruanyifeng.com/blog/2016/01/babel.html\">《Babel 入门教程》</a></li>\n</ul>\n<h3 id=\"webpack-config-js\"><a href=\"#webpack-config-js\" class=\"headerlink\" title=\"webpack.config.js\"></a>webpack.config.js</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// webpack.config.js</span></div><div class=\"line\"><span class=\"keyword\">var</span> webpack = <span class=\"built_in\">require</span>(<span class=\"string\">'webpack'</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> path = <span class=\"built_in\">require</span>(<span class=\"string\">'path'</span>); <span class=\"comment\">//引入node的path库</span></div><div class=\"line\"><span class=\"keyword\">var</span> HtmlwebpackPlugin = <span class=\"built_in\">require</span>(<span class=\"string\">'html-webpack-plugin'</span>);</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> config = &#123;</div><div class=\"line\">    <span class=\"attr\">entry</span>: [<span class=\"string\">'babel-polyfill'</span>,</div><div class=\"line\">        path.resolve(__dirname, <span class=\"string\">'app/index.js'</span>)</div><div class=\"line\">    ], <span class=\"comment\">//入口文件</span></div><div class=\"line\">    output: &#123;</div><div class=\"line\">        <span class=\"attr\">path</span>: path.resolve(__dirname, <span class=\"string\">'dist'</span>), <span class=\"comment\">// 指定编译后的代码位置为 dist/bundle.js</span></div><div class=\"line\">        filename: <span class=\"string\">'bundle.js'</span></div><div class=\"line\">    &#125;,</div><div class=\"line\">    <span class=\"attr\">module</span>: &#123;</div><div class=\"line\">        <span class=\"attr\">loaders</span>: [</div><div class=\"line\">            <span class=\"comment\">// 为webpack指定loaders</span></div><div class=\"line\">            &#123;</div><div class=\"line\">                <span class=\"attr\">test</span>: <span class=\"regexp\">/\\.less$/</span>,</div><div class=\"line\">                <span class=\"attr\">loaders</span>: [<span class=\"string\">'style'</span>, <span class=\"string\">'css'</span>, <span class=\"string\">'less'</span>],</div><div class=\"line\">                <span class=\"attr\">include</span>: path.resolve(__dirname, <span class=\"string\">'app'</span>)</div><div class=\"line\">            &#125;,</div><div class=\"line\">            &#123;</div><div class=\"line\">                <span class=\"attr\">test</span>: <span class=\"regexp\">/\\.jsx?$/</span>,</div><div class=\"line\">                <span class=\"attr\">loader</span>: <span class=\"string\">'babel-loader'</span>,</div><div class=\"line\">                <span class=\"attr\">exclude</span>: <span class=\"string\">'node_modules'</span></div><div class=\"line\">            &#125;,</div><div class=\"line\">            &#123; <span class=\"attr\">test</span>: <span class=\"regexp\">/\\.css$/</span>, <span class=\"attr\">loader</span>: <span class=\"string\">\"style-loader!css-loader\"</span> &#125;</div><div class=\"line\">        ]</div><div class=\"line\">    &#125;,</div><div class=\"line\">    <span class=\"attr\">plugins</span>: [</div><div class=\"line\">        <span class=\"keyword\">new</span> HtmlwebpackPlugin(&#123;</div><div class=\"line\">            <span class=\"attr\">title</span>: <span class=\"string\">'React Biolerplate by Linghucong'</span>,</div><div class=\"line\">            <span class=\"attr\">template</span>: path.resolve(__dirname, <span class=\"string\">'templates/index.ejs'</span>),</div><div class=\"line\">            <span class=\"attr\">inject</span>: <span class=\"string\">'body'</span></div><div class=\"line\">        &#125;)</div><div class=\"line\">    ],</div><div class=\"line\">    <span class=\"attr\">devtool</span>: <span class=\"string\">'source-map'</span></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">module</span>.exports = config;</div></pre></td></tr></table></figure>\n<h3 id=\"webpackdev-config-js\"><a href=\"#webpackdev-config-js\" class=\"headerlink\" title=\"webpackdev.config.js\"></a>webpackdev.config.js</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// webpackdev.config.js</span></div><div class=\"line\"><span class=\"keyword\">var</span> webpack = <span class=\"built_in\">require</span>(<span class=\"string\">'webpack'</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> path = <span class=\"built_in\">require</span>(<span class=\"string\">'path'</span>); <span class=\"comment\">//引入node的path库</span></div><div class=\"line\"><span class=\"keyword\">var</span> HtmlwebpackPlugin = <span class=\"built_in\">require</span>(<span class=\"string\">'html-webpack-plugin'</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> config = <span class=\"built_in\">require</span>(<span class=\"string\">\"./webpack.config.js\"</span>);</div><div class=\"line\">config.entry.unshift(<span class=\"string\">'webpack/hot/dev-server'</span>,</div><div class=\"line\">    <span class=\"string\">'webpack-dev-server/client?http://localhost:3333'</span>);</div><div class=\"line\"><span class=\"built_in\">module</span>.exports = config;</div></pre></td></tr></table></figure>\n<h3 id=\"修改package-json的命令\"><a href=\"#修改package-json的命令\" class=\"headerlink\" title=\"修改package.json的命令\"></a>修改package.json的命令</h3><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">// package.json</div><div class=\"line\">\"scripts\": &#123;</div><div class=\"line\">  \"dev\": \"webpack-dev-server --config webpackdev.config.js --port 3333 --host 0.0.0.0 --devtool eval --progress --colors --hot --content-base dist\",</div><div class=\"line\">  \"build\": \"webpack --config webpack.config.js\"</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"打包代码\"><a href=\"#打包代码\" class=\"headerlink\" title=\"打包代码\"></a>打包代码</h2><hr>\n<h3 id=\"使用shell脚本打包代码\"><a href=\"#使用shell脚本打包代码\" class=\"headerlink\" title=\"使用shell脚本打包代码\"></a>使用shell脚本打包代码</h3><p>本项目中使用shell脚本打包代码：<br><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">// publish.sh</div><div class=\"line\"><span class=\"comment\"># clean dist</span></div><div class=\"line\">rm -rf dist</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># webpack build</span></div><div class=\"line\">npm run build</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># copy static</span></div><div class=\"line\">cp -r app/static dist</div></pre></td></tr></table></figure></p>\n<h3 id=\"使用shelljs打包代码\"><a href=\"#使用shelljs打包代码\" class=\"headerlink\" title=\"使用shelljs打包代码\"></a>使用shelljs打包代码</h3><p>像windows下面，默认没有运行shell脚本的命令，此时我们可以借助shelljs来完成。<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// publish.js</span></div><div class=\"line\"><span class=\"comment\">// https://github.com/shelljs/shelljs</span></div><div class=\"line\"><span class=\"built_in\">require</span>(<span class=\"string\">'shelljs/global'</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> webpack = <span class=\"built_in\">require</span>(<span class=\"string\">'webpack'</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> webpackConfig = <span class=\"built_in\">require</span>(<span class=\"string\">'./webpack.config.js'</span>);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// clean dist</span></div><div class=\"line\">rm(<span class=\"string\">'-rf'</span>, <span class=\"string\">'dist'</span>);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// webpack build</span></div><div class=\"line\">webpack(webpackConfig, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">err, stats</span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">if</span> (err) <span class=\"keyword\">throw</span> err</div><div class=\"line\">  process.stdout.write(stats.toString(&#123;</div><div class=\"line\">    <span class=\"attr\">colors</span>: <span class=\"literal\">true</span>,</div><div class=\"line\">    <span class=\"attr\">modules</span>: <span class=\"literal\">false</span>,</div><div class=\"line\">    <span class=\"attr\">children</span>: <span class=\"literal\">false</span>,</div><div class=\"line\">    <span class=\"attr\">chunks</span>: <span class=\"literal\">false</span>,</div><div class=\"line\">    <span class=\"attr\">chunkModules</span>: <span class=\"literal\">false</span></div><div class=\"line\">  &#125;) + <span class=\"string\">'\\n'</span>)</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// copy static</span></div><div class=\"line\">cp(<span class=\"string\">'-R'</span>, <span class=\"string\">'app/static/*'</span>, <span class=\"string\">'dist'</span>);</div></pre></td></tr></table></figure></p>\n<h2 id=\"结束语\"><a href=\"#结束语\" class=\"headerlink\" title=\"结束语\"></a>结束语</h2><hr>\n<p>至此，我们完成了打包代码的过程。其实我们也可以直接使用webpack来完成后续的打包流程，不过本骚年还没仔细去研究，这里就先使用shell脚本打包啦，后面如果有改进再更新哈。<br><a href=\"https://github.com/godbasin/godbasin.github.io/tree/blog-codes/react-redux-notes/2-complete-publish\">此处查看项目代码</a><br><a href=\"http://ohpt01s4n.bkt.clouddn.com/2-complete-publish/index.html\">此处查看页面效果</a></p>"},{"title":"Vue使用笔记2--vue-router与创建登录组件","date":"2016-09-03T16:26:00.000Z","_content":"最近在学习使用Vue作为前端的框架，《Vue使用笔记》系列用于记录过程中的一些使用和解决方法。\n本文记录路由插件vue-router，以及搭建登录页面的过程。\n<!--more-->\n\n## vue-router\n-----\n在使用vue-router时，我们需要做的就是把路由映射到各个组件，vue-router会把各个组件渲染到正确的地方。\n\n### 安装、起步\n- 安装\n\n``` bash\nnpm install vue-router --save\n```\n\n- 起步\n\n### 基本用法\n- HTML\n\n``` html\n<div id=\"app\">\n  <h1>Hello App!</h1>\n  <p>\n    <!-- 使用指令 v-link 进行导航。 -->\n    <a v-link=\"{ path: '/foo' }\">Go to Foo</a>\n    <a v-link=\"{ path: '/bar' }\">Go to Bar</a>\n  </p>\n  <!-- 路由外链 -->\n  <router-view></router-view>\n</div>\n```\n\n- javascript\n\n``` javascript\n// 定义组件\nvar Foo = Vue.extend({\n    template: '<p>This is foo!</p>'\n})\nvar Bar = Vue.extend({\n    template: '<p>This is bar!</p>'\n})\n// 路由器需要一个根组件。\n// 出于演示的目的，这里使用一个空的组件，直接使用 HTML 作为应用的模板\nvar App = Vue.extend({})\n// 创建一个路由器实例\n// 创建实例时可以传入配置参数进行定制，为保持简单，这里使用默认配置\nvar router = new VueRouter()\n// 定义路由规则\n// 每条路由规则应该映射到一个组件。这里的“组件”可以是一个使用 Vue.extend\n// 创建的组件构造函数，也可以是一个组件选项对象。\n// 稍后我们会讲解嵌套路由\nrouter.map({\n    '/foo': {\n        component: Foo\n    },\n    '/bar': {\n        component: Bar\n    }\n})\n// 现在我们可以启动应用了！\n// 路由器会创建一个 App 实例，并且挂载到选择符 #app 匹配的元素上。\nrouter.start(App, '#app')\n```\n\n以上均来自[官方文档](http://router.vuejs.org/zh-cn/basic.html)，且提供了一个[在线实例应用](http://jsfiddle.net/yyx990803/xyu276sa/)。\n\n这里我们主要介绍将会涉及的一些基本资料，有关路由的嵌套、对象等等更多的请查看[官方文档](http://router.vuejs.org/zh-cn/nested.html)。\n\n## 创建登录组件\n-----\n### 主要页面逻辑\n在这里，本骚年就建一个比较简单的项目。该项目与之前的Angular/React使用笔记项目长得完全一致，我们这里用Vue来实现吧。\n- 我们的主要页面逻辑如下：\n  - 1.登录页面，输入账号和密码即可\n  - 2.模块页面\n\n### index.html主页面\nindex.html主页面添加用于渲染匹配的组件，如下：\n``` html\n<div id=\"app\">\n  <router-view></router-view>\n</div>\n```\n\n### main.js中设置路由\n``` javascript\n// 引入vue以及vue-router\nimport Vue from 'vue'\nimport VueRouter from 'vue-router'\n// 引入组件\nimport Login from './components/Login.vue'\nimport Index from './components/Index.vue'\n// 创建一个路由器实例\n// 创建实例时可以传入配置参数进行定制，为保持简单，这里使用默认配置\nVue.use(VueRouter)\nvar router = new VueRouter()\n// 路由器需要一个根组件。\nvar App = Vue.extend({})\n// 定义路由规则\n// 每条路由规则应该映射到一个组件。这里的“组件”可以是一个使用 Vue.extend\n// 创建的组件构造函数，也可以是一个组件选项对象。\nrouter.redirect({\n  // 重定向任意未匹配路径到 /login\n  '*': '/login'\n})\nrouter.map({\n  '/login': {\n    name: 'login', // 定义路由的名字。方便使用。\n    component: Login // 引用的组件名称，对应上面使用`import`导入的组件\n  },\n  '/index': {\n    name: 'index',\n    component: Index\n  }\n})\n// 现在我们可以启动应用了！\n// 路由器会创建一个 App 实例，并且挂载到选择符 #app 匹配的元素上。\nrouter.start(App, '#app')\n```\n\n### 创建登录页面\n- 首先我们在components文件夹内添加一个Login.vue\n\n``` vue\n<template>\n <div class=\"container\" id=\"login\">\n\t<form id=\"login-form\">\n\t\t<h3 class=\"text-center\">login</h3>\n\t\t<div class=\"form-group\">\n\t\t\t<label>account</label>\n\t\t\t<!--v-model双向绑定账号-->\n\t\t\t<input type=\"text\" class=\"form-control\" placeholder=\"Account\" v-model=\"username\" required />\n\t\t</div>\n\t\t<div class=\"form-group\">\n\t\t\t<label>Password</label>\n\t\t\t<!--v-model双向绑定密码-->\n\t\t\t<input type=\"password\" class=\"form-control\" placeholder=\"Password\" v-model=\"password\" required>\n\t\t</div>\n\t\t<button class=\"btn btn-default\" v-on:click=\"submit\">登录</button>\n\t</form>\n</div>\n</template>\n\n<script>\nexport default {\n  data () {\n    return {\n      username: '',\n      password: ''\n    }\n  },\n  // 在 `methods` 对象中定义方法\n  methods: {\n    submit: function () {\n      console.log('username: ' + this.username) //console中字符串需使用单引号''\n      this.$route.router.go({name: 'index'}) //直接使用路由的名字进行跳转\n    }\n  }\n}\n</script>\n\n<style scoped>\n#login {\n  padding: 200px 20px;\n  width: 730px;\n}\n#login > form {\n  border: solid 1px #999;\n  padding: 20px;\n  border-radius: 5px;\n}\n</style>\n```\n\n- 使用v-model进行双向绑定数据，数据在data中定义，可使用this.xxx直接获取\n\n- 此处引用了Bootstrap的样式，在index.html中添加\n\n``` html\n<link rel=\"stylesheet\" href=\"https://maxcdn.bootstrapcdn.com/bootstrap/latest/css/bootstrap.min.css\">\n```\n\n至此，我们初步创建了一个带路由的登录页面组件。\n\n### 参考\n[《http://guowenfh.github.io/2016/03/28/vue-webpack-06-router/》](webpack入坑之旅（六）配合vue-router实现SPA)\n[vue-router官方文档](http://router.vuejs.org/zh-cn/route.html)\n\n## 结束语\n-----\nVue中使用路由也折腾了一小会，不过vue的debug信息写得很详细哦，对哪里出问题了有个比较清晰的了解呢。\n[此处查看项目代码](https://github.com/godbasin/godbasin.github.io/tree/blog-codes/vue-notes/2-create-login)\n[此处查看页面效果](http://o9zkatzym.bkt.clouddn.com/2-create-login/index.html)\n","source":"_posts/vue-notes-2-create-login.md","raw":"---\ntitle:  Vue使用笔记2--vue-router与创建登录组件\ndate: 2016-09-04 00:26:00\ncategories: vue八宝粥\ntags: 笔记\n---\n最近在学习使用Vue作为前端的框架，《Vue使用笔记》系列用于记录过程中的一些使用和解决方法。\n本文记录路由插件vue-router，以及搭建登录页面的过程。\n<!--more-->\n\n## vue-router\n-----\n在使用vue-router时，我们需要做的就是把路由映射到各个组件，vue-router会把各个组件渲染到正确的地方。\n\n### 安装、起步\n- 安装\n\n``` bash\nnpm install vue-router --save\n```\n\n- 起步\n\n### 基本用法\n- HTML\n\n``` html\n<div id=\"app\">\n  <h1>Hello App!</h1>\n  <p>\n    <!-- 使用指令 v-link 进行导航。 -->\n    <a v-link=\"{ path: '/foo' }\">Go to Foo</a>\n    <a v-link=\"{ path: '/bar' }\">Go to Bar</a>\n  </p>\n  <!-- 路由外链 -->\n  <router-view></router-view>\n</div>\n```\n\n- javascript\n\n``` javascript\n// 定义组件\nvar Foo = Vue.extend({\n    template: '<p>This is foo!</p>'\n})\nvar Bar = Vue.extend({\n    template: '<p>This is bar!</p>'\n})\n// 路由器需要一个根组件。\n// 出于演示的目的，这里使用一个空的组件，直接使用 HTML 作为应用的模板\nvar App = Vue.extend({})\n// 创建一个路由器实例\n// 创建实例时可以传入配置参数进行定制，为保持简单，这里使用默认配置\nvar router = new VueRouter()\n// 定义路由规则\n// 每条路由规则应该映射到一个组件。这里的“组件”可以是一个使用 Vue.extend\n// 创建的组件构造函数，也可以是一个组件选项对象。\n// 稍后我们会讲解嵌套路由\nrouter.map({\n    '/foo': {\n        component: Foo\n    },\n    '/bar': {\n        component: Bar\n    }\n})\n// 现在我们可以启动应用了！\n// 路由器会创建一个 App 实例，并且挂载到选择符 #app 匹配的元素上。\nrouter.start(App, '#app')\n```\n\n以上均来自[官方文档](http://router.vuejs.org/zh-cn/basic.html)，且提供了一个[在线实例应用](http://jsfiddle.net/yyx990803/xyu276sa/)。\n\n这里我们主要介绍将会涉及的一些基本资料，有关路由的嵌套、对象等等更多的请查看[官方文档](http://router.vuejs.org/zh-cn/nested.html)。\n\n## 创建登录组件\n-----\n### 主要页面逻辑\n在这里，本骚年就建一个比较简单的项目。该项目与之前的Angular/React使用笔记项目长得完全一致，我们这里用Vue来实现吧。\n- 我们的主要页面逻辑如下：\n  - 1.登录页面，输入账号和密码即可\n  - 2.模块页面\n\n### index.html主页面\nindex.html主页面添加用于渲染匹配的组件，如下：\n``` html\n<div id=\"app\">\n  <router-view></router-view>\n</div>\n```\n\n### main.js中设置路由\n``` javascript\n// 引入vue以及vue-router\nimport Vue from 'vue'\nimport VueRouter from 'vue-router'\n// 引入组件\nimport Login from './components/Login.vue'\nimport Index from './components/Index.vue'\n// 创建一个路由器实例\n// 创建实例时可以传入配置参数进行定制，为保持简单，这里使用默认配置\nVue.use(VueRouter)\nvar router = new VueRouter()\n// 路由器需要一个根组件。\nvar App = Vue.extend({})\n// 定义路由规则\n// 每条路由规则应该映射到一个组件。这里的“组件”可以是一个使用 Vue.extend\n// 创建的组件构造函数，也可以是一个组件选项对象。\nrouter.redirect({\n  // 重定向任意未匹配路径到 /login\n  '*': '/login'\n})\nrouter.map({\n  '/login': {\n    name: 'login', // 定义路由的名字。方便使用。\n    component: Login // 引用的组件名称，对应上面使用`import`导入的组件\n  },\n  '/index': {\n    name: 'index',\n    component: Index\n  }\n})\n// 现在我们可以启动应用了！\n// 路由器会创建一个 App 实例，并且挂载到选择符 #app 匹配的元素上。\nrouter.start(App, '#app')\n```\n\n### 创建登录页面\n- 首先我们在components文件夹内添加一个Login.vue\n\n``` vue\n<template>\n <div class=\"container\" id=\"login\">\n\t<form id=\"login-form\">\n\t\t<h3 class=\"text-center\">login</h3>\n\t\t<div class=\"form-group\">\n\t\t\t<label>account</label>\n\t\t\t<!--v-model双向绑定账号-->\n\t\t\t<input type=\"text\" class=\"form-control\" placeholder=\"Account\" v-model=\"username\" required />\n\t\t</div>\n\t\t<div class=\"form-group\">\n\t\t\t<label>Password</label>\n\t\t\t<!--v-model双向绑定密码-->\n\t\t\t<input type=\"password\" class=\"form-control\" placeholder=\"Password\" v-model=\"password\" required>\n\t\t</div>\n\t\t<button class=\"btn btn-default\" v-on:click=\"submit\">登录</button>\n\t</form>\n</div>\n</template>\n\n<script>\nexport default {\n  data () {\n    return {\n      username: '',\n      password: ''\n    }\n  },\n  // 在 `methods` 对象中定义方法\n  methods: {\n    submit: function () {\n      console.log('username: ' + this.username) //console中字符串需使用单引号''\n      this.$route.router.go({name: 'index'}) //直接使用路由的名字进行跳转\n    }\n  }\n}\n</script>\n\n<style scoped>\n#login {\n  padding: 200px 20px;\n  width: 730px;\n}\n#login > form {\n  border: solid 1px #999;\n  padding: 20px;\n  border-radius: 5px;\n}\n</style>\n```\n\n- 使用v-model进行双向绑定数据，数据在data中定义，可使用this.xxx直接获取\n\n- 此处引用了Bootstrap的样式，在index.html中添加\n\n``` html\n<link rel=\"stylesheet\" href=\"https://maxcdn.bootstrapcdn.com/bootstrap/latest/css/bootstrap.min.css\">\n```\n\n至此，我们初步创建了一个带路由的登录页面组件。\n\n### 参考\n[《http://guowenfh.github.io/2016/03/28/vue-webpack-06-router/》](webpack入坑之旅（六）配合vue-router实现SPA)\n[vue-router官方文档](http://router.vuejs.org/zh-cn/route.html)\n\n## 结束语\n-----\nVue中使用路由也折腾了一小会，不过vue的debug信息写得很详细哦，对哪里出问题了有个比较清晰的了解呢。\n[此处查看项目代码](https://github.com/godbasin/godbasin.github.io/tree/blog-codes/vue-notes/2-create-login)\n[此处查看页面效果](http://o9zkatzym.bkt.clouddn.com/2-create-login/index.html)\n","slug":"vue-notes-2-create-login","published":1,"updated":"2016-09-03T16:26:48.871Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cix45hui2004mxotukeabg0fa","content":"<p>最近在学习使用Vue作为前端的框架，《Vue使用笔记》系列用于记录过程中的一些使用和解决方法。<br>本文记录路由插件vue-router，以及搭建登录页面的过程。<br><a id=\"more\"></a></p>\n<h2 id=\"vue-router\"><a href=\"#vue-router\" class=\"headerlink\" title=\"vue-router\"></a>vue-router</h2><hr>\n<p>在使用vue-router时，我们需要做的就是把路由映射到各个组件，vue-router会把各个组件渲染到正确的地方。</p>\n<h3 id=\"安装、起步\"><a href=\"#安装、起步\" class=\"headerlink\" title=\"安装、起步\"></a>安装、起步</h3><ul>\n<li>安装</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">npm install vue-router --save</div></pre></td></tr></table></figure>\n<ul>\n<li>起步</li>\n</ul>\n<h3 id=\"基本用法\"><a href=\"#基本用法\" class=\"headerlink\" title=\"基本用法\"></a>基本用法</h3><ul>\n<li>HTML</li>\n</ul>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"app\"</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>Hello App!<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span></div><div class=\"line\">    <span class=\"comment\">&lt;!-- 使用指令 v-link 进行导航。 --&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">v-link</span>=<span class=\"string\">\"&#123; path: '/foo' &#125;\"</span>&gt;</span>Go to Foo<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">v-link</span>=<span class=\"string\">\"&#123; path: '/bar' &#125;\"</span>&gt;</span>Go to Bar<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></div><div class=\"line\">  <span class=\"comment\">&lt;!-- 路由外链 --&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">router-view</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">router-view</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div></pre></td></tr></table></figure>\n<ul>\n<li>javascript</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 定义组件</span></div><div class=\"line\"><span class=\"keyword\">var</span> Foo = Vue.extend(&#123;</div><div class=\"line\">    <span class=\"attr\">template</span>: <span class=\"string\">'&lt;p&gt;This is foo!&lt;/p&gt;'</span></div><div class=\"line\">&#125;)</div><div class=\"line\"><span class=\"keyword\">var</span> Bar = Vue.extend(&#123;</div><div class=\"line\">    <span class=\"attr\">template</span>: <span class=\"string\">'&lt;p&gt;This is bar!&lt;/p&gt;'</span></div><div class=\"line\">&#125;)</div><div class=\"line\"><span class=\"comment\">// 路由器需要一个根组件。</span></div><div class=\"line\"><span class=\"comment\">// 出于演示的目的，这里使用一个空的组件，直接使用 HTML 作为应用的模板</span></div><div class=\"line\"><span class=\"keyword\">var</span> App = Vue.extend(&#123;&#125;)</div><div class=\"line\"><span class=\"comment\">// 创建一个路由器实例</span></div><div class=\"line\"><span class=\"comment\">// 创建实例时可以传入配置参数进行定制，为保持简单，这里使用默认配置</span></div><div class=\"line\"><span class=\"keyword\">var</span> router = <span class=\"keyword\">new</span> VueRouter()</div><div class=\"line\"><span class=\"comment\">// 定义路由规则</span></div><div class=\"line\"><span class=\"comment\">// 每条路由规则应该映射到一个组件。这里的“组件”可以是一个使用 Vue.extend</span></div><div class=\"line\"><span class=\"comment\">// 创建的组件构造函数，也可以是一个组件选项对象。</span></div><div class=\"line\"><span class=\"comment\">// 稍后我们会讲解嵌套路由</span></div><div class=\"line\">router.map(&#123;</div><div class=\"line\">    <span class=\"string\">'/foo'</span>: &#123;</div><div class=\"line\">        <span class=\"attr\">component</span>: Foo</div><div class=\"line\">    &#125;,</div><div class=\"line\">    <span class=\"string\">'/bar'</span>: &#123;</div><div class=\"line\">        <span class=\"attr\">component</span>: Bar</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;)</div><div class=\"line\"><span class=\"comment\">// 现在我们可以启动应用了！</span></div><div class=\"line\"><span class=\"comment\">// 路由器会创建一个 App 实例，并且挂载到选择符 #app 匹配的元素上。</span></div><div class=\"line\">router.start(App, <span class=\"string\">'#app'</span>)</div></pre></td></tr></table></figure>\n<p>以上均来自<a href=\"http://router.vuejs.org/zh-cn/basic.html\" target=\"_blank\" rel=\"external\">官方文档</a>，且提供了一个<a href=\"http://jsfiddle.net/yyx990803/xyu276sa/\" target=\"_blank\" rel=\"external\">在线实例应用</a>。</p>\n<p>这里我们主要介绍将会涉及的一些基本资料，有关路由的嵌套、对象等等更多的请查看<a href=\"http://router.vuejs.org/zh-cn/nested.html\" target=\"_blank\" rel=\"external\">官方文档</a>。</p>\n<h2 id=\"创建登录组件\"><a href=\"#创建登录组件\" class=\"headerlink\" title=\"创建登录组件\"></a>创建登录组件</h2><hr>\n<h3 id=\"主要页面逻辑\"><a href=\"#主要页面逻辑\" class=\"headerlink\" title=\"主要页面逻辑\"></a>主要页面逻辑</h3><p>在这里，本骚年就建一个比较简单的项目。该项目与之前的Angular/React使用笔记项目长得完全一致，我们这里用Vue来实现吧。</p>\n<ul>\n<li>我们的主要页面逻辑如下：<ul>\n<li>1.登录页面，输入账号和密码即可</li>\n<li>2.模块页面</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"index-html主页面\"><a href=\"#index-html主页面\" class=\"headerlink\" title=\"index.html主页面\"></a>index.html主页面</h3><p>index.html主页面添加用于渲染匹配的组件，如下：<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"app\"</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">router-view</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">router-view</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<h3 id=\"main-js中设置路由\"><a href=\"#main-js中设置路由\" class=\"headerlink\" title=\"main.js中设置路由\"></a>main.js中设置路由</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 引入vue以及vue-router</span></div><div class=\"line\"><span class=\"keyword\">import</span> Vue <span class=\"keyword\">from</span> <span class=\"string\">'vue'</span></div><div class=\"line\"><span class=\"keyword\">import</span> VueRouter <span class=\"keyword\">from</span> <span class=\"string\">'vue-router'</span></div><div class=\"line\"><span class=\"comment\">// 引入组件</span></div><div class=\"line\"><span class=\"keyword\">import</span> Login <span class=\"keyword\">from</span> <span class=\"string\">'./components/Login.vue'</span></div><div class=\"line\"><span class=\"keyword\">import</span> Index <span class=\"keyword\">from</span> <span class=\"string\">'./components/Index.vue'</span></div><div class=\"line\"><span class=\"comment\">// 创建一个路由器实例</span></div><div class=\"line\"><span class=\"comment\">// 创建实例时可以传入配置参数进行定制，为保持简单，这里使用默认配置</span></div><div class=\"line\">Vue.use(VueRouter)</div><div class=\"line\"><span class=\"keyword\">var</span> router = <span class=\"keyword\">new</span> VueRouter()</div><div class=\"line\"><span class=\"comment\">// 路由器需要一个根组件。</span></div><div class=\"line\"><span class=\"keyword\">var</span> App = Vue.extend(&#123;&#125;)</div><div class=\"line\"><span class=\"comment\">// 定义路由规则</span></div><div class=\"line\"><span class=\"comment\">// 每条路由规则应该映射到一个组件。这里的“组件”可以是一个使用 Vue.extend</span></div><div class=\"line\"><span class=\"comment\">// 创建的组件构造函数，也可以是一个组件选项对象。</span></div><div class=\"line\">router.redirect(&#123;</div><div class=\"line\">  <span class=\"comment\">// 重定向任意未匹配路径到 /login</span></div><div class=\"line\">  <span class=\"string\">'*'</span>: <span class=\"string\">'/login'</span></div><div class=\"line\">&#125;)</div><div class=\"line\">router.map(&#123;</div><div class=\"line\">  <span class=\"string\">'/login'</span>: &#123;</div><div class=\"line\">    <span class=\"attr\">name</span>: <span class=\"string\">'login'</span>, <span class=\"comment\">// 定义路由的名字。方便使用。</span></div><div class=\"line\">    component: Login <span class=\"comment\">// 引用的组件名称，对应上面使用`import`导入的组件</span></div><div class=\"line\">  &#125;,</div><div class=\"line\">  <span class=\"string\">'/index'</span>: &#123;</div><div class=\"line\">    <span class=\"attr\">name</span>: <span class=\"string\">'index'</span>,</div><div class=\"line\">    <span class=\"attr\">component</span>: Index</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;)</div><div class=\"line\"><span class=\"comment\">// 现在我们可以启动应用了！</span></div><div class=\"line\"><span class=\"comment\">// 路由器会创建一个 App 实例，并且挂载到选择符 #app 匹配的元素上。</span></div><div class=\"line\">router.start(App, <span class=\"string\">'#app'</span>)</div></pre></td></tr></table></figure>\n<h3 id=\"创建登录页面\"><a href=\"#创建登录页面\" class=\"headerlink\" title=\"创建登录页面\"></a>创建登录页面</h3><ul>\n<li>首先我们在components文件夹内添加一个Login.vue</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;template&gt;</div><div class=\"line\"> &lt;div class=&quot;container&quot; id=&quot;login&quot;&gt;</div><div class=\"line\">  &lt;form id=&quot;login-form&quot;&gt;</div><div class=\"line\">    &lt;h3 class=&quot;text-center&quot;&gt;login&lt;/h3&gt;</div><div class=\"line\">    &lt;div class=&quot;form-group&quot;&gt;</div><div class=\"line\">      &lt;label&gt;account&lt;/label&gt;</div><div class=\"line\">      &lt;!--v-model双向绑定账号--&gt;</div><div class=\"line\">      &lt;input type=&quot;text&quot; class=&quot;form-control&quot; placeholder=&quot;Account&quot; v-model=&quot;username&quot; required /&gt;</div><div class=\"line\">    &lt;/div&gt;</div><div class=\"line\">    &lt;div class=&quot;form-group&quot;&gt;</div><div class=\"line\">      &lt;label&gt;Password&lt;/label&gt;</div><div class=\"line\">      &lt;!--v-model双向绑定密码--&gt;</div><div class=\"line\">      &lt;input type=&quot;password&quot; class=&quot;form-control&quot; placeholder=&quot;Password&quot; v-model=&quot;password&quot; required&gt;</div><div class=\"line\">    &lt;/div&gt;</div><div class=\"line\">    &lt;button class=&quot;btn btn-default&quot; v-on:click=&quot;submit&quot;&gt;登录&lt;/button&gt;</div><div class=\"line\">  &lt;/form&gt;</div><div class=\"line\">&lt;/div&gt;</div><div class=\"line\">&lt;/template&gt;</div><div class=\"line\"></div><div class=\"line\">&lt;script&gt;</div><div class=\"line\">export default &#123;</div><div class=\"line\">  data () &#123;</div><div class=\"line\">    return &#123;</div><div class=\"line\">      username: &apos;&apos;,</div><div class=\"line\">      password: &apos;&apos;</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;,</div><div class=\"line\">  // 在 `methods` 对象中定义方法</div><div class=\"line\">  methods: &#123;</div><div class=\"line\">    submit: function () &#123;</div><div class=\"line\">      console.log(&apos;username: &apos; + this.username) //console中字符串需使用单引号&apos;&apos;</div><div class=\"line\">      this.$route.router.go(&#123;name: &apos;index&apos;&#125;) //直接使用路由的名字进行跳转</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div><div class=\"line\">&lt;/script&gt;</div><div class=\"line\"></div><div class=\"line\">&lt;style scoped&gt;</div><div class=\"line\">#login &#123;</div><div class=\"line\">  padding: 200px 20px;</div><div class=\"line\">  width: 730px;</div><div class=\"line\">&#125;</div><div class=\"line\">#login &gt; form &#123;</div><div class=\"line\">  border: solid 1px #999;</div><div class=\"line\">  padding: 20px;</div><div class=\"line\">  border-radius: 5px;</div><div class=\"line\">&#125;</div><div class=\"line\">&lt;/style&gt;</div></pre></td></tr></table></figure>\n<ul>\n<li><p>使用v-model进行双向绑定数据，数据在data中定义，可使用this.xxx直接获取</p>\n</li>\n<li><p>此处引用了Bootstrap的样式，在index.html中添加</p>\n</li>\n</ul>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">link</span> <span class=\"attr\">rel</span>=<span class=\"string\">\"stylesheet\"</span> <span class=\"attr\">href</span>=<span class=\"string\">\"https://maxcdn.bootstrapcdn.com/bootstrap/latest/css/bootstrap.min.css\"</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>至此，我们初步创建了一个带路由的登录页面组件。</p>\n<h3 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h3><p><a href=\"webpack入坑之旅（六）配合vue-router实现SPA\">《http://guowenfh.github.io/2016/03/28/vue-webpack-06-router/》</a><br><a href=\"http://router.vuejs.org/zh-cn/route.html\" target=\"_blank\" rel=\"external\">vue-router官方文档</a></p>\n<h2 id=\"结束语\"><a href=\"#结束语\" class=\"headerlink\" title=\"结束语\"></a>结束语</h2><hr>\n<p>Vue中使用路由也折腾了一小会，不过vue的debug信息写得很详细哦，对哪里出问题了有个比较清晰的了解呢。<br><a href=\"https://github.com/godbasin/godbasin.github.io/tree/blog-codes/vue-notes/2-create-login\" target=\"_blank\" rel=\"external\">此处查看项目代码</a><br><a href=\"http://o9zkatzym.bkt.clouddn.com/2-create-login/index.html\" target=\"_blank\" rel=\"external\">此处查看页面效果</a></p>\n","excerpt":"<p>最近在学习使用Vue作为前端的框架，《Vue使用笔记》系列用于记录过程中的一些使用和解决方法。<br>本文记录路由插件vue-router，以及搭建登录页面的过程。<br>","more":"</p>\n<h2 id=\"vue-router\"><a href=\"#vue-router\" class=\"headerlink\" title=\"vue-router\"></a>vue-router</h2><hr>\n<p>在使用vue-router时，我们需要做的就是把路由映射到各个组件，vue-router会把各个组件渲染到正确的地方。</p>\n<h3 id=\"安装、起步\"><a href=\"#安装、起步\" class=\"headerlink\" title=\"安装、起步\"></a>安装、起步</h3><ul>\n<li>安装</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">npm install vue-router --save</div></pre></td></tr></table></figure>\n<ul>\n<li>起步</li>\n</ul>\n<h3 id=\"基本用法\"><a href=\"#基本用法\" class=\"headerlink\" title=\"基本用法\"></a>基本用法</h3><ul>\n<li>HTML</li>\n</ul>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"app\"</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>Hello App!<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span></div><div class=\"line\">    <span class=\"comment\">&lt;!-- 使用指令 v-link 进行导航。 --&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">v-link</span>=<span class=\"string\">\"&#123; path: '/foo' &#125;\"</span>&gt;</span>Go to Foo<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">v-link</span>=<span class=\"string\">\"&#123; path: '/bar' &#125;\"</span>&gt;</span>Go to Bar<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></div><div class=\"line\">  <span class=\"comment\">&lt;!-- 路由外链 --&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">router-view</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">router-view</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div></pre></td></tr></table></figure>\n<ul>\n<li>javascript</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 定义组件</span></div><div class=\"line\"><span class=\"keyword\">var</span> Foo = Vue.extend(&#123;</div><div class=\"line\">    <span class=\"attr\">template</span>: <span class=\"string\">'&lt;p&gt;This is foo!&lt;/p&gt;'</span></div><div class=\"line\">&#125;)</div><div class=\"line\"><span class=\"keyword\">var</span> Bar = Vue.extend(&#123;</div><div class=\"line\">    <span class=\"attr\">template</span>: <span class=\"string\">'&lt;p&gt;This is bar!&lt;/p&gt;'</span></div><div class=\"line\">&#125;)</div><div class=\"line\"><span class=\"comment\">// 路由器需要一个根组件。</span></div><div class=\"line\"><span class=\"comment\">// 出于演示的目的，这里使用一个空的组件，直接使用 HTML 作为应用的模板</span></div><div class=\"line\"><span class=\"keyword\">var</span> App = Vue.extend(&#123;&#125;)</div><div class=\"line\"><span class=\"comment\">// 创建一个路由器实例</span></div><div class=\"line\"><span class=\"comment\">// 创建实例时可以传入配置参数进行定制，为保持简单，这里使用默认配置</span></div><div class=\"line\"><span class=\"keyword\">var</span> router = <span class=\"keyword\">new</span> VueRouter()</div><div class=\"line\"><span class=\"comment\">// 定义路由规则</span></div><div class=\"line\"><span class=\"comment\">// 每条路由规则应该映射到一个组件。这里的“组件”可以是一个使用 Vue.extend</span></div><div class=\"line\"><span class=\"comment\">// 创建的组件构造函数，也可以是一个组件选项对象。</span></div><div class=\"line\"><span class=\"comment\">// 稍后我们会讲解嵌套路由</span></div><div class=\"line\">router.map(&#123;</div><div class=\"line\">    <span class=\"string\">'/foo'</span>: &#123;</div><div class=\"line\">        <span class=\"attr\">component</span>: Foo</div><div class=\"line\">    &#125;,</div><div class=\"line\">    <span class=\"string\">'/bar'</span>: &#123;</div><div class=\"line\">        <span class=\"attr\">component</span>: Bar</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;)</div><div class=\"line\"><span class=\"comment\">// 现在我们可以启动应用了！</span></div><div class=\"line\"><span class=\"comment\">// 路由器会创建一个 App 实例，并且挂载到选择符 #app 匹配的元素上。</span></div><div class=\"line\">router.start(App, <span class=\"string\">'#app'</span>)</div></pre></td></tr></table></figure>\n<p>以上均来自<a href=\"http://router.vuejs.org/zh-cn/basic.html\">官方文档</a>，且提供了一个<a href=\"http://jsfiddle.net/yyx990803/xyu276sa/\">在线实例应用</a>。</p>\n<p>这里我们主要介绍将会涉及的一些基本资料，有关路由的嵌套、对象等等更多的请查看<a href=\"http://router.vuejs.org/zh-cn/nested.html\">官方文档</a>。</p>\n<h2 id=\"创建登录组件\"><a href=\"#创建登录组件\" class=\"headerlink\" title=\"创建登录组件\"></a>创建登录组件</h2><hr>\n<h3 id=\"主要页面逻辑\"><a href=\"#主要页面逻辑\" class=\"headerlink\" title=\"主要页面逻辑\"></a>主要页面逻辑</h3><p>在这里，本骚年就建一个比较简单的项目。该项目与之前的Angular/React使用笔记项目长得完全一致，我们这里用Vue来实现吧。</p>\n<ul>\n<li>我们的主要页面逻辑如下：<ul>\n<li>1.登录页面，输入账号和密码即可</li>\n<li>2.模块页面</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"index-html主页面\"><a href=\"#index-html主页面\" class=\"headerlink\" title=\"index.html主页面\"></a>index.html主页面</h3><p>index.html主页面添加用于渲染匹配的组件，如下：<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"app\"</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">router-view</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">router-view</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<h3 id=\"main-js中设置路由\"><a href=\"#main-js中设置路由\" class=\"headerlink\" title=\"main.js中设置路由\"></a>main.js中设置路由</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 引入vue以及vue-router</span></div><div class=\"line\"><span class=\"keyword\">import</span> Vue <span class=\"keyword\">from</span> <span class=\"string\">'vue'</span></div><div class=\"line\"><span class=\"keyword\">import</span> VueRouter <span class=\"keyword\">from</span> <span class=\"string\">'vue-router'</span></div><div class=\"line\"><span class=\"comment\">// 引入组件</span></div><div class=\"line\"><span class=\"keyword\">import</span> Login <span class=\"keyword\">from</span> <span class=\"string\">'./components/Login.vue'</span></div><div class=\"line\"><span class=\"keyword\">import</span> Index <span class=\"keyword\">from</span> <span class=\"string\">'./components/Index.vue'</span></div><div class=\"line\"><span class=\"comment\">// 创建一个路由器实例</span></div><div class=\"line\"><span class=\"comment\">// 创建实例时可以传入配置参数进行定制，为保持简单，这里使用默认配置</span></div><div class=\"line\">Vue.use(VueRouter)</div><div class=\"line\"><span class=\"keyword\">var</span> router = <span class=\"keyword\">new</span> VueRouter()</div><div class=\"line\"><span class=\"comment\">// 路由器需要一个根组件。</span></div><div class=\"line\"><span class=\"keyword\">var</span> App = Vue.extend(&#123;&#125;)</div><div class=\"line\"><span class=\"comment\">// 定义路由规则</span></div><div class=\"line\"><span class=\"comment\">// 每条路由规则应该映射到一个组件。这里的“组件”可以是一个使用 Vue.extend</span></div><div class=\"line\"><span class=\"comment\">// 创建的组件构造函数，也可以是一个组件选项对象。</span></div><div class=\"line\">router.redirect(&#123;</div><div class=\"line\">  <span class=\"comment\">// 重定向任意未匹配路径到 /login</span></div><div class=\"line\">  <span class=\"string\">'*'</span>: <span class=\"string\">'/login'</span></div><div class=\"line\">&#125;)</div><div class=\"line\">router.map(&#123;</div><div class=\"line\">  <span class=\"string\">'/login'</span>: &#123;</div><div class=\"line\">    <span class=\"attr\">name</span>: <span class=\"string\">'login'</span>, <span class=\"comment\">// 定义路由的名字。方便使用。</span></div><div class=\"line\">    component: Login <span class=\"comment\">// 引用的组件名称，对应上面使用`import`导入的组件</span></div><div class=\"line\">  &#125;,</div><div class=\"line\">  <span class=\"string\">'/index'</span>: &#123;</div><div class=\"line\">    <span class=\"attr\">name</span>: <span class=\"string\">'index'</span>,</div><div class=\"line\">    <span class=\"attr\">component</span>: Index</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;)</div><div class=\"line\"><span class=\"comment\">// 现在我们可以启动应用了！</span></div><div class=\"line\"><span class=\"comment\">// 路由器会创建一个 App 实例，并且挂载到选择符 #app 匹配的元素上。</span></div><div class=\"line\">router.start(App, <span class=\"string\">'#app'</span>)</div></pre></td></tr></table></figure>\n<h3 id=\"创建登录页面\"><a href=\"#创建登录页面\" class=\"headerlink\" title=\"创建登录页面\"></a>创建登录页面</h3><ul>\n<li>首先我们在components文件夹内添加一个Login.vue</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;template&gt;</div><div class=\"line\"> &lt;div class=&quot;container&quot; id=&quot;login&quot;&gt;</div><div class=\"line\">  &lt;form id=&quot;login-form&quot;&gt;</div><div class=\"line\">    &lt;h3 class=&quot;text-center&quot;&gt;login&lt;/h3&gt;</div><div class=\"line\">    &lt;div class=&quot;form-group&quot;&gt;</div><div class=\"line\">      &lt;label&gt;account&lt;/label&gt;</div><div class=\"line\">      &lt;!--v-model双向绑定账号--&gt;</div><div class=\"line\">      &lt;input type=&quot;text&quot; class=&quot;form-control&quot; placeholder=&quot;Account&quot; v-model=&quot;username&quot; required /&gt;</div><div class=\"line\">    &lt;/div&gt;</div><div class=\"line\">    &lt;div class=&quot;form-group&quot;&gt;</div><div class=\"line\">      &lt;label&gt;Password&lt;/label&gt;</div><div class=\"line\">      &lt;!--v-model双向绑定密码--&gt;</div><div class=\"line\">      &lt;input type=&quot;password&quot; class=&quot;form-control&quot; placeholder=&quot;Password&quot; v-model=&quot;password&quot; required&gt;</div><div class=\"line\">    &lt;/div&gt;</div><div class=\"line\">    &lt;button class=&quot;btn btn-default&quot; v-on:click=&quot;submit&quot;&gt;登录&lt;/button&gt;</div><div class=\"line\">  &lt;/form&gt;</div><div class=\"line\">&lt;/div&gt;</div><div class=\"line\">&lt;/template&gt;</div><div class=\"line\"></div><div class=\"line\">&lt;script&gt;</div><div class=\"line\">export default &#123;</div><div class=\"line\">  data () &#123;</div><div class=\"line\">    return &#123;</div><div class=\"line\">      username: &apos;&apos;,</div><div class=\"line\">      password: &apos;&apos;</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;,</div><div class=\"line\">  // 在 `methods` 对象中定义方法</div><div class=\"line\">  methods: &#123;</div><div class=\"line\">    submit: function () &#123;</div><div class=\"line\">      console.log(&apos;username: &apos; + this.username) //console中字符串需使用单引号&apos;&apos;</div><div class=\"line\">      this.$route.router.go(&#123;name: &apos;index&apos;&#125;) //直接使用路由的名字进行跳转</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div><div class=\"line\">&lt;/script&gt;</div><div class=\"line\"></div><div class=\"line\">&lt;style scoped&gt;</div><div class=\"line\">#login &#123;</div><div class=\"line\">  padding: 200px 20px;</div><div class=\"line\">  width: 730px;</div><div class=\"line\">&#125;</div><div class=\"line\">#login &gt; form &#123;</div><div class=\"line\">  border: solid 1px #999;</div><div class=\"line\">  padding: 20px;</div><div class=\"line\">  border-radius: 5px;</div><div class=\"line\">&#125;</div><div class=\"line\">&lt;/style&gt;</div></pre></td></tr></table></figure>\n<ul>\n<li><p>使用v-model进行双向绑定数据，数据在data中定义，可使用this.xxx直接获取</p>\n</li>\n<li><p>此处引用了Bootstrap的样式，在index.html中添加</p>\n</li>\n</ul>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">link</span> <span class=\"attr\">rel</span>=<span class=\"string\">\"stylesheet\"</span> <span class=\"attr\">href</span>=<span class=\"string\">\"https://maxcdn.bootstrapcdn.com/bootstrap/latest/css/bootstrap.min.css\"</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>至此，我们初步创建了一个带路由的登录页面组件。</p>\n<h3 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h3><p><a href=\"webpack入坑之旅（六）配合vue-router实现SPA\">《http://guowenfh.github.io/2016/03/28/vue-webpack-06-router/》</a><br><a href=\"http://router.vuejs.org/zh-cn/route.html\">vue-router官方文档</a></p>\n<h2 id=\"结束语\"><a href=\"#结束语\" class=\"headerlink\" title=\"结束语\"></a>结束语</h2><hr>\n<p>Vue中使用路由也折腾了一小会，不过vue的debug信息写得很详细哦，对哪里出问题了有个比较清晰的了解呢。<br><a href=\"https://github.com/godbasin/godbasin.github.io/tree/blog-codes/vue-notes/2-create-login\">此处查看项目代码</a><br><a href=\"http://o9zkatzym.bkt.clouddn.com/2-create-login/index.html\">此处查看页面效果</a></p>"},{"title":"Vue使用笔记3--创建头部组件","date":"2016-09-09T20:31:34.000Z","_content":"最近在学习使用Vue作为前端的框架，《Vue使用笔记》系列用于记录过程中的一些使用和解决方法。\n本文记录Vue组件相关，以及创建头部组件的过程。\n<!--more-->\n\n实话说，在使用过angular以及react之后，vue给本骚年的感觉就是两者的优点结合在一起了呢。\n\n## Vue组件\n-----\n### Vue实例\n- 一个Vue实例其实正是一个MVVM模式中所描述的ViewModel\n- 在实例化Vue时，需要传入一个选项对象，它可以包含数据、模板、挂载元素、方法、生命周期钩子等选项，[参考](http://cn.vuejs.org/api/)\n- 可以扩展Vue构造器，从而用预定义选项创建可复用的组件构造器\n\n### 实例生命周期\n这里简单放个图吧，左侧的红色框框代表具体的生命周期钩子。\n![image](http://o905ne85q.bkt.clouddn.com/lifecycle.png)\n[官方文档](http://cn.vuejs.org/api/#选项-生命周期钩子)里面有详细的生命周期钩子哦，大家有需要的话可以具体去研究一下。\n\n### Vue组件\n组件可以扩展HTML元素，封装可重用的代码。在较高层面上，组件是自定义元素，Vue.js的编译器为它添加特殊功能。\n- 所有的Vue.js组件其实都是被扩展的Vue实例\n- Vue 的模板是DOM模板，使用浏览器原生的解析器（React则是自己实现一个）\n- Props属性\n  - 组件实例的作用域是孤立的。可以使用props把数据传给子组件，也可以用v-bind绑定动态Props到父组件的数据\n  - prop默认是单向绑定，使用.sync或.once绑定修饰符显式地强制双向或单次绑定\n  - 组件可以为 props 指定验证要求（类似React的proptype吧）\n- 动态组件\n  - 多个组件可以使用同一个挂载点，动态地绑定到它的is特性，在它们之间切换\n  - keep-alive可以把切换出去的组件保留在内存中，保留它的状态或避免重新渲染\n  - 在切换组件时，切入组件在切入前可能需要进行一些异步操作。使用activate钩子控制组件切换时长\n  - transition-mode特性用于指定两个动态组件之间如何过渡\n  - 组件当它有name选项时，可以在它的模板内可以递归地调用自己\n\n### 父子组件通信\n- 使用父链（会使得父组件与子组件紧密地耦合）\n  - 子组件可以用this.$parent访问它的父组件\n  - 根实例的后代可以用this.$root访问它\n  - 父组件有一个数组this.$children，包含它所有的子元素\n\n- 自定义事件（Vue事件在冒泡过程中第一次触发回调之后自动停止冒泡，调用true取消）\n  - 使用$on()监听事件\n  - 使用$emit()在它上面触发事件\n  - 使用$dispatch()派发事件，事件沿着父链冒泡\n  - 使用$broadcast()广播事件，事件向下传导给所有的后代\n\n- 子组件索引\n  - 使用v-ref为子组件指定一个索引ID（类似于React的ref属性）\n\n- 使用 Slot 分发内容\n  - 使用特殊的<slot>元素作为原始内容的插槽（类似Angular的transclusion）\n  - 父组件的内容将被抛弃，除非子组件模板包含 <slot>\n  - 如果子组件模板只有一个没有特性的slot，父组件的整个内容将插到slot所在的地方并替换它\n  - <slot>元素可以用一个特殊特性name配置如何分发内容\n\n### 参考\n[《Vue组件》](http://cn.vuejs.org/guide/components.html#使用-Slot-分发内容)\n\n## 创建头部菜单\n-----\n该头部菜单与前面的使用笔记中一致。如图：\n![image](http://o905ne85q.bkt.clouddn.com/C902.tmp.png)\n由于Vue中木有找到类似React-Bootstrap一样的库，故这里先直接用bootstrap的样式css文件。\n\n### 添加头部组件\n- 在components文件夹中添加Header.vue文件\n- 添加模板\n\n``` vue\n<template>\n<nav class=\"navbar navbar-default header\">\n  <div class=\"container-fluid\">\n    <div class=\"navbar-header\">\n      <a class=\"navbar-brand\">Godbasin</a>\n    </div>\n    <div class=\"collapse navbar-collapse\" id=\"bs-example-navbar-collapse-1\">\n      <ul class=\"nav navbar-nav\">     \t\n        <li v-for=\"menu in menus\" v-bind:class=\"current === menu.title ? 'active' : ''\">\n        \t<a href=\"{{ menu.href }}\">{{ menu.text }}<span v-show=\"menu.current\" class=\"sr-only\">(current)</span></a>\n        </li>\n      </ul>\n      <ul class=\"nav navbar-nav navbar-right\">\n      \t<li><a>{{ clock }}</a></li>\n        <li class=\"dropdown\">\n          <a class=\"dropdown-toggle\" data-toggle=\"dropdown\" role=\"button\" aria-haspopup=\"true\" aria-expanded=\"false\">菜单 <span class=\"caret\"></span></a>\n          <ul class=\"dropdown-menu\">\n            <li v-for=\"usermenu in usermenus\"><a href=\"{{ usermenu.href }}\">{{ usermenu.text }}</a></li>\n          </ul>\n        </li>\n      </ul>\n    </div>\n  </div>\n</nav>\n</template>\n```\n\n- 添加逻辑\n\n``` vue\n<script>\nexport default {\n  data () {\n    return {\n      menus: [{\n        title: 'index', // title用于储存路由对应的路径\n        href: 'index.html#/index', // href用于设定该菜单跳转路由\n        text: '首页' // text用于储存该菜单显示名称\n      }, {\n        title: 'other',\n        href: 'index.html#/other',\n        text: '其他'\n      }],\n      usermenus: [{\n        text: '退出', // text用于储存该菜单显示名称\n        href: 'index.html#/login' // href用于设定该菜单跳转路由\n      }],\n      clock: '' // clock用于储存时间\n    }\n  },\n  props: ['current'], // current用于获取当前的位置\n  // 在created生命周期钩子上添加setInterval进行时钟的刷新，当然其他的生命周期钩子也可能适用\n  created: function () {\n    var that = this\n    setInterval(function () {\n      that.clockRender()\n    }, 500)\n  },\n  // 在 `methods` 对象中定义方法\n  methods: {\n    clockRender: function () { // 刷新时钟\n      var numberStandard = function (num) { // 格式化时间（小于10补上0）\n        var _val = Number(num)\n        var _num\n        _num = (_val < 10) ? ('0' + _val) : ('' + _val)\n        return _num\n      }\n      var _date = new Date() // 获取当前时间\n      this.clock = _date.getFullYear() + '年' + (_date.getMonth() + 1) + '月' +\n        _date.getDate() + '日' + ' ' + numberStandard(_date.getHours()) + ':' + numberStandard(_date.getMinutes()) +\n        ':' + numberStandard(_date.getSeconds())\n    }\n  }\n}\n</script>\n```\n- 添加样式（此处省略）\n  - 使用`<style>`添加全局样式\n  - 可使用`<style scoped>`添加局部样式\n\n\n### 添加属性Props\n由于菜单的内容不变，我们可以将其写成Props属性。\n``` jsx\npropTypes: { //属性校验器\n\t\tmenus: React.PropTypes.array, //表示menus属性必须是array，否则报错\n\t\tusermenus: React.PropTypes.array, //表示usermenus属性必须是array，否则报错\n},\ngetDefaultProps: function() {\n\treturn { //设置默认属性\n\t\tmenus: [{\n\t\t\ttitle: 'index', //title用于储存路由对应的路径\n\t\t\thref: '/index', //href用于设定该菜单跳转路由\n\t\t\ttext: '首页', //text用于储存该菜单显示名称\n\t\t}, {\n\t\t\ttitle: 'others',\n\t\t\thref: '/other',\n\t\t\ttext: '其他',\n\t\t}],\n\t\t//usermenus用于储存侧边下拉菜单\n\t\tusermenus: [{\n\t\t\tclick: function(){}, //click用于设置该菜单点击事件\n\t\t\ttext: '退出', //text用于储存该菜单显示名称\n\t\t}],\n\t};\n},\n```\n\n### 添加state状态\n像时间这种每500毫秒刷新一次的，我们将其放在state中。\n``` jsx\ngetInitialState: function() {\n\treturn {clock: ''}; //设置初始state值\n},\n//定义clockRender事件，用于改变this.state.clock值\nclockRender: function(){\n\tlet numberStandard = function(num) {\n\t\tlet _val = Number(num), _num;\n\t\t_num = (_val < 10) ? ('0' + _val) : ('' + _val);\n\t\treturn _num;\n\t}, _date = new Date(),\n\t\tclock = _date.getFullYear() + '年' + (_date.getMonth() + 1) + '月' +\n\t\t\t_date.getDate() + '日' + ' ' + numberStandard(_date.getHours()) + ':' + numberStandard(_date.getMinutes()) +\n\t\t\t':' + numberStandard(_date.getSeconds());\n\tthis.setState({clock: clock});\n},\n```\n注意：state不应存储计算后的值，计算应该在render中进行，但由于比较长，本骚年也就这样将就用了。小伙伴们有更好的方法也可以提出来哦。\n\n### setInterval时钟\n在componentDidMount中进行setInterval时钟。componentDidMount属于react生命周期，在初始化渲染执行之后立刻调用一次，仅客户端有效。\nrender就是一个模板的作用，他只处理和展示相关的逻辑，如果有业务逻辑，应放在componentWillMount和componentDidMount中执行。\n``` jsx\n//进行setInterval时钟\ncomponentDidMount: function(){\n\tlet that = this;\t\t\t\n\tthis.interval = setInterval(function() {\n\t\tthat.clockRender();\n\t}, 500);\n},\n//组件注销时需销毁定时器\ncomponentWillUnmount: function(){\n\tclearInterval(this.interval);\n},\n```\n\n### 设置render模板\n在这里大家可以看到react-bootstrap的使用方法啦。当然每个组件都是已经在该文件中引入了的。\n还有jsx的遍历方法也会在这里展示。\n- 在index.jsx页面引入Header时添加属性active=\"index\"，作为菜单选中样式的判断\n``` jsx\nrender() {\n\treturn (\n\t\tlet active = this.props.active; //获取父组件传递的props\n\t\t<Navbar className=\"header\" fluid>\n\t\t\t<Navbar.Header className=\"navbar-header\">\n\t\t\t\t<Navbar.Brand>Godbasin</Navbar.Brand>\n\t\t\t</Navbar.Header>\n\t\t\t<Navbar.Collapse id=\"bs-example-navbar-collapse-1\">\n\t\t\t\t<Nav navbar>     \t\n\t\t\t\t{ //遍历头部菜单menus\n\t\t\t\t\tthis.props.menus.map(function(menu, i) {\n\t\t\t\t\t\t//判断，若title等于active，则加载选中样式\n\t\t\t\t\t\treturn (<li key={i} className={ menu.title == active ? \"active\" : \"\"}><a href={menu.href}>{ menu.text }<span className=\"sr-only\">(current)</span></a></li>);\n\t\t\t\t\t})\n\t\t\t\t}\n\t\t\t\t</Nav>\n\t\t\t\t<Nav navbar pullRight>\n\t\t\t\t\t<li><a>{ this.state.clock }</a></li>\n\t\t\t\t\t<NavDropdown title=\"菜单\" id=\"top-aside-menu\">\n\t\t\t\t\t\t{ //遍历右侧下拉菜单usermenus\n\t\t\t\t\t\t\tthis.props.usermenus.map(function(usermenu,i) {\n\t\t\t\t\t\t\t\treturn (<MenuItem key={i}>{ usermenu.text }</MenuItem>);\n\t\t\t\t\t\t\t})\n\t\t\t\t\t\t}\n\t\t\t\t\t</NavDropdown>\n\t\t\t\t</Nav>\n\t\t\t</Navbar.Collapse>\n\t\t</Navbar>\n\t)\n}\n```\n\n### Index组件中添加Header\n在components文件夹中打开Index.vue文件\n\n``` vue\n<template>\n  <!--使用is绑定组件，current传入prop数据-->\n  <div is=\"my-header\" current=\"index\"></div>\n  <div class=\"container\">Hello Vue!</div>\n</template>\n<script>\n//导入Header组件\nimport MyHeader from './Header.vue'\nexport default {\n  components: {\n    MyHeader\n  }\n}\n</script>\n```\n\n## 结束语\n-----\nVue还是挺好用的呢，文档也写得很全很详细，虽然相应的插件、库等还是比较少，但不得不说从Angular重构还是挺多可以复用的代码呢。\n[此处查看项目代码](https://github.com/godbasin/godbasin.github.io/tree/blog-codes/vue-notes/3-create-header)\n[此处查看页面效果](http://o9zkatzym.bkt.clouddn.com/3-create-header/index.html?#!/index)\n","source":"_posts/vue-notes-3-create-header.md","raw":"---\ntitle:  Vue使用笔记3--创建头部组件\ndate: 2016-09-10 04:31:34\ncategories: vue八宝粥\ntags: 笔记\n---\n最近在学习使用Vue作为前端的框架，《Vue使用笔记》系列用于记录过程中的一些使用和解决方法。\n本文记录Vue组件相关，以及创建头部组件的过程。\n<!--more-->\n\n实话说，在使用过angular以及react之后，vue给本骚年的感觉就是两者的优点结合在一起了呢。\n\n## Vue组件\n-----\n### Vue实例\n- 一个Vue实例其实正是一个MVVM模式中所描述的ViewModel\n- 在实例化Vue时，需要传入一个选项对象，它可以包含数据、模板、挂载元素、方法、生命周期钩子等选项，[参考](http://cn.vuejs.org/api/)\n- 可以扩展Vue构造器，从而用预定义选项创建可复用的组件构造器\n\n### 实例生命周期\n这里简单放个图吧，左侧的红色框框代表具体的生命周期钩子。\n![image](http://o905ne85q.bkt.clouddn.com/lifecycle.png)\n[官方文档](http://cn.vuejs.org/api/#选项-生命周期钩子)里面有详细的生命周期钩子哦，大家有需要的话可以具体去研究一下。\n\n### Vue组件\n组件可以扩展HTML元素，封装可重用的代码。在较高层面上，组件是自定义元素，Vue.js的编译器为它添加特殊功能。\n- 所有的Vue.js组件其实都是被扩展的Vue实例\n- Vue 的模板是DOM模板，使用浏览器原生的解析器（React则是自己实现一个）\n- Props属性\n  - 组件实例的作用域是孤立的。可以使用props把数据传给子组件，也可以用v-bind绑定动态Props到父组件的数据\n  - prop默认是单向绑定，使用.sync或.once绑定修饰符显式地强制双向或单次绑定\n  - 组件可以为 props 指定验证要求（类似React的proptype吧）\n- 动态组件\n  - 多个组件可以使用同一个挂载点，动态地绑定到它的is特性，在它们之间切换\n  - keep-alive可以把切换出去的组件保留在内存中，保留它的状态或避免重新渲染\n  - 在切换组件时，切入组件在切入前可能需要进行一些异步操作。使用activate钩子控制组件切换时长\n  - transition-mode特性用于指定两个动态组件之间如何过渡\n  - 组件当它有name选项时，可以在它的模板内可以递归地调用自己\n\n### 父子组件通信\n- 使用父链（会使得父组件与子组件紧密地耦合）\n  - 子组件可以用this.$parent访问它的父组件\n  - 根实例的后代可以用this.$root访问它\n  - 父组件有一个数组this.$children，包含它所有的子元素\n\n- 自定义事件（Vue事件在冒泡过程中第一次触发回调之后自动停止冒泡，调用true取消）\n  - 使用$on()监听事件\n  - 使用$emit()在它上面触发事件\n  - 使用$dispatch()派发事件，事件沿着父链冒泡\n  - 使用$broadcast()广播事件，事件向下传导给所有的后代\n\n- 子组件索引\n  - 使用v-ref为子组件指定一个索引ID（类似于React的ref属性）\n\n- 使用 Slot 分发内容\n  - 使用特殊的<slot>元素作为原始内容的插槽（类似Angular的transclusion）\n  - 父组件的内容将被抛弃，除非子组件模板包含 <slot>\n  - 如果子组件模板只有一个没有特性的slot，父组件的整个内容将插到slot所在的地方并替换它\n  - <slot>元素可以用一个特殊特性name配置如何分发内容\n\n### 参考\n[《Vue组件》](http://cn.vuejs.org/guide/components.html#使用-Slot-分发内容)\n\n## 创建头部菜单\n-----\n该头部菜单与前面的使用笔记中一致。如图：\n![image](http://o905ne85q.bkt.clouddn.com/C902.tmp.png)\n由于Vue中木有找到类似React-Bootstrap一样的库，故这里先直接用bootstrap的样式css文件。\n\n### 添加头部组件\n- 在components文件夹中添加Header.vue文件\n- 添加模板\n\n``` vue\n<template>\n<nav class=\"navbar navbar-default header\">\n  <div class=\"container-fluid\">\n    <div class=\"navbar-header\">\n      <a class=\"navbar-brand\">Godbasin</a>\n    </div>\n    <div class=\"collapse navbar-collapse\" id=\"bs-example-navbar-collapse-1\">\n      <ul class=\"nav navbar-nav\">     \t\n        <li v-for=\"menu in menus\" v-bind:class=\"current === menu.title ? 'active' : ''\">\n        \t<a href=\"{{ menu.href }}\">{{ menu.text }}<span v-show=\"menu.current\" class=\"sr-only\">(current)</span></a>\n        </li>\n      </ul>\n      <ul class=\"nav navbar-nav navbar-right\">\n      \t<li><a>{{ clock }}</a></li>\n        <li class=\"dropdown\">\n          <a class=\"dropdown-toggle\" data-toggle=\"dropdown\" role=\"button\" aria-haspopup=\"true\" aria-expanded=\"false\">菜单 <span class=\"caret\"></span></a>\n          <ul class=\"dropdown-menu\">\n            <li v-for=\"usermenu in usermenus\"><a href=\"{{ usermenu.href }}\">{{ usermenu.text }}</a></li>\n          </ul>\n        </li>\n      </ul>\n    </div>\n  </div>\n</nav>\n</template>\n```\n\n- 添加逻辑\n\n``` vue\n<script>\nexport default {\n  data () {\n    return {\n      menus: [{\n        title: 'index', // title用于储存路由对应的路径\n        href: 'index.html#/index', // href用于设定该菜单跳转路由\n        text: '首页' // text用于储存该菜单显示名称\n      }, {\n        title: 'other',\n        href: 'index.html#/other',\n        text: '其他'\n      }],\n      usermenus: [{\n        text: '退出', // text用于储存该菜单显示名称\n        href: 'index.html#/login' // href用于设定该菜单跳转路由\n      }],\n      clock: '' // clock用于储存时间\n    }\n  },\n  props: ['current'], // current用于获取当前的位置\n  // 在created生命周期钩子上添加setInterval进行时钟的刷新，当然其他的生命周期钩子也可能适用\n  created: function () {\n    var that = this\n    setInterval(function () {\n      that.clockRender()\n    }, 500)\n  },\n  // 在 `methods` 对象中定义方法\n  methods: {\n    clockRender: function () { // 刷新时钟\n      var numberStandard = function (num) { // 格式化时间（小于10补上0）\n        var _val = Number(num)\n        var _num\n        _num = (_val < 10) ? ('0' + _val) : ('' + _val)\n        return _num\n      }\n      var _date = new Date() // 获取当前时间\n      this.clock = _date.getFullYear() + '年' + (_date.getMonth() + 1) + '月' +\n        _date.getDate() + '日' + ' ' + numberStandard(_date.getHours()) + ':' + numberStandard(_date.getMinutes()) +\n        ':' + numberStandard(_date.getSeconds())\n    }\n  }\n}\n</script>\n```\n- 添加样式（此处省略）\n  - 使用`<style>`添加全局样式\n  - 可使用`<style scoped>`添加局部样式\n\n\n### 添加属性Props\n由于菜单的内容不变，我们可以将其写成Props属性。\n``` jsx\npropTypes: { //属性校验器\n\t\tmenus: React.PropTypes.array, //表示menus属性必须是array，否则报错\n\t\tusermenus: React.PropTypes.array, //表示usermenus属性必须是array，否则报错\n},\ngetDefaultProps: function() {\n\treturn { //设置默认属性\n\t\tmenus: [{\n\t\t\ttitle: 'index', //title用于储存路由对应的路径\n\t\t\thref: '/index', //href用于设定该菜单跳转路由\n\t\t\ttext: '首页', //text用于储存该菜单显示名称\n\t\t}, {\n\t\t\ttitle: 'others',\n\t\t\thref: '/other',\n\t\t\ttext: '其他',\n\t\t}],\n\t\t//usermenus用于储存侧边下拉菜单\n\t\tusermenus: [{\n\t\t\tclick: function(){}, //click用于设置该菜单点击事件\n\t\t\ttext: '退出', //text用于储存该菜单显示名称\n\t\t}],\n\t};\n},\n```\n\n### 添加state状态\n像时间这种每500毫秒刷新一次的，我们将其放在state中。\n``` jsx\ngetInitialState: function() {\n\treturn {clock: ''}; //设置初始state值\n},\n//定义clockRender事件，用于改变this.state.clock值\nclockRender: function(){\n\tlet numberStandard = function(num) {\n\t\tlet _val = Number(num), _num;\n\t\t_num = (_val < 10) ? ('0' + _val) : ('' + _val);\n\t\treturn _num;\n\t}, _date = new Date(),\n\t\tclock = _date.getFullYear() + '年' + (_date.getMonth() + 1) + '月' +\n\t\t\t_date.getDate() + '日' + ' ' + numberStandard(_date.getHours()) + ':' + numberStandard(_date.getMinutes()) +\n\t\t\t':' + numberStandard(_date.getSeconds());\n\tthis.setState({clock: clock});\n},\n```\n注意：state不应存储计算后的值，计算应该在render中进行，但由于比较长，本骚年也就这样将就用了。小伙伴们有更好的方法也可以提出来哦。\n\n### setInterval时钟\n在componentDidMount中进行setInterval时钟。componentDidMount属于react生命周期，在初始化渲染执行之后立刻调用一次，仅客户端有效。\nrender就是一个模板的作用，他只处理和展示相关的逻辑，如果有业务逻辑，应放在componentWillMount和componentDidMount中执行。\n``` jsx\n//进行setInterval时钟\ncomponentDidMount: function(){\n\tlet that = this;\t\t\t\n\tthis.interval = setInterval(function() {\n\t\tthat.clockRender();\n\t}, 500);\n},\n//组件注销时需销毁定时器\ncomponentWillUnmount: function(){\n\tclearInterval(this.interval);\n},\n```\n\n### 设置render模板\n在这里大家可以看到react-bootstrap的使用方法啦。当然每个组件都是已经在该文件中引入了的。\n还有jsx的遍历方法也会在这里展示。\n- 在index.jsx页面引入Header时添加属性active=\"index\"，作为菜单选中样式的判断\n``` jsx\nrender() {\n\treturn (\n\t\tlet active = this.props.active; //获取父组件传递的props\n\t\t<Navbar className=\"header\" fluid>\n\t\t\t<Navbar.Header className=\"navbar-header\">\n\t\t\t\t<Navbar.Brand>Godbasin</Navbar.Brand>\n\t\t\t</Navbar.Header>\n\t\t\t<Navbar.Collapse id=\"bs-example-navbar-collapse-1\">\n\t\t\t\t<Nav navbar>     \t\n\t\t\t\t{ //遍历头部菜单menus\n\t\t\t\t\tthis.props.menus.map(function(menu, i) {\n\t\t\t\t\t\t//判断，若title等于active，则加载选中样式\n\t\t\t\t\t\treturn (<li key={i} className={ menu.title == active ? \"active\" : \"\"}><a href={menu.href}>{ menu.text }<span className=\"sr-only\">(current)</span></a></li>);\n\t\t\t\t\t})\n\t\t\t\t}\n\t\t\t\t</Nav>\n\t\t\t\t<Nav navbar pullRight>\n\t\t\t\t\t<li><a>{ this.state.clock }</a></li>\n\t\t\t\t\t<NavDropdown title=\"菜单\" id=\"top-aside-menu\">\n\t\t\t\t\t\t{ //遍历右侧下拉菜单usermenus\n\t\t\t\t\t\t\tthis.props.usermenus.map(function(usermenu,i) {\n\t\t\t\t\t\t\t\treturn (<MenuItem key={i}>{ usermenu.text }</MenuItem>);\n\t\t\t\t\t\t\t})\n\t\t\t\t\t\t}\n\t\t\t\t\t</NavDropdown>\n\t\t\t\t</Nav>\n\t\t\t</Navbar.Collapse>\n\t\t</Navbar>\n\t)\n}\n```\n\n### Index组件中添加Header\n在components文件夹中打开Index.vue文件\n\n``` vue\n<template>\n  <!--使用is绑定组件，current传入prop数据-->\n  <div is=\"my-header\" current=\"index\"></div>\n  <div class=\"container\">Hello Vue!</div>\n</template>\n<script>\n//导入Header组件\nimport MyHeader from './Header.vue'\nexport default {\n  components: {\n    MyHeader\n  }\n}\n</script>\n```\n\n## 结束语\n-----\nVue还是挺好用的呢，文档也写得很全很详细，虽然相应的插件、库等还是比较少，但不得不说从Angular重构还是挺多可以复用的代码呢。\n[此处查看项目代码](https://github.com/godbasin/godbasin.github.io/tree/blog-codes/vue-notes/3-create-header)\n[此处查看页面效果](http://o9zkatzym.bkt.clouddn.com/3-create-header/index.html?#!/index)\n","slug":"vue-notes-3-create-header","published":1,"updated":"2016-09-09T20:33:12.173Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cix45hui4004pxotuvuzs7blv","content":"<p>最近在学习使用Vue作为前端的框架，《Vue使用笔记》系列用于记录过程中的一些使用和解决方法。<br>本文记录Vue组件相关，以及创建头部组件的过程。<br><a id=\"more\"></a></p>\n<p>实话说，在使用过angular以及react之后，vue给本骚年的感觉就是两者的优点结合在一起了呢。</p>\n<h2 id=\"Vue组件\"><a href=\"#Vue组件\" class=\"headerlink\" title=\"Vue组件\"></a>Vue组件</h2><hr>\n<h3 id=\"Vue实例\"><a href=\"#Vue实例\" class=\"headerlink\" title=\"Vue实例\"></a>Vue实例</h3><ul>\n<li>一个Vue实例其实正是一个MVVM模式中所描述的ViewModel</li>\n<li>在实例化Vue时，需要传入一个选项对象，它可以包含数据、模板、挂载元素、方法、生命周期钩子等选项，<a href=\"http://cn.vuejs.org/api/\" target=\"_blank\" rel=\"external\">参考</a></li>\n<li>可以扩展Vue构造器，从而用预定义选项创建可复用的组件构造器</li>\n</ul>\n<h3 id=\"实例生命周期\"><a href=\"#实例生命周期\" class=\"headerlink\" title=\"实例生命周期\"></a>实例生命周期</h3><p>这里简单放个图吧，左侧的红色框框代表具体的生命周期钩子。<br><img src=\"http://o905ne85q.bkt.clouddn.com/lifecycle.png\" alt=\"image\"><br><a href=\"http://cn.vuejs.org/api/#选项-生命周期钩子\" target=\"_blank\" rel=\"external\">官方文档</a>里面有详细的生命周期钩子哦，大家有需要的话可以具体去研究一下。</p>\n<h3 id=\"Vue组件-1\"><a href=\"#Vue组件-1\" class=\"headerlink\" title=\"Vue组件\"></a>Vue组件</h3><p>组件可以扩展HTML元素，封装可重用的代码。在较高层面上，组件是自定义元素，Vue.js的编译器为它添加特殊功能。</p>\n<ul>\n<li>所有的Vue.js组件其实都是被扩展的Vue实例</li>\n<li>Vue 的模板是DOM模板，使用浏览器原生的解析器（React则是自己实现一个）</li>\n<li>Props属性<ul>\n<li>组件实例的作用域是孤立的。可以使用props把数据传给子组件，也可以用v-bind绑定动态Props到父组件的数据</li>\n<li>prop默认是单向绑定，使用.sync或.once绑定修饰符显式地强制双向或单次绑定</li>\n<li>组件可以为 props 指定验证要求（类似React的proptype吧）</li>\n</ul>\n</li>\n<li>动态组件<ul>\n<li>多个组件可以使用同一个挂载点，动态地绑定到它的is特性，在它们之间切换</li>\n<li>keep-alive可以把切换出去的组件保留在内存中，保留它的状态或避免重新渲染</li>\n<li>在切换组件时，切入组件在切入前可能需要进行一些异步操作。使用activate钩子控制组件切换时长</li>\n<li>transition-mode特性用于指定两个动态组件之间如何过渡</li>\n<li>组件当它有name选项时，可以在它的模板内可以递归地调用自己</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"父子组件通信\"><a href=\"#父子组件通信\" class=\"headerlink\" title=\"父子组件通信\"></a>父子组件通信</h3><ul>\n<li><p>使用父链（会使得父组件与子组件紧密地耦合）</p>\n<ul>\n<li>子组件可以用this.$parent访问它的父组件</li>\n<li>根实例的后代可以用this.$root访问它</li>\n<li>父组件有一个数组this.$children，包含它所有的子元素</li>\n</ul>\n</li>\n<li><p>自定义事件（Vue事件在冒泡过程中第一次触发回调之后自动停止冒泡，调用true取消）</p>\n<ul>\n<li>使用$on()监听事件</li>\n<li>使用$emit()在它上面触发事件</li>\n<li>使用$dispatch()派发事件，事件沿着父链冒泡</li>\n<li>使用$broadcast()广播事件，事件向下传导给所有的后代</li>\n</ul>\n</li>\n<li><p>子组件索引</p>\n<ul>\n<li>使用v-ref为子组件指定一个索引ID（类似于React的ref属性）</li>\n</ul>\n</li>\n<li><p>使用 Slot 分发内容</p>\n<ul>\n<li>使用特殊的<slot>元素作为原始内容的插槽（类似Angular的transclusion）</slot></li>\n<li>父组件的内容将被抛弃，除非子组件模板包含 <slot></slot></li>\n<li>如果子组件模板只有一个没有特性的slot，父组件的整个内容将插到slot所在的地方并替换它</li>\n<li><slot>元素可以用一个特殊特性name配置如何分发内容</slot></li>\n</ul>\n</li>\n</ul>\n<h3 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h3><p><a href=\"http://cn.vuejs.org/guide/components.html#使用-Slot-分发内容\" target=\"_blank\" rel=\"external\">《Vue组件》</a></p>\n<h2 id=\"创建头部菜单\"><a href=\"#创建头部菜单\" class=\"headerlink\" title=\"创建头部菜单\"></a>创建头部菜单</h2><hr>\n<p>该头部菜单与前面的使用笔记中一致。如图：<br><img src=\"http://o905ne85q.bkt.clouddn.com/C902.tmp.png\" alt=\"image\"><br>由于Vue中木有找到类似React-Bootstrap一样的库，故这里先直接用bootstrap的样式css文件。</p>\n<h3 id=\"添加头部组件\"><a href=\"#添加头部组件\" class=\"headerlink\" title=\"添加头部组件\"></a>添加头部组件</h3><ul>\n<li>在components文件夹中添加Header.vue文件</li>\n<li>添加模板</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;template&gt;</div><div class=\"line\">&lt;nav class=&quot;navbar navbar-default header&quot;&gt;</div><div class=\"line\">  &lt;div class=&quot;container-fluid&quot;&gt;</div><div class=\"line\">    &lt;div class=&quot;navbar-header&quot;&gt;</div><div class=\"line\">      &lt;a class=&quot;navbar-brand&quot;&gt;Godbasin&lt;/a&gt;</div><div class=\"line\">    &lt;/div&gt;</div><div class=\"line\">    &lt;div class=&quot;collapse navbar-collapse&quot; id=&quot;bs-example-navbar-collapse-1&quot;&gt;</div><div class=\"line\">      &lt;ul class=&quot;nav navbar-nav&quot;&gt;     \t</div><div class=\"line\">        &lt;li v-for=&quot;menu in menus&quot; v-bind:class=&quot;current === menu.title ? &apos;active&apos; : &apos;&apos;&quot;&gt;</div><div class=\"line\">        \t&lt;a href=&quot;&#123;&#123; menu.href &#125;&#125;&quot;&gt;&#123;&#123; menu.text &#125;&#125;&lt;span v-show=&quot;menu.current&quot; class=&quot;sr-only&quot;&gt;(current)&lt;/span&gt;&lt;/a&gt;</div><div class=\"line\">        &lt;/li&gt;</div><div class=\"line\">      &lt;/ul&gt;</div><div class=\"line\">      &lt;ul class=&quot;nav navbar-nav navbar-right&quot;&gt;</div><div class=\"line\">      \t&lt;li&gt;&lt;a&gt;&#123;&#123; clock &#125;&#125;&lt;/a&gt;&lt;/li&gt;</div><div class=\"line\">        &lt;li class=&quot;dropdown&quot;&gt;</div><div class=\"line\">          &lt;a class=&quot;dropdown-toggle&quot; data-toggle=&quot;dropdown&quot; role=&quot;button&quot; aria-haspopup=&quot;true&quot; aria-expanded=&quot;false&quot;&gt;菜单 &lt;span class=&quot;caret&quot;&gt;&lt;/span&gt;&lt;/a&gt;</div><div class=\"line\">          &lt;ul class=&quot;dropdown-menu&quot;&gt;</div><div class=\"line\">            &lt;li v-for=&quot;usermenu in usermenus&quot;&gt;&lt;a href=&quot;&#123;&#123; usermenu.href &#125;&#125;&quot;&gt;&#123;&#123; usermenu.text &#125;&#125;&lt;/a&gt;&lt;/li&gt;</div><div class=\"line\">          &lt;/ul&gt;</div><div class=\"line\">        &lt;/li&gt;</div><div class=\"line\">      &lt;/ul&gt;</div><div class=\"line\">    &lt;/div&gt;</div><div class=\"line\">  &lt;/div&gt;</div><div class=\"line\">&lt;/nav&gt;</div><div class=\"line\">&lt;/template&gt;</div></pre></td></tr></table></figure>\n<ul>\n<li>添加逻辑</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;script&gt;</div><div class=\"line\">export default &#123;</div><div class=\"line\">  data () &#123;</div><div class=\"line\">    return &#123;</div><div class=\"line\">      menus: [&#123;</div><div class=\"line\">        title: &apos;index&apos;, // title用于储存路由对应的路径</div><div class=\"line\">        href: &apos;index.html#/index&apos;, // href用于设定该菜单跳转路由</div><div class=\"line\">        text: &apos;首页&apos; // text用于储存该菜单显示名称</div><div class=\"line\">      &#125;, &#123;</div><div class=\"line\">        title: &apos;other&apos;,</div><div class=\"line\">        href: &apos;index.html#/other&apos;,</div><div class=\"line\">        text: &apos;其他&apos;</div><div class=\"line\">      &#125;],</div><div class=\"line\">      usermenus: [&#123;</div><div class=\"line\">        text: &apos;退出&apos;, // text用于储存该菜单显示名称</div><div class=\"line\">        href: &apos;index.html#/login&apos; // href用于设定该菜单跳转路由</div><div class=\"line\">      &#125;],</div><div class=\"line\">      clock: &apos;&apos; // clock用于储存时间</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;,</div><div class=\"line\">  props: [&apos;current&apos;], // current用于获取当前的位置</div><div class=\"line\">  // 在created生命周期钩子上添加setInterval进行时钟的刷新，当然其他的生命周期钩子也可能适用</div><div class=\"line\">  created: function () &#123;</div><div class=\"line\">    var that = this</div><div class=\"line\">    setInterval(function () &#123;</div><div class=\"line\">      that.clockRender()</div><div class=\"line\">    &#125;, 500)</div><div class=\"line\">  &#125;,</div><div class=\"line\">  // 在 `methods` 对象中定义方法</div><div class=\"line\">  methods: &#123;</div><div class=\"line\">    clockRender: function () &#123; // 刷新时钟</div><div class=\"line\">      var numberStandard = function (num) &#123; // 格式化时间（小于10补上0）</div><div class=\"line\">        var _val = Number(num)</div><div class=\"line\">        var _num</div><div class=\"line\">        _num = (_val &lt; 10) ? (&apos;0&apos; + _val) : (&apos;&apos; + _val)</div><div class=\"line\">        return _num</div><div class=\"line\">      &#125;</div><div class=\"line\">      var _date = new Date() // 获取当前时间</div><div class=\"line\">      this.clock = _date.getFullYear() + &apos;年&apos; + (_date.getMonth() + 1) + &apos;月&apos; +</div><div class=\"line\">        _date.getDate() + &apos;日&apos; + &apos; &apos; + numberStandard(_date.getHours()) + &apos;:&apos; + numberStandard(_date.getMinutes()) +</div><div class=\"line\">        &apos;:&apos; + numberStandard(_date.getSeconds())</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div><div class=\"line\">&lt;/script&gt;</div></pre></td></tr></table></figure>\n<ul>\n<li>添加样式（此处省略）<ul>\n<li>使用<code>&lt;style&gt;</code>添加全局样式</li>\n<li>可使用<code>&lt;style scoped&gt;</code>添加局部样式</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"添加属性Props\"><a href=\"#添加属性Props\" class=\"headerlink\" title=\"添加属性Props\"></a>添加属性Props</h3><p>由于菜单的内容不变，我们可以将其写成Props属性。<br><figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div></pre></td><td class=\"code\"><pre><div class=\"line\">propTypes: &#123; <span class=\"comment\">//属性校验器</span></div><div class=\"line\">    menus: React.PropTypes.array, <span class=\"comment\">//表示menus属性必须是array，否则报错</span></div><div class=\"line\">    usermenus: React.PropTypes.array, <span class=\"comment\">//表示usermenus属性必须是array，否则报错</span></div><div class=\"line\">&#125;,</div><div class=\"line\"><span class=\"attr\">getDefaultProps</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> &#123; <span class=\"comment\">//设置默认属性</span></div><div class=\"line\">    menus: [&#123;</div><div class=\"line\">      <span class=\"attr\">title</span>: <span class=\"string\">'index'</span>, <span class=\"comment\">//title用于储存路由对应的路径</span></div><div class=\"line\">      href: <span class=\"string\">'/index'</span>, <span class=\"comment\">//href用于设定该菜单跳转路由</span></div><div class=\"line\">      text: <span class=\"string\">'首页'</span>, <span class=\"comment\">//text用于储存该菜单显示名称</span></div><div class=\"line\">    &#125;, &#123;</div><div class=\"line\">      <span class=\"attr\">title</span>: <span class=\"string\">'others'</span>,</div><div class=\"line\">      <span class=\"attr\">href</span>: <span class=\"string\">'/other'</span>,</div><div class=\"line\">      <span class=\"attr\">text</span>: <span class=\"string\">'其他'</span>,</div><div class=\"line\">    &#125;],</div><div class=\"line\">    <span class=\"comment\">//usermenus用于储存侧边下拉菜单</span></div><div class=\"line\">    usermenus: [&#123;</div><div class=\"line\">      <span class=\"attr\">click</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;&#125;, <span class=\"comment\">//click用于设置该菜单点击事件</span></div><div class=\"line\">      text: <span class=\"string\">'退出'</span>, <span class=\"comment\">//text用于储存该菜单显示名称</span></div><div class=\"line\">    &#125;],</div><div class=\"line\">  &#125;;</div><div class=\"line\">&#125;,</div></pre></td></tr></table></figure></p>\n<h3 id=\"添加state状态\"><a href=\"#添加state状态\" class=\"headerlink\" title=\"添加state状态\"></a>添加state状态</h3><p>像时间这种每500毫秒刷新一次的，我们将其放在state中。<br><figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\">getInitialState: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> &#123;<span class=\"attr\">clock</span>: <span class=\"string\">''</span>&#125;; <span class=\"comment\">//设置初始state值</span></div><div class=\"line\">&#125;,</div><div class=\"line\"><span class=\"comment\">//定义clockRender事件，用于改变this.state.clock值</span></div><div class=\"line\">clockRender: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">  <span class=\"keyword\">let</span> numberStandard = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">num</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">let</span> _val = <span class=\"built_in\">Number</span>(num), _num;</div><div class=\"line\">    _num = (_val &lt; <span class=\"number\">10</span>) ? (<span class=\"string\">'0'</span> + _val) : (<span class=\"string\">''</span> + _val);</div><div class=\"line\">    <span class=\"keyword\">return</span> _num;</div><div class=\"line\">  &#125;, _date = <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>(),</div><div class=\"line\">    clock = _date.getFullYear() + <span class=\"string\">'年'</span> + (_date.getMonth() + <span class=\"number\">1</span>) + <span class=\"string\">'月'</span> +</div><div class=\"line\">      _date.getDate() + <span class=\"string\">'日'</span> + <span class=\"string\">' '</span> + numberStandard(_date.getHours()) + <span class=\"string\">':'</span> + numberStandard(_date.getMinutes()) +</div><div class=\"line\">      <span class=\"string\">':'</span> + numberStandard(_date.getSeconds());</div><div class=\"line\">  <span class=\"keyword\">this</span>.setState(&#123;<span class=\"attr\">clock</span>: clock&#125;);</div><div class=\"line\">&#125;,</div></pre></td></tr></table></figure></p>\n<p>注意：state不应存储计算后的值，计算应该在render中进行，但由于比较长，本骚年也就这样将就用了。小伙伴们有更好的方法也可以提出来哦。</p>\n<h3 id=\"setInterval时钟\"><a href=\"#setInterval时钟\" class=\"headerlink\" title=\"setInterval时钟\"></a>setInterval时钟</h3><p>在componentDidMount中进行setInterval时钟。componentDidMount属于react生命周期，在初始化渲染执行之后立刻调用一次，仅客户端有效。<br>render就是一个模板的作用，他只处理和展示相关的逻辑，如果有业务逻辑，应放在componentWillMount和componentDidMount中执行。<br><figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//进行setInterval时钟</span></div><div class=\"line\">componentDidMount: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">  <span class=\"keyword\">let</span> that = <span class=\"keyword\">this</span>;\t\t\t</div><div class=\"line\">  <span class=\"keyword\">this</span>.interval = setInterval(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    that.clockRender();</div><div class=\"line\">  &#125;, <span class=\"number\">500</span>);</div><div class=\"line\">&#125;,</div><div class=\"line\"><span class=\"comment\">//组件注销时需销毁定时器</span></div><div class=\"line\">componentWillUnmount: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">  clearInterval(<span class=\"keyword\">this</span>.interval);</div><div class=\"line\">&#125;,</div></pre></td></tr></table></figure></p>\n<h3 id=\"设置render模板\"><a href=\"#设置render模板\" class=\"headerlink\" title=\"设置render模板\"></a>设置render模板</h3><p>在这里大家可以看到react-bootstrap的使用方法啦。当然每个组件都是已经在该文件中引入了的。<br>还有jsx的遍历方法也会在这里展示。</p>\n<ul>\n<li>在index.jsx页面引入Header时添加属性active=”index”，作为菜单选中样式的判断<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div></pre></td><td class=\"code\"><pre><div class=\"line\">render() &#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> (</div><div class=\"line\">    <span class=\"keyword\">let</span> active = <span class=\"keyword\">this</span>.props.active; <span class=\"comment\">//获取父组件传递的props</span></div><div class=\"line\">    &lt;Navbar className=<span class=\"string\">\"header\"</span> fluid&gt;</div><div class=\"line\">      &lt;Navbar.Header className=\"navbar-header\"&gt;</div><div class=\"line\">        &lt;Navbar.Brand&gt;Godbasin&lt;/Navbar.Brand&gt;</div><div class=\"line\">      &lt;/Navbar.Header&gt;</div><div class=\"line\">      &lt;Navbar.Collapse id=\"bs-example-navbar-collapse-1\"&gt;</div><div class=\"line\">        &lt;Nav navbar&gt;     \t</div><div class=\"line\">        &#123; //遍历头部菜单menus</div><div class=\"line\">          this.props.menus.map(function(menu, i) &#123;</div><div class=\"line\">            //判断，若title等于active，则加载选中样式</div><div class=\"line\">            return (&lt;li key=&#123;i&#125; className=&#123; menu.title == active ? \"active\" : \"\"&#125;&gt;&lt;a href=&#123;menu.href&#125;&gt;&#123; menu.text &#125;&lt;span className=\"sr-only\"&gt;(current)&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;);</div><div class=\"line\">          &#125;)</div><div class=\"line\">        &#125;</div><div class=\"line\">        &lt;/Nav&gt;</div><div class=\"line\">        &lt;Nav navbar pullRight&gt;</div><div class=\"line\">          &lt;li&gt;&lt;a&gt;&#123; this.state.clock &#125;&lt;/a&gt;&lt;/li&gt;</div><div class=\"line\">          &lt;NavDropdown title=\"菜单\" id=\"top-aside-menu\"&gt;</div><div class=\"line\">            &#123; //遍历右侧下拉菜单usermenus</div><div class=\"line\">              this.props.usermenus.map(function(usermenu,i) &#123;</div><div class=\"line\">                return (&lt;MenuItem key=&#123;i&#125;&gt;&#123; usermenu.text &#125;&lt;/MenuItem&gt;);</div><div class=\"line\">              &#125;)</div><div class=\"line\">            &#125;</div><div class=\"line\">          &lt;/NavDropdown&gt;</div><div class=\"line\">        &lt;/Nav&gt;</div><div class=\"line\">      &lt;/Navbar.Collapse&gt;</div><div class=\"line\">    &lt;/Navbar&gt;</div><div class=\"line\">  )</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3 id=\"Index组件中添加Header\"><a href=\"#Index组件中添加Header\" class=\"headerlink\" title=\"Index组件中添加Header\"></a>Index组件中添加Header</h3><p>在components文件夹中打开Index.vue文件</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;template&gt;</div><div class=\"line\">  &lt;!--使用is绑定组件，current传入prop数据--&gt;</div><div class=\"line\">  &lt;div is=&quot;my-header&quot; current=&quot;index&quot;&gt;&lt;/div&gt;</div><div class=\"line\">  &lt;div class=&quot;container&quot;&gt;Hello Vue!&lt;/div&gt;</div><div class=\"line\">&lt;/template&gt;</div><div class=\"line\">&lt;script&gt;</div><div class=\"line\">//导入Header组件</div><div class=\"line\">import MyHeader from &apos;./Header.vue&apos;</div><div class=\"line\">export default &#123;</div><div class=\"line\">  components: &#123;</div><div class=\"line\">    MyHeader</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div><div class=\"line\">&lt;/script&gt;</div></pre></td></tr></table></figure>\n<h2 id=\"结束语\"><a href=\"#结束语\" class=\"headerlink\" title=\"结束语\"></a>结束语</h2><hr>\n<p>Vue还是挺好用的呢，文档也写得很全很详细，虽然相应的插件、库等还是比较少，但不得不说从Angular重构还是挺多可以复用的代码呢。<br><a href=\"https://github.com/godbasin/godbasin.github.io/tree/blog-codes/vue-notes/3-create-header\" target=\"_blank\" rel=\"external\">此处查看项目代码</a><br><a href=\"http://o9zkatzym.bkt.clouddn.com/3-create-header/index.html?#!/index\" target=\"_blank\" rel=\"external\">此处查看页面效果</a></p>\n","excerpt":"<p>最近在学习使用Vue作为前端的框架，《Vue使用笔记》系列用于记录过程中的一些使用和解决方法。<br>本文记录Vue组件相关，以及创建头部组件的过程。<br>","more":"</p>\n<p>实话说，在使用过angular以及react之后，vue给本骚年的感觉就是两者的优点结合在一起了呢。</p>\n<h2 id=\"Vue组件\"><a href=\"#Vue组件\" class=\"headerlink\" title=\"Vue组件\"></a>Vue组件</h2><hr>\n<h3 id=\"Vue实例\"><a href=\"#Vue实例\" class=\"headerlink\" title=\"Vue实例\"></a>Vue实例</h3><ul>\n<li>一个Vue实例其实正是一个MVVM模式中所描述的ViewModel</li>\n<li>在实例化Vue时，需要传入一个选项对象，它可以包含数据、模板、挂载元素、方法、生命周期钩子等选项，<a href=\"http://cn.vuejs.org/api/\">参考</a></li>\n<li>可以扩展Vue构造器，从而用预定义选项创建可复用的组件构造器</li>\n</ul>\n<h3 id=\"实例生命周期\"><a href=\"#实例生命周期\" class=\"headerlink\" title=\"实例生命周期\"></a>实例生命周期</h3><p>这里简单放个图吧，左侧的红色框框代表具体的生命周期钩子。<br><img src=\"http://o905ne85q.bkt.clouddn.com/lifecycle.png\" alt=\"image\"><br><a href=\"http://cn.vuejs.org/api/#选项-生命周期钩子\">官方文档</a>里面有详细的生命周期钩子哦，大家有需要的话可以具体去研究一下。</p>\n<h3 id=\"Vue组件-1\"><a href=\"#Vue组件-1\" class=\"headerlink\" title=\"Vue组件\"></a>Vue组件</h3><p>组件可以扩展HTML元素，封装可重用的代码。在较高层面上，组件是自定义元素，Vue.js的编译器为它添加特殊功能。</p>\n<ul>\n<li>所有的Vue.js组件其实都是被扩展的Vue实例</li>\n<li>Vue 的模板是DOM模板，使用浏览器原生的解析器（React则是自己实现一个）</li>\n<li>Props属性<ul>\n<li>组件实例的作用域是孤立的。可以使用props把数据传给子组件，也可以用v-bind绑定动态Props到父组件的数据</li>\n<li>prop默认是单向绑定，使用.sync或.once绑定修饰符显式地强制双向或单次绑定</li>\n<li>组件可以为 props 指定验证要求（类似React的proptype吧）</li>\n</ul>\n</li>\n<li>动态组件<ul>\n<li>多个组件可以使用同一个挂载点，动态地绑定到它的is特性，在它们之间切换</li>\n<li>keep-alive可以把切换出去的组件保留在内存中，保留它的状态或避免重新渲染</li>\n<li>在切换组件时，切入组件在切入前可能需要进行一些异步操作。使用activate钩子控制组件切换时长</li>\n<li>transition-mode特性用于指定两个动态组件之间如何过渡</li>\n<li>组件当它有name选项时，可以在它的模板内可以递归地调用自己</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"父子组件通信\"><a href=\"#父子组件通信\" class=\"headerlink\" title=\"父子组件通信\"></a>父子组件通信</h3><ul>\n<li><p>使用父链（会使得父组件与子组件紧密地耦合）</p>\n<ul>\n<li>子组件可以用this.$parent访问它的父组件</li>\n<li>根实例的后代可以用this.$root访问它</li>\n<li>父组件有一个数组this.$children，包含它所有的子元素</li>\n</ul>\n</li>\n<li><p>自定义事件（Vue事件在冒泡过程中第一次触发回调之后自动停止冒泡，调用true取消）</p>\n<ul>\n<li>使用$on()监听事件</li>\n<li>使用$emit()在它上面触发事件</li>\n<li>使用$dispatch()派发事件，事件沿着父链冒泡</li>\n<li>使用$broadcast()广播事件，事件向下传导给所有的后代</li>\n</ul>\n</li>\n<li><p>子组件索引</p>\n<ul>\n<li>使用v-ref为子组件指定一个索引ID（类似于React的ref属性）</li>\n</ul>\n</li>\n<li><p>使用 Slot 分发内容</p>\n<ul>\n<li>使用特殊的<slot>元素作为原始内容的插槽（类似Angular的transclusion）</li>\n<li>父组件的内容将被抛弃，除非子组件模板包含 <slot></li>\n<li>如果子组件模板只有一个没有特性的slot，父组件的整个内容将插到slot所在的地方并替换它</li>\n<li><slot>元素可以用一个特殊特性name配置如何分发内容</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h3><p><a href=\"http://cn.vuejs.org/guide/components.html#使用-Slot-分发内容\">《Vue组件》</a></p>\n<h2 id=\"创建头部菜单\"><a href=\"#创建头部菜单\" class=\"headerlink\" title=\"创建头部菜单\"></a>创建头部菜单</h2><hr>\n<p>该头部菜单与前面的使用笔记中一致。如图：<br><img src=\"http://o905ne85q.bkt.clouddn.com/C902.tmp.png\" alt=\"image\"><br>由于Vue中木有找到类似React-Bootstrap一样的库，故这里先直接用bootstrap的样式css文件。</p>\n<h3 id=\"添加头部组件\"><a href=\"#添加头部组件\" class=\"headerlink\" title=\"添加头部组件\"></a>添加头部组件</h3><ul>\n<li>在components文件夹中添加Header.vue文件</li>\n<li>添加模板</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;template&gt;</div><div class=\"line\">&lt;nav class=&quot;navbar navbar-default header&quot;&gt;</div><div class=\"line\">  &lt;div class=&quot;container-fluid&quot;&gt;</div><div class=\"line\">    &lt;div class=&quot;navbar-header&quot;&gt;</div><div class=\"line\">      &lt;a class=&quot;navbar-brand&quot;&gt;Godbasin&lt;/a&gt;</div><div class=\"line\">    &lt;/div&gt;</div><div class=\"line\">    &lt;div class=&quot;collapse navbar-collapse&quot; id=&quot;bs-example-navbar-collapse-1&quot;&gt;</div><div class=\"line\">      &lt;ul class=&quot;nav navbar-nav&quot;&gt;     \t</div><div class=\"line\">        &lt;li v-for=&quot;menu in menus&quot; v-bind:class=&quot;current === menu.title ? &apos;active&apos; : &apos;&apos;&quot;&gt;</div><div class=\"line\">        \t&lt;a href=&quot;&#123;&#123; menu.href &#125;&#125;&quot;&gt;&#123;&#123; menu.text &#125;&#125;&lt;span v-show=&quot;menu.current&quot; class=&quot;sr-only&quot;&gt;(current)&lt;/span&gt;&lt;/a&gt;</div><div class=\"line\">        &lt;/li&gt;</div><div class=\"line\">      &lt;/ul&gt;</div><div class=\"line\">      &lt;ul class=&quot;nav navbar-nav navbar-right&quot;&gt;</div><div class=\"line\">      \t&lt;li&gt;&lt;a&gt;&#123;&#123; clock &#125;&#125;&lt;/a&gt;&lt;/li&gt;</div><div class=\"line\">        &lt;li class=&quot;dropdown&quot;&gt;</div><div class=\"line\">          &lt;a class=&quot;dropdown-toggle&quot; data-toggle=&quot;dropdown&quot; role=&quot;button&quot; aria-haspopup=&quot;true&quot; aria-expanded=&quot;false&quot;&gt;菜单 &lt;span class=&quot;caret&quot;&gt;&lt;/span&gt;&lt;/a&gt;</div><div class=\"line\">          &lt;ul class=&quot;dropdown-menu&quot;&gt;</div><div class=\"line\">            &lt;li v-for=&quot;usermenu in usermenus&quot;&gt;&lt;a href=&quot;&#123;&#123; usermenu.href &#125;&#125;&quot;&gt;&#123;&#123; usermenu.text &#125;&#125;&lt;/a&gt;&lt;/li&gt;</div><div class=\"line\">          &lt;/ul&gt;</div><div class=\"line\">        &lt;/li&gt;</div><div class=\"line\">      &lt;/ul&gt;</div><div class=\"line\">    &lt;/div&gt;</div><div class=\"line\">  &lt;/div&gt;</div><div class=\"line\">&lt;/nav&gt;</div><div class=\"line\">&lt;/template&gt;</div></pre></td></tr></table></figure>\n<ul>\n<li>添加逻辑</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;script&gt;</div><div class=\"line\">export default &#123;</div><div class=\"line\">  data () &#123;</div><div class=\"line\">    return &#123;</div><div class=\"line\">      menus: [&#123;</div><div class=\"line\">        title: &apos;index&apos;, // title用于储存路由对应的路径</div><div class=\"line\">        href: &apos;index.html#/index&apos;, // href用于设定该菜单跳转路由</div><div class=\"line\">        text: &apos;首页&apos; // text用于储存该菜单显示名称</div><div class=\"line\">      &#125;, &#123;</div><div class=\"line\">        title: &apos;other&apos;,</div><div class=\"line\">        href: &apos;index.html#/other&apos;,</div><div class=\"line\">        text: &apos;其他&apos;</div><div class=\"line\">      &#125;],</div><div class=\"line\">      usermenus: [&#123;</div><div class=\"line\">        text: &apos;退出&apos;, // text用于储存该菜单显示名称</div><div class=\"line\">        href: &apos;index.html#/login&apos; // href用于设定该菜单跳转路由</div><div class=\"line\">      &#125;],</div><div class=\"line\">      clock: &apos;&apos; // clock用于储存时间</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;,</div><div class=\"line\">  props: [&apos;current&apos;], // current用于获取当前的位置</div><div class=\"line\">  // 在created生命周期钩子上添加setInterval进行时钟的刷新，当然其他的生命周期钩子也可能适用</div><div class=\"line\">  created: function () &#123;</div><div class=\"line\">    var that = this</div><div class=\"line\">    setInterval(function () &#123;</div><div class=\"line\">      that.clockRender()</div><div class=\"line\">    &#125;, 500)</div><div class=\"line\">  &#125;,</div><div class=\"line\">  // 在 `methods` 对象中定义方法</div><div class=\"line\">  methods: &#123;</div><div class=\"line\">    clockRender: function () &#123; // 刷新时钟</div><div class=\"line\">      var numberStandard = function (num) &#123; // 格式化时间（小于10补上0）</div><div class=\"line\">        var _val = Number(num)</div><div class=\"line\">        var _num</div><div class=\"line\">        _num = (_val &lt; 10) ? (&apos;0&apos; + _val) : (&apos;&apos; + _val)</div><div class=\"line\">        return _num</div><div class=\"line\">      &#125;</div><div class=\"line\">      var _date = new Date() // 获取当前时间</div><div class=\"line\">      this.clock = _date.getFullYear() + &apos;年&apos; + (_date.getMonth() + 1) + &apos;月&apos; +</div><div class=\"line\">        _date.getDate() + &apos;日&apos; + &apos; &apos; + numberStandard(_date.getHours()) + &apos;:&apos; + numberStandard(_date.getMinutes()) +</div><div class=\"line\">        &apos;:&apos; + numberStandard(_date.getSeconds())</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div><div class=\"line\">&lt;/script&gt;</div></pre></td></tr></table></figure>\n<ul>\n<li>添加样式（此处省略）<ul>\n<li>使用<code>&lt;style&gt;</code>添加全局样式</li>\n<li>可使用<code>&lt;style scoped&gt;</code>添加局部样式</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"添加属性Props\"><a href=\"#添加属性Props\" class=\"headerlink\" title=\"添加属性Props\"></a>添加属性Props</h3><p>由于菜单的内容不变，我们可以将其写成Props属性。<br><figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div></pre></td><td class=\"code\"><pre><div class=\"line\">propTypes: &#123; <span class=\"comment\">//属性校验器</span></div><div class=\"line\">    menus: React.PropTypes.array, <span class=\"comment\">//表示menus属性必须是array，否则报错</span></div><div class=\"line\">    usermenus: React.PropTypes.array, <span class=\"comment\">//表示usermenus属性必须是array，否则报错</span></div><div class=\"line\">&#125;,</div><div class=\"line\"><span class=\"attr\">getDefaultProps</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> &#123; <span class=\"comment\">//设置默认属性</span></div><div class=\"line\">    menus: [&#123;</div><div class=\"line\">      <span class=\"attr\">title</span>: <span class=\"string\">'index'</span>, <span class=\"comment\">//title用于储存路由对应的路径</span></div><div class=\"line\">      href: <span class=\"string\">'/index'</span>, <span class=\"comment\">//href用于设定该菜单跳转路由</span></div><div class=\"line\">      text: <span class=\"string\">'首页'</span>, <span class=\"comment\">//text用于储存该菜单显示名称</span></div><div class=\"line\">    &#125;, &#123;</div><div class=\"line\">      <span class=\"attr\">title</span>: <span class=\"string\">'others'</span>,</div><div class=\"line\">      <span class=\"attr\">href</span>: <span class=\"string\">'/other'</span>,</div><div class=\"line\">      <span class=\"attr\">text</span>: <span class=\"string\">'其他'</span>,</div><div class=\"line\">    &#125;],</div><div class=\"line\">    <span class=\"comment\">//usermenus用于储存侧边下拉菜单</span></div><div class=\"line\">    usermenus: [&#123;</div><div class=\"line\">      <span class=\"attr\">click</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;&#125;, <span class=\"comment\">//click用于设置该菜单点击事件</span></div><div class=\"line\">      text: <span class=\"string\">'退出'</span>, <span class=\"comment\">//text用于储存该菜单显示名称</span></div><div class=\"line\">    &#125;],</div><div class=\"line\">  &#125;;</div><div class=\"line\">&#125;,</div></pre></td></tr></table></figure></p>\n<h3 id=\"添加state状态\"><a href=\"#添加state状态\" class=\"headerlink\" title=\"添加state状态\"></a>添加state状态</h3><p>像时间这种每500毫秒刷新一次的，我们将其放在state中。<br><figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\">getInitialState: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> &#123;<span class=\"attr\">clock</span>: <span class=\"string\">''</span>&#125;; <span class=\"comment\">//设置初始state值</span></div><div class=\"line\">&#125;,</div><div class=\"line\"><span class=\"comment\">//定义clockRender事件，用于改变this.state.clock值</span></div><div class=\"line\">clockRender: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">  <span class=\"keyword\">let</span> numberStandard = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">num</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">let</span> _val = <span class=\"built_in\">Number</span>(num), _num;</div><div class=\"line\">    _num = (_val &lt; <span class=\"number\">10</span>) ? (<span class=\"string\">'0'</span> + _val) : (<span class=\"string\">''</span> + _val);</div><div class=\"line\">    <span class=\"keyword\">return</span> _num;</div><div class=\"line\">  &#125;, _date = <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>(),</div><div class=\"line\">    clock = _date.getFullYear() + <span class=\"string\">'年'</span> + (_date.getMonth() + <span class=\"number\">1</span>) + <span class=\"string\">'月'</span> +</div><div class=\"line\">      _date.getDate() + <span class=\"string\">'日'</span> + <span class=\"string\">' '</span> + numberStandard(_date.getHours()) + <span class=\"string\">':'</span> + numberStandard(_date.getMinutes()) +</div><div class=\"line\">      <span class=\"string\">':'</span> + numberStandard(_date.getSeconds());</div><div class=\"line\">  <span class=\"keyword\">this</span>.setState(&#123;<span class=\"attr\">clock</span>: clock&#125;);</div><div class=\"line\">&#125;,</div></pre></td></tr></table></figure></p>\n<p>注意：state不应存储计算后的值，计算应该在render中进行，但由于比较长，本骚年也就这样将就用了。小伙伴们有更好的方法也可以提出来哦。</p>\n<h3 id=\"setInterval时钟\"><a href=\"#setInterval时钟\" class=\"headerlink\" title=\"setInterval时钟\"></a>setInterval时钟</h3><p>在componentDidMount中进行setInterval时钟。componentDidMount属于react生命周期，在初始化渲染执行之后立刻调用一次，仅客户端有效。<br>render就是一个模板的作用，他只处理和展示相关的逻辑，如果有业务逻辑，应放在componentWillMount和componentDidMount中执行。<br><figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//进行setInterval时钟</span></div><div class=\"line\">componentDidMount: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">  <span class=\"keyword\">let</span> that = <span class=\"keyword\">this</span>;\t\t\t</div><div class=\"line\">  <span class=\"keyword\">this</span>.interval = setInterval(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    that.clockRender();</div><div class=\"line\">  &#125;, <span class=\"number\">500</span>);</div><div class=\"line\">&#125;,</div><div class=\"line\"><span class=\"comment\">//组件注销时需销毁定时器</span></div><div class=\"line\">componentWillUnmount: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">  clearInterval(<span class=\"keyword\">this</span>.interval);</div><div class=\"line\">&#125;,</div></pre></td></tr></table></figure></p>\n<h3 id=\"设置render模板\"><a href=\"#设置render模板\" class=\"headerlink\" title=\"设置render模板\"></a>设置render模板</h3><p>在这里大家可以看到react-bootstrap的使用方法啦。当然每个组件都是已经在该文件中引入了的。<br>还有jsx的遍历方法也会在这里展示。</p>\n<ul>\n<li>在index.jsx页面引入Header时添加属性active=”index”，作为菜单选中样式的判断<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div></pre></td><td class=\"code\"><pre><div class=\"line\">render() &#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> (</div><div class=\"line\">    <span class=\"keyword\">let</span> active = <span class=\"keyword\">this</span>.props.active; <span class=\"comment\">//获取父组件传递的props</span></div><div class=\"line\">    &lt;Navbar className=<span class=\"string\">\"header\"</span> fluid&gt;</div><div class=\"line\">      &lt;Navbar.Header className=\"navbar-header\"&gt;</div><div class=\"line\">        &lt;Navbar.Brand&gt;Godbasin&lt;/Navbar.Brand&gt;</div><div class=\"line\">      &lt;/Navbar.Header&gt;</div><div class=\"line\">      &lt;Navbar.Collapse id=\"bs-example-navbar-collapse-1\"&gt;</div><div class=\"line\">        &lt;Nav navbar&gt;     \t</div><div class=\"line\">        &#123; //遍历头部菜单menus</div><div class=\"line\">          this.props.menus.map(function(menu, i) &#123;</div><div class=\"line\">            //判断，若title等于active，则加载选中样式</div><div class=\"line\">            return (&lt;li key=&#123;i&#125; className=&#123; menu.title == active ? \"active\" : \"\"&#125;&gt;&lt;a href=&#123;menu.href&#125;&gt;&#123; menu.text &#125;&lt;span className=\"sr-only\"&gt;(current)&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;);</div><div class=\"line\">          &#125;)</div><div class=\"line\">        &#125;</div><div class=\"line\">        &lt;/Nav&gt;</div><div class=\"line\">        &lt;Nav navbar pullRight&gt;</div><div class=\"line\">          &lt;li&gt;&lt;a&gt;&#123; this.state.clock &#125;&lt;/a&gt;&lt;/li&gt;</div><div class=\"line\">          &lt;NavDropdown title=\"菜单\" id=\"top-aside-menu\"&gt;</div><div class=\"line\">            &#123; //遍历右侧下拉菜单usermenus</div><div class=\"line\">              this.props.usermenus.map(function(usermenu,i) &#123;</div><div class=\"line\">                return (&lt;MenuItem key=&#123;i&#125;&gt;&#123; usermenu.text &#125;&lt;/MenuItem&gt;);</div><div class=\"line\">              &#125;)</div><div class=\"line\">            &#125;</div><div class=\"line\">          &lt;/NavDropdown&gt;</div><div class=\"line\">        &lt;/Nav&gt;</div><div class=\"line\">      &lt;/Navbar.Collapse&gt;</div><div class=\"line\">    &lt;/Navbar&gt;</div><div class=\"line\">  )</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3 id=\"Index组件中添加Header\"><a href=\"#Index组件中添加Header\" class=\"headerlink\" title=\"Index组件中添加Header\"></a>Index组件中添加Header</h3><p>在components文件夹中打开Index.vue文件</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;template&gt;</div><div class=\"line\">  &lt;!--使用is绑定组件，current传入prop数据--&gt;</div><div class=\"line\">  &lt;div is=&quot;my-header&quot; current=&quot;index&quot;&gt;&lt;/div&gt;</div><div class=\"line\">  &lt;div class=&quot;container&quot;&gt;Hello Vue!&lt;/div&gt;</div><div class=\"line\">&lt;/template&gt;</div><div class=\"line\">&lt;script&gt;</div><div class=\"line\">//导入Header组件</div><div class=\"line\">import MyHeader from &apos;./Header.vue&apos;</div><div class=\"line\">export default &#123;</div><div class=\"line\">  components: &#123;</div><div class=\"line\">    MyHeader</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div><div class=\"line\">&lt;/script&gt;</div></pre></td></tr></table></figure>\n<h2 id=\"结束语\"><a href=\"#结束语\" class=\"headerlink\" title=\"结束语\"></a>结束语</h2><hr>\n<p>Vue还是挺好用的呢，文档也写得很全很详细，虽然相应的插件、库等还是比较少，但不得不说从Angular重构还是挺多可以复用的代码呢。<br><a href=\"https://github.com/godbasin/godbasin.github.io/tree/blog-codes/vue-notes/3-create-header\">此处查看项目代码</a><br><a href=\"http://o9zkatzym.bkt.clouddn.com/3-create-header/index.html?#!/index\">此处查看页面效果</a></p>"},{"title":"Vue使用笔记4--Vue事件、过渡和制作index页面","date":"2016-09-11T03:01:02.000Z","_content":"最近在学习使用Vue作为前端的框架，《Vue使用笔记》系列用于记录过程中的一些使用和解决方法。\n本文简单介绍vue的过渡效果，以及记录制作首页的过程。\n<!--more-->\n## Vue事件\n-----\n### 方法处理器\n- 可以用v-on指令监听DOM事件\n- 类似于内联表达式，事件处理器限制为一个语句\n- 当一个ViewModel被销毁时，所有的事件处理器都会自动被删除\n- 有时也需要在内联语句处理器中访问原生DOM事件，可以用特殊变量$event把它传入方法\n\n``` vue\n<button v-on:click=\"say('hello!', $event)\">Submit</button>\n```\n\n### 事件修饰符\nVue封装了常用的事件处理：\n- .prevent： event.preventDefault()\n- .stop： event.stopPropagation()\n\n### 按键修饰符\n在监听键盘事件时，我们经常需要检测keyCode。\n\n``` vue\n<input v-on:keyup.13=\"submit\">\n```\n\n## Vue过渡\n-----\n通过Vue.js的过渡系统，可以在元素从DOM中插入或移除时自动应用过渡效果。\nVue.js会在适当的时机为你触发CSS过渡或动画，你也可以提供相应的JavaScript钩子函数在过渡过程中执行自定义的DOM操作。\n\n### 使用过渡\n在目标元素上使用transition特性。transition 特性可以与下面资源一起用：\n- v-if\n- v-show\n- v-for（只在插入和删除时触发，使用vue-animated-list插件）\n- 动态组件（is和切换组件）\n- 在组件的根节点上，并且被Vue实例DOM方法（如 vm.$appendTo(el)）触发\n\n当插入或删除带有过渡的元素时，Vue 将：\n1. 尝试查找JavaScript过渡钩子对象——通过Vue.transition(id, hooks)或transitions选项注册，将在过渡的不同阶段调用相应的钩子。\n2. 自动嗅探目标元素是否有CSS过渡或动画，并在合适时添加/删除CSS类名。\n3. 如果没有找到JavaScript钩子并且也没有检测到CSS过渡/动画，DOM操作（插入/删除）在下一帧中立即执行。\n\n### CSS过渡\n- 过渡的CSS类名\n  - .name-transition: 始终保留在元素上\n  - .name-enter: 定义进入过渡的开始状态。只应用一帧然后立即删除\n  - .name-leave: 定义离开过渡的结束状态。在离开过渡开始时生效，在它结束后删除\n当然配合css3的帧动画效果会更好。\n\n我们这里的菜单展开/收起用的CSS过渡。\n- 在目标元素上使用transition特性\n\n``` html\n<li v-for=\"item in menu.menus\" v-show=\"menu.show\" transition=\"staggered\">{{ item.text }}</li>\n```\n\n- 为.staggered-transition，.staggered-enter和.staggered-leave添加CSS规则:\n\n``` css\n.staggered-transition {\n    transition: all .2s ease-in-out;\n    overflow: hidden;\n    margin: 0;\n    height: 50px;\n}\n.staggered-enter, .staggered-leave {\n    height: 0px;\n    opacity: 0;\n    padding: 0;\n}\n```\n\n### JavaScript过渡\n可以只使用JavaScript钩子，不用定义任何CSS规则。\n当只使用JavaScript过渡时，enter和leave钩子需要调用done回调，否则它们将被同步调用，过渡将立即结束。\n``` javascript\nVue.transition('fade', {\n  css: false, // Vue.js将跳过CSS检测\n  enter: function (el, done) {\n    // 元素已被插入 DOM\n    // 在动画结束后调用 done\n    $(el)\n      .css('opacity', 0)\n      .animate({ opacity: 1 }, 1000, done)\n  },\n  enterCancelled: function (el) {\n    $(el).stop()\n  },\n  leave: function (el, done) {\n    // 与 enter 相同\n    $(el).animate({ opacity: 0 }, 1000, done)\n  },\n  leaveCancelled: function (el) {\n    $(el).stop()\n  }\n})\n```\n然后用在transition特性中。\n\n### 渐近过渡\ntransition与v-for一起用时可以创建渐近过渡。\n- 给过渡元素添加一个特性stagger，enter-stagger或 eave-stagger\n\n``` html\n<!--每个过渡项目增加100ms延时-->\n<div v-for=\"item in list\" transition=\"stagger\" stagger=\"100\"></div>\n```\n\n- 提供一个钩子stagger, enter-stagger或leave-stagger，以更好的控制\n\n``` javascript\nVue.transition('stagger', {\n  stagger: function (index) {\n    // 每个过渡项目增加50ms延时\n    // 但是最大延时限制为300ms\n    return Math.min(300, index * 50)\n  }\n})\n```\n\n## 制作index页面\n-----\n页面结构如下：\n![image](http://o905ne85q.bkt.clouddn.com/F3A2.tmp.png)\n\n### 添加模板\n这里使用了上一节创建的头部组件，在component属性中引入。\n``` html\n<template>\n  <div is=\"my-header\" current=\"index\"></div><!--使用is绑定组件，current传入prop数据-->\n  <div class=\"container-fluid row\">\n\t<aside class=\"col-md-2  col-md-offset-1\" id=\"according\">\n\t\t<div class=\"panel-group\" id=\"accordion\" role=\"tablist\" aria-multiselectable=\"true\">\n\t\t\t<div class=\"panel panel-default list-group\" v-for=\"menu in asidemenus\">\n\t\t\t\t<div class=\"panel-heading\" role=\"tab\">\n\t\t\t\t\t<ul class=\"panel-title \">\n\t\t\t\t\t\t<li data-toggle=\"collapse\" v-on:click=\"toggleContent($index)\">\n\t\t\t\t\t\t\t{{ menu.title }}\n\t\t\t\t\t\t</li>\n\t\t\t\t\t</ul>\n\t\t\t\t</div>\n\t\t\t\t<div class=\"panel-collapse collapse in\">\n\t\t\t\t\t<ul class=\"list-group\">\n\t\t\t\t\t\t<li v-for=\"item in menu.menus\" v-show=\"menu.show\" transition=\"staggered\" class=\"list-group-item\" role=\"button\" v-on:click.stop=\"changeLoading(item.click)\">{{ item.text }}</li>\n\t\t\t\t\t</ul>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t</div>\n\t</aside>\n\t<article class=\"col-md-7\">\n\t\t<section class=\"index-content\">\n\t\t\t<p v-show=\"loading === 'init' || loading === 'name'\">昵称：被删</p>\n\t\t\t<p v-show=\"loading === 'init' || loading === 'email'\">邮箱：wangbeishan@163.com</p>\n\t\t\t<p v-show=\"loading === 'init' || loading === 'github'\">github: <a href=\"https://github.com/godbasin\">github.com/godbasin</a></p>\n\t\t\t<div v-show=\"loading === 'sethead'\">这里是修改头像页面</div>\n\t\t\t<div v-show=\"loading === 'setinfo'\">这里是修改资料页面</div>\n\t\t\t<div v-show=\"loading === 'other'\">这里是其他页面</div>\n\t\t</section>\n\t</article>\n</div>\n</template>\n```\n\n### 添加Vue组件\n``` javascript\n<script>\n// 导入Header组件\nimport MyHeader from './Header.vue'\nexport default {\n  components: { // 导入Header组件\n    MyHeader\n  },\n  data () {\n    return {\n      loading: 'init',\n      asidemenus: [{\n        title: '基本资料', // title用于储存该菜单显示名称\n        click: 'init', // click用于储存该菜单对应点击时loading的状态值\n        show: true, // show用于保存菜单是否隐藏的状态\n        menus: [{\n          text: '名字', // title用于储存该菜单显示名称\n          click: 'name' // click用于储存该菜单对应点击时loading的状态值\n        }, {\n          text: '邮箱',\n          click: 'email'\n        }, {\n          text: 'github',\n          click: 'github'\n        }]\n      }, {\n        title: '设置头像',\n        click: 'sethead',\n        show: true\n      }, {\n        title: '修改资料',\n        click: 'setinfo',\n        show: true\n      }, {\n        title: '其他',\n        click: 'other',\n        show: true\n      }]\n    }\n  },\n  // 在 `methods` 对象中定义方法\n  methods: {\n    changeLoading: function (view) { // 更新loading\n      this.loading = view\n    },\n    toggleContent: function (index) { // 过渡菜单效果并更新loading\n      this.asidemenus[index].show = !this.asidemenus[index].show\n      this.changeLoading(this.asidemenus[index].click)\n    }\n  }\n}\n</script>\n```\n\n### 添加样式\n样式包括一些组件的样式，还有过渡css样式，这里就不列出来了。\n\n## 结束语\n-----\n这里我们没有用到bootstrap中的组件，毕竟用Vue过渡很简单的呢。不得不说，Vue的动画过渡做的真的不错，事件的封装也做的很方便呢。\n[此处查看项目代码](https://github.com/godbasin/godbasin.github.io/tree/blog-codes/vue-notes/4-fullfill-index)\n[此处查看页面效果](http://o9zkatzym.bkt.clouddn.com/4-fullfill-index/index.html?#!/index)","source":"_posts/vue-notes-4-fullfill-index.md","raw":"---\ntitle:  Vue使用笔记4--Vue事件、过渡和制作index页面\ndate: 2016-09-11 11:01:02\ncategories: vue八宝粥\ntags: 笔记\n---\n最近在学习使用Vue作为前端的框架，《Vue使用笔记》系列用于记录过程中的一些使用和解决方法。\n本文简单介绍vue的过渡效果，以及记录制作首页的过程。\n<!--more-->\n## Vue事件\n-----\n### 方法处理器\n- 可以用v-on指令监听DOM事件\n- 类似于内联表达式，事件处理器限制为一个语句\n- 当一个ViewModel被销毁时，所有的事件处理器都会自动被删除\n- 有时也需要在内联语句处理器中访问原生DOM事件，可以用特殊变量$event把它传入方法\n\n``` vue\n<button v-on:click=\"say('hello!', $event)\">Submit</button>\n```\n\n### 事件修饰符\nVue封装了常用的事件处理：\n- .prevent： event.preventDefault()\n- .stop： event.stopPropagation()\n\n### 按键修饰符\n在监听键盘事件时，我们经常需要检测keyCode。\n\n``` vue\n<input v-on:keyup.13=\"submit\">\n```\n\n## Vue过渡\n-----\n通过Vue.js的过渡系统，可以在元素从DOM中插入或移除时自动应用过渡效果。\nVue.js会在适当的时机为你触发CSS过渡或动画，你也可以提供相应的JavaScript钩子函数在过渡过程中执行自定义的DOM操作。\n\n### 使用过渡\n在目标元素上使用transition特性。transition 特性可以与下面资源一起用：\n- v-if\n- v-show\n- v-for（只在插入和删除时触发，使用vue-animated-list插件）\n- 动态组件（is和切换组件）\n- 在组件的根节点上，并且被Vue实例DOM方法（如 vm.$appendTo(el)）触发\n\n当插入或删除带有过渡的元素时，Vue 将：\n1. 尝试查找JavaScript过渡钩子对象——通过Vue.transition(id, hooks)或transitions选项注册，将在过渡的不同阶段调用相应的钩子。\n2. 自动嗅探目标元素是否有CSS过渡或动画，并在合适时添加/删除CSS类名。\n3. 如果没有找到JavaScript钩子并且也没有检测到CSS过渡/动画，DOM操作（插入/删除）在下一帧中立即执行。\n\n### CSS过渡\n- 过渡的CSS类名\n  - .name-transition: 始终保留在元素上\n  - .name-enter: 定义进入过渡的开始状态。只应用一帧然后立即删除\n  - .name-leave: 定义离开过渡的结束状态。在离开过渡开始时生效，在它结束后删除\n当然配合css3的帧动画效果会更好。\n\n我们这里的菜单展开/收起用的CSS过渡。\n- 在目标元素上使用transition特性\n\n``` html\n<li v-for=\"item in menu.menus\" v-show=\"menu.show\" transition=\"staggered\">{{ item.text }}</li>\n```\n\n- 为.staggered-transition，.staggered-enter和.staggered-leave添加CSS规则:\n\n``` css\n.staggered-transition {\n    transition: all .2s ease-in-out;\n    overflow: hidden;\n    margin: 0;\n    height: 50px;\n}\n.staggered-enter, .staggered-leave {\n    height: 0px;\n    opacity: 0;\n    padding: 0;\n}\n```\n\n### JavaScript过渡\n可以只使用JavaScript钩子，不用定义任何CSS规则。\n当只使用JavaScript过渡时，enter和leave钩子需要调用done回调，否则它们将被同步调用，过渡将立即结束。\n``` javascript\nVue.transition('fade', {\n  css: false, // Vue.js将跳过CSS检测\n  enter: function (el, done) {\n    // 元素已被插入 DOM\n    // 在动画结束后调用 done\n    $(el)\n      .css('opacity', 0)\n      .animate({ opacity: 1 }, 1000, done)\n  },\n  enterCancelled: function (el) {\n    $(el).stop()\n  },\n  leave: function (el, done) {\n    // 与 enter 相同\n    $(el).animate({ opacity: 0 }, 1000, done)\n  },\n  leaveCancelled: function (el) {\n    $(el).stop()\n  }\n})\n```\n然后用在transition特性中。\n\n### 渐近过渡\ntransition与v-for一起用时可以创建渐近过渡。\n- 给过渡元素添加一个特性stagger，enter-stagger或 eave-stagger\n\n``` html\n<!--每个过渡项目增加100ms延时-->\n<div v-for=\"item in list\" transition=\"stagger\" stagger=\"100\"></div>\n```\n\n- 提供一个钩子stagger, enter-stagger或leave-stagger，以更好的控制\n\n``` javascript\nVue.transition('stagger', {\n  stagger: function (index) {\n    // 每个过渡项目增加50ms延时\n    // 但是最大延时限制为300ms\n    return Math.min(300, index * 50)\n  }\n})\n```\n\n## 制作index页面\n-----\n页面结构如下：\n![image](http://o905ne85q.bkt.clouddn.com/F3A2.tmp.png)\n\n### 添加模板\n这里使用了上一节创建的头部组件，在component属性中引入。\n``` html\n<template>\n  <div is=\"my-header\" current=\"index\"></div><!--使用is绑定组件，current传入prop数据-->\n  <div class=\"container-fluid row\">\n\t<aside class=\"col-md-2  col-md-offset-1\" id=\"according\">\n\t\t<div class=\"panel-group\" id=\"accordion\" role=\"tablist\" aria-multiselectable=\"true\">\n\t\t\t<div class=\"panel panel-default list-group\" v-for=\"menu in asidemenus\">\n\t\t\t\t<div class=\"panel-heading\" role=\"tab\">\n\t\t\t\t\t<ul class=\"panel-title \">\n\t\t\t\t\t\t<li data-toggle=\"collapse\" v-on:click=\"toggleContent($index)\">\n\t\t\t\t\t\t\t{{ menu.title }}\n\t\t\t\t\t\t</li>\n\t\t\t\t\t</ul>\n\t\t\t\t</div>\n\t\t\t\t<div class=\"panel-collapse collapse in\">\n\t\t\t\t\t<ul class=\"list-group\">\n\t\t\t\t\t\t<li v-for=\"item in menu.menus\" v-show=\"menu.show\" transition=\"staggered\" class=\"list-group-item\" role=\"button\" v-on:click.stop=\"changeLoading(item.click)\">{{ item.text }}</li>\n\t\t\t\t\t</ul>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t</div>\n\t</aside>\n\t<article class=\"col-md-7\">\n\t\t<section class=\"index-content\">\n\t\t\t<p v-show=\"loading === 'init' || loading === 'name'\">昵称：被删</p>\n\t\t\t<p v-show=\"loading === 'init' || loading === 'email'\">邮箱：wangbeishan@163.com</p>\n\t\t\t<p v-show=\"loading === 'init' || loading === 'github'\">github: <a href=\"https://github.com/godbasin\">github.com/godbasin</a></p>\n\t\t\t<div v-show=\"loading === 'sethead'\">这里是修改头像页面</div>\n\t\t\t<div v-show=\"loading === 'setinfo'\">这里是修改资料页面</div>\n\t\t\t<div v-show=\"loading === 'other'\">这里是其他页面</div>\n\t\t</section>\n\t</article>\n</div>\n</template>\n```\n\n### 添加Vue组件\n``` javascript\n<script>\n// 导入Header组件\nimport MyHeader from './Header.vue'\nexport default {\n  components: { // 导入Header组件\n    MyHeader\n  },\n  data () {\n    return {\n      loading: 'init',\n      asidemenus: [{\n        title: '基本资料', // title用于储存该菜单显示名称\n        click: 'init', // click用于储存该菜单对应点击时loading的状态值\n        show: true, // show用于保存菜单是否隐藏的状态\n        menus: [{\n          text: '名字', // title用于储存该菜单显示名称\n          click: 'name' // click用于储存该菜单对应点击时loading的状态值\n        }, {\n          text: '邮箱',\n          click: 'email'\n        }, {\n          text: 'github',\n          click: 'github'\n        }]\n      }, {\n        title: '设置头像',\n        click: 'sethead',\n        show: true\n      }, {\n        title: '修改资料',\n        click: 'setinfo',\n        show: true\n      }, {\n        title: '其他',\n        click: 'other',\n        show: true\n      }]\n    }\n  },\n  // 在 `methods` 对象中定义方法\n  methods: {\n    changeLoading: function (view) { // 更新loading\n      this.loading = view\n    },\n    toggleContent: function (index) { // 过渡菜单效果并更新loading\n      this.asidemenus[index].show = !this.asidemenus[index].show\n      this.changeLoading(this.asidemenus[index].click)\n    }\n  }\n}\n</script>\n```\n\n### 添加样式\n样式包括一些组件的样式，还有过渡css样式，这里就不列出来了。\n\n## 结束语\n-----\n这里我们没有用到bootstrap中的组件，毕竟用Vue过渡很简单的呢。不得不说，Vue的动画过渡做的真的不错，事件的封装也做的很方便呢。\n[此处查看项目代码](https://github.com/godbasin/godbasin.github.io/tree/blog-codes/vue-notes/4-fullfill-index)\n[此处查看页面效果](http://o9zkatzym.bkt.clouddn.com/4-fullfill-index/index.html?#!/index)","slug":"vue-notes-4-fullfill-index","published":1,"updated":"2016-09-11T03:01:47.354Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cix45hui6004txotuib0b3ggs","content":"<p>最近在学习使用Vue作为前端的框架，《Vue使用笔记》系列用于记录过程中的一些使用和解决方法。<br>本文简单介绍vue的过渡效果，以及记录制作首页的过程。<br><a id=\"more\"></a></p>\n<h2 id=\"Vue事件\"><a href=\"#Vue事件\" class=\"headerlink\" title=\"Vue事件\"></a>Vue事件</h2><hr>\n<h3 id=\"方法处理器\"><a href=\"#方法处理器\" class=\"headerlink\" title=\"方法处理器\"></a>方法处理器</h3><ul>\n<li>可以用v-on指令监听DOM事件</li>\n<li>类似于内联表达式，事件处理器限制为一个语句</li>\n<li>当一个ViewModel被销毁时，所有的事件处理器都会自动被删除</li>\n<li>有时也需要在内联语句处理器中访问原生DOM事件，可以用特殊变量$event把它传入方法</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;button v-on:click=&quot;say(&apos;hello!&apos;, $event)&quot;&gt;Submit&lt;/button&gt;</div></pre></td></tr></table></figure>\n<h3 id=\"事件修饰符\"><a href=\"#事件修饰符\" class=\"headerlink\" title=\"事件修饰符\"></a>事件修饰符</h3><p>Vue封装了常用的事件处理：</p>\n<ul>\n<li>.prevent： event.preventDefault()</li>\n<li>.stop： event.stopPropagation()</li>\n</ul>\n<h3 id=\"按键修饰符\"><a href=\"#按键修饰符\" class=\"headerlink\" title=\"按键修饰符\"></a>按键修饰符</h3><p>在监听键盘事件时，我们经常需要检测keyCode。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;input v-on:keyup.13=&quot;submit&quot;&gt;</div></pre></td></tr></table></figure>\n<h2 id=\"Vue过渡\"><a href=\"#Vue过渡\" class=\"headerlink\" title=\"Vue过渡\"></a>Vue过渡</h2><hr>\n<p>通过Vue.js的过渡系统，可以在元素从DOM中插入或移除时自动应用过渡效果。<br>Vue.js会在适当的时机为你触发CSS过渡或动画，你也可以提供相应的JavaScript钩子函数在过渡过程中执行自定义的DOM操作。</p>\n<h3 id=\"使用过渡\"><a href=\"#使用过渡\" class=\"headerlink\" title=\"使用过渡\"></a>使用过渡</h3><p>在目标元素上使用transition特性。transition 特性可以与下面资源一起用：</p>\n<ul>\n<li>v-if</li>\n<li>v-show</li>\n<li>v-for（只在插入和删除时触发，使用vue-animated-list插件）</li>\n<li>动态组件（is和切换组件）</li>\n<li>在组件的根节点上，并且被Vue实例DOM方法（如 vm.$appendTo(el)）触发</li>\n</ul>\n<p>当插入或删除带有过渡的元素时，Vue 将：</p>\n<ol>\n<li>尝试查找JavaScript过渡钩子对象——通过Vue.transition(id, hooks)或transitions选项注册，将在过渡的不同阶段调用相应的钩子。</li>\n<li>自动嗅探目标元素是否有CSS过渡或动画，并在合适时添加/删除CSS类名。</li>\n<li>如果没有找到JavaScript钩子并且也没有检测到CSS过渡/动画，DOM操作（插入/删除）在下一帧中立即执行。</li>\n</ol>\n<h3 id=\"CSS过渡\"><a href=\"#CSS过渡\" class=\"headerlink\" title=\"CSS过渡\"></a>CSS过渡</h3><ul>\n<li>过渡的CSS类名<ul>\n<li>.name-transition: 始终保留在元素上</li>\n<li>.name-enter: 定义进入过渡的开始状态。只应用一帧然后立即删除</li>\n<li>.name-leave: 定义离开过渡的结束状态。在离开过渡开始时生效，在它结束后删除<br>当然配合css3的帧动画效果会更好。</li>\n</ul>\n</li>\n</ul>\n<p>我们这里的菜单展开/收起用的CSS过渡。</p>\n<ul>\n<li>在目标元素上使用transition特性</li>\n</ul>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">v-for</span>=<span class=\"string\">\"item in menu.menus\"</span> <span class=\"attr\">v-show</span>=<span class=\"string\">\"menu.show\"</span> <span class=\"attr\">transition</span>=<span class=\"string\">\"staggered\"</span>&gt;</span>&#123;&#123; item.text &#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></div></pre></td></tr></table></figure>\n<ul>\n<li>为.staggered-transition，.staggered-enter和.staggered-leave添加CSS规则:</li>\n</ul>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"selector-class\">.staggered-transition</span> &#123;</div><div class=\"line\">    <span class=\"attribute\">transition</span>: all .<span class=\"number\">2s</span> ease-in-out;</div><div class=\"line\">    <span class=\"attribute\">overflow</span>: hidden;</div><div class=\"line\">    <span class=\"attribute\">margin</span>: <span class=\"number\">0</span>;</div><div class=\"line\">    <span class=\"attribute\">height</span>: <span class=\"number\">50px</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"selector-class\">.staggered-enter</span>, <span class=\"selector-class\">.staggered-leave</span> &#123;</div><div class=\"line\">    <span class=\"attribute\">height</span>: <span class=\"number\">0px</span>;</div><div class=\"line\">    <span class=\"attribute\">opacity</span>: <span class=\"number\">0</span>;</div><div class=\"line\">    <span class=\"attribute\">padding</span>: <span class=\"number\">0</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"JavaScript过渡\"><a href=\"#JavaScript过渡\" class=\"headerlink\" title=\"JavaScript过渡\"></a>JavaScript过渡</h3><p>可以只使用JavaScript钩子，不用定义任何CSS规则。<br>当只使用JavaScript过渡时，enter和leave钩子需要调用done回调，否则它们将被同步调用，过渡将立即结束。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\">Vue.transition(<span class=\"string\">'fade'</span>, &#123;</div><div class=\"line\">  <span class=\"attr\">css</span>: <span class=\"literal\">false</span>, <span class=\"comment\">// Vue.js将跳过CSS检测</span></div><div class=\"line\">  enter: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">el, done</span>) </span>&#123;</div><div class=\"line\">    <span class=\"comment\">// 元素已被插入 DOM</span></div><div class=\"line\">    <span class=\"comment\">// 在动画结束后调用 done</span></div><div class=\"line\">    $(el)</div><div class=\"line\">      .css(<span class=\"string\">'opacity'</span>, <span class=\"number\">0</span>)</div><div class=\"line\">      .animate(&#123; <span class=\"attr\">opacity</span>: <span class=\"number\">1</span> &#125;, <span class=\"number\">1000</span>, done)</div><div class=\"line\">  &#125;,</div><div class=\"line\">  <span class=\"attr\">enterCancelled</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">el</span>) </span>&#123;</div><div class=\"line\">    $(el).stop()</div><div class=\"line\">  &#125;,</div><div class=\"line\">  <span class=\"attr\">leave</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">el, done</span>) </span>&#123;</div><div class=\"line\">    <span class=\"comment\">// 与 enter 相同</span></div><div class=\"line\">    $(el).animate(&#123; <span class=\"attr\">opacity</span>: <span class=\"number\">0</span> &#125;, <span class=\"number\">1000</span>, done)</div><div class=\"line\">  &#125;,</div><div class=\"line\">  <span class=\"attr\">leaveCancelled</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">el</span>) </span>&#123;</div><div class=\"line\">    $(el).stop()</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure></p>\n<p>然后用在transition特性中。</p>\n<h3 id=\"渐近过渡\"><a href=\"#渐近过渡\" class=\"headerlink\" title=\"渐近过渡\"></a>渐近过渡</h3><p>transition与v-for一起用时可以创建渐近过渡。</p>\n<ul>\n<li>给过渡元素添加一个特性stagger，enter-stagger或 eave-stagger</li>\n</ul>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">&lt;!--每个过渡项目增加100ms延时--&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">v-for</span>=<span class=\"string\">\"item in list\"</span> <span class=\"attr\">transition</span>=<span class=\"string\">\"stagger\"</span> <span class=\"attr\">stagger</span>=<span class=\"string\">\"100\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div></pre></td></tr></table></figure>\n<ul>\n<li>提供一个钩子stagger, enter-stagger或leave-stagger，以更好的控制</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">Vue.transition(<span class=\"string\">'stagger'</span>, &#123;</div><div class=\"line\">  <span class=\"attr\">stagger</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">index</span>) </span>&#123;</div><div class=\"line\">    <span class=\"comment\">// 每个过渡项目增加50ms延时</span></div><div class=\"line\">    <span class=\"comment\">// 但是最大延时限制为300ms</span></div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">Math</span>.min(<span class=\"number\">300</span>, index * <span class=\"number\">50</span>)</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<h2 id=\"制作index页面\"><a href=\"#制作index页面\" class=\"headerlink\" title=\"制作index页面\"></a>制作index页面</h2><hr>\n<p>页面结构如下：<br><img src=\"http://o905ne85q.bkt.clouddn.com/F3A2.tmp.png\" alt=\"image\"></p>\n<h3 id=\"添加模板\"><a href=\"#添加模板\" class=\"headerlink\" title=\"添加模板\"></a>添加模板</h3><p>这里使用了上一节创建的头部组件，在component属性中引入。<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">template</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">is</span>=<span class=\"string\">\"my-header\"</span> <span class=\"attr\">current</span>=<span class=\"string\">\"index\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span><span class=\"comment\">&lt;!--使用is绑定组件，current传入prop数据--&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"container-fluid row\"</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">aside</span> <span class=\"attr\">class</span>=<span class=\"string\">\"col-md-2  col-md-offset-1\"</span> <span class=\"attr\">id</span>=<span class=\"string\">\"according\"</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"panel-group\"</span> <span class=\"attr\">id</span>=<span class=\"string\">\"accordion\"</span> <span class=\"attr\">role</span>=<span class=\"string\">\"tablist\"</span> <span class=\"attr\">aria-multiselectable</span>=<span class=\"string\">\"true\"</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"panel panel-default list-group\"</span> <span class=\"attr\">v-for</span>=<span class=\"string\">\"menu in asidemenus\"</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"panel-heading\"</span> <span class=\"attr\">role</span>=<span class=\"string\">\"tab\"</span>&gt;</span></div><div class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">ul</span> <span class=\"attr\">class</span>=<span class=\"string\">\"panel-title \"</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">data-toggle</span>=<span class=\"string\">\"collapse\"</span> <span class=\"attr\">v-on:click</span>=<span class=\"string\">\"toggleContent($index)\"</span>&gt;</span></div><div class=\"line\">              &#123;&#123; menu.title &#125;&#125;</div><div class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></div><div class=\"line\">          <span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"panel-collapse collapse in\"</span>&gt;</span></div><div class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">ul</span> <span class=\"attr\">class</span>=<span class=\"string\">\"list-group\"</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">v-for</span>=<span class=\"string\">\"item in menu.menus\"</span> <span class=\"attr\">v-show</span>=<span class=\"string\">\"menu.show\"</span> <span class=\"attr\">transition</span>=<span class=\"string\">\"staggered\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"list-group-item\"</span> <span class=\"attr\">role</span>=<span class=\"string\">\"button\"</span> <span class=\"attr\">v-on:click.stop</span>=<span class=\"string\">\"changeLoading(item.click)\"</span>&gt;</span>&#123;&#123; item.text &#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></div><div class=\"line\">          <span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">aside</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">article</span> <span class=\"attr\">class</span>=<span class=\"string\">\"col-md-7\"</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">section</span> <span class=\"attr\">class</span>=<span class=\"string\">\"index-content\"</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">v-show</span>=<span class=\"string\">\"loading === 'init' || loading === 'name'\"</span>&gt;</span>昵称：被删<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">v-show</span>=<span class=\"string\">\"loading === 'init' || loading === 'email'\"</span>&gt;</span>邮箱：wangbeishan@163.com<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">v-show</span>=<span class=\"string\">\"loading === 'init' || loading === 'github'\"</span>&gt;</span>github: <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"https://github.com/godbasin\"</span>&gt;</span>github.com/godbasin<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">v-show</span>=<span class=\"string\">\"loading === 'sethead'\"</span>&gt;</span>这里是修改头像页面<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">v-show</span>=<span class=\"string\">\"loading === 'setinfo'\"</span>&gt;</span>这里是修改资料页面<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">v-show</span>=<span class=\"string\">\"loading === 'other'\"</span>&gt;</span>这里是其他页面<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">section</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">article</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<h3 id=\"添加Vue组件\"><a href=\"#添加Vue组件\" class=\"headerlink\" title=\"添加Vue组件\"></a>添加Vue组件</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;script&gt;</div><div class=\"line\"><span class=\"comment\">// 导入Header组件</span></div><div class=\"line\"><span class=\"keyword\">import</span> MyHeader <span class=\"keyword\">from</span> <span class=\"string\">'./Header.vue'</span></div><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</div><div class=\"line\">  <span class=\"attr\">components</span>: &#123; <span class=\"comment\">// 导入Header组件</span></div><div class=\"line\">    MyHeader</div><div class=\"line\">  &#125;,</div><div class=\"line\">  data () &#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> &#123;</div><div class=\"line\">      <span class=\"attr\">loading</span>: <span class=\"string\">'init'</span>,</div><div class=\"line\">      <span class=\"attr\">asidemenus</span>: [&#123;</div><div class=\"line\">        <span class=\"attr\">title</span>: <span class=\"string\">'基本资料'</span>, <span class=\"comment\">// title用于储存该菜单显示名称</span></div><div class=\"line\">        click: <span class=\"string\">'init'</span>, <span class=\"comment\">// click用于储存该菜单对应点击时loading的状态值</span></div><div class=\"line\">        show: <span class=\"literal\">true</span>, <span class=\"comment\">// show用于保存菜单是否隐藏的状态</span></div><div class=\"line\">        menus: [&#123;</div><div class=\"line\">          <span class=\"attr\">text</span>: <span class=\"string\">'名字'</span>, <span class=\"comment\">// title用于储存该菜单显示名称</span></div><div class=\"line\">          click: <span class=\"string\">'name'</span> <span class=\"comment\">// click用于储存该菜单对应点击时loading的状态值</span></div><div class=\"line\">        &#125;, &#123;</div><div class=\"line\">          <span class=\"attr\">text</span>: <span class=\"string\">'邮箱'</span>,</div><div class=\"line\">          <span class=\"attr\">click</span>: <span class=\"string\">'email'</span></div><div class=\"line\">        &#125;, &#123;</div><div class=\"line\">          <span class=\"attr\">text</span>: <span class=\"string\">'github'</span>,</div><div class=\"line\">          <span class=\"attr\">click</span>: <span class=\"string\">'github'</span></div><div class=\"line\">        &#125;]</div><div class=\"line\">      &#125;, &#123;</div><div class=\"line\">        <span class=\"attr\">title</span>: <span class=\"string\">'设置头像'</span>,</div><div class=\"line\">        <span class=\"attr\">click</span>: <span class=\"string\">'sethead'</span>,</div><div class=\"line\">        <span class=\"attr\">show</span>: <span class=\"literal\">true</span></div><div class=\"line\">      &#125;, &#123;</div><div class=\"line\">        <span class=\"attr\">title</span>: <span class=\"string\">'修改资料'</span>,</div><div class=\"line\">        <span class=\"attr\">click</span>: <span class=\"string\">'setinfo'</span>,</div><div class=\"line\">        <span class=\"attr\">show</span>: <span class=\"literal\">true</span></div><div class=\"line\">      &#125;, &#123;</div><div class=\"line\">        <span class=\"attr\">title</span>: <span class=\"string\">'其他'</span>,</div><div class=\"line\">        <span class=\"attr\">click</span>: <span class=\"string\">'other'</span>,</div><div class=\"line\">        <span class=\"attr\">show</span>: <span class=\"literal\">true</span></div><div class=\"line\">      &#125;]</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;,</div><div class=\"line\">  <span class=\"comment\">// 在 `methods` 对象中定义方法</span></div><div class=\"line\">  methods: &#123;</div><div class=\"line\">    <span class=\"attr\">changeLoading</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">view</span>) </span>&#123; <span class=\"comment\">// 更新loading</span></div><div class=\"line\">      <span class=\"keyword\">this</span>.loading = view</div><div class=\"line\">    &#125;,</div><div class=\"line\">    <span class=\"attr\">toggleContent</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">index</span>) </span>&#123; <span class=\"comment\">// 过渡菜单效果并更新loading</span></div><div class=\"line\">      <span class=\"keyword\">this</span>.asidemenus[index].show = !<span class=\"keyword\">this</span>.asidemenus[index].show</div><div class=\"line\">      <span class=\"keyword\">this</span>.changeLoading(<span class=\"keyword\">this</span>.asidemenus[index].click)</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div><div class=\"line\">&lt;<span class=\"regexp\">/script&gt;</span></div></pre></td></tr></table></figure>\n<h3 id=\"添加样式\"><a href=\"#添加样式\" class=\"headerlink\" title=\"添加样式\"></a>添加样式</h3><p>样式包括一些组件的样式，还有过渡css样式，这里就不列出来了。</p>\n<h2 id=\"结束语\"><a href=\"#结束语\" class=\"headerlink\" title=\"结束语\"></a>结束语</h2><hr>\n<p>这里我们没有用到bootstrap中的组件，毕竟用Vue过渡很简单的呢。不得不说，Vue的动画过渡做的真的不错，事件的封装也做的很方便呢。<br><a href=\"https://github.com/godbasin/godbasin.github.io/tree/blog-codes/vue-notes/4-fullfill-index\" target=\"_blank\" rel=\"external\">此处查看项目代码</a><br><a href=\"http://o9zkatzym.bkt.clouddn.com/4-fullfill-index/index.html?#!/index\" target=\"_blank\" rel=\"external\">此处查看页面效果</a></p>\n","excerpt":"<p>最近在学习使用Vue作为前端的框架，《Vue使用笔记》系列用于记录过程中的一些使用和解决方法。<br>本文简单介绍vue的过渡效果，以及记录制作首页的过程。<br>","more":"</p>\n<h2 id=\"Vue事件\"><a href=\"#Vue事件\" class=\"headerlink\" title=\"Vue事件\"></a>Vue事件</h2><hr>\n<h3 id=\"方法处理器\"><a href=\"#方法处理器\" class=\"headerlink\" title=\"方法处理器\"></a>方法处理器</h3><ul>\n<li>可以用v-on指令监听DOM事件</li>\n<li>类似于内联表达式，事件处理器限制为一个语句</li>\n<li>当一个ViewModel被销毁时，所有的事件处理器都会自动被删除</li>\n<li>有时也需要在内联语句处理器中访问原生DOM事件，可以用特殊变量$event把它传入方法</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;button v-on:click=&quot;say(&apos;hello!&apos;, $event)&quot;&gt;Submit&lt;/button&gt;</div></pre></td></tr></table></figure>\n<h3 id=\"事件修饰符\"><a href=\"#事件修饰符\" class=\"headerlink\" title=\"事件修饰符\"></a>事件修饰符</h3><p>Vue封装了常用的事件处理：</p>\n<ul>\n<li>.prevent： event.preventDefault()</li>\n<li>.stop： event.stopPropagation()</li>\n</ul>\n<h3 id=\"按键修饰符\"><a href=\"#按键修饰符\" class=\"headerlink\" title=\"按键修饰符\"></a>按键修饰符</h3><p>在监听键盘事件时，我们经常需要检测keyCode。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;input v-on:keyup.13=&quot;submit&quot;&gt;</div></pre></td></tr></table></figure>\n<h2 id=\"Vue过渡\"><a href=\"#Vue过渡\" class=\"headerlink\" title=\"Vue过渡\"></a>Vue过渡</h2><hr>\n<p>通过Vue.js的过渡系统，可以在元素从DOM中插入或移除时自动应用过渡效果。<br>Vue.js会在适当的时机为你触发CSS过渡或动画，你也可以提供相应的JavaScript钩子函数在过渡过程中执行自定义的DOM操作。</p>\n<h3 id=\"使用过渡\"><a href=\"#使用过渡\" class=\"headerlink\" title=\"使用过渡\"></a>使用过渡</h3><p>在目标元素上使用transition特性。transition 特性可以与下面资源一起用：</p>\n<ul>\n<li>v-if</li>\n<li>v-show</li>\n<li>v-for（只在插入和删除时触发，使用vue-animated-list插件）</li>\n<li>动态组件（is和切换组件）</li>\n<li>在组件的根节点上，并且被Vue实例DOM方法（如 vm.$appendTo(el)）触发</li>\n</ul>\n<p>当插入或删除带有过渡的元素时，Vue 将：</p>\n<ol>\n<li>尝试查找JavaScript过渡钩子对象——通过Vue.transition(id, hooks)或transitions选项注册，将在过渡的不同阶段调用相应的钩子。</li>\n<li>自动嗅探目标元素是否有CSS过渡或动画，并在合适时添加/删除CSS类名。</li>\n<li>如果没有找到JavaScript钩子并且也没有检测到CSS过渡/动画，DOM操作（插入/删除）在下一帧中立即执行。</li>\n</ol>\n<h3 id=\"CSS过渡\"><a href=\"#CSS过渡\" class=\"headerlink\" title=\"CSS过渡\"></a>CSS过渡</h3><ul>\n<li>过渡的CSS类名<ul>\n<li>.name-transition: 始终保留在元素上</li>\n<li>.name-enter: 定义进入过渡的开始状态。只应用一帧然后立即删除</li>\n<li>.name-leave: 定义离开过渡的结束状态。在离开过渡开始时生效，在它结束后删除<br>当然配合css3的帧动画效果会更好。</li>\n</ul>\n</li>\n</ul>\n<p>我们这里的菜单展开/收起用的CSS过渡。</p>\n<ul>\n<li>在目标元素上使用transition特性</li>\n</ul>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">v-for</span>=<span class=\"string\">\"item in menu.menus\"</span> <span class=\"attr\">v-show</span>=<span class=\"string\">\"menu.show\"</span> <span class=\"attr\">transition</span>=<span class=\"string\">\"staggered\"</span>&gt;</span>&#123;&#123; item.text &#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></div></pre></td></tr></table></figure>\n<ul>\n<li>为.staggered-transition，.staggered-enter和.staggered-leave添加CSS规则:</li>\n</ul>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"selector-class\">.staggered-transition</span> &#123;</div><div class=\"line\">    <span class=\"attribute\">transition</span>: all .<span class=\"number\">2s</span> ease-in-out;</div><div class=\"line\">    <span class=\"attribute\">overflow</span>: hidden;</div><div class=\"line\">    <span class=\"attribute\">margin</span>: <span class=\"number\">0</span>;</div><div class=\"line\">    <span class=\"attribute\">height</span>: <span class=\"number\">50px</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"selector-class\">.staggered-enter</span>, <span class=\"selector-class\">.staggered-leave</span> &#123;</div><div class=\"line\">    <span class=\"attribute\">height</span>: <span class=\"number\">0px</span>;</div><div class=\"line\">    <span class=\"attribute\">opacity</span>: <span class=\"number\">0</span>;</div><div class=\"line\">    <span class=\"attribute\">padding</span>: <span class=\"number\">0</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"JavaScript过渡\"><a href=\"#JavaScript过渡\" class=\"headerlink\" title=\"JavaScript过渡\"></a>JavaScript过渡</h3><p>可以只使用JavaScript钩子，不用定义任何CSS规则。<br>当只使用JavaScript过渡时，enter和leave钩子需要调用done回调，否则它们将被同步调用，过渡将立即结束。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\">Vue.transition(<span class=\"string\">'fade'</span>, &#123;</div><div class=\"line\">  <span class=\"attr\">css</span>: <span class=\"literal\">false</span>, <span class=\"comment\">// Vue.js将跳过CSS检测</span></div><div class=\"line\">  enter: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">el, done</span>) </span>&#123;</div><div class=\"line\">    <span class=\"comment\">// 元素已被插入 DOM</span></div><div class=\"line\">    <span class=\"comment\">// 在动画结束后调用 done</span></div><div class=\"line\">    $(el)</div><div class=\"line\">      .css(<span class=\"string\">'opacity'</span>, <span class=\"number\">0</span>)</div><div class=\"line\">      .animate(&#123; <span class=\"attr\">opacity</span>: <span class=\"number\">1</span> &#125;, <span class=\"number\">1000</span>, done)</div><div class=\"line\">  &#125;,</div><div class=\"line\">  <span class=\"attr\">enterCancelled</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">el</span>) </span>&#123;</div><div class=\"line\">    $(el).stop()</div><div class=\"line\">  &#125;,</div><div class=\"line\">  <span class=\"attr\">leave</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">el, done</span>) </span>&#123;</div><div class=\"line\">    <span class=\"comment\">// 与 enter 相同</span></div><div class=\"line\">    $(el).animate(&#123; <span class=\"attr\">opacity</span>: <span class=\"number\">0</span> &#125;, <span class=\"number\">1000</span>, done)</div><div class=\"line\">  &#125;,</div><div class=\"line\">  <span class=\"attr\">leaveCancelled</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">el</span>) </span>&#123;</div><div class=\"line\">    $(el).stop()</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure></p>\n<p>然后用在transition特性中。</p>\n<h3 id=\"渐近过渡\"><a href=\"#渐近过渡\" class=\"headerlink\" title=\"渐近过渡\"></a>渐近过渡</h3><p>transition与v-for一起用时可以创建渐近过渡。</p>\n<ul>\n<li>给过渡元素添加一个特性stagger，enter-stagger或 eave-stagger</li>\n</ul>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">&lt;!--每个过渡项目增加100ms延时--&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">v-for</span>=<span class=\"string\">\"item in list\"</span> <span class=\"attr\">transition</span>=<span class=\"string\">\"stagger\"</span> <span class=\"attr\">stagger</span>=<span class=\"string\">\"100\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div></pre></td></tr></table></figure>\n<ul>\n<li>提供一个钩子stagger, enter-stagger或leave-stagger，以更好的控制</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">Vue.transition(<span class=\"string\">'stagger'</span>, &#123;</div><div class=\"line\">  <span class=\"attr\">stagger</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">index</span>) </span>&#123;</div><div class=\"line\">    <span class=\"comment\">// 每个过渡项目增加50ms延时</span></div><div class=\"line\">    <span class=\"comment\">// 但是最大延时限制为300ms</span></div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">Math</span>.min(<span class=\"number\">300</span>, index * <span class=\"number\">50</span>)</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<h2 id=\"制作index页面\"><a href=\"#制作index页面\" class=\"headerlink\" title=\"制作index页面\"></a>制作index页面</h2><hr>\n<p>页面结构如下：<br><img src=\"http://o905ne85q.bkt.clouddn.com/F3A2.tmp.png\" alt=\"image\"></p>\n<h3 id=\"添加模板\"><a href=\"#添加模板\" class=\"headerlink\" title=\"添加模板\"></a>添加模板</h3><p>这里使用了上一节创建的头部组件，在component属性中引入。<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">template</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">is</span>=<span class=\"string\">\"my-header\"</span> <span class=\"attr\">current</span>=<span class=\"string\">\"index\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span><span class=\"comment\">&lt;!--使用is绑定组件，current传入prop数据--&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"container-fluid row\"</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">aside</span> <span class=\"attr\">class</span>=<span class=\"string\">\"col-md-2  col-md-offset-1\"</span> <span class=\"attr\">id</span>=<span class=\"string\">\"according\"</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"panel-group\"</span> <span class=\"attr\">id</span>=<span class=\"string\">\"accordion\"</span> <span class=\"attr\">role</span>=<span class=\"string\">\"tablist\"</span> <span class=\"attr\">aria-multiselectable</span>=<span class=\"string\">\"true\"</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"panel panel-default list-group\"</span> <span class=\"attr\">v-for</span>=<span class=\"string\">\"menu in asidemenus\"</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"panel-heading\"</span> <span class=\"attr\">role</span>=<span class=\"string\">\"tab\"</span>&gt;</span></div><div class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">ul</span> <span class=\"attr\">class</span>=<span class=\"string\">\"panel-title \"</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">data-toggle</span>=<span class=\"string\">\"collapse\"</span> <span class=\"attr\">v-on:click</span>=<span class=\"string\">\"toggleContent($index)\"</span>&gt;</span></div><div class=\"line\">              &#123;&#123; menu.title &#125;&#125;</div><div class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></div><div class=\"line\">          <span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"panel-collapse collapse in\"</span>&gt;</span></div><div class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">ul</span> <span class=\"attr\">class</span>=<span class=\"string\">\"list-group\"</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">v-for</span>=<span class=\"string\">\"item in menu.menus\"</span> <span class=\"attr\">v-show</span>=<span class=\"string\">\"menu.show\"</span> <span class=\"attr\">transition</span>=<span class=\"string\">\"staggered\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"list-group-item\"</span> <span class=\"attr\">role</span>=<span class=\"string\">\"button\"</span> <span class=\"attr\">v-on:click.stop</span>=<span class=\"string\">\"changeLoading(item.click)\"</span>&gt;</span>&#123;&#123; item.text &#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></div><div class=\"line\">          <span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">aside</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">article</span> <span class=\"attr\">class</span>=<span class=\"string\">\"col-md-7\"</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">section</span> <span class=\"attr\">class</span>=<span class=\"string\">\"index-content\"</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">v-show</span>=<span class=\"string\">\"loading === 'init' || loading === 'name'\"</span>&gt;</span>昵称：被删<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">v-show</span>=<span class=\"string\">\"loading === 'init' || loading === 'email'\"</span>&gt;</span>邮箱：wangbeishan@163.com<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">v-show</span>=<span class=\"string\">\"loading === 'init' || loading === 'github'\"</span>&gt;</span>github: <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"https://github.com/godbasin\"</span>&gt;</span>github.com/godbasin<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">v-show</span>=<span class=\"string\">\"loading === 'sethead'\"</span>&gt;</span>这里是修改头像页面<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">v-show</span>=<span class=\"string\">\"loading === 'setinfo'\"</span>&gt;</span>这里是修改资料页面<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">v-show</span>=<span class=\"string\">\"loading === 'other'\"</span>&gt;</span>这里是其他页面<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">section</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">article</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<h3 id=\"添加Vue组件\"><a href=\"#添加Vue组件\" class=\"headerlink\" title=\"添加Vue组件\"></a>添加Vue组件</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;script&gt;</div><div class=\"line\"><span class=\"comment\">// 导入Header组件</span></div><div class=\"line\"><span class=\"keyword\">import</span> MyHeader <span class=\"keyword\">from</span> <span class=\"string\">'./Header.vue'</span></div><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</div><div class=\"line\">  <span class=\"attr\">components</span>: &#123; <span class=\"comment\">// 导入Header组件</span></div><div class=\"line\">    MyHeader</div><div class=\"line\">  &#125;,</div><div class=\"line\">  data () &#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> &#123;</div><div class=\"line\">      <span class=\"attr\">loading</span>: <span class=\"string\">'init'</span>,</div><div class=\"line\">      <span class=\"attr\">asidemenus</span>: [&#123;</div><div class=\"line\">        <span class=\"attr\">title</span>: <span class=\"string\">'基本资料'</span>, <span class=\"comment\">// title用于储存该菜单显示名称</span></div><div class=\"line\">        click: <span class=\"string\">'init'</span>, <span class=\"comment\">// click用于储存该菜单对应点击时loading的状态值</span></div><div class=\"line\">        show: <span class=\"literal\">true</span>, <span class=\"comment\">// show用于保存菜单是否隐藏的状态</span></div><div class=\"line\">        menus: [&#123;</div><div class=\"line\">          <span class=\"attr\">text</span>: <span class=\"string\">'名字'</span>, <span class=\"comment\">// title用于储存该菜单显示名称</span></div><div class=\"line\">          click: <span class=\"string\">'name'</span> <span class=\"comment\">// click用于储存该菜单对应点击时loading的状态值</span></div><div class=\"line\">        &#125;, &#123;</div><div class=\"line\">          <span class=\"attr\">text</span>: <span class=\"string\">'邮箱'</span>,</div><div class=\"line\">          <span class=\"attr\">click</span>: <span class=\"string\">'email'</span></div><div class=\"line\">        &#125;, &#123;</div><div class=\"line\">          <span class=\"attr\">text</span>: <span class=\"string\">'github'</span>,</div><div class=\"line\">          <span class=\"attr\">click</span>: <span class=\"string\">'github'</span></div><div class=\"line\">        &#125;]</div><div class=\"line\">      &#125;, &#123;</div><div class=\"line\">        <span class=\"attr\">title</span>: <span class=\"string\">'设置头像'</span>,</div><div class=\"line\">        <span class=\"attr\">click</span>: <span class=\"string\">'sethead'</span>,</div><div class=\"line\">        <span class=\"attr\">show</span>: <span class=\"literal\">true</span></div><div class=\"line\">      &#125;, &#123;</div><div class=\"line\">        <span class=\"attr\">title</span>: <span class=\"string\">'修改资料'</span>,</div><div class=\"line\">        <span class=\"attr\">click</span>: <span class=\"string\">'setinfo'</span>,</div><div class=\"line\">        <span class=\"attr\">show</span>: <span class=\"literal\">true</span></div><div class=\"line\">      &#125;, &#123;</div><div class=\"line\">        <span class=\"attr\">title</span>: <span class=\"string\">'其他'</span>,</div><div class=\"line\">        <span class=\"attr\">click</span>: <span class=\"string\">'other'</span>,</div><div class=\"line\">        <span class=\"attr\">show</span>: <span class=\"literal\">true</span></div><div class=\"line\">      &#125;]</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;,</div><div class=\"line\">  <span class=\"comment\">// 在 `methods` 对象中定义方法</span></div><div class=\"line\">  methods: &#123;</div><div class=\"line\">    <span class=\"attr\">changeLoading</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">view</span>) </span>&#123; <span class=\"comment\">// 更新loading</span></div><div class=\"line\">      <span class=\"keyword\">this</span>.loading = view</div><div class=\"line\">    &#125;,</div><div class=\"line\">    <span class=\"attr\">toggleContent</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">index</span>) </span>&#123; <span class=\"comment\">// 过渡菜单效果并更新loading</span></div><div class=\"line\">      <span class=\"keyword\">this</span>.asidemenus[index].show = !<span class=\"keyword\">this</span>.asidemenus[index].show</div><div class=\"line\">      <span class=\"keyword\">this</span>.changeLoading(<span class=\"keyword\">this</span>.asidemenus[index].click)</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div><div class=\"line\">&lt;<span class=\"regexp\">/script&gt;</span></div></pre></td></tr></table></figure>\n<h3 id=\"添加样式\"><a href=\"#添加样式\" class=\"headerlink\" title=\"添加样式\"></a>添加样式</h3><p>样式包括一些组件的样式，还有过渡css样式，这里就不列出来了。</p>\n<h2 id=\"结束语\"><a href=\"#结束语\" class=\"headerlink\" title=\"结束语\"></a>结束语</h2><hr>\n<p>这里我们没有用到bootstrap中的组件，毕竟用Vue过渡很简单的呢。不得不说，Vue的动画过渡做的真的不错，事件的封装也做的很方便呢。<br><a href=\"https://github.com/godbasin/godbasin.github.io/tree/blog-codes/vue-notes/4-fullfill-index\">此处查看项目代码</a><br><a href=\"http://o9zkatzym.bkt.clouddn.com/4-fullfill-index/index.html?#!/index\">此处查看页面效果</a></p>"},{"title":"Vue2使用笔记1--vue-cli+vue-router搭建应用","date":"2016-11-19T10:13:39.000Z","_content":"最近在使用Vue2作为项目中前端的框架，《Vue2使用笔记》系列用于记录过程中的一些使用和解决方法。\n本文记录使用Vue框架的脚手架vue-cli初步搭建项目，以及使用vue-router简单搭建路由的过程。\n<!--more-->\n\n## 初步使用Vue应用\n---\n### 直接使用Vue源码\n这里本骚年就不详细描述了，具体大家可以参考[Vue2.0中文文档](https://vuefe.cn/guide/)。\n\n### 使用脚手架vue-cli搭建\nVue.js提供一个[官方命令行工具vue-cli](https://vuejs-templates.github.io/webpack/index.html)，可用于快速搭建单页应用。\n\n- 安装项目\n\n``` cmd\n$ npm install -g vue-cli\n$ vue init webpack vue2-test\n$ cd vue-test\n$ npm install\n```\n\n安装过程会询问是否需要添加一些相关的依赖（EsLint、mocha、n2n等），但由于本项目较小，也就不安装了。\n\n- 目录组织\n生成目录组织如下：\n``` bash\n├── build/                      # webpack配置参数文件\n│   └── ...\n├── config/                     \n│   ├── index.js                # 主项目的配置\n│   └── ...\n├── src/\n│   ├── main.js                 # 应用入口\n│   ├── App.vue                 # 主应用组件\n│   ├── components/             # UI组件\n│   │   └── ...\n│   └── assets/                 # 模块资源（webpack提供）\n│       └── ...\n├── static/                     # 纯静态资源（打包时直接复制）\n├── test/\n│   └── unit/                   # 单元测试\n│   └── e2e/                    # e2e tests测试\n├── .babelrc                    # babel编译参数\n├── .editorconfig.js            # 编辑器配置\n├── .eslintrc.js                # eslint配置文件，用以规范团队开发编码规范\n├── index.html                  # 主页模板\n└── package.json                # 项目文件，记载着一些命令和依赖还有简要的项目描述信息\n```\n\n跟vue1.0长得一模一样对吧，哈哈哈。\n\n### 主要的npm命令\n``` bash\n// 启动服务\nnpm run dev\n// 打包生成\nnpm run build\n```\n> 注意，打包生成的文件为绝对定位，需在服务环境下才能打开。如果需要生成相对定位的文件，可以进行如下操作：\n> 1.打开config文件夹下的index.js文件\n> 2.修改build中assetsPublicPath为'./'（原本为'/'）\n> 生成的文件将放置在dist文件夹\n\n### 参考\n[Vue2.0中文文档](https://vuefe.cn/guide/)\n[《Vue使用笔记1--使用vue-cli搭建Vue项目》](https://godbasin.github.io/2016/09/03/vue-notes-1-build-vue-project/)\n\n## 添加路由\n---\n下面我们给项目添加路由。\n\n### 安装vue-router\n``` bash\nnpm install vue-router --save\n```\n\n### 引入vue-router\n在src/main.js文件中引入vue-router，并创建简单路由，包括：\n- Login：登陆页面\n- App：管理页面\n\n``` js\nimport Vue from 'vue' // 引入vue\nimport VueRouter from 'vue-router' // 引入vue-router\n\nimport App from './App' // 引入App组件\nimport Login from './Login' // 引入Login组件\n\nVue.use(VueRouter) // 使用路由\n\n// 设置路由信息\nconst routes = [\n    { path: '/login', component: Login, name: 'Login' },\n    { path: '/app', component: App, name: 'App' },\n    { path: '*', redirect: { name: 'Login' } }\n]\n\nconst router = new VueRouter({\n    routes // （缩写）相当于 routes: routes\n})\n\nnew Vue({\n    router\n}).$mount('#app')\n```\n\n### 添加登陆页面\n这个项目中我们使用gentelella的开源模板，故我们需要引入一些该模板的相关文件。\n- 获取gentelella模板\n  - 从github上获取源码\n  - 下载后选择需要的文件放置在/static/gentelella/文件夹中\n  - lib文件夹放置相关依赖代码文件\n  - build文件夹放置自定义的css和js文件\n\n- index.html中引入相关js和css\n这里我简单列出大概会用到的库和组件。\n\n``` html\n<!DOCTYPE html>\n<html>\n<head>\n    <meta charset=\"utf-8\">\n    <title>vue2-test</title>\n    <!-- Bootstrap -->\n    <!-- Font Awesome -->\n    <!-- NProgress -->\n    <!-- jQuery custom content scroller -->\n    <!-- iCheck -->\n    <!-- Select2 -->\n    <!-- Switchery -->\n    <!-- Datatables -->\n    <!-- PNotify -->\n    <!-- Custom Theme Style -->\n    <link href=\"./static/gentelella/build/css/custom.css\" rel=\"stylesheet\">\n    <link href=\"./static/gentelella/build/css/common.css\" rel=\"stylesheet\">\n</head>\n\n<body class=\"nav-md\">\n    <div id=\"app\">\n        <router-view></router-view>\n    </div>\n    <!-- built files will be auto injected -->\n    <!-- jQuery -->\n    <!-- Bootstrap -->\n    <!-- bootstrap-daterangepicker -->\n    <!-- FastClick -->\n    <!-- NProgress -->\n    <!-- jQuery custom content scroller -->\n    <!-- iCheck -->\n    <!-- jQuery Tags Input -->\n    <!-- Switchery -->\n    <!-- Select2 -->\n    <!-- Parsley -->\n    <!-- Autosize -->\n    <!-- NProgress -->\n    <!-- bootstrap-progressbar -->\n    <!-- Datatables -->\n    <!-- PNotify -->\n    <!-- Custom Theme Scripts -->\n    <script src=\"./static/gentelella/build/js/common.js\"></script>\n</body>\n</html>\n```\n\n- 添加登陆页面Login组件\n在src下新建Login.vue文件：\n\n``` vue\n<template>\n\t<div>\n\t\t<a class=\"hiddenanchor\" id=\"signup\"></a>\n\t\t<a class=\"hiddenanchor\" id=\"signin\"></a>\n\t\t<div class=\"login_wrapper\">\n\t\t\t<div class=\"animate form login_form\">\n\t\t\t\t<section class=\"login_content\">\n\t\t\t\t\t<form>\n\t\t\t\t\t\t<h1>管理系统</h1>\n\t\t\t\t\t\t<div>\n\t\t\t\t\t\t\t<input type=\"text\" class=\"form-control\" placeholder=\"用户名\" v-model=\"username\" required=\"\" />\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t<div>\n\t\t\t\t\t\t\t<input type=\"password\" class=\"form-control\" placeholder=\"密码\" v-model=\"password\" required=\"\" />\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t<div class=\"alert alert-danger alert-dismissible fade in\" role=\"alert\" v-show=\"error.shown\">\n\t\t\t\t\t\t\t<strong>错误：</strong> {{error.text}}\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t<div>\n\t\t\t\t\t\t\t<a class=\"btn btn-default submit\" href=\"javascript:;\" v-on:click=\"login\">登录</a>\n\t\t\t\t\t\t</div>\n\n\t\t\t\t\t\t<div class=\"clearfix\"></div>\n\t\t\t\t\t\t<div>\n\t\t\t\t\t\t\t<h1><i class=\"fa fa-paw\"></i> Gentelella Alela!</h1>\n\t\t\t\t\t\t\t<p>©2016 All Rights Reserved. Gentelella Alela! is a Bootstrap 3 template. Privacy and Terms</p>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</form>\n\t\t\t\t</section>\n\t\t\t</div>\n\t\t</div>\n\t</div>\n</template>\n\n<script>\n    export default {\n        name: 'Login',\n        data() {\n            return {\n                username: '',\n                password: '',\n                error: {\n                    text: '',\n                    shown: false\n                }\n            }\n        },\n        methods: {\n            // 登陆事件\n            login() {\n                if (!this.username || !this.password) {\n                    this.error.text = '用户名和密码不能为空'\n                    this.error.shown = true\n                    return;\n                }\n                this.$router.push('App')\n            }\n        },\n        // 实例已完成以下的配置：数据观测(data observer)，属性和方法的运算， watch/event 事件回调\n        created() {\n            this.error.shown = false\n            $('body').attr('class', 'login')\n        },\n        // 此时元素创建完成\n        mounted() {\n            $('input')[0].focus()\n        }\n    }\n</script>\n```\n\n### 参考\n[Vue2.0中文文档](https://vuefe.cn/guide/)\n\n## 结束语\n-----\n其实使用了这么多的框架，Vue的确是做的很不错的一个呢，从Vue1.x到Vue2.x也是有很多优秀的转变呢。\n[此处查看项目代码](https://github.com/godbasin/godbasin.github.io/tree/blog-codes/vue2-notes/1-build-vue2-project)\n[此处查看页面效果](http://ofyya1gfg.bkt.clouddn.com/1-build-vue2-project/index.html)","source":"_posts/vue2-notes-1-build-vue2-project.md","raw":"---\ntitle: Vue2使用笔记1--vue-cli+vue-router搭建应用\ndate: 2016-11-19 18:13:39\ncategories: vue八宝粥\ntags: 笔记\n---\n最近在使用Vue2作为项目中前端的框架，《Vue2使用笔记》系列用于记录过程中的一些使用和解决方法。\n本文记录使用Vue框架的脚手架vue-cli初步搭建项目，以及使用vue-router简单搭建路由的过程。\n<!--more-->\n\n## 初步使用Vue应用\n---\n### 直接使用Vue源码\n这里本骚年就不详细描述了，具体大家可以参考[Vue2.0中文文档](https://vuefe.cn/guide/)。\n\n### 使用脚手架vue-cli搭建\nVue.js提供一个[官方命令行工具vue-cli](https://vuejs-templates.github.io/webpack/index.html)，可用于快速搭建单页应用。\n\n- 安装项目\n\n``` cmd\n$ npm install -g vue-cli\n$ vue init webpack vue2-test\n$ cd vue-test\n$ npm install\n```\n\n安装过程会询问是否需要添加一些相关的依赖（EsLint、mocha、n2n等），但由于本项目较小，也就不安装了。\n\n- 目录组织\n生成目录组织如下：\n``` bash\n├── build/                      # webpack配置参数文件\n│   └── ...\n├── config/                     \n│   ├── index.js                # 主项目的配置\n│   └── ...\n├── src/\n│   ├── main.js                 # 应用入口\n│   ├── App.vue                 # 主应用组件\n│   ├── components/             # UI组件\n│   │   └── ...\n│   └── assets/                 # 模块资源（webpack提供）\n│       └── ...\n├── static/                     # 纯静态资源（打包时直接复制）\n├── test/\n│   └── unit/                   # 单元测试\n│   └── e2e/                    # e2e tests测试\n├── .babelrc                    # babel编译参数\n├── .editorconfig.js            # 编辑器配置\n├── .eslintrc.js                # eslint配置文件，用以规范团队开发编码规范\n├── index.html                  # 主页模板\n└── package.json                # 项目文件，记载着一些命令和依赖还有简要的项目描述信息\n```\n\n跟vue1.0长得一模一样对吧，哈哈哈。\n\n### 主要的npm命令\n``` bash\n// 启动服务\nnpm run dev\n// 打包生成\nnpm run build\n```\n> 注意，打包生成的文件为绝对定位，需在服务环境下才能打开。如果需要生成相对定位的文件，可以进行如下操作：\n> 1.打开config文件夹下的index.js文件\n> 2.修改build中assetsPublicPath为'./'（原本为'/'）\n> 生成的文件将放置在dist文件夹\n\n### 参考\n[Vue2.0中文文档](https://vuefe.cn/guide/)\n[《Vue使用笔记1--使用vue-cli搭建Vue项目》](https://godbasin.github.io/2016/09/03/vue-notes-1-build-vue-project/)\n\n## 添加路由\n---\n下面我们给项目添加路由。\n\n### 安装vue-router\n``` bash\nnpm install vue-router --save\n```\n\n### 引入vue-router\n在src/main.js文件中引入vue-router，并创建简单路由，包括：\n- Login：登陆页面\n- App：管理页面\n\n``` js\nimport Vue from 'vue' // 引入vue\nimport VueRouter from 'vue-router' // 引入vue-router\n\nimport App from './App' // 引入App组件\nimport Login from './Login' // 引入Login组件\n\nVue.use(VueRouter) // 使用路由\n\n// 设置路由信息\nconst routes = [\n    { path: '/login', component: Login, name: 'Login' },\n    { path: '/app', component: App, name: 'App' },\n    { path: '*', redirect: { name: 'Login' } }\n]\n\nconst router = new VueRouter({\n    routes // （缩写）相当于 routes: routes\n})\n\nnew Vue({\n    router\n}).$mount('#app')\n```\n\n### 添加登陆页面\n这个项目中我们使用gentelella的开源模板，故我们需要引入一些该模板的相关文件。\n- 获取gentelella模板\n  - 从github上获取源码\n  - 下载后选择需要的文件放置在/static/gentelella/文件夹中\n  - lib文件夹放置相关依赖代码文件\n  - build文件夹放置自定义的css和js文件\n\n- index.html中引入相关js和css\n这里我简单列出大概会用到的库和组件。\n\n``` html\n<!DOCTYPE html>\n<html>\n<head>\n    <meta charset=\"utf-8\">\n    <title>vue2-test</title>\n    <!-- Bootstrap -->\n    <!-- Font Awesome -->\n    <!-- NProgress -->\n    <!-- jQuery custom content scroller -->\n    <!-- iCheck -->\n    <!-- Select2 -->\n    <!-- Switchery -->\n    <!-- Datatables -->\n    <!-- PNotify -->\n    <!-- Custom Theme Style -->\n    <link href=\"./static/gentelella/build/css/custom.css\" rel=\"stylesheet\">\n    <link href=\"./static/gentelella/build/css/common.css\" rel=\"stylesheet\">\n</head>\n\n<body class=\"nav-md\">\n    <div id=\"app\">\n        <router-view></router-view>\n    </div>\n    <!-- built files will be auto injected -->\n    <!-- jQuery -->\n    <!-- Bootstrap -->\n    <!-- bootstrap-daterangepicker -->\n    <!-- FastClick -->\n    <!-- NProgress -->\n    <!-- jQuery custom content scroller -->\n    <!-- iCheck -->\n    <!-- jQuery Tags Input -->\n    <!-- Switchery -->\n    <!-- Select2 -->\n    <!-- Parsley -->\n    <!-- Autosize -->\n    <!-- NProgress -->\n    <!-- bootstrap-progressbar -->\n    <!-- Datatables -->\n    <!-- PNotify -->\n    <!-- Custom Theme Scripts -->\n    <script src=\"./static/gentelella/build/js/common.js\"></script>\n</body>\n</html>\n```\n\n- 添加登陆页面Login组件\n在src下新建Login.vue文件：\n\n``` vue\n<template>\n\t<div>\n\t\t<a class=\"hiddenanchor\" id=\"signup\"></a>\n\t\t<a class=\"hiddenanchor\" id=\"signin\"></a>\n\t\t<div class=\"login_wrapper\">\n\t\t\t<div class=\"animate form login_form\">\n\t\t\t\t<section class=\"login_content\">\n\t\t\t\t\t<form>\n\t\t\t\t\t\t<h1>管理系统</h1>\n\t\t\t\t\t\t<div>\n\t\t\t\t\t\t\t<input type=\"text\" class=\"form-control\" placeholder=\"用户名\" v-model=\"username\" required=\"\" />\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t<div>\n\t\t\t\t\t\t\t<input type=\"password\" class=\"form-control\" placeholder=\"密码\" v-model=\"password\" required=\"\" />\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t<div class=\"alert alert-danger alert-dismissible fade in\" role=\"alert\" v-show=\"error.shown\">\n\t\t\t\t\t\t\t<strong>错误：</strong> {{error.text}}\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t<div>\n\t\t\t\t\t\t\t<a class=\"btn btn-default submit\" href=\"javascript:;\" v-on:click=\"login\">登录</a>\n\t\t\t\t\t\t</div>\n\n\t\t\t\t\t\t<div class=\"clearfix\"></div>\n\t\t\t\t\t\t<div>\n\t\t\t\t\t\t\t<h1><i class=\"fa fa-paw\"></i> Gentelella Alela!</h1>\n\t\t\t\t\t\t\t<p>©2016 All Rights Reserved. Gentelella Alela! is a Bootstrap 3 template. Privacy and Terms</p>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</form>\n\t\t\t\t</section>\n\t\t\t</div>\n\t\t</div>\n\t</div>\n</template>\n\n<script>\n    export default {\n        name: 'Login',\n        data() {\n            return {\n                username: '',\n                password: '',\n                error: {\n                    text: '',\n                    shown: false\n                }\n            }\n        },\n        methods: {\n            // 登陆事件\n            login() {\n                if (!this.username || !this.password) {\n                    this.error.text = '用户名和密码不能为空'\n                    this.error.shown = true\n                    return;\n                }\n                this.$router.push('App')\n            }\n        },\n        // 实例已完成以下的配置：数据观测(data observer)，属性和方法的运算， watch/event 事件回调\n        created() {\n            this.error.shown = false\n            $('body').attr('class', 'login')\n        },\n        // 此时元素创建完成\n        mounted() {\n            $('input')[0].focus()\n        }\n    }\n</script>\n```\n\n### 参考\n[Vue2.0中文文档](https://vuefe.cn/guide/)\n\n## 结束语\n-----\n其实使用了这么多的框架，Vue的确是做的很不错的一个呢，从Vue1.x到Vue2.x也是有很多优秀的转变呢。\n[此处查看项目代码](https://github.com/godbasin/godbasin.github.io/tree/blog-codes/vue2-notes/1-build-vue2-project)\n[此处查看页面效果](http://ofyya1gfg.bkt.clouddn.com/1-build-vue2-project/index.html)","slug":"vue2-notes-1-build-vue2-project","published":1,"updated":"2016-11-19T10:14:36.772Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cix45hui7004wxotucvl5itej","content":"<p>最近在使用Vue2作为项目中前端的框架，《Vue2使用笔记》系列用于记录过程中的一些使用和解决方法。<br>本文记录使用Vue框架的脚手架vue-cli初步搭建项目，以及使用vue-router简单搭建路由的过程。<br><a id=\"more\"></a></p>\n<h2 id=\"初步使用Vue应用\"><a href=\"#初步使用Vue应用\" class=\"headerlink\" title=\"初步使用Vue应用\"></a>初步使用Vue应用</h2><hr>\n<h3 id=\"直接使用Vue源码\"><a href=\"#直接使用Vue源码\" class=\"headerlink\" title=\"直接使用Vue源码\"></a>直接使用Vue源码</h3><p>这里本骚年就不详细描述了，具体大家可以参考<a href=\"https://vuefe.cn/guide/\" target=\"_blank\" rel=\"external\">Vue2.0中文文档</a>。</p>\n<h3 id=\"使用脚手架vue-cli搭建\"><a href=\"#使用脚手架vue-cli搭建\" class=\"headerlink\" title=\"使用脚手架vue-cli搭建\"></a>使用脚手架vue-cli搭建</h3><p>Vue.js提供一个<a href=\"https://vuejs-templates.github.io/webpack/index.html\" target=\"_blank\" rel=\"external\">官方命令行工具vue-cli</a>，可用于快速搭建单页应用。</p>\n<ul>\n<li>安装项目</li>\n</ul>\n<figure class=\"highlight cmd\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ npm install -g vue-cli</div><div class=\"line\">$ vue init webpack vue2-test</div><div class=\"line\">$ <span class=\"built_in\">cd</span> vue-test</div><div class=\"line\">$ npm install</div></pre></td></tr></table></figure>\n<p>安装过程会询问是否需要添加一些相关的依赖（EsLint、mocha、n2n等），但由于本项目较小，也就不安装了。</p>\n<ul>\n<li>目录组织<br>生成目录组织如下：<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\">├── build/                      <span class=\"comment\"># webpack配置参数文件</span></div><div class=\"line\">│   └── ...</div><div class=\"line\">├── config/                     </div><div class=\"line\">│   ├── index.js                <span class=\"comment\"># 主项目的配置</span></div><div class=\"line\">│   └── ...</div><div class=\"line\">├── src/</div><div class=\"line\">│   ├── main.js                 <span class=\"comment\"># 应用入口</span></div><div class=\"line\">│   ├── App.vue                 <span class=\"comment\"># 主应用组件</span></div><div class=\"line\">│   ├── components/             <span class=\"comment\"># UI组件</span></div><div class=\"line\">│   │   └── ...</div><div class=\"line\">│   └── assets/                 <span class=\"comment\"># 模块资源（webpack提供）</span></div><div class=\"line\">│       └── ...</div><div class=\"line\">├── static/                     <span class=\"comment\"># 纯静态资源（打包时直接复制）</span></div><div class=\"line\">├── <span class=\"built_in\">test</span>/</div><div class=\"line\">│   └── unit/                   <span class=\"comment\"># 单元测试</span></div><div class=\"line\">│   └── e2e/                    <span class=\"comment\"># e2e tests测试</span></div><div class=\"line\">├── .babelrc                    <span class=\"comment\"># babel编译参数</span></div><div class=\"line\">├── .editorconfig.js            <span class=\"comment\"># 编辑器配置</span></div><div class=\"line\">├── .eslintrc.js                <span class=\"comment\"># eslint配置文件，用以规范团队开发编码规范</span></div><div class=\"line\">├── index.html                  <span class=\"comment\"># 主页模板</span></div><div class=\"line\">└── package.json                <span class=\"comment\"># 项目文件，记载着一些命令和依赖还有简要的项目描述信息</span></div></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>跟vue1.0长得一模一样对吧，哈哈哈。</p>\n<h3 id=\"主要的npm命令\"><a href=\"#主要的npm命令\" class=\"headerlink\" title=\"主要的npm命令\"></a>主要的npm命令</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">// 启动服务</div><div class=\"line\">npm run dev</div><div class=\"line\">// 打包生成</div><div class=\"line\">npm run build</div></pre></td></tr></table></figure>\n<blockquote>\n<p>注意，打包生成的文件为绝对定位，需在服务环境下才能打开。如果需要生成相对定位的文件，可以进行如下操作：<br>1.打开config文件夹下的index.js文件<br>2.修改build中assetsPublicPath为’./‘（原本为’/‘）<br>生成的文件将放置在dist文件夹</p>\n</blockquote>\n<h3 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h3><p><a href=\"https://vuefe.cn/guide/\" target=\"_blank\" rel=\"external\">Vue2.0中文文档</a><br><a href=\"https://godbasin.github.io/2016/09/03/vue-notes-1-build-vue-project/\">《Vue使用笔记1–使用vue-cli搭建Vue项目》</a></p>\n<h2 id=\"添加路由\"><a href=\"#添加路由\" class=\"headerlink\" title=\"添加路由\"></a>添加路由</h2><hr>\n<p>下面我们给项目添加路由。</p>\n<h3 id=\"安装vue-router\"><a href=\"#安装vue-router\" class=\"headerlink\" title=\"安装vue-router\"></a>安装vue-router</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">npm install vue-router --save</div></pre></td></tr></table></figure>\n<h3 id=\"引入vue-router\"><a href=\"#引入vue-router\" class=\"headerlink\" title=\"引入vue-router\"></a>引入vue-router</h3><p>在src/main.js文件中引入vue-router，并创建简单路由，包括：</p>\n<ul>\n<li>Login：登陆页面</li>\n<li>App：管理页面</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> Vue <span class=\"keyword\">from</span> <span class=\"string\">'vue'</span> <span class=\"comment\">// 引入vue</span></div><div class=\"line\"><span class=\"keyword\">import</span> VueRouter <span class=\"keyword\">from</span> <span class=\"string\">'vue-router'</span> <span class=\"comment\">// 引入vue-router</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> App <span class=\"keyword\">from</span> <span class=\"string\">'./App'</span> <span class=\"comment\">// 引入App组件</span></div><div class=\"line\"><span class=\"keyword\">import</span> Login <span class=\"keyword\">from</span> <span class=\"string\">'./Login'</span> <span class=\"comment\">// 引入Login组件</span></div><div class=\"line\"></div><div class=\"line\">Vue.use(VueRouter) <span class=\"comment\">// 使用路由</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 设置路由信息</span></div><div class=\"line\"><span class=\"keyword\">const</span> routes = [</div><div class=\"line\">    &#123; <span class=\"attr\">path</span>: <span class=\"string\">'/login'</span>, <span class=\"attr\">component</span>: Login, <span class=\"attr\">name</span>: <span class=\"string\">'Login'</span> &#125;,</div><div class=\"line\">    &#123; <span class=\"attr\">path</span>: <span class=\"string\">'/app'</span>, <span class=\"attr\">component</span>: App, <span class=\"attr\">name</span>: <span class=\"string\">'App'</span> &#125;,</div><div class=\"line\">    &#123; <span class=\"attr\">path</span>: <span class=\"string\">'*'</span>, <span class=\"attr\">redirect</span>: &#123; <span class=\"attr\">name</span>: <span class=\"string\">'Login'</span> &#125; &#125;</div><div class=\"line\">]</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">const</span> router = <span class=\"keyword\">new</span> VueRouter(&#123;</div><div class=\"line\">    routes <span class=\"comment\">// （缩写）相当于 routes: routes</span></div><div class=\"line\">&#125;)</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">new</span> Vue(&#123;</div><div class=\"line\">    router</div><div class=\"line\">&#125;).$mount(<span class=\"string\">'#app'</span>)</div></pre></td></tr></table></figure>\n<h3 id=\"添加登陆页面\"><a href=\"#添加登陆页面\" class=\"headerlink\" title=\"添加登陆页面\"></a>添加登陆页面</h3><p>这个项目中我们使用gentelella的开源模板，故我们需要引入一些该模板的相关文件。</p>\n<ul>\n<li><p>获取gentelella模板</p>\n<ul>\n<li>从github上获取源码</li>\n<li>下载后选择需要的文件放置在/static/gentelella/文件夹中</li>\n<li>lib文件夹放置相关依赖代码文件</li>\n<li>build文件夹放置自定义的css和js文件</li>\n</ul>\n</li>\n<li><p>index.html中引入相关js和css<br>这里我简单列出大概会用到的库和组件。</p>\n</li>\n</ul>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&lt;!DOCTYPE html&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"utf-8\"</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>vue2-test<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></div><div class=\"line\">    <span class=\"comment\">&lt;!-- Bootstrap --&gt;</span></div><div class=\"line\">    <span class=\"comment\">&lt;!-- Font Awesome --&gt;</span></div><div class=\"line\">    <span class=\"comment\">&lt;!-- NProgress --&gt;</span></div><div class=\"line\">    <span class=\"comment\">&lt;!-- jQuery custom content scroller --&gt;</span></div><div class=\"line\">    <span class=\"comment\">&lt;!-- iCheck --&gt;</span></div><div class=\"line\">    <span class=\"comment\">&lt;!-- Select2 --&gt;</span></div><div class=\"line\">    <span class=\"comment\">&lt;!-- Switchery --&gt;</span></div><div class=\"line\">    <span class=\"comment\">&lt;!-- Datatables --&gt;</span></div><div class=\"line\">    <span class=\"comment\">&lt;!-- PNotify --&gt;</span></div><div class=\"line\">    <span class=\"comment\">&lt;!-- Custom Theme Style --&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">link</span> <span class=\"attr\">href</span>=<span class=\"string\">\"./static/gentelella/build/css/custom.css\"</span> <span class=\"attr\">rel</span>=<span class=\"string\">\"stylesheet\"</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">link</span> <span class=\"attr\">href</span>=<span class=\"string\">\"./static/gentelella/build/css/common.css\"</span> <span class=\"attr\">rel</span>=<span class=\"string\">\"stylesheet\"</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span> <span class=\"attr\">class</span>=<span class=\"string\">\"nav-md\"</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"app\"</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">router-view</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">router-view</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">    <span class=\"comment\">&lt;!-- built files will be auto injected --&gt;</span></div><div class=\"line\">    <span class=\"comment\">&lt;!-- jQuery --&gt;</span></div><div class=\"line\">    <span class=\"comment\">&lt;!-- Bootstrap --&gt;</span></div><div class=\"line\">    <span class=\"comment\">&lt;!-- bootstrap-daterangepicker --&gt;</span></div><div class=\"line\">    <span class=\"comment\">&lt;!-- FastClick --&gt;</span></div><div class=\"line\">    <span class=\"comment\">&lt;!-- NProgress --&gt;</span></div><div class=\"line\">    <span class=\"comment\">&lt;!-- jQuery custom content scroller --&gt;</span></div><div class=\"line\">    <span class=\"comment\">&lt;!-- iCheck --&gt;</span></div><div class=\"line\">    <span class=\"comment\">&lt;!-- jQuery Tags Input --&gt;</span></div><div class=\"line\">    <span class=\"comment\">&lt;!-- Switchery --&gt;</span></div><div class=\"line\">    <span class=\"comment\">&lt;!-- Select2 --&gt;</span></div><div class=\"line\">    <span class=\"comment\">&lt;!-- Parsley --&gt;</span></div><div class=\"line\">    <span class=\"comment\">&lt;!-- Autosize --&gt;</span></div><div class=\"line\">    <span class=\"comment\">&lt;!-- NProgress --&gt;</span></div><div class=\"line\">    <span class=\"comment\">&lt;!-- bootstrap-progressbar --&gt;</span></div><div class=\"line\">    <span class=\"comment\">&lt;!-- Datatables --&gt;</span></div><div class=\"line\">    <span class=\"comment\">&lt;!-- PNotify --&gt;</span></div><div class=\"line\">    <span class=\"comment\">&lt;!-- Custom Theme Scripts --&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"./static/gentelella/build/js/common.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></div></pre></td></tr></table></figure>\n<ul>\n<li>添加登陆页面Login组件<br>在src下新建Login.vue文件：</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;template&gt;</div><div class=\"line\">  &lt;div&gt;</div><div class=\"line\">    &lt;a class=&quot;hiddenanchor&quot; id=&quot;signup&quot;&gt;&lt;/a&gt;</div><div class=\"line\">    &lt;a class=&quot;hiddenanchor&quot; id=&quot;signin&quot;&gt;&lt;/a&gt;</div><div class=\"line\">    &lt;div class=&quot;login_wrapper&quot;&gt;</div><div class=\"line\">      &lt;div class=&quot;animate form login_form&quot;&gt;</div><div class=\"line\">        &lt;section class=&quot;login_content&quot;&gt;</div><div class=\"line\">          &lt;form&gt;</div><div class=\"line\">            &lt;h1&gt;管理系统&lt;/h1&gt;</div><div class=\"line\">            &lt;div&gt;</div><div class=\"line\">              &lt;input type=&quot;text&quot; class=&quot;form-control&quot; placeholder=&quot;用户名&quot; v-model=&quot;username&quot; required=&quot;&quot; /&gt;</div><div class=\"line\">            &lt;/div&gt;</div><div class=\"line\">            &lt;div&gt;</div><div class=\"line\">              &lt;input type=&quot;password&quot; class=&quot;form-control&quot; placeholder=&quot;密码&quot; v-model=&quot;password&quot; required=&quot;&quot; /&gt;</div><div class=\"line\">            &lt;/div&gt;</div><div class=\"line\">            &lt;div class=&quot;alert alert-danger alert-dismissible fade in&quot; role=&quot;alert&quot; v-show=&quot;error.shown&quot;&gt;</div><div class=\"line\">              &lt;strong&gt;错误：&lt;/strong&gt; &#123;&#123;error.text&#125;&#125;</div><div class=\"line\">            &lt;/div&gt;</div><div class=\"line\">            &lt;div&gt;</div><div class=\"line\">              &lt;a class=&quot;btn btn-default submit&quot; href=&quot;javascript:;&quot; v-on:click=&quot;login&quot;&gt;登录&lt;/a&gt;</div><div class=\"line\">            &lt;/div&gt;</div><div class=\"line\"></div><div class=\"line\">            &lt;div class=&quot;clearfix&quot;&gt;&lt;/div&gt;</div><div class=\"line\">            &lt;div&gt;</div><div class=\"line\">              &lt;h1&gt;&lt;i class=&quot;fa fa-paw&quot;&gt;&lt;/i&gt; Gentelella Alela!&lt;/h1&gt;</div><div class=\"line\">              &lt;p&gt;©2016 All Rights Reserved. Gentelella Alela! is a Bootstrap 3 template. Privacy and Terms&lt;/p&gt;</div><div class=\"line\">            &lt;/div&gt;</div><div class=\"line\">          &lt;/form&gt;</div><div class=\"line\">        &lt;/section&gt;</div><div class=\"line\">      &lt;/div&gt;</div><div class=\"line\">    &lt;/div&gt;</div><div class=\"line\">  &lt;/div&gt;</div><div class=\"line\">&lt;/template&gt;</div><div class=\"line\"></div><div class=\"line\">&lt;script&gt;</div><div class=\"line\">    export default &#123;</div><div class=\"line\">        name: &apos;Login&apos;,</div><div class=\"line\">        data() &#123;</div><div class=\"line\">            return &#123;</div><div class=\"line\">                username: &apos;&apos;,</div><div class=\"line\">                password: &apos;&apos;,</div><div class=\"line\">                error: &#123;</div><div class=\"line\">                    text: &apos;&apos;,</div><div class=\"line\">                    shown: false</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;,</div><div class=\"line\">        methods: &#123;</div><div class=\"line\">            // 登陆事件</div><div class=\"line\">            login() &#123;</div><div class=\"line\">                if (!this.username || !this.password) &#123;</div><div class=\"line\">                    this.error.text = &apos;用户名和密码不能为空&apos;</div><div class=\"line\">                    this.error.shown = true</div><div class=\"line\">                    return;</div><div class=\"line\">                &#125;</div><div class=\"line\">                this.$router.push(&apos;App&apos;)</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;,</div><div class=\"line\">        // 实例已完成以下的配置：数据观测(data observer)，属性和方法的运算， watch/event 事件回调</div><div class=\"line\">        created() &#123;</div><div class=\"line\">            this.error.shown = false</div><div class=\"line\">            $(&apos;body&apos;).attr(&apos;class&apos;, &apos;login&apos;)</div><div class=\"line\">        &#125;,</div><div class=\"line\">        // 此时元素创建完成</div><div class=\"line\">        mounted() &#123;</div><div class=\"line\">            $(&apos;input&apos;)[0].focus()</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&lt;/script&gt;</div></pre></td></tr></table></figure>\n<h3 id=\"参考-1\"><a href=\"#参考-1\" class=\"headerlink\" title=\"参考\"></a>参考</h3><p><a href=\"https://vuefe.cn/guide/\" target=\"_blank\" rel=\"external\">Vue2.0中文文档</a></p>\n<h2 id=\"结束语\"><a href=\"#结束语\" class=\"headerlink\" title=\"结束语\"></a>结束语</h2><hr>\n<p>其实使用了这么多的框架，Vue的确是做的很不错的一个呢，从Vue1.x到Vue2.x也是有很多优秀的转变呢。<br><a href=\"https://github.com/godbasin/godbasin.github.io/tree/blog-codes/vue2-notes/1-build-vue2-project\" target=\"_blank\" rel=\"external\">此处查看项目代码</a><br><a href=\"http://ofyya1gfg.bkt.clouddn.com/1-build-vue2-project/index.html\" target=\"_blank\" rel=\"external\">此处查看页面效果</a></p>\n","excerpt":"<p>最近在使用Vue2作为项目中前端的框架，《Vue2使用笔记》系列用于记录过程中的一些使用和解决方法。<br>本文记录使用Vue框架的脚手架vue-cli初步搭建项目，以及使用vue-router简单搭建路由的过程。<br>","more":"</p>\n<h2 id=\"初步使用Vue应用\"><a href=\"#初步使用Vue应用\" class=\"headerlink\" title=\"初步使用Vue应用\"></a>初步使用Vue应用</h2><hr>\n<h3 id=\"直接使用Vue源码\"><a href=\"#直接使用Vue源码\" class=\"headerlink\" title=\"直接使用Vue源码\"></a>直接使用Vue源码</h3><p>这里本骚年就不详细描述了，具体大家可以参考<a href=\"https://vuefe.cn/guide/\">Vue2.0中文文档</a>。</p>\n<h3 id=\"使用脚手架vue-cli搭建\"><a href=\"#使用脚手架vue-cli搭建\" class=\"headerlink\" title=\"使用脚手架vue-cli搭建\"></a>使用脚手架vue-cli搭建</h3><p>Vue.js提供一个<a href=\"https://vuejs-templates.github.io/webpack/index.html\">官方命令行工具vue-cli</a>，可用于快速搭建单页应用。</p>\n<ul>\n<li>安装项目</li>\n</ul>\n<figure class=\"highlight cmd\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ npm install -g vue-cli</div><div class=\"line\">$ vue init webpack vue2-test</div><div class=\"line\">$ <span class=\"built_in\">cd</span> vue-test</div><div class=\"line\">$ npm install</div></pre></td></tr></table></figure>\n<p>安装过程会询问是否需要添加一些相关的依赖（EsLint、mocha、n2n等），但由于本项目较小，也就不安装了。</p>\n<ul>\n<li>目录组织<br>生成目录组织如下：<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\">├── build/                      <span class=\"comment\"># webpack配置参数文件</span></div><div class=\"line\">│   └── ...</div><div class=\"line\">├── config/                     </div><div class=\"line\">│   ├── index.js                <span class=\"comment\"># 主项目的配置</span></div><div class=\"line\">│   └── ...</div><div class=\"line\">├── src/</div><div class=\"line\">│   ├── main.js                 <span class=\"comment\"># 应用入口</span></div><div class=\"line\">│   ├── App.vue                 <span class=\"comment\"># 主应用组件</span></div><div class=\"line\">│   ├── components/             <span class=\"comment\"># UI组件</span></div><div class=\"line\">│   │   └── ...</div><div class=\"line\">│   └── assets/                 <span class=\"comment\"># 模块资源（webpack提供）</span></div><div class=\"line\">│       └── ...</div><div class=\"line\">├── static/                     <span class=\"comment\"># 纯静态资源（打包时直接复制）</span></div><div class=\"line\">├── <span class=\"built_in\">test</span>/</div><div class=\"line\">│   └── unit/                   <span class=\"comment\"># 单元测试</span></div><div class=\"line\">│   └── e2e/                    <span class=\"comment\"># e2e tests测试</span></div><div class=\"line\">├── .babelrc                    <span class=\"comment\"># babel编译参数</span></div><div class=\"line\">├── .editorconfig.js            <span class=\"comment\"># 编辑器配置</span></div><div class=\"line\">├── .eslintrc.js                <span class=\"comment\"># eslint配置文件，用以规范团队开发编码规范</span></div><div class=\"line\">├── index.html                  <span class=\"comment\"># 主页模板</span></div><div class=\"line\">└── package.json                <span class=\"comment\"># 项目文件，记载着一些命令和依赖还有简要的项目描述信息</span></div></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>跟vue1.0长得一模一样对吧，哈哈哈。</p>\n<h3 id=\"主要的npm命令\"><a href=\"#主要的npm命令\" class=\"headerlink\" title=\"主要的npm命令\"></a>主要的npm命令</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">// 启动服务</div><div class=\"line\">npm run dev</div><div class=\"line\">// 打包生成</div><div class=\"line\">npm run build</div></pre></td></tr></table></figure>\n<blockquote>\n<p>注意，打包生成的文件为绝对定位，需在服务环境下才能打开。如果需要生成相对定位的文件，可以进行如下操作：<br>1.打开config文件夹下的index.js文件<br>2.修改build中assetsPublicPath为’./‘（原本为’/‘）<br>生成的文件将放置在dist文件夹</p>\n</blockquote>\n<h3 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h3><p><a href=\"https://vuefe.cn/guide/\">Vue2.0中文文档</a><br><a href=\"https://godbasin.github.io/2016/09/03/vue-notes-1-build-vue-project/\">《Vue使用笔记1–使用vue-cli搭建Vue项目》</a></p>\n<h2 id=\"添加路由\"><a href=\"#添加路由\" class=\"headerlink\" title=\"添加路由\"></a>添加路由</h2><hr>\n<p>下面我们给项目添加路由。</p>\n<h3 id=\"安装vue-router\"><a href=\"#安装vue-router\" class=\"headerlink\" title=\"安装vue-router\"></a>安装vue-router</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">npm install vue-router --save</div></pre></td></tr></table></figure>\n<h3 id=\"引入vue-router\"><a href=\"#引入vue-router\" class=\"headerlink\" title=\"引入vue-router\"></a>引入vue-router</h3><p>在src/main.js文件中引入vue-router，并创建简单路由，包括：</p>\n<ul>\n<li>Login：登陆页面</li>\n<li>App：管理页面</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> Vue <span class=\"keyword\">from</span> <span class=\"string\">'vue'</span> <span class=\"comment\">// 引入vue</span></div><div class=\"line\"><span class=\"keyword\">import</span> VueRouter <span class=\"keyword\">from</span> <span class=\"string\">'vue-router'</span> <span class=\"comment\">// 引入vue-router</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> App <span class=\"keyword\">from</span> <span class=\"string\">'./App'</span> <span class=\"comment\">// 引入App组件</span></div><div class=\"line\"><span class=\"keyword\">import</span> Login <span class=\"keyword\">from</span> <span class=\"string\">'./Login'</span> <span class=\"comment\">// 引入Login组件</span></div><div class=\"line\"></div><div class=\"line\">Vue.use(VueRouter) <span class=\"comment\">// 使用路由</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 设置路由信息</span></div><div class=\"line\"><span class=\"keyword\">const</span> routes = [</div><div class=\"line\">    &#123; <span class=\"attr\">path</span>: <span class=\"string\">'/login'</span>, <span class=\"attr\">component</span>: Login, <span class=\"attr\">name</span>: <span class=\"string\">'Login'</span> &#125;,</div><div class=\"line\">    &#123; <span class=\"attr\">path</span>: <span class=\"string\">'/app'</span>, <span class=\"attr\">component</span>: App, <span class=\"attr\">name</span>: <span class=\"string\">'App'</span> &#125;,</div><div class=\"line\">    &#123; <span class=\"attr\">path</span>: <span class=\"string\">'*'</span>, <span class=\"attr\">redirect</span>: &#123; <span class=\"attr\">name</span>: <span class=\"string\">'Login'</span> &#125; &#125;</div><div class=\"line\">]</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">const</span> router = <span class=\"keyword\">new</span> VueRouter(&#123;</div><div class=\"line\">    routes <span class=\"comment\">// （缩写）相当于 routes: routes</span></div><div class=\"line\">&#125;)</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">new</span> Vue(&#123;</div><div class=\"line\">    router</div><div class=\"line\">&#125;).$mount(<span class=\"string\">'#app'</span>)</div></pre></td></tr></table></figure>\n<h3 id=\"添加登陆页面\"><a href=\"#添加登陆页面\" class=\"headerlink\" title=\"添加登陆页面\"></a>添加登陆页面</h3><p>这个项目中我们使用gentelella的开源模板，故我们需要引入一些该模板的相关文件。</p>\n<ul>\n<li><p>获取gentelella模板</p>\n<ul>\n<li>从github上获取源码</li>\n<li>下载后选择需要的文件放置在/static/gentelella/文件夹中</li>\n<li>lib文件夹放置相关依赖代码文件</li>\n<li>build文件夹放置自定义的css和js文件</li>\n</ul>\n</li>\n<li><p>index.html中引入相关js和css<br>这里我简单列出大概会用到的库和组件。</p>\n</li>\n</ul>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&lt;!DOCTYPE html&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"utf-8\"</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>vue2-test<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></div><div class=\"line\">    <span class=\"comment\">&lt;!-- Bootstrap --&gt;</span></div><div class=\"line\">    <span class=\"comment\">&lt;!-- Font Awesome --&gt;</span></div><div class=\"line\">    <span class=\"comment\">&lt;!-- NProgress --&gt;</span></div><div class=\"line\">    <span class=\"comment\">&lt;!-- jQuery custom content scroller --&gt;</span></div><div class=\"line\">    <span class=\"comment\">&lt;!-- iCheck --&gt;</span></div><div class=\"line\">    <span class=\"comment\">&lt;!-- Select2 --&gt;</span></div><div class=\"line\">    <span class=\"comment\">&lt;!-- Switchery --&gt;</span></div><div class=\"line\">    <span class=\"comment\">&lt;!-- Datatables --&gt;</span></div><div class=\"line\">    <span class=\"comment\">&lt;!-- PNotify --&gt;</span></div><div class=\"line\">    <span class=\"comment\">&lt;!-- Custom Theme Style --&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">link</span> <span class=\"attr\">href</span>=<span class=\"string\">\"./static/gentelella/build/css/custom.css\"</span> <span class=\"attr\">rel</span>=<span class=\"string\">\"stylesheet\"</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">link</span> <span class=\"attr\">href</span>=<span class=\"string\">\"./static/gentelella/build/css/common.css\"</span> <span class=\"attr\">rel</span>=<span class=\"string\">\"stylesheet\"</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span> <span class=\"attr\">class</span>=<span class=\"string\">\"nav-md\"</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"app\"</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">router-view</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">router-view</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">    <span class=\"comment\">&lt;!-- built files will be auto injected --&gt;</span></div><div class=\"line\">    <span class=\"comment\">&lt;!-- jQuery --&gt;</span></div><div class=\"line\">    <span class=\"comment\">&lt;!-- Bootstrap --&gt;</span></div><div class=\"line\">    <span class=\"comment\">&lt;!-- bootstrap-daterangepicker --&gt;</span></div><div class=\"line\">    <span class=\"comment\">&lt;!-- FastClick --&gt;</span></div><div class=\"line\">    <span class=\"comment\">&lt;!-- NProgress --&gt;</span></div><div class=\"line\">    <span class=\"comment\">&lt;!-- jQuery custom content scroller --&gt;</span></div><div class=\"line\">    <span class=\"comment\">&lt;!-- iCheck --&gt;</span></div><div class=\"line\">    <span class=\"comment\">&lt;!-- jQuery Tags Input --&gt;</span></div><div class=\"line\">    <span class=\"comment\">&lt;!-- Switchery --&gt;</span></div><div class=\"line\">    <span class=\"comment\">&lt;!-- Select2 --&gt;</span></div><div class=\"line\">    <span class=\"comment\">&lt;!-- Parsley --&gt;</span></div><div class=\"line\">    <span class=\"comment\">&lt;!-- Autosize --&gt;</span></div><div class=\"line\">    <span class=\"comment\">&lt;!-- NProgress --&gt;</span></div><div class=\"line\">    <span class=\"comment\">&lt;!-- bootstrap-progressbar --&gt;</span></div><div class=\"line\">    <span class=\"comment\">&lt;!-- Datatables --&gt;</span></div><div class=\"line\">    <span class=\"comment\">&lt;!-- PNotify --&gt;</span></div><div class=\"line\">    <span class=\"comment\">&lt;!-- Custom Theme Scripts --&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"./static/gentelella/build/js/common.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></div></pre></td></tr></table></figure>\n<ul>\n<li>添加登陆页面Login组件<br>在src下新建Login.vue文件：</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;template&gt;</div><div class=\"line\">  &lt;div&gt;</div><div class=\"line\">    &lt;a class=&quot;hiddenanchor&quot; id=&quot;signup&quot;&gt;&lt;/a&gt;</div><div class=\"line\">    &lt;a class=&quot;hiddenanchor&quot; id=&quot;signin&quot;&gt;&lt;/a&gt;</div><div class=\"line\">    &lt;div class=&quot;login_wrapper&quot;&gt;</div><div class=\"line\">      &lt;div class=&quot;animate form login_form&quot;&gt;</div><div class=\"line\">        &lt;section class=&quot;login_content&quot;&gt;</div><div class=\"line\">          &lt;form&gt;</div><div class=\"line\">            &lt;h1&gt;管理系统&lt;/h1&gt;</div><div class=\"line\">            &lt;div&gt;</div><div class=\"line\">              &lt;input type=&quot;text&quot; class=&quot;form-control&quot; placeholder=&quot;用户名&quot; v-model=&quot;username&quot; required=&quot;&quot; /&gt;</div><div class=\"line\">            &lt;/div&gt;</div><div class=\"line\">            &lt;div&gt;</div><div class=\"line\">              &lt;input type=&quot;password&quot; class=&quot;form-control&quot; placeholder=&quot;密码&quot; v-model=&quot;password&quot; required=&quot;&quot; /&gt;</div><div class=\"line\">            &lt;/div&gt;</div><div class=\"line\">            &lt;div class=&quot;alert alert-danger alert-dismissible fade in&quot; role=&quot;alert&quot; v-show=&quot;error.shown&quot;&gt;</div><div class=\"line\">              &lt;strong&gt;错误：&lt;/strong&gt; &#123;&#123;error.text&#125;&#125;</div><div class=\"line\">            &lt;/div&gt;</div><div class=\"line\">            &lt;div&gt;</div><div class=\"line\">              &lt;a class=&quot;btn btn-default submit&quot; href=&quot;javascript:;&quot; v-on:click=&quot;login&quot;&gt;登录&lt;/a&gt;</div><div class=\"line\">            &lt;/div&gt;</div><div class=\"line\"></div><div class=\"line\">            &lt;div class=&quot;clearfix&quot;&gt;&lt;/div&gt;</div><div class=\"line\">            &lt;div&gt;</div><div class=\"line\">              &lt;h1&gt;&lt;i class=&quot;fa fa-paw&quot;&gt;&lt;/i&gt; Gentelella Alela!&lt;/h1&gt;</div><div class=\"line\">              &lt;p&gt;©2016 All Rights Reserved. Gentelella Alela! is a Bootstrap 3 template. Privacy and Terms&lt;/p&gt;</div><div class=\"line\">            &lt;/div&gt;</div><div class=\"line\">          &lt;/form&gt;</div><div class=\"line\">        &lt;/section&gt;</div><div class=\"line\">      &lt;/div&gt;</div><div class=\"line\">    &lt;/div&gt;</div><div class=\"line\">  &lt;/div&gt;</div><div class=\"line\">&lt;/template&gt;</div><div class=\"line\"></div><div class=\"line\">&lt;script&gt;</div><div class=\"line\">    export default &#123;</div><div class=\"line\">        name: &apos;Login&apos;,</div><div class=\"line\">        data() &#123;</div><div class=\"line\">            return &#123;</div><div class=\"line\">                username: &apos;&apos;,</div><div class=\"line\">                password: &apos;&apos;,</div><div class=\"line\">                error: &#123;</div><div class=\"line\">                    text: &apos;&apos;,</div><div class=\"line\">                    shown: false</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;,</div><div class=\"line\">        methods: &#123;</div><div class=\"line\">            // 登陆事件</div><div class=\"line\">            login() &#123;</div><div class=\"line\">                if (!this.username || !this.password) &#123;</div><div class=\"line\">                    this.error.text = &apos;用户名和密码不能为空&apos;</div><div class=\"line\">                    this.error.shown = true</div><div class=\"line\">                    return;</div><div class=\"line\">                &#125;</div><div class=\"line\">                this.$router.push(&apos;App&apos;)</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;,</div><div class=\"line\">        // 实例已完成以下的配置：数据观测(data observer)，属性和方法的运算， watch/event 事件回调</div><div class=\"line\">        created() &#123;</div><div class=\"line\">            this.error.shown = false</div><div class=\"line\">            $(&apos;body&apos;).attr(&apos;class&apos;, &apos;login&apos;)</div><div class=\"line\">        &#125;,</div><div class=\"line\">        // 此时元素创建完成</div><div class=\"line\">        mounted() &#123;</div><div class=\"line\">            $(&apos;input&apos;)[0].focus()</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&lt;/script&gt;</div></pre></td></tr></table></figure>\n<h3 id=\"参考-1\"><a href=\"#参考-1\" class=\"headerlink\" title=\"参考\"></a>参考</h3><p><a href=\"https://vuefe.cn/guide/\">Vue2.0中文文档</a></p>\n<h2 id=\"结束语\"><a href=\"#结束语\" class=\"headerlink\" title=\"结束语\"></a>结束语</h2><hr>\n<p>其实使用了这么多的框架，Vue的确是做的很不错的一个呢，从Vue1.x到Vue2.x也是有很多优秀的转变呢。<br><a href=\"https://github.com/godbasin/godbasin.github.io/tree/blog-codes/vue2-notes/1-build-vue2-project\">此处查看项目代码</a><br><a href=\"http://ofyya1gfg.bkt.clouddn.com/1-build-vue2-project/index.html\">此处查看页面效果</a></p>"},{"title":"Vue使用笔记1--使用vue-cli搭建Vue项目","date":"2016-09-03T03:04:35.000Z","_content":"最近在学习使用Vue作为前端的框架，《Vue使用笔记》系列用于记录过程中的一些使用和解决方法。\n本文记录使用Vue框架的脚手架vue-cli初步搭建项目的过程。\n<!--more-->\n\n## 初步使用Vue应用\n\n### 直接使用Vue源码\n- 下载[Vue生产版本](http://cn.vuejs.org/js/vue.min.js)或[Vue开发版本](http://cn.vuejs.org/js/vue.js)\n- 用`<script>`标签引入，Vue会被注册为一个全局变量\n\n### 使用脚手架vue-cli搭建\n当我们真正开发一个应用的时候，我们不可避免的会用到一大堆的工具，模块化、预处理器、热模块加载、代码校验和测试。\n\nVue.js提供一个[官方命令行工具vue-cli](https://vuejs-templates.github.io/webpack/index.html)，可用于快速搭建大型单页应用。\n\n使用vue-cli，让一个简单的命令行工具来帮助你快速的构建一个拥有强大构建能力的Vue.js项目：单文件Vue组件，热加载，保存时检查代码，单元测试等。\n\n- 安装项目\n\n``` cmd\n$ npm install -g vue-cli\n$ vue init webpack vue-test\n$ cd vue-test\n$ npm install\n```\n安装过程会询问是否需要添加一些相关的依赖（编码规范、测试等），如图\n![image](http://o905ne85q.bkt.clouddn.com/8EC6.tmp.png)\n\n- 目录组织\n如图，生成目录组织如下（这里木有显示.开头的文件）：\n![image](http://o905ne85q.bkt.clouddn.com/9B08.tmp.png)\n\n``` bash\n├── build/                      # webpack配置参数文件\n│   └── ...\n├── config/                     \n│   ├── index.js                # 主项目的配置\n│   └── ...\n├── src/\n│   ├── main.js                 # 应用入口\n│   ├── App.vue                 # 主应用组件\n│   ├── components/             # UI组件\n│   │   └── ...\n│   └── assets/                 # 模块资源（webpack提供）\n│       └── ...\n├── static/                     # 纯静态资源（打包时直接复制）\n├── test/\n│   └── unit/                   # 单元测试\n│   └── e2e/                    # e2e tests测试\n├── .babelrc                    # babel编译参数\n├── .editorconfig.js            # 编辑器配置\n├── .eslintrc.js                # eslint配置文件，用以规范团队开发编码规范\n├── index.html                  # 主页模板\n└── package.json                # 项目文件，记载着一些命令和依赖还有简要的项目描述信息\n```\n\n### 主要的npm命令\n- 启动服务\n\n``` bash\nnpm run dec\n```\n效果如下：\n![image](http://o905ne85q.bkt.clouddn.com/A221.tmp.png)\n\n- 打包生成\n\n``` bash\nnpm run build\n```\n\n  - 注意，打包生成的文件为绝对定位，需在服务环境下才能打开。如果需要生成相对定位的文件，可以进行如下操作：\n\n  - 1.打开config文件夹下的index.js文件\n![image](http://o905ne85q.bkt.clouddn.com/7BB8.tmp.png)\n\n  - 2.修改build中assetsPublicPath为''（原本为'/'）\n\n``` javascript\nmodule.exports = {\n  build: { //打包生成项目相关配置\n    env: require('./prod.env'), //环境为生产环境\n    index: path.resolve(__dirname, '../dist/index.html'), //打包后的主页面位置\n    assetsRoot: path.resolve(__dirname, '../dist'), //打包后的其余文件的根位置\n    assetsSubDirectory: 'static', //其余文件的目录\n    assetsPublicPath: '', //相对或绝对位置\n    productionSourceMap: true, //是否生产map文件\n    productionGzip: false, //压缩\n    productionGzipExtensions: ['js', 'css'] //需要压缩的文件类型\n  },\n  dev: { //启动服务、热加载相关配置\n    env: require('./dev.env'), //环境为开发环境\n    port: 8080, //服务端口\n    proxyTable: {}\n  }\n}\n```\n\n\n  - 生成的文件将放置在dist文件夹，如图：\n![image](http://o905ne85q.bkt.clouddn.com/3B27.tmp.png)\n\n  - 运行单元测试\n\n``` bash\nnpm run unit\n```\n\n- 运行e2e测试\n\n``` bash\nnpm run e2e\n```\n\n- 运行单元测试和e2e测试\n\n``` bash\nnpm run test\n```\n\n### 参考\n[vue-cli官方文档](https://vuejs-templates.github.io/webpack/index.html)\n[《使用Vue构建中(大)型应用》](http://www.tuicool.com/articles/mYVvmyA)\n\n\n## 快速浏览项目\n-----\n项目生成完毕，现在我们快速查看一下Vue项目的使用吧。\n### index.html\n查看主页面index.html，可以看到如下代码：\n``` html\n<!DOCTYPE html>\n<html>\n  <head>\n    <meta charset=\"utf-8\">\n    <title>vue-test</title>\n  </head>\n  <body>\n    <app></app>\n    <!-- built files will be auto injected -->\n  </body>\n</html>\n```\n其中：<app></app>是主应用组件入口，我们可以在src文件夹的App.vue查看该组件，动态生成的js文件会在其后导入加载。\n\n### main.js\n该文件主要负责初始化主组件，当然路由也可以在该文件中进行处理，后面的章节我们会讲到。\n``` javascript\nimport Vue from 'vue' //导入vue\nimport App from './App' //导入App主组件（App.vue）\nnew Vue({\n  el: 'body', //el为实例提供挂载元素\n  components: { App } //components包含组件\n})\n```\n\n### App.vue\n主组件App，如下：\n``` javascript\n<!--模板-->\n<template> \n\t<div id=\"app\">\n\t\t<img class=\"logo\" src=\"./assets/logo.png\">\n\t\t<!--使用Hello组件-->\n\t\t<hello></hello>\n\t\t<p>Welcome to your Vue.js app!</p>\n\t</div>\n</template>\n<!--js-->\n<script>\nimport Hello from './components/Hello' //导入Hello组件\nexport default { //输出组件\n\tcomponents: {\n\t\tHello\n\t}\n}\n</script>\n<!--样式-->\n<style>\n#app {\n\tcolor: #2c3e50;\n\tmargin-top: -100px;\n\tmax-width: 600px;\n\tfont-family: Source Sans Pro, Helvetica, sans-serif;\n\ttext-align: center;\n}\n</style>\n```\n\n我们可以看到，Vue的组件中，每一个组件的样式style、模板template和脚本script集合成了一整个文件，每个文件就是一个组件。\n至于Hello.vue文件与该文件大同小异，这里就不分析啦。\n\n## Vue简单介绍\n-----\n这里我们简单介绍一下Vue，以及稍微比较前面讲过的[Angular](https://godbasin.github.io/2016/07/01/angular-note-1-create-angular-project/)和[React](https://godbasin.github.io/2016/08/06/react-notes-1-build-react-project/)。\n\n### Vue概述\nVue.js是一个构建数据驱动的web界面的库。Vue.js的目标是通过尽可能简单的API实现响应的数据绑定和组合的视图组件。\n\n- 对比其它框架\n[官方文档](http://cn.vuejs.org/guide/comparison.html)中已经详细介绍Vue和Angular、React、Ember等框架的比较，大家可以查看。\n\n### 响应的数据绑定\nVue.js拥抱数据驱动的视图概念。\n通俗地讲，它意味着我们在普通HTML模板中使用特殊的语法将DOM“绑定”到底层数据。一旦创建了绑定，DOM将与数据保持同步。每当修改了数据，DOM便相应地更新。\n- 对比Angular\n  - Vue默认使用单向绑定，可开启双向绑定。Angular使用双向绑定\n  - Vue.js使用基于依赖追踪的观察系统并且异步列队更新，所有的数据变化都是独立地触发。Angular使用脏检查，当watcher越来越多时会变得越来越慢\n- 对比React\n  - Vue使用真实DOM作为模板，数据绑定到真实节点。React使用Virtual DOM，难以自己控制DOM\n  - Vue中指令和组件分得更清晰。React使用JSX，渲染函数常常包含大量的逻辑\n\n### 组件系统\n组件系统是Vue.js另一个重要概念，它提供了一种抽象，让我们可以用独立可复用的小组件来构建大型应用。如果我们考虑到这点，几乎任意类型的应用的界面都可以抽象为一个组件树。\n实际上，一个典型的用Vue.js构建的大型应用将形成一个组件树。组件系统是用Vue.js构建大型应用的基础。\n- 对比Angular\n  - Angular中几乎很少有组件的概念，要进行也只有指令能与Vue组件进行比较\n  - Vue.js指令只封装DOM操作，而组件代表一个自给自足的独立单元。Angular中视图和数据逻辑有不少相混的地方\n- 对比React\n  - React中组件与Vue组件很相似，props、组件间通信等有很多相似的概念\n  - Vue中样式、模板和脚本分层更清晰，React中则比较混杂\n\n### 参考\n[《Vue概述》](http://cn.vuejs.org/guide/overview.html)\n\n## 结束语\n-----\n认识了Vue之后，发现它结合了其他框架优秀的地方，并且使得项目的快速搭建变得更加简单。当然每个框架都各有千秋，具体的使用要结合项目具体分析才行哦。\n[此处查看项目代码](https://github.com/godbasin/godbasin.github.io/tree/blog-codes/vue-notes/1-build-vue-project)\n[此处查看页面效果](http://o9zkatzym.bkt.clouddn.com/1-build-vue-project/index.html)","source":"_posts/vue-notes-1-build-vue-project.md","raw":"---\ntitle: Vue使用笔记1--使用vue-cli搭建Vue项目\ndate: 2016-09-03 11:04:35\ncategories: vue八宝粥\ntags: 笔记\n---\n最近在学习使用Vue作为前端的框架，《Vue使用笔记》系列用于记录过程中的一些使用和解决方法。\n本文记录使用Vue框架的脚手架vue-cli初步搭建项目的过程。\n<!--more-->\n\n## 初步使用Vue应用\n\n### 直接使用Vue源码\n- 下载[Vue生产版本](http://cn.vuejs.org/js/vue.min.js)或[Vue开发版本](http://cn.vuejs.org/js/vue.js)\n- 用`<script>`标签引入，Vue会被注册为一个全局变量\n\n### 使用脚手架vue-cli搭建\n当我们真正开发一个应用的时候，我们不可避免的会用到一大堆的工具，模块化、预处理器、热模块加载、代码校验和测试。\n\nVue.js提供一个[官方命令行工具vue-cli](https://vuejs-templates.github.io/webpack/index.html)，可用于快速搭建大型单页应用。\n\n使用vue-cli，让一个简单的命令行工具来帮助你快速的构建一个拥有强大构建能力的Vue.js项目：单文件Vue组件，热加载，保存时检查代码，单元测试等。\n\n- 安装项目\n\n``` cmd\n$ npm install -g vue-cli\n$ vue init webpack vue-test\n$ cd vue-test\n$ npm install\n```\n安装过程会询问是否需要添加一些相关的依赖（编码规范、测试等），如图\n![image](http://o905ne85q.bkt.clouddn.com/8EC6.tmp.png)\n\n- 目录组织\n如图，生成目录组织如下（这里木有显示.开头的文件）：\n![image](http://o905ne85q.bkt.clouddn.com/9B08.tmp.png)\n\n``` bash\n├── build/                      # webpack配置参数文件\n│   └── ...\n├── config/                     \n│   ├── index.js                # 主项目的配置\n│   └── ...\n├── src/\n│   ├── main.js                 # 应用入口\n│   ├── App.vue                 # 主应用组件\n│   ├── components/             # UI组件\n│   │   └── ...\n│   └── assets/                 # 模块资源（webpack提供）\n│       └── ...\n├── static/                     # 纯静态资源（打包时直接复制）\n├── test/\n│   └── unit/                   # 单元测试\n│   └── e2e/                    # e2e tests测试\n├── .babelrc                    # babel编译参数\n├── .editorconfig.js            # 编辑器配置\n├── .eslintrc.js                # eslint配置文件，用以规范团队开发编码规范\n├── index.html                  # 主页模板\n└── package.json                # 项目文件，记载着一些命令和依赖还有简要的项目描述信息\n```\n\n### 主要的npm命令\n- 启动服务\n\n``` bash\nnpm run dec\n```\n效果如下：\n![image](http://o905ne85q.bkt.clouddn.com/A221.tmp.png)\n\n- 打包生成\n\n``` bash\nnpm run build\n```\n\n  - 注意，打包生成的文件为绝对定位，需在服务环境下才能打开。如果需要生成相对定位的文件，可以进行如下操作：\n\n  - 1.打开config文件夹下的index.js文件\n![image](http://o905ne85q.bkt.clouddn.com/7BB8.tmp.png)\n\n  - 2.修改build中assetsPublicPath为''（原本为'/'）\n\n``` javascript\nmodule.exports = {\n  build: { //打包生成项目相关配置\n    env: require('./prod.env'), //环境为生产环境\n    index: path.resolve(__dirname, '../dist/index.html'), //打包后的主页面位置\n    assetsRoot: path.resolve(__dirname, '../dist'), //打包后的其余文件的根位置\n    assetsSubDirectory: 'static', //其余文件的目录\n    assetsPublicPath: '', //相对或绝对位置\n    productionSourceMap: true, //是否生产map文件\n    productionGzip: false, //压缩\n    productionGzipExtensions: ['js', 'css'] //需要压缩的文件类型\n  },\n  dev: { //启动服务、热加载相关配置\n    env: require('./dev.env'), //环境为开发环境\n    port: 8080, //服务端口\n    proxyTable: {}\n  }\n}\n```\n\n\n  - 生成的文件将放置在dist文件夹，如图：\n![image](http://o905ne85q.bkt.clouddn.com/3B27.tmp.png)\n\n  - 运行单元测试\n\n``` bash\nnpm run unit\n```\n\n- 运行e2e测试\n\n``` bash\nnpm run e2e\n```\n\n- 运行单元测试和e2e测试\n\n``` bash\nnpm run test\n```\n\n### 参考\n[vue-cli官方文档](https://vuejs-templates.github.io/webpack/index.html)\n[《使用Vue构建中(大)型应用》](http://www.tuicool.com/articles/mYVvmyA)\n\n\n## 快速浏览项目\n-----\n项目生成完毕，现在我们快速查看一下Vue项目的使用吧。\n### index.html\n查看主页面index.html，可以看到如下代码：\n``` html\n<!DOCTYPE html>\n<html>\n  <head>\n    <meta charset=\"utf-8\">\n    <title>vue-test</title>\n  </head>\n  <body>\n    <app></app>\n    <!-- built files will be auto injected -->\n  </body>\n</html>\n```\n其中：<app></app>是主应用组件入口，我们可以在src文件夹的App.vue查看该组件，动态生成的js文件会在其后导入加载。\n\n### main.js\n该文件主要负责初始化主组件，当然路由也可以在该文件中进行处理，后面的章节我们会讲到。\n``` javascript\nimport Vue from 'vue' //导入vue\nimport App from './App' //导入App主组件（App.vue）\nnew Vue({\n  el: 'body', //el为实例提供挂载元素\n  components: { App } //components包含组件\n})\n```\n\n### App.vue\n主组件App，如下：\n``` javascript\n<!--模板-->\n<template> \n\t<div id=\"app\">\n\t\t<img class=\"logo\" src=\"./assets/logo.png\">\n\t\t<!--使用Hello组件-->\n\t\t<hello></hello>\n\t\t<p>Welcome to your Vue.js app!</p>\n\t</div>\n</template>\n<!--js-->\n<script>\nimport Hello from './components/Hello' //导入Hello组件\nexport default { //输出组件\n\tcomponents: {\n\t\tHello\n\t}\n}\n</script>\n<!--样式-->\n<style>\n#app {\n\tcolor: #2c3e50;\n\tmargin-top: -100px;\n\tmax-width: 600px;\n\tfont-family: Source Sans Pro, Helvetica, sans-serif;\n\ttext-align: center;\n}\n</style>\n```\n\n我们可以看到，Vue的组件中，每一个组件的样式style、模板template和脚本script集合成了一整个文件，每个文件就是一个组件。\n至于Hello.vue文件与该文件大同小异，这里就不分析啦。\n\n## Vue简单介绍\n-----\n这里我们简单介绍一下Vue，以及稍微比较前面讲过的[Angular](https://godbasin.github.io/2016/07/01/angular-note-1-create-angular-project/)和[React](https://godbasin.github.io/2016/08/06/react-notes-1-build-react-project/)。\n\n### Vue概述\nVue.js是一个构建数据驱动的web界面的库。Vue.js的目标是通过尽可能简单的API实现响应的数据绑定和组合的视图组件。\n\n- 对比其它框架\n[官方文档](http://cn.vuejs.org/guide/comparison.html)中已经详细介绍Vue和Angular、React、Ember等框架的比较，大家可以查看。\n\n### 响应的数据绑定\nVue.js拥抱数据驱动的视图概念。\n通俗地讲，它意味着我们在普通HTML模板中使用特殊的语法将DOM“绑定”到底层数据。一旦创建了绑定，DOM将与数据保持同步。每当修改了数据，DOM便相应地更新。\n- 对比Angular\n  - Vue默认使用单向绑定，可开启双向绑定。Angular使用双向绑定\n  - Vue.js使用基于依赖追踪的观察系统并且异步列队更新，所有的数据变化都是独立地触发。Angular使用脏检查，当watcher越来越多时会变得越来越慢\n- 对比React\n  - Vue使用真实DOM作为模板，数据绑定到真实节点。React使用Virtual DOM，难以自己控制DOM\n  - Vue中指令和组件分得更清晰。React使用JSX，渲染函数常常包含大量的逻辑\n\n### 组件系统\n组件系统是Vue.js另一个重要概念，它提供了一种抽象，让我们可以用独立可复用的小组件来构建大型应用。如果我们考虑到这点，几乎任意类型的应用的界面都可以抽象为一个组件树。\n实际上，一个典型的用Vue.js构建的大型应用将形成一个组件树。组件系统是用Vue.js构建大型应用的基础。\n- 对比Angular\n  - Angular中几乎很少有组件的概念，要进行也只有指令能与Vue组件进行比较\n  - Vue.js指令只封装DOM操作，而组件代表一个自给自足的独立单元。Angular中视图和数据逻辑有不少相混的地方\n- 对比React\n  - React中组件与Vue组件很相似，props、组件间通信等有很多相似的概念\n  - Vue中样式、模板和脚本分层更清晰，React中则比较混杂\n\n### 参考\n[《Vue概述》](http://cn.vuejs.org/guide/overview.html)\n\n## 结束语\n-----\n认识了Vue之后，发现它结合了其他框架优秀的地方，并且使得项目的快速搭建变得更加简单。当然每个框架都各有千秋，具体的使用要结合项目具体分析才行哦。\n[此处查看项目代码](https://github.com/godbasin/godbasin.github.io/tree/blog-codes/vue-notes/1-build-vue-project)\n[此处查看页面效果](http://o9zkatzym.bkt.clouddn.com/1-build-vue-project/index.html)","slug":"vue-notes-1-build-vue-project","published":1,"updated":"2016-10-29T17:38:35.350Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cix45hui9004zxotuqo3nwx6o","content":"<p>最近在学习使用Vue作为前端的框架，《Vue使用笔记》系列用于记录过程中的一些使用和解决方法。<br>本文记录使用Vue框架的脚手架vue-cli初步搭建项目的过程。<br><a id=\"more\"></a></p>\n<h2 id=\"初步使用Vue应用\"><a href=\"#初步使用Vue应用\" class=\"headerlink\" title=\"初步使用Vue应用\"></a>初步使用Vue应用</h2><h3 id=\"直接使用Vue源码\"><a href=\"#直接使用Vue源码\" class=\"headerlink\" title=\"直接使用Vue源码\"></a>直接使用Vue源码</h3><ul>\n<li>下载<a href=\"http://cn.vuejs.org/js/vue.min.js\" target=\"_blank\" rel=\"external\">Vue生产版本</a>或<a href=\"http://cn.vuejs.org/js/vue.js\" target=\"_blank\" rel=\"external\">Vue开发版本</a></li>\n<li>用<code>&lt;script&gt;</code>标签引入，Vue会被注册为一个全局变量</li>\n</ul>\n<h3 id=\"使用脚手架vue-cli搭建\"><a href=\"#使用脚手架vue-cli搭建\" class=\"headerlink\" title=\"使用脚手架vue-cli搭建\"></a>使用脚手架vue-cli搭建</h3><p>当我们真正开发一个应用的时候，我们不可避免的会用到一大堆的工具，模块化、预处理器、热模块加载、代码校验和测试。</p>\n<p>Vue.js提供一个<a href=\"https://vuejs-templates.github.io/webpack/index.html\" target=\"_blank\" rel=\"external\">官方命令行工具vue-cli</a>，可用于快速搭建大型单页应用。</p>\n<p>使用vue-cli，让一个简单的命令行工具来帮助你快速的构建一个拥有强大构建能力的Vue.js项目：单文件Vue组件，热加载，保存时检查代码，单元测试等。</p>\n<ul>\n<li>安装项目</li>\n</ul>\n<figure class=\"highlight cmd\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ npm install -g vue-cli</div><div class=\"line\">$ vue init webpack vue-test</div><div class=\"line\">$ <span class=\"built_in\">cd</span> vue-test</div><div class=\"line\">$ npm install</div></pre></td></tr></table></figure>\n<p>安装过程会询问是否需要添加一些相关的依赖（编码规范、测试等），如图<br><img src=\"http://o905ne85q.bkt.clouddn.com/8EC6.tmp.png\" alt=\"image\"></p>\n<ul>\n<li>目录组织<br>如图，生成目录组织如下（这里木有显示.开头的文件）：<br><img src=\"http://o905ne85q.bkt.clouddn.com/9B08.tmp.png\" alt=\"image\"></li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\">├── build/                      <span class=\"comment\"># webpack配置参数文件</span></div><div class=\"line\">│   └── ...</div><div class=\"line\">├── config/                     </div><div class=\"line\">│   ├── index.js                <span class=\"comment\"># 主项目的配置</span></div><div class=\"line\">│   └── ...</div><div class=\"line\">├── src/</div><div class=\"line\">│   ├── main.js                 <span class=\"comment\"># 应用入口</span></div><div class=\"line\">│   ├── App.vue                 <span class=\"comment\"># 主应用组件</span></div><div class=\"line\">│   ├── components/             <span class=\"comment\"># UI组件</span></div><div class=\"line\">│   │   └── ...</div><div class=\"line\">│   └── assets/                 <span class=\"comment\"># 模块资源（webpack提供）</span></div><div class=\"line\">│       └── ...</div><div class=\"line\">├── static/                     <span class=\"comment\"># 纯静态资源（打包时直接复制）</span></div><div class=\"line\">├── <span class=\"built_in\">test</span>/</div><div class=\"line\">│   └── unit/                   <span class=\"comment\"># 单元测试</span></div><div class=\"line\">│   └── e2e/                    <span class=\"comment\"># e2e tests测试</span></div><div class=\"line\">├── .babelrc                    <span class=\"comment\"># babel编译参数</span></div><div class=\"line\">├── .editorconfig.js            <span class=\"comment\"># 编辑器配置</span></div><div class=\"line\">├── .eslintrc.js                <span class=\"comment\"># eslint配置文件，用以规范团队开发编码规范</span></div><div class=\"line\">├── index.html                  <span class=\"comment\"># 主页模板</span></div><div class=\"line\">└── package.json                <span class=\"comment\"># 项目文件，记载着一些命令和依赖还有简要的项目描述信息</span></div></pre></td></tr></table></figure>\n<h3 id=\"主要的npm命令\"><a href=\"#主要的npm命令\" class=\"headerlink\" title=\"主要的npm命令\"></a>主要的npm命令</h3><ul>\n<li>启动服务</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">npm run dec</div></pre></td></tr></table></figure>\n<p>效果如下：<br><img src=\"http://o905ne85q.bkt.clouddn.com/A221.tmp.png\" alt=\"image\"></p>\n<ul>\n<li>打包生成</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">npm run build</div></pre></td></tr></table></figure>\n<ul>\n<li><p>注意，打包生成的文件为绝对定位，需在服务环境下才能打开。如果需要生成相对定位的文件，可以进行如下操作：</p>\n</li>\n<li><p>1.打开config文件夹下的index.js文件<br><img src=\"http://o905ne85q.bkt.clouddn.com/7BB8.tmp.png\" alt=\"image\"></p>\n</li>\n<li><p>2.修改build中assetsPublicPath为’’（原本为’/‘）</p>\n</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</div><div class=\"line\">  <span class=\"attr\">build</span>: &#123; <span class=\"comment\">//打包生成项目相关配置</span></div><div class=\"line\">    env: <span class=\"built_in\">require</span>(<span class=\"string\">'./prod.env'</span>), <span class=\"comment\">//环境为生产环境</span></div><div class=\"line\">    index: path.resolve(__dirname, <span class=\"string\">'../dist/index.html'</span>), <span class=\"comment\">//打包后的主页面位置</span></div><div class=\"line\">    assetsRoot: path.resolve(__dirname, <span class=\"string\">'../dist'</span>), <span class=\"comment\">//打包后的其余文件的根位置</span></div><div class=\"line\">    assetsSubDirectory: <span class=\"string\">'static'</span>, <span class=\"comment\">//其余文件的目录</span></div><div class=\"line\">    assetsPublicPath: <span class=\"string\">''</span>, <span class=\"comment\">//相对或绝对位置</span></div><div class=\"line\">    productionSourceMap: <span class=\"literal\">true</span>, <span class=\"comment\">//是否生产map文件</span></div><div class=\"line\">    productionGzip: <span class=\"literal\">false</span>, <span class=\"comment\">//压缩</span></div><div class=\"line\">    productionGzipExtensions: [<span class=\"string\">'js'</span>, <span class=\"string\">'css'</span>] <span class=\"comment\">//需要压缩的文件类型</span></div><div class=\"line\">  &#125;,</div><div class=\"line\">  <span class=\"attr\">dev</span>: &#123; <span class=\"comment\">//启动服务、热加载相关配置</span></div><div class=\"line\">    env: <span class=\"built_in\">require</span>(<span class=\"string\">'./dev.env'</span>), <span class=\"comment\">//环境为开发环境</span></div><div class=\"line\">    port: <span class=\"number\">8080</span>, <span class=\"comment\">//服务端口</span></div><div class=\"line\">    proxyTable: &#123;&#125;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<ul>\n<li><p>生成的文件将放置在dist文件夹，如图：<br><img src=\"http://o905ne85q.bkt.clouddn.com/3B27.tmp.png\" alt=\"image\"></p>\n</li>\n<li><p>运行单元测试</p>\n</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">npm run unit</div></pre></td></tr></table></figure>\n<ul>\n<li>运行e2e测试</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">npm run e2e</div></pre></td></tr></table></figure>\n<ul>\n<li>运行单元测试和e2e测试</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">npm run <span class=\"built_in\">test</span></div></pre></td></tr></table></figure>\n<h3 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h3><p><a href=\"https://vuejs-templates.github.io/webpack/index.html\" target=\"_blank\" rel=\"external\">vue-cli官方文档</a><br><a href=\"http://www.tuicool.com/articles/mYVvmyA\" target=\"_blank\" rel=\"external\">《使用Vue构建中(大)型应用》</a></p>\n<h2 id=\"快速浏览项目\"><a href=\"#快速浏览项目\" class=\"headerlink\" title=\"快速浏览项目\"></a>快速浏览项目</h2><hr>\n<p>项目生成完毕，现在我们快速查看一下Vue项目的使用吧。</p>\n<h3 id=\"index-html\"><a href=\"#index-html\" class=\"headerlink\" title=\"index.html\"></a>index.html</h3><p>查看主页面index.html，可以看到如下代码：<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&lt;!DOCTYPE html&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"utf-8\"</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>vue-test<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">app</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">app</span>&gt;</span></div><div class=\"line\">    <span class=\"comment\">&lt;!-- built files will be auto injected --&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<p>其中：<app></app>是主应用组件入口，我们可以在src文件夹的App.vue查看该组件，动态生成的js文件会在其后导入加载。</p>\n<h3 id=\"main-js\"><a href=\"#main-js\" class=\"headerlink\" title=\"main.js\"></a>main.js</h3><p>该文件主要负责初始化主组件，当然路由也可以在该文件中进行处理，后面的章节我们会讲到。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> Vue <span class=\"keyword\">from</span> <span class=\"string\">'vue'</span> <span class=\"comment\">//导入vue</span></div><div class=\"line\"><span class=\"keyword\">import</span> App <span class=\"keyword\">from</span> <span class=\"string\">'./App'</span> <span class=\"comment\">//导入App主组件（App.vue）</span></div><div class=\"line\"><span class=\"keyword\">new</span> Vue(&#123;</div><div class=\"line\">  <span class=\"attr\">el</span>: <span class=\"string\">'body'</span>, <span class=\"comment\">//el为实例提供挂载元素</span></div><div class=\"line\">  components: &#123; App &#125; <span class=\"comment\">//components包含组件</span></div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure></p>\n<h3 id=\"App-vue\"><a href=\"#App-vue\" class=\"headerlink\" title=\"App.vue\"></a>App.vue</h3><p>主组件App，如下：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;!--模板--&gt;</div><div class=\"line\"><span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">template</span>&gt;</span> </span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"app\"</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">class</span>=<span class=\"string\">\"logo\"</span> <span class=\"attr\">src</span>=<span class=\"string\">\"./assets/logo.png\"</span>&gt;</span></div><div class=\"line\">    <span class=\"comment\">&lt;!--使用Hello组件--&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">hello</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">hello</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>Welcome to your Vue.js app!<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></div><div class=\"line\"><span class=\"comment\">&lt;!--js--&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"javascript\"></span></div><div class=\"line\"><span class=\"keyword\">import</span> Hello <span class=\"keyword\">from</span> <span class=\"string\">'./components/Hello'</span> <span class=\"comment\">//导入Hello组件</span></div><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123; <span class=\"comment\">//输出组件</span></div><div class=\"line\">  components: &#123;</div><div class=\"line\">    Hello</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div><div class=\"line\"><span class=\"comment\">&lt;!--样式--&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">style</span>&gt;</span><span class=\"css\"></span></div><div class=\"line\"><span class=\"selector-id\">#app</span> &#123;</div><div class=\"line\">  <span class=\"attribute\">color</span>: <span class=\"number\">#2c3e50</span>;</div><div class=\"line\">  <span class=\"attribute\">margin-top</span>: -<span class=\"number\">100px</span>;</div><div class=\"line\">  <span class=\"attribute\">max-width</span>: <span class=\"number\">600px</span>;</div><div class=\"line\">  <span class=\"attribute\">font-family</span>: Source Sans Pro, Helvetica, sans-serif;</div><div class=\"line\">  <span class=\"attribute\">text-align</span>: center;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<p>我们可以看到，Vue的组件中，每一个组件的样式style、模板template和脚本script集合成了一整个文件，每个文件就是一个组件。<br>至于Hello.vue文件与该文件大同小异，这里就不分析啦。</p>\n<h2 id=\"Vue简单介绍\"><a href=\"#Vue简单介绍\" class=\"headerlink\" title=\"Vue简单介绍\"></a>Vue简单介绍</h2><hr>\n<p>这里我们简单介绍一下Vue，以及稍微比较前面讲过的<a href=\"https://godbasin.github.io/2016/07/01/angular-note-1-create-angular-project/\">Angular</a>和<a href=\"https://godbasin.github.io/2016/08/06/react-notes-1-build-react-project/\">React</a>。</p>\n<h3 id=\"Vue概述\"><a href=\"#Vue概述\" class=\"headerlink\" title=\"Vue概述\"></a>Vue概述</h3><p>Vue.js是一个构建数据驱动的web界面的库。Vue.js的目标是通过尽可能简单的API实现响应的数据绑定和组合的视图组件。</p>\n<ul>\n<li>对比其它框架<br><a href=\"http://cn.vuejs.org/guide/comparison.html\" target=\"_blank\" rel=\"external\">官方文档</a>中已经详细介绍Vue和Angular、React、Ember等框架的比较，大家可以查看。</li>\n</ul>\n<h3 id=\"响应的数据绑定\"><a href=\"#响应的数据绑定\" class=\"headerlink\" title=\"响应的数据绑定\"></a>响应的数据绑定</h3><p>Vue.js拥抱数据驱动的视图概念。<br>通俗地讲，它意味着我们在普通HTML模板中使用特殊的语法将DOM“绑定”到底层数据。一旦创建了绑定，DOM将与数据保持同步。每当修改了数据，DOM便相应地更新。</p>\n<ul>\n<li>对比Angular<ul>\n<li>Vue默认使用单向绑定，可开启双向绑定。Angular使用双向绑定</li>\n<li>Vue.js使用基于依赖追踪的观察系统并且异步列队更新，所有的数据变化都是独立地触发。Angular使用脏检查，当watcher越来越多时会变得越来越慢</li>\n</ul>\n</li>\n<li>对比React<ul>\n<li>Vue使用真实DOM作为模板，数据绑定到真实节点。React使用Virtual DOM，难以自己控制DOM</li>\n<li>Vue中指令和组件分得更清晰。React使用JSX，渲染函数常常包含大量的逻辑</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"组件系统\"><a href=\"#组件系统\" class=\"headerlink\" title=\"组件系统\"></a>组件系统</h3><p>组件系统是Vue.js另一个重要概念，它提供了一种抽象，让我们可以用独立可复用的小组件来构建大型应用。如果我们考虑到这点，几乎任意类型的应用的界面都可以抽象为一个组件树。<br>实际上，一个典型的用Vue.js构建的大型应用将形成一个组件树。组件系统是用Vue.js构建大型应用的基础。</p>\n<ul>\n<li>对比Angular<ul>\n<li>Angular中几乎很少有组件的概念，要进行也只有指令能与Vue组件进行比较</li>\n<li>Vue.js指令只封装DOM操作，而组件代表一个自给自足的独立单元。Angular中视图和数据逻辑有不少相混的地方</li>\n</ul>\n</li>\n<li>对比React<ul>\n<li>React中组件与Vue组件很相似，props、组件间通信等有很多相似的概念</li>\n<li>Vue中样式、模板和脚本分层更清晰，React中则比较混杂</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"参考-1\"><a href=\"#参考-1\" class=\"headerlink\" title=\"参考\"></a>参考</h3><p><a href=\"http://cn.vuejs.org/guide/overview.html\" target=\"_blank\" rel=\"external\">《Vue概述》</a></p>\n<h2 id=\"结束语\"><a href=\"#结束语\" class=\"headerlink\" title=\"结束语\"></a>结束语</h2><hr>\n<p>认识了Vue之后，发现它结合了其他框架优秀的地方，并且使得项目的快速搭建变得更加简单。当然每个框架都各有千秋，具体的使用要结合项目具体分析才行哦。<br><a href=\"https://github.com/godbasin/godbasin.github.io/tree/blog-codes/vue-notes/1-build-vue-project\" target=\"_blank\" rel=\"external\">此处查看项目代码</a><br><a href=\"http://o9zkatzym.bkt.clouddn.com/1-build-vue-project/index.html\" target=\"_blank\" rel=\"external\">此处查看页面效果</a></p>\n","excerpt":"<p>最近在学习使用Vue作为前端的框架，《Vue使用笔记》系列用于记录过程中的一些使用和解决方法。<br>本文记录使用Vue框架的脚手架vue-cli初步搭建项目的过程。<br>","more":"</p>\n<h2 id=\"初步使用Vue应用\"><a href=\"#初步使用Vue应用\" class=\"headerlink\" title=\"初步使用Vue应用\"></a>初步使用Vue应用</h2><h3 id=\"直接使用Vue源码\"><a href=\"#直接使用Vue源码\" class=\"headerlink\" title=\"直接使用Vue源码\"></a>直接使用Vue源码</h3><ul>\n<li>下载<a href=\"http://cn.vuejs.org/js/vue.min.js\">Vue生产版本</a>或<a href=\"http://cn.vuejs.org/js/vue.js\">Vue开发版本</a></li>\n<li>用<code>&lt;script&gt;</code>标签引入，Vue会被注册为一个全局变量</li>\n</ul>\n<h3 id=\"使用脚手架vue-cli搭建\"><a href=\"#使用脚手架vue-cli搭建\" class=\"headerlink\" title=\"使用脚手架vue-cli搭建\"></a>使用脚手架vue-cli搭建</h3><p>当我们真正开发一个应用的时候，我们不可避免的会用到一大堆的工具，模块化、预处理器、热模块加载、代码校验和测试。</p>\n<p>Vue.js提供一个<a href=\"https://vuejs-templates.github.io/webpack/index.html\">官方命令行工具vue-cli</a>，可用于快速搭建大型单页应用。</p>\n<p>使用vue-cli，让一个简单的命令行工具来帮助你快速的构建一个拥有强大构建能力的Vue.js项目：单文件Vue组件，热加载，保存时检查代码，单元测试等。</p>\n<ul>\n<li>安装项目</li>\n</ul>\n<figure class=\"highlight cmd\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ npm install -g vue-cli</div><div class=\"line\">$ vue init webpack vue-test</div><div class=\"line\">$ <span class=\"built_in\">cd</span> vue-test</div><div class=\"line\">$ npm install</div></pre></td></tr></table></figure>\n<p>安装过程会询问是否需要添加一些相关的依赖（编码规范、测试等），如图<br><img src=\"http://o905ne85q.bkt.clouddn.com/8EC6.tmp.png\" alt=\"image\"></p>\n<ul>\n<li>目录组织<br>如图，生成目录组织如下（这里木有显示.开头的文件）：<br><img src=\"http://o905ne85q.bkt.clouddn.com/9B08.tmp.png\" alt=\"image\"></li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\">├── build/                      <span class=\"comment\"># webpack配置参数文件</span></div><div class=\"line\">│   └── ...</div><div class=\"line\">├── config/                     </div><div class=\"line\">│   ├── index.js                <span class=\"comment\"># 主项目的配置</span></div><div class=\"line\">│   └── ...</div><div class=\"line\">├── src/</div><div class=\"line\">│   ├── main.js                 <span class=\"comment\"># 应用入口</span></div><div class=\"line\">│   ├── App.vue                 <span class=\"comment\"># 主应用组件</span></div><div class=\"line\">│   ├── components/             <span class=\"comment\"># UI组件</span></div><div class=\"line\">│   │   └── ...</div><div class=\"line\">│   └── assets/                 <span class=\"comment\"># 模块资源（webpack提供）</span></div><div class=\"line\">│       └── ...</div><div class=\"line\">├── static/                     <span class=\"comment\"># 纯静态资源（打包时直接复制）</span></div><div class=\"line\">├── <span class=\"built_in\">test</span>/</div><div class=\"line\">│   └── unit/                   <span class=\"comment\"># 单元测试</span></div><div class=\"line\">│   └── e2e/                    <span class=\"comment\"># e2e tests测试</span></div><div class=\"line\">├── .babelrc                    <span class=\"comment\"># babel编译参数</span></div><div class=\"line\">├── .editorconfig.js            <span class=\"comment\"># 编辑器配置</span></div><div class=\"line\">├── .eslintrc.js                <span class=\"comment\"># eslint配置文件，用以规范团队开发编码规范</span></div><div class=\"line\">├── index.html                  <span class=\"comment\"># 主页模板</span></div><div class=\"line\">└── package.json                <span class=\"comment\"># 项目文件，记载着一些命令和依赖还有简要的项目描述信息</span></div></pre></td></tr></table></figure>\n<h3 id=\"主要的npm命令\"><a href=\"#主要的npm命令\" class=\"headerlink\" title=\"主要的npm命令\"></a>主要的npm命令</h3><ul>\n<li>启动服务</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">npm run dec</div></pre></td></tr></table></figure>\n<p>效果如下：<br><img src=\"http://o905ne85q.bkt.clouddn.com/A221.tmp.png\" alt=\"image\"></p>\n<ul>\n<li>打包生成</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">npm run build</div></pre></td></tr></table></figure>\n<ul>\n<li><p>注意，打包生成的文件为绝对定位，需在服务环境下才能打开。如果需要生成相对定位的文件，可以进行如下操作：</p>\n</li>\n<li><p>1.打开config文件夹下的index.js文件<br><img src=\"http://o905ne85q.bkt.clouddn.com/7BB8.tmp.png\" alt=\"image\"></p>\n</li>\n<li><p>2.修改build中assetsPublicPath为’’（原本为’/‘）</p>\n</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</div><div class=\"line\">  <span class=\"attr\">build</span>: &#123; <span class=\"comment\">//打包生成项目相关配置</span></div><div class=\"line\">    env: <span class=\"built_in\">require</span>(<span class=\"string\">'./prod.env'</span>), <span class=\"comment\">//环境为生产环境</span></div><div class=\"line\">    index: path.resolve(__dirname, <span class=\"string\">'../dist/index.html'</span>), <span class=\"comment\">//打包后的主页面位置</span></div><div class=\"line\">    assetsRoot: path.resolve(__dirname, <span class=\"string\">'../dist'</span>), <span class=\"comment\">//打包后的其余文件的根位置</span></div><div class=\"line\">    assetsSubDirectory: <span class=\"string\">'static'</span>, <span class=\"comment\">//其余文件的目录</span></div><div class=\"line\">    assetsPublicPath: <span class=\"string\">''</span>, <span class=\"comment\">//相对或绝对位置</span></div><div class=\"line\">    productionSourceMap: <span class=\"literal\">true</span>, <span class=\"comment\">//是否生产map文件</span></div><div class=\"line\">    productionGzip: <span class=\"literal\">false</span>, <span class=\"comment\">//压缩</span></div><div class=\"line\">    productionGzipExtensions: [<span class=\"string\">'js'</span>, <span class=\"string\">'css'</span>] <span class=\"comment\">//需要压缩的文件类型</span></div><div class=\"line\">  &#125;,</div><div class=\"line\">  <span class=\"attr\">dev</span>: &#123; <span class=\"comment\">//启动服务、热加载相关配置</span></div><div class=\"line\">    env: <span class=\"built_in\">require</span>(<span class=\"string\">'./dev.env'</span>), <span class=\"comment\">//环境为开发环境</span></div><div class=\"line\">    port: <span class=\"number\">8080</span>, <span class=\"comment\">//服务端口</span></div><div class=\"line\">    proxyTable: &#123;&#125;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<ul>\n<li><p>生成的文件将放置在dist文件夹，如图：<br><img src=\"http://o905ne85q.bkt.clouddn.com/3B27.tmp.png\" alt=\"image\"></p>\n</li>\n<li><p>运行单元测试</p>\n</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">npm run unit</div></pre></td></tr></table></figure>\n<ul>\n<li>运行e2e测试</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">npm run e2e</div></pre></td></tr></table></figure>\n<ul>\n<li>运行单元测试和e2e测试</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">npm run <span class=\"built_in\">test</span></div></pre></td></tr></table></figure>\n<h3 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h3><p><a href=\"https://vuejs-templates.github.io/webpack/index.html\">vue-cli官方文档</a><br><a href=\"http://www.tuicool.com/articles/mYVvmyA\">《使用Vue构建中(大)型应用》</a></p>\n<h2 id=\"快速浏览项目\"><a href=\"#快速浏览项目\" class=\"headerlink\" title=\"快速浏览项目\"></a>快速浏览项目</h2><hr>\n<p>项目生成完毕，现在我们快速查看一下Vue项目的使用吧。</p>\n<h3 id=\"index-html\"><a href=\"#index-html\" class=\"headerlink\" title=\"index.html\"></a>index.html</h3><p>查看主页面index.html，可以看到如下代码：<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&lt;!DOCTYPE html&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"utf-8\"</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>vue-test<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">app</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">app</span>&gt;</span></div><div class=\"line\">    <span class=\"comment\">&lt;!-- built files will be auto injected --&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<p>其中：<app></app>是主应用组件入口，我们可以在src文件夹的App.vue查看该组件，动态生成的js文件会在其后导入加载。</p>\n<h3 id=\"main-js\"><a href=\"#main-js\" class=\"headerlink\" title=\"main.js\"></a>main.js</h3><p>该文件主要负责初始化主组件，当然路由也可以在该文件中进行处理，后面的章节我们会讲到。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> Vue <span class=\"keyword\">from</span> <span class=\"string\">'vue'</span> <span class=\"comment\">//导入vue</span></div><div class=\"line\"><span class=\"keyword\">import</span> App <span class=\"keyword\">from</span> <span class=\"string\">'./App'</span> <span class=\"comment\">//导入App主组件（App.vue）</span></div><div class=\"line\"><span class=\"keyword\">new</span> Vue(&#123;</div><div class=\"line\">  <span class=\"attr\">el</span>: <span class=\"string\">'body'</span>, <span class=\"comment\">//el为实例提供挂载元素</span></div><div class=\"line\">  components: &#123; App &#125; <span class=\"comment\">//components包含组件</span></div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure></p>\n<h3 id=\"App-vue\"><a href=\"#App-vue\" class=\"headerlink\" title=\"App.vue\"></a>App.vue</h3><p>主组件App，如下：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;!--模板--&gt;</div><div class=\"line\"><span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">template</span>&gt;</span> </div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"app\"</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">class</span>=<span class=\"string\">\"logo\"</span> <span class=\"attr\">src</span>=<span class=\"string\">\"./assets/logo.png\"</span>&gt;</span></div><div class=\"line\">    <span class=\"comment\">&lt;!--使用Hello组件--&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">hello</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">hello</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>Welcome to your Vue.js app!<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></div><div class=\"line\"><span class=\"comment\">&lt;!--js--&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"javascript\"></div><div class=\"line\"><span class=\"keyword\">import</span> Hello <span class=\"keyword\">from</span> <span class=\"string\">'./components/Hello'</span> <span class=\"comment\">//导入Hello组件</span></div><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123; <span class=\"comment\">//输出组件</span></div><div class=\"line\">  components: &#123;</div><div class=\"line\">    Hello</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div><div class=\"line\"><span class=\"comment\">&lt;!--样式--&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">style</span>&gt;</span><span class=\"css\"></div><div class=\"line\"><span class=\"selector-id\">#app</span> &#123;</div><div class=\"line\">  <span class=\"attribute\">color</span>: <span class=\"number\">#2c3e50</span>;</div><div class=\"line\">  <span class=\"attribute\">margin-top</span>: -<span class=\"number\">100px</span>;</div><div class=\"line\">  <span class=\"attribute\">max-width</span>: <span class=\"number\">600px</span>;</div><div class=\"line\">  <span class=\"attribute\">font-family</span>: Source Sans Pro, Helvetica, sans-serif;</div><div class=\"line\">  <span class=\"attribute\">text-align</span>: center;</div><div class=\"line\">&#125;</div><div class=\"line\"></span><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span></div></pre></td></tr></table></figure></p>\n<p>我们可以看到，Vue的组件中，每一个组件的样式style、模板template和脚本script集合成了一整个文件，每个文件就是一个组件。<br>至于Hello.vue文件与该文件大同小异，这里就不分析啦。</p>\n<h2 id=\"Vue简单介绍\"><a href=\"#Vue简单介绍\" class=\"headerlink\" title=\"Vue简单介绍\"></a>Vue简单介绍</h2><hr>\n<p>这里我们简单介绍一下Vue，以及稍微比较前面讲过的<a href=\"https://godbasin.github.io/2016/07/01/angular-note-1-create-angular-project/\">Angular</a>和<a href=\"https://godbasin.github.io/2016/08/06/react-notes-1-build-react-project/\">React</a>。</p>\n<h3 id=\"Vue概述\"><a href=\"#Vue概述\" class=\"headerlink\" title=\"Vue概述\"></a>Vue概述</h3><p>Vue.js是一个构建数据驱动的web界面的库。Vue.js的目标是通过尽可能简单的API实现响应的数据绑定和组合的视图组件。</p>\n<ul>\n<li>对比其它框架<br><a href=\"http://cn.vuejs.org/guide/comparison.html\">官方文档</a>中已经详细介绍Vue和Angular、React、Ember等框架的比较，大家可以查看。</li>\n</ul>\n<h3 id=\"响应的数据绑定\"><a href=\"#响应的数据绑定\" class=\"headerlink\" title=\"响应的数据绑定\"></a>响应的数据绑定</h3><p>Vue.js拥抱数据驱动的视图概念。<br>通俗地讲，它意味着我们在普通HTML模板中使用特殊的语法将DOM“绑定”到底层数据。一旦创建了绑定，DOM将与数据保持同步。每当修改了数据，DOM便相应地更新。</p>\n<ul>\n<li>对比Angular<ul>\n<li>Vue默认使用单向绑定，可开启双向绑定。Angular使用双向绑定</li>\n<li>Vue.js使用基于依赖追踪的观察系统并且异步列队更新，所有的数据变化都是独立地触发。Angular使用脏检查，当watcher越来越多时会变得越来越慢</li>\n</ul>\n</li>\n<li>对比React<ul>\n<li>Vue使用真实DOM作为模板，数据绑定到真实节点。React使用Virtual DOM，难以自己控制DOM</li>\n<li>Vue中指令和组件分得更清晰。React使用JSX，渲染函数常常包含大量的逻辑</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"组件系统\"><a href=\"#组件系统\" class=\"headerlink\" title=\"组件系统\"></a>组件系统</h3><p>组件系统是Vue.js另一个重要概念，它提供了一种抽象，让我们可以用独立可复用的小组件来构建大型应用。如果我们考虑到这点，几乎任意类型的应用的界面都可以抽象为一个组件树。<br>实际上，一个典型的用Vue.js构建的大型应用将形成一个组件树。组件系统是用Vue.js构建大型应用的基础。</p>\n<ul>\n<li>对比Angular<ul>\n<li>Angular中几乎很少有组件的概念，要进行也只有指令能与Vue组件进行比较</li>\n<li>Vue.js指令只封装DOM操作，而组件代表一个自给自足的独立单元。Angular中视图和数据逻辑有不少相混的地方</li>\n</ul>\n</li>\n<li>对比React<ul>\n<li>React中组件与Vue组件很相似，props、组件间通信等有很多相似的概念</li>\n<li>Vue中样式、模板和脚本分层更清晰，React中则比较混杂</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"参考-1\"><a href=\"#参考-1\" class=\"headerlink\" title=\"参考\"></a>参考</h3><p><a href=\"http://cn.vuejs.org/guide/overview.html\">《Vue概述》</a></p>\n<h2 id=\"结束语\"><a href=\"#结束语\" class=\"headerlink\" title=\"结束语\"></a>结束语</h2><hr>\n<p>认识了Vue之后，发现它结合了其他框架优秀的地方，并且使得项目的快速搭建变得更加简单。当然每个框架都各有千秋，具体的使用要结合项目具体分析才行哦。<br><a href=\"https://github.com/godbasin/godbasin.github.io/tree/blog-codes/vue-notes/1-build-vue-project\">此处查看项目代码</a><br><a href=\"http://o9zkatzym.bkt.clouddn.com/1-build-vue-project/index.html\">此处查看页面效果</a></p>"},{"title":"Vue2使用笔记2--创建左侧菜单栏Sidebar","date":"2016-11-20T03:37:07.000Z","_content":"最近在使用Vue2作为项目中前端的框架，《Vue2使用笔记》系列用于记录过程中的一些使用和解决方法。\n本文记录创建Sidebar组件，包括模板与下拉点击事件的过程。\n<!--more-->\n\n## Vue1.x vs Vue2.x\n---\n### issue\n具体vue1.x到vue2的改变，大家可以参考官方发布的[issues](https://github.com/vuejs/vue/issues/2873)。\n\n### 一些改变\n这里本骚年只是简述一下接触到的一些改变：\n- [生命周期的改变](https://vuefe.cn/guide/instance.html#生命周期图示)\n![image](http://o905ne85q.bkt.clouddn.com/f847b38a-63fe-11e6-9c29-38e58d46f036.png)\n如图，大概最重要的是ready和mounted钩子函数的改变吧。\n\n- 组件间通信\n  - [$on/$emit事件](https://vuefe.cn/guide/components.html#使用-v-on-绑定自定义事件)，$dispatch、$broadcast废弃\n  - [使用ref属性为子组件索引](https://vuefe.cn/guide/components.html#子组件索引)，v-ref、v-el弃用\n\n- v-for循环中常用的$index、$key也已不支持使用，track-by被key属性替换\n\n- [过渡效果组件<transition></transition>](https://vuefe.cn/guide/transitions.html)\n\n- [Render函数](https://vuefe.cn/guide/render-function.html#基础)，需要JavaScript的完全编程的能力时使用\n\n- [vue-router2.0](http://router.vuejs.org/zh-cn/index.html)，这个我们后面章节会再次讲述\n\n## 添加Sidebar组件\n---\n首先我们在src/components文件夹里面创建Siderbar.vue文件。\n### 添加组件模板\n这里我们把gentelella模板里面的左侧菜单部分移植过来后，然后进行相关的列表渲染v-for和事件绑定v-on。\n``` html\n<template>\n\t<div class=\"col-md-3 left_col menu_fixed\">\n\t\t<div class=\"left_col scroll-view\">\n\t\t\t<div class=\"navbar nav_title\" style=\"border: 0;\">\n\t\t\t\t<a href=\"index.html\" class=\"site_title\"><i class=\"fa fa-paw\"></i> <span>管理系统</span></a>\n\t\t\t</div>\n\n\t\t\t<div class=\"clearfix\"></div>\n\n\t\t\t<!-- menu profile quick info -->\n\t\t\t<div class=\"profile\">\n\t\t\t\t<div class=\"profile_pic\"></div>\n\t\t\t\t<div class=\"profile_info\">\n\t\t\t\t\t<h2><span>欢迎回来, </span> 老大</h2>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t\t<div class=\"clearfix\"></div>\n\n\t\t\t<!-- sidebar menu -->\n\t\t\t<div id=\"sidebar-menu\" class=\"main_menu_side hidden-print main_menu\">\n\t\t\t\t<div class=\"menu_section\">\n\t\t\t\t\t<br />\n\t\t\t\t\t<h2>通用设置</h2>\n\t\t\t\t\t<br />\n\t\t\t\t\t<ul class=\"nav side-menu\">\n                        <!--通过v-for来进行菜单列表的显示，并绑定v-on:click事件进行点击控制-->\n\t\t\t\t\t\t<li v-for=\"menu in menus\" v-on:click=\"toggleMenu(menu)\" v-bind:class=\"menu.class\">\n                            <!--class的绑定需要使用v-bind:class来实现-->\n\t\t\t\t\t\t\t<a><i class=\"fa\" v-bind:class=\"menu.icon\"></i> {{menu.text}} <span class=\"fa\" v-show=\"!menu.href\" v-bind:class=\"menu.class ? 'fa-chevron-down' : 'fa-chevron-right'\"></span></a>\n\t\t\t\t\t\t\t<!--通过判断class是否active来进行显示和隐藏的控制-->\n                            <ul class=\"nav child_menu slide\" v-on:click.stop v-show=\"menu.class\">\n\t\t\t\t\t\t\t\t<router-link v-for=\"childMenu in menu.childMenus\" v-bind:key=\"childMenu.text\" class=\"slide-item\" :to=\"childMenu.href\" tag=\"li\"\n\t\t\t\t\t\t\t\t\tactive-class=\"current-page\">\n\t\t\t\t\t\t\t\t\t<a>{{ childMenu.text }}</a>\n\t\t\t\t\t\t\t\t</router-link>\n\t\t\t\t\t\t\t</ul>\n\t\t\t\t\t\t</li>\n\t\t\t\t\t</ul>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t\t<!-- /sidebar menu -->\n\t\t</div>\n\t</div>\n</template>\n```\n大家可以看到，这里我们使用了router-link这个组件，后面章节我们会较详细描述vue-router2.0的使用，所以这里我们就先略过吧。\n\n### 添加组件数据\n这里我们添加菜单数据，这里注意的是有个设定，就是一级菜单若有链接则不带有子菜单。\n``` js\n \texport default {\n  data() {\n    return {\n      menus: [{\n        icon: 'fa-home', // icon用于储存菜单对应的图标\n        text: '服务管理', // text用于储存该菜单显示名称\n        class: '',\n        childMenus: [{\n          href: '/app/services', // href用于设定该菜单跳转路由\n          text: '服务信息' // text用于储存该菜单显示名称\n        }, {\n          href: '/app/add/service', // href用于设定该菜单跳转路由\n          text: '新建' // text用于储存该菜单显示名称\n        }]\n      }, {\n        icon: 'fa-cubes',\n        text: '产品管理',\n        class: '',\n        childMenus: [{\n          href: '/app/products',\n          text: '产品信息'\n        }, {\n          href: '/app/add/product',\n          text: '新建'\n        }]\n      }, {\n        icon: 'fa-file-o',\n        text: '日志管理',\n        class: '',\n        href: '/app/logs'\n      }],\n      menuShowAll: true,\n      post: null,\n      error: null\n    }\n  }\n}\n\n```\n\n### 添加点击事件\n从Html模板我们可以看到，点击菜单时的事件未toggleMenu，这里我们通过将其添加active的样式，并绑定v-show判断是否展示来实现。\n``` js\n// 在 `methods` 对象中定义方法\nmethods: {\n\ttoggleMenu(menu) {\n\t// 当菜单有href属性时，代表其将进行路由跳转而不是展开收起子菜单\n\t// 此时将其余菜单收起\n\tif (menu.href) {\n\t\tthis.$router.push(menu.href);\n\t\tthis.menus.forEach(item => {\n\t\t\titem.class = '';\n\t\t});\n\t\tmenu.class = 'active';\n\t\treturn;\n\t}\n\t// 其他时候默认进行子菜单的切换\n\tswitch (menu.class) {\n\t\tcase 'active':\n\t\t\tmenu.class = '';\n\t\t\tbreak;\n\t\tcase '':\n\t\t\tmenu.class = 'active';\n\t\t}\n\t}\n}\n```\n\n### 在App组件中使用Sidebar\n- 引入该组件\n\n``` js\nimport Sidebar from './components/Sidebar'\n```\n\n- 在App组件中注入该组件\n\n``` js\nexport default {\n\tname: 'App',\n\tcomponents: {\n\t\tSidebar\n\t}\n}\n```\n\n- 模板中使用\n\n``` html\n<template>\n\t<div id=\"app\">\n\t\t<div class=\"container body\">\n\t\t\t<div class=\"main_container\">\n                <!--使用Sidebar组件-->\n\t\t\t\t<Sidebar></Sidebar>\n                <!-- page content -->\n\t\t\t\t<div class=\"right_col\" role=\"main\"></div>\n\t\t\t</div>\n\t\t</div>\n\t</div>\n</template>\n```\n\n### 页面最终效果\n![image](http://o905ne85q.bkt.clouddn.com/9063.tmp.png)\n\n### 参考\n[Vue2.0中文文档](https://vuefe.cn/guide/)\n\n## 结束语\n-----\n突然发现，调用别人写好的页面模板，还是好方便呀。省去了码样式的时间，当然最重要的还是模板好看哈哈，这里表扬一下[gentelella](https://github.com/puikinsh/gentelella)才行。\n[此处查看项目代码](https://github.com/godbasin/godbasin.github.io/tree/blog-codes/vue2-notes/2-create-sidebar-componnet)\n[此处查看页面效果](http://ofyya1gfg.bkt.clouddn.com/2-create-sidebar-componnet/index.html#/App)","source":"_posts/vue2-notes-2-create-sidebar-componnet.md","raw":"---\ntitle: Vue2使用笔记2--创建左侧菜单栏Sidebar\ndate: 2016-11-20 11:37:07\ncategories: vue八宝粥\ntags: 笔记\n---\n最近在使用Vue2作为项目中前端的框架，《Vue2使用笔记》系列用于记录过程中的一些使用和解决方法。\n本文记录创建Sidebar组件，包括模板与下拉点击事件的过程。\n<!--more-->\n\n## Vue1.x vs Vue2.x\n---\n### issue\n具体vue1.x到vue2的改变，大家可以参考官方发布的[issues](https://github.com/vuejs/vue/issues/2873)。\n\n### 一些改变\n这里本骚年只是简述一下接触到的一些改变：\n- [生命周期的改变](https://vuefe.cn/guide/instance.html#生命周期图示)\n![image](http://o905ne85q.bkt.clouddn.com/f847b38a-63fe-11e6-9c29-38e58d46f036.png)\n如图，大概最重要的是ready和mounted钩子函数的改变吧。\n\n- 组件间通信\n  - [$on/$emit事件](https://vuefe.cn/guide/components.html#使用-v-on-绑定自定义事件)，$dispatch、$broadcast废弃\n  - [使用ref属性为子组件索引](https://vuefe.cn/guide/components.html#子组件索引)，v-ref、v-el弃用\n\n- v-for循环中常用的$index、$key也已不支持使用，track-by被key属性替换\n\n- [过渡效果组件<transition></transition>](https://vuefe.cn/guide/transitions.html)\n\n- [Render函数](https://vuefe.cn/guide/render-function.html#基础)，需要JavaScript的完全编程的能力时使用\n\n- [vue-router2.0](http://router.vuejs.org/zh-cn/index.html)，这个我们后面章节会再次讲述\n\n## 添加Sidebar组件\n---\n首先我们在src/components文件夹里面创建Siderbar.vue文件。\n### 添加组件模板\n这里我们把gentelella模板里面的左侧菜单部分移植过来后，然后进行相关的列表渲染v-for和事件绑定v-on。\n``` html\n<template>\n\t<div class=\"col-md-3 left_col menu_fixed\">\n\t\t<div class=\"left_col scroll-view\">\n\t\t\t<div class=\"navbar nav_title\" style=\"border: 0;\">\n\t\t\t\t<a href=\"index.html\" class=\"site_title\"><i class=\"fa fa-paw\"></i> <span>管理系统</span></a>\n\t\t\t</div>\n\n\t\t\t<div class=\"clearfix\"></div>\n\n\t\t\t<!-- menu profile quick info -->\n\t\t\t<div class=\"profile\">\n\t\t\t\t<div class=\"profile_pic\"></div>\n\t\t\t\t<div class=\"profile_info\">\n\t\t\t\t\t<h2><span>欢迎回来, </span> 老大</h2>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t\t<div class=\"clearfix\"></div>\n\n\t\t\t<!-- sidebar menu -->\n\t\t\t<div id=\"sidebar-menu\" class=\"main_menu_side hidden-print main_menu\">\n\t\t\t\t<div class=\"menu_section\">\n\t\t\t\t\t<br />\n\t\t\t\t\t<h2>通用设置</h2>\n\t\t\t\t\t<br />\n\t\t\t\t\t<ul class=\"nav side-menu\">\n                        <!--通过v-for来进行菜单列表的显示，并绑定v-on:click事件进行点击控制-->\n\t\t\t\t\t\t<li v-for=\"menu in menus\" v-on:click=\"toggleMenu(menu)\" v-bind:class=\"menu.class\">\n                            <!--class的绑定需要使用v-bind:class来实现-->\n\t\t\t\t\t\t\t<a><i class=\"fa\" v-bind:class=\"menu.icon\"></i> {{menu.text}} <span class=\"fa\" v-show=\"!menu.href\" v-bind:class=\"menu.class ? 'fa-chevron-down' : 'fa-chevron-right'\"></span></a>\n\t\t\t\t\t\t\t<!--通过判断class是否active来进行显示和隐藏的控制-->\n                            <ul class=\"nav child_menu slide\" v-on:click.stop v-show=\"menu.class\">\n\t\t\t\t\t\t\t\t<router-link v-for=\"childMenu in menu.childMenus\" v-bind:key=\"childMenu.text\" class=\"slide-item\" :to=\"childMenu.href\" tag=\"li\"\n\t\t\t\t\t\t\t\t\tactive-class=\"current-page\">\n\t\t\t\t\t\t\t\t\t<a>{{ childMenu.text }}</a>\n\t\t\t\t\t\t\t\t</router-link>\n\t\t\t\t\t\t\t</ul>\n\t\t\t\t\t\t</li>\n\t\t\t\t\t</ul>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t\t<!-- /sidebar menu -->\n\t\t</div>\n\t</div>\n</template>\n```\n大家可以看到，这里我们使用了router-link这个组件，后面章节我们会较详细描述vue-router2.0的使用，所以这里我们就先略过吧。\n\n### 添加组件数据\n这里我们添加菜单数据，这里注意的是有个设定，就是一级菜单若有链接则不带有子菜单。\n``` js\n \texport default {\n  data() {\n    return {\n      menus: [{\n        icon: 'fa-home', // icon用于储存菜单对应的图标\n        text: '服务管理', // text用于储存该菜单显示名称\n        class: '',\n        childMenus: [{\n          href: '/app/services', // href用于设定该菜单跳转路由\n          text: '服务信息' // text用于储存该菜单显示名称\n        }, {\n          href: '/app/add/service', // href用于设定该菜单跳转路由\n          text: '新建' // text用于储存该菜单显示名称\n        }]\n      }, {\n        icon: 'fa-cubes',\n        text: '产品管理',\n        class: '',\n        childMenus: [{\n          href: '/app/products',\n          text: '产品信息'\n        }, {\n          href: '/app/add/product',\n          text: '新建'\n        }]\n      }, {\n        icon: 'fa-file-o',\n        text: '日志管理',\n        class: '',\n        href: '/app/logs'\n      }],\n      menuShowAll: true,\n      post: null,\n      error: null\n    }\n  }\n}\n\n```\n\n### 添加点击事件\n从Html模板我们可以看到，点击菜单时的事件未toggleMenu，这里我们通过将其添加active的样式，并绑定v-show判断是否展示来实现。\n``` js\n// 在 `methods` 对象中定义方法\nmethods: {\n\ttoggleMenu(menu) {\n\t// 当菜单有href属性时，代表其将进行路由跳转而不是展开收起子菜单\n\t// 此时将其余菜单收起\n\tif (menu.href) {\n\t\tthis.$router.push(menu.href);\n\t\tthis.menus.forEach(item => {\n\t\t\titem.class = '';\n\t\t});\n\t\tmenu.class = 'active';\n\t\treturn;\n\t}\n\t// 其他时候默认进行子菜单的切换\n\tswitch (menu.class) {\n\t\tcase 'active':\n\t\t\tmenu.class = '';\n\t\t\tbreak;\n\t\tcase '':\n\t\t\tmenu.class = 'active';\n\t\t}\n\t}\n}\n```\n\n### 在App组件中使用Sidebar\n- 引入该组件\n\n``` js\nimport Sidebar from './components/Sidebar'\n```\n\n- 在App组件中注入该组件\n\n``` js\nexport default {\n\tname: 'App',\n\tcomponents: {\n\t\tSidebar\n\t}\n}\n```\n\n- 模板中使用\n\n``` html\n<template>\n\t<div id=\"app\">\n\t\t<div class=\"container body\">\n\t\t\t<div class=\"main_container\">\n                <!--使用Sidebar组件-->\n\t\t\t\t<Sidebar></Sidebar>\n                <!-- page content -->\n\t\t\t\t<div class=\"right_col\" role=\"main\"></div>\n\t\t\t</div>\n\t\t</div>\n\t</div>\n</template>\n```\n\n### 页面最终效果\n![image](http://o905ne85q.bkt.clouddn.com/9063.tmp.png)\n\n### 参考\n[Vue2.0中文文档](https://vuefe.cn/guide/)\n\n## 结束语\n-----\n突然发现，调用别人写好的页面模板，还是好方便呀。省去了码样式的时间，当然最重要的还是模板好看哈哈，这里表扬一下[gentelella](https://github.com/puikinsh/gentelella)才行。\n[此处查看项目代码](https://github.com/godbasin/godbasin.github.io/tree/blog-codes/vue2-notes/2-create-sidebar-componnet)\n[此处查看页面效果](http://ofyya1gfg.bkt.clouddn.com/2-create-sidebar-componnet/index.html#/App)","slug":"vue2-notes-2-create-sidebar-componnet","published":1,"updated":"2016-11-20T03:37:41.577Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cix45huib0053xotuirp3a7fx","content":"<p>最近在使用Vue2作为项目中前端的框架，《Vue2使用笔记》系列用于记录过程中的一些使用和解决方法。<br>本文记录创建Sidebar组件，包括模板与下拉点击事件的过程。<br><a id=\"more\"></a></p>\n<h2 id=\"Vue1-x-vs-Vue2-x\"><a href=\"#Vue1-x-vs-Vue2-x\" class=\"headerlink\" title=\"Vue1.x vs Vue2.x\"></a>Vue1.x vs Vue2.x</h2><hr>\n<h3 id=\"issue\"><a href=\"#issue\" class=\"headerlink\" title=\"issue\"></a>issue</h3><p>具体vue1.x到vue2的改变，大家可以参考官方发布的<a href=\"https://github.com/vuejs/vue/issues/2873\" target=\"_blank\" rel=\"external\">issues</a>。</p>\n<h3 id=\"一些改变\"><a href=\"#一些改变\" class=\"headerlink\" title=\"一些改变\"></a>一些改变</h3><p>这里本骚年只是简述一下接触到的一些改变：</p>\n<ul>\n<li><p><a href=\"https://vuefe.cn/guide/instance.html#生命周期图示\" target=\"_blank\" rel=\"external\">生命周期的改变</a><br><img src=\"http://o905ne85q.bkt.clouddn.com/f847b38a-63fe-11e6-9c29-38e58d46f036.png\" alt=\"image\"><br>如图，大概最重要的是ready和mounted钩子函数的改变吧。</p>\n</li>\n<li><p>组件间通信</p>\n<ul>\n<li><a href=\"https://vuefe.cn/guide/components.html#使用-v-on-绑定自定义事件\" target=\"_blank\" rel=\"external\">$on/$emit事件</a>，$dispatch、$broadcast废弃</li>\n<li><a href=\"https://vuefe.cn/guide/components.html#子组件索引\" target=\"_blank\" rel=\"external\">使用ref属性为子组件索引</a>，v-ref、v-el弃用</li>\n</ul>\n</li>\n<li><p>v-for循环中常用的$index、$key也已不支持使用，track-by被key属性替换</p>\n</li>\n<li><p><a href=\"https://vuefe.cn/guide/transitions.html\" target=\"_blank\" rel=\"external\">过渡效果组件<transition></transition></a></p>\n</li>\n<li><p><a href=\"https://vuefe.cn/guide/render-function.html#基础\" target=\"_blank\" rel=\"external\">Render函数</a>，需要JavaScript的完全编程的能力时使用</p>\n</li>\n<li><p><a href=\"http://router.vuejs.org/zh-cn/index.html\" target=\"_blank\" rel=\"external\">vue-router2.0</a>，这个我们后面章节会再次讲述</p>\n</li>\n</ul>\n<h2 id=\"添加Sidebar组件\"><a href=\"#添加Sidebar组件\" class=\"headerlink\" title=\"添加Sidebar组件\"></a>添加Sidebar组件</h2><hr>\n<p>首先我们在src/components文件夹里面创建Siderbar.vue文件。</p>\n<h3 id=\"添加组件模板\"><a href=\"#添加组件模板\" class=\"headerlink\" title=\"添加组件模板\"></a>添加组件模板</h3><p>这里我们把gentelella模板里面的左侧菜单部分移植过来后，然后进行相关的列表渲染v-for和事件绑定v-on。<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">template</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"col-md-3 left_col menu_fixed\"</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"left_col scroll-view\"</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"navbar nav_title\"</span> <span class=\"attr\">style</span>=<span class=\"string\">\"border: 0;\"</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"index.html\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"site_title\"</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">i</span> <span class=\"attr\">class</span>=<span class=\"string\">\"fa fa-paw\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">i</span>&gt;</span> <span class=\"tag\">&lt;<span class=\"name\">span</span>&gt;</span>管理系统<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"clearfix\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\">      <span class=\"comment\">&lt;!-- menu profile quick info --&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"profile\"</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"profile_pic\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"profile_info\"</span>&gt;</span></div><div class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">h2</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">span</span>&gt;</span>欢迎回来, <span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span> 老大<span class=\"tag\">&lt;/<span class=\"name\">h2</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"clearfix\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\">      <span class=\"comment\">&lt;!-- sidebar menu --&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"sidebar-menu\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"main_menu_side hidden-print main_menu\"</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"menu_section\"</span>&gt;</span></div><div class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">br</span> /&gt;</span></div><div class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">h2</span>&gt;</span>通用设置<span class=\"tag\">&lt;/<span class=\"name\">h2</span>&gt;</span></div><div class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">br</span> /&gt;</span></div><div class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">ul</span> <span class=\"attr\">class</span>=<span class=\"string\">\"nav side-menu\"</span>&gt;</span></div><div class=\"line\">                        <span class=\"comment\">&lt;!--通过v-for来进行菜单列表的显示，并绑定v-on:click事件进行点击控制--&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">v-for</span>=<span class=\"string\">\"menu in menus\"</span> <span class=\"attr\">v-on:click</span>=<span class=\"string\">\"toggleMenu(menu)\"</span> <span class=\"attr\">v-bind:class</span>=<span class=\"string\">\"menu.class\"</span>&gt;</span></div><div class=\"line\">                            <span class=\"comment\">&lt;!--class的绑定需要使用v-bind:class来实现--&gt;</span></div><div class=\"line\">              <span class=\"tag\">&lt;<span class=\"name\">a</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">i</span> <span class=\"attr\">class</span>=<span class=\"string\">\"fa\"</span> <span class=\"attr\">v-bind:class</span>=<span class=\"string\">\"menu.icon\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">i</span>&gt;</span> &#123;&#123;menu.text&#125;&#125; <span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">class</span>=<span class=\"string\">\"fa\"</span> <span class=\"attr\">v-show</span>=<span class=\"string\">\"!menu.href\"</span> <span class=\"attr\">v-bind:class</span>=<span class=\"string\">\"menu.class ? 'fa-chevron-down' : 'fa-chevron-right'\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></div><div class=\"line\">              <span class=\"comment\">&lt;!--通过判断class是否active来进行显示和隐藏的控制--&gt;</span></div><div class=\"line\">                            <span class=\"tag\">&lt;<span class=\"name\">ul</span> <span class=\"attr\">class</span>=<span class=\"string\">\"nav child_menu slide\"</span> <span class=\"attr\">v-on:click.stop</span> <span class=\"attr\">v-show</span>=<span class=\"string\">\"menu.class\"</span>&gt;</span></div><div class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">router-link</span> <span class=\"attr\">v-for</span>=<span class=\"string\">\"childMenu in menu.childMenus\"</span> <span class=\"attr\">v-bind:key</span>=<span class=\"string\">\"childMenu.text\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"slide-item\"</span> <span class=\"attr\">:to</span>=<span class=\"string\">\"childMenu.href\"</span> <span class=\"attr\">tag</span>=<span class=\"string\">\"li\"</span></span></div><div class=\"line\">                  <span class=\"attr\">active-class</span>=<span class=\"string\">\"current-page\"</span>&gt;</div><div class=\"line\">                  <span class=\"tag\">&lt;<span class=\"name\">a</span>&gt;</span>&#123;&#123; childMenu.text &#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></div><div class=\"line\">                <span class=\"tag\">&lt;/<span class=\"name\">router-link</span>&gt;</span></div><div class=\"line\">              <span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></div><div class=\"line\">          <span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">      <span class=\"comment\">&lt;!-- /sidebar menu --&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<p>大家可以看到，这里我们使用了router-link这个组件，后面章节我们会较详细描述vue-router2.0的使用，所以这里我们就先略过吧。</p>\n<h3 id=\"添加组件数据\"><a href=\"#添加组件数据\" class=\"headerlink\" title=\"添加组件数据\"></a>添加组件数据</h3><p>这里我们添加菜单数据，这里注意的是有个设定，就是一级菜单若有链接则不带有子菜单。<br><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div></pre></td><td class=\"code\"><pre><div class=\"line\"> \texport default &#123;</div><div class=\"line\">  data() &#123;</div><div class=\"line\">    return &#123;</div><div class=\"line\">      menus: [&#123;</div><div class=\"line\">        icon: 'fa-home', // icon用于储存菜单对应的图标</div><div class=\"line\">        text: '服务管理', // text用于储存该菜单显示名称</div><div class=\"line\">        class: '',</div><div class=\"line\">        childMenus: [&#123;</div><div class=\"line\">          href: '/app/services', // href用于设定该菜单跳转路由</div><div class=\"line\">          text: '服务信息' // text用于储存该菜单显示名称</div><div class=\"line\">        &#125;, &#123;</div><div class=\"line\">          href: '/app/add/service', // href用于设定该菜单跳转路由</div><div class=\"line\">          text: '新建' // text用于储存该菜单显示名称</div><div class=\"line\">        &#125;]</div><div class=\"line\">      &#125;, &#123;</div><div class=\"line\">        icon: 'fa-cubes',</div><div class=\"line\">        text: '产品管理',</div><div class=\"line\">        class: '',</div><div class=\"line\">        childMenus: [&#123;</div><div class=\"line\">          href: '/app/products',</div><div class=\"line\">          text: '产品信息'</div><div class=\"line\">        &#125;, &#123;</div><div class=\"line\">          href: '/app/add/product',</div><div class=\"line\">          text: '新建'</div><div class=\"line\">        &#125;]</div><div class=\"line\">      &#125;, &#123;</div><div class=\"line\">        icon: 'fa-file-o',</div><div class=\"line\">        text: '日志管理',</div><div class=\"line\">        class: '',</div><div class=\"line\">        href: '/app/logs'</div><div class=\"line\">      &#125;],</div><div class=\"line\">      menuShowAll: true,</div><div class=\"line\">      post: null,</div><div class=\"line\">      error: null</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h3 id=\"添加点击事件\"><a href=\"#添加点击事件\" class=\"headerlink\" title=\"添加点击事件\"></a>添加点击事件</h3><p>从Html模板我们可以看到，点击菜单时的事件未toggleMenu，这里我们通过将其添加active的样式，并绑定v-show判断是否展示来实现。<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 在 `methods` 对象中定义方法</span></div><div class=\"line\">methods: &#123;</div><div class=\"line\">  toggleMenu(menu) &#123;</div><div class=\"line\">  <span class=\"comment\">// 当菜单有href属性时，代表其将进行路由跳转而不是展开收起子菜单</span></div><div class=\"line\">  <span class=\"comment\">// 此时将其余菜单收起</span></div><div class=\"line\">  <span class=\"keyword\">if</span> (menu.href) &#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>.$router.push(menu.href);</div><div class=\"line\">    <span class=\"keyword\">this</span>.menus.forEach(<span class=\"function\"><span class=\"params\">item</span> =&gt;</span> &#123;</div><div class=\"line\">      item.class = <span class=\"string\">''</span>;</div><div class=\"line\">    &#125;);</div><div class=\"line\">    menu.class = <span class=\"string\">'active'</span>;</div><div class=\"line\">    <span class=\"keyword\">return</span>;</div><div class=\"line\">  &#125;</div><div class=\"line\">  <span class=\"comment\">// 其他时候默认进行子菜单的切换</span></div><div class=\"line\">  <span class=\"keyword\">switch</span> (menu.class) &#123;</div><div class=\"line\">    <span class=\"keyword\">case</span> <span class=\"string\">'active'</span>:</div><div class=\"line\">      menu.class = <span class=\"string\">''</span>;</div><div class=\"line\">      <span class=\"keyword\">break</span>;</div><div class=\"line\">    <span class=\"keyword\">case</span> <span class=\"string\">''</span>:</div><div class=\"line\">      menu.class = <span class=\"string\">'active'</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h3 id=\"在App组件中使用Sidebar\"><a href=\"#在App组件中使用Sidebar\" class=\"headerlink\" title=\"在App组件中使用Sidebar\"></a>在App组件中使用Sidebar</h3><ul>\n<li>引入该组件</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> Sidebar <span class=\"keyword\">from</span> <span class=\"string\">'./components/Sidebar'</span></div></pre></td></tr></table></figure>\n<ul>\n<li>在App组件中注入该组件</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</div><div class=\"line\">  <span class=\"attr\">name</span>: <span class=\"string\">'App'</span>,</div><div class=\"line\">  <span class=\"attr\">components</span>: &#123;</div><div class=\"line\">    Sidebar</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<ul>\n<li>模板中使用</li>\n</ul>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">template</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"app\"</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"container body\"</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"main_container\"</span>&gt;</span></div><div class=\"line\">                <span class=\"comment\">&lt;!--使用Sidebar组件--&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">Sidebar</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">Sidebar</span>&gt;</span></div><div class=\"line\">                <span class=\"comment\">&lt;!-- page content --&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"right_col\"</span> <span class=\"attr\">role</span>=<span class=\"string\">\"main\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></div></pre></td></tr></table></figure>\n<h3 id=\"页面最终效果\"><a href=\"#页面最终效果\" class=\"headerlink\" title=\"页面最终效果\"></a>页面最终效果</h3><p><img src=\"http://o905ne85q.bkt.clouddn.com/9063.tmp.png\" alt=\"image\"></p>\n<h3 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h3><p><a href=\"https://vuefe.cn/guide/\" target=\"_blank\" rel=\"external\">Vue2.0中文文档</a></p>\n<h2 id=\"结束语\"><a href=\"#结束语\" class=\"headerlink\" title=\"结束语\"></a>结束语</h2><hr>\n<p>突然发现，调用别人写好的页面模板，还是好方便呀。省去了码样式的时间，当然最重要的还是模板好看哈哈，这里表扬一下<a href=\"https://github.com/puikinsh/gentelella\" target=\"_blank\" rel=\"external\">gentelella</a>才行。<br><a href=\"https://github.com/godbasin/godbasin.github.io/tree/blog-codes/vue2-notes/2-create-sidebar-componnet\" target=\"_blank\" rel=\"external\">此处查看项目代码</a><br><a href=\"http://ofyya1gfg.bkt.clouddn.com/2-create-sidebar-componnet/index.html#/App\" target=\"_blank\" rel=\"external\">此处查看页面效果</a></p>\n","excerpt":"<p>最近在使用Vue2作为项目中前端的框架，《Vue2使用笔记》系列用于记录过程中的一些使用和解决方法。<br>本文记录创建Sidebar组件，包括模板与下拉点击事件的过程。<br>","more":"</p>\n<h2 id=\"Vue1-x-vs-Vue2-x\"><a href=\"#Vue1-x-vs-Vue2-x\" class=\"headerlink\" title=\"Vue1.x vs Vue2.x\"></a>Vue1.x vs Vue2.x</h2><hr>\n<h3 id=\"issue\"><a href=\"#issue\" class=\"headerlink\" title=\"issue\"></a>issue</h3><p>具体vue1.x到vue2的改变，大家可以参考官方发布的<a href=\"https://github.com/vuejs/vue/issues/2873\">issues</a>。</p>\n<h3 id=\"一些改变\"><a href=\"#一些改变\" class=\"headerlink\" title=\"一些改变\"></a>一些改变</h3><p>这里本骚年只是简述一下接触到的一些改变：</p>\n<ul>\n<li><p><a href=\"https://vuefe.cn/guide/instance.html#生命周期图示\">生命周期的改变</a><br><img src=\"http://o905ne85q.bkt.clouddn.com/f847b38a-63fe-11e6-9c29-38e58d46f036.png\" alt=\"image\"><br>如图，大概最重要的是ready和mounted钩子函数的改变吧。</p>\n</li>\n<li><p>组件间通信</p>\n<ul>\n<li><a href=\"https://vuefe.cn/guide/components.html#使用-v-on-绑定自定义事件\">$on/$emit事件</a>，$dispatch、$broadcast废弃</li>\n<li><a href=\"https://vuefe.cn/guide/components.html#子组件索引\">使用ref属性为子组件索引</a>，v-ref、v-el弃用</li>\n</ul>\n</li>\n<li><p>v-for循环中常用的$index、$key也已不支持使用，track-by被key属性替换</p>\n</li>\n<li><p><a href=\"https://vuefe.cn/guide/transitions.html\">过渡效果组件<transition></transition></a></p>\n</li>\n<li><p><a href=\"https://vuefe.cn/guide/render-function.html#基础\">Render函数</a>，需要JavaScript的完全编程的能力时使用</p>\n</li>\n<li><p><a href=\"http://router.vuejs.org/zh-cn/index.html\">vue-router2.0</a>，这个我们后面章节会再次讲述</p>\n</li>\n</ul>\n<h2 id=\"添加Sidebar组件\"><a href=\"#添加Sidebar组件\" class=\"headerlink\" title=\"添加Sidebar组件\"></a>添加Sidebar组件</h2><hr>\n<p>首先我们在src/components文件夹里面创建Siderbar.vue文件。</p>\n<h3 id=\"添加组件模板\"><a href=\"#添加组件模板\" class=\"headerlink\" title=\"添加组件模板\"></a>添加组件模板</h3><p>这里我们把gentelella模板里面的左侧菜单部分移植过来后，然后进行相关的列表渲染v-for和事件绑定v-on。<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">template</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"col-md-3 left_col menu_fixed\"</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"left_col scroll-view\"</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"navbar nav_title\"</span> <span class=\"attr\">style</span>=<span class=\"string\">\"border: 0;\"</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"index.html\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"site_title\"</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">i</span> <span class=\"attr\">class</span>=<span class=\"string\">\"fa fa-paw\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">i</span>&gt;</span> <span class=\"tag\">&lt;<span class=\"name\">span</span>&gt;</span>管理系统<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"clearfix\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\">      <span class=\"comment\">&lt;!-- menu profile quick info --&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"profile\"</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"profile_pic\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"profile_info\"</span>&gt;</span></div><div class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">h2</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">span</span>&gt;</span>欢迎回来, <span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span> 老大<span class=\"tag\">&lt;/<span class=\"name\">h2</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"clearfix\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\">      <span class=\"comment\">&lt;!-- sidebar menu --&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"sidebar-menu\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"main_menu_side hidden-print main_menu\"</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"menu_section\"</span>&gt;</span></div><div class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">br</span> /&gt;</span></div><div class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">h2</span>&gt;</span>通用设置<span class=\"tag\">&lt;/<span class=\"name\">h2</span>&gt;</span></div><div class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">br</span> /&gt;</span></div><div class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">ul</span> <span class=\"attr\">class</span>=<span class=\"string\">\"nav side-menu\"</span>&gt;</span></div><div class=\"line\">                        <span class=\"comment\">&lt;!--通过v-for来进行菜单列表的显示，并绑定v-on:click事件进行点击控制--&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">v-for</span>=<span class=\"string\">\"menu in menus\"</span> <span class=\"attr\">v-on:click</span>=<span class=\"string\">\"toggleMenu(menu)\"</span> <span class=\"attr\">v-bind:class</span>=<span class=\"string\">\"menu.class\"</span>&gt;</span></div><div class=\"line\">                            <span class=\"comment\">&lt;!--class的绑定需要使用v-bind:class来实现--&gt;</span></div><div class=\"line\">              <span class=\"tag\">&lt;<span class=\"name\">a</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">i</span> <span class=\"attr\">class</span>=<span class=\"string\">\"fa\"</span> <span class=\"attr\">v-bind:class</span>=<span class=\"string\">\"menu.icon\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">i</span>&gt;</span> &#123;&#123;menu.text&#125;&#125; <span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">class</span>=<span class=\"string\">\"fa\"</span> <span class=\"attr\">v-show</span>=<span class=\"string\">\"!menu.href\"</span> <span class=\"attr\">v-bind:class</span>=<span class=\"string\">\"menu.class ? 'fa-chevron-down' : 'fa-chevron-right'\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></div><div class=\"line\">              <span class=\"comment\">&lt;!--通过判断class是否active来进行显示和隐藏的控制--&gt;</span></div><div class=\"line\">                            <span class=\"tag\">&lt;<span class=\"name\">ul</span> <span class=\"attr\">class</span>=<span class=\"string\">\"nav child_menu slide\"</span> <span class=\"attr\">v-on:click.stop</span> <span class=\"attr\">v-show</span>=<span class=\"string\">\"menu.class\"</span>&gt;</span></div><div class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">router-link</span> <span class=\"attr\">v-for</span>=<span class=\"string\">\"childMenu in menu.childMenus\"</span> <span class=\"attr\">v-bind:key</span>=<span class=\"string\">\"childMenu.text\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"slide-item\"</span> <span class=\"attr\">:to</span>=<span class=\"string\">\"childMenu.href\"</span> <span class=\"attr\">tag</span>=<span class=\"string\">\"li\"</span></div><div class=\"line\">                  <span class=\"attr\">active-class</span>=<span class=\"string\">\"current-page\"</span>&gt;</span></div><div class=\"line\">                  <span class=\"tag\">&lt;<span class=\"name\">a</span>&gt;</span>&#123;&#123; childMenu.text &#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></div><div class=\"line\">                <span class=\"tag\">&lt;/<span class=\"name\">router-link</span>&gt;</span></div><div class=\"line\">              <span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></div><div class=\"line\">          <span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">      <span class=\"comment\">&lt;!-- /sidebar menu --&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<p>大家可以看到，这里我们使用了router-link这个组件，后面章节我们会较详细描述vue-router2.0的使用，所以这里我们就先略过吧。</p>\n<h3 id=\"添加组件数据\"><a href=\"#添加组件数据\" class=\"headerlink\" title=\"添加组件数据\"></a>添加组件数据</h3><p>这里我们添加菜单数据，这里注意的是有个设定，就是一级菜单若有链接则不带有子菜单。<br><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div></pre></td><td class=\"code\"><pre><div class=\"line\"> \texport default &#123;</div><div class=\"line\">  data() &#123;</div><div class=\"line\">    return &#123;</div><div class=\"line\">      menus: [&#123;</div><div class=\"line\">        icon: 'fa-home', // icon用于储存菜单对应的图标</div><div class=\"line\">        text: '服务管理', // text用于储存该菜单显示名称</div><div class=\"line\">        class: '',</div><div class=\"line\">        childMenus: [&#123;</div><div class=\"line\">          href: '/app/services', // href用于设定该菜单跳转路由</div><div class=\"line\">          text: '服务信息' // text用于储存该菜单显示名称</div><div class=\"line\">        &#125;, &#123;</div><div class=\"line\">          href: '/app/add/service', // href用于设定该菜单跳转路由</div><div class=\"line\">          text: '新建' // text用于储存该菜单显示名称</div><div class=\"line\">        &#125;]</div><div class=\"line\">      &#125;, &#123;</div><div class=\"line\">        icon: 'fa-cubes',</div><div class=\"line\">        text: '产品管理',</div><div class=\"line\">        class: '',</div><div class=\"line\">        childMenus: [&#123;</div><div class=\"line\">          href: '/app/products',</div><div class=\"line\">          text: '产品信息'</div><div class=\"line\">        &#125;, &#123;</div><div class=\"line\">          href: '/app/add/product',</div><div class=\"line\">          text: '新建'</div><div class=\"line\">        &#125;]</div><div class=\"line\">      &#125;, &#123;</div><div class=\"line\">        icon: 'fa-file-o',</div><div class=\"line\">        text: '日志管理',</div><div class=\"line\">        class: '',</div><div class=\"line\">        href: '/app/logs'</div><div class=\"line\">      &#125;],</div><div class=\"line\">      menuShowAll: true,</div><div class=\"line\">      post: null,</div><div class=\"line\">      error: null</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h3 id=\"添加点击事件\"><a href=\"#添加点击事件\" class=\"headerlink\" title=\"添加点击事件\"></a>添加点击事件</h3><p>从Html模板我们可以看到，点击菜单时的事件未toggleMenu，这里我们通过将其添加active的样式，并绑定v-show判断是否展示来实现。<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 在 `methods` 对象中定义方法</span></div><div class=\"line\">methods: &#123;</div><div class=\"line\">  toggleMenu(menu) &#123;</div><div class=\"line\">  <span class=\"comment\">// 当菜单有href属性时，代表其将进行路由跳转而不是展开收起子菜单</span></div><div class=\"line\">  <span class=\"comment\">// 此时将其余菜单收起</span></div><div class=\"line\">  <span class=\"keyword\">if</span> (menu.href) &#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>.$router.push(menu.href);</div><div class=\"line\">    <span class=\"keyword\">this</span>.menus.forEach(<span class=\"function\"><span class=\"params\">item</span> =&gt;</span> &#123;</div><div class=\"line\">      item.class = <span class=\"string\">''</span>;</div><div class=\"line\">    &#125;);</div><div class=\"line\">    menu.class = <span class=\"string\">'active'</span>;</div><div class=\"line\">    <span class=\"keyword\">return</span>;</div><div class=\"line\">  &#125;</div><div class=\"line\">  <span class=\"comment\">// 其他时候默认进行子菜单的切换</span></div><div class=\"line\">  <span class=\"keyword\">switch</span> (menu.class) &#123;</div><div class=\"line\">    <span class=\"keyword\">case</span> <span class=\"string\">'active'</span>:</div><div class=\"line\">      menu.class = <span class=\"string\">''</span>;</div><div class=\"line\">      <span class=\"keyword\">break</span>;</div><div class=\"line\">    <span class=\"keyword\">case</span> <span class=\"string\">''</span>:</div><div class=\"line\">      menu.class = <span class=\"string\">'active'</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h3 id=\"在App组件中使用Sidebar\"><a href=\"#在App组件中使用Sidebar\" class=\"headerlink\" title=\"在App组件中使用Sidebar\"></a>在App组件中使用Sidebar</h3><ul>\n<li>引入该组件</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> Sidebar <span class=\"keyword\">from</span> <span class=\"string\">'./components/Sidebar'</span></div></pre></td></tr></table></figure>\n<ul>\n<li>在App组件中注入该组件</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</div><div class=\"line\">  <span class=\"attr\">name</span>: <span class=\"string\">'App'</span>,</div><div class=\"line\">  <span class=\"attr\">components</span>: &#123;</div><div class=\"line\">    Sidebar</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<ul>\n<li>模板中使用</li>\n</ul>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">template</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"app\"</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"container body\"</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"main_container\"</span>&gt;</span></div><div class=\"line\">                <span class=\"comment\">&lt;!--使用Sidebar组件--&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">Sidebar</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">Sidebar</span>&gt;</span></div><div class=\"line\">                <span class=\"comment\">&lt;!-- page content --&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"right_col\"</span> <span class=\"attr\">role</span>=<span class=\"string\">\"main\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></div></pre></td></tr></table></figure>\n<h3 id=\"页面最终效果\"><a href=\"#页面最终效果\" class=\"headerlink\" title=\"页面最终效果\"></a>页面最终效果</h3><p><img src=\"http://o905ne85q.bkt.clouddn.com/9063.tmp.png\" alt=\"image\"></p>\n<h3 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h3><p><a href=\"https://vuefe.cn/guide/\">Vue2.0中文文档</a></p>\n<h2 id=\"结束语\"><a href=\"#结束语\" class=\"headerlink\" title=\"结束语\"></a>结束语</h2><hr>\n<p>突然发现，调用别人写好的页面模板，还是好方便呀。省去了码样式的时间，当然最重要的还是模板好看哈哈，这里表扬一下<a href=\"https://github.com/puikinsh/gentelella\">gentelella</a>才行。<br><a href=\"https://github.com/godbasin/godbasin.github.io/tree/blog-codes/vue2-notes/2-create-sidebar-componnet\">此处查看项目代码</a><br><a href=\"http://ofyya1gfg.bkt.clouddn.com/2-create-sidebar-componnet/index.html#/App\">此处查看页面效果</a></p>"},{"title":"Vue2使用笔记3--父子组件的通信","date":"2016-11-26T07:33:50.000Z","_content":"最近在使用Vue2作为项目中前端的框架，《Vue2使用笔记》系列用于记录过程中的一些使用和解决方法。\n本文记录父子间组件的通信方法，以及添加Top组件的过程。\n<!--more-->\n\n## 父子组件通信\n---\n### 使用Props传递数据\n使用props传递数据，和vue1.x的使用方法一样。\n- prop是父组件用来传递数据的一个自定义属性\n- 子组件需要显式地用props选项声明“prop”\n- 动态Props：用v-bind绑定动态props到父组件的数据。每当父组件的数据变化时，也会传导给子组件\n\n### 使用自定义事件\n上一篇我们简单提到了自定义事件，在vue1.x中，拥有$dispatch、$broadcast事件，这两个事件在vue2.x中被废弃，这里我们可以用到的事件有：\n- 使用`$on(eventName)`监听事件\n- 使用`$emit(eventName)`触发事件\n\n### 子组件索引\n有时需要在JavaScript中直接访问子组件，为此可以使用ref为子组件指定一个索引ID。\n\n### 非父子组件通信\nvue2.x中提供了一种方法来进行非父子组件间通信，即使用一个空的Vue实例作为中央事件总线：\n``` js\nvar bus = new Vue()\n// 触发组件 A 中的事件\nbus.$emit('id-selected', 1)\n// 在组件 B 创建的钩子中监听事件\nbus.$on('id-selected', function (id) {\n  // ...\n})\n```\n在更多复杂的情况下，你应该考虑使用专门的[状态管理模式](https://vuefe.cn/guide/state-management.html)。\n\n## 添加Sidebar组件展开收起事件\n---\n首先我们在Siderbar组件中进行以下修改。\n### 添加状态记录展开或收起状态\n在data中添加menuShowAll变量记录状态：\n``` js\ndata() {\n\treturn {\n\t\t... // 其他数据\n\t\tmenuShowAll: true // 初始化为展开状态\n\t}\n}\n```\n\n### 添加方法控制展开收起\n我们使用的是(gentelella模板)[https://github.com/puikinsh/gentelella]，运行查看可知道，展开收起的控制主要由nav-md和nav-sm，以及active和active-sm来进行控制。\n``` js\nmethods: {\n\ttoggleMenu(menu) {\n\t\t// 当菜单有href属性时，代表其将进行路由跳转而不是展开收起子菜单\n\t\t// 此时将其余菜单收起\n\t\tif (menu.href) {\n\t\t\tthis.$router.push(menu.href);\n\t\t\tthis.menus.forEach(item => {\n\t\t\t\titem.class = '';\n\t\t\t});\n\t\t\t// 设置active时需判断当前状态，进行展开和收起的状态区分\n\t\t\tmenu.class = this.menuShowAll ? 'active' : 'active-sm';\n\t\t\treturn;\n\t\t}\n\t\t// 其他时候默认进行子菜单的切换\n\t\tswitch (menu.class) {\n\t\t\tcase 'active':\n\t\t\t\tmenu.class = '';\n \t\t\t\tbreak;\n\t\t\tcase '':\n\t\t\t\tmenu.class = this.menuShowAll ? 'active' : 'active-sm';\n\t\t}\n\t},\n\ttoggleMenuShowAll() { // 菜单大小切换\n\t\tvar $body = $('body');\n\t\tthis.menus.forEach(menu => {\n\t\t\tlet c = menu.class;\n\t\t\tmenu.class = c === 'active' ? 'active-sm' : (c === 'active-sm' ? 'active' : c)\n\t\t})\n\t\tthis.menuShowAll = !this.menuShowAll;\n\t\t$body.toggleClass('nav-md nav-sm');\n\t}\n}\n```\n\n### 添加点击事件\n从Html模板我们可以看到，点击菜单时的事件未toggleMenu，这里我们通过将其添加active的样式，并绑定v-show判断是否展示来实现。\n``` js\n// 在 `methods` 对象中定义方法\nmethods: {\n   toggleMenu(menu) {\n        // 当菜单有href属性时，代表其将进行路由跳转而不是展开收起子菜单\n        // 此时将其余菜单收起\n        if (menu.href) {\n            this.$router.push(menu.href);\n            this.menus.forEach(item => {\n                item.class = '';\n            });\n            menu.class = 'active';\n            return;\n        }\n        // 其他时候默认进行子菜单的切换\n        switch (menu.class) {\n            case 'active':\n                menu.class = '';\n                break;\n            case '':\n                menu.class = 'active';\n        }\n    }\n}\n```\n\n## 添加Top组件\n---\n添加Top组件用于点击触发展开收起事件\n\n### 创建组件\n我们在src/components文件夹里面创建Top.vue文件。\n\n### 添加模板\n``` html\n<template>\n\t<!-- top navigation -->\n\t<div class=\"top_nav\">\n\t\t<div class=\"nav_menu\">\n\t\t\t<nav>\n\t\t\t\t<div class=\"nav toggle\">\n\t\t\t\t\t<!--这里添加点击事件，用来触发Sidebar的展开和收起-->\n\t\t\t\t\t<a id=\"menu_toggle\" v-on:click=\"sidebarToggleClick\"><i class=\"fa fa-bars\"></i></a>\n\t\t\t\t</div>\n\t\t\t\t<ul class=\"nav navbar-nav navbar-right\">\n\t\t\t\t\t<li class=\"\">\n\t\t\t\t\t\t<a href=\"javascript:;\" class=\"user-profile dropdown-toggle\" data-toggle=\"dropdown\" aria-expanded=\"false\">\n\t\t\t\t\t\t\t用户\n\t\t\t\t\t\t\t<span class=\" fa fa-angle-down\"></span>\n\t\t\t\t\t\t</a>\n\t\t\t\t\t\t<ul class=\"dropdown-menu dropdown-usermenu pull-right\">\n\t\t\t\t\t\t\t<li><a href=\"javascript:;\">设置</a></li>\n\t\t\t\t\t\t\t<li><router-link to=\"/login\"><i class=\"fa fa-sign-out pull-right\"></i>退出</router-link></li>\n\t\t\t\t\t\t</ul>\n\t\t\t\t\t</li>\n\t\t\t\t</ul>\n\t\t\t</nav>\n\t\t</div>\n\t</div>\n\t<!-- /top navigation -->\n</template>\n```\n\n### 添加点击事件\n``` js\nexport default {\n    methods: {\n       // 点击事件\n       sidebarToggleClick() {\n            // 使用$emit触发自定义事件SidebarToggleClick\n            this.$emit('SidebarToggleClick');\n       }\n    }\n}\n```\n\n## App父组件处理事件\n---\n\n### 注入Top组件并引入\n``` js\nimport Top from './components/Top'\nexport default {\n\t...\n\tcomponents: {\n\t\t...\n\t\tTop\n\t}\n}\n```\n\n### 模板中使用Top组件\n在App模板中使用Top组件，这里我们还使用ref来获取Sidebar组件的事件。\n``` html\n<!--使用Sidebar组件，使用ref熟悉进行子组件索引-->\n<Sidebar ref=\"sidebar\"></Sidebar>\n<!--使用Top组件，且绑定监听子组件SidebarToggleClick事件-->\n<Top v-on:SidebarToggleClick=\"transSidebarToggle\"></Top>\n```\n\n### 添加方法处理SidebarToggleClick事件\n在App组件中添加方法，绑定SidebarToggleClick事件。\n``` js\nmethods: {\n\t// 添加方法绑定SidebarToggleClick事件\n\t// 这里我们直接通过ref索引获取调用Sidebar子组件的toggleMenuShowAll方法\n\ttransSidebarToggle() {\n\t\tthis.$refs.sidebar.toggleMenuShowAll();\n\t}\n}\n```\n\n### 页面最终效果\n![image](http://o905ne85q.bkt.clouddn.com/EC9E.tmp.png)\n\n### 参考\n[Vue2.0中文文档](https://vuefe.cn/guide/)\n\n## 结束语\n-----\n当然，父子组件间通信有很多实现方法。大家感兴趣的当然也可以尝试用中央事件总线或者是状态管理来实现啦。\n[此处查看项目代码](https://github.com/godbasin/godbasin.github.io/tree/blog-codes/vue2-notes/3-parent-child-component)\n[此处查看页面效果](http://ofyya1gfg.bkt.clouddn.com/3-parent-child-component/index.html#/App)","source":"_posts/vue2-notes-3-parent-child-component.md","raw":"---\ntitle: Vue2使用笔记3--父子组件的通信\ndate: 2016-11-26 15:33:50\ncategories: vue八宝粥\ntags: 笔记\n---\n最近在使用Vue2作为项目中前端的框架，《Vue2使用笔记》系列用于记录过程中的一些使用和解决方法。\n本文记录父子间组件的通信方法，以及添加Top组件的过程。\n<!--more-->\n\n## 父子组件通信\n---\n### 使用Props传递数据\n使用props传递数据，和vue1.x的使用方法一样。\n- prop是父组件用来传递数据的一个自定义属性\n- 子组件需要显式地用props选项声明“prop”\n- 动态Props：用v-bind绑定动态props到父组件的数据。每当父组件的数据变化时，也会传导给子组件\n\n### 使用自定义事件\n上一篇我们简单提到了自定义事件，在vue1.x中，拥有$dispatch、$broadcast事件，这两个事件在vue2.x中被废弃，这里我们可以用到的事件有：\n- 使用`$on(eventName)`监听事件\n- 使用`$emit(eventName)`触发事件\n\n### 子组件索引\n有时需要在JavaScript中直接访问子组件，为此可以使用ref为子组件指定一个索引ID。\n\n### 非父子组件通信\nvue2.x中提供了一种方法来进行非父子组件间通信，即使用一个空的Vue实例作为中央事件总线：\n``` js\nvar bus = new Vue()\n// 触发组件 A 中的事件\nbus.$emit('id-selected', 1)\n// 在组件 B 创建的钩子中监听事件\nbus.$on('id-selected', function (id) {\n  // ...\n})\n```\n在更多复杂的情况下，你应该考虑使用专门的[状态管理模式](https://vuefe.cn/guide/state-management.html)。\n\n## 添加Sidebar组件展开收起事件\n---\n首先我们在Siderbar组件中进行以下修改。\n### 添加状态记录展开或收起状态\n在data中添加menuShowAll变量记录状态：\n``` js\ndata() {\n\treturn {\n\t\t... // 其他数据\n\t\tmenuShowAll: true // 初始化为展开状态\n\t}\n}\n```\n\n### 添加方法控制展开收起\n我们使用的是(gentelella模板)[https://github.com/puikinsh/gentelella]，运行查看可知道，展开收起的控制主要由nav-md和nav-sm，以及active和active-sm来进行控制。\n``` js\nmethods: {\n\ttoggleMenu(menu) {\n\t\t// 当菜单有href属性时，代表其将进行路由跳转而不是展开收起子菜单\n\t\t// 此时将其余菜单收起\n\t\tif (menu.href) {\n\t\t\tthis.$router.push(menu.href);\n\t\t\tthis.menus.forEach(item => {\n\t\t\t\titem.class = '';\n\t\t\t});\n\t\t\t// 设置active时需判断当前状态，进行展开和收起的状态区分\n\t\t\tmenu.class = this.menuShowAll ? 'active' : 'active-sm';\n\t\t\treturn;\n\t\t}\n\t\t// 其他时候默认进行子菜单的切换\n\t\tswitch (menu.class) {\n\t\t\tcase 'active':\n\t\t\t\tmenu.class = '';\n \t\t\t\tbreak;\n\t\t\tcase '':\n\t\t\t\tmenu.class = this.menuShowAll ? 'active' : 'active-sm';\n\t\t}\n\t},\n\ttoggleMenuShowAll() { // 菜单大小切换\n\t\tvar $body = $('body');\n\t\tthis.menus.forEach(menu => {\n\t\t\tlet c = menu.class;\n\t\t\tmenu.class = c === 'active' ? 'active-sm' : (c === 'active-sm' ? 'active' : c)\n\t\t})\n\t\tthis.menuShowAll = !this.menuShowAll;\n\t\t$body.toggleClass('nav-md nav-sm');\n\t}\n}\n```\n\n### 添加点击事件\n从Html模板我们可以看到，点击菜单时的事件未toggleMenu，这里我们通过将其添加active的样式，并绑定v-show判断是否展示来实现。\n``` js\n// 在 `methods` 对象中定义方法\nmethods: {\n   toggleMenu(menu) {\n        // 当菜单有href属性时，代表其将进行路由跳转而不是展开收起子菜单\n        // 此时将其余菜单收起\n        if (menu.href) {\n            this.$router.push(menu.href);\n            this.menus.forEach(item => {\n                item.class = '';\n            });\n            menu.class = 'active';\n            return;\n        }\n        // 其他时候默认进行子菜单的切换\n        switch (menu.class) {\n            case 'active':\n                menu.class = '';\n                break;\n            case '':\n                menu.class = 'active';\n        }\n    }\n}\n```\n\n## 添加Top组件\n---\n添加Top组件用于点击触发展开收起事件\n\n### 创建组件\n我们在src/components文件夹里面创建Top.vue文件。\n\n### 添加模板\n``` html\n<template>\n\t<!-- top navigation -->\n\t<div class=\"top_nav\">\n\t\t<div class=\"nav_menu\">\n\t\t\t<nav>\n\t\t\t\t<div class=\"nav toggle\">\n\t\t\t\t\t<!--这里添加点击事件，用来触发Sidebar的展开和收起-->\n\t\t\t\t\t<a id=\"menu_toggle\" v-on:click=\"sidebarToggleClick\"><i class=\"fa fa-bars\"></i></a>\n\t\t\t\t</div>\n\t\t\t\t<ul class=\"nav navbar-nav navbar-right\">\n\t\t\t\t\t<li class=\"\">\n\t\t\t\t\t\t<a href=\"javascript:;\" class=\"user-profile dropdown-toggle\" data-toggle=\"dropdown\" aria-expanded=\"false\">\n\t\t\t\t\t\t\t用户\n\t\t\t\t\t\t\t<span class=\" fa fa-angle-down\"></span>\n\t\t\t\t\t\t</a>\n\t\t\t\t\t\t<ul class=\"dropdown-menu dropdown-usermenu pull-right\">\n\t\t\t\t\t\t\t<li><a href=\"javascript:;\">设置</a></li>\n\t\t\t\t\t\t\t<li><router-link to=\"/login\"><i class=\"fa fa-sign-out pull-right\"></i>退出</router-link></li>\n\t\t\t\t\t\t</ul>\n\t\t\t\t\t</li>\n\t\t\t\t</ul>\n\t\t\t</nav>\n\t\t</div>\n\t</div>\n\t<!-- /top navigation -->\n</template>\n```\n\n### 添加点击事件\n``` js\nexport default {\n    methods: {\n       // 点击事件\n       sidebarToggleClick() {\n            // 使用$emit触发自定义事件SidebarToggleClick\n            this.$emit('SidebarToggleClick');\n       }\n    }\n}\n```\n\n## App父组件处理事件\n---\n\n### 注入Top组件并引入\n``` js\nimport Top from './components/Top'\nexport default {\n\t...\n\tcomponents: {\n\t\t...\n\t\tTop\n\t}\n}\n```\n\n### 模板中使用Top组件\n在App模板中使用Top组件，这里我们还使用ref来获取Sidebar组件的事件。\n``` html\n<!--使用Sidebar组件，使用ref熟悉进行子组件索引-->\n<Sidebar ref=\"sidebar\"></Sidebar>\n<!--使用Top组件，且绑定监听子组件SidebarToggleClick事件-->\n<Top v-on:SidebarToggleClick=\"transSidebarToggle\"></Top>\n```\n\n### 添加方法处理SidebarToggleClick事件\n在App组件中添加方法，绑定SidebarToggleClick事件。\n``` js\nmethods: {\n\t// 添加方法绑定SidebarToggleClick事件\n\t// 这里我们直接通过ref索引获取调用Sidebar子组件的toggleMenuShowAll方法\n\ttransSidebarToggle() {\n\t\tthis.$refs.sidebar.toggleMenuShowAll();\n\t}\n}\n```\n\n### 页面最终效果\n![image](http://o905ne85q.bkt.clouddn.com/EC9E.tmp.png)\n\n### 参考\n[Vue2.0中文文档](https://vuefe.cn/guide/)\n\n## 结束语\n-----\n当然，父子组件间通信有很多实现方法。大家感兴趣的当然也可以尝试用中央事件总线或者是状态管理来实现啦。\n[此处查看项目代码](https://github.com/godbasin/godbasin.github.io/tree/blog-codes/vue2-notes/3-parent-child-component)\n[此处查看页面效果](http://ofyya1gfg.bkt.clouddn.com/3-parent-child-component/index.html#/App)","slug":"vue2-notes-3-parent-child-component","published":1,"updated":"2016-11-26T07:34:01.547Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cix45huid0056xotujk36hvs1","content":"<p>最近在使用Vue2作为项目中前端的框架，《Vue2使用笔记》系列用于记录过程中的一些使用和解决方法。<br>本文记录父子间组件的通信方法，以及添加Top组件的过程。<br><a id=\"more\"></a></p>\n<h2 id=\"父子组件通信\"><a href=\"#父子组件通信\" class=\"headerlink\" title=\"父子组件通信\"></a>父子组件通信</h2><hr>\n<h3 id=\"使用Props传递数据\"><a href=\"#使用Props传递数据\" class=\"headerlink\" title=\"使用Props传递数据\"></a>使用Props传递数据</h3><p>使用props传递数据，和vue1.x的使用方法一样。</p>\n<ul>\n<li>prop是父组件用来传递数据的一个自定义属性</li>\n<li>子组件需要显式地用props选项声明“prop”</li>\n<li>动态Props：用v-bind绑定动态props到父组件的数据。每当父组件的数据变化时，也会传导给子组件</li>\n</ul>\n<h3 id=\"使用自定义事件\"><a href=\"#使用自定义事件\" class=\"headerlink\" title=\"使用自定义事件\"></a>使用自定义事件</h3><p>上一篇我们简单提到了自定义事件，在vue1.x中，拥有$dispatch、$broadcast事件，这两个事件在vue2.x中被废弃，这里我们可以用到的事件有：</p>\n<ul>\n<li>使用<code>$on(eventName)</code>监听事件</li>\n<li>使用<code>$emit(eventName)</code>触发事件</li>\n</ul>\n<h3 id=\"子组件索引\"><a href=\"#子组件索引\" class=\"headerlink\" title=\"子组件索引\"></a>子组件索引</h3><p>有时需要在JavaScript中直接访问子组件，为此可以使用ref为子组件指定一个索引ID。</p>\n<h3 id=\"非父子组件通信\"><a href=\"#非父子组件通信\" class=\"headerlink\" title=\"非父子组件通信\"></a>非父子组件通信</h3><p>vue2.x中提供了一种方法来进行非父子组件间通信，即使用一个空的Vue实例作为中央事件总线：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> bus = <span class=\"keyword\">new</span> Vue()</div><div class=\"line\"><span class=\"comment\">// 触发组件 A 中的事件</span></div><div class=\"line\">bus.$emit(<span class=\"string\">'id-selected'</span>, <span class=\"number\">1</span>)</div><div class=\"line\"><span class=\"comment\">// 在组件 B 创建的钩子中监听事件</span></div><div class=\"line\">bus.$on(<span class=\"string\">'id-selected'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">id</span>) </span>&#123;</div><div class=\"line\">  <span class=\"comment\">// ...</span></div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure></p>\n<p>在更多复杂的情况下，你应该考虑使用专门的<a href=\"https://vuefe.cn/guide/state-management.html\" target=\"_blank\" rel=\"external\">状态管理模式</a>。</p>\n<h2 id=\"添加Sidebar组件展开收起事件\"><a href=\"#添加Sidebar组件展开收起事件\" class=\"headerlink\" title=\"添加Sidebar组件展开收起事件\"></a>添加Sidebar组件展开收起事件</h2><hr>\n<p>首先我们在Siderbar组件中进行以下修改。</p>\n<h3 id=\"添加状态记录展开或收起状态\"><a href=\"#添加状态记录展开或收起状态\" class=\"headerlink\" title=\"添加状态记录展开或收起状态\"></a>添加状态记录展开或收起状态</h3><p>在data中添加menuShowAll变量记录状态：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">data() &#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> &#123;</div><div class=\"line\">    ... <span class=\"comment\">// 其他数据</span></div><div class=\"line\">    menuShowAll: <span class=\"literal\">true</span> <span class=\"comment\">// 初始化为展开状态</span></div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h3 id=\"添加方法控制展开收起\"><a href=\"#添加方法控制展开收起\" class=\"headerlink\" title=\"添加方法控制展开收起\"></a>添加方法控制展开收起</h3><p>我们使用的是(gentelella模板)[<a href=\"https://github.com/puikinsh/gentelella]，运行查看可知道，展开收起的控制主要由nav-md和nav-sm，以及active和active-sm来进行控制。\" target=\"_blank\" rel=\"external\">https://github.com/puikinsh/gentelella]，运行查看可知道，展开收起的控制主要由nav-md和nav-sm，以及active和active-sm来进行控制。</a><br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div></pre></td><td class=\"code\"><pre><div class=\"line\">methods: &#123;</div><div class=\"line\">  toggleMenu(menu) &#123;</div><div class=\"line\">    <span class=\"comment\">// 当菜单有href属性时，代表其将进行路由跳转而不是展开收起子菜单</span></div><div class=\"line\">    <span class=\"comment\">// 此时将其余菜单收起</span></div><div class=\"line\">    <span class=\"keyword\">if</span> (menu.href) &#123;</div><div class=\"line\">      <span class=\"keyword\">this</span>.$router.push(menu.href);</div><div class=\"line\">      <span class=\"keyword\">this</span>.menus.forEach(<span class=\"function\"><span class=\"params\">item</span> =&gt;</span> &#123;</div><div class=\"line\">        item.class = <span class=\"string\">''</span>;</div><div class=\"line\">      &#125;);</div><div class=\"line\">      <span class=\"comment\">// 设置active时需判断当前状态，进行展开和收起的状态区分</span></div><div class=\"line\">      menu.class = <span class=\"keyword\">this</span>.menuShowAll ? <span class=\"string\">'active'</span> : <span class=\"string\">'active-sm'</span>;</div><div class=\"line\">      <span class=\"keyword\">return</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"comment\">// 其他时候默认进行子菜单的切换</span></div><div class=\"line\">    <span class=\"keyword\">switch</span> (menu.class) &#123;</div><div class=\"line\">      <span class=\"keyword\">case</span> <span class=\"string\">'active'</span>:</div><div class=\"line\">        menu.class = <span class=\"string\">''</span>;</div><div class=\"line\"> \t\t\t\t<span class=\"keyword\">break</span>;</div><div class=\"line\">      <span class=\"keyword\">case</span> <span class=\"string\">''</span>:</div><div class=\"line\">        menu.class = <span class=\"keyword\">this</span>.menuShowAll ? <span class=\"string\">'active'</span> : <span class=\"string\">'active-sm'</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;,</div><div class=\"line\">  toggleMenuShowAll() &#123; <span class=\"comment\">// 菜单大小切换</span></div><div class=\"line\">    <span class=\"keyword\">var</span> $body = $(<span class=\"string\">'body'</span>);</div><div class=\"line\">    <span class=\"keyword\">this</span>.menus.forEach(<span class=\"function\"><span class=\"params\">menu</span> =&gt;</span> &#123;</div><div class=\"line\">      <span class=\"keyword\">let</span> c = menu.class;</div><div class=\"line\">      menu.class = c === <span class=\"string\">'active'</span> ? <span class=\"string\">'active-sm'</span> : (c === <span class=\"string\">'active-sm'</span> ? <span class=\"string\">'active'</span> : c)</div><div class=\"line\">    &#125;)</div><div class=\"line\">    <span class=\"keyword\">this</span>.menuShowAll = !<span class=\"keyword\">this</span>.menuShowAll;</div><div class=\"line\">    $body.toggleClass(<span class=\"string\">'nav-md nav-sm'</span>);</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h3 id=\"添加点击事件\"><a href=\"#添加点击事件\" class=\"headerlink\" title=\"添加点击事件\"></a>添加点击事件</h3><p>从Html模板我们可以看到，点击菜单时的事件未toggleMenu，这里我们通过将其添加active的样式，并绑定v-show判断是否展示来实现。<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 在 `methods` 对象中定义方法</span></div><div class=\"line\">methods: &#123;</div><div class=\"line\">   toggleMenu(menu) &#123;</div><div class=\"line\">        <span class=\"comment\">// 当菜单有href属性时，代表其将进行路由跳转而不是展开收起子菜单</span></div><div class=\"line\">        <span class=\"comment\">// 此时将其余菜单收起</span></div><div class=\"line\">        <span class=\"keyword\">if</span> (menu.href) &#123;</div><div class=\"line\">            <span class=\"keyword\">this</span>.$router.push(menu.href);</div><div class=\"line\">            <span class=\"keyword\">this</span>.menus.forEach(<span class=\"function\"><span class=\"params\">item</span> =&gt;</span> &#123;</div><div class=\"line\">                item.class = <span class=\"string\">''</span>;</div><div class=\"line\">            &#125;);</div><div class=\"line\">            menu.class = <span class=\"string\">'active'</span>;</div><div class=\"line\">            <span class=\"keyword\">return</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"comment\">// 其他时候默认进行子菜单的切换</span></div><div class=\"line\">        <span class=\"keyword\">switch</span> (menu.class) &#123;</div><div class=\"line\">            <span class=\"keyword\">case</span> <span class=\"string\">'active'</span>:</div><div class=\"line\">                menu.class = <span class=\"string\">''</span>;</div><div class=\"line\">                <span class=\"keyword\">break</span>;</div><div class=\"line\">            <span class=\"keyword\">case</span> <span class=\"string\">''</span>:</div><div class=\"line\">                menu.class = <span class=\"string\">'active'</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h2 id=\"添加Top组件\"><a href=\"#添加Top组件\" class=\"headerlink\" title=\"添加Top组件\"></a>添加Top组件</h2><hr>\n<p>添加Top组件用于点击触发展开收起事件</p>\n<h3 id=\"创建组件\"><a href=\"#创建组件\" class=\"headerlink\" title=\"创建组件\"></a>创建组件</h3><p>我们在src/components文件夹里面创建Top.vue文件。</p>\n<h3 id=\"添加模板\"><a href=\"#添加模板\" class=\"headerlink\" title=\"添加模板\"></a>添加模板</h3><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">template</span>&gt;</span></div><div class=\"line\">  <span class=\"comment\">&lt;!-- top navigation --&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"top_nav\"</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"nav_menu\"</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">nav</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"nav toggle\"</span>&gt;</span></div><div class=\"line\">          <span class=\"comment\">&lt;!--这里添加点击事件，用来触发Sidebar的展开和收起--&gt;</span></div><div class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">id</span>=<span class=\"string\">\"menu_toggle\"</span> <span class=\"attr\">v-on:click</span>=<span class=\"string\">\"sidebarToggleClick\"</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">i</span> <span class=\"attr\">class</span>=<span class=\"string\">\"fa fa-bars\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">i</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">ul</span> <span class=\"attr\">class</span>=<span class=\"string\">\"nav navbar-nav navbar-right\"</span>&gt;</span></div><div class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">class</span>=<span class=\"string\">\"\"</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"javascript:;\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"user-profile dropdown-toggle\"</span> <span class=\"attr\">data-toggle</span>=<span class=\"string\">\"dropdown\"</span> <span class=\"attr\">aria-expanded</span>=<span class=\"string\">\"false\"</span>&gt;</span></div><div class=\"line\">              用户</div><div class=\"line\">              <span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">class</span>=<span class=\"string\">\" fa fa-angle-down\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">ul</span> <span class=\"attr\">class</span>=<span class=\"string\">\"dropdown-menu dropdown-usermenu pull-right\"</span>&gt;</span></div><div class=\"line\">              <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"javascript:;\"</span>&gt;</span>设置<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></div><div class=\"line\">              <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">router-link</span> <span class=\"attr\">to</span>=<span class=\"string\">\"/login\"</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">i</span> <span class=\"attr\">class</span>=<span class=\"string\">\"fa fa-sign-out pull-right\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">i</span>&gt;</span>退出<span class=\"tag\">&lt;/<span class=\"name\">router-link</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></div><div class=\"line\">          <span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">nav</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">  <span class=\"comment\">&lt;!-- /top navigation --&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></div></pre></td></tr></table></figure>\n<h3 id=\"添加点击事件-1\"><a href=\"#添加点击事件-1\" class=\"headerlink\" title=\"添加点击事件\"></a>添加点击事件</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</div><div class=\"line\">    <span class=\"attr\">methods</span>: &#123;</div><div class=\"line\">       <span class=\"comment\">// 点击事件</span></div><div class=\"line\">       sidebarToggleClick() &#123;</div><div class=\"line\">            <span class=\"comment\">// 使用$emit触发自定义事件SidebarToggleClick</span></div><div class=\"line\">            <span class=\"keyword\">this</span>.$emit(<span class=\"string\">'SidebarToggleClick'</span>);</div><div class=\"line\">       &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"App父组件处理事件\"><a href=\"#App父组件处理事件\" class=\"headerlink\" title=\"App父组件处理事件\"></a>App父组件处理事件</h2><hr>\n<h3 id=\"注入Top组件并引入\"><a href=\"#注入Top组件并引入\" class=\"headerlink\" title=\"注入Top组件并引入\"></a>注入Top组件并引入</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> Top <span class=\"keyword\">from</span> <span class=\"string\">'./components/Top'</span></div><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</div><div class=\"line\">  ...</div><div class=\"line\">  components: &#123;</div><div class=\"line\">    ...</div><div class=\"line\">    Top</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"模板中使用Top组件\"><a href=\"#模板中使用Top组件\" class=\"headerlink\" title=\"模板中使用Top组件\"></a>模板中使用Top组件</h3><p>在App模板中使用Top组件，这里我们还使用ref来获取Sidebar组件的事件。<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">&lt;!--使用Sidebar组件，使用ref熟悉进行子组件索引--&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">Sidebar</span> <span class=\"attr\">ref</span>=<span class=\"string\">\"sidebar\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">Sidebar</span>&gt;</span></div><div class=\"line\"><span class=\"comment\">&lt;!--使用Top组件，且绑定监听子组件SidebarToggleClick事件--&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">Top</span> <span class=\"attr\">v-on:SidebarToggleClick</span>=<span class=\"string\">\"transSidebarToggle\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">Top</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<h3 id=\"添加方法处理SidebarToggleClick事件\"><a href=\"#添加方法处理SidebarToggleClick事件\" class=\"headerlink\" title=\"添加方法处理SidebarToggleClick事件\"></a>添加方法处理SidebarToggleClick事件</h3><p>在App组件中添加方法，绑定SidebarToggleClick事件。<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">methods: &#123;</div><div class=\"line\">  <span class=\"comment\">// 添加方法绑定SidebarToggleClick事件</span></div><div class=\"line\">  <span class=\"comment\">// 这里我们直接通过ref索引获取调用Sidebar子组件的toggleMenuShowAll方法</span></div><div class=\"line\">  transSidebarToggle() &#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>.$refs.sidebar.toggleMenuShowAll();</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h3 id=\"页面最终效果\"><a href=\"#页面最终效果\" class=\"headerlink\" title=\"页面最终效果\"></a>页面最终效果</h3><p><img src=\"http://o905ne85q.bkt.clouddn.com/EC9E.tmp.png\" alt=\"image\"></p>\n<h3 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h3><p><a href=\"https://vuefe.cn/guide/\" target=\"_blank\" rel=\"external\">Vue2.0中文文档</a></p>\n<h2 id=\"结束语\"><a href=\"#结束语\" class=\"headerlink\" title=\"结束语\"></a>结束语</h2><hr>\n<p>当然，父子组件间通信有很多实现方法。大家感兴趣的当然也可以尝试用中央事件总线或者是状态管理来实现啦。<br><a href=\"https://github.com/godbasin/godbasin.github.io/tree/blog-codes/vue2-notes/3-parent-child-component\" target=\"_blank\" rel=\"external\">此处查看项目代码</a><br><a href=\"http://ofyya1gfg.bkt.clouddn.com/3-parent-child-component/index.html#/App\" target=\"_blank\" rel=\"external\">此处查看页面效果</a></p>\n","excerpt":"<p>最近在使用Vue2作为项目中前端的框架，《Vue2使用笔记》系列用于记录过程中的一些使用和解决方法。<br>本文记录父子间组件的通信方法，以及添加Top组件的过程。<br>","more":"</p>\n<h2 id=\"父子组件通信\"><a href=\"#父子组件通信\" class=\"headerlink\" title=\"父子组件通信\"></a>父子组件通信</h2><hr>\n<h3 id=\"使用Props传递数据\"><a href=\"#使用Props传递数据\" class=\"headerlink\" title=\"使用Props传递数据\"></a>使用Props传递数据</h3><p>使用props传递数据，和vue1.x的使用方法一样。</p>\n<ul>\n<li>prop是父组件用来传递数据的一个自定义属性</li>\n<li>子组件需要显式地用props选项声明“prop”</li>\n<li>动态Props：用v-bind绑定动态props到父组件的数据。每当父组件的数据变化时，也会传导给子组件</li>\n</ul>\n<h3 id=\"使用自定义事件\"><a href=\"#使用自定义事件\" class=\"headerlink\" title=\"使用自定义事件\"></a>使用自定义事件</h3><p>上一篇我们简单提到了自定义事件，在vue1.x中，拥有$dispatch、$broadcast事件，这两个事件在vue2.x中被废弃，这里我们可以用到的事件有：</p>\n<ul>\n<li>使用<code>$on(eventName)</code>监听事件</li>\n<li>使用<code>$emit(eventName)</code>触发事件</li>\n</ul>\n<h3 id=\"子组件索引\"><a href=\"#子组件索引\" class=\"headerlink\" title=\"子组件索引\"></a>子组件索引</h3><p>有时需要在JavaScript中直接访问子组件，为此可以使用ref为子组件指定一个索引ID。</p>\n<h3 id=\"非父子组件通信\"><a href=\"#非父子组件通信\" class=\"headerlink\" title=\"非父子组件通信\"></a>非父子组件通信</h3><p>vue2.x中提供了一种方法来进行非父子组件间通信，即使用一个空的Vue实例作为中央事件总线：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> bus = <span class=\"keyword\">new</span> Vue()</div><div class=\"line\"><span class=\"comment\">// 触发组件 A 中的事件</span></div><div class=\"line\">bus.$emit(<span class=\"string\">'id-selected'</span>, <span class=\"number\">1</span>)</div><div class=\"line\"><span class=\"comment\">// 在组件 B 创建的钩子中监听事件</span></div><div class=\"line\">bus.$on(<span class=\"string\">'id-selected'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">id</span>) </span>&#123;</div><div class=\"line\">  <span class=\"comment\">// ...</span></div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure></p>\n<p>在更多复杂的情况下，你应该考虑使用专门的<a href=\"https://vuefe.cn/guide/state-management.html\">状态管理模式</a>。</p>\n<h2 id=\"添加Sidebar组件展开收起事件\"><a href=\"#添加Sidebar组件展开收起事件\" class=\"headerlink\" title=\"添加Sidebar组件展开收起事件\"></a>添加Sidebar组件展开收起事件</h2><hr>\n<p>首先我们在Siderbar组件中进行以下修改。</p>\n<h3 id=\"添加状态记录展开或收起状态\"><a href=\"#添加状态记录展开或收起状态\" class=\"headerlink\" title=\"添加状态记录展开或收起状态\"></a>添加状态记录展开或收起状态</h3><p>在data中添加menuShowAll变量记录状态：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">data() &#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> &#123;</div><div class=\"line\">    ... <span class=\"comment\">// 其他数据</span></div><div class=\"line\">    menuShowAll: <span class=\"literal\">true</span> <span class=\"comment\">// 初始化为展开状态</span></div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h3 id=\"添加方法控制展开收起\"><a href=\"#添加方法控制展开收起\" class=\"headerlink\" title=\"添加方法控制展开收起\"></a>添加方法控制展开收起</h3><p>我们使用的是(gentelella模板)[<a href=\"https://github.com/puikinsh/gentelella]，运行查看可知道，展开收起的控制主要由nav-md和nav-sm，以及active和active-sm来进行控制。\">https://github.com/puikinsh/gentelella]，运行查看可知道，展开收起的控制主要由nav-md和nav-sm，以及active和active-sm来进行控制。</a><br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div></pre></td><td class=\"code\"><pre><div class=\"line\">methods: &#123;</div><div class=\"line\">  toggleMenu(menu) &#123;</div><div class=\"line\">    <span class=\"comment\">// 当菜单有href属性时，代表其将进行路由跳转而不是展开收起子菜单</span></div><div class=\"line\">    <span class=\"comment\">// 此时将其余菜单收起</span></div><div class=\"line\">    <span class=\"keyword\">if</span> (menu.href) &#123;</div><div class=\"line\">      <span class=\"keyword\">this</span>.$router.push(menu.href);</div><div class=\"line\">      <span class=\"keyword\">this</span>.menus.forEach(<span class=\"function\"><span class=\"params\">item</span> =&gt;</span> &#123;</div><div class=\"line\">        item.class = <span class=\"string\">''</span>;</div><div class=\"line\">      &#125;);</div><div class=\"line\">      <span class=\"comment\">// 设置active时需判断当前状态，进行展开和收起的状态区分</span></div><div class=\"line\">      menu.class = <span class=\"keyword\">this</span>.menuShowAll ? <span class=\"string\">'active'</span> : <span class=\"string\">'active-sm'</span>;</div><div class=\"line\">      <span class=\"keyword\">return</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"comment\">// 其他时候默认进行子菜单的切换</span></div><div class=\"line\">    <span class=\"keyword\">switch</span> (menu.class) &#123;</div><div class=\"line\">      <span class=\"keyword\">case</span> <span class=\"string\">'active'</span>:</div><div class=\"line\">        menu.class = <span class=\"string\">''</span>;</div><div class=\"line\"> \t\t\t\t<span class=\"keyword\">break</span>;</div><div class=\"line\">      <span class=\"keyword\">case</span> <span class=\"string\">''</span>:</div><div class=\"line\">        menu.class = <span class=\"keyword\">this</span>.menuShowAll ? <span class=\"string\">'active'</span> : <span class=\"string\">'active-sm'</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;,</div><div class=\"line\">  toggleMenuShowAll() &#123; <span class=\"comment\">// 菜单大小切换</span></div><div class=\"line\">    <span class=\"keyword\">var</span> $body = $(<span class=\"string\">'body'</span>);</div><div class=\"line\">    <span class=\"keyword\">this</span>.menus.forEach(<span class=\"function\"><span class=\"params\">menu</span> =&gt;</span> &#123;</div><div class=\"line\">      <span class=\"keyword\">let</span> c = menu.class;</div><div class=\"line\">      menu.class = c === <span class=\"string\">'active'</span> ? <span class=\"string\">'active-sm'</span> : (c === <span class=\"string\">'active-sm'</span> ? <span class=\"string\">'active'</span> : c)</div><div class=\"line\">    &#125;)</div><div class=\"line\">    <span class=\"keyword\">this</span>.menuShowAll = !<span class=\"keyword\">this</span>.menuShowAll;</div><div class=\"line\">    $body.toggleClass(<span class=\"string\">'nav-md nav-sm'</span>);</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h3 id=\"添加点击事件\"><a href=\"#添加点击事件\" class=\"headerlink\" title=\"添加点击事件\"></a>添加点击事件</h3><p>从Html模板我们可以看到，点击菜单时的事件未toggleMenu，这里我们通过将其添加active的样式，并绑定v-show判断是否展示来实现。<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 在 `methods` 对象中定义方法</span></div><div class=\"line\">methods: &#123;</div><div class=\"line\">   toggleMenu(menu) &#123;</div><div class=\"line\">        <span class=\"comment\">// 当菜单有href属性时，代表其将进行路由跳转而不是展开收起子菜单</span></div><div class=\"line\">        <span class=\"comment\">// 此时将其余菜单收起</span></div><div class=\"line\">        <span class=\"keyword\">if</span> (menu.href) &#123;</div><div class=\"line\">            <span class=\"keyword\">this</span>.$router.push(menu.href);</div><div class=\"line\">            <span class=\"keyword\">this</span>.menus.forEach(<span class=\"function\"><span class=\"params\">item</span> =&gt;</span> &#123;</div><div class=\"line\">                item.class = <span class=\"string\">''</span>;</div><div class=\"line\">            &#125;);</div><div class=\"line\">            menu.class = <span class=\"string\">'active'</span>;</div><div class=\"line\">            <span class=\"keyword\">return</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"comment\">// 其他时候默认进行子菜单的切换</span></div><div class=\"line\">        <span class=\"keyword\">switch</span> (menu.class) &#123;</div><div class=\"line\">            <span class=\"keyword\">case</span> <span class=\"string\">'active'</span>:</div><div class=\"line\">                menu.class = <span class=\"string\">''</span>;</div><div class=\"line\">                <span class=\"keyword\">break</span>;</div><div class=\"line\">            <span class=\"keyword\">case</span> <span class=\"string\">''</span>:</div><div class=\"line\">                menu.class = <span class=\"string\">'active'</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h2 id=\"添加Top组件\"><a href=\"#添加Top组件\" class=\"headerlink\" title=\"添加Top组件\"></a>添加Top组件</h2><hr>\n<p>添加Top组件用于点击触发展开收起事件</p>\n<h3 id=\"创建组件\"><a href=\"#创建组件\" class=\"headerlink\" title=\"创建组件\"></a>创建组件</h3><p>我们在src/components文件夹里面创建Top.vue文件。</p>\n<h3 id=\"添加模板\"><a href=\"#添加模板\" class=\"headerlink\" title=\"添加模板\"></a>添加模板</h3><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">template</span>&gt;</span></div><div class=\"line\">  <span class=\"comment\">&lt;!-- top navigation --&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"top_nav\"</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"nav_menu\"</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">nav</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"nav toggle\"</span>&gt;</span></div><div class=\"line\">          <span class=\"comment\">&lt;!--这里添加点击事件，用来触发Sidebar的展开和收起--&gt;</span></div><div class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">id</span>=<span class=\"string\">\"menu_toggle\"</span> <span class=\"attr\">v-on:click</span>=<span class=\"string\">\"sidebarToggleClick\"</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">i</span> <span class=\"attr\">class</span>=<span class=\"string\">\"fa fa-bars\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">i</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">ul</span> <span class=\"attr\">class</span>=<span class=\"string\">\"nav navbar-nav navbar-right\"</span>&gt;</span></div><div class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">class</span>=<span class=\"string\">\"\"</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"javascript:;\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"user-profile dropdown-toggle\"</span> <span class=\"attr\">data-toggle</span>=<span class=\"string\">\"dropdown\"</span> <span class=\"attr\">aria-expanded</span>=<span class=\"string\">\"false\"</span>&gt;</span></div><div class=\"line\">              用户</div><div class=\"line\">              <span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">class</span>=<span class=\"string\">\" fa fa-angle-down\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">ul</span> <span class=\"attr\">class</span>=<span class=\"string\">\"dropdown-menu dropdown-usermenu pull-right\"</span>&gt;</span></div><div class=\"line\">              <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"javascript:;\"</span>&gt;</span>设置<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></div><div class=\"line\">              <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">router-link</span> <span class=\"attr\">to</span>=<span class=\"string\">\"/login\"</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">i</span> <span class=\"attr\">class</span>=<span class=\"string\">\"fa fa-sign-out pull-right\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">i</span>&gt;</span>退出<span class=\"tag\">&lt;/<span class=\"name\">router-link</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></div><div class=\"line\">          <span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">nav</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">  <span class=\"comment\">&lt;!-- /top navigation --&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></div></pre></td></tr></table></figure>\n<h3 id=\"添加点击事件-1\"><a href=\"#添加点击事件-1\" class=\"headerlink\" title=\"添加点击事件\"></a>添加点击事件</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</div><div class=\"line\">    <span class=\"attr\">methods</span>: &#123;</div><div class=\"line\">       <span class=\"comment\">// 点击事件</span></div><div class=\"line\">       sidebarToggleClick() &#123;</div><div class=\"line\">            <span class=\"comment\">// 使用$emit触发自定义事件SidebarToggleClick</span></div><div class=\"line\">            <span class=\"keyword\">this</span>.$emit(<span class=\"string\">'SidebarToggleClick'</span>);</div><div class=\"line\">       &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"App父组件处理事件\"><a href=\"#App父组件处理事件\" class=\"headerlink\" title=\"App父组件处理事件\"></a>App父组件处理事件</h2><hr>\n<h3 id=\"注入Top组件并引入\"><a href=\"#注入Top组件并引入\" class=\"headerlink\" title=\"注入Top组件并引入\"></a>注入Top组件并引入</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> Top <span class=\"keyword\">from</span> <span class=\"string\">'./components/Top'</span></div><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</div><div class=\"line\">  ...</div><div class=\"line\">  components: &#123;</div><div class=\"line\">    ...</div><div class=\"line\">    Top</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"模板中使用Top组件\"><a href=\"#模板中使用Top组件\" class=\"headerlink\" title=\"模板中使用Top组件\"></a>模板中使用Top组件</h3><p>在App模板中使用Top组件，这里我们还使用ref来获取Sidebar组件的事件。<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">&lt;!--使用Sidebar组件，使用ref熟悉进行子组件索引--&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">Sidebar</span> <span class=\"attr\">ref</span>=<span class=\"string\">\"sidebar\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">Sidebar</span>&gt;</span></div><div class=\"line\"><span class=\"comment\">&lt;!--使用Top组件，且绑定监听子组件SidebarToggleClick事件--&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">Top</span> <span class=\"attr\">v-on:SidebarToggleClick</span>=<span class=\"string\">\"transSidebarToggle\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">Top</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<h3 id=\"添加方法处理SidebarToggleClick事件\"><a href=\"#添加方法处理SidebarToggleClick事件\" class=\"headerlink\" title=\"添加方法处理SidebarToggleClick事件\"></a>添加方法处理SidebarToggleClick事件</h3><p>在App组件中添加方法，绑定SidebarToggleClick事件。<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">methods: &#123;</div><div class=\"line\">  <span class=\"comment\">// 添加方法绑定SidebarToggleClick事件</span></div><div class=\"line\">  <span class=\"comment\">// 这里我们直接通过ref索引获取调用Sidebar子组件的toggleMenuShowAll方法</span></div><div class=\"line\">  transSidebarToggle() &#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>.$refs.sidebar.toggleMenuShowAll();</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h3 id=\"页面最终效果\"><a href=\"#页面最终效果\" class=\"headerlink\" title=\"页面最终效果\"></a>页面最终效果</h3><p><img src=\"http://o905ne85q.bkt.clouddn.com/EC9E.tmp.png\" alt=\"image\"></p>\n<h3 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h3><p><a href=\"https://vuefe.cn/guide/\">Vue2.0中文文档</a></p>\n<h2 id=\"结束语\"><a href=\"#结束语\" class=\"headerlink\" title=\"结束语\"></a>结束语</h2><hr>\n<p>当然，父子组件间通信有很多实现方法。大家感兴趣的当然也可以尝试用中央事件总线或者是状态管理来实现啦。<br><a href=\"https://github.com/godbasin/godbasin.github.io/tree/blog-codes/vue2-notes/3-parent-child-component\">此处查看项目代码</a><br><a href=\"http://ofyya1gfg.bkt.clouddn.com/3-parent-child-component/index.html#/App\">此处查看页面效果</a></p>"},{"title":"Vue2使用笔记4--vue-router使用","date":"2016-11-27T04:17:00.000Z","_content":"最近在使用Vue2作为项目中前端的框架，《Vue2使用笔记》系列用于记录过程中的一些使用和解决方法。\n本文记录vue-router2的使用过程。\n<!--more-->\n\n## vue-router2.0的变化\n---\n### API的修改\n- `router.go()`改为`router.push()`，使用`$router.push()`\n- 新增`router.back()`、`router.forward()`\n\n### 路由配置\n- 所有路由配置都通过一个单独的对象传到Router的构造函数\n- 路由配置现在用数组而不是用对象哈希表来作为数据结构\n- 作废了一些配置项，修改了一些配置项，具体参考[可用配置选项](https://github.com/vuejs/vue-router/blob/43183911dedfbb30ebacccf2d76ced74d998448a/flow/declarations.js#L8-L16)\n\n### 链接（Links）\nv-link指令已经被<router-link>组件替代. 这个组件接受以下属性参数:\n- to : 一个路径字符串, 或者一个对象location descriptor\n- tag : 渲染成的html元素类型，默认是<a>\n- exact : 用于控制当前激活项的行为\n- append : 控制相对链接路径的追加方式\n- replace : 替代而不是作为历史条目压榨\n- active-class : 当链接项激活时增加的CSS样式\n\n### 参考\n还有一些本骚年暂时没有用到的变化，如滚动行为（Scroll Behavior）等。\n[《vue-router 2.0 改变的内容》](https://segmentfault.com/a/1190000006623100?utm_source=tuicool&utm_medium=referral)\n[vue-router 2官方文档](http://router.vuejs.org/zh-cn/index.html)\n\n## vue-router的使用\n---\n这里我们简单创建一个嵌套路由，结合之前路由相关描述下vue-router的使用。\n\n### 创建新组件用于路由匹配\n这里本骚年添加几个文件：\n- Services.vue：用于服务列表展示\n- ServiceAdd.vue：用于服务创建或修改\n- Logs.vue：用于日志列表展示\n\n本节我们主要讲述路由的使用，故这些组件都使用最简单的模板表示不同组件。\n``` vue\n<template>\n\t<div>Services组件</div>\n</template>\n\n<script>\n    export default {\n        name: 'Sevices'\n    }\n</script>\n```\n\n### 添加App嵌套子路由\n应用界面通常由多层嵌套的组件组合而成，URL中各段动态路径也按某种结构对应嵌套的各层组件。\n接下来我们在main.js中定义嵌套子路由。\n- 导入组件\n\n``` js\nimport Services from './components/Services'\nimport ServiceAdd from './components/ServiceAdd'\nimport Logs from './components/Logs'\n```\n\n- 设置路由\n要在嵌套的出口中渲染组件，需要在VueRouter的参数中使用children配置。\n\n``` js\nconst routes = [\n    { path: '/login', component: Login, name: 'Login' },\n    {\n        path: '/app',\n        component: App,\n        name: 'App',\n        // 设置子路由\n        children: [{\n            // 服务列表\n            path: 'services', \n            component: Services,\n            name: 'Services'\n        }, {\n            // 添加服务\n            path: 'add/service', \n            component: ServiceAdd,\n            name: 'ServiceAdd'\n        }, {\n            // 编辑服务，:id可匹配任意值，且可在组件中获取该值\n            path: 'edit/service/:id', \n            component: ServiceAdd,\n            name: 'ServiceEdit'\n        }, {\n            // 日志列表\n            path: 'logs',\n            component: Logs,\n            name: 'Logs'\n        }, {\n            // 其余路由重定向至服务列表\n            path: '*',\n            redirect: { name: 'Services' }\n        }]\n    },\n    { path: '*', redirect: { name: 'Login' } }\n]\n```\n\n- 在App组件中添加路由模板\nvue-router2.0中，一个被渲染组件同样可以包含自己的嵌套<router-view>。\n\n``` html\n<!--右侧内容展示-->\n<div class=\"right_col\" role=\"main\">\n\t<router-view></router-view>\n</div>\n```\n这时候我们的应用已经支持路由跳转了，但在我们的左侧菜单中，部分链接跳转位于一级菜单，部分位于二级菜单。\n这里我们设定当一级菜单跳转被点亮时，自动关闭下拉菜单，接下来我们将实现这个功能。\n\n### 使用watch监控路由变化\n- 在Sidebar组件中，添加watch来对每次路由跳转进行判断\n\n``` js\nwatch: {\n\t$route() {\n\t\t// 检查是否一级菜单链接\n\t\tthis.checkMenuActived(this.$route.path);\n\t}\n}\n```\n\n- 添加checkMenuActived方法，来控制相关实现\n\n``` js\nmethods: {\n\t...\n\tcheckMenuActived(path) {\n\t\t// 遍历所有的一级菜单\n\t\tthis.menus.forEach(item => {\n\t\t\t// 若非当前路由，则取消激活状态\n\t\t\tif (item.href && item.href !== path) {\n\t\t\t\titem.class = '';\n\t\t\t}\n\t\t});\n\t}\n}\n```\n\n### 其他路由使用\n- 使用`this.$router.push()`可在组件中控制路由跳转，Login组件中已实现\n- 使用`<router-link></router-link>`可在组件模板中设定超链接进行挑战，在Sidebar组件中也已实现\n\n### 页面最终效果\n![image](http://o905ne85q.bkt.clouddn.com/1E1E.tmp.png)\n\n### 参考\n[Vue2.0中文文档](https://vuefe.cn/guide/)\n[vue-router 2官方文档](http://router.vuejs.org/zh-cn/index.html)\n\n## 结束语\n-----\n大家是不是觉得左侧的下拉菜单实现路由跟踪特别麻烦呢，其实这也是本骚年偷了个小懒，不想改动样式代码直接使用gentelella的样式。大家也可以想一下其他的一些实现方法的呀。\n[此处查看项目代码](https://github.com/godbasin/godbasin.github.io/tree/blog-codes/vue2-notes/4-vue-router)\n[此处查看页面效果](http://ofyya1gfg.bkt.clouddn.com/4-vue-router/index.html#/App)","source":"_posts/vue2-notes-4-vue-router.md","raw":"---\ntitle: Vue2使用笔记4--vue-router使用\ndate: 2016-11-27 12:17:00\ncategories: vue八宝粥\ntags: 笔记\n---\n最近在使用Vue2作为项目中前端的框架，《Vue2使用笔记》系列用于记录过程中的一些使用和解决方法。\n本文记录vue-router2的使用过程。\n<!--more-->\n\n## vue-router2.0的变化\n---\n### API的修改\n- `router.go()`改为`router.push()`，使用`$router.push()`\n- 新增`router.back()`、`router.forward()`\n\n### 路由配置\n- 所有路由配置都通过一个单独的对象传到Router的构造函数\n- 路由配置现在用数组而不是用对象哈希表来作为数据结构\n- 作废了一些配置项，修改了一些配置项，具体参考[可用配置选项](https://github.com/vuejs/vue-router/blob/43183911dedfbb30ebacccf2d76ced74d998448a/flow/declarations.js#L8-L16)\n\n### 链接（Links）\nv-link指令已经被<router-link>组件替代. 这个组件接受以下属性参数:\n- to : 一个路径字符串, 或者一个对象location descriptor\n- tag : 渲染成的html元素类型，默认是<a>\n- exact : 用于控制当前激活项的行为\n- append : 控制相对链接路径的追加方式\n- replace : 替代而不是作为历史条目压榨\n- active-class : 当链接项激活时增加的CSS样式\n\n### 参考\n还有一些本骚年暂时没有用到的变化，如滚动行为（Scroll Behavior）等。\n[《vue-router 2.0 改变的内容》](https://segmentfault.com/a/1190000006623100?utm_source=tuicool&utm_medium=referral)\n[vue-router 2官方文档](http://router.vuejs.org/zh-cn/index.html)\n\n## vue-router的使用\n---\n这里我们简单创建一个嵌套路由，结合之前路由相关描述下vue-router的使用。\n\n### 创建新组件用于路由匹配\n这里本骚年添加几个文件：\n- Services.vue：用于服务列表展示\n- ServiceAdd.vue：用于服务创建或修改\n- Logs.vue：用于日志列表展示\n\n本节我们主要讲述路由的使用，故这些组件都使用最简单的模板表示不同组件。\n``` vue\n<template>\n\t<div>Services组件</div>\n</template>\n\n<script>\n    export default {\n        name: 'Sevices'\n    }\n</script>\n```\n\n### 添加App嵌套子路由\n应用界面通常由多层嵌套的组件组合而成，URL中各段动态路径也按某种结构对应嵌套的各层组件。\n接下来我们在main.js中定义嵌套子路由。\n- 导入组件\n\n``` js\nimport Services from './components/Services'\nimport ServiceAdd from './components/ServiceAdd'\nimport Logs from './components/Logs'\n```\n\n- 设置路由\n要在嵌套的出口中渲染组件，需要在VueRouter的参数中使用children配置。\n\n``` js\nconst routes = [\n    { path: '/login', component: Login, name: 'Login' },\n    {\n        path: '/app',\n        component: App,\n        name: 'App',\n        // 设置子路由\n        children: [{\n            // 服务列表\n            path: 'services', \n            component: Services,\n            name: 'Services'\n        }, {\n            // 添加服务\n            path: 'add/service', \n            component: ServiceAdd,\n            name: 'ServiceAdd'\n        }, {\n            // 编辑服务，:id可匹配任意值，且可在组件中获取该值\n            path: 'edit/service/:id', \n            component: ServiceAdd,\n            name: 'ServiceEdit'\n        }, {\n            // 日志列表\n            path: 'logs',\n            component: Logs,\n            name: 'Logs'\n        }, {\n            // 其余路由重定向至服务列表\n            path: '*',\n            redirect: { name: 'Services' }\n        }]\n    },\n    { path: '*', redirect: { name: 'Login' } }\n]\n```\n\n- 在App组件中添加路由模板\nvue-router2.0中，一个被渲染组件同样可以包含自己的嵌套<router-view>。\n\n``` html\n<!--右侧内容展示-->\n<div class=\"right_col\" role=\"main\">\n\t<router-view></router-view>\n</div>\n```\n这时候我们的应用已经支持路由跳转了，但在我们的左侧菜单中，部分链接跳转位于一级菜单，部分位于二级菜单。\n这里我们设定当一级菜单跳转被点亮时，自动关闭下拉菜单，接下来我们将实现这个功能。\n\n### 使用watch监控路由变化\n- 在Sidebar组件中，添加watch来对每次路由跳转进行判断\n\n``` js\nwatch: {\n\t$route() {\n\t\t// 检查是否一级菜单链接\n\t\tthis.checkMenuActived(this.$route.path);\n\t}\n}\n```\n\n- 添加checkMenuActived方法，来控制相关实现\n\n``` js\nmethods: {\n\t...\n\tcheckMenuActived(path) {\n\t\t// 遍历所有的一级菜单\n\t\tthis.menus.forEach(item => {\n\t\t\t// 若非当前路由，则取消激活状态\n\t\t\tif (item.href && item.href !== path) {\n\t\t\t\titem.class = '';\n\t\t\t}\n\t\t});\n\t}\n}\n```\n\n### 其他路由使用\n- 使用`this.$router.push()`可在组件中控制路由跳转，Login组件中已实现\n- 使用`<router-link></router-link>`可在组件模板中设定超链接进行挑战，在Sidebar组件中也已实现\n\n### 页面最终效果\n![image](http://o905ne85q.bkt.clouddn.com/1E1E.tmp.png)\n\n### 参考\n[Vue2.0中文文档](https://vuefe.cn/guide/)\n[vue-router 2官方文档](http://router.vuejs.org/zh-cn/index.html)\n\n## 结束语\n-----\n大家是不是觉得左侧的下拉菜单实现路由跟踪特别麻烦呢，其实这也是本骚年偷了个小懒，不想改动样式代码直接使用gentelella的样式。大家也可以想一下其他的一些实现方法的呀。\n[此处查看项目代码](https://github.com/godbasin/godbasin.github.io/tree/blog-codes/vue2-notes/4-vue-router)\n[此处查看页面效果](http://ofyya1gfg.bkt.clouddn.com/4-vue-router/index.html#/App)","slug":"vue2-notes-4-vue-router","published":1,"updated":"2016-11-27T04:17:29.739Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cix45huih005axotu7zim20lw","content":"<p>最近在使用Vue2作为项目中前端的框架，《Vue2使用笔记》系列用于记录过程中的一些使用和解决方法。<br>本文记录vue-router2的使用过程。<br><a id=\"more\"></a></p>\n<h2 id=\"vue-router2-0的变化\"><a href=\"#vue-router2-0的变化\" class=\"headerlink\" title=\"vue-router2.0的变化\"></a>vue-router2.0的变化</h2><hr>\n<h3 id=\"API的修改\"><a href=\"#API的修改\" class=\"headerlink\" title=\"API的修改\"></a>API的修改</h3><ul>\n<li><code>router.go()</code>改为<code>router.push()</code>，使用<code>$router.push()</code></li>\n<li>新增<code>router.back()</code>、<code>router.forward()</code></li>\n</ul>\n<h3 id=\"路由配置\"><a href=\"#路由配置\" class=\"headerlink\" title=\"路由配置\"></a>路由配置</h3><ul>\n<li>所有路由配置都通过一个单独的对象传到Router的构造函数</li>\n<li>路由配置现在用数组而不是用对象哈希表来作为数据结构</li>\n<li>作废了一些配置项，修改了一些配置项，具体参考<a href=\"https://github.com/vuejs/vue-router/blob/43183911dedfbb30ebacccf2d76ced74d998448a/flow/declarations.js#L8-L16\" target=\"_blank\" rel=\"external\">可用配置选项</a></li>\n</ul>\n<h3 id=\"链接（Links）\"><a href=\"#链接（Links）\" class=\"headerlink\" title=\"链接（Links）\"></a>链接（Links）</h3><p>v-link指令已经被<router-link>组件替代. 这个组件接受以下属性参数:</router-link></p>\n<ul>\n<li>to : 一个路径字符串, 或者一个对象location descriptor</li>\n<li>tag : 渲染成的html元素类型，默认是<a></a></li>\n<li>exact : 用于控制当前激活项的行为</li>\n<li>append : 控制相对链接路径的追加方式</li>\n<li>replace : 替代而不是作为历史条目压榨</li>\n<li>active-class : 当链接项激活时增加的CSS样式</li>\n</ul>\n<h3 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h3><p>还有一些本骚年暂时没有用到的变化，如滚动行为（Scroll Behavior）等。<br><a href=\"https://segmentfault.com/a/1190000006623100?utm_source=tuicool&amp;utm_medium=referral\" target=\"_blank\" rel=\"external\">《vue-router 2.0 改变的内容》</a><br><a href=\"http://router.vuejs.org/zh-cn/index.html\" target=\"_blank\" rel=\"external\">vue-router 2官方文档</a></p>\n<h2 id=\"vue-router的使用\"><a href=\"#vue-router的使用\" class=\"headerlink\" title=\"vue-router的使用\"></a>vue-router的使用</h2><hr>\n<p>这里我们简单创建一个嵌套路由，结合之前路由相关描述下vue-router的使用。</p>\n<h3 id=\"创建新组件用于路由匹配\"><a href=\"#创建新组件用于路由匹配\" class=\"headerlink\" title=\"创建新组件用于路由匹配\"></a>创建新组件用于路由匹配</h3><p>这里本骚年添加几个文件：</p>\n<ul>\n<li>Services.vue：用于服务列表展示</li>\n<li>ServiceAdd.vue：用于服务创建或修改</li>\n<li>Logs.vue：用于日志列表展示</li>\n</ul>\n<p>本节我们主要讲述路由的使用，故这些组件都使用最简单的模板表示不同组件。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;template&gt;</div><div class=\"line\">  &lt;div&gt;Services组件&lt;/div&gt;</div><div class=\"line\">&lt;/template&gt;</div><div class=\"line\"></div><div class=\"line\">&lt;script&gt;</div><div class=\"line\">    export default &#123;</div><div class=\"line\">        name: &apos;Sevices&apos;</div><div class=\"line\">    &#125;</div><div class=\"line\">&lt;/script&gt;</div></pre></td></tr></table></figure></p>\n<h3 id=\"添加App嵌套子路由\"><a href=\"#添加App嵌套子路由\" class=\"headerlink\" title=\"添加App嵌套子路由\"></a>添加App嵌套子路由</h3><p>应用界面通常由多层嵌套的组件组合而成，URL中各段动态路径也按某种结构对应嵌套的各层组件。<br>接下来我们在main.js中定义嵌套子路由。</p>\n<ul>\n<li>导入组件</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> Services <span class=\"keyword\">from</span> <span class=\"string\">'./components/Services'</span></div><div class=\"line\"><span class=\"keyword\">import</span> ServiceAdd <span class=\"keyword\">from</span> <span class=\"string\">'./components/ServiceAdd'</span></div><div class=\"line\"><span class=\"keyword\">import</span> Logs <span class=\"keyword\">from</span> <span class=\"string\">'./components/Logs'</span></div></pre></td></tr></table></figure>\n<ul>\n<li>设置路由<br>要在嵌套的出口中渲染组件，需要在VueRouter的参数中使用children配置。</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">const</span> routes = [</div><div class=\"line\">    &#123; <span class=\"attr\">path</span>: <span class=\"string\">'/login'</span>, <span class=\"attr\">component</span>: Login, <span class=\"attr\">name</span>: <span class=\"string\">'Login'</span> &#125;,</div><div class=\"line\">    &#123;</div><div class=\"line\">        <span class=\"attr\">path</span>: <span class=\"string\">'/app'</span>,</div><div class=\"line\">        <span class=\"attr\">component</span>: App,</div><div class=\"line\">        <span class=\"attr\">name</span>: <span class=\"string\">'App'</span>,</div><div class=\"line\">        <span class=\"comment\">// 设置子路由</span></div><div class=\"line\">        children: [&#123;</div><div class=\"line\">            <span class=\"comment\">// 服务列表</span></div><div class=\"line\">            path: <span class=\"string\">'services'</span>, </div><div class=\"line\">            <span class=\"attr\">component</span>: Services,</div><div class=\"line\">            <span class=\"attr\">name</span>: <span class=\"string\">'Services'</span></div><div class=\"line\">        &#125;, &#123;</div><div class=\"line\">            <span class=\"comment\">// 添加服务</span></div><div class=\"line\">            path: <span class=\"string\">'add/service'</span>, </div><div class=\"line\">            <span class=\"attr\">component</span>: ServiceAdd,</div><div class=\"line\">            <span class=\"attr\">name</span>: <span class=\"string\">'ServiceAdd'</span></div><div class=\"line\">        &#125;, &#123;</div><div class=\"line\">            <span class=\"comment\">// 编辑服务，:id可匹配任意值，且可在组件中获取该值</span></div><div class=\"line\">            path: <span class=\"string\">'edit/service/:id'</span>, </div><div class=\"line\">            <span class=\"attr\">component</span>: ServiceAdd,</div><div class=\"line\">            <span class=\"attr\">name</span>: <span class=\"string\">'ServiceEdit'</span></div><div class=\"line\">        &#125;, &#123;</div><div class=\"line\">            <span class=\"comment\">// 日志列表</span></div><div class=\"line\">            path: <span class=\"string\">'logs'</span>,</div><div class=\"line\">            <span class=\"attr\">component</span>: Logs,</div><div class=\"line\">            <span class=\"attr\">name</span>: <span class=\"string\">'Logs'</span></div><div class=\"line\">        &#125;, &#123;</div><div class=\"line\">            <span class=\"comment\">// 其余路由重定向至服务列表</span></div><div class=\"line\">            path: <span class=\"string\">'*'</span>,</div><div class=\"line\">            <span class=\"attr\">redirect</span>: &#123; <span class=\"attr\">name</span>: <span class=\"string\">'Services'</span> &#125;</div><div class=\"line\">        &#125;]</div><div class=\"line\">    &#125;,</div><div class=\"line\">    &#123; <span class=\"attr\">path</span>: <span class=\"string\">'*'</span>, <span class=\"attr\">redirect</span>: &#123; <span class=\"attr\">name</span>: <span class=\"string\">'Login'</span> &#125; &#125;</div><div class=\"line\">]</div></pre></td></tr></table></figure>\n<ul>\n<li>在App组件中添加路由模板<br>vue-router2.0中，一个被渲染组件同样可以包含自己的嵌套<router-view>。</router-view></li>\n</ul>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">&lt;!--右侧内容展示--&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"right_col\"</span> <span class=\"attr\">role</span>=<span class=\"string\">\"main\"</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">router-view</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">router-view</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>这时候我们的应用已经支持路由跳转了，但在我们的左侧菜单中，部分链接跳转位于一级菜单，部分位于二级菜单。<br>这里我们设定当一级菜单跳转被点亮时，自动关闭下拉菜单，接下来我们将实现这个功能。</p>\n<h3 id=\"使用watch监控路由变化\"><a href=\"#使用watch监控路由变化\" class=\"headerlink\" title=\"使用watch监控路由变化\"></a>使用watch监控路由变化</h3><ul>\n<li>在Sidebar组件中，添加watch来对每次路由跳转进行判断</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">watch: &#123;</div><div class=\"line\">  $route() &#123;</div><div class=\"line\">    <span class=\"comment\">// 检查是否一级菜单链接</span></div><div class=\"line\">    <span class=\"keyword\">this</span>.checkMenuActived(<span class=\"keyword\">this</span>.$route.path);</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<ul>\n<li>添加checkMenuActived方法，来控制相关实现</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">methods: &#123;</div><div class=\"line\">  ...</div><div class=\"line\">  checkMenuActived(path) &#123;</div><div class=\"line\">    <span class=\"comment\">// 遍历所有的一级菜单</span></div><div class=\"line\">    <span class=\"keyword\">this</span>.menus.forEach(<span class=\"function\"><span class=\"params\">item</span> =&gt;</span> &#123;</div><div class=\"line\">      <span class=\"comment\">// 若非当前路由，则取消激活状态</span></div><div class=\"line\">      <span class=\"keyword\">if</span> (item.href &amp;&amp; item.href !== path) &#123;</div><div class=\"line\">        item.class = <span class=\"string\">''</span>;</div><div class=\"line\">      &#125;</div><div class=\"line\">    &#125;);</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"其他路由使用\"><a href=\"#其他路由使用\" class=\"headerlink\" title=\"其他路由使用\"></a>其他路由使用</h3><ul>\n<li>使用<code>this.$router.push()</code>可在组件中控制路由跳转，Login组件中已实现</li>\n<li>使用<code>&lt;router-link&gt;&lt;/router-link&gt;</code>可在组件模板中设定超链接进行挑战，在Sidebar组件中也已实现</li>\n</ul>\n<h3 id=\"页面最终效果\"><a href=\"#页面最终效果\" class=\"headerlink\" title=\"页面最终效果\"></a>页面最终效果</h3><p><img src=\"http://o905ne85q.bkt.clouddn.com/1E1E.tmp.png\" alt=\"image\"></p>\n<h3 id=\"参考-1\"><a href=\"#参考-1\" class=\"headerlink\" title=\"参考\"></a>参考</h3><p><a href=\"https://vuefe.cn/guide/\" target=\"_blank\" rel=\"external\">Vue2.0中文文档</a><br><a href=\"http://router.vuejs.org/zh-cn/index.html\" target=\"_blank\" rel=\"external\">vue-router 2官方文档</a></p>\n<h2 id=\"结束语\"><a href=\"#结束语\" class=\"headerlink\" title=\"结束语\"></a>结束语</h2><hr>\n<p>大家是不是觉得左侧的下拉菜单实现路由跟踪特别麻烦呢，其实这也是本骚年偷了个小懒，不想改动样式代码直接使用gentelella的样式。大家也可以想一下其他的一些实现方法的呀。<br><a href=\"https://github.com/godbasin/godbasin.github.io/tree/blog-codes/vue2-notes/4-vue-router\" target=\"_blank\" rel=\"external\">此处查看项目代码</a><br><a href=\"http://ofyya1gfg.bkt.clouddn.com/4-vue-router/index.html#/App\" target=\"_blank\" rel=\"external\">此处查看页面效果</a></p>\n","excerpt":"<p>最近在使用Vue2作为项目中前端的框架，《Vue2使用笔记》系列用于记录过程中的一些使用和解决方法。<br>本文记录vue-router2的使用过程。<br>","more":"</p>\n<h2 id=\"vue-router2-0的变化\"><a href=\"#vue-router2-0的变化\" class=\"headerlink\" title=\"vue-router2.0的变化\"></a>vue-router2.0的变化</h2><hr>\n<h3 id=\"API的修改\"><a href=\"#API的修改\" class=\"headerlink\" title=\"API的修改\"></a>API的修改</h3><ul>\n<li><code>router.go()</code>改为<code>router.push()</code>，使用<code>$router.push()</code></li>\n<li>新增<code>router.back()</code>、<code>router.forward()</code></li>\n</ul>\n<h3 id=\"路由配置\"><a href=\"#路由配置\" class=\"headerlink\" title=\"路由配置\"></a>路由配置</h3><ul>\n<li>所有路由配置都通过一个单独的对象传到Router的构造函数</li>\n<li>路由配置现在用数组而不是用对象哈希表来作为数据结构</li>\n<li>作废了一些配置项，修改了一些配置项，具体参考<a href=\"https://github.com/vuejs/vue-router/blob/43183911dedfbb30ebacccf2d76ced74d998448a/flow/declarations.js#L8-L16\">可用配置选项</a></li>\n</ul>\n<h3 id=\"链接（Links）\"><a href=\"#链接（Links）\" class=\"headerlink\" title=\"链接（Links）\"></a>链接（Links）</h3><p>v-link指令已经被<router-link>组件替代. 这个组件接受以下属性参数:</p>\n<ul>\n<li>to : 一个路径字符串, 或者一个对象location descriptor</li>\n<li>tag : 渲染成的html元素类型，默认是<a></li>\n<li>exact : 用于控制当前激活项的行为</li>\n<li>append : 控制相对链接路径的追加方式</li>\n<li>replace : 替代而不是作为历史条目压榨</li>\n<li>active-class : 当链接项激活时增加的CSS样式</li>\n</ul>\n<h3 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h3><p>还有一些本骚年暂时没有用到的变化，如滚动行为（Scroll Behavior）等。<br><a href=\"https://segmentfault.com/a/1190000006623100?utm_source=tuicool&amp;utm_medium=referral\">《vue-router 2.0 改变的内容》</a><br><a href=\"http://router.vuejs.org/zh-cn/index.html\">vue-router 2官方文档</a></p>\n<h2 id=\"vue-router的使用\"><a href=\"#vue-router的使用\" class=\"headerlink\" title=\"vue-router的使用\"></a>vue-router的使用</h2><hr>\n<p>这里我们简单创建一个嵌套路由，结合之前路由相关描述下vue-router的使用。</p>\n<h3 id=\"创建新组件用于路由匹配\"><a href=\"#创建新组件用于路由匹配\" class=\"headerlink\" title=\"创建新组件用于路由匹配\"></a>创建新组件用于路由匹配</h3><p>这里本骚年添加几个文件：</p>\n<ul>\n<li>Services.vue：用于服务列表展示</li>\n<li>ServiceAdd.vue：用于服务创建或修改</li>\n<li>Logs.vue：用于日志列表展示</li>\n</ul>\n<p>本节我们主要讲述路由的使用，故这些组件都使用最简单的模板表示不同组件。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;template&gt;</div><div class=\"line\">  &lt;div&gt;Services组件&lt;/div&gt;</div><div class=\"line\">&lt;/template&gt;</div><div class=\"line\"></div><div class=\"line\">&lt;script&gt;</div><div class=\"line\">    export default &#123;</div><div class=\"line\">        name: &apos;Sevices&apos;</div><div class=\"line\">    &#125;</div><div class=\"line\">&lt;/script&gt;</div></pre></td></tr></table></figure></p>\n<h3 id=\"添加App嵌套子路由\"><a href=\"#添加App嵌套子路由\" class=\"headerlink\" title=\"添加App嵌套子路由\"></a>添加App嵌套子路由</h3><p>应用界面通常由多层嵌套的组件组合而成，URL中各段动态路径也按某种结构对应嵌套的各层组件。<br>接下来我们在main.js中定义嵌套子路由。</p>\n<ul>\n<li>导入组件</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> Services <span class=\"keyword\">from</span> <span class=\"string\">'./components/Services'</span></div><div class=\"line\"><span class=\"keyword\">import</span> ServiceAdd <span class=\"keyword\">from</span> <span class=\"string\">'./components/ServiceAdd'</span></div><div class=\"line\"><span class=\"keyword\">import</span> Logs <span class=\"keyword\">from</span> <span class=\"string\">'./components/Logs'</span></div></pre></td></tr></table></figure>\n<ul>\n<li>设置路由<br>要在嵌套的出口中渲染组件，需要在VueRouter的参数中使用children配置。</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">const</span> routes = [</div><div class=\"line\">    &#123; <span class=\"attr\">path</span>: <span class=\"string\">'/login'</span>, <span class=\"attr\">component</span>: Login, <span class=\"attr\">name</span>: <span class=\"string\">'Login'</span> &#125;,</div><div class=\"line\">    &#123;</div><div class=\"line\">        <span class=\"attr\">path</span>: <span class=\"string\">'/app'</span>,</div><div class=\"line\">        <span class=\"attr\">component</span>: App,</div><div class=\"line\">        <span class=\"attr\">name</span>: <span class=\"string\">'App'</span>,</div><div class=\"line\">        <span class=\"comment\">// 设置子路由</span></div><div class=\"line\">        children: [&#123;</div><div class=\"line\">            <span class=\"comment\">// 服务列表</span></div><div class=\"line\">            path: <span class=\"string\">'services'</span>, </div><div class=\"line\">            <span class=\"attr\">component</span>: Services,</div><div class=\"line\">            <span class=\"attr\">name</span>: <span class=\"string\">'Services'</span></div><div class=\"line\">        &#125;, &#123;</div><div class=\"line\">            <span class=\"comment\">// 添加服务</span></div><div class=\"line\">            path: <span class=\"string\">'add/service'</span>, </div><div class=\"line\">            <span class=\"attr\">component</span>: ServiceAdd,</div><div class=\"line\">            <span class=\"attr\">name</span>: <span class=\"string\">'ServiceAdd'</span></div><div class=\"line\">        &#125;, &#123;</div><div class=\"line\">            <span class=\"comment\">// 编辑服务，:id可匹配任意值，且可在组件中获取该值</span></div><div class=\"line\">            path: <span class=\"string\">'edit/service/:id'</span>, </div><div class=\"line\">            <span class=\"attr\">component</span>: ServiceAdd,</div><div class=\"line\">            <span class=\"attr\">name</span>: <span class=\"string\">'ServiceEdit'</span></div><div class=\"line\">        &#125;, &#123;</div><div class=\"line\">            <span class=\"comment\">// 日志列表</span></div><div class=\"line\">            path: <span class=\"string\">'logs'</span>,</div><div class=\"line\">            <span class=\"attr\">component</span>: Logs,</div><div class=\"line\">            <span class=\"attr\">name</span>: <span class=\"string\">'Logs'</span></div><div class=\"line\">        &#125;, &#123;</div><div class=\"line\">            <span class=\"comment\">// 其余路由重定向至服务列表</span></div><div class=\"line\">            path: <span class=\"string\">'*'</span>,</div><div class=\"line\">            <span class=\"attr\">redirect</span>: &#123; <span class=\"attr\">name</span>: <span class=\"string\">'Services'</span> &#125;</div><div class=\"line\">        &#125;]</div><div class=\"line\">    &#125;,</div><div class=\"line\">    &#123; <span class=\"attr\">path</span>: <span class=\"string\">'*'</span>, <span class=\"attr\">redirect</span>: &#123; <span class=\"attr\">name</span>: <span class=\"string\">'Login'</span> &#125; &#125;</div><div class=\"line\">]</div></pre></td></tr></table></figure>\n<ul>\n<li>在App组件中添加路由模板<br>vue-router2.0中，一个被渲染组件同样可以包含自己的嵌套<router-view>。</li>\n</ul>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">&lt;!--右侧内容展示--&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"right_col\"</span> <span class=\"attr\">role</span>=<span class=\"string\">\"main\"</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">router-view</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">router-view</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>这时候我们的应用已经支持路由跳转了，但在我们的左侧菜单中，部分链接跳转位于一级菜单，部分位于二级菜单。<br>这里我们设定当一级菜单跳转被点亮时，自动关闭下拉菜单，接下来我们将实现这个功能。</p>\n<h3 id=\"使用watch监控路由变化\"><a href=\"#使用watch监控路由变化\" class=\"headerlink\" title=\"使用watch监控路由变化\"></a>使用watch监控路由变化</h3><ul>\n<li>在Sidebar组件中，添加watch来对每次路由跳转进行判断</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">watch: &#123;</div><div class=\"line\">  $route() &#123;</div><div class=\"line\">    <span class=\"comment\">// 检查是否一级菜单链接</span></div><div class=\"line\">    <span class=\"keyword\">this</span>.checkMenuActived(<span class=\"keyword\">this</span>.$route.path);</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<ul>\n<li>添加checkMenuActived方法，来控制相关实现</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">methods: &#123;</div><div class=\"line\">  ...</div><div class=\"line\">  checkMenuActived(path) &#123;</div><div class=\"line\">    <span class=\"comment\">// 遍历所有的一级菜单</span></div><div class=\"line\">    <span class=\"keyword\">this</span>.menus.forEach(<span class=\"function\"><span class=\"params\">item</span> =&gt;</span> &#123;</div><div class=\"line\">      <span class=\"comment\">// 若非当前路由，则取消激活状态</span></div><div class=\"line\">      <span class=\"keyword\">if</span> (item.href &amp;&amp; item.href !== path) &#123;</div><div class=\"line\">        item.class = <span class=\"string\">''</span>;</div><div class=\"line\">      &#125;</div><div class=\"line\">    &#125;);</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"其他路由使用\"><a href=\"#其他路由使用\" class=\"headerlink\" title=\"其他路由使用\"></a>其他路由使用</h3><ul>\n<li>使用<code>this.$router.push()</code>可在组件中控制路由跳转，Login组件中已实现</li>\n<li>使用<code>&lt;router-link&gt;&lt;/router-link&gt;</code>可在组件模板中设定超链接进行挑战，在Sidebar组件中也已实现</li>\n</ul>\n<h3 id=\"页面最终效果\"><a href=\"#页面最终效果\" class=\"headerlink\" title=\"页面最终效果\"></a>页面最终效果</h3><p><img src=\"http://o905ne85q.bkt.clouddn.com/1E1E.tmp.png\" alt=\"image\"></p>\n<h3 id=\"参考-1\"><a href=\"#参考-1\" class=\"headerlink\" title=\"参考\"></a>参考</h3><p><a href=\"https://vuefe.cn/guide/\">Vue2.0中文文档</a><br><a href=\"http://router.vuejs.org/zh-cn/index.html\">vue-router 2官方文档</a></p>\n<h2 id=\"结束语\"><a href=\"#结束语\" class=\"headerlink\" title=\"结束语\"></a>结束语</h2><hr>\n<p>大家是不是觉得左侧的下拉菜单实现路由跟踪特别麻烦呢，其实这也是本骚年偷了个小懒，不想改动样式代码直接使用gentelella的样式。大家也可以想一下其他的一些实现方法的呀。<br><a href=\"https://github.com/godbasin/godbasin.github.io/tree/blog-codes/vue2-notes/4-vue-router\">此处查看项目代码</a><br><a href=\"http://ofyya1gfg.bkt.clouddn.com/4-vue-router/index.html#/App\">此处查看页面效果</a></p>"},{"title":"Vue2使用笔记5--transition过渡效果使用","date":"2016-12-03T13:51:05.000Z","_content":"最近在使用Vue2作为项目中前端的框架，《Vue2使用笔记》系列用于记录过程中的一些使用和解决方法。\n本文记录vue中过渡效果，以及在路由切换以及下拉菜单中的使用过程。\n<!--more-->\n\n## 过渡效果\n---\nVue 在插入、更新或者移除 DOM 时，提供多种不同方式的应用过渡效果。\n包括以下工具：\n- 在CSS过渡和动画中自动应用class\n- 可以配合使用第三方CSS动画库，如Animate.css\n- 在过渡钩子函数中使用JavaScript直接操作DOM\n- 可以配合使用第三方JavaScript动画库，如Velocity.js\n\n### transition封装组件\n- 在下列情形中，可以给任何元素和组件添加entering/leaving过渡\n  - 条件渲染（使用 v-if）\n  - 条件展示（使用 v-show）\n  - 动态组件\n  - 组件根节点\n\n- 元素封装成过渡组件之后，在遇到插入或删除时，Vue 将\n  - 自动嗅探目标元素是否有CSS过渡或动画，并在合适时添加/删除CSS类名\n  - 如果过渡组件设置了过渡的JavaScript钩子函数，会在相应的阶段调用钩子函数\n  - 如果没有找到JavaScript钩子并且也没有检测到CSS过渡/动画，DOM操作（插入/删除）在下一帧中立即执行\n\n### 过渡的-CSS-类名\n![image](http://o905ne85q.bkt.clouddn.com/transition.png)\n有4个(CSS)类名在enter/leave的过渡中切换\n- v-enter\n  - 定义进入过渡的开始状态\n  - 在元素被插入时生效，在下一个帧移除\n- v-enter-active\n  - 定义进入过渡的结束状态\n  - 在元素被插入时生效，在 transition/animation 完成之后移除\n- v-leave\n  - 定义离开过渡的开始状态\n  - 在离开过渡被触发时生效，在下一个帧移除。\n- v-leave-active\n  - 定义离开过渡的结束状态\n  - 在离开过渡被触发时生效，在transition/animation完成之后移除\n\n- 自定义过渡类名\n  - 可以通过以下特性来自定义过渡类名：\n    - enter-class\n    - enter-active-class\n    - leave-class\n    - leave-active-class\n  - 他们的优先级高于普通的类名，这对于Vue的过渡系统和其他第三方CSS动画库，如Animate.css结合使用十分有用\n\n### JavaScript 钩子\n``` html\n<transition\n  v-on:before-enter=\"beforeEnter\"\n  v-on:enter=\"enter\"\n  v-on:after-enter=\"afterEnter\"\n  v-on:enter-cancelled=\"enterCancelled\"\n  v-on:before-leave=\"beforeLeave\"\n  v-on:leave=\"leave\"\n  v-on:after-leave=\"afterLeave\"\n  v-on:leave-cancelled=\"leaveCancelled\"\n>\n  <!-- ... -->\n</transition>\n```\n这些钩子函数可以结合CSS transitions/animations使用，也可以单独使用。\n\n当只用JavaScript过渡的时候，在enter和leave中，回调函数done是必须的。 否则，它们会被同步调用，过渡会立即完成。\n\n推荐对于仅使用JavaScript过渡的元素添加v-bind:css=\"false\"，Vue会跳过CSS的检测。这也可以避免过渡过程中CSS的影响。\n\n### 多个元素的过渡\n- 使用<transition-group>组件\n  - 不同于<transition>，它会以一个真实元素呈现：默认为一个<span>。你也可以通过tag特性更换为其他元素\n  - 元素一定需要指定唯一的key特性值\n  - 还可以改变定位。要使用这个新功能只需了解新增的v-move特性，它会在元素的改变定位的过程中应用\n- 通过data属性与JavaScript通信，就可以实现列表的渐进过渡\n\n### 参考\n过渡可以通过Vue的组件系统实现复用。要创建一个可复用过渡组件，你需要做的就是将<transition>或者<transition-group>作为根组件，然后将任何子组件放置在其中就可以了。\n[vue2过渡效果](https://vuefe.cn/guide/transitions.html)\n[vue-router2过渡动效](http://router.vuejs.org/zh-cn/advanced/transitions.html)\n\n## 添加过渡效果\n---\n下面我们将给路由切换以及Sidebar的下拉菜单加上过渡效果。\n\n### vue-router过渡动效\n给路由添加动态效果，可以在<router-view></router-view>外面添加transition，也可以在路由里面组件外面加一层transition。\n\n- 在路由里层组件添加transition\n\n这里我们分别在App组件和Login组件最外层添加：\n``` vue\n<template>\n\t<transition name=\"fade\">\n\t\t...\n\t</transition>\n</template>\n```\n\n然后我们添加fade的css过渡：\n``` vue\n.fade-enter-active,\n.fade-leave-active {\n    transition: opacity .4s\n}\n.fade-enter,\n.fade-leave {\n    opacity: 0\n}\n```\n\n- 在<router-view></router-view>外面添加transition\n\n这里我们在App组件内嵌路由外层添加transition:\n``` vue\n<transition name=\"fade\">\n\t<router-view></router-view>\n</transition>\n```\n\n上面两种方法都可以实现路由切换时的过渡效果。\n\n### Sidebar下拉菜单过渡效果\nSidebar组件中，下拉菜单过渡效果乍一看属于列表过渡。\n但其实分析一下，我们便会发现它其实属于最简单的单个元素过渡。\n- 在下拉菜单外层<ul></ul>添加transition\n\n``` js\n<transition name=\"slide\">\n\t<ul class=\"nav child_menu slide\" v-on:click.stop v-show=\"menu.class\">\n\t\t<router-link v-for=\"childMenu in menu.childMenus\" v-bind:key=\"childMenu.text\" class=\"slide-item\" :to=\"childMenu.href\" tag=\"li\" active-class=\"current-page\">\n\t\t\t<a>{{ childMenu.text }}</a>\n\t\t</router-link>\n\t</ul>\n</transition>\n```\n\n- 添加slide过渡样式\n这里有个需要注意的地方，像height:auto和width:auto这种，是无法实现宽高的改变的，所以这里我们应该使用max-height和max-width来进行。\n\n``` vue\n.slide {\n\ttransition: all .5s ease-in-out;\n\toverflow: hidden;\n\tmax-height: 100px;\n}\n.slide-enter,\n.slide-leave-active {\n\tmax-height: 0;\n}\n```\n\n### 给Services组件简单添加列表过渡效果\n本骚年这里就不啰嗦啦，直接上代码：\n``` vue\n<template>\n\t<div id=\"list-demo\" class=\"demo\">\n\t\t<button v-on:click=\"add\">Add</button>\n\t\t<button v-on:click=\"remove\">Remove</button>\n\t\t<transition-group name=\"list\" tag=\"div\">\n\t\t\t<p v-for=\"item in items\" v-bind:key=\"item\" class=\"list-item\">\n                Service组件{{ item }}\n            </p>\n\t\t</transition-group>\n\t</div>\n</template>\n\n\n<script>\n    export default {\n        name: 'Sevices',\n        data() {\n            return {\n                items: [1, 2, 3, 4, 5, 6, 7, 8, 9],\n                nextNum: 10\n            }\n        },\n        methods: {\n            // 生成items数组的随机索引\n            randomIndex: function() {\n                return Math.floor(Math.random() * this.items.length)\n            },\n            // 随机添加一项\n            add: function() {\n                this.items.splice(this.randomIndex(), 0, this.nextNum++)\n            },\n            // 随机移除一项\n            remove: function() {\n                this.items.splice(this.randomIndex(), 1)\n            },\n        }\n    }\n</script>\n\n<style>\n    .list-item {\n        margin-bottom: 10px;\n    }\n    \n    .list-enter-active,\n    .list-leave-active {\n        transition: all 1s;\n    }\n    \n    .list-enter,\n    .list-leave-active {\n        opacity: 0;\n        transform: translateX(100px);\n    }\n</style>\n```\n\n## 结束语\n-----\n这里只是用到最简单的css过渡，但是vue的过渡效果以及过渡状态还是很牛逼的，大家有兴趣的可以去看看[官方文档](https://vuefe.cn/guide/transitions.html)然后多尝试一下呢，酷酷的。\n[此处查看项目代码](https://github.com/godbasin/godbasin.github.io/tree/blog-codes/vue2-notes/5-transition-animation)\n[此处查看页面效果](http://ofyya1gfg.bkt.clouddn.com/5-transition-animation/index.html#/app/services)","source":"_posts/vue2-notes-5-transition-animation.md","raw":"---\ntitle: Vue2使用笔记5--transition过渡效果使用\ndate: 2016-12-03 21:51:05\ncategories: vue八宝粥\ntags: 笔记\n---\n最近在使用Vue2作为项目中前端的框架，《Vue2使用笔记》系列用于记录过程中的一些使用和解决方法。\n本文记录vue中过渡效果，以及在路由切换以及下拉菜单中的使用过程。\n<!--more-->\n\n## 过渡效果\n---\nVue 在插入、更新或者移除 DOM 时，提供多种不同方式的应用过渡效果。\n包括以下工具：\n- 在CSS过渡和动画中自动应用class\n- 可以配合使用第三方CSS动画库，如Animate.css\n- 在过渡钩子函数中使用JavaScript直接操作DOM\n- 可以配合使用第三方JavaScript动画库，如Velocity.js\n\n### transition封装组件\n- 在下列情形中，可以给任何元素和组件添加entering/leaving过渡\n  - 条件渲染（使用 v-if）\n  - 条件展示（使用 v-show）\n  - 动态组件\n  - 组件根节点\n\n- 元素封装成过渡组件之后，在遇到插入或删除时，Vue 将\n  - 自动嗅探目标元素是否有CSS过渡或动画，并在合适时添加/删除CSS类名\n  - 如果过渡组件设置了过渡的JavaScript钩子函数，会在相应的阶段调用钩子函数\n  - 如果没有找到JavaScript钩子并且也没有检测到CSS过渡/动画，DOM操作（插入/删除）在下一帧中立即执行\n\n### 过渡的-CSS-类名\n![image](http://o905ne85q.bkt.clouddn.com/transition.png)\n有4个(CSS)类名在enter/leave的过渡中切换\n- v-enter\n  - 定义进入过渡的开始状态\n  - 在元素被插入时生效，在下一个帧移除\n- v-enter-active\n  - 定义进入过渡的结束状态\n  - 在元素被插入时生效，在 transition/animation 完成之后移除\n- v-leave\n  - 定义离开过渡的开始状态\n  - 在离开过渡被触发时生效，在下一个帧移除。\n- v-leave-active\n  - 定义离开过渡的结束状态\n  - 在离开过渡被触发时生效，在transition/animation完成之后移除\n\n- 自定义过渡类名\n  - 可以通过以下特性来自定义过渡类名：\n    - enter-class\n    - enter-active-class\n    - leave-class\n    - leave-active-class\n  - 他们的优先级高于普通的类名，这对于Vue的过渡系统和其他第三方CSS动画库，如Animate.css结合使用十分有用\n\n### JavaScript 钩子\n``` html\n<transition\n  v-on:before-enter=\"beforeEnter\"\n  v-on:enter=\"enter\"\n  v-on:after-enter=\"afterEnter\"\n  v-on:enter-cancelled=\"enterCancelled\"\n  v-on:before-leave=\"beforeLeave\"\n  v-on:leave=\"leave\"\n  v-on:after-leave=\"afterLeave\"\n  v-on:leave-cancelled=\"leaveCancelled\"\n>\n  <!-- ... -->\n</transition>\n```\n这些钩子函数可以结合CSS transitions/animations使用，也可以单独使用。\n\n当只用JavaScript过渡的时候，在enter和leave中，回调函数done是必须的。 否则，它们会被同步调用，过渡会立即完成。\n\n推荐对于仅使用JavaScript过渡的元素添加v-bind:css=\"false\"，Vue会跳过CSS的检测。这也可以避免过渡过程中CSS的影响。\n\n### 多个元素的过渡\n- 使用<transition-group>组件\n  - 不同于<transition>，它会以一个真实元素呈现：默认为一个<span>。你也可以通过tag特性更换为其他元素\n  - 元素一定需要指定唯一的key特性值\n  - 还可以改变定位。要使用这个新功能只需了解新增的v-move特性，它会在元素的改变定位的过程中应用\n- 通过data属性与JavaScript通信，就可以实现列表的渐进过渡\n\n### 参考\n过渡可以通过Vue的组件系统实现复用。要创建一个可复用过渡组件，你需要做的就是将<transition>或者<transition-group>作为根组件，然后将任何子组件放置在其中就可以了。\n[vue2过渡效果](https://vuefe.cn/guide/transitions.html)\n[vue-router2过渡动效](http://router.vuejs.org/zh-cn/advanced/transitions.html)\n\n## 添加过渡效果\n---\n下面我们将给路由切换以及Sidebar的下拉菜单加上过渡效果。\n\n### vue-router过渡动效\n给路由添加动态效果，可以在<router-view></router-view>外面添加transition，也可以在路由里面组件外面加一层transition。\n\n- 在路由里层组件添加transition\n\n这里我们分别在App组件和Login组件最外层添加：\n``` vue\n<template>\n\t<transition name=\"fade\">\n\t\t...\n\t</transition>\n</template>\n```\n\n然后我们添加fade的css过渡：\n``` vue\n.fade-enter-active,\n.fade-leave-active {\n    transition: opacity .4s\n}\n.fade-enter,\n.fade-leave {\n    opacity: 0\n}\n```\n\n- 在<router-view></router-view>外面添加transition\n\n这里我们在App组件内嵌路由外层添加transition:\n``` vue\n<transition name=\"fade\">\n\t<router-view></router-view>\n</transition>\n```\n\n上面两种方法都可以实现路由切换时的过渡效果。\n\n### Sidebar下拉菜单过渡效果\nSidebar组件中，下拉菜单过渡效果乍一看属于列表过渡。\n但其实分析一下，我们便会发现它其实属于最简单的单个元素过渡。\n- 在下拉菜单外层<ul></ul>添加transition\n\n``` js\n<transition name=\"slide\">\n\t<ul class=\"nav child_menu slide\" v-on:click.stop v-show=\"menu.class\">\n\t\t<router-link v-for=\"childMenu in menu.childMenus\" v-bind:key=\"childMenu.text\" class=\"slide-item\" :to=\"childMenu.href\" tag=\"li\" active-class=\"current-page\">\n\t\t\t<a>{{ childMenu.text }}</a>\n\t\t</router-link>\n\t</ul>\n</transition>\n```\n\n- 添加slide过渡样式\n这里有个需要注意的地方，像height:auto和width:auto这种，是无法实现宽高的改变的，所以这里我们应该使用max-height和max-width来进行。\n\n``` vue\n.slide {\n\ttransition: all .5s ease-in-out;\n\toverflow: hidden;\n\tmax-height: 100px;\n}\n.slide-enter,\n.slide-leave-active {\n\tmax-height: 0;\n}\n```\n\n### 给Services组件简单添加列表过渡效果\n本骚年这里就不啰嗦啦，直接上代码：\n``` vue\n<template>\n\t<div id=\"list-demo\" class=\"demo\">\n\t\t<button v-on:click=\"add\">Add</button>\n\t\t<button v-on:click=\"remove\">Remove</button>\n\t\t<transition-group name=\"list\" tag=\"div\">\n\t\t\t<p v-for=\"item in items\" v-bind:key=\"item\" class=\"list-item\">\n                Service组件{{ item }}\n            </p>\n\t\t</transition-group>\n\t</div>\n</template>\n\n\n<script>\n    export default {\n        name: 'Sevices',\n        data() {\n            return {\n                items: [1, 2, 3, 4, 5, 6, 7, 8, 9],\n                nextNum: 10\n            }\n        },\n        methods: {\n            // 生成items数组的随机索引\n            randomIndex: function() {\n                return Math.floor(Math.random() * this.items.length)\n            },\n            // 随机添加一项\n            add: function() {\n                this.items.splice(this.randomIndex(), 0, this.nextNum++)\n            },\n            // 随机移除一项\n            remove: function() {\n                this.items.splice(this.randomIndex(), 1)\n            },\n        }\n    }\n</script>\n\n<style>\n    .list-item {\n        margin-bottom: 10px;\n    }\n    \n    .list-enter-active,\n    .list-leave-active {\n        transition: all 1s;\n    }\n    \n    .list-enter,\n    .list-leave-active {\n        opacity: 0;\n        transform: translateX(100px);\n    }\n</style>\n```\n\n## 结束语\n-----\n这里只是用到最简单的css过渡，但是vue的过渡效果以及过渡状态还是很牛逼的，大家有兴趣的可以去看看[官方文档](https://vuefe.cn/guide/transitions.html)然后多尝试一下呢，酷酷的。\n[此处查看项目代码](https://github.com/godbasin/godbasin.github.io/tree/blog-codes/vue2-notes/5-transition-animation)\n[此处查看页面效果](http://ofyya1gfg.bkt.clouddn.com/5-transition-animation/index.html#/app/services)","slug":"vue2-notes-5-transition-animation","published":1,"updated":"2016-12-03T13:51:32.861Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cix45huik005dxotuxhr2hfi6","content":"<p>最近在使用Vue2作为项目中前端的框架，《Vue2使用笔记》系列用于记录过程中的一些使用和解决方法。<br>本文记录vue中过渡效果，以及在路由切换以及下拉菜单中的使用过程。<br><a id=\"more\"></a></p>\n<h2 id=\"过渡效果\"><a href=\"#过渡效果\" class=\"headerlink\" title=\"过渡效果\"></a>过渡效果</h2><hr>\n<p>Vue 在插入、更新或者移除 DOM 时，提供多种不同方式的应用过渡效果。<br>包括以下工具：</p>\n<ul>\n<li>在CSS过渡和动画中自动应用class</li>\n<li>可以配合使用第三方CSS动画库，如Animate.css</li>\n<li>在过渡钩子函数中使用JavaScript直接操作DOM</li>\n<li>可以配合使用第三方JavaScript动画库，如Velocity.js</li>\n</ul>\n<h3 id=\"transition封装组件\"><a href=\"#transition封装组件\" class=\"headerlink\" title=\"transition封装组件\"></a>transition封装组件</h3><ul>\n<li><p>在下列情形中，可以给任何元素和组件添加entering/leaving过渡</p>\n<ul>\n<li>条件渲染（使用 v-if）</li>\n<li>条件展示（使用 v-show）</li>\n<li>动态组件</li>\n<li>组件根节点</li>\n</ul>\n</li>\n<li><p>元素封装成过渡组件之后，在遇到插入或删除时，Vue 将</p>\n<ul>\n<li>自动嗅探目标元素是否有CSS过渡或动画，并在合适时添加/删除CSS类名</li>\n<li>如果过渡组件设置了过渡的JavaScript钩子函数，会在相应的阶段调用钩子函数</li>\n<li>如果没有找到JavaScript钩子并且也没有检测到CSS过渡/动画，DOM操作（插入/删除）在下一帧中立即执行</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"过渡的-CSS-类名\"><a href=\"#过渡的-CSS-类名\" class=\"headerlink\" title=\"过渡的-CSS-类名\"></a>过渡的-CSS-类名</h3><p><img src=\"http://o905ne85q.bkt.clouddn.com/transition.png\" alt=\"image\"><br>有4个(CSS)类名在enter/leave的过渡中切换</p>\n<ul>\n<li>v-enter<ul>\n<li>定义进入过渡的开始状态</li>\n<li>在元素被插入时生效，在下一个帧移除</li>\n</ul>\n</li>\n<li>v-enter-active<ul>\n<li>定义进入过渡的结束状态</li>\n<li>在元素被插入时生效，在 transition/animation 完成之后移除</li>\n</ul>\n</li>\n<li>v-leave<ul>\n<li>定义离开过渡的开始状态</li>\n<li>在离开过渡被触发时生效，在下一个帧移除。</li>\n</ul>\n</li>\n<li><p>v-leave-active</p>\n<ul>\n<li>定义离开过渡的结束状态</li>\n<li>在离开过渡被触发时生效，在transition/animation完成之后移除</li>\n</ul>\n</li>\n<li><p>自定义过渡类名</p>\n<ul>\n<li>可以通过以下特性来自定义过渡类名：<ul>\n<li>enter-class</li>\n<li>enter-active-class</li>\n<li>leave-class</li>\n<li>leave-active-class</li>\n</ul>\n</li>\n<li>他们的优先级高于普通的类名，这对于Vue的过渡系统和其他第三方CSS动画库，如Animate.css结合使用十分有用</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"JavaScript-钩子\"><a href=\"#JavaScript-钩子\" class=\"headerlink\" title=\"JavaScript 钩子\"></a>JavaScript 钩子</h3><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">transition</span></span></div><div class=\"line\">  <span class=\"attr\">v-on:before-enter</span>=<span class=\"string\">\"beforeEnter\"</span></div><div class=\"line\">  <span class=\"attr\">v-on:enter</span>=<span class=\"string\">\"enter\"</span></div><div class=\"line\">  <span class=\"attr\">v-on:after-enter</span>=<span class=\"string\">\"afterEnter\"</span></div><div class=\"line\">  <span class=\"attr\">v-on:enter-cancelled</span>=<span class=\"string\">\"enterCancelled\"</span></div><div class=\"line\">  <span class=\"attr\">v-on:before-leave</span>=<span class=\"string\">\"beforeLeave\"</span></div><div class=\"line\">  <span class=\"attr\">v-on:leave</span>=<span class=\"string\">\"leave\"</span></div><div class=\"line\">  <span class=\"attr\">v-on:after-leave</span>=<span class=\"string\">\"afterLeave\"</span></div><div class=\"line\">  <span class=\"attr\">v-on:leave-cancelled</span>=<span class=\"string\">\"leaveCancelled\"</span></div><div class=\"line\">&gt;</div><div class=\"line\">  <span class=\"comment\">&lt;!-- ... --&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">transition</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>这些钩子函数可以结合CSS transitions/animations使用，也可以单独使用。</p>\n<p>当只用JavaScript过渡的时候，在enter和leave中，回调函数done是必须的。 否则，它们会被同步调用，过渡会立即完成。</p>\n<p>推荐对于仅使用JavaScript过渡的元素添加v-bind:css=”false”，Vue会跳过CSS的检测。这也可以避免过渡过程中CSS的影响。</p>\n<h3 id=\"多个元素的过渡\"><a href=\"#多个元素的过渡\" class=\"headerlink\" title=\"多个元素的过渡\"></a>多个元素的过渡</h3><ul>\n<li>使用<transition-group>组件<ul>\n<li>不同于<transition>，它会以一个真实元素呈现：默认为一个<span>。你也可以通过tag特性更换为其他元素</span></transition></li>\n<li>元素一定需要指定唯一的key特性值</li>\n<li>还可以改变定位。要使用这个新功能只需了解新增的v-move特性，它会在元素的改变定位的过程中应用</li>\n</ul>\n</transition-group></li>\n<li>通过data属性与JavaScript通信，就可以实现列表的渐进过渡</li>\n</ul>\n<h3 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h3><p>过渡可以通过Vue的组件系统实现复用。要创建一个可复用过渡组件，你需要做的就是将<transition>或者<transition-group>作为根组件，然后将任何子组件放置在其中就可以了。<br><a href=\"https://vuefe.cn/guide/transitions.html\" target=\"_blank\" rel=\"external\">vue2过渡效果</a><br><a href=\"http://router.vuejs.org/zh-cn/advanced/transitions.html\" target=\"_blank\" rel=\"external\">vue-router2过渡动效</a></transition-group></transition></p>\n<h2 id=\"添加过渡效果\"><a href=\"#添加过渡效果\" class=\"headerlink\" title=\"添加过渡效果\"></a>添加过渡效果</h2><hr>\n<p>下面我们将给路由切换以及Sidebar的下拉菜单加上过渡效果。</p>\n<h3 id=\"vue-router过渡动效\"><a href=\"#vue-router过渡动效\" class=\"headerlink\" title=\"vue-router过渡动效\"></a>vue-router过渡动效</h3><p>给路由添加动态效果，可以在<router-view></router-view>外面添加transition，也可以在路由里面组件外面加一层transition。</p>\n<ul>\n<li>在路由里层组件添加transition</li>\n</ul>\n<p>这里我们分别在App组件和Login组件最外层添加：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;template&gt;</div><div class=\"line\">  &lt;transition name=&quot;fade&quot;&gt;</div><div class=\"line\">    ...</div><div class=\"line\">  &lt;/transition&gt;</div><div class=\"line\">&lt;/template&gt;</div></pre></td></tr></table></figure></p>\n<p>然后我们添加fade的css过渡：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">.fade-enter-active,</div><div class=\"line\">.fade-leave-active &#123;</div><div class=\"line\">    transition: opacity .4s</div><div class=\"line\">&#125;</div><div class=\"line\">.fade-enter,</div><div class=\"line\">.fade-leave &#123;</div><div class=\"line\">    opacity: 0</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<ul>\n<li>在<router-view></router-view>外面添加transition</li>\n</ul>\n<p>这里我们在App组件内嵌路由外层添加transition:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;transition name=&quot;fade&quot;&gt;</div><div class=\"line\">  &lt;router-view&gt;&lt;/router-view&gt;</div><div class=\"line\">&lt;/transition&gt;</div></pre></td></tr></table></figure></p>\n<p>上面两种方法都可以实现路由切换时的过渡效果。</p>\n<h3 id=\"Sidebar下拉菜单过渡效果\"><a href=\"#Sidebar下拉菜单过渡效果\" class=\"headerlink\" title=\"Sidebar下拉菜单过渡效果\"></a>Sidebar下拉菜单过渡效果</h3><p>Sidebar组件中，下拉菜单过渡效果乍一看属于列表过渡。<br>但其实分析一下，我们便会发现它其实属于最简单的单个元素过渡。</p>\n<ul>\n<li>在下拉菜单外层<ul></ul>添加transition</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;transition name=<span class=\"string\">\"slide\"</span>&gt;</div><div class=\"line\">  <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">ul</span> <span class=\"attr\">class</span>=<span class=\"string\">\"nav child_menu slide\"</span> <span class=\"attr\">v-on:click.stop</span> <span class=\"attr\">v-show</span>=<span class=\"string\">\"menu.class\"</span>&gt;</span></span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">router-link</span> <span class=\"attr\">v-for</span>=<span class=\"string\">\"childMenu in menu.childMenus\"</span> <span class=\"attr\">v-bind:key</span>=<span class=\"string\">\"childMenu.text\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"slide-item\"</span> <span class=\"attr\">:to</span>=<span class=\"string\">\"childMenu.href\"</span> <span class=\"attr\">tag</span>=<span class=\"string\">\"li\"</span> <span class=\"attr\">active-class</span>=<span class=\"string\">\"current-page\"</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">a</span>&gt;</span>&#123;&#123; childMenu.text &#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">router-link</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">transition</span>&gt;</span></div></pre></td></tr></table></figure>\n<ul>\n<li>添加slide过渡样式<br>这里有个需要注意的地方，像height:auto和width:auto这种，是无法实现宽高的改变的，所以这里我们应该使用max-height和max-width来进行。</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">.slide &#123;</div><div class=\"line\">  transition: all .5s ease-in-out;</div><div class=\"line\">  overflow: hidden;</div><div class=\"line\">  max-height: 100px;</div><div class=\"line\">&#125;</div><div class=\"line\">.slide-enter,</div><div class=\"line\">.slide-leave-active &#123;</div><div class=\"line\">  max-height: 0;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"给Services组件简单添加列表过渡效果\"><a href=\"#给Services组件简单添加列表过渡效果\" class=\"headerlink\" title=\"给Services组件简单添加列表过渡效果\"></a>给Services组件简单添加列表过渡效果</h3><p>本骚年这里就不啰嗦啦，直接上代码：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;template&gt;</div><div class=\"line\">  &lt;div id=&quot;list-demo&quot; class=&quot;demo&quot;&gt;</div><div class=\"line\">    &lt;button v-on:click=&quot;add&quot;&gt;Add&lt;/button&gt;</div><div class=\"line\">    &lt;button v-on:click=&quot;remove&quot;&gt;Remove&lt;/button&gt;</div><div class=\"line\">    &lt;transition-group name=&quot;list&quot; tag=&quot;div&quot;&gt;</div><div class=\"line\">      &lt;p v-for=&quot;item in items&quot; v-bind:key=&quot;item&quot; class=&quot;list-item&quot;&gt;</div><div class=\"line\">                Service组件&#123;&#123; item &#125;&#125;</div><div class=\"line\">            &lt;/p&gt;</div><div class=\"line\">    &lt;/transition-group&gt;</div><div class=\"line\">  &lt;/div&gt;</div><div class=\"line\">&lt;/template&gt;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">&lt;script&gt;</div><div class=\"line\">    export default &#123;</div><div class=\"line\">        name: &apos;Sevices&apos;,</div><div class=\"line\">        data() &#123;</div><div class=\"line\">            return &#123;</div><div class=\"line\">                items: [1, 2, 3, 4, 5, 6, 7, 8, 9],</div><div class=\"line\">                nextNum: 10</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;,</div><div class=\"line\">        methods: &#123;</div><div class=\"line\">            // 生成items数组的随机索引</div><div class=\"line\">            randomIndex: function() &#123;</div><div class=\"line\">                return Math.floor(Math.random() * this.items.length)</div><div class=\"line\">            &#125;,</div><div class=\"line\">            // 随机添加一项</div><div class=\"line\">            add: function() &#123;</div><div class=\"line\">                this.items.splice(this.randomIndex(), 0, this.nextNum++)</div><div class=\"line\">            &#125;,</div><div class=\"line\">            // 随机移除一项</div><div class=\"line\">            remove: function() &#123;</div><div class=\"line\">                this.items.splice(this.randomIndex(), 1)</div><div class=\"line\">            &#125;,</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&lt;/script&gt;</div><div class=\"line\"></div><div class=\"line\">&lt;style&gt;</div><div class=\"line\">    .list-item &#123;</div><div class=\"line\">        margin-bottom: 10px;</div><div class=\"line\">    &#125;</div><div class=\"line\">    </div><div class=\"line\">    .list-enter-active,</div><div class=\"line\">    .list-leave-active &#123;</div><div class=\"line\">        transition: all 1s;</div><div class=\"line\">    &#125;</div><div class=\"line\">    </div><div class=\"line\">    .list-enter,</div><div class=\"line\">    .list-leave-active &#123;</div><div class=\"line\">        opacity: 0;</div><div class=\"line\">        transform: translateX(100px);</div><div class=\"line\">    &#125;</div><div class=\"line\">&lt;/style&gt;</div></pre></td></tr></table></figure></p>\n<h2 id=\"结束语\"><a href=\"#结束语\" class=\"headerlink\" title=\"结束语\"></a>结束语</h2><hr>\n<p>这里只是用到最简单的css过渡，但是vue的过渡效果以及过渡状态还是很牛逼的，大家有兴趣的可以去看看<a href=\"https://vuefe.cn/guide/transitions.html\" target=\"_blank\" rel=\"external\">官方文档</a>然后多尝试一下呢，酷酷的。<br><a href=\"https://github.com/godbasin/godbasin.github.io/tree/blog-codes/vue2-notes/5-transition-animation\" target=\"_blank\" rel=\"external\">此处查看项目代码</a><br><a href=\"http://ofyya1gfg.bkt.clouddn.com/5-transition-animation/index.html#/app/services\" target=\"_blank\" rel=\"external\">此处查看页面效果</a></p>\n","excerpt":"<p>最近在使用Vue2作为项目中前端的框架，《Vue2使用笔记》系列用于记录过程中的一些使用和解决方法。<br>本文记录vue中过渡效果，以及在路由切换以及下拉菜单中的使用过程。<br>","more":"</p>\n<h2 id=\"过渡效果\"><a href=\"#过渡效果\" class=\"headerlink\" title=\"过渡效果\"></a>过渡效果</h2><hr>\n<p>Vue 在插入、更新或者移除 DOM 时，提供多种不同方式的应用过渡效果。<br>包括以下工具：</p>\n<ul>\n<li>在CSS过渡和动画中自动应用class</li>\n<li>可以配合使用第三方CSS动画库，如Animate.css</li>\n<li>在过渡钩子函数中使用JavaScript直接操作DOM</li>\n<li>可以配合使用第三方JavaScript动画库，如Velocity.js</li>\n</ul>\n<h3 id=\"transition封装组件\"><a href=\"#transition封装组件\" class=\"headerlink\" title=\"transition封装组件\"></a>transition封装组件</h3><ul>\n<li><p>在下列情形中，可以给任何元素和组件添加entering/leaving过渡</p>\n<ul>\n<li>条件渲染（使用 v-if）</li>\n<li>条件展示（使用 v-show）</li>\n<li>动态组件</li>\n<li>组件根节点</li>\n</ul>\n</li>\n<li><p>元素封装成过渡组件之后，在遇到插入或删除时，Vue 将</p>\n<ul>\n<li>自动嗅探目标元素是否有CSS过渡或动画，并在合适时添加/删除CSS类名</li>\n<li>如果过渡组件设置了过渡的JavaScript钩子函数，会在相应的阶段调用钩子函数</li>\n<li>如果没有找到JavaScript钩子并且也没有检测到CSS过渡/动画，DOM操作（插入/删除）在下一帧中立即执行</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"过渡的-CSS-类名\"><a href=\"#过渡的-CSS-类名\" class=\"headerlink\" title=\"过渡的-CSS-类名\"></a>过渡的-CSS-类名</h3><p><img src=\"http://o905ne85q.bkt.clouddn.com/transition.png\" alt=\"image\"><br>有4个(CSS)类名在enter/leave的过渡中切换</p>\n<ul>\n<li>v-enter<ul>\n<li>定义进入过渡的开始状态</li>\n<li>在元素被插入时生效，在下一个帧移除</li>\n</ul>\n</li>\n<li>v-enter-active<ul>\n<li>定义进入过渡的结束状态</li>\n<li>在元素被插入时生效，在 transition/animation 完成之后移除</li>\n</ul>\n</li>\n<li>v-leave<ul>\n<li>定义离开过渡的开始状态</li>\n<li>在离开过渡被触发时生效，在下一个帧移除。</li>\n</ul>\n</li>\n<li><p>v-leave-active</p>\n<ul>\n<li>定义离开过渡的结束状态</li>\n<li>在离开过渡被触发时生效，在transition/animation完成之后移除</li>\n</ul>\n</li>\n<li><p>自定义过渡类名</p>\n<ul>\n<li>可以通过以下特性来自定义过渡类名：<ul>\n<li>enter-class</li>\n<li>enter-active-class</li>\n<li>leave-class</li>\n<li>leave-active-class</li>\n</ul>\n</li>\n<li>他们的优先级高于普通的类名，这对于Vue的过渡系统和其他第三方CSS动画库，如Animate.css结合使用十分有用</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"JavaScript-钩子\"><a href=\"#JavaScript-钩子\" class=\"headerlink\" title=\"JavaScript 钩子\"></a>JavaScript 钩子</h3><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">transition</span></div><div class=\"line\">  <span class=\"attr\">v-on:before-enter</span>=<span class=\"string\">\"beforeEnter\"</span></div><div class=\"line\">  <span class=\"attr\">v-on:enter</span>=<span class=\"string\">\"enter\"</span></div><div class=\"line\">  <span class=\"attr\">v-on:after-enter</span>=<span class=\"string\">\"afterEnter\"</span></div><div class=\"line\">  <span class=\"attr\">v-on:enter-cancelled</span>=<span class=\"string\">\"enterCancelled\"</span></div><div class=\"line\">  <span class=\"attr\">v-on:before-leave</span>=<span class=\"string\">\"beforeLeave\"</span></div><div class=\"line\">  <span class=\"attr\">v-on:leave</span>=<span class=\"string\">\"leave\"</span></div><div class=\"line\">  <span class=\"attr\">v-on:after-leave</span>=<span class=\"string\">\"afterLeave\"</span></div><div class=\"line\">  <span class=\"attr\">v-on:leave-cancelled</span>=<span class=\"string\">\"leaveCancelled\"</span></div><div class=\"line\">&gt;</span></div><div class=\"line\">  <span class=\"comment\">&lt;!-- ... --&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">transition</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>这些钩子函数可以结合CSS transitions/animations使用，也可以单独使用。</p>\n<p>当只用JavaScript过渡的时候，在enter和leave中，回调函数done是必须的。 否则，它们会被同步调用，过渡会立即完成。</p>\n<p>推荐对于仅使用JavaScript过渡的元素添加v-bind:css=”false”，Vue会跳过CSS的检测。这也可以避免过渡过程中CSS的影响。</p>\n<h3 id=\"多个元素的过渡\"><a href=\"#多个元素的过渡\" class=\"headerlink\" title=\"多个元素的过渡\"></a>多个元素的过渡</h3><ul>\n<li>使用<transition-group>组件<ul>\n<li>不同于<transition>，它会以一个真实元素呈现：默认为一个<span>。你也可以通过tag特性更换为其他元素</li>\n<li>元素一定需要指定唯一的key特性值</li>\n<li>还可以改变定位。要使用这个新功能只需了解新增的v-move特性，它会在元素的改变定位的过程中应用</li>\n</ul>\n</li>\n<li>通过data属性与JavaScript通信，就可以实现列表的渐进过渡</li>\n</ul>\n<h3 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h3><p>过渡可以通过Vue的组件系统实现复用。要创建一个可复用过渡组件，你需要做的就是将<transition>或者<transition-group>作为根组件，然后将任何子组件放置在其中就可以了。<br><a href=\"https://vuefe.cn/guide/transitions.html\">vue2过渡效果</a><br><a href=\"http://router.vuejs.org/zh-cn/advanced/transitions.html\">vue-router2过渡动效</a></p>\n<h2 id=\"添加过渡效果\"><a href=\"#添加过渡效果\" class=\"headerlink\" title=\"添加过渡效果\"></a>添加过渡效果</h2><hr>\n<p>下面我们将给路由切换以及Sidebar的下拉菜单加上过渡效果。</p>\n<h3 id=\"vue-router过渡动效\"><a href=\"#vue-router过渡动效\" class=\"headerlink\" title=\"vue-router过渡动效\"></a>vue-router过渡动效</h3><p>给路由添加动态效果，可以在<router-view></router-view>外面添加transition，也可以在路由里面组件外面加一层transition。</p>\n<ul>\n<li>在路由里层组件添加transition</li>\n</ul>\n<p>这里我们分别在App组件和Login组件最外层添加：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;template&gt;</div><div class=\"line\">  &lt;transition name=&quot;fade&quot;&gt;</div><div class=\"line\">    ...</div><div class=\"line\">  &lt;/transition&gt;</div><div class=\"line\">&lt;/template&gt;</div></pre></td></tr></table></figure></p>\n<p>然后我们添加fade的css过渡：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">.fade-enter-active,</div><div class=\"line\">.fade-leave-active &#123;</div><div class=\"line\">    transition: opacity .4s</div><div class=\"line\">&#125;</div><div class=\"line\">.fade-enter,</div><div class=\"line\">.fade-leave &#123;</div><div class=\"line\">    opacity: 0</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<ul>\n<li>在<router-view></router-view>外面添加transition</li>\n</ul>\n<p>这里我们在App组件内嵌路由外层添加transition:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;transition name=&quot;fade&quot;&gt;</div><div class=\"line\">  &lt;router-view&gt;&lt;/router-view&gt;</div><div class=\"line\">&lt;/transition&gt;</div></pre></td></tr></table></figure></p>\n<p>上面两种方法都可以实现路由切换时的过渡效果。</p>\n<h3 id=\"Sidebar下拉菜单过渡效果\"><a href=\"#Sidebar下拉菜单过渡效果\" class=\"headerlink\" title=\"Sidebar下拉菜单过渡效果\"></a>Sidebar下拉菜单过渡效果</h3><p>Sidebar组件中，下拉菜单过渡效果乍一看属于列表过渡。<br>但其实分析一下，我们便会发现它其实属于最简单的单个元素过渡。</p>\n<ul>\n<li>在下拉菜单外层<ul></ul>添加transition</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;transition name=<span class=\"string\">\"slide\"</span>&gt;</div><div class=\"line\">  <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">ul</span> <span class=\"attr\">class</span>=<span class=\"string\">\"nav child_menu slide\"</span> <span class=\"attr\">v-on:click.stop</span> <span class=\"attr\">v-show</span>=<span class=\"string\">\"menu.class\"</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">router-link</span> <span class=\"attr\">v-for</span>=<span class=\"string\">\"childMenu in menu.childMenus\"</span> <span class=\"attr\">v-bind:key</span>=<span class=\"string\">\"childMenu.text\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"slide-item\"</span> <span class=\"attr\">:to</span>=<span class=\"string\">\"childMenu.href\"</span> <span class=\"attr\">tag</span>=<span class=\"string\">\"li\"</span> <span class=\"attr\">active-class</span>=<span class=\"string\">\"current-page\"</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">a</span>&gt;</span>&#123;&#123; childMenu.text &#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">router-link</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">transition</span>&gt;</span></span></div></pre></td></tr></table></figure>\n<ul>\n<li>添加slide过渡样式<br>这里有个需要注意的地方，像height:auto和width:auto这种，是无法实现宽高的改变的，所以这里我们应该使用max-height和max-width来进行。</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">.slide &#123;</div><div class=\"line\">  transition: all .5s ease-in-out;</div><div class=\"line\">  overflow: hidden;</div><div class=\"line\">  max-height: 100px;</div><div class=\"line\">&#125;</div><div class=\"line\">.slide-enter,</div><div class=\"line\">.slide-leave-active &#123;</div><div class=\"line\">  max-height: 0;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"给Services组件简单添加列表过渡效果\"><a href=\"#给Services组件简单添加列表过渡效果\" class=\"headerlink\" title=\"给Services组件简单添加列表过渡效果\"></a>给Services组件简单添加列表过渡效果</h3><p>本骚年这里就不啰嗦啦，直接上代码：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;template&gt;</div><div class=\"line\">  &lt;div id=&quot;list-demo&quot; class=&quot;demo&quot;&gt;</div><div class=\"line\">    &lt;button v-on:click=&quot;add&quot;&gt;Add&lt;/button&gt;</div><div class=\"line\">    &lt;button v-on:click=&quot;remove&quot;&gt;Remove&lt;/button&gt;</div><div class=\"line\">    &lt;transition-group name=&quot;list&quot; tag=&quot;div&quot;&gt;</div><div class=\"line\">      &lt;p v-for=&quot;item in items&quot; v-bind:key=&quot;item&quot; class=&quot;list-item&quot;&gt;</div><div class=\"line\">                Service组件&#123;&#123; item &#125;&#125;</div><div class=\"line\">            &lt;/p&gt;</div><div class=\"line\">    &lt;/transition-group&gt;</div><div class=\"line\">  &lt;/div&gt;</div><div class=\"line\">&lt;/template&gt;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">&lt;script&gt;</div><div class=\"line\">    export default &#123;</div><div class=\"line\">        name: &apos;Sevices&apos;,</div><div class=\"line\">        data() &#123;</div><div class=\"line\">            return &#123;</div><div class=\"line\">                items: [1, 2, 3, 4, 5, 6, 7, 8, 9],</div><div class=\"line\">                nextNum: 10</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;,</div><div class=\"line\">        methods: &#123;</div><div class=\"line\">            // 生成items数组的随机索引</div><div class=\"line\">            randomIndex: function() &#123;</div><div class=\"line\">                return Math.floor(Math.random() * this.items.length)</div><div class=\"line\">            &#125;,</div><div class=\"line\">            // 随机添加一项</div><div class=\"line\">            add: function() &#123;</div><div class=\"line\">                this.items.splice(this.randomIndex(), 0, this.nextNum++)</div><div class=\"line\">            &#125;,</div><div class=\"line\">            // 随机移除一项</div><div class=\"line\">            remove: function() &#123;</div><div class=\"line\">                this.items.splice(this.randomIndex(), 1)</div><div class=\"line\">            &#125;,</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&lt;/script&gt;</div><div class=\"line\"></div><div class=\"line\">&lt;style&gt;</div><div class=\"line\">    .list-item &#123;</div><div class=\"line\">        margin-bottom: 10px;</div><div class=\"line\">    &#125;</div><div class=\"line\">    </div><div class=\"line\">    .list-enter-active,</div><div class=\"line\">    .list-leave-active &#123;</div><div class=\"line\">        transition: all 1s;</div><div class=\"line\">    &#125;</div><div class=\"line\">    </div><div class=\"line\">    .list-enter,</div><div class=\"line\">    .list-leave-active &#123;</div><div class=\"line\">        opacity: 0;</div><div class=\"line\">        transform: translateX(100px);</div><div class=\"line\">    &#125;</div><div class=\"line\">&lt;/style&gt;</div></pre></td></tr></table></figure></p>\n<h2 id=\"结束语\"><a href=\"#结束语\" class=\"headerlink\" title=\"结束语\"></a>结束语</h2><hr>\n<p>这里只是用到最简单的css过渡，但是vue的过渡效果以及过渡状态还是很牛逼的，大家有兴趣的可以去看看<a href=\"https://vuefe.cn/guide/transitions.html\">官方文档</a>然后多尝试一下呢，酷酷的。<br><a href=\"https://github.com/godbasin/godbasin.github.io/tree/blog-codes/vue2-notes/5-transition-animation\">此处查看项目代码</a><br><a href=\"http://ofyya1gfg.bkt.clouddn.com/5-transition-animation/index.html#/app/services\">此处查看页面效果</a></p>"},{"title":"Vue2使用笔记7--vue与datatables(一):浏览器渲染","date":"2016-12-09T16:03:12.000Z","_content":"最近在使用Vue2作为项目中前端的框架，《Vue2使用笔记》系列用于记录过程中的一些使用和解决方法。\n本文记录vue中调用datatables，使用已经完整的html初始化datatables的过程。\n<!--more-->\n\n## datatables\n---\n\n### 简单介绍\n[datatables](http://datatables.club/)Datatables是一款jquery表格插件。\n它是一个高度灵活的工具，可以将任何HTML表格添加高级的交互功能：\n- 分页，即时搜索和排序\n- 几乎支持任何数据源: DOM，javascript，Ajax和服务器处理\n- 支持不同主题DataTables, jQuery UI, Bootstrap, Foundation\n- 各式各样的扩展: Editor, TableTools, FixedColumns ……\n- 丰富多样的option和强大的API\n- 支持国际化\n- 超过2900+个单元测试\n\n在Gentelella模板中已经有了一些datatables相关的静态页面，我们可以之间拿来用上。\n\n### 引入相关文件 \n首先我们引入相关的一些资源文件（有点多？）。\n``` html\n<!-- Datatables styles -->\n<link href=\"./static/gentelella/lib/css/dataTables.bootstrap.min.css\" rel=\"stylesheet\">\n<link href=\"./static/gentelella/lib/css/buttons.bootstrap.min.css\" rel=\"stylesheet\">\n<link href=\"./static/gentelella/lib/css/fixedHeader.bootstrap.min.css\" rel=\"stylesheet\">\n<link href=\"./static/gentelella/lib/css/responsive.bootstrap.min.css\" rel=\"stylesheet\">\n<link href=\"./static/gentelella/lib/css/scroller.bootstrap.min.css\" rel=\"stylesheet\">\n\n<!-- Datatables -->\n<script src=\"./static/gentelella/lib/js/jquery.dataTables.min.js\"></script>\n<script src=\"./static/gentelella/lib/js/dataTables.bootstrap.min.js\"></script>\n<script src=\"./static/gentelella/lib/js/dataTables.buttons.min.js\"></script>\n<script src=\"./static/gentelella/lib/js/buttons.bootstrap.min.js\"></script>\n<script src=\"./static/gentelella/lib/js/buttons.flash.min.js\"></script>\n<script src=\"./static/gentelella/lib/js/buttons.html5.min.js\"></script>\n<script src=\"./static/gentelella/lib/js/buttons.print.min.js\"></script>\n<script src=\"./static/gentelella/lib/js/dataTables.fixedHeader.min.js\"></script>\n<script src=\"./static/gentelella/lib/js/dataTables.keyTable.min.js\"></script>\n<script src=\"./static/gentelella/lib/js/dataTables.responsive.min.js\"></script>\n<script src=\"./static/gentelella/lib/js/responsive.bootstrap.js\"></script>\n<script src=\"./static/gentelella/lib/js/dataTables.scroller.min.js\"></script>\n<script src=\"./static/gentelella/lib/js/jszip.min.js\"></script>\n<script src=\"./static/gentelella/lib/js/pdfmake.min.js\"></script>\n<script src=\"./static/gentelella/lib/js/vfs_fonts.js\"></script>\n```\n\n### 一些相关配置\ndatatables的使用很简单，一般直接调用`$(dom_selector).dataTable()`就可以初始化了。\n这里我们简单讲以下会使用到的几个配置；\n\n- destroy\n  - 销毁所有符合选择的table，并且用新的options重新创建表格\n  - 当我们需要重新获取数据后加载，可以使用这样的一个选项\n- language\n  - DataTables的语言配置\n  - 这里我们将其汉化，保存一个json文件然后通过url调用进行配置\n\n``` json\n{\n    \"sProcessing\": \"处理中...\",\n    \"sLengthMenu\": \"显示 _MENU_ 项结果\",\n    \"sZeroRecords\": \"没有匹配结果\",\n    \"sInfo\": \"显示第 _START_ 至 _END_ 项结果，共 _TOTAL_ 项\",\n    \"sInfoEmpty\": \"显示第 0 至 0 项结果，共 0 项\",\n    \"sInfoFiltered\": \"(由 _MAX_ 项结果过滤)\",\n    \"sInfoPostFix\": \"\",\n    \"sSearch\": \"搜索:\",\n    \"sUrl\": \"\",\n    \"sEmptyTable\": \"表中数据为空\",\n    \"sLoadingRecords\": \"载入中...\",\n    \"sInfoThousands\": \",\",\n    \"oPaginate\": {\n        \"sFirst\": \"首页\",\n        \"sPrevious\": \"上页\",\n        \"sNext\": \"下页\",\n        \"sLast\": \"末页\"\n    },\n    \"oAria\": {\n        \"sSortAscending\": \": 以升序排列此列\",\n        \"sSortDescending\": \": 以降序排列此列\"\n    }\n}\n```\n\n有个需要说明的地方就是，使用`$(dom_selector).DataTable()`则可以返回API，然后就可以使用相关的[API接口](http://datatables.club/reference/api/)啦。\n\n后面章节我们还会涉及服务器渲染的一些相关配置，这里暂时只介绍这么多啦，其他的请大家自行查询[配置选项文档](http://datatables.club/reference/option/)啦。\n\n## 使用datatables初始化列表\n---\n这里我们添加一个产品列表组件，来进行这次的展示。\n\n### 添加Products组件\n我们在components文件夹中添加Products.vue组件：\n``` vue\n<template>\n\t<!-- info page -->\n\t<div class=\"\">\n\t\t<div class=\"page-title\">\n\t\t\t<div class=\"title_left\">\n\t\t\t\t<h3>产品管理 <small>> 产品信息</small></h3>\n\t\t\t</div>\n\t\t</div>\n\t\t<div class=\"clearfix\"></div>\n\t\t<div class=\"row\">\n\t\t\t<div class=\"col-md-12\">\n\t\t\t\t<div class=\"x_panel\">\n\t\t\t\t\t<div class=\"x_title\">\n\t\t\t\t\t\t<h2>产品信息</h2>\n\t\t\t\t\t\t<ul class=\"nav navbar-right panel_toolbox\">\n\t\t\t\t\t\t\t<li v-on:click=\"getProducts\"><a class=\"collapse-link\"><i class=\"fa fa-refresh\"></i>刷新</a></li>\n\t\t\t\t\t\t</ul>\n\t\t\t\t\t\t<div class=\"clearfix\"></div>\n\t\t\t\t\t</div>\n\t\t\t\t\t\n\t\t\t\t\t<div class=\"x_content\">\n\n\t\t\t\t\t\t<p>产品信息列表</p>\n\n\t\t\t\t\t\t<!-- start project list -->\n\t\t\t\t\t\t<table id=\"products-datatable\" class=\"table table-striped table-bordered\">\n\t\t\t\t\t\t\t<thead>\n\t\t\t\t\t\t\t\t<tr>\n\t\t\t\t\t\t\t\t\t<th>产品ID</th>\n\t\t\t\t\t\t\t\t\t<th>服务ID</th>\n\t\t\t\t\t\t\t\t\t<th>是否激活</th>\n\t\t\t\t\t\t\t\t\t<th>显卡UUID</th>\n\t\t\t\t\t\t\t\t\t<th>状态</th>\n\t\t\t\t\t\t\t\t\t<th>启用时间</th>\n\t\t\t\t\t\t\t\t\t<th>到期时间</th>\n\t\t\t\t\t\t\t\t\t<th>注册时间</th>\n\t\t\t\t\t\t\t\t\t<th>激活时间</th>\n\t\t\t\t\t\t\t\t\t<th>选项参数</th>\n\t\t\t\t\t\t\t\t\t<th>#</th>\n\t\t\t\t\t\t\t\t</tr>\n\t\t\t\t\t\t\t</thead>\n\t\t\t\t\t\t\t<tbody>\n\t\t\t\t\t\t\t\t<tr v-for=\"product in products\">\n\t\t\t\t\t\t\t\t\t<td data-toggle=\"tooltip\" data-placement=\"bottom\" v-bind:title=\"product.productId\">{{ product.productId | maxlength(5, '...') }}</td>\n\t\t\t\t\t\t\t\t\t<td data-toggle=\"tooltip\" data-placement=\"bottom\" v-bind:title=\"product.terminalId\">{{ product.terminalId | maxlength(5, '...') }}</td>\n\t\t\t\t\t\t\t\t\t<td>{{ product.isActivate === 1 ? '是' : '否' }}</td>\n\t\t\t\t\t\t\t\t\t<td data-toggle=\"tooltip\" data-placement=\"bottom\" v-bind:title=\"product.uuid\">{{ product.uuid | maxlength(8, '...') }}</td>\n\t\t\t\t\t\t\t\t\t<td>{{ product.state === 1 ? '启用' : '未启用' }}</td>\n\t\t\t\t\t\t\t\t\t<td data-toggle=\"tooltip\" data-placement=\"bottom\" v-bind:title=\"product.activeDate\">{{ product.activeDate | maxlength(10) }}</td>\n\t\t\t\t\t\t\t\t\t<td data-toggle=\"tooltip\" data-placement=\"bottom\" v-bind:title=\"product.expiresDate\">{{ product.expiresDate | maxlength(10) }}</td>\n\t\t\t\t\t\t\t\t\t<td data-toggle=\"tooltip\" data-placement=\"bottom\" v-bind:title=\"product.registerDate\">{{ product.registerDate | maxlength(10) }}</td>\n\t\t\t\t\t\t\t\t\t<td data-toggle=\"tooltip\" data-placement=\"bottom\" v-bind:title=\"product.activateDate\">{{ product.activateDate | maxlength(10) }}</td>\n\t\t\t\t\t\t\t\t\t<td data-toggle=\"tooltip\" data-placement=\"bottom\" data-html=\"true\" v-bind:title=\"showJson(product.options)\">...</td>\n\t\t\t\t\t\t\t\t\t<td>\n\t\t\t\t\t\t\t\t\t\t<a href=\"#\" class=\"btn btn-info btn-xs\" v-show=\"product.isActivate === 0\"><i class=\"fa fa-pencil\"></i> 激活 </a>\n\t\t\t\t\t\t\t\t\t</td>\n\t\t\t\t\t\t\t\t</tr>\n\t\t\t\t\t\t\t</tbody>\n\t\t\t\t\t\t</table>\n\t\t\t\t\t\t<!-- end project list -->\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t</div>\n\t</div>\n\t<!-- /info -->\n</template>\n\n<script>\n    export default {\n        name: 'Products',\n        data() {\n            return {\n                products: [],\n            }\n        },\n        methods: {\n            showJson(json) {\n                return FormatJson(json);\n            },\n            getProducts() {\n                var that = this;\n                $.get(`/static/products.json`, repo => {\n                    that.$set(that, 'products', repo.list);\n                    setTimeout(() => {\n                        // 初始化datatables\n                        SetDataTable('#products-datatable');\n                        // 设置tooltip\n                        SetTooltip();\n                    });\n                });\n            }\n        },\n        mounted() {\n            // 获取产品数据\n            this.getProducts();\n        }\n    }\n</script>\n```\n\n### tooltip\n[提示工具(Tooltip)](http://jqueryui.com/tooltip/)插件根据需求生成内容和标记，默认情况下是把提示工具（tooltip）放在它们的触发元素后面。\n\n您可以有以下两种方式添加提示工具（tooltip）：\n- 通过 data 属性：如需添加一个提示工具（tooltip），只需向一个锚标签添加 data-toggle=\"tooltip\" 即可\n\n``` html\n<a href=\"#\" data-toggle=\"tooltip\" title=\"Example tooltip\">请悬停在我的上面</a>\n```\n\n- 通过JavaScript：通过JavaScript触发提示工具（tooltip）：\n\n``` js\n$('#identifier').tooltip(options)\n```\n\n### common.js\n``` js\n// dataTables初始化\nconst SetDataTable = (eleType, destroy) => {\n    $(eleType).dataTable({\n        destroy: destroy || true,\n        \"language\": {\n            \"url\": \"./static/datatable_zh_CN.json\"\n        }\n    });\n};\n\n// Tooltip初始化\nconst SetTooltip = () => {\n    var $tooltip = $('[data-toggle=\"tooltip\"]');\n    $tooltip.tooltip({\n        container: 'body',\n        trigger: 'hover click'\n    });\n};\n```\n\n### json展示\n这里我们需要将json数据展示为html，本骚年写过两个方法进行实现，大家可以参考之前的文章。\n传送门：\n- [《将json输出为html(一)：字符串正则匹配》]()\n- [《将json输出为html(二)：js数据类型判断实现》]()\n\n\n### 页面效果\n![image](http://o905ne85q.bkt.clouddn.com/4234.tmp.png)\n\n## 结束语\n-----\n这里我们使用了先使用vue自动加载相应数据生成html后（mounted），再调用dataTables来生成表格的方法。当然这种方法会有很大的限制，需要一次性加载所有数据，这在很多时候都是不实用的。后面我们会继续介绍dataTables的另外一种使用方法--服务端渲染。\n[此处查看项目代码](https://github.com/godbasin/godbasin.github.io/tree/blog-codes/vue2-notes/7-use-datatable-with-html)\n[此处查看页面效果](http://ofyya1gfg.bkt.clouddn.com/7-use-datatable-with-html/index.html#/app/products)","source":"_posts/vue2-notes-7-use-datatable-with-html.md","raw":"---\ntitle: Vue2使用笔记7--vue与datatables(一):浏览器渲染\ndate: 2016-12-10 00:03:12\ncategories: vue八宝粥\ntags: 笔记\n---\n最近在使用Vue2作为项目中前端的框架，《Vue2使用笔记》系列用于记录过程中的一些使用和解决方法。\n本文记录vue中调用datatables，使用已经完整的html初始化datatables的过程。\n<!--more-->\n\n## datatables\n---\n\n### 简单介绍\n[datatables](http://datatables.club/)Datatables是一款jquery表格插件。\n它是一个高度灵活的工具，可以将任何HTML表格添加高级的交互功能：\n- 分页，即时搜索和排序\n- 几乎支持任何数据源: DOM，javascript，Ajax和服务器处理\n- 支持不同主题DataTables, jQuery UI, Bootstrap, Foundation\n- 各式各样的扩展: Editor, TableTools, FixedColumns ……\n- 丰富多样的option和强大的API\n- 支持国际化\n- 超过2900+个单元测试\n\n在Gentelella模板中已经有了一些datatables相关的静态页面，我们可以之间拿来用上。\n\n### 引入相关文件 \n首先我们引入相关的一些资源文件（有点多？）。\n``` html\n<!-- Datatables styles -->\n<link href=\"./static/gentelella/lib/css/dataTables.bootstrap.min.css\" rel=\"stylesheet\">\n<link href=\"./static/gentelella/lib/css/buttons.bootstrap.min.css\" rel=\"stylesheet\">\n<link href=\"./static/gentelella/lib/css/fixedHeader.bootstrap.min.css\" rel=\"stylesheet\">\n<link href=\"./static/gentelella/lib/css/responsive.bootstrap.min.css\" rel=\"stylesheet\">\n<link href=\"./static/gentelella/lib/css/scroller.bootstrap.min.css\" rel=\"stylesheet\">\n\n<!-- Datatables -->\n<script src=\"./static/gentelella/lib/js/jquery.dataTables.min.js\"></script>\n<script src=\"./static/gentelella/lib/js/dataTables.bootstrap.min.js\"></script>\n<script src=\"./static/gentelella/lib/js/dataTables.buttons.min.js\"></script>\n<script src=\"./static/gentelella/lib/js/buttons.bootstrap.min.js\"></script>\n<script src=\"./static/gentelella/lib/js/buttons.flash.min.js\"></script>\n<script src=\"./static/gentelella/lib/js/buttons.html5.min.js\"></script>\n<script src=\"./static/gentelella/lib/js/buttons.print.min.js\"></script>\n<script src=\"./static/gentelella/lib/js/dataTables.fixedHeader.min.js\"></script>\n<script src=\"./static/gentelella/lib/js/dataTables.keyTable.min.js\"></script>\n<script src=\"./static/gentelella/lib/js/dataTables.responsive.min.js\"></script>\n<script src=\"./static/gentelella/lib/js/responsive.bootstrap.js\"></script>\n<script src=\"./static/gentelella/lib/js/dataTables.scroller.min.js\"></script>\n<script src=\"./static/gentelella/lib/js/jszip.min.js\"></script>\n<script src=\"./static/gentelella/lib/js/pdfmake.min.js\"></script>\n<script src=\"./static/gentelella/lib/js/vfs_fonts.js\"></script>\n```\n\n### 一些相关配置\ndatatables的使用很简单，一般直接调用`$(dom_selector).dataTable()`就可以初始化了。\n这里我们简单讲以下会使用到的几个配置；\n\n- destroy\n  - 销毁所有符合选择的table，并且用新的options重新创建表格\n  - 当我们需要重新获取数据后加载，可以使用这样的一个选项\n- language\n  - DataTables的语言配置\n  - 这里我们将其汉化，保存一个json文件然后通过url调用进行配置\n\n``` json\n{\n    \"sProcessing\": \"处理中...\",\n    \"sLengthMenu\": \"显示 _MENU_ 项结果\",\n    \"sZeroRecords\": \"没有匹配结果\",\n    \"sInfo\": \"显示第 _START_ 至 _END_ 项结果，共 _TOTAL_ 项\",\n    \"sInfoEmpty\": \"显示第 0 至 0 项结果，共 0 项\",\n    \"sInfoFiltered\": \"(由 _MAX_ 项结果过滤)\",\n    \"sInfoPostFix\": \"\",\n    \"sSearch\": \"搜索:\",\n    \"sUrl\": \"\",\n    \"sEmptyTable\": \"表中数据为空\",\n    \"sLoadingRecords\": \"载入中...\",\n    \"sInfoThousands\": \",\",\n    \"oPaginate\": {\n        \"sFirst\": \"首页\",\n        \"sPrevious\": \"上页\",\n        \"sNext\": \"下页\",\n        \"sLast\": \"末页\"\n    },\n    \"oAria\": {\n        \"sSortAscending\": \": 以升序排列此列\",\n        \"sSortDescending\": \": 以降序排列此列\"\n    }\n}\n```\n\n有个需要说明的地方就是，使用`$(dom_selector).DataTable()`则可以返回API，然后就可以使用相关的[API接口](http://datatables.club/reference/api/)啦。\n\n后面章节我们还会涉及服务器渲染的一些相关配置，这里暂时只介绍这么多啦，其他的请大家自行查询[配置选项文档](http://datatables.club/reference/option/)啦。\n\n## 使用datatables初始化列表\n---\n这里我们添加一个产品列表组件，来进行这次的展示。\n\n### 添加Products组件\n我们在components文件夹中添加Products.vue组件：\n``` vue\n<template>\n\t<!-- info page -->\n\t<div class=\"\">\n\t\t<div class=\"page-title\">\n\t\t\t<div class=\"title_left\">\n\t\t\t\t<h3>产品管理 <small>> 产品信息</small></h3>\n\t\t\t</div>\n\t\t</div>\n\t\t<div class=\"clearfix\"></div>\n\t\t<div class=\"row\">\n\t\t\t<div class=\"col-md-12\">\n\t\t\t\t<div class=\"x_panel\">\n\t\t\t\t\t<div class=\"x_title\">\n\t\t\t\t\t\t<h2>产品信息</h2>\n\t\t\t\t\t\t<ul class=\"nav navbar-right panel_toolbox\">\n\t\t\t\t\t\t\t<li v-on:click=\"getProducts\"><a class=\"collapse-link\"><i class=\"fa fa-refresh\"></i>刷新</a></li>\n\t\t\t\t\t\t</ul>\n\t\t\t\t\t\t<div class=\"clearfix\"></div>\n\t\t\t\t\t</div>\n\t\t\t\t\t\n\t\t\t\t\t<div class=\"x_content\">\n\n\t\t\t\t\t\t<p>产品信息列表</p>\n\n\t\t\t\t\t\t<!-- start project list -->\n\t\t\t\t\t\t<table id=\"products-datatable\" class=\"table table-striped table-bordered\">\n\t\t\t\t\t\t\t<thead>\n\t\t\t\t\t\t\t\t<tr>\n\t\t\t\t\t\t\t\t\t<th>产品ID</th>\n\t\t\t\t\t\t\t\t\t<th>服务ID</th>\n\t\t\t\t\t\t\t\t\t<th>是否激活</th>\n\t\t\t\t\t\t\t\t\t<th>显卡UUID</th>\n\t\t\t\t\t\t\t\t\t<th>状态</th>\n\t\t\t\t\t\t\t\t\t<th>启用时间</th>\n\t\t\t\t\t\t\t\t\t<th>到期时间</th>\n\t\t\t\t\t\t\t\t\t<th>注册时间</th>\n\t\t\t\t\t\t\t\t\t<th>激活时间</th>\n\t\t\t\t\t\t\t\t\t<th>选项参数</th>\n\t\t\t\t\t\t\t\t\t<th>#</th>\n\t\t\t\t\t\t\t\t</tr>\n\t\t\t\t\t\t\t</thead>\n\t\t\t\t\t\t\t<tbody>\n\t\t\t\t\t\t\t\t<tr v-for=\"product in products\">\n\t\t\t\t\t\t\t\t\t<td data-toggle=\"tooltip\" data-placement=\"bottom\" v-bind:title=\"product.productId\">{{ product.productId | maxlength(5, '...') }}</td>\n\t\t\t\t\t\t\t\t\t<td data-toggle=\"tooltip\" data-placement=\"bottom\" v-bind:title=\"product.terminalId\">{{ product.terminalId | maxlength(5, '...') }}</td>\n\t\t\t\t\t\t\t\t\t<td>{{ product.isActivate === 1 ? '是' : '否' }}</td>\n\t\t\t\t\t\t\t\t\t<td data-toggle=\"tooltip\" data-placement=\"bottom\" v-bind:title=\"product.uuid\">{{ product.uuid | maxlength(8, '...') }}</td>\n\t\t\t\t\t\t\t\t\t<td>{{ product.state === 1 ? '启用' : '未启用' }}</td>\n\t\t\t\t\t\t\t\t\t<td data-toggle=\"tooltip\" data-placement=\"bottom\" v-bind:title=\"product.activeDate\">{{ product.activeDate | maxlength(10) }}</td>\n\t\t\t\t\t\t\t\t\t<td data-toggle=\"tooltip\" data-placement=\"bottom\" v-bind:title=\"product.expiresDate\">{{ product.expiresDate | maxlength(10) }}</td>\n\t\t\t\t\t\t\t\t\t<td data-toggle=\"tooltip\" data-placement=\"bottom\" v-bind:title=\"product.registerDate\">{{ product.registerDate | maxlength(10) }}</td>\n\t\t\t\t\t\t\t\t\t<td data-toggle=\"tooltip\" data-placement=\"bottom\" v-bind:title=\"product.activateDate\">{{ product.activateDate | maxlength(10) }}</td>\n\t\t\t\t\t\t\t\t\t<td data-toggle=\"tooltip\" data-placement=\"bottom\" data-html=\"true\" v-bind:title=\"showJson(product.options)\">...</td>\n\t\t\t\t\t\t\t\t\t<td>\n\t\t\t\t\t\t\t\t\t\t<a href=\"#\" class=\"btn btn-info btn-xs\" v-show=\"product.isActivate === 0\"><i class=\"fa fa-pencil\"></i> 激活 </a>\n\t\t\t\t\t\t\t\t\t</td>\n\t\t\t\t\t\t\t\t</tr>\n\t\t\t\t\t\t\t</tbody>\n\t\t\t\t\t\t</table>\n\t\t\t\t\t\t<!-- end project list -->\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t</div>\n\t</div>\n\t<!-- /info -->\n</template>\n\n<script>\n    export default {\n        name: 'Products',\n        data() {\n            return {\n                products: [],\n            }\n        },\n        methods: {\n            showJson(json) {\n                return FormatJson(json);\n            },\n            getProducts() {\n                var that = this;\n                $.get(`/static/products.json`, repo => {\n                    that.$set(that, 'products', repo.list);\n                    setTimeout(() => {\n                        // 初始化datatables\n                        SetDataTable('#products-datatable');\n                        // 设置tooltip\n                        SetTooltip();\n                    });\n                });\n            }\n        },\n        mounted() {\n            // 获取产品数据\n            this.getProducts();\n        }\n    }\n</script>\n```\n\n### tooltip\n[提示工具(Tooltip)](http://jqueryui.com/tooltip/)插件根据需求生成内容和标记，默认情况下是把提示工具（tooltip）放在它们的触发元素后面。\n\n您可以有以下两种方式添加提示工具（tooltip）：\n- 通过 data 属性：如需添加一个提示工具（tooltip），只需向一个锚标签添加 data-toggle=\"tooltip\" 即可\n\n``` html\n<a href=\"#\" data-toggle=\"tooltip\" title=\"Example tooltip\">请悬停在我的上面</a>\n```\n\n- 通过JavaScript：通过JavaScript触发提示工具（tooltip）：\n\n``` js\n$('#identifier').tooltip(options)\n```\n\n### common.js\n``` js\n// dataTables初始化\nconst SetDataTable = (eleType, destroy) => {\n    $(eleType).dataTable({\n        destroy: destroy || true,\n        \"language\": {\n            \"url\": \"./static/datatable_zh_CN.json\"\n        }\n    });\n};\n\n// Tooltip初始化\nconst SetTooltip = () => {\n    var $tooltip = $('[data-toggle=\"tooltip\"]');\n    $tooltip.tooltip({\n        container: 'body',\n        trigger: 'hover click'\n    });\n};\n```\n\n### json展示\n这里我们需要将json数据展示为html，本骚年写过两个方法进行实现，大家可以参考之前的文章。\n传送门：\n- [《将json输出为html(一)：字符串正则匹配》]()\n- [《将json输出为html(二)：js数据类型判断实现》]()\n\n\n### 页面效果\n![image](http://o905ne85q.bkt.clouddn.com/4234.tmp.png)\n\n## 结束语\n-----\n这里我们使用了先使用vue自动加载相应数据生成html后（mounted），再调用dataTables来生成表格的方法。当然这种方法会有很大的限制，需要一次性加载所有数据，这在很多时候都是不实用的。后面我们会继续介绍dataTables的另外一种使用方法--服务端渲染。\n[此处查看项目代码](https://github.com/godbasin/godbasin.github.io/tree/blog-codes/vue2-notes/7-use-datatable-with-html)\n[此处查看页面效果](http://ofyya1gfg.bkt.clouddn.com/7-use-datatable-with-html/index.html#/app/products)","slug":"vue2-notes-7-use-datatable-with-html","published":1,"updated":"2016-12-09T16:01:36.369Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cix45huil005gxotu0lld8lp8","content":"<p>最近在使用Vue2作为项目中前端的框架，《Vue2使用笔记》系列用于记录过程中的一些使用和解决方法。<br>本文记录vue中调用datatables，使用已经完整的html初始化datatables的过程。<br><a id=\"more\"></a></p>\n<h2 id=\"datatables\"><a href=\"#datatables\" class=\"headerlink\" title=\"datatables\"></a>datatables</h2><hr>\n<h3 id=\"简单介绍\"><a href=\"#简单介绍\" class=\"headerlink\" title=\"简单介绍\"></a>简单介绍</h3><p><a href=\"http://datatables.club/\" target=\"_blank\" rel=\"external\">datatables</a>Datatables是一款jquery表格插件。<br>它是一个高度灵活的工具，可以将任何HTML表格添加高级的交互功能：</p>\n<ul>\n<li>分页，即时搜索和排序</li>\n<li>几乎支持任何数据源: DOM，javascript，Ajax和服务器处理</li>\n<li>支持不同主题DataTables, jQuery UI, Bootstrap, Foundation</li>\n<li>各式各样的扩展: Editor, TableTools, FixedColumns ……</li>\n<li>丰富多样的option和强大的API</li>\n<li>支持国际化</li>\n<li>超过2900+个单元测试</li>\n</ul>\n<p>在Gentelella模板中已经有了一些datatables相关的静态页面，我们可以之间拿来用上。</p>\n<h3 id=\"引入相关文件\"><a href=\"#引入相关文件\" class=\"headerlink\" title=\"引入相关文件\"></a>引入相关文件</h3><p>首先我们引入相关的一些资源文件（有点多？）。<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">&lt;!-- Datatables styles --&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">link</span> <span class=\"attr\">href</span>=<span class=\"string\">\"./static/gentelella/lib/css/dataTables.bootstrap.min.css\"</span> <span class=\"attr\">rel</span>=<span class=\"string\">\"stylesheet\"</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">link</span> <span class=\"attr\">href</span>=<span class=\"string\">\"./static/gentelella/lib/css/buttons.bootstrap.min.css\"</span> <span class=\"attr\">rel</span>=<span class=\"string\">\"stylesheet\"</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">link</span> <span class=\"attr\">href</span>=<span class=\"string\">\"./static/gentelella/lib/css/fixedHeader.bootstrap.min.css\"</span> <span class=\"attr\">rel</span>=<span class=\"string\">\"stylesheet\"</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">link</span> <span class=\"attr\">href</span>=<span class=\"string\">\"./static/gentelella/lib/css/responsive.bootstrap.min.css\"</span> <span class=\"attr\">rel</span>=<span class=\"string\">\"stylesheet\"</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">link</span> <span class=\"attr\">href</span>=<span class=\"string\">\"./static/gentelella/lib/css/scroller.bootstrap.min.css\"</span> <span class=\"attr\">rel</span>=<span class=\"string\">\"stylesheet\"</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">&lt;!-- Datatables --&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"./static/gentelella/lib/js/jquery.dataTables.min.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"./static/gentelella/lib/js/dataTables.bootstrap.min.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"./static/gentelella/lib/js/dataTables.buttons.min.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"./static/gentelella/lib/js/buttons.bootstrap.min.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"./static/gentelella/lib/js/buttons.flash.min.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"./static/gentelella/lib/js/buttons.html5.min.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"./static/gentelella/lib/js/buttons.print.min.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"./static/gentelella/lib/js/dataTables.fixedHeader.min.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"./static/gentelella/lib/js/dataTables.keyTable.min.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"./static/gentelella/lib/js/dataTables.responsive.min.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"./static/gentelella/lib/js/responsive.bootstrap.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"./static/gentelella/lib/js/dataTables.scroller.min.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"./static/gentelella/lib/js/jszip.min.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"./static/gentelella/lib/js/pdfmake.min.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"./static/gentelella/lib/js/vfs_fonts.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<h3 id=\"一些相关配置\"><a href=\"#一些相关配置\" class=\"headerlink\" title=\"一些相关配置\"></a>一些相关配置</h3><p>datatables的使用很简单，一般直接调用<code>$(dom_selector).dataTable()</code>就可以初始化了。<br>这里我们简单讲以下会使用到的几个配置；</p>\n<ul>\n<li>destroy<ul>\n<li>销毁所有符合选择的table，并且用新的options重新创建表格</li>\n<li>当我们需要重新获取数据后加载，可以使用这样的一个选项</li>\n</ul>\n</li>\n<li>language<ul>\n<li>DataTables的语言配置</li>\n<li>这里我们将其汉化，保存一个json文件然后通过url调用进行配置</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"attr\">\"sProcessing\"</span>: <span class=\"string\">\"处理中...\"</span>,</div><div class=\"line\">    <span class=\"attr\">\"sLengthMenu\"</span>: <span class=\"string\">\"显示 _MENU_ 项结果\"</span>,</div><div class=\"line\">    <span class=\"attr\">\"sZeroRecords\"</span>: <span class=\"string\">\"没有匹配结果\"</span>,</div><div class=\"line\">    <span class=\"attr\">\"sInfo\"</span>: <span class=\"string\">\"显示第 _START_ 至 _END_ 项结果，共 _TOTAL_ 项\"</span>,</div><div class=\"line\">    <span class=\"attr\">\"sInfoEmpty\"</span>: <span class=\"string\">\"显示第 0 至 0 项结果，共 0 项\"</span>,</div><div class=\"line\">    <span class=\"attr\">\"sInfoFiltered\"</span>: <span class=\"string\">\"(由 _MAX_ 项结果过滤)\"</span>,</div><div class=\"line\">    <span class=\"attr\">\"sInfoPostFix\"</span>: <span class=\"string\">\"\"</span>,</div><div class=\"line\">    <span class=\"attr\">\"sSearch\"</span>: <span class=\"string\">\"搜索:\"</span>,</div><div class=\"line\">    <span class=\"attr\">\"sUrl\"</span>: <span class=\"string\">\"\"</span>,</div><div class=\"line\">    <span class=\"attr\">\"sEmptyTable\"</span>: <span class=\"string\">\"表中数据为空\"</span>,</div><div class=\"line\">    <span class=\"attr\">\"sLoadingRecords\"</span>: <span class=\"string\">\"载入中...\"</span>,</div><div class=\"line\">    <span class=\"attr\">\"sInfoThousands\"</span>: <span class=\"string\">\",\"</span>,</div><div class=\"line\">    <span class=\"attr\">\"oPaginate\"</span>: &#123;</div><div class=\"line\">        <span class=\"attr\">\"sFirst\"</span>: <span class=\"string\">\"首页\"</span>,</div><div class=\"line\">        <span class=\"attr\">\"sPrevious\"</span>: <span class=\"string\">\"上页\"</span>,</div><div class=\"line\">        <span class=\"attr\">\"sNext\"</span>: <span class=\"string\">\"下页\"</span>,</div><div class=\"line\">        <span class=\"attr\">\"sLast\"</span>: <span class=\"string\">\"末页\"</span></div><div class=\"line\">    &#125;,</div><div class=\"line\">    <span class=\"attr\">\"oAria\"</span>: &#123;</div><div class=\"line\">        <span class=\"attr\">\"sSortAscending\"</span>: <span class=\"string\">\": 以升序排列此列\"</span>,</div><div class=\"line\">        <span class=\"attr\">\"sSortDescending\"</span>: <span class=\"string\">\": 以降序排列此列\"</span></div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>有个需要说明的地方就是，使用<code>$(dom_selector).DataTable()</code>则可以返回API，然后就可以使用相关的<a href=\"http://datatables.club/reference/api/\" target=\"_blank\" rel=\"external\">API接口</a>啦。</p>\n<p>后面章节我们还会涉及服务器渲染的一些相关配置，这里暂时只介绍这么多啦，其他的请大家自行查询<a href=\"http://datatables.club/reference/option/\" target=\"_blank\" rel=\"external\">配置选项文档</a>啦。</p>\n<h2 id=\"使用datatables初始化列表\"><a href=\"#使用datatables初始化列表\" class=\"headerlink\" title=\"使用datatables初始化列表\"></a>使用datatables初始化列表</h2><hr>\n<p>这里我们添加一个产品列表组件，来进行这次的展示。</p>\n<h3 id=\"添加Products组件\"><a href=\"#添加Products组件\" class=\"headerlink\" title=\"添加Products组件\"></a>添加Products组件</h3><p>我们在components文件夹中添加Products.vue组件：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;template&gt;</div><div class=\"line\">  &lt;!-- info page --&gt;</div><div class=\"line\">  &lt;div class=&quot;&quot;&gt;</div><div class=\"line\">    &lt;div class=&quot;page-title&quot;&gt;</div><div class=\"line\">      &lt;div class=&quot;title_left&quot;&gt;</div><div class=\"line\">        &lt;h3&gt;产品管理 &lt;small&gt;&gt; 产品信息&lt;/small&gt;&lt;/h3&gt;</div><div class=\"line\">      &lt;/div&gt;</div><div class=\"line\">    &lt;/div&gt;</div><div class=\"line\">    &lt;div class=&quot;clearfix&quot;&gt;&lt;/div&gt;</div><div class=\"line\">    &lt;div class=&quot;row&quot;&gt;</div><div class=\"line\">      &lt;div class=&quot;col-md-12&quot;&gt;</div><div class=\"line\">        &lt;div class=&quot;x_panel&quot;&gt;</div><div class=\"line\">          &lt;div class=&quot;x_title&quot;&gt;</div><div class=\"line\">            &lt;h2&gt;产品信息&lt;/h2&gt;</div><div class=\"line\">            &lt;ul class=&quot;nav navbar-right panel_toolbox&quot;&gt;</div><div class=\"line\">              &lt;li v-on:click=&quot;getProducts&quot;&gt;&lt;a class=&quot;collapse-link&quot;&gt;&lt;i class=&quot;fa fa-refresh&quot;&gt;&lt;/i&gt;刷新&lt;/a&gt;&lt;/li&gt;</div><div class=\"line\">            &lt;/ul&gt;</div><div class=\"line\">            &lt;div class=&quot;clearfix&quot;&gt;&lt;/div&gt;</div><div class=\"line\">          &lt;/div&gt;</div><div class=\"line\">          </div><div class=\"line\">          &lt;div class=&quot;x_content&quot;&gt;</div><div class=\"line\"></div><div class=\"line\">            &lt;p&gt;产品信息列表&lt;/p&gt;</div><div class=\"line\"></div><div class=\"line\">            &lt;!-- start project list --&gt;</div><div class=\"line\">            &lt;table id=&quot;products-datatable&quot; class=&quot;table table-striped table-bordered&quot;&gt;</div><div class=\"line\">              &lt;thead&gt;</div><div class=\"line\">                &lt;tr&gt;</div><div class=\"line\">                  &lt;th&gt;产品ID&lt;/th&gt;</div><div class=\"line\">                  &lt;th&gt;服务ID&lt;/th&gt;</div><div class=\"line\">                  &lt;th&gt;是否激活&lt;/th&gt;</div><div class=\"line\">                  &lt;th&gt;显卡UUID&lt;/th&gt;</div><div class=\"line\">                  &lt;th&gt;状态&lt;/th&gt;</div><div class=\"line\">                  &lt;th&gt;启用时间&lt;/th&gt;</div><div class=\"line\">                  &lt;th&gt;到期时间&lt;/th&gt;</div><div class=\"line\">                  &lt;th&gt;注册时间&lt;/th&gt;</div><div class=\"line\">                  &lt;th&gt;激活时间&lt;/th&gt;</div><div class=\"line\">                  &lt;th&gt;选项参数&lt;/th&gt;</div><div class=\"line\">                  &lt;th&gt;#&lt;/th&gt;</div><div class=\"line\">                &lt;/tr&gt;</div><div class=\"line\">              &lt;/thead&gt;</div><div class=\"line\">              &lt;tbody&gt;</div><div class=\"line\">                &lt;tr v-for=&quot;product in products&quot;&gt;</div><div class=\"line\">                  &lt;td data-toggle=&quot;tooltip&quot; data-placement=&quot;bottom&quot; v-bind:title=&quot;product.productId&quot;&gt;&#123;&#123; product.productId | maxlength(5, &apos;...&apos;) &#125;&#125;&lt;/td&gt;</div><div class=\"line\">                  &lt;td data-toggle=&quot;tooltip&quot; data-placement=&quot;bottom&quot; v-bind:title=&quot;product.terminalId&quot;&gt;&#123;&#123; product.terminalId | maxlength(5, &apos;...&apos;) &#125;&#125;&lt;/td&gt;</div><div class=\"line\">                  &lt;td&gt;&#123;&#123; product.isActivate === 1 ? &apos;是&apos; : &apos;否&apos; &#125;&#125;&lt;/td&gt;</div><div class=\"line\">                  &lt;td data-toggle=&quot;tooltip&quot; data-placement=&quot;bottom&quot; v-bind:title=&quot;product.uuid&quot;&gt;&#123;&#123; product.uuid | maxlength(8, &apos;...&apos;) &#125;&#125;&lt;/td&gt;</div><div class=\"line\">                  &lt;td&gt;&#123;&#123; product.state === 1 ? &apos;启用&apos; : &apos;未启用&apos; &#125;&#125;&lt;/td&gt;</div><div class=\"line\">                  &lt;td data-toggle=&quot;tooltip&quot; data-placement=&quot;bottom&quot; v-bind:title=&quot;product.activeDate&quot;&gt;&#123;&#123; product.activeDate | maxlength(10) &#125;&#125;&lt;/td&gt;</div><div class=\"line\">                  &lt;td data-toggle=&quot;tooltip&quot; data-placement=&quot;bottom&quot; v-bind:title=&quot;product.expiresDate&quot;&gt;&#123;&#123; product.expiresDate | maxlength(10) &#125;&#125;&lt;/td&gt;</div><div class=\"line\">                  &lt;td data-toggle=&quot;tooltip&quot; data-placement=&quot;bottom&quot; v-bind:title=&quot;product.registerDate&quot;&gt;&#123;&#123; product.registerDate | maxlength(10) &#125;&#125;&lt;/td&gt;</div><div class=\"line\">                  &lt;td data-toggle=&quot;tooltip&quot; data-placement=&quot;bottom&quot; v-bind:title=&quot;product.activateDate&quot;&gt;&#123;&#123; product.activateDate | maxlength(10) &#125;&#125;&lt;/td&gt;</div><div class=\"line\">                  &lt;td data-toggle=&quot;tooltip&quot; data-placement=&quot;bottom&quot; data-html=&quot;true&quot; v-bind:title=&quot;showJson(product.options)&quot;&gt;...&lt;/td&gt;</div><div class=\"line\">                  &lt;td&gt;</div><div class=\"line\">                    &lt;a href=&quot;#&quot; class=&quot;btn btn-info btn-xs&quot; v-show=&quot;product.isActivate === 0&quot;&gt;&lt;i class=&quot;fa fa-pencil&quot;&gt;&lt;/i&gt; 激活 &lt;/a&gt;</div><div class=\"line\">                  &lt;/td&gt;</div><div class=\"line\">                &lt;/tr&gt;</div><div class=\"line\">              &lt;/tbody&gt;</div><div class=\"line\">            &lt;/table&gt;</div><div class=\"line\">            &lt;!-- end project list --&gt;</div><div class=\"line\">          &lt;/div&gt;</div><div class=\"line\">        &lt;/div&gt;</div><div class=\"line\">      &lt;/div&gt;</div><div class=\"line\">    &lt;/div&gt;</div><div class=\"line\">  &lt;/div&gt;</div><div class=\"line\">  &lt;!-- /info --&gt;</div><div class=\"line\">&lt;/template&gt;</div><div class=\"line\"></div><div class=\"line\">&lt;script&gt;</div><div class=\"line\">    export default &#123;</div><div class=\"line\">        name: &apos;Products&apos;,</div><div class=\"line\">        data() &#123;</div><div class=\"line\">            return &#123;</div><div class=\"line\">                products: [],</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;,</div><div class=\"line\">        methods: &#123;</div><div class=\"line\">            showJson(json) &#123;</div><div class=\"line\">                return FormatJson(json);</div><div class=\"line\">            &#125;,</div><div class=\"line\">            getProducts() &#123;</div><div class=\"line\">                var that = this;</div><div class=\"line\">                $.get(`/static/products.json`, repo =&gt; &#123;</div><div class=\"line\">                    that.$set(that, &apos;products&apos;, repo.list);</div><div class=\"line\">                    setTimeout(() =&gt; &#123;</div><div class=\"line\">                        // 初始化datatables</div><div class=\"line\">                        SetDataTable(&apos;#products-datatable&apos;);</div><div class=\"line\">                        // 设置tooltip</div><div class=\"line\">                        SetTooltip();</div><div class=\"line\">                    &#125;);</div><div class=\"line\">                &#125;);</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;,</div><div class=\"line\">        mounted() &#123;</div><div class=\"line\">            // 获取产品数据</div><div class=\"line\">            this.getProducts();</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&lt;/script&gt;</div></pre></td></tr></table></figure></p>\n<h3 id=\"tooltip\"><a href=\"#tooltip\" class=\"headerlink\" title=\"tooltip\"></a>tooltip</h3><p><a href=\"http://jqueryui.com/tooltip/\" target=\"_blank\" rel=\"external\">提示工具(Tooltip)</a>插件根据需求生成内容和标记，默认情况下是把提示工具（tooltip）放在它们的触发元素后面。</p>\n<p>您可以有以下两种方式添加提示工具（tooltip）：</p>\n<ul>\n<li>通过 data 属性：如需添加一个提示工具（tooltip），只需向一个锚标签添加 data-toggle=”tooltip” 即可</li>\n</ul>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"#\"</span> <span class=\"attr\">data-toggle</span>=<span class=\"string\">\"tooltip\"</span> <span class=\"attr\">title</span>=<span class=\"string\">\"Example tooltip\"</span>&gt;</span>请悬停在我的上面<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></div></pre></td></tr></table></figure>\n<ul>\n<li>通过JavaScript：通过JavaScript触发提示工具（tooltip）：</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$(<span class=\"string\">'#identifier'</span>).tooltip(options)</div></pre></td></tr></table></figure>\n<h3 id=\"common-js\"><a href=\"#common-js\" class=\"headerlink\" title=\"common.js\"></a>common.js</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// dataTables初始化</span></div><div class=\"line\"><span class=\"keyword\">const</span> SetDataTable = <span class=\"function\">(<span class=\"params\">eleType, destroy</span>) =&gt;</span> &#123;</div><div class=\"line\">    $(eleType).dataTable(&#123;</div><div class=\"line\">        <span class=\"attr\">destroy</span>: destroy || <span class=\"literal\">true</span>,</div><div class=\"line\">        <span class=\"string\">\"language\"</span>: &#123;</div><div class=\"line\">            <span class=\"string\">\"url\"</span>: <span class=\"string\">\"./static/datatable_zh_CN.json\"</span></div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;);</div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// Tooltip初始化</span></div><div class=\"line\"><span class=\"keyword\">const</span> SetTooltip = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> $tooltip = $(<span class=\"string\">'[data-toggle=\"tooltip\"]'</span>);</div><div class=\"line\">    $tooltip.tooltip(&#123;</div><div class=\"line\">        <span class=\"attr\">container</span>: <span class=\"string\">'body'</span>,</div><div class=\"line\">        <span class=\"attr\">trigger</span>: <span class=\"string\">'hover click'</span></div><div class=\"line\">    &#125;);</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<h3 id=\"json展示\"><a href=\"#json展示\" class=\"headerlink\" title=\"json展示\"></a>json展示</h3><p>这里我们需要将json数据展示为html，本骚年写过两个方法进行实现，大家可以参考之前的文章。<br>传送门：</p>\n<ul>\n<li><a href=\"\">《将json输出为html(一)：字符串正则匹配》</a></li>\n<li><a href=\"\">《将json输出为html(二)：js数据类型判断实现》</a></li>\n</ul>\n<h3 id=\"页面效果\"><a href=\"#页面效果\" class=\"headerlink\" title=\"页面效果\"></a>页面效果</h3><p><img src=\"http://o905ne85q.bkt.clouddn.com/4234.tmp.png\" alt=\"image\"></p>\n<h2 id=\"结束语\"><a href=\"#结束语\" class=\"headerlink\" title=\"结束语\"></a>结束语</h2><hr>\n<p>这里我们使用了先使用vue自动加载相应数据生成html后（mounted），再调用dataTables来生成表格的方法。当然这种方法会有很大的限制，需要一次性加载所有数据，这在很多时候都是不实用的。后面我们会继续介绍dataTables的另外一种使用方法–服务端渲染。<br><a href=\"https://github.com/godbasin/godbasin.github.io/tree/blog-codes/vue2-notes/7-use-datatable-with-html\" target=\"_blank\" rel=\"external\">此处查看项目代码</a><br><a href=\"http://ofyya1gfg.bkt.clouddn.com/7-use-datatable-with-html/index.html#/app/products\" target=\"_blank\" rel=\"external\">此处查看页面效果</a></p>\n","excerpt":"<p>最近在使用Vue2作为项目中前端的框架，《Vue2使用笔记》系列用于记录过程中的一些使用和解决方法。<br>本文记录vue中调用datatables，使用已经完整的html初始化datatables的过程。<br>","more":"</p>\n<h2 id=\"datatables\"><a href=\"#datatables\" class=\"headerlink\" title=\"datatables\"></a>datatables</h2><hr>\n<h3 id=\"简单介绍\"><a href=\"#简单介绍\" class=\"headerlink\" title=\"简单介绍\"></a>简单介绍</h3><p><a href=\"http://datatables.club/\">datatables</a>Datatables是一款jquery表格插件。<br>它是一个高度灵活的工具，可以将任何HTML表格添加高级的交互功能：</p>\n<ul>\n<li>分页，即时搜索和排序</li>\n<li>几乎支持任何数据源: DOM，javascript，Ajax和服务器处理</li>\n<li>支持不同主题DataTables, jQuery UI, Bootstrap, Foundation</li>\n<li>各式各样的扩展: Editor, TableTools, FixedColumns ……</li>\n<li>丰富多样的option和强大的API</li>\n<li>支持国际化</li>\n<li>超过2900+个单元测试</li>\n</ul>\n<p>在Gentelella模板中已经有了一些datatables相关的静态页面，我们可以之间拿来用上。</p>\n<h3 id=\"引入相关文件\"><a href=\"#引入相关文件\" class=\"headerlink\" title=\"引入相关文件\"></a>引入相关文件</h3><p>首先我们引入相关的一些资源文件（有点多？）。<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">&lt;!-- Datatables styles --&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">link</span> <span class=\"attr\">href</span>=<span class=\"string\">\"./static/gentelella/lib/css/dataTables.bootstrap.min.css\"</span> <span class=\"attr\">rel</span>=<span class=\"string\">\"stylesheet\"</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">link</span> <span class=\"attr\">href</span>=<span class=\"string\">\"./static/gentelella/lib/css/buttons.bootstrap.min.css\"</span> <span class=\"attr\">rel</span>=<span class=\"string\">\"stylesheet\"</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">link</span> <span class=\"attr\">href</span>=<span class=\"string\">\"./static/gentelella/lib/css/fixedHeader.bootstrap.min.css\"</span> <span class=\"attr\">rel</span>=<span class=\"string\">\"stylesheet\"</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">link</span> <span class=\"attr\">href</span>=<span class=\"string\">\"./static/gentelella/lib/css/responsive.bootstrap.min.css\"</span> <span class=\"attr\">rel</span>=<span class=\"string\">\"stylesheet\"</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">link</span> <span class=\"attr\">href</span>=<span class=\"string\">\"./static/gentelella/lib/css/scroller.bootstrap.min.css\"</span> <span class=\"attr\">rel</span>=<span class=\"string\">\"stylesheet\"</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">&lt;!-- Datatables --&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"./static/gentelella/lib/js/jquery.dataTables.min.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"./static/gentelella/lib/js/dataTables.bootstrap.min.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"./static/gentelella/lib/js/dataTables.buttons.min.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"./static/gentelella/lib/js/buttons.bootstrap.min.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"./static/gentelella/lib/js/buttons.flash.min.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"./static/gentelella/lib/js/buttons.html5.min.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"./static/gentelella/lib/js/buttons.print.min.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"./static/gentelella/lib/js/dataTables.fixedHeader.min.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"./static/gentelella/lib/js/dataTables.keyTable.min.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"./static/gentelella/lib/js/dataTables.responsive.min.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"./static/gentelella/lib/js/responsive.bootstrap.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"./static/gentelella/lib/js/dataTables.scroller.min.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"./static/gentelella/lib/js/jszip.min.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"./static/gentelella/lib/js/pdfmake.min.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"./static/gentelella/lib/js/vfs_fonts.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<h3 id=\"一些相关配置\"><a href=\"#一些相关配置\" class=\"headerlink\" title=\"一些相关配置\"></a>一些相关配置</h3><p>datatables的使用很简单，一般直接调用<code>$(dom_selector).dataTable()</code>就可以初始化了。<br>这里我们简单讲以下会使用到的几个配置；</p>\n<ul>\n<li>destroy<ul>\n<li>销毁所有符合选择的table，并且用新的options重新创建表格</li>\n<li>当我们需要重新获取数据后加载，可以使用这样的一个选项</li>\n</ul>\n</li>\n<li>language<ul>\n<li>DataTables的语言配置</li>\n<li>这里我们将其汉化，保存一个json文件然后通过url调用进行配置</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"attr\">\"sProcessing\"</span>: <span class=\"string\">\"处理中...\"</span>,</div><div class=\"line\">    <span class=\"attr\">\"sLengthMenu\"</span>: <span class=\"string\">\"显示 _MENU_ 项结果\"</span>,</div><div class=\"line\">    <span class=\"attr\">\"sZeroRecords\"</span>: <span class=\"string\">\"没有匹配结果\"</span>,</div><div class=\"line\">    <span class=\"attr\">\"sInfo\"</span>: <span class=\"string\">\"显示第 _START_ 至 _END_ 项结果，共 _TOTAL_ 项\"</span>,</div><div class=\"line\">    <span class=\"attr\">\"sInfoEmpty\"</span>: <span class=\"string\">\"显示第 0 至 0 项结果，共 0 项\"</span>,</div><div class=\"line\">    <span class=\"attr\">\"sInfoFiltered\"</span>: <span class=\"string\">\"(由 _MAX_ 项结果过滤)\"</span>,</div><div class=\"line\">    <span class=\"attr\">\"sInfoPostFix\"</span>: <span class=\"string\">\"\"</span>,</div><div class=\"line\">    <span class=\"attr\">\"sSearch\"</span>: <span class=\"string\">\"搜索:\"</span>,</div><div class=\"line\">    <span class=\"attr\">\"sUrl\"</span>: <span class=\"string\">\"\"</span>,</div><div class=\"line\">    <span class=\"attr\">\"sEmptyTable\"</span>: <span class=\"string\">\"表中数据为空\"</span>,</div><div class=\"line\">    <span class=\"attr\">\"sLoadingRecords\"</span>: <span class=\"string\">\"载入中...\"</span>,</div><div class=\"line\">    <span class=\"attr\">\"sInfoThousands\"</span>: <span class=\"string\">\",\"</span>,</div><div class=\"line\">    <span class=\"attr\">\"oPaginate\"</span>: &#123;</div><div class=\"line\">        <span class=\"attr\">\"sFirst\"</span>: <span class=\"string\">\"首页\"</span>,</div><div class=\"line\">        <span class=\"attr\">\"sPrevious\"</span>: <span class=\"string\">\"上页\"</span>,</div><div class=\"line\">        <span class=\"attr\">\"sNext\"</span>: <span class=\"string\">\"下页\"</span>,</div><div class=\"line\">        <span class=\"attr\">\"sLast\"</span>: <span class=\"string\">\"末页\"</span></div><div class=\"line\">    &#125;,</div><div class=\"line\">    <span class=\"attr\">\"oAria\"</span>: &#123;</div><div class=\"line\">        <span class=\"attr\">\"sSortAscending\"</span>: <span class=\"string\">\": 以升序排列此列\"</span>,</div><div class=\"line\">        <span class=\"attr\">\"sSortDescending\"</span>: <span class=\"string\">\": 以降序排列此列\"</span></div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>有个需要说明的地方就是，使用<code>$(dom_selector).DataTable()</code>则可以返回API，然后就可以使用相关的<a href=\"http://datatables.club/reference/api/\">API接口</a>啦。</p>\n<p>后面章节我们还会涉及服务器渲染的一些相关配置，这里暂时只介绍这么多啦，其他的请大家自行查询<a href=\"http://datatables.club/reference/option/\">配置选项文档</a>啦。</p>\n<h2 id=\"使用datatables初始化列表\"><a href=\"#使用datatables初始化列表\" class=\"headerlink\" title=\"使用datatables初始化列表\"></a>使用datatables初始化列表</h2><hr>\n<p>这里我们添加一个产品列表组件，来进行这次的展示。</p>\n<h3 id=\"添加Products组件\"><a href=\"#添加Products组件\" class=\"headerlink\" title=\"添加Products组件\"></a>添加Products组件</h3><p>我们在components文件夹中添加Products.vue组件：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;template&gt;</div><div class=\"line\">  &lt;!-- info page --&gt;</div><div class=\"line\">  &lt;div class=&quot;&quot;&gt;</div><div class=\"line\">    &lt;div class=&quot;page-title&quot;&gt;</div><div class=\"line\">      &lt;div class=&quot;title_left&quot;&gt;</div><div class=\"line\">        &lt;h3&gt;产品管理 &lt;small&gt;&gt; 产品信息&lt;/small&gt;&lt;/h3&gt;</div><div class=\"line\">      &lt;/div&gt;</div><div class=\"line\">    &lt;/div&gt;</div><div class=\"line\">    &lt;div class=&quot;clearfix&quot;&gt;&lt;/div&gt;</div><div class=\"line\">    &lt;div class=&quot;row&quot;&gt;</div><div class=\"line\">      &lt;div class=&quot;col-md-12&quot;&gt;</div><div class=\"line\">        &lt;div class=&quot;x_panel&quot;&gt;</div><div class=\"line\">          &lt;div class=&quot;x_title&quot;&gt;</div><div class=\"line\">            &lt;h2&gt;产品信息&lt;/h2&gt;</div><div class=\"line\">            &lt;ul class=&quot;nav navbar-right panel_toolbox&quot;&gt;</div><div class=\"line\">              &lt;li v-on:click=&quot;getProducts&quot;&gt;&lt;a class=&quot;collapse-link&quot;&gt;&lt;i class=&quot;fa fa-refresh&quot;&gt;&lt;/i&gt;刷新&lt;/a&gt;&lt;/li&gt;</div><div class=\"line\">            &lt;/ul&gt;</div><div class=\"line\">            &lt;div class=&quot;clearfix&quot;&gt;&lt;/div&gt;</div><div class=\"line\">          &lt;/div&gt;</div><div class=\"line\">          </div><div class=\"line\">          &lt;div class=&quot;x_content&quot;&gt;</div><div class=\"line\"></div><div class=\"line\">            &lt;p&gt;产品信息列表&lt;/p&gt;</div><div class=\"line\"></div><div class=\"line\">            &lt;!-- start project list --&gt;</div><div class=\"line\">            &lt;table id=&quot;products-datatable&quot; class=&quot;table table-striped table-bordered&quot;&gt;</div><div class=\"line\">              &lt;thead&gt;</div><div class=\"line\">                &lt;tr&gt;</div><div class=\"line\">                  &lt;th&gt;产品ID&lt;/th&gt;</div><div class=\"line\">                  &lt;th&gt;服务ID&lt;/th&gt;</div><div class=\"line\">                  &lt;th&gt;是否激活&lt;/th&gt;</div><div class=\"line\">                  &lt;th&gt;显卡UUID&lt;/th&gt;</div><div class=\"line\">                  &lt;th&gt;状态&lt;/th&gt;</div><div class=\"line\">                  &lt;th&gt;启用时间&lt;/th&gt;</div><div class=\"line\">                  &lt;th&gt;到期时间&lt;/th&gt;</div><div class=\"line\">                  &lt;th&gt;注册时间&lt;/th&gt;</div><div class=\"line\">                  &lt;th&gt;激活时间&lt;/th&gt;</div><div class=\"line\">                  &lt;th&gt;选项参数&lt;/th&gt;</div><div class=\"line\">                  &lt;th&gt;#&lt;/th&gt;</div><div class=\"line\">                &lt;/tr&gt;</div><div class=\"line\">              &lt;/thead&gt;</div><div class=\"line\">              &lt;tbody&gt;</div><div class=\"line\">                &lt;tr v-for=&quot;product in products&quot;&gt;</div><div class=\"line\">                  &lt;td data-toggle=&quot;tooltip&quot; data-placement=&quot;bottom&quot; v-bind:title=&quot;product.productId&quot;&gt;&#123;&#123; product.productId | maxlength(5, &apos;...&apos;) &#125;&#125;&lt;/td&gt;</div><div class=\"line\">                  &lt;td data-toggle=&quot;tooltip&quot; data-placement=&quot;bottom&quot; v-bind:title=&quot;product.terminalId&quot;&gt;&#123;&#123; product.terminalId | maxlength(5, &apos;...&apos;) &#125;&#125;&lt;/td&gt;</div><div class=\"line\">                  &lt;td&gt;&#123;&#123; product.isActivate === 1 ? &apos;是&apos; : &apos;否&apos; &#125;&#125;&lt;/td&gt;</div><div class=\"line\">                  &lt;td data-toggle=&quot;tooltip&quot; data-placement=&quot;bottom&quot; v-bind:title=&quot;product.uuid&quot;&gt;&#123;&#123; product.uuid | maxlength(8, &apos;...&apos;) &#125;&#125;&lt;/td&gt;</div><div class=\"line\">                  &lt;td&gt;&#123;&#123; product.state === 1 ? &apos;启用&apos; : &apos;未启用&apos; &#125;&#125;&lt;/td&gt;</div><div class=\"line\">                  &lt;td data-toggle=&quot;tooltip&quot; data-placement=&quot;bottom&quot; v-bind:title=&quot;product.activeDate&quot;&gt;&#123;&#123; product.activeDate | maxlength(10) &#125;&#125;&lt;/td&gt;</div><div class=\"line\">                  &lt;td data-toggle=&quot;tooltip&quot; data-placement=&quot;bottom&quot; v-bind:title=&quot;product.expiresDate&quot;&gt;&#123;&#123; product.expiresDate | maxlength(10) &#125;&#125;&lt;/td&gt;</div><div class=\"line\">                  &lt;td data-toggle=&quot;tooltip&quot; data-placement=&quot;bottom&quot; v-bind:title=&quot;product.registerDate&quot;&gt;&#123;&#123; product.registerDate | maxlength(10) &#125;&#125;&lt;/td&gt;</div><div class=\"line\">                  &lt;td data-toggle=&quot;tooltip&quot; data-placement=&quot;bottom&quot; v-bind:title=&quot;product.activateDate&quot;&gt;&#123;&#123; product.activateDate | maxlength(10) &#125;&#125;&lt;/td&gt;</div><div class=\"line\">                  &lt;td data-toggle=&quot;tooltip&quot; data-placement=&quot;bottom&quot; data-html=&quot;true&quot; v-bind:title=&quot;showJson(product.options)&quot;&gt;...&lt;/td&gt;</div><div class=\"line\">                  &lt;td&gt;</div><div class=\"line\">                    &lt;a href=&quot;#&quot; class=&quot;btn btn-info btn-xs&quot; v-show=&quot;product.isActivate === 0&quot;&gt;&lt;i class=&quot;fa fa-pencil&quot;&gt;&lt;/i&gt; 激活 &lt;/a&gt;</div><div class=\"line\">                  &lt;/td&gt;</div><div class=\"line\">                &lt;/tr&gt;</div><div class=\"line\">              &lt;/tbody&gt;</div><div class=\"line\">            &lt;/table&gt;</div><div class=\"line\">            &lt;!-- end project list --&gt;</div><div class=\"line\">          &lt;/div&gt;</div><div class=\"line\">        &lt;/div&gt;</div><div class=\"line\">      &lt;/div&gt;</div><div class=\"line\">    &lt;/div&gt;</div><div class=\"line\">  &lt;/div&gt;</div><div class=\"line\">  &lt;!-- /info --&gt;</div><div class=\"line\">&lt;/template&gt;</div><div class=\"line\"></div><div class=\"line\">&lt;script&gt;</div><div class=\"line\">    export default &#123;</div><div class=\"line\">        name: &apos;Products&apos;,</div><div class=\"line\">        data() &#123;</div><div class=\"line\">            return &#123;</div><div class=\"line\">                products: [],</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;,</div><div class=\"line\">        methods: &#123;</div><div class=\"line\">            showJson(json) &#123;</div><div class=\"line\">                return FormatJson(json);</div><div class=\"line\">            &#125;,</div><div class=\"line\">            getProducts() &#123;</div><div class=\"line\">                var that = this;</div><div class=\"line\">                $.get(`/static/products.json`, repo =&gt; &#123;</div><div class=\"line\">                    that.$set(that, &apos;products&apos;, repo.list);</div><div class=\"line\">                    setTimeout(() =&gt; &#123;</div><div class=\"line\">                        // 初始化datatables</div><div class=\"line\">                        SetDataTable(&apos;#products-datatable&apos;);</div><div class=\"line\">                        // 设置tooltip</div><div class=\"line\">                        SetTooltip();</div><div class=\"line\">                    &#125;);</div><div class=\"line\">                &#125;);</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;,</div><div class=\"line\">        mounted() &#123;</div><div class=\"line\">            // 获取产品数据</div><div class=\"line\">            this.getProducts();</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&lt;/script&gt;</div></pre></td></tr></table></figure></p>\n<h3 id=\"tooltip\"><a href=\"#tooltip\" class=\"headerlink\" title=\"tooltip\"></a>tooltip</h3><p><a href=\"http://jqueryui.com/tooltip/\">提示工具(Tooltip)</a>插件根据需求生成内容和标记，默认情况下是把提示工具（tooltip）放在它们的触发元素后面。</p>\n<p>您可以有以下两种方式添加提示工具（tooltip）：</p>\n<ul>\n<li>通过 data 属性：如需添加一个提示工具（tooltip），只需向一个锚标签添加 data-toggle=”tooltip” 即可</li>\n</ul>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"#\"</span> <span class=\"attr\">data-toggle</span>=<span class=\"string\">\"tooltip\"</span> <span class=\"attr\">title</span>=<span class=\"string\">\"Example tooltip\"</span>&gt;</span>请悬停在我的上面<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></div></pre></td></tr></table></figure>\n<ul>\n<li>通过JavaScript：通过JavaScript触发提示工具（tooltip）：</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$(<span class=\"string\">'#identifier'</span>).tooltip(options)</div></pre></td></tr></table></figure>\n<h3 id=\"common-js\"><a href=\"#common-js\" class=\"headerlink\" title=\"common.js\"></a>common.js</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// dataTables初始化</span></div><div class=\"line\"><span class=\"keyword\">const</span> SetDataTable = <span class=\"function\">(<span class=\"params\">eleType, destroy</span>) =&gt;</span> &#123;</div><div class=\"line\">    $(eleType).dataTable(&#123;</div><div class=\"line\">        <span class=\"attr\">destroy</span>: destroy || <span class=\"literal\">true</span>,</div><div class=\"line\">        <span class=\"string\">\"language\"</span>: &#123;</div><div class=\"line\">            <span class=\"string\">\"url\"</span>: <span class=\"string\">\"./static/datatable_zh_CN.json\"</span></div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;);</div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// Tooltip初始化</span></div><div class=\"line\"><span class=\"keyword\">const</span> SetTooltip = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> $tooltip = $(<span class=\"string\">'[data-toggle=\"tooltip\"]'</span>);</div><div class=\"line\">    $tooltip.tooltip(&#123;</div><div class=\"line\">        <span class=\"attr\">container</span>: <span class=\"string\">'body'</span>,</div><div class=\"line\">        <span class=\"attr\">trigger</span>: <span class=\"string\">'hover click'</span></div><div class=\"line\">    &#125;);</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<h3 id=\"json展示\"><a href=\"#json展示\" class=\"headerlink\" title=\"json展示\"></a>json展示</h3><p>这里我们需要将json数据展示为html，本骚年写过两个方法进行实现，大家可以参考之前的文章。<br>传送门：</p>\n<ul>\n<li><a href=\"\">《将json输出为html(一)：字符串正则匹配》</a></li>\n<li><a href=\"\">《将json输出为html(二)：js数据类型判断实现》</a></li>\n</ul>\n<h3 id=\"页面效果\"><a href=\"#页面效果\" class=\"headerlink\" title=\"页面效果\"></a>页面效果</h3><p><img src=\"http://o905ne85q.bkt.clouddn.com/4234.tmp.png\" alt=\"image\"></p>\n<h2 id=\"结束语\"><a href=\"#结束语\" class=\"headerlink\" title=\"结束语\"></a>结束语</h2><hr>\n<p>这里我们使用了先使用vue自动加载相应数据生成html后（mounted），再调用dataTables来生成表格的方法。当然这种方法会有很大的限制，需要一次性加载所有数据，这在很多时候都是不实用的。后面我们会继续介绍dataTables的另外一种使用方法–服务端渲染。<br><a href=\"https://github.com/godbasin/godbasin.github.io/tree/blog-codes/vue2-notes/7-use-datatable-with-html\">此处查看项目代码</a><br><a href=\"http://ofyya1gfg.bkt.clouddn.com/7-use-datatable-with-html/index.html#/app/products\">此处查看页面效果</a></p>"},{"title":"Vue2使用笔记6--vue与各种插件和谐相处地创建表单","date":"2016-12-04T00:05:39.000Z","_content":"最近在使用Vue2作为项目中前端的框架，《Vue2使用笔记》系列用于记录过程中的一些使用和解决方法。\n本文记录vue中使用各种插件和库，以及创建简单表单的使用过程。\n<!--more-->\n\n## 一些插件\n---\n在开发中，遇到一些小的项目，拓展和维护都不会太多，这时候我们可以使用一些现成的插件和库进行快速搭建。\n这里我们使用到以下的一些插件：\n- iCheck\n- switchery\n- daterangepicker\n\n后面还会用到dataTable，也是很棒的一个插件库，后续章节会有相关的介绍。\n\n这里我们将这些插件的调用放到一个统一的文件common.js中进行管理，封装统一的接口，方便调用。\n\n### iCheck\n[iCheck](http://icheck.fronteed.com/)是个基于jQuery的表单选项插件，有多种可以选的皮肤，兼容PC端和移动端。\n这里我们选用绿色的flat皮肤使用。\n\n- 引入相关文件\n\n``` html\n<!-- index.html -->\n<!-- iCheck style -->\n<link href=\"./static/gentelella/lib/css/iCheck/green.css\" rel=\"stylesheet\">\n<!-- iCheck script -->\n<script src=\"./static/gentelella/lib/js/icheck.min.js\"></script>\n```\n\n当然，我们调用iCheck可以自定义一些属性，作为规范或者约定来使用。\n这里本骚年就默认使用name作为组件data的值，而value作为选中值。\n\n- 组件中使用\n\n``` html\n<label><input type=\"radio\" class=\"flat\" name=\"type\" value=\"type1\" v-model=\"type\"> type1</label>\n<label><input type=\"radio\" class=\"flat\" name=\"type\" value=\"type2\" v-model=\"type\"> type2</label>\n```\n\n- common.js中的公用接口\n\n``` js\n// common.js\nconst SetICheck = that => {\n    // iCheck\n    if ($(\"input.flat\")[0]) {\n        $('input.flat').iCheck({\n            checkboxClass: 'icheckbox_flat-green',\n            radioClass: 'iradio_flat-green'\n        });\n        $('input').on('ifChecked', function(event) {\n\t\t\t// 传入vue组件对象，对其进行赋值\n            that.$set(that, event.currentTarget.name, event.currentTarget.value);\n        });\n    }\n};\n\n```\n\n### switchery\n[switchery](https://github.com/abpetkov/switchery)是个简单的JavaScript组件，可以帮助用户把默认的HTML复选框转换成漂亮iOS7样式风格。\n具体的api和相关介绍大家可以自行去查文档，这里就不多说啦，直接上码：\n\n- 引入相关文件\n\n``` html\n<!-- Switchery style-->\n<link href=\"./static/gentelella/lib/css/switchery.min.css\" rel=\"stylesheet\">\n\n<!-- Switchery script-->\n<script src=\"./static/gentelella/lib/js/switchery.min.js\"></script>\n```\n\n- 组件中使用\n\n``` html\n<!-- true为启用值，false为关闭值，name为data值-->\n<label><input type=\"checkbox\" class=\"js-switch\" name=\"state\" true=\"1\" false=\"0\" checked /> {{state === 1 ? '激活' : '未激活'}}</label>\n```\n\n- common.js\n\n``` js\nconst SetSwitchery = that => {\n    // Switchery\n    if ($(\".js-switch\")[0]) {\n        var elems = Array.prototype.slice.call(document.querySelectorAll('.js-switch'));\n        elems.forEach(function(html) {\n            var switchery = new Switchery(html, {\n                color: '#26B99A'\n            });\n            html.onchange = () => {\n                var value = html.checked === true ? Number(html.attributes['true'].value) : Number(html.attributes['false'].value);\n                that.$set(that, html.name, value);\n            };\n        });\n\n    }\n};\n```\n\n### daterangepicker\n[daterangepicker](http://www.daterangepicker.com/)是个基于bootstrap的日历插件，有单日历和双日历，很方便使用，样式也是棒棒哒。\n不废话，上码：\n\n- 引入相关文件\n\n``` html\n<!-- bootstrap-daterangepicker -->\n<!-- 样式直接使用bootstrap -->\n<script src=\"./static/gentelella/lib/js/moment.min.js\"></script>\n<script src=\"./static/gentelella/lib/js/daterangepicker.js\"></script>\n```\n\n- 组件中使用\n\n``` html\n<div class=\"xdisplay_inputx form-group has-feedback\">\n\t<input type=\"text\" class=\"form-control has-feedback-left\" id=\"single_cal3\" v-model=\"expiresDate\" placeholder=\"点击选择日期\" aria-describedby=\"inputSuccess2Status3\">\n\t<span class=\"fa fa-calendar-o form-control-feedback left\" aria-hidden=\"true\"></span>\n\t<span id=\"inputSuccess2Status3\" class=\"sr-only\">(success)</span>\n</div>\n```\n\n- common.js\n\n``` js\nconst SetDaterangepicker = (that, eleToSet) => {\n    var today = new Date(),\n        todate = {\n            year: today.getFullYear(),\n            month: today.getMonth() + 1,\n            date: today.getDate(),\n        };\n        // daterangepicker\n    $(eleToSet).daterangepicker({\n        singleDatePicker: true,\n        format: 'YYYY-MM-DD',\n        minDate: `${todate.year}-${todate.month}-${todate.date}`,\n        calender_style: \"picker_3\"\n    }, function(start, end, label) {\n        that.expiresDate = start.toISOString().substring(0, 10);\n    });\n}\n```\n\n### 其他插件\nGentelella模板中还使用了一些其他的插件，像[select2](http://select2.github.io/)等等，具体的本骚年就不在这里讲了，大家可以自行发挥想象力和创造力去把这些东西融合进来，尽情使用。\n\n## 创建表单\n---\n这里我们在创建服务模块弄个简单的表单呗~\n\n### ServiceAdd组件\n直接上代码？（捂脸）\n``` vue\n<template>\n\t<div class=\"\">\n\t\t<div class=\"page-title\">\n\t\t\t<div class=\"title_left\">\n\t\t\t\t<h3>服务管理 <small>> 新建</small></h3>\n\t\t\t</div>\n\t\t</div>\n\n\t\t<div class=\"clearfix\"></div>\n\t\t<!-- normal form -->\n\t\t<div class=\"x_panel\">\n\t\t\t<div class=\"x_title\">\n\t\t\t\t<h2>新建服务</h2>\n\t\t\t\t<div class=\"clearfix\"></div>\n\t\t\t</div>\n\t\t\t<div class=\"x_content\">\n\t\t\t\t<br />\n\t\t\t\t<form class=\"form-horizontal form-label-left\">\n\n\t\t\t\t\t<div class=\"form-group\">\n\t\t\t\t\t\t<label class=\"control-label col-md-3 col-sm-3 col-xs-12\">名称</label>\n\t\t\t\t\t\t<div class=\"col-md-6 col-sm-8 col-xs-12\">\n\t\t\t\t\t\t\t<input type=\"text\" class=\"form-control\" placeholder=\"\" v-model=\"name\" required>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t\t<div class=\"form-group\">\n\t\t\t\t\t\t<label class=\"control-label col-md-3 col-sm-3 col-xs-12\">编码</label>\n\t\t\t\t\t\t<div class=\"col-md-6 col-sm-8 col-xs-12\">\n\t\t\t\t\t\t\t<input type=\"text\" class=\"form-control\" v-model=\"code\" placeholder=\"编码/别名，方便查询使用\">\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n                    <div class=\"form-group\">\n\t\t\t\t\t\t<label class=\"control-label col-md-3 col-sm-3 col-xs-12\">类型</label>\n\t\t\t\t\t\t<div class=\"col-md-6 col-sm-8 col-xs-12 table-radio\">\n\t\t\t\t\t\t\t<label><input type=\"radio\" class=\"flat\" name=\"type\" value=\"type1\" v-model=\"type\"> type1</label>\n\t\t\t\t\t\t\t<label><input type=\"radio\" class=\"flat\" name=\"type\" value=\"type2\" v-model=\"type\"> type2</label>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t\t<div class=\"form-group\">\n\t\t\t\t\t\t<label class=\"control-label col-md-3 col-sm-3 col-xs-12\">状态</label>\n\t\t\t\t\t\t<div class=\"col-md-6 col-sm-8 col-xs-12 table-radio\">\n\t\t\t\t\t\t\t<div class=\"\">\n\t\t\t\t\t\t\t\t<label><input type=\"checkbox\" class=\"js-switch\" name=\"state\" true=\"1\" false=\"0\" checked /> {{state === 1 ? '激活' : '未激活'}}</label>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t\t<div class=\"form-group\">\n\t\t\t\t\t\t<label class=\"control-label col-md-3 col-sm-3 col-xs-12\">过期日期</label>\n\t\t\t\t\t\t<fieldset class=\"col-md-6 col-sm-8 col-xs-12\">\n\t\t\t\t\t\t\t<div class=\"xdisplay_inputx form-group has-feedback\">\n\t\t\t\t\t\t\t\t<input type=\"text\" class=\"form-control has-feedback-left\" id=\"single_cal3\" v-model=\"expiresDate\" placeholder=\"点击选择日期\" aria-describedby=\"inputSuccess2Status3\">\n\t\t\t\t\t\t\t\t<span class=\"fa fa-calendar-o form-control-feedback left\" aria-hidden=\"true\"></span>\n\t\t\t\t\t\t\t\t<span id=\"inputSuccess2Status3\" class=\"sr-only\">(success)</span>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</fieldset>\n\t\t\t\t\t</div>\n\t\t\t\t\t<div class=\"form-group\">\n\t\t\t\t\t\t<label class=\"control-label col-md-3 col-sm-3 col-xs-12\">是否接受通知</label>\n\t\t\t\t\t\t<div class=\"col-md-6 col-sm-8 col-xs-12 table-radio\">\n\t\t\t\t\t\t\t<label><input type=\"checkbox\" class=\"js-switch\" name=\"directIssue\" true=\"1\" false=\"0\" checked /> {{directIssue === 1 ? '是' : '否'}}</label>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t\t<transition name=\"slide-form\">\n\t\t\t\t\t\t<div class=\"form-group slide-form\" v-show=\"directIssue === 1\">\n\t\t\t\t\t\t\t<label class=\"control-label col-md-3 col-sm-3 col-xs-12\">通知邮件</label>\n\t\t\t\t\t\t\t<div class=\"col-md-6 col-sm-8 col-xs-12\">\n\t\t\t\t\t\t\t\t<input type=\"email\" class=\"form-control\" name=\"email\" v-model=\"email\">\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</transition>\n\t\t\t\t\t<div class=\"form-group\">\n\t\t\t\t\t\t<label class=\"control-label col-md-3 col-sm-3 col-xs-12\">备注</label>\n\t\t\t\t\t\t<div class=\"col-md-6 col-sm-8 col-xs-12\">\n\t\t\t\t\t\t\t<textarea class=\"form-control\" name=\"remark\" v-model=\"remark\"></textarea>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\n\n\t\t\t\t\t<div class=\"ln_solid\"></div>\n\t\t\t\t\t<div class=\"form-group\">\n                        <!--错误信息显示-->\n                        <div class=\"col-md-6 col-sm-8 col-xs-12 col-md-offset-3\">\n                            <div class=\"alert alert-danger alert-dismissible fade in\" role=\"alert\" v-show=\"error.shown\">\n\t\t\t\t\t\t\t\t<strong>错误：</strong> {{error.text}}\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t<div class=\"col-md-9 col-sm-9 col-xs-12 col-md-offset-3\">\n\t\t\t\t\t\t\t<a class=\"btn btn-success\" v-on:click=\"submit\">提交</a>\n\t\t\t\t\t\t\t<router-link to=\"/app/terminals\" class=\"btn btn-default\">取消</router-link>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\n\t\t\t\t</form>\n\t\t\t</div>\n\t\t</div>\n\t</div>\n\t<!-- /normal form -->\n</template>\n\n\n<script>\n    var initData = () => {\n        return {\n            isNew: true,\n            name: '',\n            code: '',\n            expiresDate: '',\n            email: '',\n            type: 'type1',\n            directIssue: 1,\n            state: 1,\n            terminalId: '',\n            appKey: '',\n            appSecret: '',\n            activeDate: '',\n            expiresDate: '',\n            remark: '',\n            error: {\n                text: '',\n                shown: false\n            }\n        };\n    };\n    export default {\n        name: 'SeviceAdd',\n        data() {\n            return initData();\n        },\n        methods: {\n            setChange(item) {\n                var that = this;\n                // 设置插件默认值\n                if (item.state !== that.state) {\n                    $('.js-switch[name=\"state\"]').trigger('click');\n                }\n                if (item.directIssue !== that.directIssue) {\n                    $('.js-switch[name=\"directIssue\"]').trigger('click');\n                }\n            },\n            submit() {\n                var that = this,\n                    text;\n                // 先做一些简单的校验，不通过则显示错误信息\n                if (!that.name) {\n                    text = '请填写名称';\n                }\n                if (text) {\n                    that.error.text = text;\n                    that.error.shown = true;\n                    return;\n                }\n                that.error.shown = false;\n                var that = this;\n\n                that.$router.push('/app/terminals');\n            }\n        },\n        mounted() {\n            var that = this;\n            var data = initData();\n            // 设置初始值\n            $.each(data, (key, item) => {\n                that.$set(that, key, item);\n            });\n            // 初始化iCheck\n            SetICheck(that);\n            // 初始化Switchery\n            SetSwitchery(that);\n            // 初始化Daterangepicker\n            SetDaterangepicker(that, '#single_cal3');\n            // 设置插件默认值\n            that.setChange(data);\n        }\n    }\n</script>\n```\n### 页面效果\n![image](http://o905ne85q.bkt.clouddn.com/EB7E.tmp.png)\n\n## 结束语\n-----\n这里只是用到最简单的css过渡，但是vue的过渡效果以及过渡状态还是很牛逼的，大家有兴趣的可以去看看[官方文档](https://vuefe.cn/guide/transitions.html)然后多尝试一下呢，酷酷的。\n[此处查看项目代码](https://github.com/godbasin/godbasin.github.io/tree/blog-codes/vue2-notes/6-form-with-some-plugins)\n[此处查看页面效果](http://ofyya1gfg.bkt.clouddn.com/6-form-with-some-plugins/index.html#/app/add/service)","source":"_posts/vue2-notes-6-form-with-some-plugins.md","raw":"---\ntitle: Vue2使用笔记6--vue与各种插件和谐相处地创建表单\ndate: 2016-12-04 08:05:39\ncategories: vue八宝粥\ntags: 笔记\n---\n最近在使用Vue2作为项目中前端的框架，《Vue2使用笔记》系列用于记录过程中的一些使用和解决方法。\n本文记录vue中使用各种插件和库，以及创建简单表单的使用过程。\n<!--more-->\n\n## 一些插件\n---\n在开发中，遇到一些小的项目，拓展和维护都不会太多，这时候我们可以使用一些现成的插件和库进行快速搭建。\n这里我们使用到以下的一些插件：\n- iCheck\n- switchery\n- daterangepicker\n\n后面还会用到dataTable，也是很棒的一个插件库，后续章节会有相关的介绍。\n\n这里我们将这些插件的调用放到一个统一的文件common.js中进行管理，封装统一的接口，方便调用。\n\n### iCheck\n[iCheck](http://icheck.fronteed.com/)是个基于jQuery的表单选项插件，有多种可以选的皮肤，兼容PC端和移动端。\n这里我们选用绿色的flat皮肤使用。\n\n- 引入相关文件\n\n``` html\n<!-- index.html -->\n<!-- iCheck style -->\n<link href=\"./static/gentelella/lib/css/iCheck/green.css\" rel=\"stylesheet\">\n<!-- iCheck script -->\n<script src=\"./static/gentelella/lib/js/icheck.min.js\"></script>\n```\n\n当然，我们调用iCheck可以自定义一些属性，作为规范或者约定来使用。\n这里本骚年就默认使用name作为组件data的值，而value作为选中值。\n\n- 组件中使用\n\n``` html\n<label><input type=\"radio\" class=\"flat\" name=\"type\" value=\"type1\" v-model=\"type\"> type1</label>\n<label><input type=\"radio\" class=\"flat\" name=\"type\" value=\"type2\" v-model=\"type\"> type2</label>\n```\n\n- common.js中的公用接口\n\n``` js\n// common.js\nconst SetICheck = that => {\n    // iCheck\n    if ($(\"input.flat\")[0]) {\n        $('input.flat').iCheck({\n            checkboxClass: 'icheckbox_flat-green',\n            radioClass: 'iradio_flat-green'\n        });\n        $('input').on('ifChecked', function(event) {\n\t\t\t// 传入vue组件对象，对其进行赋值\n            that.$set(that, event.currentTarget.name, event.currentTarget.value);\n        });\n    }\n};\n\n```\n\n### switchery\n[switchery](https://github.com/abpetkov/switchery)是个简单的JavaScript组件，可以帮助用户把默认的HTML复选框转换成漂亮iOS7样式风格。\n具体的api和相关介绍大家可以自行去查文档，这里就不多说啦，直接上码：\n\n- 引入相关文件\n\n``` html\n<!-- Switchery style-->\n<link href=\"./static/gentelella/lib/css/switchery.min.css\" rel=\"stylesheet\">\n\n<!-- Switchery script-->\n<script src=\"./static/gentelella/lib/js/switchery.min.js\"></script>\n```\n\n- 组件中使用\n\n``` html\n<!-- true为启用值，false为关闭值，name为data值-->\n<label><input type=\"checkbox\" class=\"js-switch\" name=\"state\" true=\"1\" false=\"0\" checked /> {{state === 1 ? '激活' : '未激活'}}</label>\n```\n\n- common.js\n\n``` js\nconst SetSwitchery = that => {\n    // Switchery\n    if ($(\".js-switch\")[0]) {\n        var elems = Array.prototype.slice.call(document.querySelectorAll('.js-switch'));\n        elems.forEach(function(html) {\n            var switchery = new Switchery(html, {\n                color: '#26B99A'\n            });\n            html.onchange = () => {\n                var value = html.checked === true ? Number(html.attributes['true'].value) : Number(html.attributes['false'].value);\n                that.$set(that, html.name, value);\n            };\n        });\n\n    }\n};\n```\n\n### daterangepicker\n[daterangepicker](http://www.daterangepicker.com/)是个基于bootstrap的日历插件，有单日历和双日历，很方便使用，样式也是棒棒哒。\n不废话，上码：\n\n- 引入相关文件\n\n``` html\n<!-- bootstrap-daterangepicker -->\n<!-- 样式直接使用bootstrap -->\n<script src=\"./static/gentelella/lib/js/moment.min.js\"></script>\n<script src=\"./static/gentelella/lib/js/daterangepicker.js\"></script>\n```\n\n- 组件中使用\n\n``` html\n<div class=\"xdisplay_inputx form-group has-feedback\">\n\t<input type=\"text\" class=\"form-control has-feedback-left\" id=\"single_cal3\" v-model=\"expiresDate\" placeholder=\"点击选择日期\" aria-describedby=\"inputSuccess2Status3\">\n\t<span class=\"fa fa-calendar-o form-control-feedback left\" aria-hidden=\"true\"></span>\n\t<span id=\"inputSuccess2Status3\" class=\"sr-only\">(success)</span>\n</div>\n```\n\n- common.js\n\n``` js\nconst SetDaterangepicker = (that, eleToSet) => {\n    var today = new Date(),\n        todate = {\n            year: today.getFullYear(),\n            month: today.getMonth() + 1,\n            date: today.getDate(),\n        };\n        // daterangepicker\n    $(eleToSet).daterangepicker({\n        singleDatePicker: true,\n        format: 'YYYY-MM-DD',\n        minDate: `${todate.year}-${todate.month}-${todate.date}`,\n        calender_style: \"picker_3\"\n    }, function(start, end, label) {\n        that.expiresDate = start.toISOString().substring(0, 10);\n    });\n}\n```\n\n### 其他插件\nGentelella模板中还使用了一些其他的插件，像[select2](http://select2.github.io/)等等，具体的本骚年就不在这里讲了，大家可以自行发挥想象力和创造力去把这些东西融合进来，尽情使用。\n\n## 创建表单\n---\n这里我们在创建服务模块弄个简单的表单呗~\n\n### ServiceAdd组件\n直接上代码？（捂脸）\n``` vue\n<template>\n\t<div class=\"\">\n\t\t<div class=\"page-title\">\n\t\t\t<div class=\"title_left\">\n\t\t\t\t<h3>服务管理 <small>> 新建</small></h3>\n\t\t\t</div>\n\t\t</div>\n\n\t\t<div class=\"clearfix\"></div>\n\t\t<!-- normal form -->\n\t\t<div class=\"x_panel\">\n\t\t\t<div class=\"x_title\">\n\t\t\t\t<h2>新建服务</h2>\n\t\t\t\t<div class=\"clearfix\"></div>\n\t\t\t</div>\n\t\t\t<div class=\"x_content\">\n\t\t\t\t<br />\n\t\t\t\t<form class=\"form-horizontal form-label-left\">\n\n\t\t\t\t\t<div class=\"form-group\">\n\t\t\t\t\t\t<label class=\"control-label col-md-3 col-sm-3 col-xs-12\">名称</label>\n\t\t\t\t\t\t<div class=\"col-md-6 col-sm-8 col-xs-12\">\n\t\t\t\t\t\t\t<input type=\"text\" class=\"form-control\" placeholder=\"\" v-model=\"name\" required>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t\t<div class=\"form-group\">\n\t\t\t\t\t\t<label class=\"control-label col-md-3 col-sm-3 col-xs-12\">编码</label>\n\t\t\t\t\t\t<div class=\"col-md-6 col-sm-8 col-xs-12\">\n\t\t\t\t\t\t\t<input type=\"text\" class=\"form-control\" v-model=\"code\" placeholder=\"编码/别名，方便查询使用\">\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n                    <div class=\"form-group\">\n\t\t\t\t\t\t<label class=\"control-label col-md-3 col-sm-3 col-xs-12\">类型</label>\n\t\t\t\t\t\t<div class=\"col-md-6 col-sm-8 col-xs-12 table-radio\">\n\t\t\t\t\t\t\t<label><input type=\"radio\" class=\"flat\" name=\"type\" value=\"type1\" v-model=\"type\"> type1</label>\n\t\t\t\t\t\t\t<label><input type=\"radio\" class=\"flat\" name=\"type\" value=\"type2\" v-model=\"type\"> type2</label>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t\t<div class=\"form-group\">\n\t\t\t\t\t\t<label class=\"control-label col-md-3 col-sm-3 col-xs-12\">状态</label>\n\t\t\t\t\t\t<div class=\"col-md-6 col-sm-8 col-xs-12 table-radio\">\n\t\t\t\t\t\t\t<div class=\"\">\n\t\t\t\t\t\t\t\t<label><input type=\"checkbox\" class=\"js-switch\" name=\"state\" true=\"1\" false=\"0\" checked /> {{state === 1 ? '激活' : '未激活'}}</label>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t\t<div class=\"form-group\">\n\t\t\t\t\t\t<label class=\"control-label col-md-3 col-sm-3 col-xs-12\">过期日期</label>\n\t\t\t\t\t\t<fieldset class=\"col-md-6 col-sm-8 col-xs-12\">\n\t\t\t\t\t\t\t<div class=\"xdisplay_inputx form-group has-feedback\">\n\t\t\t\t\t\t\t\t<input type=\"text\" class=\"form-control has-feedback-left\" id=\"single_cal3\" v-model=\"expiresDate\" placeholder=\"点击选择日期\" aria-describedby=\"inputSuccess2Status3\">\n\t\t\t\t\t\t\t\t<span class=\"fa fa-calendar-o form-control-feedback left\" aria-hidden=\"true\"></span>\n\t\t\t\t\t\t\t\t<span id=\"inputSuccess2Status3\" class=\"sr-only\">(success)</span>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</fieldset>\n\t\t\t\t\t</div>\n\t\t\t\t\t<div class=\"form-group\">\n\t\t\t\t\t\t<label class=\"control-label col-md-3 col-sm-3 col-xs-12\">是否接受通知</label>\n\t\t\t\t\t\t<div class=\"col-md-6 col-sm-8 col-xs-12 table-radio\">\n\t\t\t\t\t\t\t<label><input type=\"checkbox\" class=\"js-switch\" name=\"directIssue\" true=\"1\" false=\"0\" checked /> {{directIssue === 1 ? '是' : '否'}}</label>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t\t<transition name=\"slide-form\">\n\t\t\t\t\t\t<div class=\"form-group slide-form\" v-show=\"directIssue === 1\">\n\t\t\t\t\t\t\t<label class=\"control-label col-md-3 col-sm-3 col-xs-12\">通知邮件</label>\n\t\t\t\t\t\t\t<div class=\"col-md-6 col-sm-8 col-xs-12\">\n\t\t\t\t\t\t\t\t<input type=\"email\" class=\"form-control\" name=\"email\" v-model=\"email\">\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</transition>\n\t\t\t\t\t<div class=\"form-group\">\n\t\t\t\t\t\t<label class=\"control-label col-md-3 col-sm-3 col-xs-12\">备注</label>\n\t\t\t\t\t\t<div class=\"col-md-6 col-sm-8 col-xs-12\">\n\t\t\t\t\t\t\t<textarea class=\"form-control\" name=\"remark\" v-model=\"remark\"></textarea>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\n\n\t\t\t\t\t<div class=\"ln_solid\"></div>\n\t\t\t\t\t<div class=\"form-group\">\n                        <!--错误信息显示-->\n                        <div class=\"col-md-6 col-sm-8 col-xs-12 col-md-offset-3\">\n                            <div class=\"alert alert-danger alert-dismissible fade in\" role=\"alert\" v-show=\"error.shown\">\n\t\t\t\t\t\t\t\t<strong>错误：</strong> {{error.text}}\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t<div class=\"col-md-9 col-sm-9 col-xs-12 col-md-offset-3\">\n\t\t\t\t\t\t\t<a class=\"btn btn-success\" v-on:click=\"submit\">提交</a>\n\t\t\t\t\t\t\t<router-link to=\"/app/terminals\" class=\"btn btn-default\">取消</router-link>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\n\t\t\t\t</form>\n\t\t\t</div>\n\t\t</div>\n\t</div>\n\t<!-- /normal form -->\n</template>\n\n\n<script>\n    var initData = () => {\n        return {\n            isNew: true,\n            name: '',\n            code: '',\n            expiresDate: '',\n            email: '',\n            type: 'type1',\n            directIssue: 1,\n            state: 1,\n            terminalId: '',\n            appKey: '',\n            appSecret: '',\n            activeDate: '',\n            expiresDate: '',\n            remark: '',\n            error: {\n                text: '',\n                shown: false\n            }\n        };\n    };\n    export default {\n        name: 'SeviceAdd',\n        data() {\n            return initData();\n        },\n        methods: {\n            setChange(item) {\n                var that = this;\n                // 设置插件默认值\n                if (item.state !== that.state) {\n                    $('.js-switch[name=\"state\"]').trigger('click');\n                }\n                if (item.directIssue !== that.directIssue) {\n                    $('.js-switch[name=\"directIssue\"]').trigger('click');\n                }\n            },\n            submit() {\n                var that = this,\n                    text;\n                // 先做一些简单的校验，不通过则显示错误信息\n                if (!that.name) {\n                    text = '请填写名称';\n                }\n                if (text) {\n                    that.error.text = text;\n                    that.error.shown = true;\n                    return;\n                }\n                that.error.shown = false;\n                var that = this;\n\n                that.$router.push('/app/terminals');\n            }\n        },\n        mounted() {\n            var that = this;\n            var data = initData();\n            // 设置初始值\n            $.each(data, (key, item) => {\n                that.$set(that, key, item);\n            });\n            // 初始化iCheck\n            SetICheck(that);\n            // 初始化Switchery\n            SetSwitchery(that);\n            // 初始化Daterangepicker\n            SetDaterangepicker(that, '#single_cal3');\n            // 设置插件默认值\n            that.setChange(data);\n        }\n    }\n</script>\n```\n### 页面效果\n![image](http://o905ne85q.bkt.clouddn.com/EB7E.tmp.png)\n\n## 结束语\n-----\n这里只是用到最简单的css过渡，但是vue的过渡效果以及过渡状态还是很牛逼的，大家有兴趣的可以去看看[官方文档](https://vuefe.cn/guide/transitions.html)然后多尝试一下呢，酷酷的。\n[此处查看项目代码](https://github.com/godbasin/godbasin.github.io/tree/blog-codes/vue2-notes/6-form-with-some-plugins)\n[此处查看页面效果](http://ofyya1gfg.bkt.clouddn.com/6-form-with-some-plugins/index.html#/app/add/service)","slug":"vue2-notes-6-form-with-some-plugins","published":1,"updated":"2016-12-04T00:06:17.965Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cix45huin005jxotua2us0bve","content":"<p>最近在使用Vue2作为项目中前端的框架，《Vue2使用笔记》系列用于记录过程中的一些使用和解决方法。<br>本文记录vue中使用各种插件和库，以及创建简单表单的使用过程。<br><a id=\"more\"></a></p>\n<h2 id=\"一些插件\"><a href=\"#一些插件\" class=\"headerlink\" title=\"一些插件\"></a>一些插件</h2><hr>\n<p>在开发中，遇到一些小的项目，拓展和维护都不会太多，这时候我们可以使用一些现成的插件和库进行快速搭建。<br>这里我们使用到以下的一些插件：</p>\n<ul>\n<li>iCheck</li>\n<li>switchery</li>\n<li>daterangepicker</li>\n</ul>\n<p>后面还会用到dataTable，也是很棒的一个插件库，后续章节会有相关的介绍。</p>\n<p>这里我们将这些插件的调用放到一个统一的文件common.js中进行管理，封装统一的接口，方便调用。</p>\n<h3 id=\"iCheck\"><a href=\"#iCheck\" class=\"headerlink\" title=\"iCheck\"></a>iCheck</h3><p><a href=\"http://icheck.fronteed.com/\" target=\"_blank\" rel=\"external\">iCheck</a>是个基于jQuery的表单选项插件，有多种可以选的皮肤，兼容PC端和移动端。<br>这里我们选用绿色的flat皮肤使用。</p>\n<ul>\n<li>引入相关文件</li>\n</ul>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">&lt;!-- index.html --&gt;</span></div><div class=\"line\"><span class=\"comment\">&lt;!-- iCheck style --&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">link</span> <span class=\"attr\">href</span>=<span class=\"string\">\"./static/gentelella/lib/css/iCheck/green.css\"</span> <span class=\"attr\">rel</span>=<span class=\"string\">\"stylesheet\"</span>&gt;</span></div><div class=\"line\"><span class=\"comment\">&lt;!-- iCheck script --&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"./static/gentelella/lib/js/icheck.min.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>当然，我们调用iCheck可以自定义一些属性，作为规范或者约定来使用。<br>这里本骚年就默认使用name作为组件data的值，而value作为选中值。</p>\n<ul>\n<li>组件中使用</li>\n</ul>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">label</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"radio\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"flat\"</span> <span class=\"attr\">name</span>=<span class=\"string\">\"type\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"type1\"</span> <span class=\"attr\">v-model</span>=<span class=\"string\">\"type\"</span>&gt;</span> type1<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">label</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"radio\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"flat\"</span> <span class=\"attr\">name</span>=<span class=\"string\">\"type\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"type2\"</span> <span class=\"attr\">v-model</span>=<span class=\"string\">\"type\"</span>&gt;</span> type2<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></div></pre></td></tr></table></figure>\n<ul>\n<li>common.js中的公用接口</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// common.js</span></div><div class=\"line\"><span class=\"keyword\">const</span> SetICheck = <span class=\"function\"><span class=\"params\">that</span> =&gt;</span> &#123;</div><div class=\"line\">    <span class=\"comment\">// iCheck</span></div><div class=\"line\">    <span class=\"keyword\">if</span> ($(<span class=\"string\">\"input.flat\"</span>)[<span class=\"number\">0</span>]) &#123;</div><div class=\"line\">        $(<span class=\"string\">'input.flat'</span>).iCheck(&#123;</div><div class=\"line\">            <span class=\"attr\">checkboxClass</span>: <span class=\"string\">'icheckbox_flat-green'</span>,</div><div class=\"line\">            <span class=\"attr\">radioClass</span>: <span class=\"string\">'iradio_flat-green'</span></div><div class=\"line\">        &#125;);</div><div class=\"line\">        $(<span class=\"string\">'input'</span>).on(<span class=\"string\">'ifChecked'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">event</span>) </span>&#123;</div><div class=\"line\">      <span class=\"comment\">// 传入vue组件对象，对其进行赋值</span></div><div class=\"line\">            that.$set(that, event.currentTarget.name, event.currentTarget.value);</div><div class=\"line\">        &#125;);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<h3 id=\"switchery\"><a href=\"#switchery\" class=\"headerlink\" title=\"switchery\"></a>switchery</h3><p><a href=\"https://github.com/abpetkov/switchery\" target=\"_blank\" rel=\"external\">switchery</a>是个简单的JavaScript组件，可以帮助用户把默认的HTML复选框转换成漂亮iOS7样式风格。<br>具体的api和相关介绍大家可以自行去查文档，这里就不多说啦，直接上码：</p>\n<ul>\n<li>引入相关文件</li>\n</ul>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">&lt;!-- Switchery style--&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">link</span> <span class=\"attr\">href</span>=<span class=\"string\">\"./static/gentelella/lib/css/switchery.min.css\"</span> <span class=\"attr\">rel</span>=<span class=\"string\">\"stylesheet\"</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">&lt;!-- Switchery script--&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"./static/gentelella/lib/js/switchery.min.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div></pre></td></tr></table></figure>\n<ul>\n<li>组件中使用</li>\n</ul>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">&lt;!-- true为启用值，false为关闭值，name为data值--&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">label</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"checkbox\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"js-switch\"</span> <span class=\"attr\">name</span>=<span class=\"string\">\"state\"</span> <span class=\"attr\">true</span>=<span class=\"string\">\"1\"</span> <span class=\"attr\">false</span>=<span class=\"string\">\"0\"</span> <span class=\"attr\">checked</span> /&gt;</span> &#123;&#123;state === 1 ? '激活' : '未激活'&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></div></pre></td></tr></table></figure>\n<ul>\n<li>common.js</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">const</span> SetSwitchery = <span class=\"function\"><span class=\"params\">that</span> =&gt;</span> &#123;</div><div class=\"line\">    <span class=\"comment\">// Switchery</span></div><div class=\"line\">    <span class=\"keyword\">if</span> ($(<span class=\"string\">\".js-switch\"</span>)[<span class=\"number\">0</span>]) &#123;</div><div class=\"line\">        <span class=\"keyword\">var</span> elems = <span class=\"built_in\">Array</span>.prototype.slice.call(<span class=\"built_in\">document</span>.querySelectorAll(<span class=\"string\">'.js-switch'</span>));</div><div class=\"line\">        elems.forEach(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">html</span>) </span>&#123;</div><div class=\"line\">            <span class=\"keyword\">var</span> switchery = <span class=\"keyword\">new</span> Switchery(html, &#123;</div><div class=\"line\">                <span class=\"attr\">color</span>: <span class=\"string\">'#26B99A'</span></div><div class=\"line\">            &#125;);</div><div class=\"line\">            html.onchange = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</div><div class=\"line\">                <span class=\"keyword\">var</span> value = html.checked === <span class=\"literal\">true</span> ? <span class=\"built_in\">Number</span>(html.attributes[<span class=\"string\">'true'</span>].value) : <span class=\"built_in\">Number</span>(html.attributes[<span class=\"string\">'false'</span>].value);</div><div class=\"line\">                that.$set(that, html.name, value);</div><div class=\"line\">            &#125;;</div><div class=\"line\">        &#125;);</div><div class=\"line\"></div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<h3 id=\"daterangepicker\"><a href=\"#daterangepicker\" class=\"headerlink\" title=\"daterangepicker\"></a>daterangepicker</h3><p><a href=\"http://www.daterangepicker.com/\" target=\"_blank\" rel=\"external\">daterangepicker</a>是个基于bootstrap的日历插件，有单日历和双日历，很方便使用，样式也是棒棒哒。<br>不废话，上码：</p>\n<ul>\n<li>引入相关文件</li>\n</ul>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">&lt;!-- bootstrap-daterangepicker --&gt;</span></div><div class=\"line\"><span class=\"comment\">&lt;!-- 样式直接使用bootstrap --&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"./static/gentelella/lib/js/moment.min.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"./static/gentelella/lib/js/daterangepicker.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div></pre></td></tr></table></figure>\n<ul>\n<li>组件中使用</li>\n</ul>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"xdisplay_inputx form-group has-feedback\"</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"form-control has-feedback-left\"</span> <span class=\"attr\">id</span>=<span class=\"string\">\"single_cal3\"</span> <span class=\"attr\">v-model</span>=<span class=\"string\">\"expiresDate\"</span> <span class=\"attr\">placeholder</span>=<span class=\"string\">\"点击选择日期\"</span> <span class=\"attr\">aria-describedby</span>=<span class=\"string\">\"inputSuccess2Status3\"</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">class</span>=<span class=\"string\">\"fa fa-calendar-o form-control-feedback left\"</span> <span class=\"attr\">aria-hidden</span>=<span class=\"string\">\"true\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">id</span>=<span class=\"string\">\"inputSuccess2Status3\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"sr-only\"</span>&gt;</span>(success)<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div></pre></td></tr></table></figure>\n<ul>\n<li>common.js</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">const</span> SetDaterangepicker = <span class=\"function\">(<span class=\"params\">that, eleToSet</span>) =&gt;</span> &#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> today = <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>(),</div><div class=\"line\">        todate = &#123;</div><div class=\"line\">            <span class=\"attr\">year</span>: today.getFullYear(),</div><div class=\"line\">            <span class=\"attr\">month</span>: today.getMonth() + <span class=\"number\">1</span>,</div><div class=\"line\">            <span class=\"attr\">date</span>: today.getDate(),</div><div class=\"line\">        &#125;;</div><div class=\"line\">        <span class=\"comment\">// daterangepicker</span></div><div class=\"line\">    $(eleToSet).daterangepicker(&#123;</div><div class=\"line\">        <span class=\"attr\">singleDatePicker</span>: <span class=\"literal\">true</span>,</div><div class=\"line\">        <span class=\"attr\">format</span>: <span class=\"string\">'YYYY-MM-DD'</span>,</div><div class=\"line\">        <span class=\"attr\">minDate</span>: <span class=\"string\">`<span class=\"subst\">$&#123;todate.year&#125;</span>-<span class=\"subst\">$&#123;todate.month&#125;</span>-<span class=\"subst\">$&#123;todate.date&#125;</span>`</span>,</div><div class=\"line\">        <span class=\"attr\">calender_style</span>: <span class=\"string\">\"picker_3\"</span></div><div class=\"line\">    &#125;, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">start, end, label</span>) </span>&#123;</div><div class=\"line\">        that.expiresDate = start.toISOString().substring(<span class=\"number\">0</span>, <span class=\"number\">10</span>);</div><div class=\"line\">    &#125;);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"其他插件\"><a href=\"#其他插件\" class=\"headerlink\" title=\"其他插件\"></a>其他插件</h3><p>Gentelella模板中还使用了一些其他的插件，像<a href=\"http://select2.github.io/\" target=\"_blank\" rel=\"external\">select2</a>等等，具体的本骚年就不在这里讲了，大家可以自行发挥想象力和创造力去把这些东西融合进来，尽情使用。</p>\n<h2 id=\"创建表单\"><a href=\"#创建表单\" class=\"headerlink\" title=\"创建表单\"></a>创建表单</h2><hr>\n<p>这里我们在创建服务模块弄个简单的表单呗~</p>\n<h3 id=\"ServiceAdd组件\"><a href=\"#ServiceAdd组件\" class=\"headerlink\" title=\"ServiceAdd组件\"></a>ServiceAdd组件</h3><p>直接上代码？（捂脸）<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div><div class=\"line\">104</div><div class=\"line\">105</div><div class=\"line\">106</div><div class=\"line\">107</div><div class=\"line\">108</div><div class=\"line\">109</div><div class=\"line\">110</div><div class=\"line\">111</div><div class=\"line\">112</div><div class=\"line\">113</div><div class=\"line\">114</div><div class=\"line\">115</div><div class=\"line\">116</div><div class=\"line\">117</div><div class=\"line\">118</div><div class=\"line\">119</div><div class=\"line\">120</div><div class=\"line\">121</div><div class=\"line\">122</div><div class=\"line\">123</div><div class=\"line\">124</div><div class=\"line\">125</div><div class=\"line\">126</div><div class=\"line\">127</div><div class=\"line\">128</div><div class=\"line\">129</div><div class=\"line\">130</div><div class=\"line\">131</div><div class=\"line\">132</div><div class=\"line\">133</div><div class=\"line\">134</div><div class=\"line\">135</div><div class=\"line\">136</div><div class=\"line\">137</div><div class=\"line\">138</div><div class=\"line\">139</div><div class=\"line\">140</div><div class=\"line\">141</div><div class=\"line\">142</div><div class=\"line\">143</div><div class=\"line\">144</div><div class=\"line\">145</div><div class=\"line\">146</div><div class=\"line\">147</div><div class=\"line\">148</div><div class=\"line\">149</div><div class=\"line\">150</div><div class=\"line\">151</div><div class=\"line\">152</div><div class=\"line\">153</div><div class=\"line\">154</div><div class=\"line\">155</div><div class=\"line\">156</div><div class=\"line\">157</div><div class=\"line\">158</div><div class=\"line\">159</div><div class=\"line\">160</div><div class=\"line\">161</div><div class=\"line\">162</div><div class=\"line\">163</div><div class=\"line\">164</div><div class=\"line\">165</div><div class=\"line\">166</div><div class=\"line\">167</div><div class=\"line\">168</div><div class=\"line\">169</div><div class=\"line\">170</div><div class=\"line\">171</div><div class=\"line\">172</div><div class=\"line\">173</div><div class=\"line\">174</div><div class=\"line\">175</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;template&gt;</div><div class=\"line\">  &lt;div class=&quot;&quot;&gt;</div><div class=\"line\">    &lt;div class=&quot;page-title&quot;&gt;</div><div class=\"line\">      &lt;div class=&quot;title_left&quot;&gt;</div><div class=\"line\">        &lt;h3&gt;服务管理 &lt;small&gt;&gt; 新建&lt;/small&gt;&lt;/h3&gt;</div><div class=\"line\">      &lt;/div&gt;</div><div class=\"line\">    &lt;/div&gt;</div><div class=\"line\"></div><div class=\"line\">    &lt;div class=&quot;clearfix&quot;&gt;&lt;/div&gt;</div><div class=\"line\">    &lt;!-- normal form --&gt;</div><div class=\"line\">    &lt;div class=&quot;x_panel&quot;&gt;</div><div class=\"line\">      &lt;div class=&quot;x_title&quot;&gt;</div><div class=\"line\">        &lt;h2&gt;新建服务&lt;/h2&gt;</div><div class=\"line\">        &lt;div class=&quot;clearfix&quot;&gt;&lt;/div&gt;</div><div class=\"line\">      &lt;/div&gt;</div><div class=\"line\">      &lt;div class=&quot;x_content&quot;&gt;</div><div class=\"line\">        &lt;br /&gt;</div><div class=\"line\">        &lt;form class=&quot;form-horizontal form-label-left&quot;&gt;</div><div class=\"line\"></div><div class=\"line\">          &lt;div class=&quot;form-group&quot;&gt;</div><div class=\"line\">            &lt;label class=&quot;control-label col-md-3 col-sm-3 col-xs-12&quot;&gt;名称&lt;/label&gt;</div><div class=\"line\">            &lt;div class=&quot;col-md-6 col-sm-8 col-xs-12&quot;&gt;</div><div class=\"line\">              &lt;input type=&quot;text&quot; class=&quot;form-control&quot; placeholder=&quot;&quot; v-model=&quot;name&quot; required&gt;</div><div class=\"line\">            &lt;/div&gt;</div><div class=\"line\">          &lt;/div&gt;</div><div class=\"line\">          &lt;div class=&quot;form-group&quot;&gt;</div><div class=\"line\">            &lt;label class=&quot;control-label col-md-3 col-sm-3 col-xs-12&quot;&gt;编码&lt;/label&gt;</div><div class=\"line\">            &lt;div class=&quot;col-md-6 col-sm-8 col-xs-12&quot;&gt;</div><div class=\"line\">              &lt;input type=&quot;text&quot; class=&quot;form-control&quot; v-model=&quot;code&quot; placeholder=&quot;编码/别名，方便查询使用&quot;&gt;</div><div class=\"line\">            &lt;/div&gt;</div><div class=\"line\">          &lt;/div&gt;</div><div class=\"line\">                    &lt;div class=&quot;form-group&quot;&gt;</div><div class=\"line\">            &lt;label class=&quot;control-label col-md-3 col-sm-3 col-xs-12&quot;&gt;类型&lt;/label&gt;</div><div class=\"line\">            &lt;div class=&quot;col-md-6 col-sm-8 col-xs-12 table-radio&quot;&gt;</div><div class=\"line\">              &lt;label&gt;&lt;input type=&quot;radio&quot; class=&quot;flat&quot; name=&quot;type&quot; value=&quot;type1&quot; v-model=&quot;type&quot;&gt; type1&lt;/label&gt;</div><div class=\"line\">              &lt;label&gt;&lt;input type=&quot;radio&quot; class=&quot;flat&quot; name=&quot;type&quot; value=&quot;type2&quot; v-model=&quot;type&quot;&gt; type2&lt;/label&gt;</div><div class=\"line\">            &lt;/div&gt;</div><div class=\"line\">          &lt;/div&gt;</div><div class=\"line\">          &lt;div class=&quot;form-group&quot;&gt;</div><div class=\"line\">            &lt;label class=&quot;control-label col-md-3 col-sm-3 col-xs-12&quot;&gt;状态&lt;/label&gt;</div><div class=\"line\">            &lt;div class=&quot;col-md-6 col-sm-8 col-xs-12 table-radio&quot;&gt;</div><div class=\"line\">              &lt;div class=&quot;&quot;&gt;</div><div class=\"line\">                &lt;label&gt;&lt;input type=&quot;checkbox&quot; class=&quot;js-switch&quot; name=&quot;state&quot; true=&quot;1&quot; false=&quot;0&quot; checked /&gt; &#123;&#123;state === 1 ? &apos;激活&apos; : &apos;未激活&apos;&#125;&#125;&lt;/label&gt;</div><div class=\"line\">              &lt;/div&gt;</div><div class=\"line\">            &lt;/div&gt;</div><div class=\"line\">          &lt;/div&gt;</div><div class=\"line\">          &lt;div class=&quot;form-group&quot;&gt;</div><div class=\"line\">            &lt;label class=&quot;control-label col-md-3 col-sm-3 col-xs-12&quot;&gt;过期日期&lt;/label&gt;</div><div class=\"line\">            &lt;fieldset class=&quot;col-md-6 col-sm-8 col-xs-12&quot;&gt;</div><div class=\"line\">              &lt;div class=&quot;xdisplay_inputx form-group has-feedback&quot;&gt;</div><div class=\"line\">                &lt;input type=&quot;text&quot; class=&quot;form-control has-feedback-left&quot; id=&quot;single_cal3&quot; v-model=&quot;expiresDate&quot; placeholder=&quot;点击选择日期&quot; aria-describedby=&quot;inputSuccess2Status3&quot;&gt;</div><div class=\"line\">                &lt;span class=&quot;fa fa-calendar-o form-control-feedback left&quot; aria-hidden=&quot;true&quot;&gt;&lt;/span&gt;</div><div class=\"line\">                &lt;span id=&quot;inputSuccess2Status3&quot; class=&quot;sr-only&quot;&gt;(success)&lt;/span&gt;</div><div class=\"line\">              &lt;/div&gt;</div><div class=\"line\">            &lt;/fieldset&gt;</div><div class=\"line\">          &lt;/div&gt;</div><div class=\"line\">          &lt;div class=&quot;form-group&quot;&gt;</div><div class=\"line\">            &lt;label class=&quot;control-label col-md-3 col-sm-3 col-xs-12&quot;&gt;是否接受通知&lt;/label&gt;</div><div class=\"line\">            &lt;div class=&quot;col-md-6 col-sm-8 col-xs-12 table-radio&quot;&gt;</div><div class=\"line\">              &lt;label&gt;&lt;input type=&quot;checkbox&quot; class=&quot;js-switch&quot; name=&quot;directIssue&quot; true=&quot;1&quot; false=&quot;0&quot; checked /&gt; &#123;&#123;directIssue === 1 ? &apos;是&apos; : &apos;否&apos;&#125;&#125;&lt;/label&gt;</div><div class=\"line\">            &lt;/div&gt;</div><div class=\"line\">          &lt;/div&gt;</div><div class=\"line\">          &lt;transition name=&quot;slide-form&quot;&gt;</div><div class=\"line\">            &lt;div class=&quot;form-group slide-form&quot; v-show=&quot;directIssue === 1&quot;&gt;</div><div class=\"line\">              &lt;label class=&quot;control-label col-md-3 col-sm-3 col-xs-12&quot;&gt;通知邮件&lt;/label&gt;</div><div class=\"line\">              &lt;div class=&quot;col-md-6 col-sm-8 col-xs-12&quot;&gt;</div><div class=\"line\">                &lt;input type=&quot;email&quot; class=&quot;form-control&quot; name=&quot;email&quot; v-model=&quot;email&quot;&gt;</div><div class=\"line\">              &lt;/div&gt;</div><div class=\"line\">            &lt;/div&gt;</div><div class=\"line\">          &lt;/transition&gt;</div><div class=\"line\">          &lt;div class=&quot;form-group&quot;&gt;</div><div class=\"line\">            &lt;label class=&quot;control-label col-md-3 col-sm-3 col-xs-12&quot;&gt;备注&lt;/label&gt;</div><div class=\"line\">            &lt;div class=&quot;col-md-6 col-sm-8 col-xs-12&quot;&gt;</div><div class=\"line\">              &lt;textarea class=&quot;form-control&quot; name=&quot;remark&quot; v-model=&quot;remark&quot;&gt;&lt;/textarea&gt;</div><div class=\"line\">            &lt;/div&gt;</div><div class=\"line\">          &lt;/div&gt;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">          &lt;div class=&quot;ln_solid&quot;&gt;&lt;/div&gt;</div><div class=\"line\">          &lt;div class=&quot;form-group&quot;&gt;</div><div class=\"line\">                        &lt;!--错误信息显示--&gt;</div><div class=\"line\">                        &lt;div class=&quot;col-md-6 col-sm-8 col-xs-12 col-md-offset-3&quot;&gt;</div><div class=\"line\">                            &lt;div class=&quot;alert alert-danger alert-dismissible fade in&quot; role=&quot;alert&quot; v-show=&quot;error.shown&quot;&gt;</div><div class=\"line\">                &lt;strong&gt;错误：&lt;/strong&gt; &#123;&#123;error.text&#125;&#125;</div><div class=\"line\">              &lt;/div&gt;</div><div class=\"line\">            &lt;/div&gt;</div><div class=\"line\">            &lt;div class=&quot;col-md-9 col-sm-9 col-xs-12 col-md-offset-3&quot;&gt;</div><div class=\"line\">              &lt;a class=&quot;btn btn-success&quot; v-on:click=&quot;submit&quot;&gt;提交&lt;/a&gt;</div><div class=\"line\">              &lt;router-link to=&quot;/app/terminals&quot; class=&quot;btn btn-default&quot;&gt;取消&lt;/router-link&gt;</div><div class=\"line\">            &lt;/div&gt;</div><div class=\"line\">          &lt;/div&gt;</div><div class=\"line\"></div><div class=\"line\">        &lt;/form&gt;</div><div class=\"line\">      &lt;/div&gt;</div><div class=\"line\">    &lt;/div&gt;</div><div class=\"line\">  &lt;/div&gt;</div><div class=\"line\">  &lt;!-- /normal form --&gt;</div><div class=\"line\">&lt;/template&gt;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">&lt;script&gt;</div><div class=\"line\">    var initData = () =&gt; &#123;</div><div class=\"line\">        return &#123;</div><div class=\"line\">            isNew: true,</div><div class=\"line\">            name: &apos;&apos;,</div><div class=\"line\">            code: &apos;&apos;,</div><div class=\"line\">            expiresDate: &apos;&apos;,</div><div class=\"line\">            email: &apos;&apos;,</div><div class=\"line\">            type: &apos;type1&apos;,</div><div class=\"line\">            directIssue: 1,</div><div class=\"line\">            state: 1,</div><div class=\"line\">            terminalId: &apos;&apos;,</div><div class=\"line\">            appKey: &apos;&apos;,</div><div class=\"line\">            appSecret: &apos;&apos;,</div><div class=\"line\">            activeDate: &apos;&apos;,</div><div class=\"line\">            expiresDate: &apos;&apos;,</div><div class=\"line\">            remark: &apos;&apos;,</div><div class=\"line\">            error: &#123;</div><div class=\"line\">                text: &apos;&apos;,</div><div class=\"line\">                shown: false</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;;</div><div class=\"line\">    &#125;;</div><div class=\"line\">    export default &#123;</div><div class=\"line\">        name: &apos;SeviceAdd&apos;,</div><div class=\"line\">        data() &#123;</div><div class=\"line\">            return initData();</div><div class=\"line\">        &#125;,</div><div class=\"line\">        methods: &#123;</div><div class=\"line\">            setChange(item) &#123;</div><div class=\"line\">                var that = this;</div><div class=\"line\">                // 设置插件默认值</div><div class=\"line\">                if (item.state !== that.state) &#123;</div><div class=\"line\">                    $(&apos;.js-switch[name=&quot;state&quot;]&apos;).trigger(&apos;click&apos;);</div><div class=\"line\">                &#125;</div><div class=\"line\">                if (item.directIssue !== that.directIssue) &#123;</div><div class=\"line\">                    $(&apos;.js-switch[name=&quot;directIssue&quot;]&apos;).trigger(&apos;click&apos;);</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;,</div><div class=\"line\">            submit() &#123;</div><div class=\"line\">                var that = this,</div><div class=\"line\">                    text;</div><div class=\"line\">                // 先做一些简单的校验，不通过则显示错误信息</div><div class=\"line\">                if (!that.name) &#123;</div><div class=\"line\">                    text = &apos;请填写名称&apos;;</div><div class=\"line\">                &#125;</div><div class=\"line\">                if (text) &#123;</div><div class=\"line\">                    that.error.text = text;</div><div class=\"line\">                    that.error.shown = true;</div><div class=\"line\">                    return;</div><div class=\"line\">                &#125;</div><div class=\"line\">                that.error.shown = false;</div><div class=\"line\">                var that = this;</div><div class=\"line\"></div><div class=\"line\">                that.$router.push(&apos;/app/terminals&apos;);</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;,</div><div class=\"line\">        mounted() &#123;</div><div class=\"line\">            var that = this;</div><div class=\"line\">            var data = initData();</div><div class=\"line\">            // 设置初始值</div><div class=\"line\">            $.each(data, (key, item) =&gt; &#123;</div><div class=\"line\">                that.$set(that, key, item);</div><div class=\"line\">            &#125;);</div><div class=\"line\">            // 初始化iCheck</div><div class=\"line\">            SetICheck(that);</div><div class=\"line\">            // 初始化Switchery</div><div class=\"line\">            SetSwitchery(that);</div><div class=\"line\">            // 初始化Daterangepicker</div><div class=\"line\">            SetDaterangepicker(that, &apos;#single_cal3&apos;);</div><div class=\"line\">            // 设置插件默认值</div><div class=\"line\">            that.setChange(data);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&lt;/script&gt;</div></pre></td></tr></table></figure></p>\n<h3 id=\"页面效果\"><a href=\"#页面效果\" class=\"headerlink\" title=\"页面效果\"></a>页面效果</h3><p><img src=\"http://o905ne85q.bkt.clouddn.com/EB7E.tmp.png\" alt=\"image\"></p>\n<h2 id=\"结束语\"><a href=\"#结束语\" class=\"headerlink\" title=\"结束语\"></a>结束语</h2><hr>\n<p>这里只是用到最简单的css过渡，但是vue的过渡效果以及过渡状态还是很牛逼的，大家有兴趣的可以去看看<a href=\"https://vuefe.cn/guide/transitions.html\" target=\"_blank\" rel=\"external\">官方文档</a>然后多尝试一下呢，酷酷的。<br><a href=\"https://github.com/godbasin/godbasin.github.io/tree/blog-codes/vue2-notes/6-form-with-some-plugins\" target=\"_blank\" rel=\"external\">此处查看项目代码</a><br><a href=\"http://ofyya1gfg.bkt.clouddn.com/6-form-with-some-plugins/index.html#/app/add/service\" target=\"_blank\" rel=\"external\">此处查看页面效果</a></p>\n","excerpt":"<p>最近在使用Vue2作为项目中前端的框架，《Vue2使用笔记》系列用于记录过程中的一些使用和解决方法。<br>本文记录vue中使用各种插件和库，以及创建简单表单的使用过程。<br>","more":"</p>\n<h2 id=\"一些插件\"><a href=\"#一些插件\" class=\"headerlink\" title=\"一些插件\"></a>一些插件</h2><hr>\n<p>在开发中，遇到一些小的项目，拓展和维护都不会太多，这时候我们可以使用一些现成的插件和库进行快速搭建。<br>这里我们使用到以下的一些插件：</p>\n<ul>\n<li>iCheck</li>\n<li>switchery</li>\n<li>daterangepicker</li>\n</ul>\n<p>后面还会用到dataTable，也是很棒的一个插件库，后续章节会有相关的介绍。</p>\n<p>这里我们将这些插件的调用放到一个统一的文件common.js中进行管理，封装统一的接口，方便调用。</p>\n<h3 id=\"iCheck\"><a href=\"#iCheck\" class=\"headerlink\" title=\"iCheck\"></a>iCheck</h3><p><a href=\"http://icheck.fronteed.com/\">iCheck</a>是个基于jQuery的表单选项插件，有多种可以选的皮肤，兼容PC端和移动端。<br>这里我们选用绿色的flat皮肤使用。</p>\n<ul>\n<li>引入相关文件</li>\n</ul>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">&lt;!-- index.html --&gt;</span></div><div class=\"line\"><span class=\"comment\">&lt;!-- iCheck style --&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">link</span> <span class=\"attr\">href</span>=<span class=\"string\">\"./static/gentelella/lib/css/iCheck/green.css\"</span> <span class=\"attr\">rel</span>=<span class=\"string\">\"stylesheet\"</span>&gt;</span></div><div class=\"line\"><span class=\"comment\">&lt;!-- iCheck script --&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"./static/gentelella/lib/js/icheck.min.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>当然，我们调用iCheck可以自定义一些属性，作为规范或者约定来使用。<br>这里本骚年就默认使用name作为组件data的值，而value作为选中值。</p>\n<ul>\n<li>组件中使用</li>\n</ul>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">label</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"radio\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"flat\"</span> <span class=\"attr\">name</span>=<span class=\"string\">\"type\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"type1\"</span> <span class=\"attr\">v-model</span>=<span class=\"string\">\"type\"</span>&gt;</span> type1<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">label</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"radio\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"flat\"</span> <span class=\"attr\">name</span>=<span class=\"string\">\"type\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"type2\"</span> <span class=\"attr\">v-model</span>=<span class=\"string\">\"type\"</span>&gt;</span> type2<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></div></pre></td></tr></table></figure>\n<ul>\n<li>common.js中的公用接口</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// common.js</span></div><div class=\"line\"><span class=\"keyword\">const</span> SetICheck = <span class=\"function\"><span class=\"params\">that</span> =&gt;</span> &#123;</div><div class=\"line\">    <span class=\"comment\">// iCheck</span></div><div class=\"line\">    <span class=\"keyword\">if</span> ($(<span class=\"string\">\"input.flat\"</span>)[<span class=\"number\">0</span>]) &#123;</div><div class=\"line\">        $(<span class=\"string\">'input.flat'</span>).iCheck(&#123;</div><div class=\"line\">            <span class=\"attr\">checkboxClass</span>: <span class=\"string\">'icheckbox_flat-green'</span>,</div><div class=\"line\">            <span class=\"attr\">radioClass</span>: <span class=\"string\">'iradio_flat-green'</span></div><div class=\"line\">        &#125;);</div><div class=\"line\">        $(<span class=\"string\">'input'</span>).on(<span class=\"string\">'ifChecked'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">event</span>) </span>&#123;</div><div class=\"line\">      <span class=\"comment\">// 传入vue组件对象，对其进行赋值</span></div><div class=\"line\">            that.$set(that, event.currentTarget.name, event.currentTarget.value);</div><div class=\"line\">        &#125;);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<h3 id=\"switchery\"><a href=\"#switchery\" class=\"headerlink\" title=\"switchery\"></a>switchery</h3><p><a href=\"https://github.com/abpetkov/switchery\">switchery</a>是个简单的JavaScript组件，可以帮助用户把默认的HTML复选框转换成漂亮iOS7样式风格。<br>具体的api和相关介绍大家可以自行去查文档，这里就不多说啦，直接上码：</p>\n<ul>\n<li>引入相关文件</li>\n</ul>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">&lt;!-- Switchery style--&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">link</span> <span class=\"attr\">href</span>=<span class=\"string\">\"./static/gentelella/lib/css/switchery.min.css\"</span> <span class=\"attr\">rel</span>=<span class=\"string\">\"stylesheet\"</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">&lt;!-- Switchery script--&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"./static/gentelella/lib/js/switchery.min.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div></pre></td></tr></table></figure>\n<ul>\n<li>组件中使用</li>\n</ul>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">&lt;!-- true为启用值，false为关闭值，name为data值--&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">label</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"checkbox\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"js-switch\"</span> <span class=\"attr\">name</span>=<span class=\"string\">\"state\"</span> <span class=\"attr\">true</span>=<span class=\"string\">\"1\"</span> <span class=\"attr\">false</span>=<span class=\"string\">\"0\"</span> <span class=\"attr\">checked</span> /&gt;</span> &#123;&#123;state === 1 ? '激活' : '未激活'&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></div></pre></td></tr></table></figure>\n<ul>\n<li>common.js</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">const</span> SetSwitchery = <span class=\"function\"><span class=\"params\">that</span> =&gt;</span> &#123;</div><div class=\"line\">    <span class=\"comment\">// Switchery</span></div><div class=\"line\">    <span class=\"keyword\">if</span> ($(<span class=\"string\">\".js-switch\"</span>)[<span class=\"number\">0</span>]) &#123;</div><div class=\"line\">        <span class=\"keyword\">var</span> elems = <span class=\"built_in\">Array</span>.prototype.slice.call(<span class=\"built_in\">document</span>.querySelectorAll(<span class=\"string\">'.js-switch'</span>));</div><div class=\"line\">        elems.forEach(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">html</span>) </span>&#123;</div><div class=\"line\">            <span class=\"keyword\">var</span> switchery = <span class=\"keyword\">new</span> Switchery(html, &#123;</div><div class=\"line\">                <span class=\"attr\">color</span>: <span class=\"string\">'#26B99A'</span></div><div class=\"line\">            &#125;);</div><div class=\"line\">            html.onchange = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</div><div class=\"line\">                <span class=\"keyword\">var</span> value = html.checked === <span class=\"literal\">true</span> ? <span class=\"built_in\">Number</span>(html.attributes[<span class=\"string\">'true'</span>].value) : <span class=\"built_in\">Number</span>(html.attributes[<span class=\"string\">'false'</span>].value);</div><div class=\"line\">                that.$set(that, html.name, value);</div><div class=\"line\">            &#125;;</div><div class=\"line\">        &#125;);</div><div class=\"line\"></div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<h3 id=\"daterangepicker\"><a href=\"#daterangepicker\" class=\"headerlink\" title=\"daterangepicker\"></a>daterangepicker</h3><p><a href=\"http://www.daterangepicker.com/\">daterangepicker</a>是个基于bootstrap的日历插件，有单日历和双日历，很方便使用，样式也是棒棒哒。<br>不废话，上码：</p>\n<ul>\n<li>引入相关文件</li>\n</ul>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">&lt;!-- bootstrap-daterangepicker --&gt;</span></div><div class=\"line\"><span class=\"comment\">&lt;!-- 样式直接使用bootstrap --&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"./static/gentelella/lib/js/moment.min.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"./static/gentelella/lib/js/daterangepicker.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div></pre></td></tr></table></figure>\n<ul>\n<li>组件中使用</li>\n</ul>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"xdisplay_inputx form-group has-feedback\"</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"form-control has-feedback-left\"</span> <span class=\"attr\">id</span>=<span class=\"string\">\"single_cal3\"</span> <span class=\"attr\">v-model</span>=<span class=\"string\">\"expiresDate\"</span> <span class=\"attr\">placeholder</span>=<span class=\"string\">\"点击选择日期\"</span> <span class=\"attr\">aria-describedby</span>=<span class=\"string\">\"inputSuccess2Status3\"</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">class</span>=<span class=\"string\">\"fa fa-calendar-o form-control-feedback left\"</span> <span class=\"attr\">aria-hidden</span>=<span class=\"string\">\"true\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">id</span>=<span class=\"string\">\"inputSuccess2Status3\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"sr-only\"</span>&gt;</span>(success)<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div></pre></td></tr></table></figure>\n<ul>\n<li>common.js</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">const</span> SetDaterangepicker = <span class=\"function\">(<span class=\"params\">that, eleToSet</span>) =&gt;</span> &#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> today = <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>(),</div><div class=\"line\">        todate = &#123;</div><div class=\"line\">            <span class=\"attr\">year</span>: today.getFullYear(),</div><div class=\"line\">            <span class=\"attr\">month</span>: today.getMonth() + <span class=\"number\">1</span>,</div><div class=\"line\">            <span class=\"attr\">date</span>: today.getDate(),</div><div class=\"line\">        &#125;;</div><div class=\"line\">        <span class=\"comment\">// daterangepicker</span></div><div class=\"line\">    $(eleToSet).daterangepicker(&#123;</div><div class=\"line\">        <span class=\"attr\">singleDatePicker</span>: <span class=\"literal\">true</span>,</div><div class=\"line\">        <span class=\"attr\">format</span>: <span class=\"string\">'YYYY-MM-DD'</span>,</div><div class=\"line\">        <span class=\"attr\">minDate</span>: <span class=\"string\">`<span class=\"subst\">$&#123;todate.year&#125;</span>-<span class=\"subst\">$&#123;todate.month&#125;</span>-<span class=\"subst\">$&#123;todate.date&#125;</span>`</span>,</div><div class=\"line\">        <span class=\"attr\">calender_style</span>: <span class=\"string\">\"picker_3\"</span></div><div class=\"line\">    &#125;, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">start, end, label</span>) </span>&#123;</div><div class=\"line\">        that.expiresDate = start.toISOString().substring(<span class=\"number\">0</span>, <span class=\"number\">10</span>);</div><div class=\"line\">    &#125;);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"其他插件\"><a href=\"#其他插件\" class=\"headerlink\" title=\"其他插件\"></a>其他插件</h3><p>Gentelella模板中还使用了一些其他的插件，像<a href=\"http://select2.github.io/\">select2</a>等等，具体的本骚年就不在这里讲了，大家可以自行发挥想象力和创造力去把这些东西融合进来，尽情使用。</p>\n<h2 id=\"创建表单\"><a href=\"#创建表单\" class=\"headerlink\" title=\"创建表单\"></a>创建表单</h2><hr>\n<p>这里我们在创建服务模块弄个简单的表单呗~</p>\n<h3 id=\"ServiceAdd组件\"><a href=\"#ServiceAdd组件\" class=\"headerlink\" title=\"ServiceAdd组件\"></a>ServiceAdd组件</h3><p>直接上代码？（捂脸）<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div><div class=\"line\">104</div><div class=\"line\">105</div><div class=\"line\">106</div><div class=\"line\">107</div><div class=\"line\">108</div><div class=\"line\">109</div><div class=\"line\">110</div><div class=\"line\">111</div><div class=\"line\">112</div><div class=\"line\">113</div><div class=\"line\">114</div><div class=\"line\">115</div><div class=\"line\">116</div><div class=\"line\">117</div><div class=\"line\">118</div><div class=\"line\">119</div><div class=\"line\">120</div><div class=\"line\">121</div><div class=\"line\">122</div><div class=\"line\">123</div><div class=\"line\">124</div><div class=\"line\">125</div><div class=\"line\">126</div><div class=\"line\">127</div><div class=\"line\">128</div><div class=\"line\">129</div><div class=\"line\">130</div><div class=\"line\">131</div><div class=\"line\">132</div><div class=\"line\">133</div><div class=\"line\">134</div><div class=\"line\">135</div><div class=\"line\">136</div><div class=\"line\">137</div><div class=\"line\">138</div><div class=\"line\">139</div><div class=\"line\">140</div><div class=\"line\">141</div><div class=\"line\">142</div><div class=\"line\">143</div><div class=\"line\">144</div><div class=\"line\">145</div><div class=\"line\">146</div><div class=\"line\">147</div><div class=\"line\">148</div><div class=\"line\">149</div><div class=\"line\">150</div><div class=\"line\">151</div><div class=\"line\">152</div><div class=\"line\">153</div><div class=\"line\">154</div><div class=\"line\">155</div><div class=\"line\">156</div><div class=\"line\">157</div><div class=\"line\">158</div><div class=\"line\">159</div><div class=\"line\">160</div><div class=\"line\">161</div><div class=\"line\">162</div><div class=\"line\">163</div><div class=\"line\">164</div><div class=\"line\">165</div><div class=\"line\">166</div><div class=\"line\">167</div><div class=\"line\">168</div><div class=\"line\">169</div><div class=\"line\">170</div><div class=\"line\">171</div><div class=\"line\">172</div><div class=\"line\">173</div><div class=\"line\">174</div><div class=\"line\">175</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;template&gt;</div><div class=\"line\">  &lt;div class=&quot;&quot;&gt;</div><div class=\"line\">    &lt;div class=&quot;page-title&quot;&gt;</div><div class=\"line\">      &lt;div class=&quot;title_left&quot;&gt;</div><div class=\"line\">        &lt;h3&gt;服务管理 &lt;small&gt;&gt; 新建&lt;/small&gt;&lt;/h3&gt;</div><div class=\"line\">      &lt;/div&gt;</div><div class=\"line\">    &lt;/div&gt;</div><div class=\"line\"></div><div class=\"line\">    &lt;div class=&quot;clearfix&quot;&gt;&lt;/div&gt;</div><div class=\"line\">    &lt;!-- normal form --&gt;</div><div class=\"line\">    &lt;div class=&quot;x_panel&quot;&gt;</div><div class=\"line\">      &lt;div class=&quot;x_title&quot;&gt;</div><div class=\"line\">        &lt;h2&gt;新建服务&lt;/h2&gt;</div><div class=\"line\">        &lt;div class=&quot;clearfix&quot;&gt;&lt;/div&gt;</div><div class=\"line\">      &lt;/div&gt;</div><div class=\"line\">      &lt;div class=&quot;x_content&quot;&gt;</div><div class=\"line\">        &lt;br /&gt;</div><div class=\"line\">        &lt;form class=&quot;form-horizontal form-label-left&quot;&gt;</div><div class=\"line\"></div><div class=\"line\">          &lt;div class=&quot;form-group&quot;&gt;</div><div class=\"line\">            &lt;label class=&quot;control-label col-md-3 col-sm-3 col-xs-12&quot;&gt;名称&lt;/label&gt;</div><div class=\"line\">            &lt;div class=&quot;col-md-6 col-sm-8 col-xs-12&quot;&gt;</div><div class=\"line\">              &lt;input type=&quot;text&quot; class=&quot;form-control&quot; placeholder=&quot;&quot; v-model=&quot;name&quot; required&gt;</div><div class=\"line\">            &lt;/div&gt;</div><div class=\"line\">          &lt;/div&gt;</div><div class=\"line\">          &lt;div class=&quot;form-group&quot;&gt;</div><div class=\"line\">            &lt;label class=&quot;control-label col-md-3 col-sm-3 col-xs-12&quot;&gt;编码&lt;/label&gt;</div><div class=\"line\">            &lt;div class=&quot;col-md-6 col-sm-8 col-xs-12&quot;&gt;</div><div class=\"line\">              &lt;input type=&quot;text&quot; class=&quot;form-control&quot; v-model=&quot;code&quot; placeholder=&quot;编码/别名，方便查询使用&quot;&gt;</div><div class=\"line\">            &lt;/div&gt;</div><div class=\"line\">          &lt;/div&gt;</div><div class=\"line\">                    &lt;div class=&quot;form-group&quot;&gt;</div><div class=\"line\">            &lt;label class=&quot;control-label col-md-3 col-sm-3 col-xs-12&quot;&gt;类型&lt;/label&gt;</div><div class=\"line\">            &lt;div class=&quot;col-md-6 col-sm-8 col-xs-12 table-radio&quot;&gt;</div><div class=\"line\">              &lt;label&gt;&lt;input type=&quot;radio&quot; class=&quot;flat&quot; name=&quot;type&quot; value=&quot;type1&quot; v-model=&quot;type&quot;&gt; type1&lt;/label&gt;</div><div class=\"line\">              &lt;label&gt;&lt;input type=&quot;radio&quot; class=&quot;flat&quot; name=&quot;type&quot; value=&quot;type2&quot; v-model=&quot;type&quot;&gt; type2&lt;/label&gt;</div><div class=\"line\">            &lt;/div&gt;</div><div class=\"line\">          &lt;/div&gt;</div><div class=\"line\">          &lt;div class=&quot;form-group&quot;&gt;</div><div class=\"line\">            &lt;label class=&quot;control-label col-md-3 col-sm-3 col-xs-12&quot;&gt;状态&lt;/label&gt;</div><div class=\"line\">            &lt;div class=&quot;col-md-6 col-sm-8 col-xs-12 table-radio&quot;&gt;</div><div class=\"line\">              &lt;div class=&quot;&quot;&gt;</div><div class=\"line\">                &lt;label&gt;&lt;input type=&quot;checkbox&quot; class=&quot;js-switch&quot; name=&quot;state&quot; true=&quot;1&quot; false=&quot;0&quot; checked /&gt; &#123;&#123;state === 1 ? &apos;激活&apos; : &apos;未激活&apos;&#125;&#125;&lt;/label&gt;</div><div class=\"line\">              &lt;/div&gt;</div><div class=\"line\">            &lt;/div&gt;</div><div class=\"line\">          &lt;/div&gt;</div><div class=\"line\">          &lt;div class=&quot;form-group&quot;&gt;</div><div class=\"line\">            &lt;label class=&quot;control-label col-md-3 col-sm-3 col-xs-12&quot;&gt;过期日期&lt;/label&gt;</div><div class=\"line\">            &lt;fieldset class=&quot;col-md-6 col-sm-8 col-xs-12&quot;&gt;</div><div class=\"line\">              &lt;div class=&quot;xdisplay_inputx form-group has-feedback&quot;&gt;</div><div class=\"line\">                &lt;input type=&quot;text&quot; class=&quot;form-control has-feedback-left&quot; id=&quot;single_cal3&quot; v-model=&quot;expiresDate&quot; placeholder=&quot;点击选择日期&quot; aria-describedby=&quot;inputSuccess2Status3&quot;&gt;</div><div class=\"line\">                &lt;span class=&quot;fa fa-calendar-o form-control-feedback left&quot; aria-hidden=&quot;true&quot;&gt;&lt;/span&gt;</div><div class=\"line\">                &lt;span id=&quot;inputSuccess2Status3&quot; class=&quot;sr-only&quot;&gt;(success)&lt;/span&gt;</div><div class=\"line\">              &lt;/div&gt;</div><div class=\"line\">            &lt;/fieldset&gt;</div><div class=\"line\">          &lt;/div&gt;</div><div class=\"line\">          &lt;div class=&quot;form-group&quot;&gt;</div><div class=\"line\">            &lt;label class=&quot;control-label col-md-3 col-sm-3 col-xs-12&quot;&gt;是否接受通知&lt;/label&gt;</div><div class=\"line\">            &lt;div class=&quot;col-md-6 col-sm-8 col-xs-12 table-radio&quot;&gt;</div><div class=\"line\">              &lt;label&gt;&lt;input type=&quot;checkbox&quot; class=&quot;js-switch&quot; name=&quot;directIssue&quot; true=&quot;1&quot; false=&quot;0&quot; checked /&gt; &#123;&#123;directIssue === 1 ? &apos;是&apos; : &apos;否&apos;&#125;&#125;&lt;/label&gt;</div><div class=\"line\">            &lt;/div&gt;</div><div class=\"line\">          &lt;/div&gt;</div><div class=\"line\">          &lt;transition name=&quot;slide-form&quot;&gt;</div><div class=\"line\">            &lt;div class=&quot;form-group slide-form&quot; v-show=&quot;directIssue === 1&quot;&gt;</div><div class=\"line\">              &lt;label class=&quot;control-label col-md-3 col-sm-3 col-xs-12&quot;&gt;通知邮件&lt;/label&gt;</div><div class=\"line\">              &lt;div class=&quot;col-md-6 col-sm-8 col-xs-12&quot;&gt;</div><div class=\"line\">                &lt;input type=&quot;email&quot; class=&quot;form-control&quot; name=&quot;email&quot; v-model=&quot;email&quot;&gt;</div><div class=\"line\">              &lt;/div&gt;</div><div class=\"line\">            &lt;/div&gt;</div><div class=\"line\">          &lt;/transition&gt;</div><div class=\"line\">          &lt;div class=&quot;form-group&quot;&gt;</div><div class=\"line\">            &lt;label class=&quot;control-label col-md-3 col-sm-3 col-xs-12&quot;&gt;备注&lt;/label&gt;</div><div class=\"line\">            &lt;div class=&quot;col-md-6 col-sm-8 col-xs-12&quot;&gt;</div><div class=\"line\">              &lt;textarea class=&quot;form-control&quot; name=&quot;remark&quot; v-model=&quot;remark&quot;&gt;&lt;/textarea&gt;</div><div class=\"line\">            &lt;/div&gt;</div><div class=\"line\">          &lt;/div&gt;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">          &lt;div class=&quot;ln_solid&quot;&gt;&lt;/div&gt;</div><div class=\"line\">          &lt;div class=&quot;form-group&quot;&gt;</div><div class=\"line\">                        &lt;!--错误信息显示--&gt;</div><div class=\"line\">                        &lt;div class=&quot;col-md-6 col-sm-8 col-xs-12 col-md-offset-3&quot;&gt;</div><div class=\"line\">                            &lt;div class=&quot;alert alert-danger alert-dismissible fade in&quot; role=&quot;alert&quot; v-show=&quot;error.shown&quot;&gt;</div><div class=\"line\">                &lt;strong&gt;错误：&lt;/strong&gt; &#123;&#123;error.text&#125;&#125;</div><div class=\"line\">              &lt;/div&gt;</div><div class=\"line\">            &lt;/div&gt;</div><div class=\"line\">            &lt;div class=&quot;col-md-9 col-sm-9 col-xs-12 col-md-offset-3&quot;&gt;</div><div class=\"line\">              &lt;a class=&quot;btn btn-success&quot; v-on:click=&quot;submit&quot;&gt;提交&lt;/a&gt;</div><div class=\"line\">              &lt;router-link to=&quot;/app/terminals&quot; class=&quot;btn btn-default&quot;&gt;取消&lt;/router-link&gt;</div><div class=\"line\">            &lt;/div&gt;</div><div class=\"line\">          &lt;/div&gt;</div><div class=\"line\"></div><div class=\"line\">        &lt;/form&gt;</div><div class=\"line\">      &lt;/div&gt;</div><div class=\"line\">    &lt;/div&gt;</div><div class=\"line\">  &lt;/div&gt;</div><div class=\"line\">  &lt;!-- /normal form --&gt;</div><div class=\"line\">&lt;/template&gt;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">&lt;script&gt;</div><div class=\"line\">    var initData = () =&gt; &#123;</div><div class=\"line\">        return &#123;</div><div class=\"line\">            isNew: true,</div><div class=\"line\">            name: &apos;&apos;,</div><div class=\"line\">            code: &apos;&apos;,</div><div class=\"line\">            expiresDate: &apos;&apos;,</div><div class=\"line\">            email: &apos;&apos;,</div><div class=\"line\">            type: &apos;type1&apos;,</div><div class=\"line\">            directIssue: 1,</div><div class=\"line\">            state: 1,</div><div class=\"line\">            terminalId: &apos;&apos;,</div><div class=\"line\">            appKey: &apos;&apos;,</div><div class=\"line\">            appSecret: &apos;&apos;,</div><div class=\"line\">            activeDate: &apos;&apos;,</div><div class=\"line\">            expiresDate: &apos;&apos;,</div><div class=\"line\">            remark: &apos;&apos;,</div><div class=\"line\">            error: &#123;</div><div class=\"line\">                text: &apos;&apos;,</div><div class=\"line\">                shown: false</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;;</div><div class=\"line\">    &#125;;</div><div class=\"line\">    export default &#123;</div><div class=\"line\">        name: &apos;SeviceAdd&apos;,</div><div class=\"line\">        data() &#123;</div><div class=\"line\">            return initData();</div><div class=\"line\">        &#125;,</div><div class=\"line\">        methods: &#123;</div><div class=\"line\">            setChange(item) &#123;</div><div class=\"line\">                var that = this;</div><div class=\"line\">                // 设置插件默认值</div><div class=\"line\">                if (item.state !== that.state) &#123;</div><div class=\"line\">                    $(&apos;.js-switch[name=&quot;state&quot;]&apos;).trigger(&apos;click&apos;);</div><div class=\"line\">                &#125;</div><div class=\"line\">                if (item.directIssue !== that.directIssue) &#123;</div><div class=\"line\">                    $(&apos;.js-switch[name=&quot;directIssue&quot;]&apos;).trigger(&apos;click&apos;);</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;,</div><div class=\"line\">            submit() &#123;</div><div class=\"line\">                var that = this,</div><div class=\"line\">                    text;</div><div class=\"line\">                // 先做一些简单的校验，不通过则显示错误信息</div><div class=\"line\">                if (!that.name) &#123;</div><div class=\"line\">                    text = &apos;请填写名称&apos;;</div><div class=\"line\">                &#125;</div><div class=\"line\">                if (text) &#123;</div><div class=\"line\">                    that.error.text = text;</div><div class=\"line\">                    that.error.shown = true;</div><div class=\"line\">                    return;</div><div class=\"line\">                &#125;</div><div class=\"line\">                that.error.shown = false;</div><div class=\"line\">                var that = this;</div><div class=\"line\"></div><div class=\"line\">                that.$router.push(&apos;/app/terminals&apos;);</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;,</div><div class=\"line\">        mounted() &#123;</div><div class=\"line\">            var that = this;</div><div class=\"line\">            var data = initData();</div><div class=\"line\">            // 设置初始值</div><div class=\"line\">            $.each(data, (key, item) =&gt; &#123;</div><div class=\"line\">                that.$set(that, key, item);</div><div class=\"line\">            &#125;);</div><div class=\"line\">            // 初始化iCheck</div><div class=\"line\">            SetICheck(that);</div><div class=\"line\">            // 初始化Switchery</div><div class=\"line\">            SetSwitchery(that);</div><div class=\"line\">            // 初始化Daterangepicker</div><div class=\"line\">            SetDaterangepicker(that, &apos;#single_cal3&apos;);</div><div class=\"line\">            // 设置插件默认值</div><div class=\"line\">            that.setChange(data);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&lt;/script&gt;</div></pre></td></tr></table></figure></p>\n<h3 id=\"页面效果\"><a href=\"#页面效果\" class=\"headerlink\" title=\"页面效果\"></a>页面效果</h3><p><img src=\"http://o905ne85q.bkt.clouddn.com/EB7E.tmp.png\" alt=\"image\"></p>\n<h2 id=\"结束语\"><a href=\"#结束语\" class=\"headerlink\" title=\"结束语\"></a>结束语</h2><hr>\n<p>这里只是用到最简单的css过渡，但是vue的过渡效果以及过渡状态还是很牛逼的，大家有兴趣的可以去看看<a href=\"https://vuefe.cn/guide/transitions.html\">官方文档</a>然后多尝试一下呢，酷酷的。<br><a href=\"https://github.com/godbasin/godbasin.github.io/tree/blog-codes/vue2-notes/6-form-with-some-plugins\">此处查看项目代码</a><br><a href=\"http://ofyya1gfg.bkt.clouddn.com/6-form-with-some-plugins/index.html#/app/add/service\">此处查看页面效果</a></p>"},{"title":"Vue2使用笔记8--vue与datatables(二)：服务端渲染","date":"2016-12-11T08:06:54.000Z","_content":"最近在使用Vue2作为项目中前端的框架，《Vue2使用笔记》系列用于记录过程中的一些使用和解决方法。\n本文记录vue中调用datatables，使用datatables服务器处理的过程。\n<!--more-->\n\n## datatables服务器处理\n---\n上一节我们使用静态html进行初始化dataTables，有一个很局限的问题，就是需要一次性加载完所有的数据。\n但是无论从浏览器还是服务端来看，都会发现这并不是一个好选择。因此我们可以开启服务器处理的方式。\n\n### 服务器模式\nDataTables提供了服务器模式，把本来客户端所做的事情交给服务器去处理，比如排序（order）、分页（paging）、过滤（filter）。\n对于客户端来说这些操作都是比较消耗资源的， 所以打开服务器模式后不用担心这些操作会影响到用户体验。\n\n当你打开服务器模式的时候，每次绘制表格的时候，DataTables会给服务器发送一个请求（包括当前分页，排序，搜索参数等等）。DataTables会向服务器发送一些参数去执行所需要的处理，然后在服务器组装好相应的数据返回给DataTables。\n\n开启服务器模式需要使用serverSideOption和ajaxOption ajax不定时一讲选项。\n\n### 服务端处理\n当开启服务器模式时，服务端接受到的参数和需要返回的数据都是固定的，固此时需要服务端进行相关的处理。\n\n由于这里我们只讨论前端相关的，固感兴趣的小伙伴麻烦自行查看文档：\n[服务器处理(Server-side processing)](http://datatables.club/manual/server-side.html)\n\n\n### 返回的数据处理\n这时候服务端返回的数据格式为：\n``` json\n{\n    \"draw\": 1,\n    \"recordsTotal\": 57,\n    \"recordsFiltered\": 57,\n    \"data\": [\n        {\n            \"DT_RowId\": \"row_3\",\n            \"DT_RowData\": {\n                \"pkey\": 3\n            },\n            \"first_name\": \"Angelica\",\n            \"last_name\": \"Ramos\",\n            \"position\": \"System Architect\",\n            \"office\": \"London\",\n            \"start_date\": \"9th Oct 09\",\n            \"salary\": \"$2,875\"\n        },\n        {\n            \"DT_RowId\": \"row_17\",\n            \"DT_RowData\": {\n                \"pkey\": 17\n            },\n            \"first_name\": \"Ashton\",\n            \"last_name\": \"Cox\",\n            \"position\": \"Technical Author\",\n            \"office\": \"San Francisco\",\n            \"start_date\": \"12th Jan 09\",\n            \"salary\": \"$4,800\"\n        },\n        ...\n    ]\n}\n```\n这里我们会需要对表格的每列进行处理，使用到columns的配置项，这里我们简单列出比较常用的选项：\n- columns.className：为指定的列的每个单元格都指定一个css class\n- columns.createdCell：单元格生成以后的回调函数，这样你可以在这里改变DOM\n- columns.data：设置列的数据源，即如何从整个Table的数据源(object/array)中获得\n- columns.orderable：在该列上允许或者禁止排序功能\n- ...\n\n\n## 使用datatables服务器模式渲染列表\n---\n这里我们将修改产品列表，来进行这次服务器模式的展示。\n\n### Products.vue组件\nProducts.vue组件的html模板不需要调整，需要调整的是相关的组件逻辑代码：\n``` vue\n<script>\n    export default {\n        name: 'Products',\n        data() {\n            return {\n                products: [],\n                productsTable: {}\n            }\n        },\n        methods: {\n            showJson(json) {\n                return FormatJson(json);\n            },\n            getProducts({\n                terminalId,\n                p,\n                s\n            }) {\n                var that = this;\n                var url = `./static/products.json` + UrlEncode({\n                    terminalId,\n                    p,\n                    s\n                });\n                that.productsTable.ajax.url(url).load();\n            }\n        },\n        mounted() {\n            //this.getProducts();\n            var that = this;\n            var table = $('#products-datatable').dataTable({\n                processing: true,\n                serverSide: true,\n                destroy: true,\n                ajax: {\n                    url: `./static/products.json`\n                },\n                columns: [{\n                    data: \"productName\" //产品名字\n                }, {\n                    data: \"terminalName\" //服务名字\n                }, {\n                    data(val) { // 返回是否激活\n                        return val === 1 ? '是' : '否';\n                    }\n                }, {\n                    data: \"uuid\" //uuid\n                }, {\n                    data(val) { //返回是否启用\n                        return val === 1 ? '启用' : '未启用';\n                    }\n                }, {\n                    data: \"activeDate\" //启用时间\n                }, {\n                    data: \"expiresDate\" //到期时间\n                }, {\n                    data: \"registerDate\" //注册时间\n                }, {\n                    data: \"activateDate\" //激活时间\n                }, {\n                    data(val) {\n                        return val;\n                    },\n                    createdCell(td, cellData, rowData, row, col) { //设置tooltip，以及将json进行html模板输出\n                        $(td).attr('title', FormatJson(cellData)).attr('data-toggle', 'tooltip').attr('data-placement', 'left').attr('data-html', 'true').html('...');\n                    },\n                    orderable: false //取消排序功能\n                }, {\n                    createdCell(td, cellData, rowData, row, col) { //添加按钮\n                        $(td).html(`${rowData.state === 1 ?'' :'<a href=\"#\" class=\"btn btn-primary btn-xs\"><i class=\"fa fa-bolt\"></i> 激活 </a>'}`);\n                        //此处可添加相关事件\n                    },\n                    orderable: false //取消排序功能\n                }],\n                drawCallback: function(settings) {\n                    //表格每次重绘回调函数，此处可进行相关插件初始化\n                    SetTooltip();\n                },\n                language: {\n                    \"url\": \"./static/datatable_zh_CN.json\"\n                }\n            }).api();\n            //保存datatables对象，可进行相关的api调用\n            that.$set(that, 'productsTable', table);\n        },\n        destroyed() {\n            try {\n                //移除datatables\n                this.productsTable.destroy();\n            } catch (e) {}\n        }\n    }\n</script>\n```\n\n[传送门：Vue2使用笔记7--vue与datatables(一):浏览器渲染]()\n\n### json展示\n这里我们需要将json数据展示为html，本骚年写过两个方法进行实现，大家可以参考之前的文章。\n传送门：\n- [《将json输出为html(一)：字符串正则匹配》](https://godbasin.github.io/2016/11/13/json-to-html-1-use-string-regular/)\n- [《将json输出为html(二)：js数据类型判断实现》](https://godbasin.github.io/2016/11/13/json-to-html-2-use-object/)\n\n\n### 页面效果\n![image](http://o905ne85q.bkt.clouddn.com/FB2B.tmp.png)\n\n## 结束语\n-----\n这里我们使用了dataTables的另外一种使用方法--服务端渲染，这种方法虽然需要服务端按照相关约定进行调整，但是相比一次性加载所有的数据来说，还是方便很多的呢。\n[此处查看项目代码](https://github.com/godbasin/godbasin.github.io/tree/blog-codes/vue2-notes/8-use-datatable-with-server)\n[此处查看页面效果](http://ofyya1gfg.bkt.clouddn.com/8-use-datatable-with-server/index.html#/app/products)","source":"_posts/vue2-notes-8-use-datatable-with-server.md","raw":"---\ntitle: Vue2使用笔记8--vue与datatables(二)：服务端渲染\ndate: 2016-12-11 16:06:54\ncategories: vue八宝粥\ntags: 笔记\n---\n最近在使用Vue2作为项目中前端的框架，《Vue2使用笔记》系列用于记录过程中的一些使用和解决方法。\n本文记录vue中调用datatables，使用datatables服务器处理的过程。\n<!--more-->\n\n## datatables服务器处理\n---\n上一节我们使用静态html进行初始化dataTables，有一个很局限的问题，就是需要一次性加载完所有的数据。\n但是无论从浏览器还是服务端来看，都会发现这并不是一个好选择。因此我们可以开启服务器处理的方式。\n\n### 服务器模式\nDataTables提供了服务器模式，把本来客户端所做的事情交给服务器去处理，比如排序（order）、分页（paging）、过滤（filter）。\n对于客户端来说这些操作都是比较消耗资源的， 所以打开服务器模式后不用担心这些操作会影响到用户体验。\n\n当你打开服务器模式的时候，每次绘制表格的时候，DataTables会给服务器发送一个请求（包括当前分页，排序，搜索参数等等）。DataTables会向服务器发送一些参数去执行所需要的处理，然后在服务器组装好相应的数据返回给DataTables。\n\n开启服务器模式需要使用serverSideOption和ajaxOption ajax不定时一讲选项。\n\n### 服务端处理\n当开启服务器模式时，服务端接受到的参数和需要返回的数据都是固定的，固此时需要服务端进行相关的处理。\n\n由于这里我们只讨论前端相关的，固感兴趣的小伙伴麻烦自行查看文档：\n[服务器处理(Server-side processing)](http://datatables.club/manual/server-side.html)\n\n\n### 返回的数据处理\n这时候服务端返回的数据格式为：\n``` json\n{\n    \"draw\": 1,\n    \"recordsTotal\": 57,\n    \"recordsFiltered\": 57,\n    \"data\": [\n        {\n            \"DT_RowId\": \"row_3\",\n            \"DT_RowData\": {\n                \"pkey\": 3\n            },\n            \"first_name\": \"Angelica\",\n            \"last_name\": \"Ramos\",\n            \"position\": \"System Architect\",\n            \"office\": \"London\",\n            \"start_date\": \"9th Oct 09\",\n            \"salary\": \"$2,875\"\n        },\n        {\n            \"DT_RowId\": \"row_17\",\n            \"DT_RowData\": {\n                \"pkey\": 17\n            },\n            \"first_name\": \"Ashton\",\n            \"last_name\": \"Cox\",\n            \"position\": \"Technical Author\",\n            \"office\": \"San Francisco\",\n            \"start_date\": \"12th Jan 09\",\n            \"salary\": \"$4,800\"\n        },\n        ...\n    ]\n}\n```\n这里我们会需要对表格的每列进行处理，使用到columns的配置项，这里我们简单列出比较常用的选项：\n- columns.className：为指定的列的每个单元格都指定一个css class\n- columns.createdCell：单元格生成以后的回调函数，这样你可以在这里改变DOM\n- columns.data：设置列的数据源，即如何从整个Table的数据源(object/array)中获得\n- columns.orderable：在该列上允许或者禁止排序功能\n- ...\n\n\n## 使用datatables服务器模式渲染列表\n---\n这里我们将修改产品列表，来进行这次服务器模式的展示。\n\n### Products.vue组件\nProducts.vue组件的html模板不需要调整，需要调整的是相关的组件逻辑代码：\n``` vue\n<script>\n    export default {\n        name: 'Products',\n        data() {\n            return {\n                products: [],\n                productsTable: {}\n            }\n        },\n        methods: {\n            showJson(json) {\n                return FormatJson(json);\n            },\n            getProducts({\n                terminalId,\n                p,\n                s\n            }) {\n                var that = this;\n                var url = `./static/products.json` + UrlEncode({\n                    terminalId,\n                    p,\n                    s\n                });\n                that.productsTable.ajax.url(url).load();\n            }\n        },\n        mounted() {\n            //this.getProducts();\n            var that = this;\n            var table = $('#products-datatable').dataTable({\n                processing: true,\n                serverSide: true,\n                destroy: true,\n                ajax: {\n                    url: `./static/products.json`\n                },\n                columns: [{\n                    data: \"productName\" //产品名字\n                }, {\n                    data: \"terminalName\" //服务名字\n                }, {\n                    data(val) { // 返回是否激活\n                        return val === 1 ? '是' : '否';\n                    }\n                }, {\n                    data: \"uuid\" //uuid\n                }, {\n                    data(val) { //返回是否启用\n                        return val === 1 ? '启用' : '未启用';\n                    }\n                }, {\n                    data: \"activeDate\" //启用时间\n                }, {\n                    data: \"expiresDate\" //到期时间\n                }, {\n                    data: \"registerDate\" //注册时间\n                }, {\n                    data: \"activateDate\" //激活时间\n                }, {\n                    data(val) {\n                        return val;\n                    },\n                    createdCell(td, cellData, rowData, row, col) { //设置tooltip，以及将json进行html模板输出\n                        $(td).attr('title', FormatJson(cellData)).attr('data-toggle', 'tooltip').attr('data-placement', 'left').attr('data-html', 'true').html('...');\n                    },\n                    orderable: false //取消排序功能\n                }, {\n                    createdCell(td, cellData, rowData, row, col) { //添加按钮\n                        $(td).html(`${rowData.state === 1 ?'' :'<a href=\"#\" class=\"btn btn-primary btn-xs\"><i class=\"fa fa-bolt\"></i> 激活 </a>'}`);\n                        //此处可添加相关事件\n                    },\n                    orderable: false //取消排序功能\n                }],\n                drawCallback: function(settings) {\n                    //表格每次重绘回调函数，此处可进行相关插件初始化\n                    SetTooltip();\n                },\n                language: {\n                    \"url\": \"./static/datatable_zh_CN.json\"\n                }\n            }).api();\n            //保存datatables对象，可进行相关的api调用\n            that.$set(that, 'productsTable', table);\n        },\n        destroyed() {\n            try {\n                //移除datatables\n                this.productsTable.destroy();\n            } catch (e) {}\n        }\n    }\n</script>\n```\n\n[传送门：Vue2使用笔记7--vue与datatables(一):浏览器渲染]()\n\n### json展示\n这里我们需要将json数据展示为html，本骚年写过两个方法进行实现，大家可以参考之前的文章。\n传送门：\n- [《将json输出为html(一)：字符串正则匹配》](https://godbasin.github.io/2016/11/13/json-to-html-1-use-string-regular/)\n- [《将json输出为html(二)：js数据类型判断实现》](https://godbasin.github.io/2016/11/13/json-to-html-2-use-object/)\n\n\n### 页面效果\n![image](http://o905ne85q.bkt.clouddn.com/FB2B.tmp.png)\n\n## 结束语\n-----\n这里我们使用了dataTables的另外一种使用方法--服务端渲染，这种方法虽然需要服务端按照相关约定进行调整，但是相比一次性加载所有的数据来说，还是方便很多的呢。\n[此处查看项目代码](https://github.com/godbasin/godbasin.github.io/tree/blog-codes/vue2-notes/8-use-datatable-with-server)\n[此处查看页面效果](http://ofyya1gfg.bkt.clouddn.com/8-use-datatable-with-server/index.html#/app/products)","slug":"vue2-notes-8-use-datatable-with-server","published":1,"updated":"2016-12-11T09:07:39.607Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cix45huip005mxotunmgmvs7w","content":"<p>最近在使用Vue2作为项目中前端的框架，《Vue2使用笔记》系列用于记录过程中的一些使用和解决方法。<br>本文记录vue中调用datatables，使用datatables服务器处理的过程。<br><a id=\"more\"></a></p>\n<h2 id=\"datatables服务器处理\"><a href=\"#datatables服务器处理\" class=\"headerlink\" title=\"datatables服务器处理\"></a>datatables服务器处理</h2><hr>\n<p>上一节我们使用静态html进行初始化dataTables，有一个很局限的问题，就是需要一次性加载完所有的数据。<br>但是无论从浏览器还是服务端来看，都会发现这并不是一个好选择。因此我们可以开启服务器处理的方式。</p>\n<h3 id=\"服务器模式\"><a href=\"#服务器模式\" class=\"headerlink\" title=\"服务器模式\"></a>服务器模式</h3><p>DataTables提供了服务器模式，把本来客户端所做的事情交给服务器去处理，比如排序（order）、分页（paging）、过滤（filter）。<br>对于客户端来说这些操作都是比较消耗资源的， 所以打开服务器模式后不用担心这些操作会影响到用户体验。</p>\n<p>当你打开服务器模式的时候，每次绘制表格的时候，DataTables会给服务器发送一个请求（包括当前分页，排序，搜索参数等等）。DataTables会向服务器发送一些参数去执行所需要的处理，然后在服务器组装好相应的数据返回给DataTables。</p>\n<p>开启服务器模式需要使用serverSideOption和ajaxOption ajax不定时一讲选项。</p>\n<h3 id=\"服务端处理\"><a href=\"#服务端处理\" class=\"headerlink\" title=\"服务端处理\"></a>服务端处理</h3><p>当开启服务器模式时，服务端接受到的参数和需要返回的数据都是固定的，固此时需要服务端进行相关的处理。</p>\n<p>由于这里我们只讨论前端相关的，固感兴趣的小伙伴麻烦自行查看文档：<br><a href=\"http://datatables.club/manual/server-side.html\" target=\"_blank\" rel=\"external\">服务器处理(Server-side processing)</a></p>\n<h3 id=\"返回的数据处理\"><a href=\"#返回的数据处理\" class=\"headerlink\" title=\"返回的数据处理\"></a>返回的数据处理</h3><p>这时候服务端返回的数据格式为：<br><figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"attr\">\"draw\"</span>: <span class=\"number\">1</span>,</div><div class=\"line\">    <span class=\"attr\">\"recordsTotal\"</span>: <span class=\"number\">57</span>,</div><div class=\"line\">    <span class=\"attr\">\"recordsFiltered\"</span>: <span class=\"number\">57</span>,</div><div class=\"line\">    <span class=\"attr\">\"data\"</span>: [</div><div class=\"line\">        &#123;</div><div class=\"line\">            <span class=\"attr\">\"DT_RowId\"</span>: <span class=\"string\">\"row_3\"</span>,</div><div class=\"line\">            <span class=\"attr\">\"DT_RowData\"</span>: &#123;</div><div class=\"line\">                <span class=\"attr\">\"pkey\"</span>: <span class=\"number\">3</span></div><div class=\"line\">            &#125;,</div><div class=\"line\">            <span class=\"attr\">\"first_name\"</span>: <span class=\"string\">\"Angelica\"</span>,</div><div class=\"line\">            <span class=\"attr\">\"last_name\"</span>: <span class=\"string\">\"Ramos\"</span>,</div><div class=\"line\">            <span class=\"attr\">\"position\"</span>: <span class=\"string\">\"System Architect\"</span>,</div><div class=\"line\">            <span class=\"attr\">\"office\"</span>: <span class=\"string\">\"London\"</span>,</div><div class=\"line\">            <span class=\"attr\">\"start_date\"</span>: <span class=\"string\">\"9th Oct 09\"</span>,</div><div class=\"line\">            <span class=\"attr\">\"salary\"</span>: <span class=\"string\">\"$2,875\"</span></div><div class=\"line\">        &#125;,</div><div class=\"line\">        &#123;</div><div class=\"line\">            <span class=\"attr\">\"DT_RowId\"</span>: <span class=\"string\">\"row_17\"</span>,</div><div class=\"line\">            <span class=\"attr\">\"DT_RowData\"</span>: &#123;</div><div class=\"line\">                <span class=\"attr\">\"pkey\"</span>: <span class=\"number\">17</span></div><div class=\"line\">            &#125;,</div><div class=\"line\">            <span class=\"attr\">\"first_name\"</span>: <span class=\"string\">\"Ashton\"</span>,</div><div class=\"line\">            <span class=\"attr\">\"last_name\"</span>: <span class=\"string\">\"Cox\"</span>,</div><div class=\"line\">            <span class=\"attr\">\"position\"</span>: <span class=\"string\">\"Technical Author\"</span>,</div><div class=\"line\">            <span class=\"attr\">\"office\"</span>: <span class=\"string\">\"San Francisco\"</span>,</div><div class=\"line\">            <span class=\"attr\">\"start_date\"</span>: <span class=\"string\">\"12th Jan 09\"</span>,</div><div class=\"line\">            <span class=\"attr\">\"salary\"</span>: <span class=\"string\">\"$4,800\"</span></div><div class=\"line\">        &#125;,</div><div class=\"line\">        ...</div><div class=\"line\">    ]</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>这里我们会需要对表格的每列进行处理，使用到columns的配置项，这里我们简单列出比较常用的选项：</p>\n<ul>\n<li>columns.className：为指定的列的每个单元格都指定一个css class</li>\n<li>columns.createdCell：单元格生成以后的回调函数，这样你可以在这里改变DOM</li>\n<li>columns.data：设置列的数据源，即如何从整个Table的数据源(object/array)中获得</li>\n<li>columns.orderable：在该列上允许或者禁止排序功能</li>\n<li>…</li>\n</ul>\n<h2 id=\"使用datatables服务器模式渲染列表\"><a href=\"#使用datatables服务器模式渲染列表\" class=\"headerlink\" title=\"使用datatables服务器模式渲染列表\"></a>使用datatables服务器模式渲染列表</h2><hr>\n<p>这里我们将修改产品列表，来进行这次服务器模式的展示。</p>\n<h3 id=\"Products-vue组件\"><a href=\"#Products-vue组件\" class=\"headerlink\" title=\"Products.vue组件\"></a>Products.vue组件</h3><p>Products.vue组件的html模板不需要调整，需要调整的是相关的组件逻辑代码：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;script&gt;</div><div class=\"line\">    export default &#123;</div><div class=\"line\">        name: &apos;Products&apos;,</div><div class=\"line\">        data() &#123;</div><div class=\"line\">            return &#123;</div><div class=\"line\">                products: [],</div><div class=\"line\">                productsTable: &#123;&#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;,</div><div class=\"line\">        methods: &#123;</div><div class=\"line\">            showJson(json) &#123;</div><div class=\"line\">                return FormatJson(json);</div><div class=\"line\">            &#125;,</div><div class=\"line\">            getProducts(&#123;</div><div class=\"line\">                terminalId,</div><div class=\"line\">                p,</div><div class=\"line\">                s</div><div class=\"line\">            &#125;) &#123;</div><div class=\"line\">                var that = this;</div><div class=\"line\">                var url = `./static/products.json` + UrlEncode(&#123;</div><div class=\"line\">                    terminalId,</div><div class=\"line\">                    p,</div><div class=\"line\">                    s</div><div class=\"line\">                &#125;);</div><div class=\"line\">                that.productsTable.ajax.url(url).load();</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;,</div><div class=\"line\">        mounted() &#123;</div><div class=\"line\">            //this.getProducts();</div><div class=\"line\">            var that = this;</div><div class=\"line\">            var table = $(&apos;#products-datatable&apos;).dataTable(&#123;</div><div class=\"line\">                processing: true,</div><div class=\"line\">                serverSide: true,</div><div class=\"line\">                destroy: true,</div><div class=\"line\">                ajax: &#123;</div><div class=\"line\">                    url: `./static/products.json`</div><div class=\"line\">                &#125;,</div><div class=\"line\">                columns: [&#123;</div><div class=\"line\">                    data: &quot;productName&quot; //产品名字</div><div class=\"line\">                &#125;, &#123;</div><div class=\"line\">                    data: &quot;terminalName&quot; //服务名字</div><div class=\"line\">                &#125;, &#123;</div><div class=\"line\">                    data(val) &#123; // 返回是否激活</div><div class=\"line\">                        return val === 1 ? &apos;是&apos; : &apos;否&apos;;</div><div class=\"line\">                    &#125;</div><div class=\"line\">                &#125;, &#123;</div><div class=\"line\">                    data: &quot;uuid&quot; //uuid</div><div class=\"line\">                &#125;, &#123;</div><div class=\"line\">                    data(val) &#123; //返回是否启用</div><div class=\"line\">                        return val === 1 ? &apos;启用&apos; : &apos;未启用&apos;;</div><div class=\"line\">                    &#125;</div><div class=\"line\">                &#125;, &#123;</div><div class=\"line\">                    data: &quot;activeDate&quot; //启用时间</div><div class=\"line\">                &#125;, &#123;</div><div class=\"line\">                    data: &quot;expiresDate&quot; //到期时间</div><div class=\"line\">                &#125;, &#123;</div><div class=\"line\">                    data: &quot;registerDate&quot; //注册时间</div><div class=\"line\">                &#125;, &#123;</div><div class=\"line\">                    data: &quot;activateDate&quot; //激活时间</div><div class=\"line\">                &#125;, &#123;</div><div class=\"line\">                    data(val) &#123;</div><div class=\"line\">                        return val;</div><div class=\"line\">                    &#125;,</div><div class=\"line\">                    createdCell(td, cellData, rowData, row, col) &#123; //设置tooltip，以及将json进行html模板输出</div><div class=\"line\">                        $(td).attr(&apos;title&apos;, FormatJson(cellData)).attr(&apos;data-toggle&apos;, &apos;tooltip&apos;).attr(&apos;data-placement&apos;, &apos;left&apos;).attr(&apos;data-html&apos;, &apos;true&apos;).html(&apos;...&apos;);</div><div class=\"line\">                    &#125;,</div><div class=\"line\">                    orderable: false //取消排序功能</div><div class=\"line\">                &#125;, &#123;</div><div class=\"line\">                    createdCell(td, cellData, rowData, row, col) &#123; //添加按钮</div><div class=\"line\">                        $(td).html(`$&#123;rowData.state === 1 ?&apos;&apos; :&apos;&lt;a href=&quot;#&quot; class=&quot;btn btn-primary btn-xs&quot;&gt;&lt;i class=&quot;fa fa-bolt&quot;&gt;&lt;/i&gt; 激活 &lt;/a&gt;&apos;&#125;`);</div><div class=\"line\">                        //此处可添加相关事件</div><div class=\"line\">                    &#125;,</div><div class=\"line\">                    orderable: false //取消排序功能</div><div class=\"line\">                &#125;],</div><div class=\"line\">                drawCallback: function(settings) &#123;</div><div class=\"line\">                    //表格每次重绘回调函数，此处可进行相关插件初始化</div><div class=\"line\">                    SetTooltip();</div><div class=\"line\">                &#125;,</div><div class=\"line\">                language: &#123;</div><div class=\"line\">                    &quot;url&quot;: &quot;./static/datatable_zh_CN.json&quot;</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;).api();</div><div class=\"line\">            //保存datatables对象，可进行相关的api调用</div><div class=\"line\">            that.$set(that, &apos;productsTable&apos;, table);</div><div class=\"line\">        &#125;,</div><div class=\"line\">        destroyed() &#123;</div><div class=\"line\">            try &#123;</div><div class=\"line\">                //移除datatables</div><div class=\"line\">                this.productsTable.destroy();</div><div class=\"line\">            &#125; catch (e) &#123;&#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&lt;/script&gt;</div></pre></td></tr></table></figure></p>\n<p><a href=\"\">传送门：Vue2使用笔记7–vue与datatables(一):浏览器渲染</a></p>\n<h3 id=\"json展示\"><a href=\"#json展示\" class=\"headerlink\" title=\"json展示\"></a>json展示</h3><p>这里我们需要将json数据展示为html，本骚年写过两个方法进行实现，大家可以参考之前的文章。<br>传送门：</p>\n<ul>\n<li><a href=\"https://godbasin.github.io/2016/11/13/json-to-html-1-use-string-regular/\">《将json输出为html(一)：字符串正则匹配》</a></li>\n<li><a href=\"https://godbasin.github.io/2016/11/13/json-to-html-2-use-object/\">《将json输出为html(二)：js数据类型判断实现》</a></li>\n</ul>\n<h3 id=\"页面效果\"><a href=\"#页面效果\" class=\"headerlink\" title=\"页面效果\"></a>页面效果</h3><p><img src=\"http://o905ne85q.bkt.clouddn.com/FB2B.tmp.png\" alt=\"image\"></p>\n<h2 id=\"结束语\"><a href=\"#结束语\" class=\"headerlink\" title=\"结束语\"></a>结束语</h2><hr>\n<p>这里我们使用了dataTables的另外一种使用方法–服务端渲染，这种方法虽然需要服务端按照相关约定进行调整，但是相比一次性加载所有的数据来说，还是方便很多的呢。<br><a href=\"https://github.com/godbasin/godbasin.github.io/tree/blog-codes/vue2-notes/8-use-datatable-with-server\" target=\"_blank\" rel=\"external\">此处查看项目代码</a><br><a href=\"http://ofyya1gfg.bkt.clouddn.com/8-use-datatable-with-server/index.html#/app/products\" target=\"_blank\" rel=\"external\">此处查看页面效果</a></p>\n","excerpt":"<p>最近在使用Vue2作为项目中前端的框架，《Vue2使用笔记》系列用于记录过程中的一些使用和解决方法。<br>本文记录vue中调用datatables，使用datatables服务器处理的过程。<br>","more":"</p>\n<h2 id=\"datatables服务器处理\"><a href=\"#datatables服务器处理\" class=\"headerlink\" title=\"datatables服务器处理\"></a>datatables服务器处理</h2><hr>\n<p>上一节我们使用静态html进行初始化dataTables，有一个很局限的问题，就是需要一次性加载完所有的数据。<br>但是无论从浏览器还是服务端来看，都会发现这并不是一个好选择。因此我们可以开启服务器处理的方式。</p>\n<h3 id=\"服务器模式\"><a href=\"#服务器模式\" class=\"headerlink\" title=\"服务器模式\"></a>服务器模式</h3><p>DataTables提供了服务器模式，把本来客户端所做的事情交给服务器去处理，比如排序（order）、分页（paging）、过滤（filter）。<br>对于客户端来说这些操作都是比较消耗资源的， 所以打开服务器模式后不用担心这些操作会影响到用户体验。</p>\n<p>当你打开服务器模式的时候，每次绘制表格的时候，DataTables会给服务器发送一个请求（包括当前分页，排序，搜索参数等等）。DataTables会向服务器发送一些参数去执行所需要的处理，然后在服务器组装好相应的数据返回给DataTables。</p>\n<p>开启服务器模式需要使用serverSideOption和ajaxOption ajax不定时一讲选项。</p>\n<h3 id=\"服务端处理\"><a href=\"#服务端处理\" class=\"headerlink\" title=\"服务端处理\"></a>服务端处理</h3><p>当开启服务器模式时，服务端接受到的参数和需要返回的数据都是固定的，固此时需要服务端进行相关的处理。</p>\n<p>由于这里我们只讨论前端相关的，固感兴趣的小伙伴麻烦自行查看文档：<br><a href=\"http://datatables.club/manual/server-side.html\">服务器处理(Server-side processing)</a></p>\n<h3 id=\"返回的数据处理\"><a href=\"#返回的数据处理\" class=\"headerlink\" title=\"返回的数据处理\"></a>返回的数据处理</h3><p>这时候服务端返回的数据格式为：<br><figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"attr\">\"draw\"</span>: <span class=\"number\">1</span>,</div><div class=\"line\">    <span class=\"attr\">\"recordsTotal\"</span>: <span class=\"number\">57</span>,</div><div class=\"line\">    <span class=\"attr\">\"recordsFiltered\"</span>: <span class=\"number\">57</span>,</div><div class=\"line\">    <span class=\"attr\">\"data\"</span>: [</div><div class=\"line\">        &#123;</div><div class=\"line\">            <span class=\"attr\">\"DT_RowId\"</span>: <span class=\"string\">\"row_3\"</span>,</div><div class=\"line\">            <span class=\"attr\">\"DT_RowData\"</span>: &#123;</div><div class=\"line\">                <span class=\"attr\">\"pkey\"</span>: <span class=\"number\">3</span></div><div class=\"line\">            &#125;,</div><div class=\"line\">            <span class=\"attr\">\"first_name\"</span>: <span class=\"string\">\"Angelica\"</span>,</div><div class=\"line\">            <span class=\"attr\">\"last_name\"</span>: <span class=\"string\">\"Ramos\"</span>,</div><div class=\"line\">            <span class=\"attr\">\"position\"</span>: <span class=\"string\">\"System Architect\"</span>,</div><div class=\"line\">            <span class=\"attr\">\"office\"</span>: <span class=\"string\">\"London\"</span>,</div><div class=\"line\">            <span class=\"attr\">\"start_date\"</span>: <span class=\"string\">\"9th Oct 09\"</span>,</div><div class=\"line\">            <span class=\"attr\">\"salary\"</span>: <span class=\"string\">\"$2,875\"</span></div><div class=\"line\">        &#125;,</div><div class=\"line\">        &#123;</div><div class=\"line\">            <span class=\"attr\">\"DT_RowId\"</span>: <span class=\"string\">\"row_17\"</span>,</div><div class=\"line\">            <span class=\"attr\">\"DT_RowData\"</span>: &#123;</div><div class=\"line\">                <span class=\"attr\">\"pkey\"</span>: <span class=\"number\">17</span></div><div class=\"line\">            &#125;,</div><div class=\"line\">            <span class=\"attr\">\"first_name\"</span>: <span class=\"string\">\"Ashton\"</span>,</div><div class=\"line\">            <span class=\"attr\">\"last_name\"</span>: <span class=\"string\">\"Cox\"</span>,</div><div class=\"line\">            <span class=\"attr\">\"position\"</span>: <span class=\"string\">\"Technical Author\"</span>,</div><div class=\"line\">            <span class=\"attr\">\"office\"</span>: <span class=\"string\">\"San Francisco\"</span>,</div><div class=\"line\">            <span class=\"attr\">\"start_date\"</span>: <span class=\"string\">\"12th Jan 09\"</span>,</div><div class=\"line\">            <span class=\"attr\">\"salary\"</span>: <span class=\"string\">\"$4,800\"</span></div><div class=\"line\">        &#125;,</div><div class=\"line\">        ...</div><div class=\"line\">    ]</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>这里我们会需要对表格的每列进行处理，使用到columns的配置项，这里我们简单列出比较常用的选项：</p>\n<ul>\n<li>columns.className：为指定的列的每个单元格都指定一个css class</li>\n<li>columns.createdCell：单元格生成以后的回调函数，这样你可以在这里改变DOM</li>\n<li>columns.data：设置列的数据源，即如何从整个Table的数据源(object/array)中获得</li>\n<li>columns.orderable：在该列上允许或者禁止排序功能</li>\n<li>…</li>\n</ul>\n<h2 id=\"使用datatables服务器模式渲染列表\"><a href=\"#使用datatables服务器模式渲染列表\" class=\"headerlink\" title=\"使用datatables服务器模式渲染列表\"></a>使用datatables服务器模式渲染列表</h2><hr>\n<p>这里我们将修改产品列表，来进行这次服务器模式的展示。</p>\n<h3 id=\"Products-vue组件\"><a href=\"#Products-vue组件\" class=\"headerlink\" title=\"Products.vue组件\"></a>Products.vue组件</h3><p>Products.vue组件的html模板不需要调整，需要调整的是相关的组件逻辑代码：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;script&gt;</div><div class=\"line\">    export default &#123;</div><div class=\"line\">        name: &apos;Products&apos;,</div><div class=\"line\">        data() &#123;</div><div class=\"line\">            return &#123;</div><div class=\"line\">                products: [],</div><div class=\"line\">                productsTable: &#123;&#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;,</div><div class=\"line\">        methods: &#123;</div><div class=\"line\">            showJson(json) &#123;</div><div class=\"line\">                return FormatJson(json);</div><div class=\"line\">            &#125;,</div><div class=\"line\">            getProducts(&#123;</div><div class=\"line\">                terminalId,</div><div class=\"line\">                p,</div><div class=\"line\">                s</div><div class=\"line\">            &#125;) &#123;</div><div class=\"line\">                var that = this;</div><div class=\"line\">                var url = `./static/products.json` + UrlEncode(&#123;</div><div class=\"line\">                    terminalId,</div><div class=\"line\">                    p,</div><div class=\"line\">                    s</div><div class=\"line\">                &#125;);</div><div class=\"line\">                that.productsTable.ajax.url(url).load();</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;,</div><div class=\"line\">        mounted() &#123;</div><div class=\"line\">            //this.getProducts();</div><div class=\"line\">            var that = this;</div><div class=\"line\">            var table = $(&apos;#products-datatable&apos;).dataTable(&#123;</div><div class=\"line\">                processing: true,</div><div class=\"line\">                serverSide: true,</div><div class=\"line\">                destroy: true,</div><div class=\"line\">                ajax: &#123;</div><div class=\"line\">                    url: `./static/products.json`</div><div class=\"line\">                &#125;,</div><div class=\"line\">                columns: [&#123;</div><div class=\"line\">                    data: &quot;productName&quot; //产品名字</div><div class=\"line\">                &#125;, &#123;</div><div class=\"line\">                    data: &quot;terminalName&quot; //服务名字</div><div class=\"line\">                &#125;, &#123;</div><div class=\"line\">                    data(val) &#123; // 返回是否激活</div><div class=\"line\">                        return val === 1 ? &apos;是&apos; : &apos;否&apos;;</div><div class=\"line\">                    &#125;</div><div class=\"line\">                &#125;, &#123;</div><div class=\"line\">                    data: &quot;uuid&quot; //uuid</div><div class=\"line\">                &#125;, &#123;</div><div class=\"line\">                    data(val) &#123; //返回是否启用</div><div class=\"line\">                        return val === 1 ? &apos;启用&apos; : &apos;未启用&apos;;</div><div class=\"line\">                    &#125;</div><div class=\"line\">                &#125;, &#123;</div><div class=\"line\">                    data: &quot;activeDate&quot; //启用时间</div><div class=\"line\">                &#125;, &#123;</div><div class=\"line\">                    data: &quot;expiresDate&quot; //到期时间</div><div class=\"line\">                &#125;, &#123;</div><div class=\"line\">                    data: &quot;registerDate&quot; //注册时间</div><div class=\"line\">                &#125;, &#123;</div><div class=\"line\">                    data: &quot;activateDate&quot; //激活时间</div><div class=\"line\">                &#125;, &#123;</div><div class=\"line\">                    data(val) &#123;</div><div class=\"line\">                        return val;</div><div class=\"line\">                    &#125;,</div><div class=\"line\">                    createdCell(td, cellData, rowData, row, col) &#123; //设置tooltip，以及将json进行html模板输出</div><div class=\"line\">                        $(td).attr(&apos;title&apos;, FormatJson(cellData)).attr(&apos;data-toggle&apos;, &apos;tooltip&apos;).attr(&apos;data-placement&apos;, &apos;left&apos;).attr(&apos;data-html&apos;, &apos;true&apos;).html(&apos;...&apos;);</div><div class=\"line\">                    &#125;,</div><div class=\"line\">                    orderable: false //取消排序功能</div><div class=\"line\">                &#125;, &#123;</div><div class=\"line\">                    createdCell(td, cellData, rowData, row, col) &#123; //添加按钮</div><div class=\"line\">                        $(td).html(`$&#123;rowData.state === 1 ?&apos;&apos; :&apos;&lt;a href=&quot;#&quot; class=&quot;btn btn-primary btn-xs&quot;&gt;&lt;i class=&quot;fa fa-bolt&quot;&gt;&lt;/i&gt; 激活 &lt;/a&gt;&apos;&#125;`);</div><div class=\"line\">                        //此处可添加相关事件</div><div class=\"line\">                    &#125;,</div><div class=\"line\">                    orderable: false //取消排序功能</div><div class=\"line\">                &#125;],</div><div class=\"line\">                drawCallback: function(settings) &#123;</div><div class=\"line\">                    //表格每次重绘回调函数，此处可进行相关插件初始化</div><div class=\"line\">                    SetTooltip();</div><div class=\"line\">                &#125;,</div><div class=\"line\">                language: &#123;</div><div class=\"line\">                    &quot;url&quot;: &quot;./static/datatable_zh_CN.json&quot;</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;).api();</div><div class=\"line\">            //保存datatables对象，可进行相关的api调用</div><div class=\"line\">            that.$set(that, &apos;productsTable&apos;, table);</div><div class=\"line\">        &#125;,</div><div class=\"line\">        destroyed() &#123;</div><div class=\"line\">            try &#123;</div><div class=\"line\">                //移除datatables</div><div class=\"line\">                this.productsTable.destroy();</div><div class=\"line\">            &#125; catch (e) &#123;&#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&lt;/script&gt;</div></pre></td></tr></table></figure></p>\n<p><a href=\"\">传送门：Vue2使用笔记7–vue与datatables(一):浏览器渲染</a></p>\n<h3 id=\"json展示\"><a href=\"#json展示\" class=\"headerlink\" title=\"json展示\"></a>json展示</h3><p>这里我们需要将json数据展示为html，本骚年写过两个方法进行实现，大家可以参考之前的文章。<br>传送门：</p>\n<ul>\n<li><a href=\"https://godbasin.github.io/2016/11/13/json-to-html-1-use-string-regular/\">《将json输出为html(一)：字符串正则匹配》</a></li>\n<li><a href=\"https://godbasin.github.io/2016/11/13/json-to-html-2-use-object/\">《将json输出为html(二)：js数据类型判断实现》</a></li>\n</ul>\n<h3 id=\"页面效果\"><a href=\"#页面效果\" class=\"headerlink\" title=\"页面效果\"></a>页面效果</h3><p><img src=\"http://o905ne85q.bkt.clouddn.com/FB2B.tmp.png\" alt=\"image\"></p>\n<h2 id=\"结束语\"><a href=\"#结束语\" class=\"headerlink\" title=\"结束语\"></a>结束语</h2><hr>\n<p>这里我们使用了dataTables的另外一种使用方法–服务端渲染，这种方法虽然需要服务端按照相关约定进行调整，但是相比一次性加载所有的数据来说，还是方便很多的呢。<br><a href=\"https://github.com/godbasin/godbasin.github.io/tree/blog-codes/vue2-notes/8-use-datatable-with-server\">此处查看项目代码</a><br><a href=\"http://ofyya1gfg.bkt.clouddn.com/8-use-datatable-with-server/index.html#/app/products\">此处查看页面效果</a></p>"},{"title":"Vue2使用笔记9--监视路由","date":"2016-12-16T23:58:36.000Z","_content":"最近在使用Vue2作为项目中前端的框架，《Vue2使用笔记》系列用于记录过程中的一些使用和解决方法。\n本文记录vue中处理单个组件加载不同路由时进行相关处理的过程。\n<!--more-->\n\n## 多路由单组件\n---\n当我们使用单个组件绑定多个路由的时候，路由的跳转并不能再次触发组件的重建，此时我们需要对路由进行监视。\n\n### vue-router2\n对于vue-router 2版本的部分说明，本骚年在前面章节已经说过，大家有兴趣可以移步[《Vue2使用笔记4--vue-router使用》]()。\n\n### 参考\n[Vue2.0中文文档](https://vuefe.cn/guide/)\n[vue-router 2官方文档](http://router.vuejs.org/zh-cn/index.html)\n\n## 使用同一组件进行新建以及编辑\n---\n这里我们将修改ServiceAdd组件，来进行新建以及编辑的不同处理。\n\n### 添加编辑路由\n我们在main.js中添加编辑服务的路由，与新建使用一个组件；\n``` js\nconst routes = [\n    ...\n    {\n        path: '/app',\n        component: App,\n        name: 'App',\n        // 设置子路由\n        children: [\n\t\t...\n\t\t, {\n            // 添加服务\n            path: 'add/service',\n            component: ServiceAdd,\n            name: 'ServiceAdd'\n        }, {\n            // 修改服务\n            path: 'edit/service/:id',\n            component: ServiceAdd,\n            name: 'ServiceEdit'\n        }\n\t\t...\n\t\t]\n    }\n\t...\n]\n\n```\n\n### 将组件初始化事件进行调整\n接下来我们调整组件的初始化事件，使其判断当前路由并进行相关处理：\n``` js\nmounted() {\n    var that = this;\n\n    // 初始化检测\n    that.init();\n    // 设置iCheck插件初始化\n    SetICheck(that);\n    // 设置switchery插件初始化\n    SetSwitchery(that);\n    // 设置daterangepicker插件初始化\n    SetDaterangepicker(that, '#single_cal3');\n},\n// 监视路由\nwatch: {\n    $route() {\n        // 当路由改变，进行初始化检测\n        this.init();\n    }\n};\n```\n\n### 相关时间处理\n下面是一些初始化检测，以及相关调用的事件\n``` js\nmethods: {\n    // 初始化事件\n    init() {\n        var that = this;\n        // isEdit?\n        if (that.$route.params.id) {\n            that.edit(that.$route.params.id);\n        } else {\n            var data = initData();\n            // 初始化默认值\n            that.setChange(data);\n            $.each(data, (key, item) => {\n                that.$set(that, key, item);\n            });\n        }\n    },\n    // 编辑事件\n    edit(id) {\n        var that = this;\n        that.$set(that, 'isNew', false);\n        // 获取服务数据，这里使用模拟数据\n        $.get(`./static/service1.json`, repo => {\n            // 设置组件data的值\n            that.setChange(repo);\n            $.each(repo, (key, item) => {\n                that.$set(that, key, item);\n            });\n        });\n    },\n    // 对插件进行赋值设置\n    setChange(item) {\n        var that = this;\n        // 设置iCheck赋值\n        $(`input.flat[name=\"type\"][value=\"${item.type}\"]`).iCheck('check');\n        // 设置switchery赋值\n        if (item.state !== that.state) {\n            $('.js-switch[name=\"state\"]').trigger('click');\n        }\n        if (item.directIssue !== that.directIssue) {\n            $('.js-switch[name=\"directIssue\"]').trigger('click');\n        }\n    },\n    submit() {\n        var that = this,\n            text;\n        // 先做一些简单的校验，不通过则显示错误信息\n        if (!that.name) {\n            text = '请填写名称';\n        }\n        if (text) {\n            that.error.text = text;\n            that.error.shown = true;\n            return;\n        }\n        that.error.shown = false;\n        var that = this;\n\n        that.$router.push('/app/terminals');\n    }\n}\n```\n\n### 页面效果\n- 新建\n\n![image](http://o905ne85q.bkt.clouddn.com/280.tmp.png)\n\n- 编辑\n\n![image](http://o905ne85q.bkt.clouddn.com/EEE6.tmp.png)\n\n## 结束语\n-----\n当初对于多个路由匹配单个组件，本骚年还以为一定会有一些方法，在路由改变的时候进行销毁重建组件，后来找不到，最终也就监视路由进行处理。虽然有可能是本骚年太蠢没找到对应的方法调用，但是其实这种监视路由处理的方法或许更合理一些呢。\n[此处查看项目代码](https://github.com/godbasin/godbasin.github.io/tree/blog-codes/vue2-notes/9-watch-router)\n[此处查看页面效果](http://ofyya1gfg.bkt.clouddn.com/9-watch-router/index.html#/app/add/service)","source":"_posts/vue2-notes-9-watch-router.md","raw":"---\ntitle: Vue2使用笔记9--监视路由\ndate: 2016-12-17 07:58:36\ncategories: vue八宝粥\ntags: 笔记\n---\n最近在使用Vue2作为项目中前端的框架，《Vue2使用笔记》系列用于记录过程中的一些使用和解决方法。\n本文记录vue中处理单个组件加载不同路由时进行相关处理的过程。\n<!--more-->\n\n## 多路由单组件\n---\n当我们使用单个组件绑定多个路由的时候，路由的跳转并不能再次触发组件的重建，此时我们需要对路由进行监视。\n\n### vue-router2\n对于vue-router 2版本的部分说明，本骚年在前面章节已经说过，大家有兴趣可以移步[《Vue2使用笔记4--vue-router使用》]()。\n\n### 参考\n[Vue2.0中文文档](https://vuefe.cn/guide/)\n[vue-router 2官方文档](http://router.vuejs.org/zh-cn/index.html)\n\n## 使用同一组件进行新建以及编辑\n---\n这里我们将修改ServiceAdd组件，来进行新建以及编辑的不同处理。\n\n### 添加编辑路由\n我们在main.js中添加编辑服务的路由，与新建使用一个组件；\n``` js\nconst routes = [\n    ...\n    {\n        path: '/app',\n        component: App,\n        name: 'App',\n        // 设置子路由\n        children: [\n\t\t...\n\t\t, {\n            // 添加服务\n            path: 'add/service',\n            component: ServiceAdd,\n            name: 'ServiceAdd'\n        }, {\n            // 修改服务\n            path: 'edit/service/:id',\n            component: ServiceAdd,\n            name: 'ServiceEdit'\n        }\n\t\t...\n\t\t]\n    }\n\t...\n]\n\n```\n\n### 将组件初始化事件进行调整\n接下来我们调整组件的初始化事件，使其判断当前路由并进行相关处理：\n``` js\nmounted() {\n    var that = this;\n\n    // 初始化检测\n    that.init();\n    // 设置iCheck插件初始化\n    SetICheck(that);\n    // 设置switchery插件初始化\n    SetSwitchery(that);\n    // 设置daterangepicker插件初始化\n    SetDaterangepicker(that, '#single_cal3');\n},\n// 监视路由\nwatch: {\n    $route() {\n        // 当路由改变，进行初始化检测\n        this.init();\n    }\n};\n```\n\n### 相关时间处理\n下面是一些初始化检测，以及相关调用的事件\n``` js\nmethods: {\n    // 初始化事件\n    init() {\n        var that = this;\n        // isEdit?\n        if (that.$route.params.id) {\n            that.edit(that.$route.params.id);\n        } else {\n            var data = initData();\n            // 初始化默认值\n            that.setChange(data);\n            $.each(data, (key, item) => {\n                that.$set(that, key, item);\n            });\n        }\n    },\n    // 编辑事件\n    edit(id) {\n        var that = this;\n        that.$set(that, 'isNew', false);\n        // 获取服务数据，这里使用模拟数据\n        $.get(`./static/service1.json`, repo => {\n            // 设置组件data的值\n            that.setChange(repo);\n            $.each(repo, (key, item) => {\n                that.$set(that, key, item);\n            });\n        });\n    },\n    // 对插件进行赋值设置\n    setChange(item) {\n        var that = this;\n        // 设置iCheck赋值\n        $(`input.flat[name=\"type\"][value=\"${item.type}\"]`).iCheck('check');\n        // 设置switchery赋值\n        if (item.state !== that.state) {\n            $('.js-switch[name=\"state\"]').trigger('click');\n        }\n        if (item.directIssue !== that.directIssue) {\n            $('.js-switch[name=\"directIssue\"]').trigger('click');\n        }\n    },\n    submit() {\n        var that = this,\n            text;\n        // 先做一些简单的校验，不通过则显示错误信息\n        if (!that.name) {\n            text = '请填写名称';\n        }\n        if (text) {\n            that.error.text = text;\n            that.error.shown = true;\n            return;\n        }\n        that.error.shown = false;\n        var that = this;\n\n        that.$router.push('/app/terminals');\n    }\n}\n```\n\n### 页面效果\n- 新建\n\n![image](http://o905ne85q.bkt.clouddn.com/280.tmp.png)\n\n- 编辑\n\n![image](http://o905ne85q.bkt.clouddn.com/EEE6.tmp.png)\n\n## 结束语\n-----\n当初对于多个路由匹配单个组件，本骚年还以为一定会有一些方法，在路由改变的时候进行销毁重建组件，后来找不到，最终也就监视路由进行处理。虽然有可能是本骚年太蠢没找到对应的方法调用，但是其实这种监视路由处理的方法或许更合理一些呢。\n[此处查看项目代码](https://github.com/godbasin/godbasin.github.io/tree/blog-codes/vue2-notes/9-watch-router)\n[此处查看页面效果](http://ofyya1gfg.bkt.clouddn.com/9-watch-router/index.html#/app/add/service)","slug":"vue2-notes-9-watch-router","published":1,"updated":"2016-12-16T23:58:48.731Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cix45huiq005pxotucr44c6yn","content":"<p>最近在使用Vue2作为项目中前端的框架，《Vue2使用笔记》系列用于记录过程中的一些使用和解决方法。<br>本文记录vue中处理单个组件加载不同路由时进行相关处理的过程。<br><a id=\"more\"></a></p>\n<h2 id=\"多路由单组件\"><a href=\"#多路由单组件\" class=\"headerlink\" title=\"多路由单组件\"></a>多路由单组件</h2><hr>\n<p>当我们使用单个组件绑定多个路由的时候，路由的跳转并不能再次触发组件的重建，此时我们需要对路由进行监视。</p>\n<h3 id=\"vue-router2\"><a href=\"#vue-router2\" class=\"headerlink\" title=\"vue-router2\"></a>vue-router2</h3><p>对于vue-router 2版本的部分说明，本骚年在前面章节已经说过，大家有兴趣可以移步<a href=\"\">《Vue2使用笔记4–vue-router使用》</a>。</p>\n<h3 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h3><p><a href=\"https://vuefe.cn/guide/\" target=\"_blank\" rel=\"external\">Vue2.0中文文档</a><br><a href=\"http://router.vuejs.org/zh-cn/index.html\" target=\"_blank\" rel=\"external\">vue-router 2官方文档</a></p>\n<h2 id=\"使用同一组件进行新建以及编辑\"><a href=\"#使用同一组件进行新建以及编辑\" class=\"headerlink\" title=\"使用同一组件进行新建以及编辑\"></a>使用同一组件进行新建以及编辑</h2><hr>\n<p>这里我们将修改ServiceAdd组件，来进行新建以及编辑的不同处理。</p>\n<h3 id=\"添加编辑路由\"><a href=\"#添加编辑路由\" class=\"headerlink\" title=\"添加编辑路由\"></a>添加编辑路由</h3><p>我们在main.js中添加编辑服务的路由，与新建使用一个组件；<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">const</span> routes = [</div><div class=\"line\">    ...</div><div class=\"line\">    &#123;</div><div class=\"line\">        <span class=\"attr\">path</span>: <span class=\"string\">'/app'</span>,</div><div class=\"line\">        <span class=\"attr\">component</span>: App,</div><div class=\"line\">        <span class=\"attr\">name</span>: <span class=\"string\">'App'</span>,</div><div class=\"line\">        <span class=\"comment\">// 设置子路由</span></div><div class=\"line\">        children: [</div><div class=\"line\">    ...</div><div class=\"line\">    , &#123;</div><div class=\"line\">            <span class=\"comment\">// 添加服务</span></div><div class=\"line\">            path: <span class=\"string\">'add/service'</span>,</div><div class=\"line\">            <span class=\"attr\">component</span>: ServiceAdd,</div><div class=\"line\">            <span class=\"attr\">name</span>: <span class=\"string\">'ServiceAdd'</span></div><div class=\"line\">        &#125;, &#123;</div><div class=\"line\">            <span class=\"comment\">// 修改服务</span></div><div class=\"line\">            path: <span class=\"string\">'edit/service/:id'</span>,</div><div class=\"line\">            <span class=\"attr\">component</span>: ServiceAdd,</div><div class=\"line\">            <span class=\"attr\">name</span>: <span class=\"string\">'ServiceEdit'</span></div><div class=\"line\">        &#125;</div><div class=\"line\">    ...</div><div class=\"line\">    ]</div><div class=\"line\">    &#125;</div><div class=\"line\">  ...</div><div class=\"line\">]</div></pre></td></tr></table></figure></p>\n<h3 id=\"将组件初始化事件进行调整\"><a href=\"#将组件初始化事件进行调整\" class=\"headerlink\" title=\"将组件初始化事件进行调整\"></a>将组件初始化事件进行调整</h3><p>接下来我们调整组件的初始化事件，使其判断当前路由并进行相关处理：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\">mounted() &#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> that = <span class=\"keyword\">this</span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// 初始化检测</span></div><div class=\"line\">    that.init();</div><div class=\"line\">    <span class=\"comment\">// 设置iCheck插件初始化</span></div><div class=\"line\">    SetICheck(that);</div><div class=\"line\">    <span class=\"comment\">// 设置switchery插件初始化</span></div><div class=\"line\">    SetSwitchery(that);</div><div class=\"line\">    <span class=\"comment\">// 设置daterangepicker插件初始化</span></div><div class=\"line\">    SetDaterangepicker(that, <span class=\"string\">'#single_cal3'</span>);</div><div class=\"line\">&#125;,</div><div class=\"line\"><span class=\"comment\">// 监视路由</span></div><div class=\"line\">watch: &#123;</div><div class=\"line\">    $route() &#123;</div><div class=\"line\">        <span class=\"comment\">// 当路由改变，进行初始化检测</span></div><div class=\"line\">        <span class=\"keyword\">this</span>.init();</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure></p>\n<h3 id=\"相关时间处理\"><a href=\"#相关时间处理\" class=\"headerlink\" title=\"相关时间处理\"></a>相关时间处理</h3><p>下面是一些初始化检测，以及相关调用的事件<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div></pre></td><td class=\"code\"><pre><div class=\"line\">methods: &#123;</div><div class=\"line\">    <span class=\"comment\">// 初始化事件</span></div><div class=\"line\">    init() &#123;</div><div class=\"line\">        <span class=\"keyword\">var</span> that = <span class=\"keyword\">this</span>;</div><div class=\"line\">        <span class=\"comment\">// isEdit?</span></div><div class=\"line\">        <span class=\"keyword\">if</span> (that.$route.params.id) &#123;</div><div class=\"line\">            that.edit(that.$route.params.id);</div><div class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">            <span class=\"keyword\">var</span> data = initData();</div><div class=\"line\">            <span class=\"comment\">// 初始化默认值</span></div><div class=\"line\">            that.setChange(data);</div><div class=\"line\">            $.each(data, (key, item) =&gt; &#123;</div><div class=\"line\">                that.$set(that, key, item);</div><div class=\"line\">            &#125;);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;,</div><div class=\"line\">    <span class=\"comment\">// 编辑事件</span></div><div class=\"line\">    edit(id) &#123;</div><div class=\"line\">        <span class=\"keyword\">var</span> that = <span class=\"keyword\">this</span>;</div><div class=\"line\">        that.$set(that, <span class=\"string\">'isNew'</span>, <span class=\"literal\">false</span>);</div><div class=\"line\">        <span class=\"comment\">// 获取服务数据，这里使用模拟数据</span></div><div class=\"line\">        $.get(<span class=\"string\">`./static/service1.json`</span>, repo =&gt; &#123;</div><div class=\"line\">            <span class=\"comment\">// 设置组件data的值</span></div><div class=\"line\">            that.setChange(repo);</div><div class=\"line\">            $.each(repo, (key, item) =&gt; &#123;</div><div class=\"line\">                that.$set(that, key, item);</div><div class=\"line\">            &#125;);</div><div class=\"line\">        &#125;);</div><div class=\"line\">    &#125;,</div><div class=\"line\">    <span class=\"comment\">// 对插件进行赋值设置</span></div><div class=\"line\">    setChange(item) &#123;</div><div class=\"line\">        <span class=\"keyword\">var</span> that = <span class=\"keyword\">this</span>;</div><div class=\"line\">        <span class=\"comment\">// 设置iCheck赋值</span></div><div class=\"line\">        $(<span class=\"string\">`input.flat[name=\"type\"][value=\"<span class=\"subst\">$&#123;item.type&#125;</span>\"]`</span>).iCheck(<span class=\"string\">'check'</span>);</div><div class=\"line\">        <span class=\"comment\">// 设置switchery赋值</span></div><div class=\"line\">        <span class=\"keyword\">if</span> (item.state !== that.state) &#123;</div><div class=\"line\">            $(<span class=\"string\">'.js-switch[name=\"state\"]'</span>).trigger(<span class=\"string\">'click'</span>);</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">if</span> (item.directIssue !== that.directIssue) &#123;</div><div class=\"line\">            $(<span class=\"string\">'.js-switch[name=\"directIssue\"]'</span>).trigger(<span class=\"string\">'click'</span>);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;,</div><div class=\"line\">    submit() &#123;</div><div class=\"line\">        <span class=\"keyword\">var</span> that = <span class=\"keyword\">this</span>,</div><div class=\"line\">            text;</div><div class=\"line\">        <span class=\"comment\">// 先做一些简单的校验，不通过则显示错误信息</span></div><div class=\"line\">        <span class=\"keyword\">if</span> (!that.name) &#123;</div><div class=\"line\">            text = <span class=\"string\">'请填写名称'</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">if</span> (text) &#123;</div><div class=\"line\">            that.error.text = text;</div><div class=\"line\">            that.error.shown = <span class=\"literal\">true</span>;</div><div class=\"line\">            <span class=\"keyword\">return</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">        that.error.shown = <span class=\"literal\">false</span>;</div><div class=\"line\">        <span class=\"keyword\">var</span> that = <span class=\"keyword\">this</span>;</div><div class=\"line\"></div><div class=\"line\">        that.$router.push(<span class=\"string\">'/app/terminals'</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h3 id=\"页面效果\"><a href=\"#页面效果\" class=\"headerlink\" title=\"页面效果\"></a>页面效果</h3><ul>\n<li>新建</li>\n</ul>\n<p><img src=\"http://o905ne85q.bkt.clouddn.com/280.tmp.png\" alt=\"image\"></p>\n<ul>\n<li>编辑</li>\n</ul>\n<p><img src=\"http://o905ne85q.bkt.clouddn.com/EEE6.tmp.png\" alt=\"image\"></p>\n<h2 id=\"结束语\"><a href=\"#结束语\" class=\"headerlink\" title=\"结束语\"></a>结束语</h2><hr>\n<p>当初对于多个路由匹配单个组件，本骚年还以为一定会有一些方法，在路由改变的时候进行销毁重建组件，后来找不到，最终也就监视路由进行处理。虽然有可能是本骚年太蠢没找到对应的方法调用，但是其实这种监视路由处理的方法或许更合理一些呢。<br><a href=\"https://github.com/godbasin/godbasin.github.io/tree/blog-codes/vue2-notes/9-watch-router\" target=\"_blank\" rel=\"external\">此处查看项目代码</a><br><a href=\"http://ofyya1gfg.bkt.clouddn.com/9-watch-router/index.html#/app/add/service\" target=\"_blank\" rel=\"external\">此处查看页面效果</a></p>\n","excerpt":"<p>最近在使用Vue2作为项目中前端的框架，《Vue2使用笔记》系列用于记录过程中的一些使用和解决方法。<br>本文记录vue中处理单个组件加载不同路由时进行相关处理的过程。<br>","more":"</p>\n<h2 id=\"多路由单组件\"><a href=\"#多路由单组件\" class=\"headerlink\" title=\"多路由单组件\"></a>多路由单组件</h2><hr>\n<p>当我们使用单个组件绑定多个路由的时候，路由的跳转并不能再次触发组件的重建，此时我们需要对路由进行监视。</p>\n<h3 id=\"vue-router2\"><a href=\"#vue-router2\" class=\"headerlink\" title=\"vue-router2\"></a>vue-router2</h3><p>对于vue-router 2版本的部分说明，本骚年在前面章节已经说过，大家有兴趣可以移步<a href=\"\">《Vue2使用笔记4–vue-router使用》</a>。</p>\n<h3 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h3><p><a href=\"https://vuefe.cn/guide/\">Vue2.0中文文档</a><br><a href=\"http://router.vuejs.org/zh-cn/index.html\">vue-router 2官方文档</a></p>\n<h2 id=\"使用同一组件进行新建以及编辑\"><a href=\"#使用同一组件进行新建以及编辑\" class=\"headerlink\" title=\"使用同一组件进行新建以及编辑\"></a>使用同一组件进行新建以及编辑</h2><hr>\n<p>这里我们将修改ServiceAdd组件，来进行新建以及编辑的不同处理。</p>\n<h3 id=\"添加编辑路由\"><a href=\"#添加编辑路由\" class=\"headerlink\" title=\"添加编辑路由\"></a>添加编辑路由</h3><p>我们在main.js中添加编辑服务的路由，与新建使用一个组件；<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">const</span> routes = [</div><div class=\"line\">    ...</div><div class=\"line\">    &#123;</div><div class=\"line\">        <span class=\"attr\">path</span>: <span class=\"string\">'/app'</span>,</div><div class=\"line\">        <span class=\"attr\">component</span>: App,</div><div class=\"line\">        <span class=\"attr\">name</span>: <span class=\"string\">'App'</span>,</div><div class=\"line\">        <span class=\"comment\">// 设置子路由</span></div><div class=\"line\">        children: [</div><div class=\"line\">    ...</div><div class=\"line\">    , &#123;</div><div class=\"line\">            <span class=\"comment\">// 添加服务</span></div><div class=\"line\">            path: <span class=\"string\">'add/service'</span>,</div><div class=\"line\">            <span class=\"attr\">component</span>: ServiceAdd,</div><div class=\"line\">            <span class=\"attr\">name</span>: <span class=\"string\">'ServiceAdd'</span></div><div class=\"line\">        &#125;, &#123;</div><div class=\"line\">            <span class=\"comment\">// 修改服务</span></div><div class=\"line\">            path: <span class=\"string\">'edit/service/:id'</span>,</div><div class=\"line\">            <span class=\"attr\">component</span>: ServiceAdd,</div><div class=\"line\">            <span class=\"attr\">name</span>: <span class=\"string\">'ServiceEdit'</span></div><div class=\"line\">        &#125;</div><div class=\"line\">    ...</div><div class=\"line\">    ]</div><div class=\"line\">    &#125;</div><div class=\"line\">  ...</div><div class=\"line\">]</div></pre></td></tr></table></figure></p>\n<h3 id=\"将组件初始化事件进行调整\"><a href=\"#将组件初始化事件进行调整\" class=\"headerlink\" title=\"将组件初始化事件进行调整\"></a>将组件初始化事件进行调整</h3><p>接下来我们调整组件的初始化事件，使其判断当前路由并进行相关处理：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\">mounted() &#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> that = <span class=\"keyword\">this</span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// 初始化检测</span></div><div class=\"line\">    that.init();</div><div class=\"line\">    <span class=\"comment\">// 设置iCheck插件初始化</span></div><div class=\"line\">    SetICheck(that);</div><div class=\"line\">    <span class=\"comment\">// 设置switchery插件初始化</span></div><div class=\"line\">    SetSwitchery(that);</div><div class=\"line\">    <span class=\"comment\">// 设置daterangepicker插件初始化</span></div><div class=\"line\">    SetDaterangepicker(that, <span class=\"string\">'#single_cal3'</span>);</div><div class=\"line\">&#125;,</div><div class=\"line\"><span class=\"comment\">// 监视路由</span></div><div class=\"line\">watch: &#123;</div><div class=\"line\">    $route() &#123;</div><div class=\"line\">        <span class=\"comment\">// 当路由改变，进行初始化检测</span></div><div class=\"line\">        <span class=\"keyword\">this</span>.init();</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure></p>\n<h3 id=\"相关时间处理\"><a href=\"#相关时间处理\" class=\"headerlink\" title=\"相关时间处理\"></a>相关时间处理</h3><p>下面是一些初始化检测，以及相关调用的事件<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div></pre></td><td class=\"code\"><pre><div class=\"line\">methods: &#123;</div><div class=\"line\">    <span class=\"comment\">// 初始化事件</span></div><div class=\"line\">    init() &#123;</div><div class=\"line\">        <span class=\"keyword\">var</span> that = <span class=\"keyword\">this</span>;</div><div class=\"line\">        <span class=\"comment\">// isEdit?</span></div><div class=\"line\">        <span class=\"keyword\">if</span> (that.$route.params.id) &#123;</div><div class=\"line\">            that.edit(that.$route.params.id);</div><div class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">            <span class=\"keyword\">var</span> data = initData();</div><div class=\"line\">            <span class=\"comment\">// 初始化默认值</span></div><div class=\"line\">            that.setChange(data);</div><div class=\"line\">            $.each(data, (key, item) =&gt; &#123;</div><div class=\"line\">                that.$set(that, key, item);</div><div class=\"line\">            &#125;);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;,</div><div class=\"line\">    <span class=\"comment\">// 编辑事件</span></div><div class=\"line\">    edit(id) &#123;</div><div class=\"line\">        <span class=\"keyword\">var</span> that = <span class=\"keyword\">this</span>;</div><div class=\"line\">        that.$set(that, <span class=\"string\">'isNew'</span>, <span class=\"literal\">false</span>);</div><div class=\"line\">        <span class=\"comment\">// 获取服务数据，这里使用模拟数据</span></div><div class=\"line\">        $.get(<span class=\"string\">`./static/service1.json`</span>, repo =&gt; &#123;</div><div class=\"line\">            <span class=\"comment\">// 设置组件data的值</span></div><div class=\"line\">            that.setChange(repo);</div><div class=\"line\">            $.each(repo, (key, item) =&gt; &#123;</div><div class=\"line\">                that.$set(that, key, item);</div><div class=\"line\">            &#125;);</div><div class=\"line\">        &#125;);</div><div class=\"line\">    &#125;,</div><div class=\"line\">    <span class=\"comment\">// 对插件进行赋值设置</span></div><div class=\"line\">    setChange(item) &#123;</div><div class=\"line\">        <span class=\"keyword\">var</span> that = <span class=\"keyword\">this</span>;</div><div class=\"line\">        <span class=\"comment\">// 设置iCheck赋值</span></div><div class=\"line\">        $(<span class=\"string\">`input.flat[name=\"type\"][value=\"<span class=\"subst\">$&#123;item.type&#125;</span>\"]`</span>).iCheck(<span class=\"string\">'check'</span>);</div><div class=\"line\">        <span class=\"comment\">// 设置switchery赋值</span></div><div class=\"line\">        <span class=\"keyword\">if</span> (item.state !== that.state) &#123;</div><div class=\"line\">            $(<span class=\"string\">'.js-switch[name=\"state\"]'</span>).trigger(<span class=\"string\">'click'</span>);</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">if</span> (item.directIssue !== that.directIssue) &#123;</div><div class=\"line\">            $(<span class=\"string\">'.js-switch[name=\"directIssue\"]'</span>).trigger(<span class=\"string\">'click'</span>);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;,</div><div class=\"line\">    submit() &#123;</div><div class=\"line\">        <span class=\"keyword\">var</span> that = <span class=\"keyword\">this</span>,</div><div class=\"line\">            text;</div><div class=\"line\">        <span class=\"comment\">// 先做一些简单的校验，不通过则显示错误信息</span></div><div class=\"line\">        <span class=\"keyword\">if</span> (!that.name) &#123;</div><div class=\"line\">            text = <span class=\"string\">'请填写名称'</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">if</span> (text) &#123;</div><div class=\"line\">            that.error.text = text;</div><div class=\"line\">            that.error.shown = <span class=\"literal\">true</span>;</div><div class=\"line\">            <span class=\"keyword\">return</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">        that.error.shown = <span class=\"literal\">false</span>;</div><div class=\"line\">        <span class=\"keyword\">var</span> that = <span class=\"keyword\">this</span>;</div><div class=\"line\"></div><div class=\"line\">        that.$router.push(<span class=\"string\">'/app/terminals'</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h3 id=\"页面效果\"><a href=\"#页面效果\" class=\"headerlink\" title=\"页面效果\"></a>页面效果</h3><ul>\n<li>新建</li>\n</ul>\n<p><img src=\"http://o905ne85q.bkt.clouddn.com/280.tmp.png\" alt=\"image\"></p>\n<ul>\n<li>编辑</li>\n</ul>\n<p><img src=\"http://o905ne85q.bkt.clouddn.com/EEE6.tmp.png\" alt=\"image\"></p>\n<h2 id=\"结束语\"><a href=\"#结束语\" class=\"headerlink\" title=\"结束语\"></a>结束语</h2><hr>\n<p>当初对于多个路由匹配单个组件，本骚年还以为一定会有一些方法，在路由改变的时候进行销毁重建组件，后来找不到，最终也就监视路由进行处理。虽然有可能是本骚年太蠢没找到对应的方法调用，但是其实这种监视路由处理的方法或许更合理一些呢。<br><a href=\"https://github.com/godbasin/godbasin.github.io/tree/blog-codes/vue2-notes/9-watch-router\">此处查看项目代码</a><br><a href=\"http://ofyya1gfg.bkt.clouddn.com/9-watch-router/index.html#/app/add/service\">此处查看页面效果</a></p>"}],"PostAsset":[],"PostCategory":[{"post_id":"cix45hudt0000xotuoi3yw25t","category_id":"cix45hue00002xotuupr64fui","_id":"cix45huee000bxotu5qmigjnr"},{"post_id":"cix45hudy0001xotus3fg1u9k","category_id":"cix45hue00002xotuupr64fui","_id":"cix45huej000hxotu8zh3ara0"},{"post_id":"cix45huei000gxotuqv7atp3f","category_id":"cix45hueg000dxotug5x9p61v","_id":"cix45huen000nxotuoxe0imze"},{"post_id":"cix45hue30004xotuqyetckzs","category_id":"cix45hueg000dxotug5x9p61v","_id":"cix45hueq000sxotuxcn7klvg"},{"post_id":"cix45huek000ixotunxdtl07a","category_id":"cix45hueg000dxotug5x9p61v","_id":"cix45hues000vxotuic6tj74p"},{"post_id":"cix45huem000mxotu0rj83ynw","category_id":"cix45hueg000dxotug5x9p61v","_id":"cix45huex0010xotu34tjqyrc"},{"post_id":"cix45hue50005xotu0fzre19e","category_id":"cix45hueg000dxotug5x9p61v","_id":"cix45huf20013xotu5p9bijh9"},{"post_id":"cix45hueo000pxotu4l0esauk","category_id":"cix45hueg000dxotug5x9p61v","_id":"cix45huf50018xotu4uth7e6o"},{"post_id":"cix45huer000uxotutjz983d8","category_id":"cix45hueg000dxotug5x9p61v","_id":"cix45huf6001bxotu5jq8fxul"},{"post_id":"cix45hue70006xotu7se1p92h","category_id":"cix45hueg000dxotug5x9p61v","_id":"cix45huf8001exotuvvl4gh14"},{"post_id":"cix45huet000xxotur4g578xx","category_id":"cix45hueg000dxotug5x9p61v","_id":"cix45hufb001hxotu5fdozi2q"},{"post_id":"cix45huf00012xotumf0ibb29","category_id":"cix45hueg000dxotug5x9p61v","_id":"cix45huff001lxotupdtpah9p"},{"post_id":"cix45huec000axotu4eq56a2r","category_id":"cix45hueg000dxotug5x9p61v","_id":"cix45hufj001oxotu2ebs0hpy"},{"post_id":"cix45huf20015xotuafpt11hd","category_id":"cix45hueg000dxotug5x9p61v","_id":"cix45hufn001rxotu8hf90ko5"},{"post_id":"cix45huf6001axotulppb63o1","category_id":"cix45hueg000dxotug5x9p61v","_id":"cix45hufr001vxotu1kl040wd"},{"post_id":"cix45huef000cxotut886hvur","category_id":"cix45hueg000dxotug5x9p61v","_id":"cix45hufs001yxotukivs8nvk"},{"post_id":"cix45huf7001dxotu761jqjxj","category_id":"cix45hueg000dxotug5x9p61v","_id":"cix45hufu0022xotumoqgbpvf"},{"post_id":"cix45hufl001qxotuhi9tgcn5","category_id":"cix45huff001kxotum82rnung","_id":"cix45hufw0025xotutkpkejuz"},{"post_id":"cix45huf9001gxotuuoglf47n","category_id":"cix45huff001kxotum82rnung","_id":"cix45hufy0028xotuh5xvoned"},{"post_id":"cix45hufn001txotuap3sdwq4","category_id":"cix45huff001kxotum82rnung","_id":"cix45hug0002bxotubzmjsce9"},{"post_id":"cix45hufr001xxotue7liatxh","category_id":"cix45huff001kxotum82rnung","_id":"cix45hug5002gxotuoos6mdp0"},{"post_id":"cix45hufc001jxotum3km2pt3","category_id":"cix45huff001kxotum82rnung","_id":"cix45hug7002jxotu5c5ohdiu"},{"post_id":"cix45huft0020xotuvwdvg390","category_id":"cix45huff001kxotum82rnung","_id":"cix45huga002mxotud89fovg1"},{"post_id":"cix45hufv0024xotuocegl0dl","category_id":"cix45huff001kxotum82rnung","_id":"cix45hugb002qxotuvd2pi5hu"},{"post_id":"cix45hufg001nxotuud43hc2f","category_id":"cix45huff001kxotum82rnung","_id":"cix45hugc002sxotujreayw9e"},{"post_id":"cix45hufw0027xotusez6ht4n","category_id":"cix45huff001kxotum82rnung","_id":"cix45hugd002wxotuwx145tsl"},{"post_id":"cix45hug7002lxotu6bd29kc9","category_id":"cix45hug4002exotuquogd6ii","_id":"cix45huge002yxotuvf56jl4c"},{"post_id":"cix45hufy002axotujctydwj4","category_id":"cix45hug4002exotuquogd6ii","_id":"cix45huge0030xotuvd06vk7y"},{"post_id":"cix45hug0002dxotu2xprjana","category_id":"cix45hugb002oxotudducgjbi","_id":"cix45hugf0032xotuvr2nhxtc"},{"post_id":"cix45hug5002ixotundtknnpu","category_id":"cix45hugb002oxotudducgjbi","_id":"cix45hugf0034xotugolpllvx"},{"post_id":"cix45hugw0035xotu37kao1dh","category_id":"cix45hug4002exotuquogd6ii","_id":"cix45huh4003cxoturdipnh5u"},{"post_id":"cix45hugy0037xotuwe6dxp0t","category_id":"cix45hug4002exotuquogd6ii","_id":"cix45huh6003hxotud9l25x28"},{"post_id":"cix45huh5003exotul8odcmx6","category_id":"cix45hug4002exotuquogd6ii","_id":"cix45huh9003lxotuvl095un3"},{"post_id":"cix45huh8003kxotu79o6cf3l","category_id":"cix45hug4002exotuquogd6ii","_id":"cix45huhe003rxotuo2p0c108"},{"post_id":"cix45huh0003axotu3gvc7wmf","category_id":"cix45huh6003fxotuxhbcexhv","_id":"cix45huhg003vxotura06lwjl"},{"post_id":"cix45huh6003ixotu7894kkhk","category_id":"cix45huh6003fxotuxhbcexhv","_id":"cix45huhk003zxotuv8j3if27"},{"post_id":"cix45huhh003xxotuiqn0mlzc","category_id":"cix45huhg003uxotujtb2mvvk","_id":"cix45huhq0044xotuoz9hiuq8"},{"post_id":"cix45huha003mxotui1zuk0zk","category_id":"cix45huhg003uxotujtb2mvvk","_id":"cix45huhs0048xotuao87cgfg"},{"post_id":"cix45huhl0040xotulo59grh9","category_id":"cix45huhg003uxotujtb2mvvk","_id":"cix45huhu004bxotuy0o5rp4h"},{"post_id":"cix45huho0043xotud2s9my0q","category_id":"cix45huhg003uxotujtb2mvvk","_id":"cix45huhw004exotu8xf9kcdd"},{"post_id":"cix45huhc003qxotuhdnydbck","category_id":"cix45huhg003uxotujtb2mvvk","_id":"cix45huhx004hxotu3nqkk50u"},{"post_id":"cix45huhq0046xotu1pt8suy7","category_id":"cix45huhg003uxotujtb2mvvk","_id":"cix45hui2004kxotuawbt5jft"},{"post_id":"cix45huhs004axotu0xbaequ5","category_id":"cix45huhg003uxotujtb2mvvk","_id":"cix45hui3004nxotu8hyifw5x"},{"post_id":"cix45huhf003txotu9mt9qj93","category_id":"cix45huhg003uxotujtb2mvvk","_id":"cix45hui5004rxotug71az6cw"},{"post_id":"cix45huhu004dxotu8fkqds04","category_id":"cix45huhg003uxotujtb2mvvk","_id":"cix45hui7004uxotug0b1gevs"},{"post_id":"cix45huhw004gxotu2rjs1kd5","category_id":"cix45huh6003fxotuxhbcexhv","_id":"cix45hui8004xxotux5a5wzl8"},{"post_id":"cix45huhy004jxotul0pqgs1d","category_id":"cix45huhg003uxotujtb2mvvk","_id":"cix45huia0051xoturwrl7adz"},{"post_id":"cix45hui7004wxotucvl5itej","category_id":"cix45hui5004qxotujeyu12my","_id":"cix45huic0054xotusqcjqrlt"},{"post_id":"cix45hui2004mxotukeabg0fa","category_id":"cix45hui5004qxotujeyu12my","_id":"cix45huig0058xotujcn2rrie"},{"post_id":"cix45hui9004zxotuqo3nwx6o","category_id":"cix45hui5004qxotujeyu12my","_id":"cix45huij005bxotu0f8hurpq"},{"post_id":"cix45huib0053xotuirp3a7fx","category_id":"cix45hui5004qxotujeyu12my","_id":"cix45huil005exotuyl2cfn2v"},{"post_id":"cix45hui4004pxotuvuzs7blv","category_id":"cix45hui5004qxotujeyu12my","_id":"cix45huin005hxotubjixsvyc"},{"post_id":"cix45huid0056xotujk36hvs1","category_id":"cix45hui5004qxotujeyu12my","_id":"cix45huio005kxotu5a03behw"},{"post_id":"cix45huih005axotu7zim20lw","category_id":"cix45hui5004qxotujeyu12my","_id":"cix45huip005nxotue1wyj8y2"},{"post_id":"cix45hui6004txotuib0b3ggs","category_id":"cix45hui5004qxotujeyu12my","_id":"cix45huir005qxotuuh68svkf"},{"post_id":"cix45huik005dxotuxhr2hfi6","category_id":"cix45hui5004qxotujeyu12my","_id":"cix45huis005sxotukij9owh7"},{"post_id":"cix45huil005gxotu0lld8lp8","category_id":"cix45hui5004qxotujeyu12my","_id":"cix45huis005uxotu2xtne7mc"},{"post_id":"cix45huin005jxotua2us0bve","category_id":"cix45hui5004qxotujeyu12my","_id":"cix45huis005wxotudrtspobi"},{"post_id":"cix45huip005mxotunmgmvs7w","category_id":"cix45hui5004qxotujeyu12my","_id":"cix45huit005yxotu0mzdt9bj"},{"post_id":"cix45huiq005pxotucr44c6yn","category_id":"cix45hui5004qxotujeyu12my","_id":"cix45huit005zxotus54jotug"}],"PostTag":[{"post_id":"cix45hudt0000xotuoi3yw25t","tag_id":"cix45hue30003xotuzw8fhiv3","_id":"cix45huec0009xotub18ec9cw"},{"post_id":"cix45hudy0001xotus3fg1u9k","tag_id":"cix45hue30003xotuzw8fhiv3","_id":"cix45hueh000fxotutn44naym"},{"post_id":"cix45huei000gxotuqv7atp3f","tag_id":"cix45hueg000exotu40vaf06m","_id":"cix45huem000lxotulkmxjg97"},{"post_id":"cix45hue30004xotuqyetckzs","tag_id":"cix45hueg000exotu40vaf06m","_id":"cix45huen000oxotuviblsleg"},{"post_id":"cix45huek000ixotunxdtl07a","tag_id":"cix45hueg000exotu40vaf06m","_id":"cix45huer000txotu8ak1kzvm"},{"post_id":"cix45huem000mxotu0rj83ynw","tag_id":"cix45hueg000exotu40vaf06m","_id":"cix45hues000wxotu61t19v2k"},{"post_id":"cix45hue50005xotu0fzre19e","tag_id":"cix45hueg000exotu40vaf06m","_id":"cix45huex0011xotu6wd3dy77"},{"post_id":"cix45hueo000pxotu4l0esauk","tag_id":"cix45hueg000exotu40vaf06m","_id":"cix45huf20014xotu16i5d68a"},{"post_id":"cix45huer000uxotutjz983d8","tag_id":"cix45hueg000exotu40vaf06m","_id":"cix45huf50019xotu3j1segbj"},{"post_id":"cix45hue70006xotu7se1p92h","tag_id":"cix45hueg000exotu40vaf06m","_id":"cix45huf7001cxotucvcn3790"},{"post_id":"cix45huet000xxotur4g578xx","tag_id":"cix45hueg000exotu40vaf06m","_id":"cix45huf8001fxotuf5wqp9zq"},{"post_id":"cix45huf00012xotumf0ibb29","tag_id":"cix45hueg000exotu40vaf06m","_id":"cix45hufb001ixotuiemgkya9"},{"post_id":"cix45huec000axotu4eq56a2r","tag_id":"cix45hueg000exotu40vaf06m","_id":"cix45huff001mxotukxcxmf7a"},{"post_id":"cix45huf20015xotuafpt11hd","tag_id":"cix45hueg000exotu40vaf06m","_id":"cix45hufk001pxotuistfuino"},{"post_id":"cix45huf6001axotulppb63o1","tag_id":"cix45hueg000exotu40vaf06m","_id":"cix45hufn001sxotuk7396yb2"},{"post_id":"cix45huef000cxotut886hvur","tag_id":"cix45hueg000exotu40vaf06m","_id":"cix45hufr001wxotusbk66nb3"},{"post_id":"cix45huf7001dxotu761jqjxj","tag_id":"cix45hueg000exotu40vaf06m","_id":"cix45hufs001zxotuqhebojyz"},{"post_id":"cix45huf9001gxotuuoglf47n","tag_id":"cix45hueg000exotu40vaf06m","_id":"cix45hufu0023xotu803uz8qy"},{"post_id":"cix45hufc001jxotum3km2pt3","tag_id":"cix45hueg000exotu40vaf06m","_id":"cix45hufw0026xotu1q6a2q91"},{"post_id":"cix45hufg001nxotuud43hc2f","tag_id":"cix45hueg000exotu40vaf06m","_id":"cix45hufy0029xotueracgcb6"},{"post_id":"cix45hufl001qxotuhi9tgcn5","tag_id":"cix45hueg000exotu40vaf06m","_id":"cix45hug0002cxotustbf5dsm"},{"post_id":"cix45hufn001txotuap3sdwq4","tag_id":"cix45hueg000exotu40vaf06m","_id":"cix45hug5002hxotuyojtw4y0"},{"post_id":"cix45hufr001xxotue7liatxh","tag_id":"cix45hueg000exotu40vaf06m","_id":"cix45hug7002kxotu8f70xomp"},{"post_id":"cix45huft0020xotuvwdvg390","tag_id":"cix45hueg000exotu40vaf06m","_id":"cix45huga002nxotucoa4xv97"},{"post_id":"cix45hufv0024xotuocegl0dl","tag_id":"cix45hueg000exotu40vaf06m","_id":"cix45hugb002rxotug326t4wo"},{"post_id":"cix45hufw0027xotusez6ht4n","tag_id":"cix45hueg000exotu40vaf06m","_id":"cix45hugd002txotu61mbn51r"},{"post_id":"cix45hug5002ixotundtknnpu","tag_id":"cix45hue30003xotuzw8fhiv3","_id":"cix45huge002xxotuojj4obp7"},{"post_id":"cix45hufy002axotujctydwj4","tag_id":"cix45hug4002fxotum288b3em","_id":"cix45huge002zxoturwfpu8go"},{"post_id":"cix45hug0002dxotu2xprjana","tag_id":"cix45hugb002pxotu6yku4cjk","_id":"cix45huge0031xotuaw86w33r"},{"post_id":"cix45hug7002lxotu6bd29kc9","tag_id":"cix45hugd002vxotuwx6leqtf","_id":"cix45hugf0033xotupded6ylx"},{"post_id":"cix45hugw0035xotu37kao1dh","tag_id":"cix45hugd002vxotuwx6leqtf","_id":"cix45huh00039xotud7qthz7z"},{"post_id":"cix45hugy0037xotuwe6dxp0t","tag_id":"cix45hueg000exotu40vaf06m","_id":"cix45huh4003dxotu45jrltu1"},{"post_id":"cix45huh5003exotul8odcmx6","tag_id":"cix45hugd002vxotuwx6leqtf","_id":"cix45huh8003jxotuhwrb1dgx"},{"post_id":"cix45huh8003kxotu79o6cf3l","tag_id":"cix45hugd002vxotuwx6leqtf","_id":"cix45huhc003pxotua0lvwtyg"},{"post_id":"cix45huh0003axotu3gvc7wmf","tag_id":"cix45huh6003gxotuwoklew3f","_id":"cix45huhf003sxotu4fnt3png"},{"post_id":"cix45huha003mxotui1zuk0zk","tag_id":"cix45hueg000exotu40vaf06m","_id":"cix45huhg003wxotugh3a64sc"},{"post_id":"cix45huhc003qxotuhdnydbck","tag_id":"cix45hueg000exotu40vaf06m","_id":"cix45huhk003yxotu6w7f5io2"},{"post_id":"cix45huh6003ixotu7894kkhk","tag_id":"cix45huh6003gxotuwoklew3f","_id":"cix45huho0042xotu3ikytnr0"},{"post_id":"cix45huhf003txotu9mt9qj93","tag_id":"cix45hueg000exotu40vaf06m","_id":"cix45huhq0045xotug1zz8ep3"},{"post_id":"cix45huhh003xxotuiqn0mlzc","tag_id":"cix45hueg000exotu40vaf06m","_id":"cix45huhs0049xotum059eyg3"},{"post_id":"cix45huhl0040xotulo59grh9","tag_id":"cix45hueg000exotu40vaf06m","_id":"cix45huhu004cxotu5nsfa53i"},{"post_id":"cix45huho0043xotud2s9my0q","tag_id":"cix45hueg000exotu40vaf06m","_id":"cix45huhw004fxotupnz5ectd"},{"post_id":"cix45huhq0046xotu1pt8suy7","tag_id":"cix45hueg000exotu40vaf06m","_id":"cix45huhx004ixotubv36k3le"},{"post_id":"cix45huhs004axotu0xbaequ5","tag_id":"cix45hueg000exotu40vaf06m","_id":"cix45hui2004lxotumlnaew4k"},{"post_id":"cix45huhu004dxotu8fkqds04","tag_id":"cix45hueg000exotu40vaf06m","_id":"cix45hui4004oxotuztt4qglm"},{"post_id":"cix45huhw004gxotu2rjs1kd5","tag_id":"cix45hugd002vxotuwx6leqtf","_id":"cix45hui5004sxotuq3i4h7pg"},{"post_id":"cix45huhy004jxotul0pqgs1d","tag_id":"cix45hueg000exotu40vaf06m","_id":"cix45hui7004vxotub8r9x9ey"},{"post_id":"cix45hui2004mxotukeabg0fa","tag_id":"cix45hueg000exotu40vaf06m","_id":"cix45hui8004yxotusj0u4hmt"},{"post_id":"cix45hui4004pxotuvuzs7blv","tag_id":"cix45hueg000exotu40vaf06m","_id":"cix45huib0052xotug9pwfury"},{"post_id":"cix45hui6004txotuib0b3ggs","tag_id":"cix45hueg000exotu40vaf06m","_id":"cix45huic0055xotusmo9z1td"},{"post_id":"cix45hui7004wxotucvl5itej","tag_id":"cix45hueg000exotu40vaf06m","_id":"cix45huih0059xotuc13yiyy8"},{"post_id":"cix45hui9004zxotuqo3nwx6o","tag_id":"cix45hueg000exotu40vaf06m","_id":"cix45huij005cxotucka9eui8"},{"post_id":"cix45huib0053xotuirp3a7fx","tag_id":"cix45hueg000exotu40vaf06m","_id":"cix45huil005fxotun30zbfvh"},{"post_id":"cix45huid0056xotujk36hvs1","tag_id":"cix45hueg000exotu40vaf06m","_id":"cix45huin005ixotuvx41nqj1"},{"post_id":"cix45huih005axotu7zim20lw","tag_id":"cix45hueg000exotu40vaf06m","_id":"cix45huio005lxotumepgw51b"},{"post_id":"cix45huik005dxotuxhr2hfi6","tag_id":"cix45hueg000exotu40vaf06m","_id":"cix45huiq005oxotu65giw8tl"},{"post_id":"cix45huil005gxotu0lld8lp8","tag_id":"cix45hueg000exotu40vaf06m","_id":"cix45huir005rxotuj1n2rl7i"},{"post_id":"cix45huin005jxotua2us0bve","tag_id":"cix45hueg000exotu40vaf06m","_id":"cix45huis005txotuzlmewm0k"},{"post_id":"cix45huip005mxotunmgmvs7w","tag_id":"cix45hueg000exotu40vaf06m","_id":"cix45huis005vxotujpqw0qrv"},{"post_id":"cix45huiq005pxotucr44c6yn","tag_id":"cix45hueg000exotu40vaf06m","_id":"cix45huis005xxotu0x32gqxu"}],"Tag":[{"name":"分享","_id":"cix45hue30003xotuzw8fhiv3"},{"name":"笔记","_id":"cix45hueg000exotu40vaf06m"},{"name":"原创部件","_id":"cix45hug4002fxotum288b3em"},{"name":"教程","_id":"cix45hugb002pxotu6yku4cjk"},{"name":"逻辑实现","_id":"cix45hugd002vxotuwx6leqtf"},{"name":"自制插件","_id":"cix45huh6003gxotuwoklew3f"}]}}