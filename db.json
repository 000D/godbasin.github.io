{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"themes/pacman/source/css/style.styl","path":"css/style.styl","modified":0,"renderable":1},{"_id":"themes/pacman/source/font/coveredbyyourgrace-webfont.eot","path":"font/coveredbyyourgrace-webfont.eot","modified":0,"renderable":1},{"_id":"themes/pacman/source/font/coveredbyyourgrace-webfont.ttf","path":"font/coveredbyyourgrace-webfont.ttf","modified":0,"renderable":1},{"_id":"themes/pacman/source/font/FontAwesome.otf","path":"font/FontAwesome.otf","modified":0,"renderable":1},{"_id":"themes/pacman/source/font/fontawesome-webfont.eot","path":"font/fontawesome-webfont.eot","modified":0,"renderable":1},{"_id":"themes/pacman/source/font/coveredbyyourgrace-webfont.svg","path":"font/coveredbyyourgrace-webfont.svg","modified":0,"renderable":1},{"_id":"themes/pacman/source/font/fontawesome-webfont.ttf","path":"font/fontawesome-webfont.ttf","modified":0,"renderable":1},{"_id":"themes/pacman/source/fancybox/blank.gif","path":"fancybox/blank.gif","modified":0,"renderable":1},{"_id":"themes/pacman/source/fancybox/fancybox_sprite@2x.png","path":"fancybox/fancybox_sprite@2x.png","modified":0,"renderable":1},{"_id":"themes/pacman/source/fancybox/fancybox_loading@2x.gif","path":"fancybox/fancybox_loading@2x.gif","modified":0,"renderable":1},{"_id":"themes/pacman/source/fancybox/jquery.fancybox.css","path":"fancybox/jquery.fancybox.css","modified":0,"renderable":1},{"_id":"themes/pacman/source/fancybox/fancybox_loading.gif","path":"fancybox/fancybox_loading.gif","modified":0,"renderable":1},{"_id":"themes/pacman/source/fancybox/fancybox_sprite.png","path":"fancybox/fancybox_sprite.png","modified":0,"renderable":1},{"_id":"themes/pacman/source/fancybox/helpers/jquery.fancybox-thumbs.js","path":"fancybox/helpers/jquery.fancybox-thumbs.js","modified":0,"renderable":1},{"_id":"themes/pacman/source/fancybox/helpers/jquery.fancybox-buttons.css","path":"fancybox/helpers/jquery.fancybox-buttons.css","modified":0,"renderable":1},{"_id":"themes/pacman/source/fancybox/helpers/jquery.fancybox-buttons.js","path":"fancybox/helpers/jquery.fancybox-buttons.js","modified":0,"renderable":1},{"_id":"themes/pacman/source/fancybox/helpers/fancybox_buttons.png","path":"fancybox/helpers/fancybox_buttons.png","modified":0,"renderable":1},{"_id":"themes/pacman/source/img/sun.png","path":"img/sun.png","modified":0,"renderable":1},{"_id":"themes/pacman/source/img/favicon.ico","path":"img/favicon.ico","modified":0,"renderable":1},{"_id":"themes/pacman/source/img/author.jpg","path":"img/author.jpg","modified":0,"renderable":1},{"_id":"themes/pacman/source/fancybox/jquery.fancybox.js","path":"fancybox/jquery.fancybox.js","modified":0,"renderable":1},{"_id":"themes/pacman/source/font/fontawesome-webfont.svg","path":"font/fontawesome-webfont.svg","modified":0,"renderable":1},{"_id":"themes/pacman/source/img/logo.svg","path":"img/logo.svg","modified":0,"renderable":1},{"_id":"themes/pacman/source/fancybox/helpers/jquery.fancybox-thumbs.css","path":"fancybox/helpers/jquery.fancybox-thumbs.css","modified":0,"renderable":1},{"_id":"themes/pacman/source/js/jquery-2.1.0.min.js","path":"js/jquery-2.1.0.min.js","modified":0,"renderable":1},{"_id":"themes/pacman/source/fancybox/fancybox_overlay.png","path":"fancybox/fancybox_overlay.png","modified":0,"renderable":1},{"_id":"themes/pacman/source/fancybox/helpers/jquery.fancybox-media.js","path":"fancybox/helpers/jquery.fancybox-media.js","modified":0,"renderable":1},{"_id":"themes/pacman/source/font/fontawesome-webfont.woff","path":"font/fontawesome-webfont.woff","modified":0,"renderable":1},{"_id":"themes/pacman/source/fancybox/jquery.fancybox.pack.js","path":"fancybox/jquery.fancybox.pack.js","modified":0,"renderable":1},{"_id":"themes/pacman/source/font/coveredbyyourgrace-webfont.woff","path":"font/coveredbyyourgrace-webfont.woff","modified":0,"renderable":1}],"Cache":[{"_id":"source/categories/index.md","hash":"0cd66956e5d0d89f637935eb035a6f47bdd56204","modified":1466230449000},{"_id":"source/tags/index.md","hash":"b9911f522acb439658c2da88ca0f4e6daa9d257a","modified":1466513260000},{"_id":"themes/pacman/scripts/fancybox.js","hash":"4c130fc242cf9b59b5df6ca5eae3b14302311e8c","modified":1466187524000},{"_id":"themes/pacman/languages/default.yml","hash":"9ffaaf4dbe83f1f343ea702e59493dc6f3f46877","modified":1466187524000},{"_id":"themes/pacman/languages/zh-CN.yml","hash":"680d877a531f8df04b30b462a5131b5d3a8ca372","modified":1466187524000},{"_id":"themes/pacman/languages/zh-TW.yml","hash":"08a6eae3c1e48f96690ca4c29ce67f8d6ff9a8bd","modified":1466187524000},{"_id":"themes/pacman/_config.yml","hash":"458584e72993769c9eb1ec6a9da3d460f39088db","modified":1466513387000},{"_id":"themes/pacman/source/css/style.styl","hash":"fd9224ce13feac0a9b406c28d9bafbd4deda42f5","modified":1466264663000},{"_id":"themes/pacman/source/font/coveredbyyourgrace-webfont.eot","hash":"a17d0f10534303e40f210c506ebb8703fa23b7de","modified":1466187524000},{"_id":"themes/pacman/layout/archive.ejs","hash":"a18842e3d719fe3ca9b977a6995f8facc75c8673","modified":1466187524000},{"_id":"themes/pacman/LICENSE","hash":"4847e5a63399a0ef85af6844fd19a48c69a8869c","modified":1466187524000},{"_id":"themes/pacman/layout/index.ejs","hash":"335172db243f1410a858e3efadf5b5d773b571b1","modified":1466318839000},{"_id":"themes/pacman/layout/category.ejs","hash":"9b740fc33f6f028df60f0bc4312bf3ebd03aa8ea","modified":1466230271000},{"_id":"themes/pacman/layout/page.ejs","hash":"bd6bbf2ea8e183bd835867ff617dc6366b56748c","modified":1466187524000},{"_id":"themes/pacman/layout/post.ejs","hash":"3114134775bdde5a83cf14feb019606fa2b2b2be","modified":1466187524000},{"_id":"themes/pacman/layout/tag.ejs","hash":"45150a2365768b6b67880193c9264ad2bb4814db","modified":1466187524000},{"_id":"themes/pacman/source/font/coveredbyyourgrace-webfont.ttf","hash":"194ccb4acf77a03dc25bcc174edb266143704fec","modified":1466187524000},{"_id":"themes/pacman/source/font/FontAwesome.otf","hash":"b5b4f9be85f91f10799e87a083da1d050f842734","modified":1466187524000},{"_id":"themes/pacman/README.md","hash":"9f0be78dbd1f34f44a955cf02bbe03f979c7a1e6","modified":1466187524000},{"_id":"themes/pacman/source/font/fontawesome-webfont.eot","hash":"7619748fe34c64fb157a57f6d4ef3678f63a8f5e","modified":1466187524000},{"_id":"themes/pacman/source/css/_base/font.styl","hash":"772749cc7c6a47410bb667f8127b37767d029283","modified":1466187524000},{"_id":"themes/pacman/source/font/coveredbyyourgrace-webfont.svg","hash":"739808e56a56e10a03bc93d03eb55abd19590942","modified":1466187524000},{"_id":"themes/pacman/.git/FETCH_HEAD","hash":"a6dd8646425ddbf3948f54aa06e10e94f0b83d49","modified":1466188286000},{"_id":"themes/pacman/.git/HEAD","hash":"acbaef275e46a7f14c1ef456fff2c8bbe8c84724","modified":1466187524000},{"_id":"themes/pacman/.git/config","hash":"666d315476d2ef210b176a935de64a711fb43e93","modified":1466187524000},{"_id":"themes/pacman/.git/description","hash":"9635f1b7e12c045212819dd934d809ef07efa2f4","modified":1466187501000},{"_id":"themes/pacman/.git/packed-refs","hash":"e45d41cd8a82b23bb1e924b8f9212cfc77f36e07","modified":1466187524000},{"_id":"themes/pacman/source/css/_base/code.styl","hash":"577798b3c101be20b7ceb3d1e0421b4c4426d0ce","modified":1466187524000},{"_id":"themes/pacman/source/css/_partial/aside.styl","hash":"f0b0b125fd5cb96a1b82473704bad5e22cf8b958","modified":1466514811000},{"_id":"themes/pacman/.git/ORIG_HEAD","hash":"70324d8fb61c49f6ec262f392ff6cff3ac8f80ca","modified":1466188286000},{"_id":"themes/pacman/source/css/_base/variable.styl","hash":"0e2781381b966936c806545a3f248131bc67f5bf","modified":1466195942000},{"_id":"themes/pacman/source/font/fontawesome-webfont.ttf","hash":"7f09c97f333917034ad08fa7295e916c9f72fd3f","modified":1466187524000},{"_id":"themes/pacman/.git/index","hash":"c30567b2a7774da4e5d60687c99f650c009813c1","modified":1466187524000},{"_id":"themes/pacman/layout/_partial/baidu_tongji.ejs","hash":"a982a478cb21c2110afa5d4e1a1aac738d403a9e","modified":1466195273000},{"_id":"themes/pacman/layout/_partial/google_analytics.ejs","hash":"7ebccafcfdaca5cb5b8f4f06548f1d50958726ef","modified":1466187524000},{"_id":"themes/pacman/layout/_partial/pagination.ejs","hash":"6cf37f844f150af4bbe212610da61e5140317de9","modified":1466187524000},{"_id":"themes/pacman/source/fancybox/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1466187524000},{"_id":"source/about/index.md","hash":"070782d7eec030516dc0f1e3879ba787f89c57dc","modified":1466221686000},{"_id":"themes/pacman/layout/_partial/header.ejs","hash":"d49468a4c87dd4f6e20719ec1a3e6d945aaa7033","modified":1466197356000},{"_id":"themes/pacman/.git/info/exclude","hash":"c879df015d97615050afa7b9641e3352a1e701ac","modified":1466187501000},{"_id":"themes/pacman/.git/logs/HEAD","hash":"8d15f7eb3e2b1de7d0c19bb368d4805882c56b64","modified":1466187524000},{"_id":"themes/pacman/source/fancybox/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1466187524000},{"_id":"themes/pacman/.git/hooks/post-update.sample","hash":"b614c2f63da7dca9f1db2e7ade61ef30448fc96c","modified":1466187501000},{"_id":"themes/pacman/.git/hooks/applypatch-msg.sample","hash":"4de88eb95a5e93fd27e78b5fb3b5231a8d8917dd","modified":1466187501000},{"_id":"themes/pacman/.git/hooks/pre-applypatch.sample","hash":"f208287c1a92525de9f5462e905a9d31de1e2d75","modified":1466187501000},{"_id":"themes/pacman/.git/refs/heads/master","hash":"70324d8fb61c49f6ec262f392ff6cff3ac8f80ca","modified":1466187524000},{"_id":"themes/pacman/layout/_partial/sidebar.ejs","hash":"565979955cecaab9105b23f668aa63bf97e9c20e","modified":1466187524000},{"_id":"themes/pacman/layout/_partial/tags.ejs","hash":"c5c858742b29e6364da2e1d098e7d6cd8cef038f","modified":1466187524000},{"_id":"themes/pacman/source/css/_partial/gallery.styl","hash":"b85a32c4bc71f720d74143a17a202fe8fa067950","modified":1466187524000},{"_id":"themes/pacman/.git/refs/remotes/origin/HEAD","hash":"d9427cda09aba1cdde5c69c2b13c905bddb0bc51","modified":1466187524000},{"_id":"themes/pacman/.git/logs/refs/heads/master","hash":"8d15f7eb3e2b1de7d0c19bb368d4805882c56b64","modified":1466187524000},{"_id":"themes/pacman/layout/_partial/archive.ejs","hash":"ac0ce2ca7f4f361b2ae886ec8c6fb77f41527097","modified":1466515191000},{"_id":"themes/pacman/.git/logs/refs/remotes/origin/HEAD","hash":"8d15f7eb3e2b1de7d0c19bb368d4805882c56b64","modified":1466187524000},{"_id":"themes/pacman/.git/hooks/commit-msg.sample","hash":"ee1ed5aad98a435f2020b6de35c173b75d9affac","modified":1466187501000},{"_id":"themes/pacman/.git/hooks/pre-commit.sample","hash":"36aed8976dcc08b5076844f0ec645b18bc37758f","modified":1466187501000},{"_id":"themes/pacman/.git/hooks/pre-push.sample","hash":"5c8518bfd1d1d3d2c1a7194994c0a16d8a313a41","modified":1466187501000},{"_id":"themes/pacman/.git/hooks/prepare-commit-msg.sample","hash":"2b6275eda365cad50d167fe3a387c9bc9fedd54f","modified":1466187501000},{"_id":"themes/pacman/.git/hooks/update.sample","hash":"39355a075977d05708ef74e1b66d09a36e486df1","modified":1466187501000},{"_id":"themes/pacman/.git/objects/pack/pack-80f322aac6ea3c399a9de53417442933b148d37d.idx","hash":"13435a991a751ed05e65fdf11368cd604d206705","modified":1466187523000},{"_id":"themes/pacman/source/fancybox/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1466187524000},{"_id":"themes/pacman/source/fancybox/jquery.fancybox.css","hash":"2e54d51d21e68ebc4bb870f6e57d3bfb660d4f9c","modified":1466187524000},{"_id":"themes/pacman/layout/_partial/article.ejs","hash":"8e446ec97c30774807657fc9fb7bceb6905699aa","modified":1466187524000},{"_id":"themes/pacman/layout/_partial/head.ejs","hash":"4cbf45c319b1a92725f538b9f48d0e21c767517e","modified":1466195307000},{"_id":"themes/pacman/source/fancybox/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1466187524000},{"_id":"themes/pacman/source/fancybox/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1466187524000},{"_id":"themes/pacman/source/css/_partial/duoshuo.styl","hash":"3ec423b734639614fbd11ec2c3445d3a03f5231d","modified":1466187524000},{"_id":"themes/pacman/source/css/_partial/footer.styl","hash":"feab5937c488345cdb5919bec7272cf036e209d3","modified":1466197005000},{"_id":"themes/pacman/source/fancybox/helpers/jquery.fancybox-thumbs.js","hash":"83cdfea43632b613771691a11f56f99d85fb6dbd","modified":1466187524000},{"_id":"themes/pacman/source/fancybox/helpers/jquery.fancybox-buttons.css","hash":"6394c48092085788a8c0ef72670b0652006231a1","modified":1466187524000},{"_id":"themes/pacman/source/fancybox/helpers/jquery.fancybox-buttons.js","hash":"4c9c395d705d22af7da06870d18f434e2a2eeaf9","modified":1466187524000},{"_id":"themes/pacman/source/fancybox/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1466187524000},{"_id":"themes/pacman/source/css/_partial/header.styl","hash":"ccefcb427c687f92b7fcd3b5c430a1bb306e2168","modified":1466197481000},{"_id":"themes/pacman/source/img/sun.png","hash":"de4408b898c023ec01bbd0801f253fcbf29afc5a","modified":1466234828000},{"_id":"themes/pacman/source/css/_partial/index.styl","hash":"a00aafe86d0238bf58f093834b6ae7406e918ec0","modified":1466228966000},{"_id":"themes/pacman/layout/_partial/search.ejs","hash":"5f1c22e78158cdb77f2af28517b6cbe96150fdd5","modified":1466187524000},{"_id":"themes/pacman/layout/layout.ejs","hash":"47ec9adc95f5734fd1f7ed170fc5103fc4ae74b2","modified":1466258418000},{"_id":"themes/pacman/layout/_widget/archive.ejs","hash":"b82d7fb0d1119738a9f9bb747d415e8c99e454ae","modified":1466187524000},{"_id":"themes/pacman/source/img/favicon.ico","hash":"8be13e6581cdd811db96c2c30f04d37fc2663647","modified":1466236351000},{"_id":"themes/pacman/layout/_widget/about.ejs","hash":"18318a3639d872966f3d6442102f353895606e26","modified":1466325396000},{"_id":"themes/pacman/layout/_widget/article.ejs","hash":"ec401c47f2b9962e5147d4db0be79e7e52ba3ec0","modified":1469325505000},{"_id":"themes/pacman/layout/_widget/tagcloud.ejs","hash":"317d420f5448c7452290e37f0ed8516cb73f4068","modified":1466187524000},{"_id":"themes/pacman/layout/_widget/tag.ejs","hash":"ec62e051dc8bb8b4ab3add0f597e9826e02df998","modified":1466513374000},{"_id":"themes/pacman/layout/_widget/rss.ejs","hash":"ebfb11bdd603cd6e4dcf3949cc52e38009615c25","modified":1466187524000},{"_id":"themes/pacman/layout/_widget/links.ejs","hash":"0d5ef5c05694fb61020fedffbdebe02cb6361c8d","modified":1466187524000},{"_id":"themes/pacman/layout/_widget/category.ejs","hash":"690b340f317e348f1e89ef291c4f2461ba953437","modified":1466322702000},{"_id":"themes/pacman/source/img/author.jpg","hash":"caa1bf1ac1aec5052d6cce57955daef13ed1aa49","modified":1466237336000},{"_id":"themes/pacman/layout/_partial/post/gallery.ejs","hash":"6bd8723f24b192158e6e840bf14028503ad50045","modified":1466187524000},{"_id":"themes/pacman/layout/_partial/post/catetags.ejs","hash":"fa03892b35dc344de7a722b9393978286c0376fe","modified":1466187524000},{"_id":"themes/pacman/layout/_partial/footer.ejs","hash":"abca156f1474f13978487ad11d73dbbb67327e81","modified":1466196790000},{"_id":"themes/pacman/source/fancybox/jquery.fancybox.js","hash":"58193c802f307ec9bc9e586c0e8a13ebef45d2f8","modified":1466187524000},{"_id":"themes/pacman/layout/_partial/post/comment.ejs","hash":"f0e21c685c0e3fe78c9b5f5f6d4eb9c1b5cf036f","modified":1466193899000},{"_id":"themes/pacman/layout/_partial/post/jiathis.ejs","hash":"5043a5058887cf6ad15182cfde345d36cb6ab323","modified":1466187524000},{"_id":"themes/pacman/source/font/fontawesome-webfont.svg","hash":"a275426daefd3716c53561fad121d258a7f05b47","modified":1466187524000},{"_id":"themes/pacman/layout/_partial/after_footer.ejs","hash":"db09ae62aa29b4c6495c698f9bb14d718a637423","modified":1466187524000},{"_id":"themes/pacman/.git/hooks/pre-rebase.sample","hash":"5885a56ab4fca8075a05a562d005e922cde9853b","modified":1466187501000},{"_id":"themes/pacman/source/img/logo.svg","hash":"cef3f0bb4bf3661dd3a58c81b9a7be79601a0bfb","modified":1466187524000},{"_id":"themes/pacman/layout/_partial/categories.ejs","hash":"69ac84c3c44231cb5570e1f0e089a857ae7cf60d","modified":1466514908000},{"_id":"themes/pacman/source/fancybox/helpers/jquery.fancybox-thumbs.css","hash":"b88b589f5f1aa1b3d87cc7eef34c281ff749b1ae","modified":1466187524000},{"_id":"themes/pacman/source/js/jquery-2.1.0.min.js","hash":"0faaa0c56f563693cdeafa299f97e3d5bd6fcdd8","modified":1466187524000},{"_id":"themes/pacman/layout/_partial/post/header.ejs","hash":"953e6feaf7b156fab79165342e9bca0ef54384ba","modified":1466187524000},{"_id":"themes/pacman/source/fancybox/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1466187524000},{"_id":"themes/pacman/source/fancybox/helpers/jquery.fancybox-media.js","hash":"e14c32cc6823b81b2f758512f13ed8eb9ef2b454","modified":1466187524000},{"_id":"themes/pacman/layout/_partial/post/article.ejs","hash":"0eb8eb6bca7303c400411f9a28d5aee0b7145e81","modified":1466319010000},{"_id":"themes/pacman/source/css/_partial/article.styl","hash":"a2f9b88cc70f602b1159cb13dceb30da92e54c07","modified":1466845686000},{"_id":"themes/pacman/layout/_partial/post/footer.ejs","hash":"a4dc14cd47d22f1b73860bc3c7f424eae3d282dd","modified":1466187524000},{"_id":"themes/pacman/source/css/_base/public.styl","hash":"769199fe3c23ac349a4e99cd66bad696d6f5e4e2","modified":1466846126000},{"_id":"themes/pacman/source/css/_partial/helper.styl","hash":"016bb83fd19e1ea0e8279e77f87829837e172a62","modified":1466777393000},{"_id":"source/_posts/about-display.md","hash":"c571cbdc0612ac3edbf5f18b1acb6d8ec792802f","modified":1469798923000},{"_id":"source/_posts/angular-note-6-asyncchronous-submit-form.md","hash":"0f033cf1cca7b445f8e5ea1d09d0a7af8a48ac47","modified":1469798617000},{"_id":"source/_posts/angular-note-2-create-login.md","hash":"33c30cb8be1ca9ccfa1c0ae22ffb0807013b649b","modified":1469798787000},{"_id":"source/_posts/about-position.md","hash":"001ad8064db45c7859979973a2adb487d3f51a82","modified":1469798848000},{"_id":"themes/pacman/layout/_partial/post/pagination.ejs","hash":"7b2c70d381d6d6f8a55d89180a9bc0f27118812e","modified":1466187524000},{"_id":"source/_posts/first-blog.md","hash":"98c1c8f0c44a8a42f6871c5a51234f53442350e5","modified":1466776636000},{"_id":"source/_posts/responsive-waterfall.md","hash":"653d81a5f6f8f5dbce0e9bbfcffab019cd9ee7f7","modified":1466777547000},{"_id":"source/_posts/front-end-getting-started.md","hash":"89f2405f82227fd1f04b2b87647b7d4060bfed27","modified":1466776465000},{"_id":"source/_posts/angular-note-9-session-commit.md","hash":"bb87c8a361cd58309dbfb79e509d55cc610213b8","modified":1469798485000},{"_id":"source/_posts/react-notes-1-build-react-project.md","hash":"a8235da8053d74e1240ac75f92d6bb8390f5faa9","modified":1470447234000},{"_id":"source/_posts/drag-and-drop.md","hash":"dc1b881574e7731f6d466d02472c3299e1344b5c","modified":1466777234000},{"_id":"source/_posts/angular-note-8-create-filter.md","hash":"9f9d4027ebf0d79542c65f3587f005e11f572d7c","modified":1469798583000},{"_id":"source/_posts/angular-note-3-common-info-manage.md","hash":"2eb8212605caf21581d49805fd3ce1526b5fc6c4","modified":1469798746000},{"_id":"source/_posts/angular-note-4-make-header-directive.md","hash":"95a0c9f085b707a5e76fed4b32735397c43cf4e1","modified":1469798679000},{"_id":"source/_posts/js-this.md","hash":"dff6ab39fa6d68a70bdb5fe5a4ec84a70d53d510","modified":1469798994000},{"_id":"source/_posts/angular-note-11-karma-jasmine-test-create.md","hash":"c3ab52fe6bad9a6cc8e88b149432ac45cc9eb819","modified":1469847800000},{"_id":"source/_posts/angular-note-7-load-image.md","hash":"fe04643b58c5861758a1708af722e8becc042d92","modified":1469798536000},{"_id":"source/_posts/angular-note-5-fullfill-index.md","hash":"dcf20dda088a8687bd32800893f28f32527304f5","modified":1469798703000},{"_id":"source/_posts/position-object.md","hash":"0fd96ec9c9f9ec9b7449c14d9100fc301d46c867","modified":1466776993000},{"_id":"source/_posts/picture-cut.md","hash":"d03a214eaf8b2cdc6ca5bb07581b4425799f2c99","modified":1466777654000},{"_id":"source/_posts/picture-align.md","hash":"1da367de3ec25f2e5498eefff23ba036273fa287","modified":1466777733000},{"_id":"source/_posts/angular-note-13-unit-test-directive.md","hash":"864a1a216bdd48f4dfb0409c30160aa3a4688b13","modified":1470407875000},{"_id":"themes/pacman/source/font/fontawesome-webfont.woff","hash":"04c3bf56d87a0828935bd6b4aee859995f321693","modified":1466187524000},{"_id":"themes/pacman/source/fancybox/jquery.fancybox.pack.js","hash":"2da892a02778236b64076e5e8802ef0566e1d9e8","modified":1466187524000},{"_id":"themes/pacman/source/font/coveredbyyourgrace-webfont.woff","hash":"c6f8dc1a2f6ce914f120e80a876b8fd77b98888e","modified":1466187524000},{"_id":"source/_posts/angular-note-1-create-angular-project.md","hash":"4b55657c54d87cd1d01ae6f3b01079259ca974b7","modified":1467379280000},{"_id":"source/_posts/angular-note-10-route-and-controller-conmunitaion.md","hash":"b604223da0c7d62fe3563988812e89e0c2a3d94b","modified":1469797858000},{"_id":"source/_posts/angular-note-12-karma-config.md","hash":"d5b770701467a56d0a8ac4bdc64d9ae15f209aae","modified":1469932470000},{"_id":"source/_posts/js-closure.md","hash":"3a243461e0b1ecea37fea986c819eb7a3c3f7466","modified":1469799031000},{"_id":"themes/pacman/.git/objects/pack/pack-80f322aac6ea3c399a9de53417442933b148d37d.pack","hash":"03a7d5dde8bd7fdc382bb4518ef76437679004a4","modified":1466187523000},{"_id":"source/_posts/react-notes-2-create-login.md","hash":"0934992d397819a8d671a7ba47f70a2523edb282","modified":1471016356000},{"_id":"public/2016/08/12/react-notes-2-create-login/index.html","hash":"cc81c66f1c0891cb9bb45ef7cb0df277b10f51fe","modified":1471016501096},{"_id":"public/categories/index.html","hash":"10fc8dd6349adb6dfca88f1ebed7bfe9d67a0eae","modified":1471016501106},{"_id":"public/2016/06/26/about-display/index.html","hash":"58c0b09dbd23ada3b911b8310409cb64a54c0f6c","modified":1471016501141},{"_id":"public/2016/06/25/about-position/index.html","hash":"7ff516219b7eac2c7189c3cf4b052fe5bfb6f39d","modified":1471016501175},{"_id":"public/2016/06/24/front-end-getting-started/index.html","hash":"b8fef6e45041b1aa69786a180f391eae473b1e0d","modified":1471016501228},{"_id":"public/2016/06/22/picture-cut/index.html","hash":"ca52a01f3046186eb7c2981c8cea6df660590e4e","modified":1471016501266},{"_id":"public/2016/06/21/picture-align/index.html","hash":"51b4dd71805e93990fb89b5eb5f5d44a06cd4afa","modified":1471016501311},{"_id":"public/2016/06/20/responsive-waterfall/index.html","hash":"3cb1e76a91ff34c5f15447f7c9467fefd9911ee4","modified":1471016501349},{"_id":"public/2016/06/19/drag-and-drop/index.html","hash":"6ab011c640ec15830c0cc371d3b8ef1e35fcdf69","modified":1471016501402},{"_id":"public/2016/06/19/position-object/index.html","hash":"74cece1068e837e601698ae2c34f6f16f50164ec","modified":1471016501437},{"_id":"public/2016/06/18/first-blog/index.html","hash":"7310476c523337ba23fbc1b48ec1bc12e633bc65","modified":1471016501470},{"_id":"public/categories/CSS炒饭/index.html","hash":"2cd16a513bcacd4837f110e51326e03faaef73a8","modified":1471016501475},{"_id":"public/categories/angular混搭/index.html","hash":"a942f2299cf043dc9964ecf3b016988c8160d5ee","modified":1471016501486},{"_id":"public/categories/angular混搭/page/2/index.html","hash":"44a569224818983c75f2ba20fbe283d99a31a0d9","modified":1471016501493},{"_id":"public/categories/web乱炖/index.html","hash":"dfe93429650801f36d52b784d14f04ced0e4a00c","modified":1471016501497},{"_id":"public/categories/jQuery杂烩/index.html","hash":"c4c91154f3fa1c6a2a9a61232732f33f71ee7b1a","modified":1471016501503},{"_id":"public/index.html","hash":"3e60bbc2777b10ebbb06ec5385828a10ef1fc5e4","modified":1471016501521},{"_id":"public/page/3/index.html","hash":"917803dc027767911aa99dcbc36fa4720e53f997","modified":1471016501539},{"_id":"public/tags/index.html","hash":"f8aedf39a0599b7f52f5d82532855578ac5acefa","modified":1471016501548},{"_id":"public/tags/原创部件/index.html","hash":"d1e2f4abd792a8a21501faeae4c70a0c15884367","modified":1471016501552},{"_id":"public/tags/笔记/page/2/index.html","hash":"035db4b012acf6b4a0d2dd6315d48f223f20cc97","modified":1471016501559},{"_id":"public/tags/笔记/index.html","hash":"fbfc6615a3f05e7c3debe1893ad79a5a864de40a","modified":1471016501570},{"_id":"public/tags/教程/index.html","hash":"d7d3d838f47f72009703b11c0605305061780e31","modified":1471016501583},{"_id":"public/tags/自制插件/index.html","hash":"571cb98112db02c9d59ce0d5b738ae86ef446264","modified":1471016501589},{"_id":"public/tags/分享/index.html","hash":"98deb694d20d3829405acf4b468a9e86c5b53063","modified":1471016501596},{"_id":"public/about/index.html","hash":"79f9b29dec3bbb0b8fe0a94a290f0ea918297e4b","modified":1471016501603},{"_id":"public/archives/2016/08/index.html","hash":"e53f1f8fd61944d7839e30de7afafbfc4feab8a2","modified":1471016501614},{"_id":"public/archives/index.html","hash":"7dd3d75c6651616d46a1b7f696063e2bf73c64e7","modified":1471016501625},{"_id":"public/archives/2016/page/3/index.html","hash":"af58070df377d82bcd05a83dc6287147b1b894c9","modified":1471016501636},{"_id":"public/2016/08/05/angular-note-13-unit-test-directive/index.html","hash":"f9ba5006595b8c6572e217961d597b3d5eff15a8","modified":1471016501671},{"_id":"public/archives/2016/07/index.html","hash":"f0b0261c25e350696b7e96a36ea0e1d9ff340045","modified":1471016501697},{"_id":"public/archives/2016/index.html","hash":"290d5e0fa25b2291b884138d36e22fd1371365a3","modified":1471016501707},{"_id":"public/2016/08/06/react-notes-1-build-react-project/index.html","hash":"0d375e1aa4617a4baa49e9f9285402f095602198","modified":1471016501735},{"_id":"public/archives/2016/page/2/index.html","hash":"d665d6b6ce940be1499142a8d1d4aa99b941627d","modified":1471016501745},{"_id":"public/archives/2016/06/index.html","hash":"a4dcc2ec729e8df401946f9e0222c6e9c3fd3151","modified":1471016501753},{"_id":"public/archives/page/3/index.html","hash":"0d73f4244fd815032caa2c043665f13ddb76c325","modified":1471016501760},{"_id":"public/archives/2016/07/page/2/index.html","hash":"20f2ceb09af2cf5c3899f0703bd577f89e219444","modified":1471016501767},{"_id":"public/categories/react沙拉/index.html","hash":"5079f7fc4da52ebfa2a3679bc91d2be483420ace","modified":1471016501770},{"_id":"public/archives/page/2/index.html","hash":"c9acb6b7d20da4891948daa746408a79aef7d7b5","modified":1471016501779},{"_id":"public/tags/逻辑实现/index.html","hash":"445e5d005783cdc933b98af95795be01661d56a2","modified":1471016501783},{"_id":"public/page/2/index.html","hash":"179e791459255a7e9cef3f59048b06203b8b9932","modified":1471016501800},{"_id":"public/categories/js什锦/index.html","hash":"672010b05f3312d8bd5bc40f5805d2873deab90c","modified":1471016501805},{"_id":"public/2016/07/31/angular-note-12-karma-config/index.html","hash":"ebf02e8d48b7420a3a9db7acc8fd3c009323753b","modified":1471016501828},{"_id":"public/2016/07/30/angular-note-11-karma-jasmine-test-create/index.html","hash":"9c240980192962dccc08c88cda24fc67513f4a97","modified":1471016501848},{"_id":"public/2016/07/22/angular-note-7-load-image/index.html","hash":"b3563e27c10a5ece2d6a7968cfb732b4eef24c36","modified":1471016501881},{"_id":"public/2016/07/24/angular-note-9-session-commit/index.html","hash":"5aac59bd15cbbfbc49ed3b475e2a7646169a95a7","modified":1471016501898},{"_id":"public/2016/07/29/angular-note-10-route-and-controller-conmunitaion/index.html","hash":"84e9536002e2e25db3f690eeda8acae653b2ef8e","modified":1471016501917},{"_id":"public/2016/07/08/angular-note-2-create-login/index.html","hash":"348e58b4739a12d5f39a41bbb718519224951286","modified":1471016501943},{"_id":"public/2016/07/01/angular-note-1-create-angular-project/index.html","hash":"f2caa400373962d582f9d3addd70e7ec6033541b","modified":1471016501972},{"_id":"public/2016/07/10/angular-note-4-make-header-directive/index.html","hash":"f028e9a51298712ffc4095783bf0fa9acb57fbbd","modified":1471016501996},{"_id":"public/2016/07/16/angular-note-5-fullfill-index/index.html","hash":"f7017c4c8cb045127e43719735baca9c3eb1b8fc","modified":1471016502016},{"_id":"public/2016/07/02/js-this/index.html","hash":"f17bd7f90d22f945a68d4218b326d9de4c3f1d9e","modified":1471016502045},{"_id":"public/2016/07/23/angular-note-8-create-filter/index.html","hash":"bbbad1462957b7f93dff4d6cf71783d8e22062d6","modified":1471016502076},{"_id":"public/2016/07/17/angular-note-6-asyncchronous-submit-form/index.html","hash":"51f469fccad6920b277bc1a81ea1e04386158ee5","modified":1471016502104},{"_id":"public/2016/07/09/angular-note-3-common-info-manage/index.html","hash":"80f3cecb69b643f28f5858eaf0e40480cfc1433f","modified":1471016502123},{"_id":"public/2016/07/03/js-closure/index.html","hash":"975945fbc823384ef5b1ee6cacb9ed563dde4b34","modified":1471016502153}],"Category":[{"name":"CSS炒饭","_id":"cirrwvo28000538l5x8elmc4a"},{"name":"angular混搭","_id":"cirrwvo2g000a38l5tyo4u0zp"},{"name":"web乱炖","_id":"cirrwvo2w000l38l5vcok5s2q"},{"name":"jQuery杂烩","_id":"cirrwvo31000q38l57ts65qmu"},{"name":"react沙拉","_id":"cirrwvo3k001138l5prdzu51o"},{"name":"js什锦","_id":"cirrwvo3o001538l5t1d2qn46"}],"Data":[],"Page":[{"title":"categories","date":"2016-06-18T06:13:19.000Z","layout":"categories","_content":"","source":"categories/index.md","raw":"---\ntitle: categories\ndate: 2016-06-18 14:13:19\nlayout: categories\n---\n","updated":"2016-06-18T06:14:09.000Z","path":"categories/index.html","comments":1,"_id":"cirrwvnrc000038l5cdtgo99a","content":"","excerpt":"","more":""},{"title":"tags","date":"2016-06-21T12:42:19.000Z","layout":"tags","_content":"","source":"tags/index.md","raw":"---\ntitle: tags\ndate: 2016-06-21 20:42:19\nlayout: tags\n---\n","updated":"2016-06-21T12:47:40.000Z","path":"tags/index.html","comments":1,"_id":"cirrwvnre000138l5zrhhpghw","content":"","excerpt":"","more":""},{"title":"关于我","date":"2016-06-18T03:11:52.000Z","_content":"### 热爱前端，热爱生活\n\n也思考过为什么自己这么热爱前端，而不是其他任何语言。\n<!---->\n但不管原因是什么，本骚年爱这样无拘无束的语言，爱这种容许无限大脑洞的平台。\n<!---->\n骚年热爱钻研原理，像jQuery源码解析、AngularJs的实现原理、解剖React虚拟DOM等等。但毕竟还不是老司机，只能膜拜大神们的大作，然后写点学习笔记，又或是项目遇到的问题记下来呗。\n<!---->\n热爱生活呀，即使现在少了发现幸福片段、记录喜悦心情的时候，但依然爱这个世界，死心塌地哈哈。\n\n### 欢迎大牛指导，以及小伙伴们切磋\n\n一直抱着期盼在某年某月某日会遇到一些前端的大牛们，看看他们是如何架构、使用些什么工具、写代码的时候都在考虑些什么。\n<!---->\n也一直期待着有一堆志气相投的小伙伴们，一起分享各自的想法，一起切磋，一起解决问题。\n<!---->\n> 邮箱：wangbeishan@163.com\n> QQ: 1780096742\n> Github: [https://github.com/godbasin](https://github.com/godbasin)\n\n### 许个愿吧\n\n互联网的世界，是允许弱小的人许下大愿望的呀。\n:)","source":"about/index.md","raw":"---\ntitle: 关于我\ndate: 2016-06-18 11:11:52\n---\n### 热爱前端，热爱生活\n\n也思考过为什么自己这么热爱前端，而不是其他任何语言。\n<!---->\n但不管原因是什么，本骚年爱这样无拘无束的语言，爱这种容许无限大脑洞的平台。\n<!---->\n骚年热爱钻研原理，像jQuery源码解析、AngularJs的实现原理、解剖React虚拟DOM等等。但毕竟还不是老司机，只能膜拜大神们的大作，然后写点学习笔记，又或是项目遇到的问题记下来呗。\n<!---->\n热爱生活呀，即使现在少了发现幸福片段、记录喜悦心情的时候，但依然爱这个世界，死心塌地哈哈。\n\n### 欢迎大牛指导，以及小伙伴们切磋\n\n一直抱着期盼在某年某月某日会遇到一些前端的大牛们，看看他们是如何架构、使用些什么工具、写代码的时候都在考虑些什么。\n<!---->\n也一直期待着有一堆志气相投的小伙伴们，一起分享各自的想法，一起切磋，一起解决问题。\n<!---->\n> 邮箱：wangbeishan@163.com\n> QQ: 1780096742\n> Github: [https://github.com/godbasin](https://github.com/godbasin)\n\n### 许个愿吧\n\n互联网的世界，是允许弱小的人许下大愿望的呀。\n:)","updated":"2016-06-18T03:48:06.000Z","path":"about/index.html","comments":1,"layout":"page","_id":"cirrwvnu9000238l5w4r0rdlx","content":"<h3 id=\"热爱前端，热爱生活\"><a href=\"#热爱前端，热爱生活\" class=\"headerlink\" title=\"热爱前端，热爱生活\"></a>热爱前端，热爱生活</h3><p>也思考过为什么自己这么热爱前端，而不是其他任何语言。<br><!----><br>但不管原因是什么，本骚年爱这样无拘无束的语言，爱这种容许无限大脑洞的平台。<br><!----><br>骚年热爱钻研原理，像jQuery源码解析、AngularJs的实现原理、解剖React虚拟DOM等等。但毕竟还不是老司机，只能膜拜大神们的大作，然后写点学习笔记，又或是项目遇到的问题记下来呗。<br><!----><br>热爱生活呀，即使现在少了发现幸福片段、记录喜悦心情的时候，但依然爱这个世界，死心塌地哈哈。</p>\n<h3 id=\"欢迎大牛指导，以及小伙伴们切磋\"><a href=\"#欢迎大牛指导，以及小伙伴们切磋\" class=\"headerlink\" title=\"欢迎大牛指导，以及小伙伴们切磋\"></a>欢迎大牛指导，以及小伙伴们切磋</h3><p>一直抱着期盼在某年某月某日会遇到一些前端的大牛们，看看他们是如何架构、使用些什么工具、写代码的时候都在考虑些什么。<br><!----><br>也一直期待着有一堆志气相投的小伙伴们，一起分享各自的想法，一起切磋，一起解决问题。<br><!----></p>\n<blockquote>\n<p>邮箱：wangbeishan@163.com<br>QQ: 1780096742<br>Github: <a href=\"https://github.com/godbasin\" target=\"_blank\" rel=\"external\">https://github.com/godbasin</a></p>\n</blockquote>\n<h3 id=\"许个愿吧\"><a href=\"#许个愿吧\" class=\"headerlink\" title=\"许个愿吧\"></a>许个愿吧</h3><p>互联网的世界，是允许弱小的人许下大愿望的呀。<br>:)</p>\n","excerpt":"","more":"<h3 id=\"热爱前端，热爱生活\"><a href=\"#热爱前端，热爱生活\" class=\"headerlink\" title=\"热爱前端，热爱生活\"></a>热爱前端，热爱生活</h3><p>也思考过为什么自己这么热爱前端，而不是其他任何语言。<br><!----><br>但不管原因是什么，本骚年爱这样无拘无束的语言，爱这种容许无限大脑洞的平台。<br><!----><br>骚年热爱钻研原理，像jQuery源码解析、AngularJs的实现原理、解剖React虚拟DOM等等。但毕竟还不是老司机，只能膜拜大神们的大作，然后写点学习笔记，又或是项目遇到的问题记下来呗。<br><!----><br>热爱生活呀，即使现在少了发现幸福片段、记录喜悦心情的时候，但依然爱这个世界，死心塌地哈哈。</p>\n<h3 id=\"欢迎大牛指导，以及小伙伴们切磋\"><a href=\"#欢迎大牛指导，以及小伙伴们切磋\" class=\"headerlink\" title=\"欢迎大牛指导，以及小伙伴们切磋\"></a>欢迎大牛指导，以及小伙伴们切磋</h3><p>一直抱着期盼在某年某月某日会遇到一些前端的大牛们，看看他们是如何架构、使用些什么工具、写代码的时候都在考虑些什么。<br><!----><br>也一直期待着有一堆志气相投的小伙伴们，一起分享各自的想法，一起切磋，一起解决问题。<br><!----></p>\n<blockquote>\n<p>邮箱：wangbeishan@163.com<br>QQ: 1780096742<br>Github: <a href=\"https://github.com/godbasin\">https://github.com/godbasin</a></p>\n</blockquote>\n<h3 id=\"许个愿吧\"><a href=\"#许个愿吧\" class=\"headerlink\" title=\"许个愿吧\"></a>许个愿吧</h3><p>互联网的世界，是允许弱小的人许下大愿望的呀。<br>:)</p>\n"}],"Post":[{"title":"CSS的display有关","date":"2016-06-26T12:03:10.000Z","_content":"上一篇主要讲[CSS的position和z-index](https://godbasin.github.io/2016/06/25/about-position/)，刚好想到了display。\n本文主要讲述块状元素和内联元素的说明，并补充float浮动相关。\n<!--more-->\n## CSS display属性\n-----\n### w3c的display\n这里借用[w3c](http://www.w3school.com.cn/cssref/pr_class_display.asp)上的说明\n- display属性规定元素应该生成的框的类型\n- 这个属性用于定义建立布局时元素生成的显示框类型\n\n### 内联元素和块状元素\n- 内联元素\n  - 内联元素又称行内元素等，表示位于行内的元素\n  - 内联元素只能容纳文本或者其他内联元素，它允许其他内联元素与其位于同一行\n  - 内联元素的宽度高度不起作用\n- 块状元素\n  - 块状元素一般是其他元素的容器，可容纳内联元素和其他块状元素\n  - 块状元素排斥其他元素与其位于同一行\n  - 块状元素的宽度高度起作用\n\n## 常用的display属性\n-----\n### block：块状元素\n- 常见的默认display: block元素\n  - div/p/h1/h2...h6/ul/ol\n  - html5新元素: section/article/header/footer等\n\n- 可容纳其他块状元素或内联元素\n此时我们可以在block元素里添加其他块状元素和内联元素。\n常见的就是在div内添加div/p，在p内添加a/span等。\n``` html\n<div><p><a></a></p></div>\n```\n\n- 排斥其他元素与其位于同一行\n一个block元素占位一行，不管其宽度和高度多少，都不允许其他元素（包括内联元素和块状元素）与其位于同一行。\n此时若要使多个block位于同一行，可以选择使用float浮动。后续会讲到。\n\n- 宽度高度起作用\nblock元素可以设置宽度width和高度height，有效。\n\n### inline：内联元素\n- 常见的默认display: inline元素\n  - a/span/i/strong/sub等\n\n- 位于行内，即位于块状元素或者其他内联元素内\n此时我们可以将inline元素放置于块状元素或者其他内联元素内。\n常见的就是在p内添加a/span等。\n``` html\n<p><a></a><span></span></p>\n```\n\n- 只能容纳文本或者其他内联元素\n请注意，inline元素里面无法放置block元素，这也是为什么我们将div/p放在a内，在浏览器中却依然显示在外面的原因。\n此时若要在元素内放置块状元素，可以选择设置display为block。\n\n- 允许其他内联元素与其位于同一行\n\n- inline元素的宽度高度不起作用\n即使给inline元素设置了宽高，也是无效的，这也是个常见的失误。\n此时若要给元素设置宽高，可以选择设置display为block或者inline-block。\n\n### inline-block元素\n- 与inline元素相似的地方\n  - 位于行内，即位于块状元素或者其他内联元素内\n  - 允许其他内联元素与其位于同一行\n- 与block元素相似的地方\n  - 可容纳其他块状元素或内联元素\n  - 宽度高度起作用\n- 使用inline-block\n其实，使用inline-block可以很方便解决一些问题：\n  - 使元素居中\n    - 考虑下面情况，在块状元素parent内添加了另外一个块状元素child\n    - 可以将child设置display: inline-block，同时配合parent设置text-align: center，就可以设置child在parent内横向居中\n    - 此时将parent的height和line-height设置相等，就可以轻松实现child在parent内纵向居中啦\n    - 当然child元素设置margin: auto也是可以实现横向居中的\n  - inline元素a/span设置宽高\n    - 考虑下面情况，我们需要给多个a元素设置为宽高一致\n    - 由于a元素内文字长度可能不一样，若使用padding也达不到想要的效果\n    - 此时将a元素设置display: inline-block，然后就可以添加有效的width和height进行设置啦\n  - 将多个块状元素放在一行\n    - 考虑下面情况，我们需要将多个block块状元素放在一行\n    - 由于block元素占位一行，即使设置宽度很小，后面的元素也会出现在下一行\n    - 此时将块状元素设置display: inline-block，解决问题\n\n### 其他display属性\n- table/table-cell等\n以前table也常被用来解决元素纵向居中的问题。\n但table样式还会导致很多的问题，这里就不再一一赘述。\n- inherite\n规定应该从父元素继承 display 属性的值。\n\n## float浮动\n-----\n说到block元素，当然不能少了float浮动啦\n- float属性\n  - float属性定义元素在哪个方向浮动\n  - float属性可应用于图像，使文本围绕在图像周围\n\n这里我们又得拿起文档流来讲讲了。\n给元素的float属性赋值后，就是脱离文档流，进行左右浮动，紧贴着父元素的边框或者是上一个同级同浮动元素的边框。\n\n- float与block\n  - 设置float浮动的元素自动获取display: block样式\n  - 当一个元素浮动之后，不会影响到块级框的布局\n如图：\nHTML\n``` html\n<div>1</div>\n<div class=\"float\">2</div>\n<div class=\"float\">3</div>\n<div>4</div>\n<div>5</div>\n<div class=\"float\">6</div>\n```\nCSS\n``` css\ndiv { border: solid 1px red; width: 50px; height: 50px; } \n.float { float: left; }\n```\n![image](http://o905ne85q.bkt.clouddn.com/KSQKV%7D%253L%25Z6XE_C4FWXCRI.png)\n\n- float与inline-block\n  - 当一个元素浮动之后，会影响内联框（通常是文本）的排列和布局\n  - float浮动若未指明宽度会尽可能地窄，而inline-block元素会带来空白问题\n\n如图：\nCSS(给div添加display=inline-block)\n``` css\ndiv { border: solid 1px red; width: 50px; height: 50px; display: display: inline-block;} \n```\n![image](http://o905ne85q.bkt.clouddn.com/O1%297R8%7BZ%7DAH%25C0F%28U%25M%7D8XX.png)\n\n- float撑开父元素的方法\n本属于普通流中的元素浮动之后，包含框内部由于不存在其他普通流元素了，也就表现出高度为0（高度塌陷）\n相信使用float的童鞋们都遇到过父元素高度塌陷的问题，这是因为浮动元素不占位的问题引起的。本骚年用过的解决办法如下：\n  - 父元素使用overflow: hidden（此时高度为auto）\n  父元素overflow:hidden后，首先会计算height: auto的真实高度，由于其触发了BFC，需要包含子元素，所以高度不是0，而是子元素高度。\n    - 这里补充BFC的三个特性\n    - 1.BFC会阻止垂直外边距（margin-top、margin-bottom）折叠\n    - 2.BFC不会重叠浮动元素\n    - 3.BFC可以包含浮动\n  - 使父元素也成为浮动float元素\n  将父容器也改成浮动定位，这样它就可以带着子元素一起浮动了\n  - 使用clear清除浮动\n  在浮动元素后方加入clear: both的元素，就可以清除浮动撑开父元素\n    - 简述clear原理\n    - 在样式中添加clear:right，理解为不允许右边有浮动元素，由于上一个元素是浮动元素，因此该元素会自动下移一行来满足规则\n    - 添加clear:both，则可以清除左右两边的浮动了\n\n- 参考\n[《浮动从何而来 我们为何要清除浮动 清除浮动的原理是什么》](http://www.jb51.net/css/67471.html) \n\n## 结束语\n虽然说这些很简单也很基础的东西，但对于写页面的时候解决各种不明bug和现象很有帮助的哦。","source":"_posts/about-display.md","raw":"---\ntitle: CSS的display有关\ndate: 2016-06-26 20:03:10\ncategories: CSS炒饭\ntags: 分享\n---\n上一篇主要讲[CSS的position和z-index](https://godbasin.github.io/2016/06/25/about-position/)，刚好想到了display。\n本文主要讲述块状元素和内联元素的说明，并补充float浮动相关。\n<!--more-->\n## CSS display属性\n-----\n### w3c的display\n这里借用[w3c](http://www.w3school.com.cn/cssref/pr_class_display.asp)上的说明\n- display属性规定元素应该生成的框的类型\n- 这个属性用于定义建立布局时元素生成的显示框类型\n\n### 内联元素和块状元素\n- 内联元素\n  - 内联元素又称行内元素等，表示位于行内的元素\n  - 内联元素只能容纳文本或者其他内联元素，它允许其他内联元素与其位于同一行\n  - 内联元素的宽度高度不起作用\n- 块状元素\n  - 块状元素一般是其他元素的容器，可容纳内联元素和其他块状元素\n  - 块状元素排斥其他元素与其位于同一行\n  - 块状元素的宽度高度起作用\n\n## 常用的display属性\n-----\n### block：块状元素\n- 常见的默认display: block元素\n  - div/p/h1/h2...h6/ul/ol\n  - html5新元素: section/article/header/footer等\n\n- 可容纳其他块状元素或内联元素\n此时我们可以在block元素里添加其他块状元素和内联元素。\n常见的就是在div内添加div/p，在p内添加a/span等。\n``` html\n<div><p><a></a></p></div>\n```\n\n- 排斥其他元素与其位于同一行\n一个block元素占位一行，不管其宽度和高度多少，都不允许其他元素（包括内联元素和块状元素）与其位于同一行。\n此时若要使多个block位于同一行，可以选择使用float浮动。后续会讲到。\n\n- 宽度高度起作用\nblock元素可以设置宽度width和高度height，有效。\n\n### inline：内联元素\n- 常见的默认display: inline元素\n  - a/span/i/strong/sub等\n\n- 位于行内，即位于块状元素或者其他内联元素内\n此时我们可以将inline元素放置于块状元素或者其他内联元素内。\n常见的就是在p内添加a/span等。\n``` html\n<p><a></a><span></span></p>\n```\n\n- 只能容纳文本或者其他内联元素\n请注意，inline元素里面无法放置block元素，这也是为什么我们将div/p放在a内，在浏览器中却依然显示在外面的原因。\n此时若要在元素内放置块状元素，可以选择设置display为block。\n\n- 允许其他内联元素与其位于同一行\n\n- inline元素的宽度高度不起作用\n即使给inline元素设置了宽高，也是无效的，这也是个常见的失误。\n此时若要给元素设置宽高，可以选择设置display为block或者inline-block。\n\n### inline-block元素\n- 与inline元素相似的地方\n  - 位于行内，即位于块状元素或者其他内联元素内\n  - 允许其他内联元素与其位于同一行\n- 与block元素相似的地方\n  - 可容纳其他块状元素或内联元素\n  - 宽度高度起作用\n- 使用inline-block\n其实，使用inline-block可以很方便解决一些问题：\n  - 使元素居中\n    - 考虑下面情况，在块状元素parent内添加了另外一个块状元素child\n    - 可以将child设置display: inline-block，同时配合parent设置text-align: center，就可以设置child在parent内横向居中\n    - 此时将parent的height和line-height设置相等，就可以轻松实现child在parent内纵向居中啦\n    - 当然child元素设置margin: auto也是可以实现横向居中的\n  - inline元素a/span设置宽高\n    - 考虑下面情况，我们需要给多个a元素设置为宽高一致\n    - 由于a元素内文字长度可能不一样，若使用padding也达不到想要的效果\n    - 此时将a元素设置display: inline-block，然后就可以添加有效的width和height进行设置啦\n  - 将多个块状元素放在一行\n    - 考虑下面情况，我们需要将多个block块状元素放在一行\n    - 由于block元素占位一行，即使设置宽度很小，后面的元素也会出现在下一行\n    - 此时将块状元素设置display: inline-block，解决问题\n\n### 其他display属性\n- table/table-cell等\n以前table也常被用来解决元素纵向居中的问题。\n但table样式还会导致很多的问题，这里就不再一一赘述。\n- inherite\n规定应该从父元素继承 display 属性的值。\n\n## float浮动\n-----\n说到block元素，当然不能少了float浮动啦\n- float属性\n  - float属性定义元素在哪个方向浮动\n  - float属性可应用于图像，使文本围绕在图像周围\n\n这里我们又得拿起文档流来讲讲了。\n给元素的float属性赋值后，就是脱离文档流，进行左右浮动，紧贴着父元素的边框或者是上一个同级同浮动元素的边框。\n\n- float与block\n  - 设置float浮动的元素自动获取display: block样式\n  - 当一个元素浮动之后，不会影响到块级框的布局\n如图：\nHTML\n``` html\n<div>1</div>\n<div class=\"float\">2</div>\n<div class=\"float\">3</div>\n<div>4</div>\n<div>5</div>\n<div class=\"float\">6</div>\n```\nCSS\n``` css\ndiv { border: solid 1px red; width: 50px; height: 50px; } \n.float { float: left; }\n```\n![image](http://o905ne85q.bkt.clouddn.com/KSQKV%7D%253L%25Z6XE_C4FWXCRI.png)\n\n- float与inline-block\n  - 当一个元素浮动之后，会影响内联框（通常是文本）的排列和布局\n  - float浮动若未指明宽度会尽可能地窄，而inline-block元素会带来空白问题\n\n如图：\nCSS(给div添加display=inline-block)\n``` css\ndiv { border: solid 1px red; width: 50px; height: 50px; display: display: inline-block;} \n```\n![image](http://o905ne85q.bkt.clouddn.com/O1%297R8%7BZ%7DAH%25C0F%28U%25M%7D8XX.png)\n\n- float撑开父元素的方法\n本属于普通流中的元素浮动之后，包含框内部由于不存在其他普通流元素了，也就表现出高度为0（高度塌陷）\n相信使用float的童鞋们都遇到过父元素高度塌陷的问题，这是因为浮动元素不占位的问题引起的。本骚年用过的解决办法如下：\n  - 父元素使用overflow: hidden（此时高度为auto）\n  父元素overflow:hidden后，首先会计算height: auto的真实高度，由于其触发了BFC，需要包含子元素，所以高度不是0，而是子元素高度。\n    - 这里补充BFC的三个特性\n    - 1.BFC会阻止垂直外边距（margin-top、margin-bottom）折叠\n    - 2.BFC不会重叠浮动元素\n    - 3.BFC可以包含浮动\n  - 使父元素也成为浮动float元素\n  将父容器也改成浮动定位，这样它就可以带着子元素一起浮动了\n  - 使用clear清除浮动\n  在浮动元素后方加入clear: both的元素，就可以清除浮动撑开父元素\n    - 简述clear原理\n    - 在样式中添加clear:right，理解为不允许右边有浮动元素，由于上一个元素是浮动元素，因此该元素会自动下移一行来满足规则\n    - 添加clear:both，则可以清除左右两边的浮动了\n\n- 参考\n[《浮动从何而来 我们为何要清除浮动 清除浮动的原理是什么》](http://www.jb51.net/css/67471.html) \n\n## 结束语\n虽然说这些很简单也很基础的东西，但对于写页面的时候解决各种不明bug和现象很有帮助的哦。","slug":"about-display","published":1,"updated":"2016-07-29T13:28:43.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cirrwvo1z000338l5ga82zxk9","content":"<p>上一篇主要讲<a href=\"https://godbasin.github.io/2016/06/25/about-position/\">CSS的position和z-index</a>，刚好想到了display。<br>本文主要讲述块状元素和内联元素的说明，并补充float浮动相关。<br><a id=\"more\"></a></p>\n<h2 id=\"CSS-display属性\"><a href=\"#CSS-display属性\" class=\"headerlink\" title=\"CSS display属性\"></a>CSS display属性</h2><hr>\n<h3 id=\"w3c的display\"><a href=\"#w3c的display\" class=\"headerlink\" title=\"w3c的display\"></a>w3c的display</h3><p>这里借用<a href=\"http://www.w3school.com.cn/cssref/pr_class_display.asp\" target=\"_blank\" rel=\"external\">w3c</a>上的说明</p>\n<ul>\n<li>display属性规定元素应该生成的框的类型</li>\n<li>这个属性用于定义建立布局时元素生成的显示框类型</li>\n</ul>\n<h3 id=\"内联元素和块状元素\"><a href=\"#内联元素和块状元素\" class=\"headerlink\" title=\"内联元素和块状元素\"></a>内联元素和块状元素</h3><ul>\n<li>内联元素<ul>\n<li>内联元素又称行内元素等，表示位于行内的元素</li>\n<li>内联元素只能容纳文本或者其他内联元素，它允许其他内联元素与其位于同一行</li>\n<li>内联元素的宽度高度不起作用</li>\n</ul>\n</li>\n<li>块状元素<ul>\n<li>块状元素一般是其他元素的容器，可容纳内联元素和其他块状元素</li>\n<li>块状元素排斥其他元素与其位于同一行</li>\n<li>块状元素的宽度高度起作用</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"常用的display属性\"><a href=\"#常用的display属性\" class=\"headerlink\" title=\"常用的display属性\"></a>常用的display属性</h2><hr>\n<h3 id=\"block：块状元素\"><a href=\"#block：块状元素\" class=\"headerlink\" title=\"block：块状元素\"></a>block：块状元素</h3><ul>\n<li><p>常见的默认display: block元素</p>\n<ul>\n<li>div/p/h1/h2…h6/ul/ol</li>\n<li>html5新元素: section/article/header/footer等</li>\n</ul>\n</li>\n<li><p>可容纳其他块状元素或内联元素<br>此时我们可以在block元素里添加其他块状元素和内联元素。<br>常见的就是在div内添加div/p，在p内添加a/span等。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">a</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>排斥其他元素与其位于同一行<br>一个block元素占位一行，不管其宽度和高度多少，都不允许其他元素（包括内联元素和块状元素）与其位于同一行。<br>此时若要使多个block位于同一行，可以选择使用float浮动。后续会讲到。</p>\n</li>\n<li><p>宽度高度起作用<br>block元素可以设置宽度width和高度height，有效。</p>\n</li>\n</ul>\n<h3 id=\"inline：内联元素\"><a href=\"#inline：内联元素\" class=\"headerlink\" title=\"inline：内联元素\"></a>inline：内联元素</h3><ul>\n<li><p>常见的默认display: inline元素</p>\n<ul>\n<li>a/span/i/strong/sub等</li>\n</ul>\n</li>\n<li><p>位于行内，即位于块状元素或者其他内联元素内<br>此时我们可以将inline元素放置于块状元素或者其他内联元素内。<br>常见的就是在p内添加a/span等。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">a</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">span</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>只能容纳文本或者其他内联元素<br>请注意，inline元素里面无法放置block元素，这也是为什么我们将div/p放在a内，在浏览器中却依然显示在外面的原因。<br>此时若要在元素内放置块状元素，可以选择设置display为block。</p>\n</li>\n<li><p>允许其他内联元素与其位于同一行</p>\n</li>\n<li><p>inline元素的宽度高度不起作用<br>即使给inline元素设置了宽高，也是无效的，这也是个常见的失误。<br>此时若要给元素设置宽高，可以选择设置display为block或者inline-block。</p>\n</li>\n</ul>\n<h3 id=\"inline-block元素\"><a href=\"#inline-block元素\" class=\"headerlink\" title=\"inline-block元素\"></a>inline-block元素</h3><ul>\n<li>与inline元素相似的地方<ul>\n<li>位于行内，即位于块状元素或者其他内联元素内</li>\n<li>允许其他内联元素与其位于同一行</li>\n</ul>\n</li>\n<li>与block元素相似的地方<ul>\n<li>可容纳其他块状元素或内联元素</li>\n<li>宽度高度起作用</li>\n</ul>\n</li>\n<li>使用inline-block<br>其实，使用inline-block可以很方便解决一些问题：<ul>\n<li>使元素居中<ul>\n<li>考虑下面情况，在块状元素parent内添加了另外一个块状元素child</li>\n<li>可以将child设置display: inline-block，同时配合parent设置text-align: center，就可以设置child在parent内横向居中</li>\n<li>此时将parent的height和line-height设置相等，就可以轻松实现child在parent内纵向居中啦</li>\n<li>当然child元素设置margin: auto也是可以实现横向居中的</li>\n</ul>\n</li>\n<li>inline元素a/span设置宽高<ul>\n<li>考虑下面情况，我们需要给多个a元素设置为宽高一致</li>\n<li>由于a元素内文字长度可能不一样，若使用padding也达不到想要的效果</li>\n<li>此时将a元素设置display: inline-block，然后就可以添加有效的width和height进行设置啦</li>\n</ul>\n</li>\n<li>将多个块状元素放在一行<ul>\n<li>考虑下面情况，我们需要将多个block块状元素放在一行</li>\n<li>由于block元素占位一行，即使设置宽度很小，后面的元素也会出现在下一行</li>\n<li>此时将块状元素设置display: inline-block，解决问题</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"其他display属性\"><a href=\"#其他display属性\" class=\"headerlink\" title=\"其他display属性\"></a>其他display属性</h3><ul>\n<li>table/table-cell等<br>以前table也常被用来解决元素纵向居中的问题。<br>但table样式还会导致很多的问题，这里就不再一一赘述。</li>\n<li>inherite<br>规定应该从父元素继承 display 属性的值。</li>\n</ul>\n<h2 id=\"float浮动\"><a href=\"#float浮动\" class=\"headerlink\" title=\"float浮动\"></a>float浮动</h2><hr>\n<p>说到block元素，当然不能少了float浮动啦</p>\n<ul>\n<li>float属性<ul>\n<li>float属性定义元素在哪个方向浮动</li>\n<li>float属性可应用于图像，使文本围绕在图像周围</li>\n</ul>\n</li>\n</ul>\n<p>这里我们又得拿起文档流来讲讲了。<br>给元素的float属性赋值后，就是脱离文档流，进行左右浮动，紧贴着父元素的边框或者是上一个同级同浮动元素的边框。</p>\n<ul>\n<li>float与block<ul>\n<li>设置float浮动的元素自动获取display: block样式</li>\n<li>当一个元素浮动之后，不会影响到块级框的布局<br>如图：<br>HTML<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span>1<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"float\"</span>&gt;</span>2<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"float\"</span>&gt;</span>3<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span>4<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span>5<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"float\"</span>&gt;</span>6<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n</ul>\n<p>CSS<br><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">div</span> &#123; <span class=\"attribute\">border</span>: solid <span class=\"number\">1px</span> red; <span class=\"attribute\">width</span>: <span class=\"number\">50px</span>; <span class=\"attribute\">height</span>: <span class=\"number\">50px</span>; &#125; </span><br><span class=\"line\"><span class=\"selector-class\">.float</span> &#123; <span class=\"attribute\">float</span>: left; &#125;</span><br></pre></td></tr></table></figure></p>\n<p><img src=\"http://o905ne85q.bkt.clouddn.com/KSQKV%7D%253L%25Z6XE_C4FWXCRI.png\" alt=\"image\"></p>\n<ul>\n<li>float与inline-block<ul>\n<li>当一个元素浮动之后，会影响内联框（通常是文本）的排列和布局</li>\n<li>float浮动若未指明宽度会尽可能地窄，而inline-block元素会带来空白问题</li>\n</ul>\n</li>\n</ul>\n<p>如图：<br>CSS(给div添加display=inline-block)<br><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">div</span> &#123; <span class=\"attribute\">border</span>: solid <span class=\"number\">1px</span> red; <span class=\"attribute\">width</span>: <span class=\"number\">50px</span>; <span class=\"attribute\">height</span>: <span class=\"number\">50px</span>; <span class=\"attribute\">display</span>: display: inline-block;&#125;</span><br></pre></td></tr></table></figure></p>\n<p><img src=\"http://o905ne85q.bkt.clouddn.com/O1%297R8%7BZ%7DAH%25C0F%28U%25M%7D8XX.png\" alt=\"image\"></p>\n<ul>\n<li><p>float撑开父元素的方法<br>本属于普通流中的元素浮动之后，包含框内部由于不存在其他普通流元素了，也就表现出高度为0（高度塌陷）<br>相信使用float的童鞋们都遇到过父元素高度塌陷的问题，这是因为浮动元素不占位的问题引起的。本骚年用过的解决办法如下：</p>\n<ul>\n<li>父元素使用overflow: hidden（此时高度为auto）<br>父元素overflow:hidden后，首先会计算height: auto的真实高度，由于其触发了BFC，需要包含子元素，所以高度不是0，而是子元素高度。<ul>\n<li>这里补充BFC的三个特性</li>\n<li>1.BFC会阻止垂直外边距（margin-top、margin-bottom）折叠</li>\n<li>2.BFC不会重叠浮动元素</li>\n<li>3.BFC可以包含浮动</li>\n</ul>\n</li>\n<li>使父元素也成为浮动float元素<br>将父容器也改成浮动定位，这样它就可以带着子元素一起浮动了</li>\n<li>使用clear清除浮动<br>在浮动元素后方加入clear: both的元素，就可以清除浮动撑开父元素<ul>\n<li>简述clear原理</li>\n<li>在样式中添加clear:right，理解为不允许右边有浮动元素，由于上一个元素是浮动元素，因此该元素会自动下移一行来满足规则</li>\n<li>添加clear:both，则可以清除左右两边的浮动了</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>参考<br><a href=\"http://www.jb51.net/css/67471.html\" target=\"_blank\" rel=\"external\">《浮动从何而来 我们为何要清除浮动 清除浮动的原理是什么》</a> </p>\n</li>\n</ul>\n<h2 id=\"结束语\"><a href=\"#结束语\" class=\"headerlink\" title=\"结束语\"></a>结束语</h2><p>虽然说这些很简单也很基础的东西，但对于写页面的时候解决各种不明bug和现象很有帮助的哦。</p>\n","excerpt":"<p>上一篇主要讲<a href=\"https://godbasin.github.io/2016/06/25/about-position/\">CSS的position和z-index</a>，刚好想到了display。<br>本文主要讲述块状元素和内联元素的说明，并补充float浮动相关。<br>","more":"</p>\n<h2 id=\"CSS-display属性\"><a href=\"#CSS-display属性\" class=\"headerlink\" title=\"CSS display属性\"></a>CSS display属性</h2><hr>\n<h3 id=\"w3c的display\"><a href=\"#w3c的display\" class=\"headerlink\" title=\"w3c的display\"></a>w3c的display</h3><p>这里借用<a href=\"http://www.w3school.com.cn/cssref/pr_class_display.asp\">w3c</a>上的说明</p>\n<ul>\n<li>display属性规定元素应该生成的框的类型</li>\n<li>这个属性用于定义建立布局时元素生成的显示框类型</li>\n</ul>\n<h3 id=\"内联元素和块状元素\"><a href=\"#内联元素和块状元素\" class=\"headerlink\" title=\"内联元素和块状元素\"></a>内联元素和块状元素</h3><ul>\n<li>内联元素<ul>\n<li>内联元素又称行内元素等，表示位于行内的元素</li>\n<li>内联元素只能容纳文本或者其他内联元素，它允许其他内联元素与其位于同一行</li>\n<li>内联元素的宽度高度不起作用</li>\n</ul>\n</li>\n<li>块状元素<ul>\n<li>块状元素一般是其他元素的容器，可容纳内联元素和其他块状元素</li>\n<li>块状元素排斥其他元素与其位于同一行</li>\n<li>块状元素的宽度高度起作用</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"常用的display属性\"><a href=\"#常用的display属性\" class=\"headerlink\" title=\"常用的display属性\"></a>常用的display属性</h2><hr>\n<h3 id=\"block：块状元素\"><a href=\"#block：块状元素\" class=\"headerlink\" title=\"block：块状元素\"></a>block：块状元素</h3><ul>\n<li><p>常见的默认display: block元素</p>\n<ul>\n<li>div/p/h1/h2…h6/ul/ol</li>\n<li>html5新元素: section/article/header/footer等</li>\n</ul>\n</li>\n<li><p>可容纳其他块状元素或内联元素<br>此时我们可以在block元素里添加其他块状元素和内联元素。<br>常见的就是在div内添加div/p，在p内添加a/span等。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">a</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>排斥其他元素与其位于同一行<br>一个block元素占位一行，不管其宽度和高度多少，都不允许其他元素（包括内联元素和块状元素）与其位于同一行。<br>此时若要使多个block位于同一行，可以选择使用float浮动。后续会讲到。</p>\n</li>\n<li><p>宽度高度起作用<br>block元素可以设置宽度width和高度height，有效。</p>\n</li>\n</ul>\n<h3 id=\"inline：内联元素\"><a href=\"#inline：内联元素\" class=\"headerlink\" title=\"inline：内联元素\"></a>inline：内联元素</h3><ul>\n<li><p>常见的默认display: inline元素</p>\n<ul>\n<li>a/span/i/strong/sub等</li>\n</ul>\n</li>\n<li><p>位于行内，即位于块状元素或者其他内联元素内<br>此时我们可以将inline元素放置于块状元素或者其他内联元素内。<br>常见的就是在p内添加a/span等。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">a</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">span</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>只能容纳文本或者其他内联元素<br>请注意，inline元素里面无法放置block元素，这也是为什么我们将div/p放在a内，在浏览器中却依然显示在外面的原因。<br>此时若要在元素内放置块状元素，可以选择设置display为block。</p>\n</li>\n<li><p>允许其他内联元素与其位于同一行</p>\n</li>\n<li><p>inline元素的宽度高度不起作用<br>即使给inline元素设置了宽高，也是无效的，这也是个常见的失误。<br>此时若要给元素设置宽高，可以选择设置display为block或者inline-block。</p>\n</li>\n</ul>\n<h3 id=\"inline-block元素\"><a href=\"#inline-block元素\" class=\"headerlink\" title=\"inline-block元素\"></a>inline-block元素</h3><ul>\n<li>与inline元素相似的地方<ul>\n<li>位于行内，即位于块状元素或者其他内联元素内</li>\n<li>允许其他内联元素与其位于同一行</li>\n</ul>\n</li>\n<li>与block元素相似的地方<ul>\n<li>可容纳其他块状元素或内联元素</li>\n<li>宽度高度起作用</li>\n</ul>\n</li>\n<li>使用inline-block<br>其实，使用inline-block可以很方便解决一些问题：<ul>\n<li>使元素居中<ul>\n<li>考虑下面情况，在块状元素parent内添加了另外一个块状元素child</li>\n<li>可以将child设置display: inline-block，同时配合parent设置text-align: center，就可以设置child在parent内横向居中</li>\n<li>此时将parent的height和line-height设置相等，就可以轻松实现child在parent内纵向居中啦</li>\n<li>当然child元素设置margin: auto也是可以实现横向居中的</li>\n</ul>\n</li>\n<li>inline元素a/span设置宽高<ul>\n<li>考虑下面情况，我们需要给多个a元素设置为宽高一致</li>\n<li>由于a元素内文字长度可能不一样，若使用padding也达不到想要的效果</li>\n<li>此时将a元素设置display: inline-block，然后就可以添加有效的width和height进行设置啦</li>\n</ul>\n</li>\n<li>将多个块状元素放在一行<ul>\n<li>考虑下面情况，我们需要将多个block块状元素放在一行</li>\n<li>由于block元素占位一行，即使设置宽度很小，后面的元素也会出现在下一行</li>\n<li>此时将块状元素设置display: inline-block，解决问题</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"其他display属性\"><a href=\"#其他display属性\" class=\"headerlink\" title=\"其他display属性\"></a>其他display属性</h3><ul>\n<li>table/table-cell等<br>以前table也常被用来解决元素纵向居中的问题。<br>但table样式还会导致很多的问题，这里就不再一一赘述。</li>\n<li>inherite<br>规定应该从父元素继承 display 属性的值。</li>\n</ul>\n<h2 id=\"float浮动\"><a href=\"#float浮动\" class=\"headerlink\" title=\"float浮动\"></a>float浮动</h2><hr>\n<p>说到block元素，当然不能少了float浮动啦</p>\n<ul>\n<li>float属性<ul>\n<li>float属性定义元素在哪个方向浮动</li>\n<li>float属性可应用于图像，使文本围绕在图像周围</li>\n</ul>\n</li>\n</ul>\n<p>这里我们又得拿起文档流来讲讲了。<br>给元素的float属性赋值后，就是脱离文档流，进行左右浮动，紧贴着父元素的边框或者是上一个同级同浮动元素的边框。</p>\n<ul>\n<li>float与block<ul>\n<li>设置float浮动的元素自动获取display: block样式</li>\n<li>当一个元素浮动之后，不会影响到块级框的布局<br>如图：<br>HTML<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span>1<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"float\"</span>&gt;</span>2<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"float\"</span>&gt;</span>3<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span>4<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span>5<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"float\"</span>&gt;</span>6<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n</ul>\n<p>CSS<br><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">div</span> &#123; <span class=\"attribute\">border</span>: solid <span class=\"number\">1px</span> red; <span class=\"attribute\">width</span>: <span class=\"number\">50px</span>; <span class=\"attribute\">height</span>: <span class=\"number\">50px</span>; &#125; </span><br><span class=\"line\"><span class=\"selector-class\">.float</span> &#123; <span class=\"attribute\">float</span>: left; &#125;</span><br></pre></td></tr></table></figure></p>\n<p><img src=\"http://o905ne85q.bkt.clouddn.com/KSQKV%7D%253L%25Z6XE_C4FWXCRI.png\" alt=\"image\"></p>\n<ul>\n<li>float与inline-block<ul>\n<li>当一个元素浮动之后，会影响内联框（通常是文本）的排列和布局</li>\n<li>float浮动若未指明宽度会尽可能地窄，而inline-block元素会带来空白问题</li>\n</ul>\n</li>\n</ul>\n<p>如图：<br>CSS(给div添加display=inline-block)<br><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">div</span> &#123; <span class=\"attribute\">border</span>: solid <span class=\"number\">1px</span> red; <span class=\"attribute\">width</span>: <span class=\"number\">50px</span>; <span class=\"attribute\">height</span>: <span class=\"number\">50px</span>; <span class=\"attribute\">display</span>: display: inline-block;&#125;</span><br></pre></td></tr></table></figure></p>\n<p><img src=\"http://o905ne85q.bkt.clouddn.com/O1%297R8%7BZ%7DAH%25C0F%28U%25M%7D8XX.png\" alt=\"image\"></p>\n<ul>\n<li><p>float撑开父元素的方法<br>本属于普通流中的元素浮动之后，包含框内部由于不存在其他普通流元素了，也就表现出高度为0（高度塌陷）<br>相信使用float的童鞋们都遇到过父元素高度塌陷的问题，这是因为浮动元素不占位的问题引起的。本骚年用过的解决办法如下：</p>\n<ul>\n<li>父元素使用overflow: hidden（此时高度为auto）<br>父元素overflow:hidden后，首先会计算height: auto的真实高度，由于其触发了BFC，需要包含子元素，所以高度不是0，而是子元素高度。<ul>\n<li>这里补充BFC的三个特性</li>\n<li>1.BFC会阻止垂直外边距（margin-top、margin-bottom）折叠</li>\n<li>2.BFC不会重叠浮动元素</li>\n<li>3.BFC可以包含浮动</li>\n</ul>\n</li>\n<li>使父元素也成为浮动float元素<br>将父容器也改成浮动定位，这样它就可以带着子元素一起浮动了</li>\n<li>使用clear清除浮动<br>在浮动元素后方加入clear: both的元素，就可以清除浮动撑开父元素<ul>\n<li>简述clear原理</li>\n<li>在样式中添加clear:right，理解为不允许右边有浮动元素，由于上一个元素是浮动元素，因此该元素会自动下移一行来满足规则</li>\n<li>添加clear:both，则可以清除左右两边的浮动了</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>参考<br><a href=\"http://www.jb51.net/css/67471.html\">《浮动从何而来 我们为何要清除浮动 清除浮动的原理是什么》</a> </p>\n</li>\n</ul>\n<h2 id=\"结束语\"><a href=\"#结束语\" class=\"headerlink\" title=\"结束语\"></a>结束语</h2><p>虽然说这些很简单也很基础的东西，但对于写页面的时候解决各种不明bug和现象很有帮助的哦。</p>"},{"title":"Angular使用笔记6--编写异步提交带图片的表单服务","date":"2016-07-17T12:52:25.000Z","_content":"最近的一个项目使用AngularJS(v1.2.6)作为前端的框架，《Angular使用笔记》系列用于记录过程中的一些使用和解决方法。\n本文记录编写异步提交带图片的表单服务的过程，同时简单介绍$q服务，以及HTML5 File API和FormData。\n<!--more-->\n## 有关angularJS$http和$q\n-----\n### $http\n- $http是一个用于读取web服务器上数据的服务\n- $http.get()从web服务器上读取静态JSON数据\n- $http的post使用会与ajax不一样哦，需要设置Content-Type值，具体可以查看[《Angular使用笔记2--创建登录页面》](https://godbasin.github.io/2016/07/08/angular-note-2-create-login/)里的解决办法\n\n### Promise对象\nJavascript采用回调函数(callback)来处理异步编程。从同步编程到异步回调编程有一个适应的过程，但是如果出现多层回调嵌套，也就是我们常说的厄运的回调金字塔(Pyramid of Doom)。\n- Promise是一种异步方式处理值（或者非值）的方法\n- Promise允许以一种同步的方式编写异步代码\n- 代表了一个函数最终可能的返回值或者抛出的异常\n- Promises/A规范\n  - promise有三种状态：未完成(unfulfilled)，完成(fulfilled) 和失败(failed)\n  - promise的状态只能由未完成转换成完成，或者未完成转换成失败\n  - promise的状态转换只发生一次\n\n### 在AngularJS中使用Promise: $q\n$q是Angular的一种内置服务，它可以使你异步地执行函数，并且当函数执行完成时它允许你使用函数的返回值（或异常）\n- $q常用的几个方法\n  - defer() 创建一个deferred对象，这个对象可以执行几个常用的方法，比如resolve,reject,notify等\n  - all() 传入Promise的数组，批量执行，返回一个promise对象\n  - when() 传入一个不确定的参数，如果符合Promise标准，就返回一个promise对象\n\n- defer()方法\n  - 在$q中，可以使用resolve方法，变成完成状态；使用reject方法，变成拒绝状态\n  - defer()用于创建一个deferred对象，defer.promise用于返回一个promise对象，来定义then方法\n  - then中有三个参数，分别是成功回调、失败回调、状态变更回调\n\n- all()方法\n  - 可以把多个primise的数组合并成一个\n  - 当所有的promise执行成功后，会执行后面的回调\n\n- when()方法\n  - 可以传入一个参数，这个参数可能是一个值，可能是一个符合promise标准的外部对象\n\n### 编写一个集成$q服务\n这里我们将单个$q服务和多个$q服务（all()方法）集成成一个服务，返回Promise\n- query方法\n  - query方法返回一个对象，对象包括单个$http请求的Promise以及取消请求的方法\n  - multiquery方法返回多个$http请求的promise\n\n``` javascript\napp.factory('qService', ['$http', '$q', function($http, $q) {\n\treturn {\n\t\tquery: function(param) {\n\t\t\tvar deferred = $q.defer(), //声明承诺\n\t\t\t\tcancel = function(reason) { //取消promise事件\n\t\t\t\t\tdeferred.reject(reason);\n\t\t\t\t};\n\t\t\t$http(param).\n\t\t\tsuccess(function(data) {\n\t\t\t\tdeferred.resolve(data); //请求成功\n\t\t\t}).\n\t\t\terror(function(data) {\n\t\t\t\tdeferred.reject(data); //请求失败\n\t\t\t});\n\t\t\treturn {\n\t\t\t\tpromise: deferred.promise, // 返回承诺\n\t\t\t\tcancel: cancel // 返回取消事件\n\t\t\t};\n\t\t},\n\t\tmultiquery: function(params) {\n\t\t\tvar promises = [];\n\t\t\tfor (var i in params) {\n\t\t\t\tvar promise = $http(params[i]); //返回$http服务\n\t\t\t\tpromises.push(promise); //将$http服务添加进队列\n\t\t\t}\n\t\t\treturn $q.all(promises); //返回Promise承诺\n\t\t}\n\t};\n}])\n```\n注意：\n- 这里取消promise的事件只适合GET请求，若在POST请求上请求可能会导致不可预测的错误哦\n- 多个http服务的请求的错误回调本骚年还没想到解决办法，请小伙伴们多多赐教\n\n\n### 参考\n- [《AngularJS 中的Promise --- $q服务详解》](http://www.cnblogs.com/xing901022/p/4928147.html)\n- [《理解 Promise 的工作原理》](https://blog.coding.net/blog/how-do-promises-work)\n\n## 异步提交带图片的表单\n-----\n在Angular中要实现异步提交图片，可以使用组件或者利用HTML5属性formdata和fileapi自己实现图片的提交哦。\n- Angular的组件或者服务本骚年木有找到...\n- 既然已经使用了jQuery，推荐一个异步提交表单的插件jQuery.form\n\n### XMLHttpRequest Level 2\n- XMLHttpRequest是一个浏览器接口，使得Javascript可以进行HTTP(S)通信\n- 新版本的XMLHttpRequest对象(XMLHttpRequest Level 2)功能\n  - 1.可以设置HTTP请求的时限\n  - 2.可以使用FormData对象管理表单数据\n  - 3.可以上传文件\n  - 4.可以请求不同域名下的数据（跨域资源共享，Cross-origin resource sharing，简称CORS）\n  - 5.可以获取服务器端的二进制数据\n  - 6.可以获得数据传输的进度信息\n\n这里主要使用FromData，具体其他请查看[《触碰jQuery：AJAX异步详解》](http://www.cnblogs.com/heyuquan/archive/2013/05/13/3076465.html)\n\n### FormData对象\nHTML5新增了一个FormData对象，可以模拟表单\n使用方法如下：\n``` javascript\nwindow.FormData //检测兼容性\nvar formData = new FormData(); //新建FormData对象\nformData.append(name, value); //添加表单项\nxhr.send(formData); //发送FormData对象\n//以下方法可直接获取网页表单的值\nvar form = document.getElementById('form'); //获取form对象\nvar formData = new FormData(form); //生成FormData对象\nformData.append(name, value); // 添加表单项\nxhr.open('POST', form.action);\nxhr.send(formData);//发送FormData对象\n```\n\n### File API\nHTML5提供了File API，允许js读取本地文件。主要用于本地预览图片。\n- FileList接口: 可以用来代表一组文件的JS对象，比如用户通过input[type=\"file\"]元素选中的本地文件列表\n- Blob接口: 用来代表一段二进制数据，并且允许我们通过JS对其数据以字节为单位进行“切割”\n- File接口: 用来代步一个文件，是从Blob接口继承而来的，并在此基础上增加了诸如文件名、MIME类型之类的特性\n- FileReader接口: 提供读取文件的方法和事件\n- 检查File API兼容性： window.File&&window.FileReader&&window.FileList&&window.Blob\n\n其他方法可参考[《HTML 5中的文件处理之FileAPI》](http://bulaoge.net/topic.blg?dmn=g3g4&tid=2344378#Content)\n\n\n### 编写异步提交带图片表单的服务\n现在我们利用FormData和FileAPI，可以开始编写异步提交带图片表单的服务了。\n添加工厂服务，代码如下：\n``` javascript\n/* params:\n * {\n * \tfileinput: 传入file input的dom对象,\n * \turl: 服务器地址,\n * \tother: 其他需要发送的参数{键：值}\n *  callback: 成功回调\n *  errback: 失败回调\n * }\n */\n.factory('AsyncForm', function() {\n\tvar feature = {}; //用于检查FormData和fileAPI的兼容性\n\tfeature.fileapi = (window.File && window.FileReader && window.FileList && window.Blob);\n\tfeature.formdata = window.FormData !== undefined;\n\tvar fileAPI = feature.fileapi && feature.formdata,\n\t\tformData,\n\t\txhr = window.XMLHttpRequest ? new XMLHttpRequest() : new ActiveXObject('Microsoft.XMLHTTP'),\n\t\tAsyncForm = function(params) {\n\t\t\tif (fileAPI) {\n\t\t\t\tvar otherparams = params.other, //其他需要发送的参数{键：值}\n\t\t\t\t\tcallback = params.callback, //成功回调\n\t\t\t\t\terrback = params.errback, //失败回调\n\t\t\t\t\tfiles = (params.fileinput && params.fileinput.files) ? params.fileinput.files : {}, //传入file input的dom对象\n\t\t\t\t\tonreadystatechange;\n\t\t\t\t//设置onreadystatechange\n\t\t\t\tonreadystatechange = function(func, _xhr, errfunc) {\n\t\t\t\t\t_xhr.onreadystatechange = function() {\n\t\t\t\t\t\tif (_xhr.readyState == 4) {\n\t\t\t\t\t\t\tif (_xhr.status == 200) {\n\t\t\t\t\t\t\t\t//判断若有成功回调，则执行\n\t\t\t\t\t\t\t\tif (typeof func == 'function') {func(_xhr.responseText);} \n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t//判断若有失败回调，则执行\n\t\t\t\t\t\t\t\tif (typeof errfunc == 'function') {errfunc();}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t};\n\t\t\t\t//新建formData对象\n\t\t\t\tformData = new FormData();\n\t\t\t\t//判断是否有图片对象，有则添加进队列\n\t\t\t\tif (files) {\n\t\t\t\t\tfor (var i = 0; i < files.length; i++) {\n\t\t\t\t\t\tformData.append('file', files[i]);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t//若有其他表单项，添加进队列\n\t\t\t\tfor (i in otherparams) {\n\t\t\t\t\tformData.append(i, otherparams[i]);\n\t\t\t\t}\n\t\t\t\t//设置POST方法，以及服务器地址\n\t\t\t\txhr.open('post', params.url);\n\t\t\t\tonreadystatechange(callback, xhr, errback);\n\t\t\t} else {\n\t\t\t\talert(\"浏览器不支持FormData或fileAPI\");\n\t\t\t}\n\t\t};\n\tAsyncForm.prototype = {\n\t\t//提交表单事件\n\t\tsubmit: function() {\n\t\t\txhr.send(formData);\n\t\t},\n\t};\n\treturn AsyncForm;\n});\n```\n- 这里的fileinput参数传入file input的dom对象，其实可以直接传入file的，大家可以进行优化哦。\n\n### 使用异步提交带图片表单的服务\n- 在控制器中需注入依赖AsyncForm\n\n``` javascript\n//创建表单\nvar asform = new AsyncForm({\n\tfileinput: $input, //传入file input的dom对象\n\turl: url, //服务器地址\n\tother: { //其他需要发送的参数{键：值}\n\t\tname: value,\n\t\tname: value,\n\t},\n\tcallback: function(data) {}, //成功回调\n\terrback: function() {} //失败回调\n});\n//提交表单\nasform.submit();\n```\n\n## 结束语\n-----\n这里没有考虑不支持HTML5时候的处理办法，大家可以私底下试试哦，提示：）可使用iframe实现哦。\n[此处查看项目代码（仅包含app部分）](https://github.com/godbasin/godbasin.github.io/tree/blog-codes/angular-notes/6-asyncchronous-submit-form)","source":"_posts/angular-note-6-asyncchronous-submit-form.md","raw":"---\ntitle: Angular使用笔记6--编写异步提交带图片的表单服务\ndate: 2016-07-17 20:52:25\ncategories: angular混搭\ntags: 笔记\n---\n最近的一个项目使用AngularJS(v1.2.6)作为前端的框架，《Angular使用笔记》系列用于记录过程中的一些使用和解决方法。\n本文记录编写异步提交带图片的表单服务的过程，同时简单介绍$q服务，以及HTML5 File API和FormData。\n<!--more-->\n## 有关angularJS$http和$q\n-----\n### $http\n- $http是一个用于读取web服务器上数据的服务\n- $http.get()从web服务器上读取静态JSON数据\n- $http的post使用会与ajax不一样哦，需要设置Content-Type值，具体可以查看[《Angular使用笔记2--创建登录页面》](https://godbasin.github.io/2016/07/08/angular-note-2-create-login/)里的解决办法\n\n### Promise对象\nJavascript采用回调函数(callback)来处理异步编程。从同步编程到异步回调编程有一个适应的过程，但是如果出现多层回调嵌套，也就是我们常说的厄运的回调金字塔(Pyramid of Doom)。\n- Promise是一种异步方式处理值（或者非值）的方法\n- Promise允许以一种同步的方式编写异步代码\n- 代表了一个函数最终可能的返回值或者抛出的异常\n- Promises/A规范\n  - promise有三种状态：未完成(unfulfilled)，完成(fulfilled) 和失败(failed)\n  - promise的状态只能由未完成转换成完成，或者未完成转换成失败\n  - promise的状态转换只发生一次\n\n### 在AngularJS中使用Promise: $q\n$q是Angular的一种内置服务，它可以使你异步地执行函数，并且当函数执行完成时它允许你使用函数的返回值（或异常）\n- $q常用的几个方法\n  - defer() 创建一个deferred对象，这个对象可以执行几个常用的方法，比如resolve,reject,notify等\n  - all() 传入Promise的数组，批量执行，返回一个promise对象\n  - when() 传入一个不确定的参数，如果符合Promise标准，就返回一个promise对象\n\n- defer()方法\n  - 在$q中，可以使用resolve方法，变成完成状态；使用reject方法，变成拒绝状态\n  - defer()用于创建一个deferred对象，defer.promise用于返回一个promise对象，来定义then方法\n  - then中有三个参数，分别是成功回调、失败回调、状态变更回调\n\n- all()方法\n  - 可以把多个primise的数组合并成一个\n  - 当所有的promise执行成功后，会执行后面的回调\n\n- when()方法\n  - 可以传入一个参数，这个参数可能是一个值，可能是一个符合promise标准的外部对象\n\n### 编写一个集成$q服务\n这里我们将单个$q服务和多个$q服务（all()方法）集成成一个服务，返回Promise\n- query方法\n  - query方法返回一个对象，对象包括单个$http请求的Promise以及取消请求的方法\n  - multiquery方法返回多个$http请求的promise\n\n``` javascript\napp.factory('qService', ['$http', '$q', function($http, $q) {\n\treturn {\n\t\tquery: function(param) {\n\t\t\tvar deferred = $q.defer(), //声明承诺\n\t\t\t\tcancel = function(reason) { //取消promise事件\n\t\t\t\t\tdeferred.reject(reason);\n\t\t\t\t};\n\t\t\t$http(param).\n\t\t\tsuccess(function(data) {\n\t\t\t\tdeferred.resolve(data); //请求成功\n\t\t\t}).\n\t\t\terror(function(data) {\n\t\t\t\tdeferred.reject(data); //请求失败\n\t\t\t});\n\t\t\treturn {\n\t\t\t\tpromise: deferred.promise, // 返回承诺\n\t\t\t\tcancel: cancel // 返回取消事件\n\t\t\t};\n\t\t},\n\t\tmultiquery: function(params) {\n\t\t\tvar promises = [];\n\t\t\tfor (var i in params) {\n\t\t\t\tvar promise = $http(params[i]); //返回$http服务\n\t\t\t\tpromises.push(promise); //将$http服务添加进队列\n\t\t\t}\n\t\t\treturn $q.all(promises); //返回Promise承诺\n\t\t}\n\t};\n}])\n```\n注意：\n- 这里取消promise的事件只适合GET请求，若在POST请求上请求可能会导致不可预测的错误哦\n- 多个http服务的请求的错误回调本骚年还没想到解决办法，请小伙伴们多多赐教\n\n\n### 参考\n- [《AngularJS 中的Promise --- $q服务详解》](http://www.cnblogs.com/xing901022/p/4928147.html)\n- [《理解 Promise 的工作原理》](https://blog.coding.net/blog/how-do-promises-work)\n\n## 异步提交带图片的表单\n-----\n在Angular中要实现异步提交图片，可以使用组件或者利用HTML5属性formdata和fileapi自己实现图片的提交哦。\n- Angular的组件或者服务本骚年木有找到...\n- 既然已经使用了jQuery，推荐一个异步提交表单的插件jQuery.form\n\n### XMLHttpRequest Level 2\n- XMLHttpRequest是一个浏览器接口，使得Javascript可以进行HTTP(S)通信\n- 新版本的XMLHttpRequest对象(XMLHttpRequest Level 2)功能\n  - 1.可以设置HTTP请求的时限\n  - 2.可以使用FormData对象管理表单数据\n  - 3.可以上传文件\n  - 4.可以请求不同域名下的数据（跨域资源共享，Cross-origin resource sharing，简称CORS）\n  - 5.可以获取服务器端的二进制数据\n  - 6.可以获得数据传输的进度信息\n\n这里主要使用FromData，具体其他请查看[《触碰jQuery：AJAX异步详解》](http://www.cnblogs.com/heyuquan/archive/2013/05/13/3076465.html)\n\n### FormData对象\nHTML5新增了一个FormData对象，可以模拟表单\n使用方法如下：\n``` javascript\nwindow.FormData //检测兼容性\nvar formData = new FormData(); //新建FormData对象\nformData.append(name, value); //添加表单项\nxhr.send(formData); //发送FormData对象\n//以下方法可直接获取网页表单的值\nvar form = document.getElementById('form'); //获取form对象\nvar formData = new FormData(form); //生成FormData对象\nformData.append(name, value); // 添加表单项\nxhr.open('POST', form.action);\nxhr.send(formData);//发送FormData对象\n```\n\n### File API\nHTML5提供了File API，允许js读取本地文件。主要用于本地预览图片。\n- FileList接口: 可以用来代表一组文件的JS对象，比如用户通过input[type=\"file\"]元素选中的本地文件列表\n- Blob接口: 用来代表一段二进制数据，并且允许我们通过JS对其数据以字节为单位进行“切割”\n- File接口: 用来代步一个文件，是从Blob接口继承而来的，并在此基础上增加了诸如文件名、MIME类型之类的特性\n- FileReader接口: 提供读取文件的方法和事件\n- 检查File API兼容性： window.File&&window.FileReader&&window.FileList&&window.Blob\n\n其他方法可参考[《HTML 5中的文件处理之FileAPI》](http://bulaoge.net/topic.blg?dmn=g3g4&tid=2344378#Content)\n\n\n### 编写异步提交带图片表单的服务\n现在我们利用FormData和FileAPI，可以开始编写异步提交带图片表单的服务了。\n添加工厂服务，代码如下：\n``` javascript\n/* params:\n * {\n * \tfileinput: 传入file input的dom对象,\n * \turl: 服务器地址,\n * \tother: 其他需要发送的参数{键：值}\n *  callback: 成功回调\n *  errback: 失败回调\n * }\n */\n.factory('AsyncForm', function() {\n\tvar feature = {}; //用于检查FormData和fileAPI的兼容性\n\tfeature.fileapi = (window.File && window.FileReader && window.FileList && window.Blob);\n\tfeature.formdata = window.FormData !== undefined;\n\tvar fileAPI = feature.fileapi && feature.formdata,\n\t\tformData,\n\t\txhr = window.XMLHttpRequest ? new XMLHttpRequest() : new ActiveXObject('Microsoft.XMLHTTP'),\n\t\tAsyncForm = function(params) {\n\t\t\tif (fileAPI) {\n\t\t\t\tvar otherparams = params.other, //其他需要发送的参数{键：值}\n\t\t\t\t\tcallback = params.callback, //成功回调\n\t\t\t\t\terrback = params.errback, //失败回调\n\t\t\t\t\tfiles = (params.fileinput && params.fileinput.files) ? params.fileinput.files : {}, //传入file input的dom对象\n\t\t\t\t\tonreadystatechange;\n\t\t\t\t//设置onreadystatechange\n\t\t\t\tonreadystatechange = function(func, _xhr, errfunc) {\n\t\t\t\t\t_xhr.onreadystatechange = function() {\n\t\t\t\t\t\tif (_xhr.readyState == 4) {\n\t\t\t\t\t\t\tif (_xhr.status == 200) {\n\t\t\t\t\t\t\t\t//判断若有成功回调，则执行\n\t\t\t\t\t\t\t\tif (typeof func == 'function') {func(_xhr.responseText);} \n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t//判断若有失败回调，则执行\n\t\t\t\t\t\t\t\tif (typeof errfunc == 'function') {errfunc();}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t};\n\t\t\t\t//新建formData对象\n\t\t\t\tformData = new FormData();\n\t\t\t\t//判断是否有图片对象，有则添加进队列\n\t\t\t\tif (files) {\n\t\t\t\t\tfor (var i = 0; i < files.length; i++) {\n\t\t\t\t\t\tformData.append('file', files[i]);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t//若有其他表单项，添加进队列\n\t\t\t\tfor (i in otherparams) {\n\t\t\t\t\tformData.append(i, otherparams[i]);\n\t\t\t\t}\n\t\t\t\t//设置POST方法，以及服务器地址\n\t\t\t\txhr.open('post', params.url);\n\t\t\t\tonreadystatechange(callback, xhr, errback);\n\t\t\t} else {\n\t\t\t\talert(\"浏览器不支持FormData或fileAPI\");\n\t\t\t}\n\t\t};\n\tAsyncForm.prototype = {\n\t\t//提交表单事件\n\t\tsubmit: function() {\n\t\t\txhr.send(formData);\n\t\t},\n\t};\n\treturn AsyncForm;\n});\n```\n- 这里的fileinput参数传入file input的dom对象，其实可以直接传入file的，大家可以进行优化哦。\n\n### 使用异步提交带图片表单的服务\n- 在控制器中需注入依赖AsyncForm\n\n``` javascript\n//创建表单\nvar asform = new AsyncForm({\n\tfileinput: $input, //传入file input的dom对象\n\turl: url, //服务器地址\n\tother: { //其他需要发送的参数{键：值}\n\t\tname: value,\n\t\tname: value,\n\t},\n\tcallback: function(data) {}, //成功回调\n\terrback: function() {} //失败回调\n});\n//提交表单\nasform.submit();\n```\n\n## 结束语\n-----\n这里没有考虑不支持HTML5时候的处理办法，大家可以私底下试试哦，提示：）可使用iframe实现哦。\n[此处查看项目代码（仅包含app部分）](https://github.com/godbasin/godbasin.github.io/tree/blog-codes/angular-notes/6-asyncchronous-submit-form)","slug":"angular-note-6-asyncchronous-submit-form","published":1,"updated":"2016-07-29T13:23:37.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cirrwvo2e000838l56jn6fjek","content":"<p>最近的一个项目使用AngularJS(v1.2.6)作为前端的框架，《Angular使用笔记》系列用于记录过程中的一些使用和解决方法。<br>本文记录编写异步提交带图片的表单服务的过程，同时简单介绍$q服务，以及HTML5 File API和FormData。<br><a id=\"more\"></a></p>\n<h2 id=\"有关angularJS-http和-q\"><a href=\"#有关angularJS-http和-q\" class=\"headerlink\" title=\"有关angularJS$http和$q\"></a>有关angularJS$http和$q</h2><hr>\n<h3 id=\"http\"><a href=\"#http\" class=\"headerlink\" title=\"$http\"></a>$http</h3><ul>\n<li>$http是一个用于读取web服务器上数据的服务</li>\n<li>$http.get()从web服务器上读取静态JSON数据</li>\n<li>$http的post使用会与ajax不一样哦，需要设置Content-Type值，具体可以查看<a href=\"https://godbasin.github.io/2016/07/08/angular-note-2-create-login/\">《Angular使用笔记2–创建登录页面》</a>里的解决办法</li>\n</ul>\n<h3 id=\"Promise对象\"><a href=\"#Promise对象\" class=\"headerlink\" title=\"Promise对象\"></a>Promise对象</h3><p>Javascript采用回调函数(callback)来处理异步编程。从同步编程到异步回调编程有一个适应的过程，但是如果出现多层回调嵌套，也就是我们常说的厄运的回调金字塔(Pyramid of Doom)。</p>\n<ul>\n<li>Promise是一种异步方式处理值（或者非值）的方法</li>\n<li>Promise允许以一种同步的方式编写异步代码</li>\n<li>代表了一个函数最终可能的返回值或者抛出的异常</li>\n<li>Promises/A规范<ul>\n<li>promise有三种状态：未完成(unfulfilled)，完成(fulfilled) 和失败(failed)</li>\n<li>promise的状态只能由未完成转换成完成，或者未完成转换成失败</li>\n<li>promise的状态转换只发生一次</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"在AngularJS中使用Promise-q\"><a href=\"#在AngularJS中使用Promise-q\" class=\"headerlink\" title=\"在AngularJS中使用Promise: $q\"></a>在AngularJS中使用Promise: $q</h3><p>$q是Angular的一种内置服务，它可以使你异步地执行函数，并且当函数执行完成时它允许你使用函数的返回值（或异常）</p>\n<ul>\n<li><p>$q常用的几个方法</p>\n<ul>\n<li>defer() 创建一个deferred对象，这个对象可以执行几个常用的方法，比如resolve,reject,notify等</li>\n<li>all() 传入Promise的数组，批量执行，返回一个promise对象</li>\n<li>when() 传入一个不确定的参数，如果符合Promise标准，就返回一个promise对象</li>\n</ul>\n</li>\n<li><p>defer()方法</p>\n<ul>\n<li>在$q中，可以使用resolve方法，变成完成状态；使用reject方法，变成拒绝状态</li>\n<li>defer()用于创建一个deferred对象，defer.promise用于返回一个promise对象，来定义then方法</li>\n<li>then中有三个参数，分别是成功回调、失败回调、状态变更回调</li>\n</ul>\n</li>\n<li><p>all()方法</p>\n<ul>\n<li>可以把多个primise的数组合并成一个</li>\n<li>当所有的promise执行成功后，会执行后面的回调</li>\n</ul>\n</li>\n<li><p>when()方法</p>\n<ul>\n<li>可以传入一个参数，这个参数可能是一个值，可能是一个符合promise标准的外部对象</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"编写一个集成-q服务\"><a href=\"#编写一个集成-q服务\" class=\"headerlink\" title=\"编写一个集成$q服务\"></a>编写一个集成$q服务</h3><p>这里我们将单个$q服务和多个$q服务（all()方法）集成成一个服务，返回Promise</p>\n<ul>\n<li>query方法<ul>\n<li>query方法返回一个对象，对象包括单个$http请求的Promise以及取消请求的方法</li>\n<li>multiquery方法返回多个$http请求的promise</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">app.factory(<span class=\"string\">'qService'</span>, [<span class=\"string\">'$http'</span>, <span class=\"string\">'$q'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">$http, $q</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">    query: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">param</span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">var</span> deferred = $q.defer(), <span class=\"comment\">//声明承诺</span></span><br><span class=\"line\">        cancel = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">reason</span>) </span>&#123; <span class=\"comment\">//取消promise事件</span></span><br><span class=\"line\">          deferred.reject(reason);</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">      $http(param).</span><br><span class=\"line\">      success(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">data</span>) </span>&#123;</span><br><span class=\"line\">        deferred.resolve(data); <span class=\"comment\">//请求成功</span></span><br><span class=\"line\">      &#125;).</span><br><span class=\"line\">      error(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">data</span>) </span>&#123;</span><br><span class=\"line\">        deferred.reject(data); <span class=\"comment\">//请求失败</span></span><br><span class=\"line\">      &#125;);</span><br><span class=\"line\">      <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">        promise: deferred.promise, <span class=\"comment\">// 返回承诺</span></span><br><span class=\"line\">        cancel: cancel <span class=\"comment\">// 返回取消事件</span></span><br><span class=\"line\">      &#125;;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    multiquery: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">params</span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">var</span> promises = [];</span><br><span class=\"line\">      <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i <span class=\"keyword\">in</span> params) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> promise = $http(params[i]); <span class=\"comment\">//返回$http服务</span></span><br><span class=\"line\">        promises.push(promise); <span class=\"comment\">//将$http服务添加进队列</span></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> $q.all(promises); <span class=\"comment\">//返回Promise承诺</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">&#125;])</span><br></pre></td></tr></table></figure>\n<p>注意：</p>\n<ul>\n<li>这里取消promise的事件只适合GET请求，若在POST请求上请求可能会导致不可预测的错误哦</li>\n<li>多个http服务的请求的错误回调本骚年还没想到解决办法，请小伙伴们多多赐教</li>\n</ul>\n<h3 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h3><ul>\n<li><a href=\"http://www.cnblogs.com/xing901022/p/4928147.html\" target=\"_blank\" rel=\"external\">《AngularJS 中的Promise — $q服务详解》</a></li>\n<li><a href=\"https://blog.coding.net/blog/how-do-promises-work\" target=\"_blank\" rel=\"external\">《理解 Promise 的工作原理》</a></li>\n</ul>\n<h2 id=\"异步提交带图片的表单\"><a href=\"#异步提交带图片的表单\" class=\"headerlink\" title=\"异步提交带图片的表单\"></a>异步提交带图片的表单</h2><hr>\n<p>在Angular中要实现异步提交图片，可以使用组件或者利用HTML5属性formdata和fileapi自己实现图片的提交哦。</p>\n<ul>\n<li>Angular的组件或者服务本骚年木有找到…</li>\n<li>既然已经使用了jQuery，推荐一个异步提交表单的插件jQuery.form</li>\n</ul>\n<h3 id=\"XMLHttpRequest-Level-2\"><a href=\"#XMLHttpRequest-Level-2\" class=\"headerlink\" title=\"XMLHttpRequest Level 2\"></a>XMLHttpRequest Level 2</h3><ul>\n<li>XMLHttpRequest是一个浏览器接口，使得Javascript可以进行HTTP(S)通信</li>\n<li>新版本的XMLHttpRequest对象(XMLHttpRequest Level 2)功能<ul>\n<li>1.可以设置HTTP请求的时限</li>\n<li>2.可以使用FormData对象管理表单数据</li>\n<li>3.可以上传文件</li>\n<li>4.可以请求不同域名下的数据（跨域资源共享，Cross-origin resource sharing，简称CORS）</li>\n<li>5.可以获取服务器端的二进制数据</li>\n<li>6.可以获得数据传输的进度信息</li>\n</ul>\n</li>\n</ul>\n<p>这里主要使用FromData，具体其他请查看<a href=\"http://www.cnblogs.com/heyuquan/archive/2013/05/13/3076465.html\" target=\"_blank\" rel=\"external\">《触碰jQuery：AJAX异步详解》</a></p>\n<h3 id=\"FormData对象\"><a href=\"#FormData对象\" class=\"headerlink\" title=\"FormData对象\"></a>FormData对象</h3><p>HTML5新增了一个FormData对象，可以模拟表单<br>使用方法如下：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">window</span>.FormData <span class=\"comment\">//检测兼容性</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> formData = <span class=\"keyword\">new</span> FormData(); <span class=\"comment\">//新建FormData对象</span></span><br><span class=\"line\">formData.append(name, value); <span class=\"comment\">//添加表单项</span></span><br><span class=\"line\">xhr.send(formData); <span class=\"comment\">//发送FormData对象</span></span><br><span class=\"line\"><span class=\"comment\">//以下方法可直接获取网页表单的值</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> form = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'form'</span>); <span class=\"comment\">//获取form对象</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> formData = <span class=\"keyword\">new</span> FormData(form); <span class=\"comment\">//生成FormData对象</span></span><br><span class=\"line\">formData.append(name, value); <span class=\"comment\">// 添加表单项</span></span><br><span class=\"line\">xhr.open(<span class=\"string\">'POST'</span>, form.action);</span><br><span class=\"line\">xhr.send(formData);<span class=\"comment\">//发送FormData对象</span></span><br></pre></td></tr></table></figure></p>\n<h3 id=\"File-API\"><a href=\"#File-API\" class=\"headerlink\" title=\"File API\"></a>File API</h3><p>HTML5提供了File API，允许js读取本地文件。主要用于本地预览图片。</p>\n<ul>\n<li>FileList接口: 可以用来代表一组文件的JS对象，比如用户通过input[type=”file”]元素选中的本地文件列表</li>\n<li>Blob接口: 用来代表一段二进制数据，并且允许我们通过JS对其数据以字节为单位进行“切割”</li>\n<li>File接口: 用来代步一个文件，是从Blob接口继承而来的，并在此基础上增加了诸如文件名、MIME类型之类的特性</li>\n<li>FileReader接口: 提供读取文件的方法和事件</li>\n<li>检查File API兼容性： window.File&amp;&amp;window.FileReader&amp;&amp;window.FileList&amp;&amp;window.Blob</li>\n</ul>\n<p>其他方法可参考<a href=\"http://bulaoge.net/topic.blg?dmn=g3g4&amp;tid=2344378#Content\" target=\"_blank\" rel=\"external\">《HTML 5中的文件处理之FileAPI》</a></p>\n<h3 id=\"编写异步提交带图片表单的服务\"><a href=\"#编写异步提交带图片表单的服务\" class=\"headerlink\" title=\"编写异步提交带图片表单的服务\"></a>编写异步提交带图片表单的服务</h3><p>现在我们利用FormData和FileAPI，可以开始编写异步提交带图片表单的服务了。<br>添加工厂服务，代码如下：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* params:</span><br><span class=\"line\"> * &#123;</span><br><span class=\"line\"> * \tfileinput: 传入file input的dom对象,</span><br><span class=\"line\"> * \turl: 服务器地址,</span><br><span class=\"line\"> * \tother: 其他需要发送的参数&#123;键：值&#125;</span><br><span class=\"line\"> *  callback: 成功回调</span><br><span class=\"line\"> *  errback: 失败回调</span><br><span class=\"line\"> * &#125;</span><br><span class=\"line\"> */</span></span><br><span class=\"line\">.factory(<span class=\"string\">'AsyncForm'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> feature = &#123;&#125;; <span class=\"comment\">//用于检查FormData和fileAPI的兼容性</span></span><br><span class=\"line\">  feature.fileapi = (<span class=\"built_in\">window</span>.File &amp;&amp; <span class=\"built_in\">window</span>.FileReader &amp;&amp; <span class=\"built_in\">window</span>.FileList &amp;&amp; <span class=\"built_in\">window</span>.Blob);</span><br><span class=\"line\">  feature.formdata = <span class=\"built_in\">window</span>.FormData !== <span class=\"literal\">undefined</span>;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> fileAPI = feature.fileapi &amp;&amp; feature.formdata,</span><br><span class=\"line\">    formData,</span><br><span class=\"line\">    xhr = <span class=\"built_in\">window</span>.XMLHttpRequest ? <span class=\"keyword\">new</span> XMLHttpRequest() : <span class=\"keyword\">new</span> ActiveXObject(<span class=\"string\">'Microsoft.XMLHTTP'</span>),</span><br><span class=\"line\">    AsyncForm = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">params</span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (fileAPI) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> otherparams = params.other, <span class=\"comment\">//其他需要发送的参数&#123;键：值&#125;</span></span><br><span class=\"line\">          callback = params.callback, <span class=\"comment\">//成功回调</span></span><br><span class=\"line\">          errback = params.errback, <span class=\"comment\">//失败回调</span></span><br><span class=\"line\">          files = (params.fileinput &amp;&amp; params.fileinput.files) ? params.fileinput.files : &#123;&#125;, <span class=\"comment\">//传入file input的dom对象</span></span><br><span class=\"line\">          onreadystatechange;</span><br><span class=\"line\">        <span class=\"comment\">//设置onreadystatechange</span></span><br><span class=\"line\">        onreadystatechange = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">func, _xhr, errfunc</span>) </span>&#123;</span><br><span class=\"line\">          _xhr.onreadystatechange = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (_xhr.readyState == <span class=\"number\">4</span>) &#123;</span><br><span class=\"line\">              <span class=\"keyword\">if</span> (_xhr.status == <span class=\"number\">200</span>) &#123;</span><br><span class=\"line\">                <span class=\"comment\">//判断若有成功回调，则执行</span></span><br><span class=\"line\">                <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> func == <span class=\"string\">'function'</span>) &#123;func(_xhr.responseText);&#125; </span><br><span class=\"line\">              &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                <span class=\"comment\">//判断若有失败回调，则执行</span></span><br><span class=\"line\">                <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> errfunc == <span class=\"string\">'function'</span>) &#123;errfunc();&#125;</span><br><span class=\"line\">              &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">        <span class=\"comment\">//新建formData对象</span></span><br><span class=\"line\">        formData = <span class=\"keyword\">new</span> FormData();</span><br><span class=\"line\">        <span class=\"comment\">//判断是否有图片对象，有则添加进队列</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (files) &#123;</span><br><span class=\"line\">          <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; files.length; i++) &#123;</span><br><span class=\"line\">            formData.append(<span class=\"string\">'file'</span>, files[i]);</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">//若有其他表单项，添加进队列</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (i <span class=\"keyword\">in</span> otherparams) &#123;</span><br><span class=\"line\">          formData.append(i, otherparams[i]);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">//设置POST方法，以及服务器地址</span></span><br><span class=\"line\">        xhr.open(<span class=\"string\">'post'</span>, params.url);</span><br><span class=\"line\">        onreadystatechange(callback, xhr, errback);</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        alert(<span class=\"string\">\"浏览器不支持FormData或fileAPI\"</span>);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">  AsyncForm.prototype = &#123;</span><br><span class=\"line\">    <span class=\"comment\">//提交表单事件</span></span><br><span class=\"line\">    submit: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">      xhr.send(formData);</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> AsyncForm;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure></p>\n<ul>\n<li>这里的fileinput参数传入file input的dom对象，其实可以直接传入file的，大家可以进行优化哦。</li>\n</ul>\n<h3 id=\"使用异步提交带图片表单的服务\"><a href=\"#使用异步提交带图片表单的服务\" class=\"headerlink\" title=\"使用异步提交带图片表单的服务\"></a>使用异步提交带图片表单的服务</h3><ul>\n<li>在控制器中需注入依赖AsyncForm</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//创建表单</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> asform = <span class=\"keyword\">new</span> AsyncForm(&#123;</span><br><span class=\"line\">  fileinput: $input, <span class=\"comment\">//传入file input的dom对象</span></span><br><span class=\"line\">  url: url, <span class=\"comment\">//服务器地址</span></span><br><span class=\"line\">  other: &#123; <span class=\"comment\">//其他需要发送的参数&#123;键：值&#125;</span></span><br><span class=\"line\">    name: value,</span><br><span class=\"line\">    name: value,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  callback: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">data</span>) </span>&#123;&#125;, <span class=\"comment\">//成功回调</span></span><br><span class=\"line\">  errback: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;&#125; <span class=\"comment\">//失败回调</span></span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"comment\">//提交表单</span></span><br><span class=\"line\">asform.submit();</span><br></pre></td></tr></table></figure>\n<h2 id=\"结束语\"><a href=\"#结束语\" class=\"headerlink\" title=\"结束语\"></a>结束语</h2><hr>\n<p>这里没有考虑不支持HTML5时候的处理办法，大家可以私底下试试哦，提示：）可使用iframe实现哦。<br><a href=\"https://github.com/godbasin/godbasin.github.io/tree/blog-codes/angular-notes/6-asyncchronous-submit-form\" target=\"_blank\" rel=\"external\">此处查看项目代码（仅包含app部分）</a></p>\n","excerpt":"<p>最近的一个项目使用AngularJS(v1.2.6)作为前端的框架，《Angular使用笔记》系列用于记录过程中的一些使用和解决方法。<br>本文记录编写异步提交带图片的表单服务的过程，同时简单介绍$q服务，以及HTML5 File API和FormData。<br>","more":"</p>\n<h2 id=\"有关angularJS-http和-q\"><a href=\"#有关angularJS-http和-q\" class=\"headerlink\" title=\"有关angularJS$http和$q\"></a>有关angularJS$http和$q</h2><hr>\n<h3 id=\"http\"><a href=\"#http\" class=\"headerlink\" title=\"$http\"></a>$http</h3><ul>\n<li>$http是一个用于读取web服务器上数据的服务</li>\n<li>$http.get()从web服务器上读取静态JSON数据</li>\n<li>$http的post使用会与ajax不一样哦，需要设置Content-Type值，具体可以查看<a href=\"https://godbasin.github.io/2016/07/08/angular-note-2-create-login/\">《Angular使用笔记2–创建登录页面》</a>里的解决办法</li>\n</ul>\n<h3 id=\"Promise对象\"><a href=\"#Promise对象\" class=\"headerlink\" title=\"Promise对象\"></a>Promise对象</h3><p>Javascript采用回调函数(callback)来处理异步编程。从同步编程到异步回调编程有一个适应的过程，但是如果出现多层回调嵌套，也就是我们常说的厄运的回调金字塔(Pyramid of Doom)。</p>\n<ul>\n<li>Promise是一种异步方式处理值（或者非值）的方法</li>\n<li>Promise允许以一种同步的方式编写异步代码</li>\n<li>代表了一个函数最终可能的返回值或者抛出的异常</li>\n<li>Promises/A规范<ul>\n<li>promise有三种状态：未完成(unfulfilled)，完成(fulfilled) 和失败(failed)</li>\n<li>promise的状态只能由未完成转换成完成，或者未完成转换成失败</li>\n<li>promise的状态转换只发生一次</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"在AngularJS中使用Promise-q\"><a href=\"#在AngularJS中使用Promise-q\" class=\"headerlink\" title=\"在AngularJS中使用Promise: $q\"></a>在AngularJS中使用Promise: $q</h3><p>$q是Angular的一种内置服务，它可以使你异步地执行函数，并且当函数执行完成时它允许你使用函数的返回值（或异常）</p>\n<ul>\n<li><p>$q常用的几个方法</p>\n<ul>\n<li>defer() 创建一个deferred对象，这个对象可以执行几个常用的方法，比如resolve,reject,notify等</li>\n<li>all() 传入Promise的数组，批量执行，返回一个promise对象</li>\n<li>when() 传入一个不确定的参数，如果符合Promise标准，就返回一个promise对象</li>\n</ul>\n</li>\n<li><p>defer()方法</p>\n<ul>\n<li>在$q中，可以使用resolve方法，变成完成状态；使用reject方法，变成拒绝状态</li>\n<li>defer()用于创建一个deferred对象，defer.promise用于返回一个promise对象，来定义then方法</li>\n<li>then中有三个参数，分别是成功回调、失败回调、状态变更回调</li>\n</ul>\n</li>\n<li><p>all()方法</p>\n<ul>\n<li>可以把多个primise的数组合并成一个</li>\n<li>当所有的promise执行成功后，会执行后面的回调</li>\n</ul>\n</li>\n<li><p>when()方法</p>\n<ul>\n<li>可以传入一个参数，这个参数可能是一个值，可能是一个符合promise标准的外部对象</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"编写一个集成-q服务\"><a href=\"#编写一个集成-q服务\" class=\"headerlink\" title=\"编写一个集成$q服务\"></a>编写一个集成$q服务</h3><p>这里我们将单个$q服务和多个$q服务（all()方法）集成成一个服务，返回Promise</p>\n<ul>\n<li>query方法<ul>\n<li>query方法返回一个对象，对象包括单个$http请求的Promise以及取消请求的方法</li>\n<li>multiquery方法返回多个$http请求的promise</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">app.factory(<span class=\"string\">'qService'</span>, [<span class=\"string\">'$http'</span>, <span class=\"string\">'$q'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">$http, $q</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">    query: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">param</span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">var</span> deferred = $q.defer(), <span class=\"comment\">//声明承诺</span></span><br><span class=\"line\">        cancel = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">reason</span>) </span>&#123; <span class=\"comment\">//取消promise事件</span></span><br><span class=\"line\">          deferred.reject(reason);</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">      $http(param).</span><br><span class=\"line\">      success(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">data</span>) </span>&#123;</span><br><span class=\"line\">        deferred.resolve(data); <span class=\"comment\">//请求成功</span></span><br><span class=\"line\">      &#125;).</span><br><span class=\"line\">      error(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">data</span>) </span>&#123;</span><br><span class=\"line\">        deferred.reject(data); <span class=\"comment\">//请求失败</span></span><br><span class=\"line\">      &#125;);</span><br><span class=\"line\">      <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">        promise: deferred.promise, <span class=\"comment\">// 返回承诺</span></span><br><span class=\"line\">        cancel: cancel <span class=\"comment\">// 返回取消事件</span></span><br><span class=\"line\">      &#125;;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    multiquery: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">params</span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">var</span> promises = [];</span><br><span class=\"line\">      <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i <span class=\"keyword\">in</span> params) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> promise = $http(params[i]); <span class=\"comment\">//返回$http服务</span></span><br><span class=\"line\">        promises.push(promise); <span class=\"comment\">//将$http服务添加进队列</span></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> $q.all(promises); <span class=\"comment\">//返回Promise承诺</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">&#125;])</span><br></pre></td></tr></table></figure>\n<p>注意：</p>\n<ul>\n<li>这里取消promise的事件只适合GET请求，若在POST请求上请求可能会导致不可预测的错误哦</li>\n<li>多个http服务的请求的错误回调本骚年还没想到解决办法，请小伙伴们多多赐教</li>\n</ul>\n<h3 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h3><ul>\n<li><a href=\"http://www.cnblogs.com/xing901022/p/4928147.html\">《AngularJS 中的Promise — $q服务详解》</a></li>\n<li><a href=\"https://blog.coding.net/blog/how-do-promises-work\">《理解 Promise 的工作原理》</a></li>\n</ul>\n<h2 id=\"异步提交带图片的表单\"><a href=\"#异步提交带图片的表单\" class=\"headerlink\" title=\"异步提交带图片的表单\"></a>异步提交带图片的表单</h2><hr>\n<p>在Angular中要实现异步提交图片，可以使用组件或者利用HTML5属性formdata和fileapi自己实现图片的提交哦。</p>\n<ul>\n<li>Angular的组件或者服务本骚年木有找到…</li>\n<li>既然已经使用了jQuery，推荐一个异步提交表单的插件jQuery.form</li>\n</ul>\n<h3 id=\"XMLHttpRequest-Level-2\"><a href=\"#XMLHttpRequest-Level-2\" class=\"headerlink\" title=\"XMLHttpRequest Level 2\"></a>XMLHttpRequest Level 2</h3><ul>\n<li>XMLHttpRequest是一个浏览器接口，使得Javascript可以进行HTTP(S)通信</li>\n<li>新版本的XMLHttpRequest对象(XMLHttpRequest Level 2)功能<ul>\n<li>1.可以设置HTTP请求的时限</li>\n<li>2.可以使用FormData对象管理表单数据</li>\n<li>3.可以上传文件</li>\n<li>4.可以请求不同域名下的数据（跨域资源共享，Cross-origin resource sharing，简称CORS）</li>\n<li>5.可以获取服务器端的二进制数据</li>\n<li>6.可以获得数据传输的进度信息</li>\n</ul>\n</li>\n</ul>\n<p>这里主要使用FromData，具体其他请查看<a href=\"http://www.cnblogs.com/heyuquan/archive/2013/05/13/3076465.html\">《触碰jQuery：AJAX异步详解》</a></p>\n<h3 id=\"FormData对象\"><a href=\"#FormData对象\" class=\"headerlink\" title=\"FormData对象\"></a>FormData对象</h3><p>HTML5新增了一个FormData对象，可以模拟表单<br>使用方法如下：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">window</span>.FormData <span class=\"comment\">//检测兼容性</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> formData = <span class=\"keyword\">new</span> FormData(); <span class=\"comment\">//新建FormData对象</span></span><br><span class=\"line\">formData.append(name, value); <span class=\"comment\">//添加表单项</span></span><br><span class=\"line\">xhr.send(formData); <span class=\"comment\">//发送FormData对象</span></span><br><span class=\"line\"><span class=\"comment\">//以下方法可直接获取网页表单的值</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> form = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'form'</span>); <span class=\"comment\">//获取form对象</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> formData = <span class=\"keyword\">new</span> FormData(form); <span class=\"comment\">//生成FormData对象</span></span><br><span class=\"line\">formData.append(name, value); <span class=\"comment\">// 添加表单项</span></span><br><span class=\"line\">xhr.open(<span class=\"string\">'POST'</span>, form.action);</span><br><span class=\"line\">xhr.send(formData);<span class=\"comment\">//发送FormData对象</span></span><br></pre></td></tr></table></figure></p>\n<h3 id=\"File-API\"><a href=\"#File-API\" class=\"headerlink\" title=\"File API\"></a>File API</h3><p>HTML5提供了File API，允许js读取本地文件。主要用于本地预览图片。</p>\n<ul>\n<li>FileList接口: 可以用来代表一组文件的JS对象，比如用户通过input[type=”file”]元素选中的本地文件列表</li>\n<li>Blob接口: 用来代表一段二进制数据，并且允许我们通过JS对其数据以字节为单位进行“切割”</li>\n<li>File接口: 用来代步一个文件，是从Blob接口继承而来的，并在此基础上增加了诸如文件名、MIME类型之类的特性</li>\n<li>FileReader接口: 提供读取文件的方法和事件</li>\n<li>检查File API兼容性： window.File&amp;&amp;window.FileReader&amp;&amp;window.FileList&amp;&amp;window.Blob</li>\n</ul>\n<p>其他方法可参考<a href=\"http://bulaoge.net/topic.blg?dmn=g3g4&amp;tid=2344378#Content\">《HTML 5中的文件处理之FileAPI》</a></p>\n<h3 id=\"编写异步提交带图片表单的服务\"><a href=\"#编写异步提交带图片表单的服务\" class=\"headerlink\" title=\"编写异步提交带图片表单的服务\"></a>编写异步提交带图片表单的服务</h3><p>现在我们利用FormData和FileAPI，可以开始编写异步提交带图片表单的服务了。<br>添加工厂服务，代码如下：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* params:</span><br><span class=\"line\"> * &#123;</span><br><span class=\"line\"> * \tfileinput: 传入file input的dom对象,</span><br><span class=\"line\"> * \turl: 服务器地址,</span><br><span class=\"line\"> * \tother: 其他需要发送的参数&#123;键：值&#125;</span><br><span class=\"line\"> *  callback: 成功回调</span><br><span class=\"line\"> *  errback: 失败回调</span><br><span class=\"line\"> * &#125;</span><br><span class=\"line\"> */</span></span><br><span class=\"line\">.factory(<span class=\"string\">'AsyncForm'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> feature = &#123;&#125;; <span class=\"comment\">//用于检查FormData和fileAPI的兼容性</span></span><br><span class=\"line\">  feature.fileapi = (<span class=\"built_in\">window</span>.File &amp;&amp; <span class=\"built_in\">window</span>.FileReader &amp;&amp; <span class=\"built_in\">window</span>.FileList &amp;&amp; <span class=\"built_in\">window</span>.Blob);</span><br><span class=\"line\">  feature.formdata = <span class=\"built_in\">window</span>.FormData !== <span class=\"literal\">undefined</span>;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> fileAPI = feature.fileapi &amp;&amp; feature.formdata,</span><br><span class=\"line\">    formData,</span><br><span class=\"line\">    xhr = <span class=\"built_in\">window</span>.XMLHttpRequest ? <span class=\"keyword\">new</span> XMLHttpRequest() : <span class=\"keyword\">new</span> ActiveXObject(<span class=\"string\">'Microsoft.XMLHTTP'</span>),</span><br><span class=\"line\">    AsyncForm = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">params</span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (fileAPI) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> otherparams = params.other, <span class=\"comment\">//其他需要发送的参数&#123;键：值&#125;</span></span><br><span class=\"line\">          callback = params.callback, <span class=\"comment\">//成功回调</span></span><br><span class=\"line\">          errback = params.errback, <span class=\"comment\">//失败回调</span></span><br><span class=\"line\">          files = (params.fileinput &amp;&amp; params.fileinput.files) ? params.fileinput.files : &#123;&#125;, <span class=\"comment\">//传入file input的dom对象</span></span><br><span class=\"line\">          onreadystatechange;</span><br><span class=\"line\">        <span class=\"comment\">//设置onreadystatechange</span></span><br><span class=\"line\">        onreadystatechange = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">func, _xhr, errfunc</span>) </span>&#123;</span><br><span class=\"line\">          _xhr.onreadystatechange = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (_xhr.readyState == <span class=\"number\">4</span>) &#123;</span><br><span class=\"line\">              <span class=\"keyword\">if</span> (_xhr.status == <span class=\"number\">200</span>) &#123;</span><br><span class=\"line\">                <span class=\"comment\">//判断若有成功回调，则执行</span></span><br><span class=\"line\">                <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> func == <span class=\"string\">'function'</span>) &#123;func(_xhr.responseText);&#125; </span><br><span class=\"line\">              &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                <span class=\"comment\">//判断若有失败回调，则执行</span></span><br><span class=\"line\">                <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> errfunc == <span class=\"string\">'function'</span>) &#123;errfunc();&#125;</span><br><span class=\"line\">              &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">        <span class=\"comment\">//新建formData对象</span></span><br><span class=\"line\">        formData = <span class=\"keyword\">new</span> FormData();</span><br><span class=\"line\">        <span class=\"comment\">//判断是否有图片对象，有则添加进队列</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (files) &#123;</span><br><span class=\"line\">          <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; files.length; i++) &#123;</span><br><span class=\"line\">            formData.append(<span class=\"string\">'file'</span>, files[i]);</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">//若有其他表单项，添加进队列</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (i <span class=\"keyword\">in</span> otherparams) &#123;</span><br><span class=\"line\">          formData.append(i, otherparams[i]);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">//设置POST方法，以及服务器地址</span></span><br><span class=\"line\">        xhr.open(<span class=\"string\">'post'</span>, params.url);</span><br><span class=\"line\">        onreadystatechange(callback, xhr, errback);</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        alert(<span class=\"string\">\"浏览器不支持FormData或fileAPI\"</span>);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">  AsyncForm.prototype = &#123;</span><br><span class=\"line\">    <span class=\"comment\">//提交表单事件</span></span><br><span class=\"line\">    submit: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">      xhr.send(formData);</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> AsyncForm;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure></p>\n<ul>\n<li>这里的fileinput参数传入file input的dom对象，其实可以直接传入file的，大家可以进行优化哦。</li>\n</ul>\n<h3 id=\"使用异步提交带图片表单的服务\"><a href=\"#使用异步提交带图片表单的服务\" class=\"headerlink\" title=\"使用异步提交带图片表单的服务\"></a>使用异步提交带图片表单的服务</h3><ul>\n<li>在控制器中需注入依赖AsyncForm</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//创建表单</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> asform = <span class=\"keyword\">new</span> AsyncForm(&#123;</span><br><span class=\"line\">  fileinput: $input, <span class=\"comment\">//传入file input的dom对象</span></span><br><span class=\"line\">  url: url, <span class=\"comment\">//服务器地址</span></span><br><span class=\"line\">  other: &#123; <span class=\"comment\">//其他需要发送的参数&#123;键：值&#125;</span></span><br><span class=\"line\">    name: value,</span><br><span class=\"line\">    name: value,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  callback: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">data</span>) </span>&#123;&#125;, <span class=\"comment\">//成功回调</span></span><br><span class=\"line\">  errback: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;&#125; <span class=\"comment\">//失败回调</span></span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"comment\">//提交表单</span></span><br><span class=\"line\">asform.submit();</span><br></pre></td></tr></table></figure>\n<h2 id=\"结束语\"><a href=\"#结束语\" class=\"headerlink\" title=\"结束语\"></a>结束语</h2><hr>\n<p>这里没有考虑不支持HTML5时候的处理办法，大家可以私底下试试哦，提示：）可使用iframe实现哦。<br><a href=\"https://github.com/godbasin/godbasin.github.io/tree/blog-codes/angular-notes/6-asyncchronous-submit-form\">此处查看项目代码（仅包含app部分）</a></p>"},{"title":"Angular使用笔记2--创建登录页面","date":"2016-07-08T14:45:32.000Z","_content":"最近的一个项目使用AngularJS(v1.2.6)作为前端的框架，《Angular使用笔记》系列用于记录过程中的一些使用和解决方法。\n本文记录搭建登录页面的过程。\n<!--more-->\n## 根据产品规划划分模块\n-----\n### 主要页面逻辑\n在这里，本骚年就建一个比较简单的项目。\n- 我们的主要页面逻辑如下：\n  - 1.登录页面，输入账号和密码即可\n  - 2.模块页面\n\n本项目主要用于展示Angular使用过程，故这里使用了Bootstrap简单构建项目。\n使用Bootatrap有个不好的地方就是需要引入jQuery(Angular中不建议使用jQuery，同时本人也有这样的洁癖)，而页面大小也增加了不少。\n\n### 创建登录页面\n- 首先我们在views文件夹内添加一个login.html\n\n``` html\n<div class=\"container\" id=\"login\">\n\t<!--ng-submit绑定登录事件-->\n\t<form id=\"login-form\" ng-submit=\"submit()\">\n\t\t<h3 class=\"text-center\">login</h3>\n\t\t<div class=\"form-group\">\n\t\t\t<label>account</label>\n\t\t\t<!--ng-model双向绑定账号-->\n\t\t\t<input type=\"text\" class=\"form-control\" placeholder=\"Account\" ng-model=\"username\" required />\n\t\t</div>\n\t\t<div class=\"form-group\">\n\t\t\t<label>Password</label>\n\t\t\t<!--ng-model双向绑定密码-->\n\t\t\t<input type=\"password\" class=\"form-control\" placeholder=\"Password\" ng-model=\"password\" required>\n\t\t</div>\n\t\t<button type=\"submit\"  class=\"btn btn-default\">登录</button>\n\t</form>\n</div>\n```\n\n### 添加路由\n- 设置路由\n在scripts文件夹内打开app.js，设置如下路由\n``` javascript\n.config(function($routeProvider) {\n\t$routeProvider\n\t//login路由\n\t\t.when('/login', {\n\t\t\ttemplateUrl: 'views/login.html', //login的html页面\n\t\t\tcontroller: 'LoginCtrl' //login的控制器，稍后提到\n\t\t})\n\t\t//页面重定向\n\t\t.otherwise({\n\t\t\tredirectTo: '/login'\n\t\t});\n});\n```\n\n- 路由功能的实现原理\n这里补充一下一般路由功能的实现原理\n  - 1.通过hash（location.href.hash）获取位置\n  - 2.设置全局拦截器\n    - 匹配路径：通配/string/:number\n    - 判断后加载对应模块\n  - 3.通过window.onhashchange监听路由变化\n\n### 添加登录页面的控制器\n- 在scripts文件夹中的controller目录下增加loginCtrl.js\n- 在index中引入该js文件\n\n``` javascript\napp.controller('LoginCtrl', ['$scope', '$http', function($scope, $http) {\n\t//定义submit事件，对应html中ng-submit\n\t$scope.submit = function() {\n\t\t//http服务POST账户密码\n\t\t$http({\n\t\t\t\tmethod: 'POST',\n\t\t\t\turl: 'your url',\n\t\t\t\tparams: {\n\t\t\t\t\t\"username\": $scope.username, //ng-model双向绑定的用户名\n\t\t\t\t\t\"password\": $scope.password //ng-model双向绑定的密码\n\t\t\t\t}, \n\t\t\t})\n\t\t\t.success(function(data) {\t\t\t\t\n\t\t\t\tif (data.result === 'success') {\t\t\t\n\t\t\t\t\twindow.location.href = 'index.html#/index'; //判断登录成功，跳转\n\t\t\t\t} else {\t\t\t\t\t\n\t\t\t\t\talert(\"error\"); //登录失败提示\n\t\t\t\t}\t\t\t\t\t\n\t\t\t})\n\t\t\t//连接服务失败\n\t\t\t.error(function() {\n\t\t\t\talert(\"connecting fail\");\n\t\t\t});\n\t};\n}]);\n```\n\n### 不需要在html页面加入ng-controller\n由于路由中已经引用了controller，故在路由跳转的同时已经启用了对应的控制器，若在view中再次引入会导致控制器加载两遍的哦\n\n## 保存用户信息\n-----\n### 登录成功返回用户信息\n- 通过登录成功服务端返回的用户信息，在需要用的时候取出\n- 可通过该项检查用户是否登录，或者根据用户权限加载不同的视图\n- 可通过sessionstorage、$rootscope、angular.service等方式保存，后续章节会提到\n\n## $http服务后台获取不到值\n-----\n通常从jQuery的ajax转用angular的$http服务的时候，会遇到后台获取不到值的情况，这是因为\n### post请求的请求体的两种格式\n- 1.字符串: 'name=name&password=password'\n这种格式的请求体,需要配置请求头 'Content-Type':'application/x-www-form-urlencoded'\n- 2.json: {name:'name',password:'password'}\n这种格式的请求体,需要配置请求头 'Content-Type':'application/json;charset=UTF-8'\n\n### ajax和$http区别\n- 在jquery中，官方文档解释contentType默认是 application/x-www-form-urlencoded; charset=UTF-8，即第一种\n- 在angular的$http中，默认是第二种，所以使用$http(config)提交请求体，config中的data项必须是json格式的值。\n\n### 解决办法\n- 此时我们可以配置$http(config)中的headers中的Content-Type值为'application/x-www-form-urlencoded'，然后就能按照ajax的用法尽情使用$http服务啦\n\n``` javascript\nvar app = angular.module('angularTestApp', [\n\t'ngCookies',\n\t'ngResource',\n\t'ngSanitize',\n\t'ngRoute',\n], function($httpProvider) {\n\t// Use x-www-form-urlencoded Content-Type\n\t$httpProvider.defaults.headers.post['Content-Type'] = 'application/x-www-form-urlencoded;charset=utf-8';\n\tvar param = function(obj) {\n\t\tvar query = '',\n\t\t\tname, value, fullSubName, subName, subValue, innerObj, i;\n\t\tfor (name in obj) {\n\t\t\tvalue = obj[name];\n\n\t\t\tif (value instanceof Array) {\n\t\t\t\tfor (i = 0; i < value.length; ++i) {\n\t\t\t\t\tsubValue = value[i];\n\t\t\t\t\t/*fullSubName = name + '[' + i + ']';*/\n\t\t\t\t\tfullSubName = name;\n\t\t\t\t\tinnerObj = {};\n\t\t\t\t\tinnerObj[fullSubName] = subValue;\n\t\t\t\t\tquery += param(innerObj) + '&';\n\t\t\t\t}\n\t\t\t} else if (value instanceof Object) {\n\t\t\t\tfor (subName in value) {\n\t\t\t\t\tsubValue = value[subName];\n\t\t\t\t\tfullSubName = name /* + '[' + subName + ']'*/ ;\n\t\t\t\t\tinnerObj = {};\n\t\t\t\t\tinnerObj[fullSubName] = subValue;\n\t\t\t\t\tquery += param(innerObj) + '&';\n\t\t\t\t}\n\t\t\t} else if (value !== undefined && value !== null)\n\t\t\t\tquery += encodeURIComponent(name) + '=' + encodeURIComponent(value) + '&';\n\t\t}\n\t\treturn query.length ? query.substr(0, query.length - 1) : query;\n\t};\n\t// Override $http service's default transformRequest\n\t$httpProvider.defaults.transformRequest = [function(data) {\n\t\treturn angular.isObject(data) && String(data) !== '[object File]' ? param(data) : data;\n\t}];\n});\n```\n\n### 参考\n[《http请求头中的Content-Type属性在angular 和 node中的用法》](http://www.cnblogs.com/liulangmao/p/3889568.html)\n[《jquery和angular的ajax请求的区别》](https://segmentfault.com/a/1190000000396306)\n[《Make AngularJS $http service behave like jQuery.ajax()》](http://victorblog.com/2012/12/20/make-angularjs-http-service-behave-like-jquery-ajax/)\n\n## 结束语\n-----\n本骚年也是AngularJS的初体验者，如果小伙伴们有好的资源请千万千万要分享呀。\n[此处查看项目代码（仅包含app部分）](https://github.com/godbasin/godbasin.github.io/tree/blog-codes/angular-notes/2-create-login)\n[此处查看页面效果](http://o9grhhyar.bkt.clouddn.com/2-create-login/index.html#/)\n","source":"_posts/angular-note-2-create-login.md","raw":"---\ntitle: Angular使用笔记2--创建登录页面\ndate: 2016-07-08 22:45:32\ncategories: angular混搭\ntags: 笔记\n---\n最近的一个项目使用AngularJS(v1.2.6)作为前端的框架，《Angular使用笔记》系列用于记录过程中的一些使用和解决方法。\n本文记录搭建登录页面的过程。\n<!--more-->\n## 根据产品规划划分模块\n-----\n### 主要页面逻辑\n在这里，本骚年就建一个比较简单的项目。\n- 我们的主要页面逻辑如下：\n  - 1.登录页面，输入账号和密码即可\n  - 2.模块页面\n\n本项目主要用于展示Angular使用过程，故这里使用了Bootstrap简单构建项目。\n使用Bootatrap有个不好的地方就是需要引入jQuery(Angular中不建议使用jQuery，同时本人也有这样的洁癖)，而页面大小也增加了不少。\n\n### 创建登录页面\n- 首先我们在views文件夹内添加一个login.html\n\n``` html\n<div class=\"container\" id=\"login\">\n\t<!--ng-submit绑定登录事件-->\n\t<form id=\"login-form\" ng-submit=\"submit()\">\n\t\t<h3 class=\"text-center\">login</h3>\n\t\t<div class=\"form-group\">\n\t\t\t<label>account</label>\n\t\t\t<!--ng-model双向绑定账号-->\n\t\t\t<input type=\"text\" class=\"form-control\" placeholder=\"Account\" ng-model=\"username\" required />\n\t\t</div>\n\t\t<div class=\"form-group\">\n\t\t\t<label>Password</label>\n\t\t\t<!--ng-model双向绑定密码-->\n\t\t\t<input type=\"password\" class=\"form-control\" placeholder=\"Password\" ng-model=\"password\" required>\n\t\t</div>\n\t\t<button type=\"submit\"  class=\"btn btn-default\">登录</button>\n\t</form>\n</div>\n```\n\n### 添加路由\n- 设置路由\n在scripts文件夹内打开app.js，设置如下路由\n``` javascript\n.config(function($routeProvider) {\n\t$routeProvider\n\t//login路由\n\t\t.when('/login', {\n\t\t\ttemplateUrl: 'views/login.html', //login的html页面\n\t\t\tcontroller: 'LoginCtrl' //login的控制器，稍后提到\n\t\t})\n\t\t//页面重定向\n\t\t.otherwise({\n\t\t\tredirectTo: '/login'\n\t\t});\n});\n```\n\n- 路由功能的实现原理\n这里补充一下一般路由功能的实现原理\n  - 1.通过hash（location.href.hash）获取位置\n  - 2.设置全局拦截器\n    - 匹配路径：通配/string/:number\n    - 判断后加载对应模块\n  - 3.通过window.onhashchange监听路由变化\n\n### 添加登录页面的控制器\n- 在scripts文件夹中的controller目录下增加loginCtrl.js\n- 在index中引入该js文件\n\n``` javascript\napp.controller('LoginCtrl', ['$scope', '$http', function($scope, $http) {\n\t//定义submit事件，对应html中ng-submit\n\t$scope.submit = function() {\n\t\t//http服务POST账户密码\n\t\t$http({\n\t\t\t\tmethod: 'POST',\n\t\t\t\turl: 'your url',\n\t\t\t\tparams: {\n\t\t\t\t\t\"username\": $scope.username, //ng-model双向绑定的用户名\n\t\t\t\t\t\"password\": $scope.password //ng-model双向绑定的密码\n\t\t\t\t}, \n\t\t\t})\n\t\t\t.success(function(data) {\t\t\t\t\n\t\t\t\tif (data.result === 'success') {\t\t\t\n\t\t\t\t\twindow.location.href = 'index.html#/index'; //判断登录成功，跳转\n\t\t\t\t} else {\t\t\t\t\t\n\t\t\t\t\talert(\"error\"); //登录失败提示\n\t\t\t\t}\t\t\t\t\t\n\t\t\t})\n\t\t\t//连接服务失败\n\t\t\t.error(function() {\n\t\t\t\talert(\"connecting fail\");\n\t\t\t});\n\t};\n}]);\n```\n\n### 不需要在html页面加入ng-controller\n由于路由中已经引用了controller，故在路由跳转的同时已经启用了对应的控制器，若在view中再次引入会导致控制器加载两遍的哦\n\n## 保存用户信息\n-----\n### 登录成功返回用户信息\n- 通过登录成功服务端返回的用户信息，在需要用的时候取出\n- 可通过该项检查用户是否登录，或者根据用户权限加载不同的视图\n- 可通过sessionstorage、$rootscope、angular.service等方式保存，后续章节会提到\n\n## $http服务后台获取不到值\n-----\n通常从jQuery的ajax转用angular的$http服务的时候，会遇到后台获取不到值的情况，这是因为\n### post请求的请求体的两种格式\n- 1.字符串: 'name=name&password=password'\n这种格式的请求体,需要配置请求头 'Content-Type':'application/x-www-form-urlencoded'\n- 2.json: {name:'name',password:'password'}\n这种格式的请求体,需要配置请求头 'Content-Type':'application/json;charset=UTF-8'\n\n### ajax和$http区别\n- 在jquery中，官方文档解释contentType默认是 application/x-www-form-urlencoded; charset=UTF-8，即第一种\n- 在angular的$http中，默认是第二种，所以使用$http(config)提交请求体，config中的data项必须是json格式的值。\n\n### 解决办法\n- 此时我们可以配置$http(config)中的headers中的Content-Type值为'application/x-www-form-urlencoded'，然后就能按照ajax的用法尽情使用$http服务啦\n\n``` javascript\nvar app = angular.module('angularTestApp', [\n\t'ngCookies',\n\t'ngResource',\n\t'ngSanitize',\n\t'ngRoute',\n], function($httpProvider) {\n\t// Use x-www-form-urlencoded Content-Type\n\t$httpProvider.defaults.headers.post['Content-Type'] = 'application/x-www-form-urlencoded;charset=utf-8';\n\tvar param = function(obj) {\n\t\tvar query = '',\n\t\t\tname, value, fullSubName, subName, subValue, innerObj, i;\n\t\tfor (name in obj) {\n\t\t\tvalue = obj[name];\n\n\t\t\tif (value instanceof Array) {\n\t\t\t\tfor (i = 0; i < value.length; ++i) {\n\t\t\t\t\tsubValue = value[i];\n\t\t\t\t\t/*fullSubName = name + '[' + i + ']';*/\n\t\t\t\t\tfullSubName = name;\n\t\t\t\t\tinnerObj = {};\n\t\t\t\t\tinnerObj[fullSubName] = subValue;\n\t\t\t\t\tquery += param(innerObj) + '&';\n\t\t\t\t}\n\t\t\t} else if (value instanceof Object) {\n\t\t\t\tfor (subName in value) {\n\t\t\t\t\tsubValue = value[subName];\n\t\t\t\t\tfullSubName = name /* + '[' + subName + ']'*/ ;\n\t\t\t\t\tinnerObj = {};\n\t\t\t\t\tinnerObj[fullSubName] = subValue;\n\t\t\t\t\tquery += param(innerObj) + '&';\n\t\t\t\t}\n\t\t\t} else if (value !== undefined && value !== null)\n\t\t\t\tquery += encodeURIComponent(name) + '=' + encodeURIComponent(value) + '&';\n\t\t}\n\t\treturn query.length ? query.substr(0, query.length - 1) : query;\n\t};\n\t// Override $http service's default transformRequest\n\t$httpProvider.defaults.transformRequest = [function(data) {\n\t\treturn angular.isObject(data) && String(data) !== '[object File]' ? param(data) : data;\n\t}];\n});\n```\n\n### 参考\n[《http请求头中的Content-Type属性在angular 和 node中的用法》](http://www.cnblogs.com/liulangmao/p/3889568.html)\n[《jquery和angular的ajax请求的区别》](https://segmentfault.com/a/1190000000396306)\n[《Make AngularJS $http service behave like jQuery.ajax()》](http://victorblog.com/2012/12/20/make-angularjs-http-service-behave-like-jquery-ajax/)\n\n## 结束语\n-----\n本骚年也是AngularJS的初体验者，如果小伙伴们有好的资源请千万千万要分享呀。\n[此处查看项目代码（仅包含app部分）](https://github.com/godbasin/godbasin.github.io/tree/blog-codes/angular-notes/2-create-login)\n[此处查看页面效果](http://o9grhhyar.bkt.clouddn.com/2-create-login/index.html#/)\n","slug":"angular-note-2-create-login","published":1,"updated":"2016-07-29T13:26:27.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cirrwvo2i000d38l5tdmgq7ih","content":"<p>最近的一个项目使用AngularJS(v1.2.6)作为前端的框架，《Angular使用笔记》系列用于记录过程中的一些使用和解决方法。<br>本文记录搭建登录页面的过程。<br><a id=\"more\"></a></p>\n<h2 id=\"根据产品规划划分模块\"><a href=\"#根据产品规划划分模块\" class=\"headerlink\" title=\"根据产品规划划分模块\"></a>根据产品规划划分模块</h2><hr>\n<h3 id=\"主要页面逻辑\"><a href=\"#主要页面逻辑\" class=\"headerlink\" title=\"主要页面逻辑\"></a>主要页面逻辑</h3><p>在这里，本骚年就建一个比较简单的项目。</p>\n<ul>\n<li>我们的主要页面逻辑如下：<ul>\n<li>1.登录页面，输入账号和密码即可</li>\n<li>2.模块页面</li>\n</ul>\n</li>\n</ul>\n<p>本项目主要用于展示Angular使用过程，故这里使用了Bootstrap简单构建项目。<br>使用Bootatrap有个不好的地方就是需要引入jQuery(Angular中不建议使用jQuery，同时本人也有这样的洁癖)，而页面大小也增加了不少。</p>\n<h3 id=\"创建登录页面\"><a href=\"#创建登录页面\" class=\"headerlink\" title=\"创建登录页面\"></a>创建登录页面</h3><ul>\n<li>首先我们在views文件夹内添加一个login.html</li>\n</ul>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"container\"</span> <span class=\"attr\">id</span>=<span class=\"string\">\"login\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"comment\">&lt;!--ng-submit绑定登录事件--&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">form</span> <span class=\"attr\">id</span>=<span class=\"string\">\"login-form\"</span> <span class=\"attr\">ng-submit</span>=<span class=\"string\">\"submit()\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">h3</span> <span class=\"attr\">class</span>=<span class=\"string\">\"text-center\"</span>&gt;</span>login<span class=\"tag\">&lt;/<span class=\"name\">h3</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"form-group\"</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">label</span>&gt;</span>account<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></span><br><span class=\"line\">      <span class=\"comment\">&lt;!--ng-model双向绑定账号--&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"form-control\"</span> <span class=\"attr\">placeholder</span>=<span class=\"string\">\"Account\"</span> <span class=\"attr\">ng-model</span>=<span class=\"string\">\"username\"</span> <span class=\"attr\">required</span> /&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"form-group\"</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">label</span>&gt;</span>Password<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></span><br><span class=\"line\">      <span class=\"comment\">&lt;!--ng-model双向绑定密码--&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"password\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"form-control\"</span> <span class=\"attr\">placeholder</span>=<span class=\"string\">\"Password\"</span> <span class=\"attr\">ng-model</span>=<span class=\"string\">\"password\"</span> <span class=\"attr\">required</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">type</span>=<span class=\"string\">\"submit\"</span>  <span class=\"attr\">class</span>=<span class=\"string\">\"btn btn-default\"</span>&gt;</span>登录<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">form</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"添加路由\"><a href=\"#添加路由\" class=\"headerlink\" title=\"添加路由\"></a>添加路由</h3><ul>\n<li><p>设置路由<br>在scripts文件夹内打开app.js，设置如下路由</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.config(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">$routeProvider</span>) </span>&#123;</span><br><span class=\"line\">  $routeProvider</span><br><span class=\"line\">  <span class=\"comment\">//login路由</span></span><br><span class=\"line\">    .when(<span class=\"string\">'/login'</span>, &#123;</span><br><span class=\"line\">      templateUrl: <span class=\"string\">'views/login.html'</span>, <span class=\"comment\">//login的html页面</span></span><br><span class=\"line\">      controller: <span class=\"string\">'LoginCtrl'</span> <span class=\"comment\">//login的控制器，稍后提到</span></span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    <span class=\"comment\">//页面重定向</span></span><br><span class=\"line\">    .otherwise(&#123;</span><br><span class=\"line\">      redirectTo: <span class=\"string\">'/login'</span></span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>路由功能的实现原理<br>这里补充一下一般路由功能的实现原理</p>\n<ul>\n<li>1.通过hash（location.href.hash）获取位置</li>\n<li>2.设置全局拦截器<ul>\n<li>匹配路径：通配/string/:number</li>\n<li>判断后加载对应模块</li>\n</ul>\n</li>\n<li>3.通过window.onhashchange监听路由变化</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"添加登录页面的控制器\"><a href=\"#添加登录页面的控制器\" class=\"headerlink\" title=\"添加登录页面的控制器\"></a>添加登录页面的控制器</h3><ul>\n<li>在scripts文件夹中的controller目录下增加loginCtrl.js</li>\n<li>在index中引入该js文件</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">app.controller(<span class=\"string\">'LoginCtrl'</span>, [<span class=\"string\">'$scope'</span>, <span class=\"string\">'$http'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">$scope, $http</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">//定义submit事件，对应html中ng-submit</span></span><br><span class=\"line\">  $scope.submit = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//http服务POST账户密码</span></span><br><span class=\"line\">    $http(&#123;</span><br><span class=\"line\">        method: <span class=\"string\">'POST'</span>,</span><br><span class=\"line\">        url: <span class=\"string\">'your url'</span>,</span><br><span class=\"line\">        params: &#123;</span><br><span class=\"line\">          <span class=\"string\">\"username\"</span>: $scope.username, <span class=\"comment\">//ng-model双向绑定的用户名</span></span><br><span class=\"line\">          <span class=\"string\">\"password\"</span>: $scope.password <span class=\"comment\">//ng-model双向绑定的密码</span></span><br><span class=\"line\">        &#125;, </span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\">      .success(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">data</span>) </span>&#123;\t\t\t\t</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (data.result === <span class=\"string\">'success'</span>) &#123;\t\t\t</span><br><span class=\"line\">          <span class=\"built_in\">window</span>.location.href = <span class=\"string\">'index.html#/index'</span>; <span class=\"comment\">//判断登录成功，跳转</span></span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;\t\t\t\t\t</span><br><span class=\"line\">          alert(<span class=\"string\">\"error\"</span>); <span class=\"comment\">//登录失败提示</span></span><br><span class=\"line\">        &#125;\t\t\t\t\t</span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\">      <span class=\"comment\">//连接服务失败</span></span><br><span class=\"line\">      .error(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        alert(<span class=\"string\">\"connecting fail\"</span>);</span><br><span class=\"line\">      &#125;);</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">&#125;]);</span><br></pre></td></tr></table></figure>\n<h3 id=\"不需要在html页面加入ng-controller\"><a href=\"#不需要在html页面加入ng-controller\" class=\"headerlink\" title=\"不需要在html页面加入ng-controller\"></a>不需要在html页面加入ng-controller</h3><p>由于路由中已经引用了controller，故在路由跳转的同时已经启用了对应的控制器，若在view中再次引入会导致控制器加载两遍的哦</p>\n<h2 id=\"保存用户信息\"><a href=\"#保存用户信息\" class=\"headerlink\" title=\"保存用户信息\"></a>保存用户信息</h2><hr>\n<h3 id=\"登录成功返回用户信息\"><a href=\"#登录成功返回用户信息\" class=\"headerlink\" title=\"登录成功返回用户信息\"></a>登录成功返回用户信息</h3><ul>\n<li>通过登录成功服务端返回的用户信息，在需要用的时候取出</li>\n<li>可通过该项检查用户是否登录，或者根据用户权限加载不同的视图</li>\n<li>可通过sessionstorage、$rootscope、angular.service等方式保存，后续章节会提到</li>\n</ul>\n<h2 id=\"http服务后台获取不到值\"><a href=\"#http服务后台获取不到值\" class=\"headerlink\" title=\"$http服务后台获取不到值\"></a>$http服务后台获取不到值</h2><hr>\n<p>通常从jQuery的ajax转用angular的$http服务的时候，会遇到后台获取不到值的情况，这是因为</p>\n<h3 id=\"post请求的请求体的两种格式\"><a href=\"#post请求的请求体的两种格式\" class=\"headerlink\" title=\"post请求的请求体的两种格式\"></a>post请求的请求体的两种格式</h3><ul>\n<li>1.字符串: ‘name=name&amp;password=password’<br>这种格式的请求体,需要配置请求头 ‘Content-Type’:’application/x-www-form-urlencoded’</li>\n<li>2.json: {name:’name’,password:’password’}<br>这种格式的请求体,需要配置请求头 ‘Content-Type’:’application/json;charset=UTF-8’</li>\n</ul>\n<h3 id=\"ajax和-http区别\"><a href=\"#ajax和-http区别\" class=\"headerlink\" title=\"ajax和$http区别\"></a>ajax和$http区别</h3><ul>\n<li>在jquery中，官方文档解释contentType默认是 application/x-www-form-urlencoded; charset=UTF-8，即第一种</li>\n<li>在angular的$http中，默认是第二种，所以使用$http(config)提交请求体，config中的data项必须是json格式的值。</li>\n</ul>\n<h3 id=\"解决办法\"><a href=\"#解决办法\" class=\"headerlink\" title=\"解决办法\"></a>解决办法</h3><ul>\n<li>此时我们可以配置$http(config)中的headers中的Content-Type值为’application/x-www-form-urlencoded’，然后就能按照ajax的用法尽情使用$http服务啦</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> app = angular.module(<span class=\"string\">'angularTestApp'</span>, [</span><br><span class=\"line\">  <span class=\"string\">'ngCookies'</span>,</span><br><span class=\"line\">  <span class=\"string\">'ngResource'</span>,</span><br><span class=\"line\">  <span class=\"string\">'ngSanitize'</span>,</span><br><span class=\"line\">  <span class=\"string\">'ngRoute'</span>,</span><br><span class=\"line\">], <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">$httpProvider</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// Use x-www-form-urlencoded Content-Type</span></span><br><span class=\"line\">  $httpProvider.defaults.headers.post[<span class=\"string\">'Content-Type'</span>] = <span class=\"string\">'application/x-www-form-urlencoded;charset=utf-8'</span>;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> param = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">obj</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> query = <span class=\"string\">''</span>,</span><br><span class=\"line\">      name, value, fullSubName, subName, subValue, innerObj, i;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (name <span class=\"keyword\">in</span> obj) &#123;</span><br><span class=\"line\">      value = obj[name];</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (value <span class=\"keyword\">instanceof</span> <span class=\"built_in\">Array</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (i = <span class=\"number\">0</span>; i &lt; value.length; ++i) &#123;</span><br><span class=\"line\">          subValue = value[i];</span><br><span class=\"line\">          <span class=\"comment\">/*fullSubName = name + '[' + i + ']';*/</span></span><br><span class=\"line\">          fullSubName = name;</span><br><span class=\"line\">          innerObj = &#123;&#125;;</span><br><span class=\"line\">          innerObj[fullSubName] = subValue;</span><br><span class=\"line\">          query += param(innerObj) + <span class=\"string\">'&amp;'</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (value <span class=\"keyword\">instanceof</span> <span class=\"built_in\">Object</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (subName <span class=\"keyword\">in</span> value) &#123;</span><br><span class=\"line\">          subValue = value[subName];</span><br><span class=\"line\">          fullSubName = name <span class=\"comment\">/* + '[' + subName + ']'*/</span> ;</span><br><span class=\"line\">          innerObj = &#123;&#125;;</span><br><span class=\"line\">          innerObj[fullSubName] = subValue;</span><br><span class=\"line\">          query += param(innerObj) + <span class=\"string\">'&amp;'</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (value !== <span class=\"literal\">undefined</span> &amp;&amp; value !== <span class=\"literal\">null</span>)</span><br><span class=\"line\">        query += <span class=\"built_in\">encodeURIComponent</span>(name) + <span class=\"string\">'='</span> + <span class=\"built_in\">encodeURIComponent</span>(value) + <span class=\"string\">'&amp;'</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> query.length ? query.substr(<span class=\"number\">0</span>, query.length - <span class=\"number\">1</span>) : query;</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">  <span class=\"comment\">// Override $http service's default transformRequest</span></span><br><span class=\"line\">  $httpProvider.defaults.transformRequest = [<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">data</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> angular.isObject(data) &amp;&amp; <span class=\"built_in\">String</span>(data) !== <span class=\"string\">'[object File]'</span> ? param(data) : data;</span><br><span class=\"line\">  &#125;];</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<h3 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h3><p><a href=\"http://www.cnblogs.com/liulangmao/p/3889568.html\" target=\"_blank\" rel=\"external\">《http请求头中的Content-Type属性在angular 和 node中的用法》</a><br><a href=\"https://segmentfault.com/a/1190000000396306\" target=\"_blank\" rel=\"external\">《jquery和angular的ajax请求的区别》</a><br><a href=\"http://victorblog.com/2012/12/20/make-angularjs-http-service-behave-like-jquery-ajax/\" target=\"_blank\" rel=\"external\">《Make AngularJS $http service behave like jQuery.ajax()》</a></p>\n<h2 id=\"结束语\"><a href=\"#结束语\" class=\"headerlink\" title=\"结束语\"></a>结束语</h2><hr>\n<p>本骚年也是AngularJS的初体验者，如果小伙伴们有好的资源请千万千万要分享呀。<br><a href=\"https://github.com/godbasin/godbasin.github.io/tree/blog-codes/angular-notes/2-create-login\" target=\"_blank\" rel=\"external\">此处查看项目代码（仅包含app部分）</a><br><a href=\"http://o9grhhyar.bkt.clouddn.com/2-create-login/index.html#/\" target=\"_blank\" rel=\"external\">此处查看页面效果</a></p>\n","excerpt":"<p>最近的一个项目使用AngularJS(v1.2.6)作为前端的框架，《Angular使用笔记》系列用于记录过程中的一些使用和解决方法。<br>本文记录搭建登录页面的过程。<br>","more":"</p>\n<h2 id=\"根据产品规划划分模块\"><a href=\"#根据产品规划划分模块\" class=\"headerlink\" title=\"根据产品规划划分模块\"></a>根据产品规划划分模块</h2><hr>\n<h3 id=\"主要页面逻辑\"><a href=\"#主要页面逻辑\" class=\"headerlink\" title=\"主要页面逻辑\"></a>主要页面逻辑</h3><p>在这里，本骚年就建一个比较简单的项目。</p>\n<ul>\n<li>我们的主要页面逻辑如下：<ul>\n<li>1.登录页面，输入账号和密码即可</li>\n<li>2.模块页面</li>\n</ul>\n</li>\n</ul>\n<p>本项目主要用于展示Angular使用过程，故这里使用了Bootstrap简单构建项目。<br>使用Bootatrap有个不好的地方就是需要引入jQuery(Angular中不建议使用jQuery，同时本人也有这样的洁癖)，而页面大小也增加了不少。</p>\n<h3 id=\"创建登录页面\"><a href=\"#创建登录页面\" class=\"headerlink\" title=\"创建登录页面\"></a>创建登录页面</h3><ul>\n<li>首先我们在views文件夹内添加一个login.html</li>\n</ul>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"container\"</span> <span class=\"attr\">id</span>=<span class=\"string\">\"login\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"comment\">&lt;!--ng-submit绑定登录事件--&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">form</span> <span class=\"attr\">id</span>=<span class=\"string\">\"login-form\"</span> <span class=\"attr\">ng-submit</span>=<span class=\"string\">\"submit()\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">h3</span> <span class=\"attr\">class</span>=<span class=\"string\">\"text-center\"</span>&gt;</span>login<span class=\"tag\">&lt;/<span class=\"name\">h3</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"form-group\"</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">label</span>&gt;</span>account<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></span><br><span class=\"line\">      <span class=\"comment\">&lt;!--ng-model双向绑定账号--&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"form-control\"</span> <span class=\"attr\">placeholder</span>=<span class=\"string\">\"Account\"</span> <span class=\"attr\">ng-model</span>=<span class=\"string\">\"username\"</span> <span class=\"attr\">required</span> /&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"form-group\"</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">label</span>&gt;</span>Password<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></span><br><span class=\"line\">      <span class=\"comment\">&lt;!--ng-model双向绑定密码--&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"password\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"form-control\"</span> <span class=\"attr\">placeholder</span>=<span class=\"string\">\"Password\"</span> <span class=\"attr\">ng-model</span>=<span class=\"string\">\"password\"</span> <span class=\"attr\">required</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">type</span>=<span class=\"string\">\"submit\"</span>  <span class=\"attr\">class</span>=<span class=\"string\">\"btn btn-default\"</span>&gt;</span>登录<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">form</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"添加路由\"><a href=\"#添加路由\" class=\"headerlink\" title=\"添加路由\"></a>添加路由</h3><ul>\n<li><p>设置路由<br>在scripts文件夹内打开app.js，设置如下路由</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.config(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">$routeProvider</span>) </span>&#123;</span><br><span class=\"line\">  $routeProvider</span><br><span class=\"line\">  <span class=\"comment\">//login路由</span></span><br><span class=\"line\">    .when(<span class=\"string\">'/login'</span>, &#123;</span><br><span class=\"line\">      templateUrl: <span class=\"string\">'views/login.html'</span>, <span class=\"comment\">//login的html页面</span></span><br><span class=\"line\">      controller: <span class=\"string\">'LoginCtrl'</span> <span class=\"comment\">//login的控制器，稍后提到</span></span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    <span class=\"comment\">//页面重定向</span></span><br><span class=\"line\">    .otherwise(&#123;</span><br><span class=\"line\">      redirectTo: <span class=\"string\">'/login'</span></span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>路由功能的实现原理<br>这里补充一下一般路由功能的实现原理</p>\n<ul>\n<li>1.通过hash（location.href.hash）获取位置</li>\n<li>2.设置全局拦截器<ul>\n<li>匹配路径：通配/string/:number</li>\n<li>判断后加载对应模块</li>\n</ul>\n</li>\n<li>3.通过window.onhashchange监听路由变化</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"添加登录页面的控制器\"><a href=\"#添加登录页面的控制器\" class=\"headerlink\" title=\"添加登录页面的控制器\"></a>添加登录页面的控制器</h3><ul>\n<li>在scripts文件夹中的controller目录下增加loginCtrl.js</li>\n<li>在index中引入该js文件</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">app.controller(<span class=\"string\">'LoginCtrl'</span>, [<span class=\"string\">'$scope'</span>, <span class=\"string\">'$http'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">$scope, $http</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">//定义submit事件，对应html中ng-submit</span></span><br><span class=\"line\">  $scope.submit = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//http服务POST账户密码</span></span><br><span class=\"line\">    $http(&#123;</span><br><span class=\"line\">        method: <span class=\"string\">'POST'</span>,</span><br><span class=\"line\">        url: <span class=\"string\">'your url'</span>,</span><br><span class=\"line\">        params: &#123;</span><br><span class=\"line\">          <span class=\"string\">\"username\"</span>: $scope.username, <span class=\"comment\">//ng-model双向绑定的用户名</span></span><br><span class=\"line\">          <span class=\"string\">\"password\"</span>: $scope.password <span class=\"comment\">//ng-model双向绑定的密码</span></span><br><span class=\"line\">        &#125;, </span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\">      .success(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">data</span>) </span>&#123;\t\t\t\t</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (data.result === <span class=\"string\">'success'</span>) &#123;\t\t\t</span><br><span class=\"line\">          <span class=\"built_in\">window</span>.location.href = <span class=\"string\">'index.html#/index'</span>; <span class=\"comment\">//判断登录成功，跳转</span></span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;\t\t\t\t\t</span><br><span class=\"line\">          alert(<span class=\"string\">\"error\"</span>); <span class=\"comment\">//登录失败提示</span></span><br><span class=\"line\">        &#125;\t\t\t\t\t</span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\">      <span class=\"comment\">//连接服务失败</span></span><br><span class=\"line\">      .error(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        alert(<span class=\"string\">\"connecting fail\"</span>);</span><br><span class=\"line\">      &#125;);</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">&#125;]);</span><br></pre></td></tr></table></figure>\n<h3 id=\"不需要在html页面加入ng-controller\"><a href=\"#不需要在html页面加入ng-controller\" class=\"headerlink\" title=\"不需要在html页面加入ng-controller\"></a>不需要在html页面加入ng-controller</h3><p>由于路由中已经引用了controller，故在路由跳转的同时已经启用了对应的控制器，若在view中再次引入会导致控制器加载两遍的哦</p>\n<h2 id=\"保存用户信息\"><a href=\"#保存用户信息\" class=\"headerlink\" title=\"保存用户信息\"></a>保存用户信息</h2><hr>\n<h3 id=\"登录成功返回用户信息\"><a href=\"#登录成功返回用户信息\" class=\"headerlink\" title=\"登录成功返回用户信息\"></a>登录成功返回用户信息</h3><ul>\n<li>通过登录成功服务端返回的用户信息，在需要用的时候取出</li>\n<li>可通过该项检查用户是否登录，或者根据用户权限加载不同的视图</li>\n<li>可通过sessionstorage、$rootscope、angular.service等方式保存，后续章节会提到</li>\n</ul>\n<h2 id=\"http服务后台获取不到值\"><a href=\"#http服务后台获取不到值\" class=\"headerlink\" title=\"$http服务后台获取不到值\"></a>$http服务后台获取不到值</h2><hr>\n<p>通常从jQuery的ajax转用angular的$http服务的时候，会遇到后台获取不到值的情况，这是因为</p>\n<h3 id=\"post请求的请求体的两种格式\"><a href=\"#post请求的请求体的两种格式\" class=\"headerlink\" title=\"post请求的请求体的两种格式\"></a>post请求的请求体的两种格式</h3><ul>\n<li>1.字符串: ‘name=name&amp;password=password’<br>这种格式的请求体,需要配置请求头 ‘Content-Type’:’application/x-www-form-urlencoded’</li>\n<li>2.json: {name:’name’,password:’password’}<br>这种格式的请求体,需要配置请求头 ‘Content-Type’:’application/json;charset=UTF-8’</li>\n</ul>\n<h3 id=\"ajax和-http区别\"><a href=\"#ajax和-http区别\" class=\"headerlink\" title=\"ajax和$http区别\"></a>ajax和$http区别</h3><ul>\n<li>在jquery中，官方文档解释contentType默认是 application/x-www-form-urlencoded; charset=UTF-8，即第一种</li>\n<li>在angular的$http中，默认是第二种，所以使用$http(config)提交请求体，config中的data项必须是json格式的值。</li>\n</ul>\n<h3 id=\"解决办法\"><a href=\"#解决办法\" class=\"headerlink\" title=\"解决办法\"></a>解决办法</h3><ul>\n<li>此时我们可以配置$http(config)中的headers中的Content-Type值为’application/x-www-form-urlencoded’，然后就能按照ajax的用法尽情使用$http服务啦</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> app = angular.module(<span class=\"string\">'angularTestApp'</span>, [</span><br><span class=\"line\">  <span class=\"string\">'ngCookies'</span>,</span><br><span class=\"line\">  <span class=\"string\">'ngResource'</span>,</span><br><span class=\"line\">  <span class=\"string\">'ngSanitize'</span>,</span><br><span class=\"line\">  <span class=\"string\">'ngRoute'</span>,</span><br><span class=\"line\">], <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">$httpProvider</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// Use x-www-form-urlencoded Content-Type</span></span><br><span class=\"line\">  $httpProvider.defaults.headers.post[<span class=\"string\">'Content-Type'</span>] = <span class=\"string\">'application/x-www-form-urlencoded;charset=utf-8'</span>;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> param = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">obj</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> query = <span class=\"string\">''</span>,</span><br><span class=\"line\">      name, value, fullSubName, subName, subValue, innerObj, i;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (name <span class=\"keyword\">in</span> obj) &#123;</span><br><span class=\"line\">      value = obj[name];</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (value <span class=\"keyword\">instanceof</span> <span class=\"built_in\">Array</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (i = <span class=\"number\">0</span>; i &lt; value.length; ++i) &#123;</span><br><span class=\"line\">          subValue = value[i];</span><br><span class=\"line\">          <span class=\"comment\">/*fullSubName = name + '[' + i + ']';*/</span></span><br><span class=\"line\">          fullSubName = name;</span><br><span class=\"line\">          innerObj = &#123;&#125;;</span><br><span class=\"line\">          innerObj[fullSubName] = subValue;</span><br><span class=\"line\">          query += param(innerObj) + <span class=\"string\">'&amp;'</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (value <span class=\"keyword\">instanceof</span> <span class=\"built_in\">Object</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (subName <span class=\"keyword\">in</span> value) &#123;</span><br><span class=\"line\">          subValue = value[subName];</span><br><span class=\"line\">          fullSubName = name <span class=\"comment\">/* + '[' + subName + ']'*/</span> ;</span><br><span class=\"line\">          innerObj = &#123;&#125;;</span><br><span class=\"line\">          innerObj[fullSubName] = subValue;</span><br><span class=\"line\">          query += param(innerObj) + <span class=\"string\">'&amp;'</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (value !== <span class=\"literal\">undefined</span> &amp;&amp; value !== <span class=\"literal\">null</span>)</span><br><span class=\"line\">        query += <span class=\"built_in\">encodeURIComponent</span>(name) + <span class=\"string\">'='</span> + <span class=\"built_in\">encodeURIComponent</span>(value) + <span class=\"string\">'&amp;'</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> query.length ? query.substr(<span class=\"number\">0</span>, query.length - <span class=\"number\">1</span>) : query;</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">  <span class=\"comment\">// Override $http service's default transformRequest</span></span><br><span class=\"line\">  $httpProvider.defaults.transformRequest = [<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">data</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> angular.isObject(data) &amp;&amp; <span class=\"built_in\">String</span>(data) !== <span class=\"string\">'[object File]'</span> ? param(data) : data;</span><br><span class=\"line\">  &#125;];</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<h3 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h3><p><a href=\"http://www.cnblogs.com/liulangmao/p/3889568.html\">《http请求头中的Content-Type属性在angular 和 node中的用法》</a><br><a href=\"https://segmentfault.com/a/1190000000396306\">《jquery和angular的ajax请求的区别》</a><br><a href=\"http://victorblog.com/2012/12/20/make-angularjs-http-service-behave-like-jquery-ajax/\">《Make AngularJS $http service behave like jQuery.ajax()》</a></p>\n<h2 id=\"结束语\"><a href=\"#结束语\" class=\"headerlink\" title=\"结束语\"></a>结束语</h2><hr>\n<p>本骚年也是AngularJS的初体验者，如果小伙伴们有好的资源请千万千万要分享呀。<br><a href=\"https://github.com/godbasin/godbasin.github.io/tree/blog-codes/angular-notes/2-create-login\">此处查看项目代码（仅包含app部分）</a><br><a href=\"http://o9grhhyar.bkt.clouddn.com/2-create-login/index.html#/\">此处查看页面效果</a></p>"},{"title":"CSS的position和z-index有关","date":"2016-06-25T04:03:10.000Z","_content":"今天刚好kk妹子问我关于position的一些问题，就打算整理一下，希望用比较清晰明了的方式解释一下CSS的position是怎么个玩法。\n顺便也进行一下z-index相关的说明。\n<!--more-->\n## CSS position属性\n-----\n### w3c的position\n这里借用[w3c](http://www.w3school.com.cn/cssref/pr_class_position.asp)上的说明\n- absolute\t\n  - 生成绝对定位的元素，相对于static定位以外的第一个父元素进行定位。\n  - 元素的位置通过\"left\", \"top\", \"right\"以及\"bottom\"属性进行规定。\n- fixed\t\n  - 生成绝对定位的元素，相对于浏览器窗口进行定位。\n  - 元素的位置通过\"left\", \"top\", \"right\"以及\"bottom\"属性进行规定。\n- relative\t\n  - 生成相对定位的元素，相对于其正常位置进行定位。\n  - 因此，\"left:20\"会向元素的 LEFT位置添加 20像素。\n- static\t\n  - 默认值。没有定位，元素出现在正常的流中（忽略top, bottom, left, right或者z-index声明）。\n- inherit\t\n  - 规定应该从父元素继承position属性的值。\n\n### 文档流\n- 什么是文档流\n相信大家刚开始接触position属性的时候，都会被“文档流”、“流”这样的概念给吓坏了。\n- 正常的文档流也叫普通流，在HTML里面的写法就是从上到下，从左到右的排版布局\n\n### static与文档流\n\n如图，[查看页面效果](http://o9bc2k1st.bkt.clouddn.com/position-static.html)\n``` css\na, p, div { border: solid 1px red; }\n.static { position: static; left: 100px; top: 100px; }\n```\n![image](http://o905ne85q.bkt.clouddn.com/53ETM3GNX7ZV65W%5DW~%28%7BZK3.png)\n可见，此时添加定位（left: 100px; top: 100px;）是无效的\n\n### relative与文档流\nrelative保持原有文档流，但相对本身的原始位置发生位移，且占空间\n如图，[查看页面效果](http://o9bc2k1st.bkt.clouddn.com/position-relative.html)\n``` css\na, p, div { border: solid 1px red; }\n.relative { position: relative; left: 100px; top: 100px; }\n```\n![image](http://o905ne85q.bkt.clouddn.com/PN1G~%5DQFF@E7AVRQJ9Z8%28JH.png)\n可见：\n- relative元素也遵循从上到下，从左到右的排版布局\n- relative相对于其正常位置进行定位，在这里设置了relative的元素相对其原本位置（position=static）进行位移\n- relative元素占有原本位置，因此下一个元素会排到该元素后方\n- relative元素占位不会随着定位的改变而改变。也就是说relative在文档流中占有的位置与其原本位置（position=static）相同\n这里有个需要注意的地方： 虽然relative元素占位与static相同，但会溢出父元素，撑开整个页面（document）。\n如图，[查看页面效果](http://o9bc2k1st.bkt.clouddn.com/position-relative-occupation.html)\n![image](http://o905ne85q.bkt.clouddn.com/LHRK4@9K$YE1%25KMB%29G9%60~%7B8.png)\n可以relative元素撑开父元素看到页面底部有滚动条。\n此时给父元素设置overflow: hidden;则可以隐藏溢出部分，如图\n![image](http://o905ne85q.bkt.clouddn.com/KGE~71FX8H7DW6VNYC1T00M.png)\n\n### absolute与文档流\nabsolute脱离文档流，相对于其包含块来定位，且不占位\n如图\n``` css\n.parent{ border: solid 1px blue; width: 300px; } \n.parent > div{ border: solid 1px red; height: 100px; width: 300px; } \n.absolute{ position: absolute; left: 100px; height: 100px; }\n```\n![image](http://o905ne85q.bkt.clouddn.com/75%5D1@NRTQ8$U9KTQ66SPL2A.png)\n可见：\n- absolute元素脱离文档流\n- absolute元素不占位，因此下一个符合普通流的元素会略过absolute元素排到其上一个元素的后方\n\n此时对于absolute元素的占位依然不大清晰，接下来我们给父元素添加margin-left: 200px的样式，如图\n![image](http://o905ne85q.bkt.clouddn.com/07J25Y0F~@O%5D@ZAGZ~%25%60%28%29Y.png)\n很明显，absolute元素位置没有发生改变，这是因为该元素相对于document进行定位。\n\n- absolute元素的定位是相对于static定位以外的第一个父元素进行定位\n- 当absolute的父元素position为static，则会继续往上查找，直到找到一个为relative/absolute/fixed的父元素作为定位参照物\n- 当absolute没有position为非static的父元素时，则会进行全局定位，即相对于文档document进行定位\n\n所以我们可以给父元素加上position=relative的样式，如图\n![image](http://o905ne85q.bkt.clouddn.com/~NPVE%7D%7DZFR3$PH%609%5DFJQF2Y.png)\n此时absolute元素则相对于父元素进行定位，[查看页面效果](http://o9bc2k1st.bkt.clouddn.com/position-absolute.html)。\n\n### 无定位的absolute\n在使用absolute进行定位时，若我们只是将元素设置为position: absolute，而不对其进行定位（top, bottom, left, right），会是怎样的情况呢？\n如图，[查看页面效果](http://o9bc2k1st.bkt.clouddn.com/position-absolute-without-position.html)\n![image](http://o905ne85q.bkt.clouddn.com/CG_14%7DVI%28TDCYFK%7BE$8SC%287.png)\n可见：\n- 未设置定位的absolute元素，其定位与其原本位置（position=static）相同\n- 此时absolute元素依然不占位，因此下一个符合普通流的元素会略过absolute元素排到其上一个元素的后方\n\n### fixed与文档流\nfixed脱离文档流，相对于浏览器窗口来定位，且不占位\n如图\n``` css\n.parent { border: solid 1px blue; width: 300px; } \n.parent > div { border: solid 1px red; height: 100px; width: 300px; } \n.fixed { position: fixed; left: 100px; top: 100px; background: yellow; }\n```\n![image](http://o905ne85q.bkt.clouddn.com/%28FNOAFPIA%5B80%25F%7D6%5B0CQ2%7DE.png)\n似乎跟相对于文档定位时的absolute元素没什么两样，即\n- fixed元素脱离文档流\n- fixed元素不占位\n\n接来下我们将页面填充满，如图，[查看页面效果](http://o9bc2k1st.bkt.clouddn.com/position-fixed-absolute.html)\n![image](http://o905ne85q.bkt.clouddn.com/K4OGL%5BF5~XP9NLRW%254X%7B55X.png)\n当我们进行页面滚动的时候，fixed元素位置没有发生变化，可见：\n\n- fixed相对于浏览器窗口来定位，不管是否有static定位以外的父元素\n- absolute元素会随着页面的滚动而滚动，而fixed不会\n\n也就是说，fixed元素相对于浏览器窗口进行定位，而无有static定位以外的父元素的absolute，则相对于document进行定位\n\n## z-index\n-----\n### z-index简述\n- z-index属性定义了第三维度，默认为0\n- z-index属性设置元素的堆叠顺序，拥有更高堆叠顺序的元素总是会处于堆叠顺序较低的元素的前面\n- z-index只能在position属性值为relative或absolute或fixed的元素上有效\n-\n\n### z-index在同级元素下的效果\n如图，[查看页面效果](http://o9bc2k1st.bkt.clouddn.com/position-z-index-same-level.html)\n![image](http://o905ne85q.bkt.clouddn.com/%60X74TE9%7D%28OFY%7BUK$MAW%5B%7B5O.png)\n可见：\n- 当同级元素不设置z-index或者z-index相等时，后面的元素会叠在前面的元素上方\n- 当同级元素z-index不同时，z-index大的元素会叠在z-index小的元素上方\n\n### z-index在不同级元素下的效果\n如图，[查看页面效果](http://o9bc2k1st.bkt.clouddn.com/position-z-index-diff-level-1.html)\n![image](http://o905ne85q.bkt.clouddn.com/Q%7BFVVGE6NSP8WB~_3P7SZ$G.png)\n仔细看会发现个很有意思的现象，parent1和parent2为同级元素，parent2叠在parent1上方，但是parent2子元素却位于parent1子元素的下方。\nparent1和parent2的position均为relative，是不是有些难以理解？这是因为：\n- 当向上追溯找不到含有z-index值的父元素的情况下，则可以视为自由的z-index元素\n- 自由的z-index元素可以与其他自由的定位元素来比较z-index的值，决定其堆叠顺序\n\n在这里，parent1和parent2均无设置z-index值，故在这里子元素的堆叠顺序是由自己的z-index值决定的。\n接下来我们为两个parent均加上z-index，如图，[查看页面效果](http://o9bc2k1st.bkt.clouddn.com/position-z-index-diff-level-2.html)\n![image](http://o905ne85q.bkt.clouddn.com/PMVG4833%60U%29JC9%5BWK5W%601NC.png)\n\n经测试，在parent2的z-index大于或者等于parent1的z-index的时候，parent2以及它的子元素均位于parent1以及其子元素的上方。\n而当我们设置parent2的z-index小于parent1的z-index的时候，如图\n![image](http://o905ne85q.bkt.clouddn.com/@22C%5D%5D9~A7%28%29%5B%60LZLD@%29%7BRF.png)\n此时parent2以及它的子元素均位于parent1以及其子元素的下方。\n可见：\n- z-index值只决定同一父元素中的同级子元素的堆叠顺序\n- 父元素的z-index值为子元素定义了堆叠顺序，即子元素依赖于父元素z-index值来获得页面中的堆叠顺序\n\n现在我们将parent2的z-index值取消，留下parent1的z-index值为2。\n如图，[查看页面效果](http://o9bc2k1st.bkt.clouddn.com/position-z-index-diff-level-3.html)\n![image](http://o905ne85q.bkt.clouddn.com/G%5D6CTV7PXO%28UD7B%5B%7B%60%28U693.png)\n可见：\n- 自由的z-index元素可以与父元素的同级兄弟定位元素来比较z-index的值，决定其堆叠顺序\n\n### z-index与position: fixed\n当初一直认为fixed的元素有种优先级特别高的感觉，但在z-index比较上却有了新发现，如图\n![image](http://o905ne85q.bkt.clouddn.com/IN7X7L4FJ%5DYT%7DZPG~8_I%60@R.png)\n经测试，在不设置z-index值或者z-index值相等时，fixed元素和absolute元素堆叠顺序均由元素在文档中的先后位置决定，后出现的会在上面。\n接下来我们给这几个子元素加上z-index值，如图\n![image](http://o905ne85q.bkt.clouddn.com/FMC%60R%25%25LLKVM9OQ1~5~%29GQ3.png)\n这时候我们会有种想法，会不会fixed元素和absolute元素的堆叠规则一样呢？\n现在我们将fixed元素移到parent元素外面，且parent元素z-index值依然为空，如图，[查看页面效果](http://o9bc2k1st.bkt.clouddn.com/position-z-index-fixed.html)\n![image](http://o905ne85q.bkt.clouddn.com/A%284RG%7BTP~2$%29%29ZE5Y2HW%7BOD.png)\n可见：\n- 尽管fixed定位方式与absolute不一致，它们的堆叠规则是一致的\n\n### z-index总结\n- 无z-index或者z-index值相等时，堆叠顺序均由元素在文档中的先后位置决定，后出现的会在上面\n- 当向上追溯找不到含有z-index值的父元素的情况下，则可以视为自由的z-index元素\n- 自由的z-index元素可以与其他自由的定位元素或者父元素的同级兄弟定位元素来比较z-index的值，决定其堆叠顺序\n- z-index值只决定同一父元素中的同级子元素的堆叠顺序\n- 父元素的z-index值为子元素定义了堆叠顺序，即子元素依赖于父元素z-index值来获得页面中的堆叠顺序\n\n- 参考\n[浅析CSS——元素重叠及position定位的z-index顺序](http://www.cnblogs.com/mind/archive/2012/04/01/2198995.html)\n\n- 相关代码保存在[about-position](https://github.com/godbasin/godbasin.github.io/tree/blog-codes/about-position)\n\n## 结束语\n不得不说，写这篇文章的过程自己对position和z-index相关的原理和规则也熟悉了很多，总结也是一种学习的方式呢。\n\n","source":"_posts/about-position.md","raw":"---\ntitle: CSS的position和z-index有关\ndate: 2016-06-25 12:03:10\ncategories: CSS炒饭\ntags: 分享\n---\n今天刚好kk妹子问我关于position的一些问题，就打算整理一下，希望用比较清晰明了的方式解释一下CSS的position是怎么个玩法。\n顺便也进行一下z-index相关的说明。\n<!--more-->\n## CSS position属性\n-----\n### w3c的position\n这里借用[w3c](http://www.w3school.com.cn/cssref/pr_class_position.asp)上的说明\n- absolute\t\n  - 生成绝对定位的元素，相对于static定位以外的第一个父元素进行定位。\n  - 元素的位置通过\"left\", \"top\", \"right\"以及\"bottom\"属性进行规定。\n- fixed\t\n  - 生成绝对定位的元素，相对于浏览器窗口进行定位。\n  - 元素的位置通过\"left\", \"top\", \"right\"以及\"bottom\"属性进行规定。\n- relative\t\n  - 生成相对定位的元素，相对于其正常位置进行定位。\n  - 因此，\"left:20\"会向元素的 LEFT位置添加 20像素。\n- static\t\n  - 默认值。没有定位，元素出现在正常的流中（忽略top, bottom, left, right或者z-index声明）。\n- inherit\t\n  - 规定应该从父元素继承position属性的值。\n\n### 文档流\n- 什么是文档流\n相信大家刚开始接触position属性的时候，都会被“文档流”、“流”这样的概念给吓坏了。\n- 正常的文档流也叫普通流，在HTML里面的写法就是从上到下，从左到右的排版布局\n\n### static与文档流\n\n如图，[查看页面效果](http://o9bc2k1st.bkt.clouddn.com/position-static.html)\n``` css\na, p, div { border: solid 1px red; }\n.static { position: static; left: 100px; top: 100px; }\n```\n![image](http://o905ne85q.bkt.clouddn.com/53ETM3GNX7ZV65W%5DW~%28%7BZK3.png)\n可见，此时添加定位（left: 100px; top: 100px;）是无效的\n\n### relative与文档流\nrelative保持原有文档流，但相对本身的原始位置发生位移，且占空间\n如图，[查看页面效果](http://o9bc2k1st.bkt.clouddn.com/position-relative.html)\n``` css\na, p, div { border: solid 1px red; }\n.relative { position: relative; left: 100px; top: 100px; }\n```\n![image](http://o905ne85q.bkt.clouddn.com/PN1G~%5DQFF@E7AVRQJ9Z8%28JH.png)\n可见：\n- relative元素也遵循从上到下，从左到右的排版布局\n- relative相对于其正常位置进行定位，在这里设置了relative的元素相对其原本位置（position=static）进行位移\n- relative元素占有原本位置，因此下一个元素会排到该元素后方\n- relative元素占位不会随着定位的改变而改变。也就是说relative在文档流中占有的位置与其原本位置（position=static）相同\n这里有个需要注意的地方： 虽然relative元素占位与static相同，但会溢出父元素，撑开整个页面（document）。\n如图，[查看页面效果](http://o9bc2k1st.bkt.clouddn.com/position-relative-occupation.html)\n![image](http://o905ne85q.bkt.clouddn.com/LHRK4@9K$YE1%25KMB%29G9%60~%7B8.png)\n可以relative元素撑开父元素看到页面底部有滚动条。\n此时给父元素设置overflow: hidden;则可以隐藏溢出部分，如图\n![image](http://o905ne85q.bkt.clouddn.com/KGE~71FX8H7DW6VNYC1T00M.png)\n\n### absolute与文档流\nabsolute脱离文档流，相对于其包含块来定位，且不占位\n如图\n``` css\n.parent{ border: solid 1px blue; width: 300px; } \n.parent > div{ border: solid 1px red; height: 100px; width: 300px; } \n.absolute{ position: absolute; left: 100px; height: 100px; }\n```\n![image](http://o905ne85q.bkt.clouddn.com/75%5D1@NRTQ8$U9KTQ66SPL2A.png)\n可见：\n- absolute元素脱离文档流\n- absolute元素不占位，因此下一个符合普通流的元素会略过absolute元素排到其上一个元素的后方\n\n此时对于absolute元素的占位依然不大清晰，接下来我们给父元素添加margin-left: 200px的样式，如图\n![image](http://o905ne85q.bkt.clouddn.com/07J25Y0F~@O%5D@ZAGZ~%25%60%28%29Y.png)\n很明显，absolute元素位置没有发生改变，这是因为该元素相对于document进行定位。\n\n- absolute元素的定位是相对于static定位以外的第一个父元素进行定位\n- 当absolute的父元素position为static，则会继续往上查找，直到找到一个为relative/absolute/fixed的父元素作为定位参照物\n- 当absolute没有position为非static的父元素时，则会进行全局定位，即相对于文档document进行定位\n\n所以我们可以给父元素加上position=relative的样式，如图\n![image](http://o905ne85q.bkt.clouddn.com/~NPVE%7D%7DZFR3$PH%609%5DFJQF2Y.png)\n此时absolute元素则相对于父元素进行定位，[查看页面效果](http://o9bc2k1st.bkt.clouddn.com/position-absolute.html)。\n\n### 无定位的absolute\n在使用absolute进行定位时，若我们只是将元素设置为position: absolute，而不对其进行定位（top, bottom, left, right），会是怎样的情况呢？\n如图，[查看页面效果](http://o9bc2k1st.bkt.clouddn.com/position-absolute-without-position.html)\n![image](http://o905ne85q.bkt.clouddn.com/CG_14%7DVI%28TDCYFK%7BE$8SC%287.png)\n可见：\n- 未设置定位的absolute元素，其定位与其原本位置（position=static）相同\n- 此时absolute元素依然不占位，因此下一个符合普通流的元素会略过absolute元素排到其上一个元素的后方\n\n### fixed与文档流\nfixed脱离文档流，相对于浏览器窗口来定位，且不占位\n如图\n``` css\n.parent { border: solid 1px blue; width: 300px; } \n.parent > div { border: solid 1px red; height: 100px; width: 300px; } \n.fixed { position: fixed; left: 100px; top: 100px; background: yellow; }\n```\n![image](http://o905ne85q.bkt.clouddn.com/%28FNOAFPIA%5B80%25F%7D6%5B0CQ2%7DE.png)\n似乎跟相对于文档定位时的absolute元素没什么两样，即\n- fixed元素脱离文档流\n- fixed元素不占位\n\n接来下我们将页面填充满，如图，[查看页面效果](http://o9bc2k1st.bkt.clouddn.com/position-fixed-absolute.html)\n![image](http://o905ne85q.bkt.clouddn.com/K4OGL%5BF5~XP9NLRW%254X%7B55X.png)\n当我们进行页面滚动的时候，fixed元素位置没有发生变化，可见：\n\n- fixed相对于浏览器窗口来定位，不管是否有static定位以外的父元素\n- absolute元素会随着页面的滚动而滚动，而fixed不会\n\n也就是说，fixed元素相对于浏览器窗口进行定位，而无有static定位以外的父元素的absolute，则相对于document进行定位\n\n## z-index\n-----\n### z-index简述\n- z-index属性定义了第三维度，默认为0\n- z-index属性设置元素的堆叠顺序，拥有更高堆叠顺序的元素总是会处于堆叠顺序较低的元素的前面\n- z-index只能在position属性值为relative或absolute或fixed的元素上有效\n-\n\n### z-index在同级元素下的效果\n如图，[查看页面效果](http://o9bc2k1st.bkt.clouddn.com/position-z-index-same-level.html)\n![image](http://o905ne85q.bkt.clouddn.com/%60X74TE9%7D%28OFY%7BUK$MAW%5B%7B5O.png)\n可见：\n- 当同级元素不设置z-index或者z-index相等时，后面的元素会叠在前面的元素上方\n- 当同级元素z-index不同时，z-index大的元素会叠在z-index小的元素上方\n\n### z-index在不同级元素下的效果\n如图，[查看页面效果](http://o9bc2k1st.bkt.clouddn.com/position-z-index-diff-level-1.html)\n![image](http://o905ne85q.bkt.clouddn.com/Q%7BFVVGE6NSP8WB~_3P7SZ$G.png)\n仔细看会发现个很有意思的现象，parent1和parent2为同级元素，parent2叠在parent1上方，但是parent2子元素却位于parent1子元素的下方。\nparent1和parent2的position均为relative，是不是有些难以理解？这是因为：\n- 当向上追溯找不到含有z-index值的父元素的情况下，则可以视为自由的z-index元素\n- 自由的z-index元素可以与其他自由的定位元素来比较z-index的值，决定其堆叠顺序\n\n在这里，parent1和parent2均无设置z-index值，故在这里子元素的堆叠顺序是由自己的z-index值决定的。\n接下来我们为两个parent均加上z-index，如图，[查看页面效果](http://o9bc2k1st.bkt.clouddn.com/position-z-index-diff-level-2.html)\n![image](http://o905ne85q.bkt.clouddn.com/PMVG4833%60U%29JC9%5BWK5W%601NC.png)\n\n经测试，在parent2的z-index大于或者等于parent1的z-index的时候，parent2以及它的子元素均位于parent1以及其子元素的上方。\n而当我们设置parent2的z-index小于parent1的z-index的时候，如图\n![image](http://o905ne85q.bkt.clouddn.com/@22C%5D%5D9~A7%28%29%5B%60LZLD@%29%7BRF.png)\n此时parent2以及它的子元素均位于parent1以及其子元素的下方。\n可见：\n- z-index值只决定同一父元素中的同级子元素的堆叠顺序\n- 父元素的z-index值为子元素定义了堆叠顺序，即子元素依赖于父元素z-index值来获得页面中的堆叠顺序\n\n现在我们将parent2的z-index值取消，留下parent1的z-index值为2。\n如图，[查看页面效果](http://o9bc2k1st.bkt.clouddn.com/position-z-index-diff-level-3.html)\n![image](http://o905ne85q.bkt.clouddn.com/G%5D6CTV7PXO%28UD7B%5B%7B%60%28U693.png)\n可见：\n- 自由的z-index元素可以与父元素的同级兄弟定位元素来比较z-index的值，决定其堆叠顺序\n\n### z-index与position: fixed\n当初一直认为fixed的元素有种优先级特别高的感觉，但在z-index比较上却有了新发现，如图\n![image](http://o905ne85q.bkt.clouddn.com/IN7X7L4FJ%5DYT%7DZPG~8_I%60@R.png)\n经测试，在不设置z-index值或者z-index值相等时，fixed元素和absolute元素堆叠顺序均由元素在文档中的先后位置决定，后出现的会在上面。\n接下来我们给这几个子元素加上z-index值，如图\n![image](http://o905ne85q.bkt.clouddn.com/FMC%60R%25%25LLKVM9OQ1~5~%29GQ3.png)\n这时候我们会有种想法，会不会fixed元素和absolute元素的堆叠规则一样呢？\n现在我们将fixed元素移到parent元素外面，且parent元素z-index值依然为空，如图，[查看页面效果](http://o9bc2k1st.bkt.clouddn.com/position-z-index-fixed.html)\n![image](http://o905ne85q.bkt.clouddn.com/A%284RG%7BTP~2$%29%29ZE5Y2HW%7BOD.png)\n可见：\n- 尽管fixed定位方式与absolute不一致，它们的堆叠规则是一致的\n\n### z-index总结\n- 无z-index或者z-index值相等时，堆叠顺序均由元素在文档中的先后位置决定，后出现的会在上面\n- 当向上追溯找不到含有z-index值的父元素的情况下，则可以视为自由的z-index元素\n- 自由的z-index元素可以与其他自由的定位元素或者父元素的同级兄弟定位元素来比较z-index的值，决定其堆叠顺序\n- z-index值只决定同一父元素中的同级子元素的堆叠顺序\n- 父元素的z-index值为子元素定义了堆叠顺序，即子元素依赖于父元素z-index值来获得页面中的堆叠顺序\n\n- 参考\n[浅析CSS——元素重叠及position定位的z-index顺序](http://www.cnblogs.com/mind/archive/2012/04/01/2198995.html)\n\n- 相关代码保存在[about-position](https://github.com/godbasin/godbasin.github.io/tree/blog-codes/about-position)\n\n## 结束语\n不得不说，写这篇文章的过程自己对position和z-index相关的原理和规则也熟悉了很多，总结也是一种学习的方式呢。\n\n","slug":"about-position","published":1,"updated":"2016-07-29T13:27:28.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cirrwvo2p000g38l5m2zczksq","content":"<p>今天刚好kk妹子问我关于position的一些问题，就打算整理一下，希望用比较清晰明了的方式解释一下CSS的position是怎么个玩法。<br>顺便也进行一下z-index相关的说明。<br><a id=\"more\"></a></p>\n<h2 id=\"CSS-position属性\"><a href=\"#CSS-position属性\" class=\"headerlink\" title=\"CSS position属性\"></a>CSS position属性</h2><hr>\n<h3 id=\"w3c的position\"><a href=\"#w3c的position\" class=\"headerlink\" title=\"w3c的position\"></a>w3c的position</h3><p>这里借用<a href=\"http://www.w3school.com.cn/cssref/pr_class_position.asp\" target=\"_blank\" rel=\"external\">w3c</a>上的说明</p>\n<ul>\n<li>absolute    <ul>\n<li>生成绝对定位的元素，相对于static定位以外的第一个父元素进行定位。</li>\n<li>元素的位置通过”left”, “top”, “right”以及”bottom”属性进行规定。</li>\n</ul>\n</li>\n<li>fixed    <ul>\n<li>生成绝对定位的元素，相对于浏览器窗口进行定位。</li>\n<li>元素的位置通过”left”, “top”, “right”以及”bottom”属性进行规定。</li>\n</ul>\n</li>\n<li>relative    <ul>\n<li>生成相对定位的元素，相对于其正常位置进行定位。</li>\n<li>因此，”left:20”会向元素的 LEFT位置添加 20像素。</li>\n</ul>\n</li>\n<li>static    <ul>\n<li>默认值。没有定位，元素出现在正常的流中（忽略top, bottom, left, right或者z-index声明）。</li>\n</ul>\n</li>\n<li>inherit    <ul>\n<li>规定应该从父元素继承position属性的值。</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"文档流\"><a href=\"#文档流\" class=\"headerlink\" title=\"文档流\"></a>文档流</h3><ul>\n<li>什么是文档流<br>相信大家刚开始接触position属性的时候，都会被“文档流”、“流”这样的概念给吓坏了。</li>\n<li>正常的文档流也叫普通流，在HTML里面的写法就是从上到下，从左到右的排版布局</li>\n</ul>\n<h3 id=\"static与文档流\"><a href=\"#static与文档流\" class=\"headerlink\" title=\"static与文档流\"></a>static与文档流</h3><p>如图，<a href=\"http://o9bc2k1st.bkt.clouddn.com/position-static.html\" target=\"_blank\" rel=\"external\">查看页面效果</a><br><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">a</span>, <span class=\"selector-tag\">p</span>, <span class=\"selector-tag\">div</span> &#123; <span class=\"attribute\">border</span>: solid <span class=\"number\">1px</span> red; &#125;</span><br><span class=\"line\"><span class=\"selector-class\">.static</span> &#123; <span class=\"attribute\">position</span>: static; <span class=\"attribute\">left</span>: <span class=\"number\">100px</span>; <span class=\"attribute\">top</span>: <span class=\"number\">100px</span>; &#125;</span><br></pre></td></tr></table></figure></p>\n<p><img src=\"http://o905ne85q.bkt.clouddn.com/53ETM3GNX7ZV65W%5DW~%28%7BZK3.png\" alt=\"image\"><br>可见，此时添加定位（left: 100px; top: 100px;）是无效的</p>\n<h3 id=\"relative与文档流\"><a href=\"#relative与文档流\" class=\"headerlink\" title=\"relative与文档流\"></a>relative与文档流</h3><p>relative保持原有文档流，但相对本身的原始位置发生位移，且占空间<br>如图，<a href=\"http://o9bc2k1st.bkt.clouddn.com/position-relative.html\" target=\"_blank\" rel=\"external\">查看页面效果</a><br><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">a</span>, <span class=\"selector-tag\">p</span>, <span class=\"selector-tag\">div</span> &#123; <span class=\"attribute\">border</span>: solid <span class=\"number\">1px</span> red; &#125;</span><br><span class=\"line\"><span class=\"selector-class\">.relative</span> &#123; <span class=\"attribute\">position</span>: relative; <span class=\"attribute\">left</span>: <span class=\"number\">100px</span>; <span class=\"attribute\">top</span>: <span class=\"number\">100px</span>; &#125;</span><br></pre></td></tr></table></figure></p>\n<p><img src=\"http://o905ne85q.bkt.clouddn.com/PN1G~%5DQFF@E7AVRQJ9Z8%28JH.png\" alt=\"image\"><br>可见：</p>\n<ul>\n<li>relative元素也遵循从上到下，从左到右的排版布局</li>\n<li>relative相对于其正常位置进行定位，在这里设置了relative的元素相对其原本位置（position=static）进行位移</li>\n<li>relative元素占有原本位置，因此下一个元素会排到该元素后方</li>\n<li>relative元素占位不会随着定位的改变而改变。也就是说relative在文档流中占有的位置与其原本位置（position=static）相同<br>这里有个需要注意的地方： 虽然relative元素占位与static相同，但会溢出父元素，撑开整个页面（document）。<br>如图，<a href=\"http://o9bc2k1st.bkt.clouddn.com/position-relative-occupation.html\" target=\"_blank\" rel=\"external\">查看页面效果</a><br><img src=\"http://o905ne85q.bkt.clouddn.com/LHRK4@9K$YE1%25KMB%29G9%60~%7B8.png\" alt=\"image\"><br>可以relative元素撑开父元素看到页面底部有滚动条。<br>此时给父元素设置overflow: hidden;则可以隐藏溢出部分，如图<br><img src=\"http://o905ne85q.bkt.clouddn.com/KGE~71FX8H7DW6VNYC1T00M.png\" alt=\"image\"></li>\n</ul>\n<h3 id=\"absolute与文档流\"><a href=\"#absolute与文档流\" class=\"headerlink\" title=\"absolute与文档流\"></a>absolute与文档流</h3><p>absolute脱离文档流，相对于其包含块来定位，且不占位<br>如图<br><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.parent</span>&#123; <span class=\"attribute\">border</span>: solid <span class=\"number\">1px</span> blue; <span class=\"attribute\">width</span>: <span class=\"number\">300px</span>; &#125; </span><br><span class=\"line\"><span class=\"selector-class\">.parent</span> &gt; <span class=\"selector-tag\">div</span>&#123; <span class=\"attribute\">border</span>: solid <span class=\"number\">1px</span> red; <span class=\"attribute\">height</span>: <span class=\"number\">100px</span>; <span class=\"attribute\">width</span>: <span class=\"number\">300px</span>; &#125; </span><br><span class=\"line\"><span class=\"selector-class\">.absolute</span>&#123; <span class=\"attribute\">position</span>: absolute; <span class=\"attribute\">left</span>: <span class=\"number\">100px</span>; <span class=\"attribute\">height</span>: <span class=\"number\">100px</span>; &#125;</span><br></pre></td></tr></table></figure></p>\n<p><img src=\"http://o905ne85q.bkt.clouddn.com/75%5D1@NRTQ8$U9KTQ66SPL2A.png\" alt=\"image\"><br>可见：</p>\n<ul>\n<li>absolute元素脱离文档流</li>\n<li>absolute元素不占位，因此下一个符合普通流的元素会略过absolute元素排到其上一个元素的后方</li>\n</ul>\n<p>此时对于absolute元素的占位依然不大清晰，接下来我们给父元素添加margin-left: 200px的样式，如图<br><img src=\"http://o905ne85q.bkt.clouddn.com/07J25Y0F~@O%5D@ZAGZ~%25%60%28%29Y.png\" alt=\"image\"><br>很明显，absolute元素位置没有发生改变，这是因为该元素相对于document进行定位。</p>\n<ul>\n<li>absolute元素的定位是相对于static定位以外的第一个父元素进行定位</li>\n<li>当absolute的父元素position为static，则会继续往上查找，直到找到一个为relative/absolute/fixed的父元素作为定位参照物</li>\n<li>当absolute没有position为非static的父元素时，则会进行全局定位，即相对于文档document进行定位</li>\n</ul>\n<p>所以我们可以给父元素加上position=relative的样式，如图<br><img src=\"http://o905ne85q.bkt.clouddn.com/~NPVE%7D%7DZFR3$PH%609%5DFJQF2Y.png\" alt=\"image\"><br>此时absolute元素则相对于父元素进行定位，<a href=\"http://o9bc2k1st.bkt.clouddn.com/position-absolute.html\" target=\"_blank\" rel=\"external\">查看页面效果</a>。</p>\n<h3 id=\"无定位的absolute\"><a href=\"#无定位的absolute\" class=\"headerlink\" title=\"无定位的absolute\"></a>无定位的absolute</h3><p>在使用absolute进行定位时，若我们只是将元素设置为position: absolute，而不对其进行定位（top, bottom, left, right），会是怎样的情况呢？<br>如图，<a href=\"http://o9bc2k1st.bkt.clouddn.com/position-absolute-without-position.html\" target=\"_blank\" rel=\"external\">查看页面效果</a><br><img src=\"http://o905ne85q.bkt.clouddn.com/CG_14%7DVI%28TDCYFK%7BE$8SC%287.png\" alt=\"image\"><br>可见：</p>\n<ul>\n<li>未设置定位的absolute元素，其定位与其原本位置（position=static）相同</li>\n<li>此时absolute元素依然不占位，因此下一个符合普通流的元素会略过absolute元素排到其上一个元素的后方</li>\n</ul>\n<h3 id=\"fixed与文档流\"><a href=\"#fixed与文档流\" class=\"headerlink\" title=\"fixed与文档流\"></a>fixed与文档流</h3><p>fixed脱离文档流，相对于浏览器窗口来定位，且不占位<br>如图<br><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.parent</span> &#123; <span class=\"attribute\">border</span>: solid <span class=\"number\">1px</span> blue; <span class=\"attribute\">width</span>: <span class=\"number\">300px</span>; &#125; </span><br><span class=\"line\"><span class=\"selector-class\">.parent</span> &gt; <span class=\"selector-tag\">div</span> &#123; <span class=\"attribute\">border</span>: solid <span class=\"number\">1px</span> red; <span class=\"attribute\">height</span>: <span class=\"number\">100px</span>; <span class=\"attribute\">width</span>: <span class=\"number\">300px</span>; &#125; </span><br><span class=\"line\"><span class=\"selector-class\">.fixed</span> &#123; <span class=\"attribute\">position</span>: fixed; <span class=\"attribute\">left</span>: <span class=\"number\">100px</span>; <span class=\"attribute\">top</span>: <span class=\"number\">100px</span>; <span class=\"attribute\">background</span>: yellow; &#125;</span><br></pre></td></tr></table></figure></p>\n<p><img src=\"http://o905ne85q.bkt.clouddn.com/%28FNOAFPIA%5B80%25F%7D6%5B0CQ2%7DE.png\" alt=\"image\"><br>似乎跟相对于文档定位时的absolute元素没什么两样，即</p>\n<ul>\n<li>fixed元素脱离文档流</li>\n<li>fixed元素不占位</li>\n</ul>\n<p>接来下我们将页面填充满，如图，<a href=\"http://o9bc2k1st.bkt.clouddn.com/position-fixed-absolute.html\" target=\"_blank\" rel=\"external\">查看页面效果</a><br><img src=\"http://o905ne85q.bkt.clouddn.com/K4OGL%5BF5~XP9NLRW%254X%7B55X.png\" alt=\"image\"><br>当我们进行页面滚动的时候，fixed元素位置没有发生变化，可见：</p>\n<ul>\n<li>fixed相对于浏览器窗口来定位，不管是否有static定位以外的父元素</li>\n<li>absolute元素会随着页面的滚动而滚动，而fixed不会</li>\n</ul>\n<p>也就是说，fixed元素相对于浏览器窗口进行定位，而无有static定位以外的父元素的absolute，则相对于document进行定位</p>\n<h2 id=\"z-index\"><a href=\"#z-index\" class=\"headerlink\" title=\"z-index\"></a>z-index</h2><hr>\n<h3 id=\"z-index简述\"><a href=\"#z-index简述\" class=\"headerlink\" title=\"z-index简述\"></a>z-index简述</h3><ul>\n<li>z-index属性定义了第三维度，默认为0</li>\n<li>z-index属性设置元素的堆叠顺序，拥有更高堆叠顺序的元素总是会处于堆叠顺序较低的元素的前面</li>\n<li>z-index只能在position属性值为relative或absolute或fixed的元素上有效<br>-</li>\n</ul>\n<h3 id=\"z-index在同级元素下的效果\"><a href=\"#z-index在同级元素下的效果\" class=\"headerlink\" title=\"z-index在同级元素下的效果\"></a>z-index在同级元素下的效果</h3><p>如图，<a href=\"http://o9bc2k1st.bkt.clouddn.com/position-z-index-same-level.html\" target=\"_blank\" rel=\"external\">查看页面效果</a><br><img src=\"http://o905ne85q.bkt.clouddn.com/%60X74TE9%7D%28OFY%7BUK$MAW%5B%7B5O.png\" alt=\"image\"><br>可见：</p>\n<ul>\n<li>当同级元素不设置z-index或者z-index相等时，后面的元素会叠在前面的元素上方</li>\n<li>当同级元素z-index不同时，z-index大的元素会叠在z-index小的元素上方</li>\n</ul>\n<h3 id=\"z-index在不同级元素下的效果\"><a href=\"#z-index在不同级元素下的效果\" class=\"headerlink\" title=\"z-index在不同级元素下的效果\"></a>z-index在不同级元素下的效果</h3><p>如图，<a href=\"http://o9bc2k1st.bkt.clouddn.com/position-z-index-diff-level-1.html\" target=\"_blank\" rel=\"external\">查看页面效果</a><br><img src=\"http://o905ne85q.bkt.clouddn.com/Q%7BFVVGE6NSP8WB~_3P7SZ$G.png\" alt=\"image\"><br>仔细看会发现个很有意思的现象，parent1和parent2为同级元素，parent2叠在parent1上方，但是parent2子元素却位于parent1子元素的下方。<br>parent1和parent2的position均为relative，是不是有些难以理解？这是因为：</p>\n<ul>\n<li>当向上追溯找不到含有z-index值的父元素的情况下，则可以视为自由的z-index元素</li>\n<li>自由的z-index元素可以与其他自由的定位元素来比较z-index的值，决定其堆叠顺序</li>\n</ul>\n<p>在这里，parent1和parent2均无设置z-index值，故在这里子元素的堆叠顺序是由自己的z-index值决定的。<br>接下来我们为两个parent均加上z-index，如图，<a href=\"http://o9bc2k1st.bkt.clouddn.com/position-z-index-diff-level-2.html\" target=\"_blank\" rel=\"external\">查看页面效果</a><br><img src=\"http://o905ne85q.bkt.clouddn.com/PMVG4833%60U%29JC9%5BWK5W%601NC.png\" alt=\"image\"></p>\n<p>经测试，在parent2的z-index大于或者等于parent1的z-index的时候，parent2以及它的子元素均位于parent1以及其子元素的上方。<br>而当我们设置parent2的z-index小于parent1的z-index的时候，如图<br><img src=\"http://o905ne85q.bkt.clouddn.com/@22C%5D%5D9~A7%28%29%5B%60LZLD@%29%7BRF.png\" alt=\"image\"><br>此时parent2以及它的子元素均位于parent1以及其子元素的下方。<br>可见：</p>\n<ul>\n<li>z-index值只决定同一父元素中的同级子元素的堆叠顺序</li>\n<li>父元素的z-index值为子元素定义了堆叠顺序，即子元素依赖于父元素z-index值来获得页面中的堆叠顺序</li>\n</ul>\n<p>现在我们将parent2的z-index值取消，留下parent1的z-index值为2。<br>如图，<a href=\"http://o9bc2k1st.bkt.clouddn.com/position-z-index-diff-level-3.html\" target=\"_blank\" rel=\"external\">查看页面效果</a><br><img src=\"http://o905ne85q.bkt.clouddn.com/G%5D6CTV7PXO%28UD7B%5B%7B%60%28U693.png\" alt=\"image\"><br>可见：</p>\n<ul>\n<li>自由的z-index元素可以与父元素的同级兄弟定位元素来比较z-index的值，决定其堆叠顺序</li>\n</ul>\n<h3 id=\"z-index与position-fixed\"><a href=\"#z-index与position-fixed\" class=\"headerlink\" title=\"z-index与position: fixed\"></a>z-index与position: fixed</h3><p>当初一直认为fixed的元素有种优先级特别高的感觉，但在z-index比较上却有了新发现，如图<br><img src=\"http://o905ne85q.bkt.clouddn.com/IN7X7L4FJ%5DYT%7DZPG~8_I%60@R.png\" alt=\"image\"><br>经测试，在不设置z-index值或者z-index值相等时，fixed元素和absolute元素堆叠顺序均由元素在文档中的先后位置决定，后出现的会在上面。<br>接下来我们给这几个子元素加上z-index值，如图<br><img src=\"http://o905ne85q.bkt.clouddn.com/FMC%60R%25%25LLKVM9OQ1~5~%29GQ3.png\" alt=\"image\"><br>这时候我们会有种想法，会不会fixed元素和absolute元素的堆叠规则一样呢？<br>现在我们将fixed元素移到parent元素外面，且parent元素z-index值依然为空，如图，<a href=\"http://o9bc2k1st.bkt.clouddn.com/position-z-index-fixed.html\" target=\"_blank\" rel=\"external\">查看页面效果</a><br><img src=\"http://o905ne85q.bkt.clouddn.com/A%284RG%7BTP~2$%29%29ZE5Y2HW%7BOD.png\" alt=\"image\"><br>可见：</p>\n<ul>\n<li>尽管fixed定位方式与absolute不一致，它们的堆叠规则是一致的</li>\n</ul>\n<h3 id=\"z-index总结\"><a href=\"#z-index总结\" class=\"headerlink\" title=\"z-index总结\"></a>z-index总结</h3><ul>\n<li>无z-index或者z-index值相等时，堆叠顺序均由元素在文档中的先后位置决定，后出现的会在上面</li>\n<li>当向上追溯找不到含有z-index值的父元素的情况下，则可以视为自由的z-index元素</li>\n<li>自由的z-index元素可以与其他自由的定位元素或者父元素的同级兄弟定位元素来比较z-index的值，决定其堆叠顺序</li>\n<li>z-index值只决定同一父元素中的同级子元素的堆叠顺序</li>\n<li><p>父元素的z-index值为子元素定义了堆叠顺序，即子元素依赖于父元素z-index值来获得页面中的堆叠顺序</p>\n</li>\n<li><p>参考<br><a href=\"http://www.cnblogs.com/mind/archive/2012/04/01/2198995.html\" target=\"_blank\" rel=\"external\">浅析CSS——元素重叠及position定位的z-index顺序</a></p>\n</li>\n<li><p>相关代码保存在<a href=\"https://github.com/godbasin/godbasin.github.io/tree/blog-codes/about-position\" target=\"_blank\" rel=\"external\">about-position</a></p>\n</li>\n</ul>\n<h2 id=\"结束语\"><a href=\"#结束语\" class=\"headerlink\" title=\"结束语\"></a>结束语</h2><p>不得不说，写这篇文章的过程自己对position和z-index相关的原理和规则也熟悉了很多，总结也是一种学习的方式呢。</p>\n","excerpt":"<p>今天刚好kk妹子问我关于position的一些问题，就打算整理一下，希望用比较清晰明了的方式解释一下CSS的position是怎么个玩法。<br>顺便也进行一下z-index相关的说明。<br>","more":"</p>\n<h2 id=\"CSS-position属性\"><a href=\"#CSS-position属性\" class=\"headerlink\" title=\"CSS position属性\"></a>CSS position属性</h2><hr>\n<h3 id=\"w3c的position\"><a href=\"#w3c的position\" class=\"headerlink\" title=\"w3c的position\"></a>w3c的position</h3><p>这里借用<a href=\"http://www.w3school.com.cn/cssref/pr_class_position.asp\">w3c</a>上的说明</p>\n<ul>\n<li>absolute    <ul>\n<li>生成绝对定位的元素，相对于static定位以外的第一个父元素进行定位。</li>\n<li>元素的位置通过”left”, “top”, “right”以及”bottom”属性进行规定。</li>\n</ul>\n</li>\n<li>fixed    <ul>\n<li>生成绝对定位的元素，相对于浏览器窗口进行定位。</li>\n<li>元素的位置通过”left”, “top”, “right”以及”bottom”属性进行规定。</li>\n</ul>\n</li>\n<li>relative    <ul>\n<li>生成相对定位的元素，相对于其正常位置进行定位。</li>\n<li>因此，”left:20”会向元素的 LEFT位置添加 20像素。</li>\n</ul>\n</li>\n<li>static    <ul>\n<li>默认值。没有定位，元素出现在正常的流中（忽略top, bottom, left, right或者z-index声明）。</li>\n</ul>\n</li>\n<li>inherit    <ul>\n<li>规定应该从父元素继承position属性的值。</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"文档流\"><a href=\"#文档流\" class=\"headerlink\" title=\"文档流\"></a>文档流</h3><ul>\n<li>什么是文档流<br>相信大家刚开始接触position属性的时候，都会被“文档流”、“流”这样的概念给吓坏了。</li>\n<li>正常的文档流也叫普通流，在HTML里面的写法就是从上到下，从左到右的排版布局</li>\n</ul>\n<h3 id=\"static与文档流\"><a href=\"#static与文档流\" class=\"headerlink\" title=\"static与文档流\"></a>static与文档流</h3><p>如图，<a href=\"http://o9bc2k1st.bkt.clouddn.com/position-static.html\">查看页面效果</a><br><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">a</span>, <span class=\"selector-tag\">p</span>, <span class=\"selector-tag\">div</span> &#123; <span class=\"attribute\">border</span>: solid <span class=\"number\">1px</span> red; &#125;</span><br><span class=\"line\"><span class=\"selector-class\">.static</span> &#123; <span class=\"attribute\">position</span>: static; <span class=\"attribute\">left</span>: <span class=\"number\">100px</span>; <span class=\"attribute\">top</span>: <span class=\"number\">100px</span>; &#125;</span><br></pre></td></tr></table></figure></p>\n<p><img src=\"http://o905ne85q.bkt.clouddn.com/53ETM3GNX7ZV65W%5DW~%28%7BZK3.png\" alt=\"image\"><br>可见，此时添加定位（left: 100px; top: 100px;）是无效的</p>\n<h3 id=\"relative与文档流\"><a href=\"#relative与文档流\" class=\"headerlink\" title=\"relative与文档流\"></a>relative与文档流</h3><p>relative保持原有文档流，但相对本身的原始位置发生位移，且占空间<br>如图，<a href=\"http://o9bc2k1st.bkt.clouddn.com/position-relative.html\">查看页面效果</a><br><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">a</span>, <span class=\"selector-tag\">p</span>, <span class=\"selector-tag\">div</span> &#123; <span class=\"attribute\">border</span>: solid <span class=\"number\">1px</span> red; &#125;</span><br><span class=\"line\"><span class=\"selector-class\">.relative</span> &#123; <span class=\"attribute\">position</span>: relative; <span class=\"attribute\">left</span>: <span class=\"number\">100px</span>; <span class=\"attribute\">top</span>: <span class=\"number\">100px</span>; &#125;</span><br></pre></td></tr></table></figure></p>\n<p><img src=\"http://o905ne85q.bkt.clouddn.com/PN1G~%5DQFF@E7AVRQJ9Z8%28JH.png\" alt=\"image\"><br>可见：</p>\n<ul>\n<li>relative元素也遵循从上到下，从左到右的排版布局</li>\n<li>relative相对于其正常位置进行定位，在这里设置了relative的元素相对其原本位置（position=static）进行位移</li>\n<li>relative元素占有原本位置，因此下一个元素会排到该元素后方</li>\n<li>relative元素占位不会随着定位的改变而改变。也就是说relative在文档流中占有的位置与其原本位置（position=static）相同<br>这里有个需要注意的地方： 虽然relative元素占位与static相同，但会溢出父元素，撑开整个页面（document）。<br>如图，<a href=\"http://o9bc2k1st.bkt.clouddn.com/position-relative-occupation.html\">查看页面效果</a><br><img src=\"http://o905ne85q.bkt.clouddn.com/LHRK4@9K$YE1%25KMB%29G9%60~%7B8.png\" alt=\"image\"><br>可以relative元素撑开父元素看到页面底部有滚动条。<br>此时给父元素设置overflow: hidden;则可以隐藏溢出部分，如图<br><img src=\"http://o905ne85q.bkt.clouddn.com/KGE~71FX8H7DW6VNYC1T00M.png\" alt=\"image\"></li>\n</ul>\n<h3 id=\"absolute与文档流\"><a href=\"#absolute与文档流\" class=\"headerlink\" title=\"absolute与文档流\"></a>absolute与文档流</h3><p>absolute脱离文档流，相对于其包含块来定位，且不占位<br>如图<br><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.parent</span>&#123; <span class=\"attribute\">border</span>: solid <span class=\"number\">1px</span> blue; <span class=\"attribute\">width</span>: <span class=\"number\">300px</span>; &#125; </span><br><span class=\"line\"><span class=\"selector-class\">.parent</span> &gt; <span class=\"selector-tag\">div</span>&#123; <span class=\"attribute\">border</span>: solid <span class=\"number\">1px</span> red; <span class=\"attribute\">height</span>: <span class=\"number\">100px</span>; <span class=\"attribute\">width</span>: <span class=\"number\">300px</span>; &#125; </span><br><span class=\"line\"><span class=\"selector-class\">.absolute</span>&#123; <span class=\"attribute\">position</span>: absolute; <span class=\"attribute\">left</span>: <span class=\"number\">100px</span>; <span class=\"attribute\">height</span>: <span class=\"number\">100px</span>; &#125;</span><br></pre></td></tr></table></figure></p>\n<p><img src=\"http://o905ne85q.bkt.clouddn.com/75%5D1@NRTQ8$U9KTQ66SPL2A.png\" alt=\"image\"><br>可见：</p>\n<ul>\n<li>absolute元素脱离文档流</li>\n<li>absolute元素不占位，因此下一个符合普通流的元素会略过absolute元素排到其上一个元素的后方</li>\n</ul>\n<p>此时对于absolute元素的占位依然不大清晰，接下来我们给父元素添加margin-left: 200px的样式，如图<br><img src=\"http://o905ne85q.bkt.clouddn.com/07J25Y0F~@O%5D@ZAGZ~%25%60%28%29Y.png\" alt=\"image\"><br>很明显，absolute元素位置没有发生改变，这是因为该元素相对于document进行定位。</p>\n<ul>\n<li>absolute元素的定位是相对于static定位以外的第一个父元素进行定位</li>\n<li>当absolute的父元素position为static，则会继续往上查找，直到找到一个为relative/absolute/fixed的父元素作为定位参照物</li>\n<li>当absolute没有position为非static的父元素时，则会进行全局定位，即相对于文档document进行定位</li>\n</ul>\n<p>所以我们可以给父元素加上position=relative的样式，如图<br><img src=\"http://o905ne85q.bkt.clouddn.com/~NPVE%7D%7DZFR3$PH%609%5DFJQF2Y.png\" alt=\"image\"><br>此时absolute元素则相对于父元素进行定位，<a href=\"http://o9bc2k1st.bkt.clouddn.com/position-absolute.html\">查看页面效果</a>。</p>\n<h3 id=\"无定位的absolute\"><a href=\"#无定位的absolute\" class=\"headerlink\" title=\"无定位的absolute\"></a>无定位的absolute</h3><p>在使用absolute进行定位时，若我们只是将元素设置为position: absolute，而不对其进行定位（top, bottom, left, right），会是怎样的情况呢？<br>如图，<a href=\"http://o9bc2k1st.bkt.clouddn.com/position-absolute-without-position.html\">查看页面效果</a><br><img src=\"http://o905ne85q.bkt.clouddn.com/CG_14%7DVI%28TDCYFK%7BE$8SC%287.png\" alt=\"image\"><br>可见：</p>\n<ul>\n<li>未设置定位的absolute元素，其定位与其原本位置（position=static）相同</li>\n<li>此时absolute元素依然不占位，因此下一个符合普通流的元素会略过absolute元素排到其上一个元素的后方</li>\n</ul>\n<h3 id=\"fixed与文档流\"><a href=\"#fixed与文档流\" class=\"headerlink\" title=\"fixed与文档流\"></a>fixed与文档流</h3><p>fixed脱离文档流，相对于浏览器窗口来定位，且不占位<br>如图<br><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.parent</span> &#123; <span class=\"attribute\">border</span>: solid <span class=\"number\">1px</span> blue; <span class=\"attribute\">width</span>: <span class=\"number\">300px</span>; &#125; </span><br><span class=\"line\"><span class=\"selector-class\">.parent</span> &gt; <span class=\"selector-tag\">div</span> &#123; <span class=\"attribute\">border</span>: solid <span class=\"number\">1px</span> red; <span class=\"attribute\">height</span>: <span class=\"number\">100px</span>; <span class=\"attribute\">width</span>: <span class=\"number\">300px</span>; &#125; </span><br><span class=\"line\"><span class=\"selector-class\">.fixed</span> &#123; <span class=\"attribute\">position</span>: fixed; <span class=\"attribute\">left</span>: <span class=\"number\">100px</span>; <span class=\"attribute\">top</span>: <span class=\"number\">100px</span>; <span class=\"attribute\">background</span>: yellow; &#125;</span><br></pre></td></tr></table></figure></p>\n<p><img src=\"http://o905ne85q.bkt.clouddn.com/%28FNOAFPIA%5B80%25F%7D6%5B0CQ2%7DE.png\" alt=\"image\"><br>似乎跟相对于文档定位时的absolute元素没什么两样，即</p>\n<ul>\n<li>fixed元素脱离文档流</li>\n<li>fixed元素不占位</li>\n</ul>\n<p>接来下我们将页面填充满，如图，<a href=\"http://o9bc2k1st.bkt.clouddn.com/position-fixed-absolute.html\">查看页面效果</a><br><img src=\"http://o905ne85q.bkt.clouddn.com/K4OGL%5BF5~XP9NLRW%254X%7B55X.png\" alt=\"image\"><br>当我们进行页面滚动的时候，fixed元素位置没有发生变化，可见：</p>\n<ul>\n<li>fixed相对于浏览器窗口来定位，不管是否有static定位以外的父元素</li>\n<li>absolute元素会随着页面的滚动而滚动，而fixed不会</li>\n</ul>\n<p>也就是说，fixed元素相对于浏览器窗口进行定位，而无有static定位以外的父元素的absolute，则相对于document进行定位</p>\n<h2 id=\"z-index\"><a href=\"#z-index\" class=\"headerlink\" title=\"z-index\"></a>z-index</h2><hr>\n<h3 id=\"z-index简述\"><a href=\"#z-index简述\" class=\"headerlink\" title=\"z-index简述\"></a>z-index简述</h3><ul>\n<li>z-index属性定义了第三维度，默认为0</li>\n<li>z-index属性设置元素的堆叠顺序，拥有更高堆叠顺序的元素总是会处于堆叠顺序较低的元素的前面</li>\n<li>z-index只能在position属性值为relative或absolute或fixed的元素上有效<br>-</li>\n</ul>\n<h3 id=\"z-index在同级元素下的效果\"><a href=\"#z-index在同级元素下的效果\" class=\"headerlink\" title=\"z-index在同级元素下的效果\"></a>z-index在同级元素下的效果</h3><p>如图，<a href=\"http://o9bc2k1st.bkt.clouddn.com/position-z-index-same-level.html\">查看页面效果</a><br><img src=\"http://o905ne85q.bkt.clouddn.com/%60X74TE9%7D%28OFY%7BUK$MAW%5B%7B5O.png\" alt=\"image\"><br>可见：</p>\n<ul>\n<li>当同级元素不设置z-index或者z-index相等时，后面的元素会叠在前面的元素上方</li>\n<li>当同级元素z-index不同时，z-index大的元素会叠在z-index小的元素上方</li>\n</ul>\n<h3 id=\"z-index在不同级元素下的效果\"><a href=\"#z-index在不同级元素下的效果\" class=\"headerlink\" title=\"z-index在不同级元素下的效果\"></a>z-index在不同级元素下的效果</h3><p>如图，<a href=\"http://o9bc2k1st.bkt.clouddn.com/position-z-index-diff-level-1.html\">查看页面效果</a><br><img src=\"http://o905ne85q.bkt.clouddn.com/Q%7BFVVGE6NSP8WB~_3P7SZ$G.png\" alt=\"image\"><br>仔细看会发现个很有意思的现象，parent1和parent2为同级元素，parent2叠在parent1上方，但是parent2子元素却位于parent1子元素的下方。<br>parent1和parent2的position均为relative，是不是有些难以理解？这是因为：</p>\n<ul>\n<li>当向上追溯找不到含有z-index值的父元素的情况下，则可以视为自由的z-index元素</li>\n<li>自由的z-index元素可以与其他自由的定位元素来比较z-index的值，决定其堆叠顺序</li>\n</ul>\n<p>在这里，parent1和parent2均无设置z-index值，故在这里子元素的堆叠顺序是由自己的z-index值决定的。<br>接下来我们为两个parent均加上z-index，如图，<a href=\"http://o9bc2k1st.bkt.clouddn.com/position-z-index-diff-level-2.html\">查看页面效果</a><br><img src=\"http://o905ne85q.bkt.clouddn.com/PMVG4833%60U%29JC9%5BWK5W%601NC.png\" alt=\"image\"></p>\n<p>经测试，在parent2的z-index大于或者等于parent1的z-index的时候，parent2以及它的子元素均位于parent1以及其子元素的上方。<br>而当我们设置parent2的z-index小于parent1的z-index的时候，如图<br><img src=\"http://o905ne85q.bkt.clouddn.com/@22C%5D%5D9~A7%28%29%5B%60LZLD@%29%7BRF.png\" alt=\"image\"><br>此时parent2以及它的子元素均位于parent1以及其子元素的下方。<br>可见：</p>\n<ul>\n<li>z-index值只决定同一父元素中的同级子元素的堆叠顺序</li>\n<li>父元素的z-index值为子元素定义了堆叠顺序，即子元素依赖于父元素z-index值来获得页面中的堆叠顺序</li>\n</ul>\n<p>现在我们将parent2的z-index值取消，留下parent1的z-index值为2。<br>如图，<a href=\"http://o9bc2k1st.bkt.clouddn.com/position-z-index-diff-level-3.html\">查看页面效果</a><br><img src=\"http://o905ne85q.bkt.clouddn.com/G%5D6CTV7PXO%28UD7B%5B%7B%60%28U693.png\" alt=\"image\"><br>可见：</p>\n<ul>\n<li>自由的z-index元素可以与父元素的同级兄弟定位元素来比较z-index的值，决定其堆叠顺序</li>\n</ul>\n<h3 id=\"z-index与position-fixed\"><a href=\"#z-index与position-fixed\" class=\"headerlink\" title=\"z-index与position: fixed\"></a>z-index与position: fixed</h3><p>当初一直认为fixed的元素有种优先级特别高的感觉，但在z-index比较上却有了新发现，如图<br><img src=\"http://o905ne85q.bkt.clouddn.com/IN7X7L4FJ%5DYT%7DZPG~8_I%60@R.png\" alt=\"image\"><br>经测试，在不设置z-index值或者z-index值相等时，fixed元素和absolute元素堆叠顺序均由元素在文档中的先后位置决定，后出现的会在上面。<br>接下来我们给这几个子元素加上z-index值，如图<br><img src=\"http://o905ne85q.bkt.clouddn.com/FMC%60R%25%25LLKVM9OQ1~5~%29GQ3.png\" alt=\"image\"><br>这时候我们会有种想法，会不会fixed元素和absolute元素的堆叠规则一样呢？<br>现在我们将fixed元素移到parent元素外面，且parent元素z-index值依然为空，如图，<a href=\"http://o9bc2k1st.bkt.clouddn.com/position-z-index-fixed.html\">查看页面效果</a><br><img src=\"http://o905ne85q.bkt.clouddn.com/A%284RG%7BTP~2$%29%29ZE5Y2HW%7BOD.png\" alt=\"image\"><br>可见：</p>\n<ul>\n<li>尽管fixed定位方式与absolute不一致，它们的堆叠规则是一致的</li>\n</ul>\n<h3 id=\"z-index总结\"><a href=\"#z-index总结\" class=\"headerlink\" title=\"z-index总结\"></a>z-index总结</h3><ul>\n<li>无z-index或者z-index值相等时，堆叠顺序均由元素在文档中的先后位置决定，后出现的会在上面</li>\n<li>当向上追溯找不到含有z-index值的父元素的情况下，则可以视为自由的z-index元素</li>\n<li>自由的z-index元素可以与其他自由的定位元素或者父元素的同级兄弟定位元素来比较z-index的值，决定其堆叠顺序</li>\n<li>z-index值只决定同一父元素中的同级子元素的堆叠顺序</li>\n<li><p>父元素的z-index值为子元素定义了堆叠顺序，即子元素依赖于父元素z-index值来获得页面中的堆叠顺序</p>\n</li>\n<li><p>参考<br><a href=\"http://www.cnblogs.com/mind/archive/2012/04/01/2198995.html\">浅析CSS——元素重叠及position定位的z-index顺序</a></p>\n</li>\n<li><p>相关代码保存在<a href=\"https://github.com/godbasin/godbasin.github.io/tree/blog-codes/about-position\">about-position</a></p>\n</li>\n</ul>\n<h2 id=\"结束语\"><a href=\"#结束语\" class=\"headerlink\" title=\"结束语\"></a>结束语</h2><p>不得不说，写这篇文章的过程自己对position和z-index相关的原理和规则也熟悉了很多，总结也是一种学习的方式呢。</p>"},{"title":"前端在变，然而热情不变","date":"2016-06-17T19:59:57.000Z","_content":"本文作为本骚年正式开始技术博客的开篇，当然先渲染一下快乐的氛围。接着会大致介绍搭建这个博客的步骤。\n<!--more-->\n\n## 首先为第一篇博客开心一下\n-----\n或许在两个月前，本骚年还生活在远离github以及各种社区论坛的宅世界里。但即使是那样一个几乎与世隔绝的环境下，也依然满怀学习前端的热情。\n<!---->\n那时候做的事情不多，基本是些与jQuery打架，努力想解剖它，最后又握手言和的过家家。\n<!---->\n工作原因慢慢用上一些工具，也挑战自己上了框架、试着对代码进行抽离又封装，到如今在小伙伴的怂恿下试着在github搭博客。\n<!---->\n进步不得说不大，对于懒癌晚期只沉迷于学习远离、学习代码解析的骚年来说，各种各样的工具毫无疑问又增加了需要学习的范围。但，既来之则安之，有句话叫学无止境不是吗，要相信自己，哈哈。\n\n## 参考\n-----\n关于创建github博客：\n[http://blog.csdn.net/renfufei/article/details/37725057](http://blog.csdn.net/renfufei/article/details/37725057/)\nHexo搭建博客教程: \n[http://ibruce.info/2013/11/22/hexo-your-blog](http://ibruce.info/2013/11/22/hexo-your-blog/)\n知乎：Hexo好看的主题：\n[https://www.zhihu.com/question/24422335](https://www.zhihu.com/question/24422335)\n\n## 搭建步骤\n-----\n\n### 注册一个github账户\n\n### 创建github pages\n> 具体可参考Hexo搭建博客教程: \n> [http://ibruce.info/2013/11/22/hexo-your-blog](http://ibruce.info/2013/11/22/hexo-your-blog/)\n\n### 装载Hexo\n> 该过程需要安装node以及Git，具体可参考Hexo搭建博客教程: \n> [http://ibruce.info/2013/11/22/hexo-your-blog](http://ibruce.info/2013/11/22/hexo-your-blog/)\n\n### 选择自己喜欢的主题\n> Hexo主题可参考知乎：Hexo好看的主题：\n> [https://www.zhihu.com/question/24422335](https://www.zhihu.com/question/24422335)\n\n### 对模板和样式进行修改\n> Hexo装载的模板为ejs，炒鸡好懂的\n\n### 选择喜欢的插件和挂件，统计等\n> Hexo搭建博客教程里面有提及相关的部署\n\n### 部署到github上\n> 设置./_config.yml中Deployment相关，然后hexo deploy\n> 注意请先生成静态文件再进行部署哦\n> 若部署失败提示'ERROR Deployer not found: github', 是因为Hexo3.0以后type需要改成git\n> 1.安装 npm install hexo-deployer-git --save\n> 2.将deploy 的 type由github改为git\n\n## 此处粘贴Hexo常用命令\n-----\n> hexo new \"postName\"  ---新建文章\n> hexo new page \"pageName\"  ---新建页面\n> hexo clean  ---清除缓存 网页正常情况下可以忽略此条命令\n> hexo generate  ---生成静态页面至public目录\n> hexo server  ---开启预览访问端口（默认端口4000，'ctrl + c'关闭server）\n> hexo deploy  ---将.deploy目录部署到GitHub\n\n## 结束语\n-----\n然后一不小心就玩通宵了，赶紧补眠去。\nGood Day!","source":"_posts/first-blog.md","raw":"---\ntitle: 前端在变，然而热情不变\ndate: 2016-06-18 03:59:57\ncategories: web乱炖\ntags: 教程\n---\n本文作为本骚年正式开始技术博客的开篇，当然先渲染一下快乐的氛围。接着会大致介绍搭建这个博客的步骤。\n<!--more-->\n\n## 首先为第一篇博客开心一下\n-----\n或许在两个月前，本骚年还生活在远离github以及各种社区论坛的宅世界里。但即使是那样一个几乎与世隔绝的环境下，也依然满怀学习前端的热情。\n<!---->\n那时候做的事情不多，基本是些与jQuery打架，努力想解剖它，最后又握手言和的过家家。\n<!---->\n工作原因慢慢用上一些工具，也挑战自己上了框架、试着对代码进行抽离又封装，到如今在小伙伴的怂恿下试着在github搭博客。\n<!---->\n进步不得说不大，对于懒癌晚期只沉迷于学习远离、学习代码解析的骚年来说，各种各样的工具毫无疑问又增加了需要学习的范围。但，既来之则安之，有句话叫学无止境不是吗，要相信自己，哈哈。\n\n## 参考\n-----\n关于创建github博客：\n[http://blog.csdn.net/renfufei/article/details/37725057](http://blog.csdn.net/renfufei/article/details/37725057/)\nHexo搭建博客教程: \n[http://ibruce.info/2013/11/22/hexo-your-blog](http://ibruce.info/2013/11/22/hexo-your-blog/)\n知乎：Hexo好看的主题：\n[https://www.zhihu.com/question/24422335](https://www.zhihu.com/question/24422335)\n\n## 搭建步骤\n-----\n\n### 注册一个github账户\n\n### 创建github pages\n> 具体可参考Hexo搭建博客教程: \n> [http://ibruce.info/2013/11/22/hexo-your-blog](http://ibruce.info/2013/11/22/hexo-your-blog/)\n\n### 装载Hexo\n> 该过程需要安装node以及Git，具体可参考Hexo搭建博客教程: \n> [http://ibruce.info/2013/11/22/hexo-your-blog](http://ibruce.info/2013/11/22/hexo-your-blog/)\n\n### 选择自己喜欢的主题\n> Hexo主题可参考知乎：Hexo好看的主题：\n> [https://www.zhihu.com/question/24422335](https://www.zhihu.com/question/24422335)\n\n### 对模板和样式进行修改\n> Hexo装载的模板为ejs，炒鸡好懂的\n\n### 选择喜欢的插件和挂件，统计等\n> Hexo搭建博客教程里面有提及相关的部署\n\n### 部署到github上\n> 设置./_config.yml中Deployment相关，然后hexo deploy\n> 注意请先生成静态文件再进行部署哦\n> 若部署失败提示'ERROR Deployer not found: github', 是因为Hexo3.0以后type需要改成git\n> 1.安装 npm install hexo-deployer-git --save\n> 2.将deploy 的 type由github改为git\n\n## 此处粘贴Hexo常用命令\n-----\n> hexo new \"postName\"  ---新建文章\n> hexo new page \"pageName\"  ---新建页面\n> hexo clean  ---清除缓存 网页正常情况下可以忽略此条命令\n> hexo generate  ---生成静态页面至public目录\n> hexo server  ---开启预览访问端口（默认端口4000，'ctrl + c'关闭server）\n> hexo deploy  ---将.deploy目录部署到GitHub\n\n## 结束语\n-----\n然后一不小心就玩通宵了，赶紧补眠去。\nGood Day!","slug":"first-blog","published":1,"updated":"2016-06-24T13:57:16.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cirrwvo2t000j38l5j50wgtih","content":"<p>本文作为本骚年正式开始技术博客的开篇，当然先渲染一下快乐的氛围。接着会大致介绍搭建这个博客的步骤。<br><a id=\"more\"></a></p>\n<h2 id=\"首先为第一篇博客开心一下\"><a href=\"#首先为第一篇博客开心一下\" class=\"headerlink\" title=\"首先为第一篇博客开心一下\"></a>首先为第一篇博客开心一下</h2><hr>\n<p>或许在两个月前，本骚年还生活在远离github以及各种社区论坛的宅世界里。但即使是那样一个几乎与世隔绝的环境下，也依然满怀学习前端的热情。<br><!----><br>那时候做的事情不多，基本是些与jQuery打架，努力想解剖它，最后又握手言和的过家家。<br><!----><br>工作原因慢慢用上一些工具，也挑战自己上了框架、试着对代码进行抽离又封装，到如今在小伙伴的怂恿下试着在github搭博客。<br><!----><br>进步不得说不大，对于懒癌晚期只沉迷于学习远离、学习代码解析的骚年来说，各种各样的工具毫无疑问又增加了需要学习的范围。但，既来之则安之，有句话叫学无止境不是吗，要相信自己，哈哈。</p>\n<h2 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h2><hr>\n<p>关于创建github博客：<br><a href=\"http://blog.csdn.net/renfufei/article/details/37725057/\" target=\"_blank\" rel=\"external\">http://blog.csdn.net/renfufei/article/details/37725057</a><br>Hexo搭建博客教程:<br><a href=\"http://ibruce.info/2013/11/22/hexo-your-blog/\" target=\"_blank\" rel=\"external\">http://ibruce.info/2013/11/22/hexo-your-blog</a><br>知乎：Hexo好看的主题：<br><a href=\"https://www.zhihu.com/question/24422335\" target=\"_blank\" rel=\"external\">https://www.zhihu.com/question/24422335</a></p>\n<h2 id=\"搭建步骤\"><a href=\"#搭建步骤\" class=\"headerlink\" title=\"搭建步骤\"></a>搭建步骤</h2><hr>\n<h3 id=\"注册一个github账户\"><a href=\"#注册一个github账户\" class=\"headerlink\" title=\"注册一个github账户\"></a>注册一个github账户</h3><h3 id=\"创建github-pages\"><a href=\"#创建github-pages\" class=\"headerlink\" title=\"创建github pages\"></a>创建github pages</h3><blockquote>\n<p>具体可参考Hexo搭建博客教程:<br><a href=\"http://ibruce.info/2013/11/22/hexo-your-blog/\" target=\"_blank\" rel=\"external\">http://ibruce.info/2013/11/22/hexo-your-blog</a></p>\n</blockquote>\n<h3 id=\"装载Hexo\"><a href=\"#装载Hexo\" class=\"headerlink\" title=\"装载Hexo\"></a>装载Hexo</h3><blockquote>\n<p>该过程需要安装node以及Git，具体可参考Hexo搭建博客教程:<br><a href=\"http://ibruce.info/2013/11/22/hexo-your-blog/\" target=\"_blank\" rel=\"external\">http://ibruce.info/2013/11/22/hexo-your-blog</a></p>\n</blockquote>\n<h3 id=\"选择自己喜欢的主题\"><a href=\"#选择自己喜欢的主题\" class=\"headerlink\" title=\"选择自己喜欢的主题\"></a>选择自己喜欢的主题</h3><blockquote>\n<p>Hexo主题可参考知乎：Hexo好看的主题：<br><a href=\"https://www.zhihu.com/question/24422335\" target=\"_blank\" rel=\"external\">https://www.zhihu.com/question/24422335</a></p>\n</blockquote>\n<h3 id=\"对模板和样式进行修改\"><a href=\"#对模板和样式进行修改\" class=\"headerlink\" title=\"对模板和样式进行修改\"></a>对模板和样式进行修改</h3><blockquote>\n<p>Hexo装载的模板为ejs，炒鸡好懂的</p>\n</blockquote>\n<h3 id=\"选择喜欢的插件和挂件，统计等\"><a href=\"#选择喜欢的插件和挂件，统计等\" class=\"headerlink\" title=\"选择喜欢的插件和挂件，统计等\"></a>选择喜欢的插件和挂件，统计等</h3><blockquote>\n<p>Hexo搭建博客教程里面有提及相关的部署</p>\n</blockquote>\n<h3 id=\"部署到github上\"><a href=\"#部署到github上\" class=\"headerlink\" title=\"部署到github上\"></a>部署到github上</h3><blockquote>\n<p>设置./_config.yml中Deployment相关，然后hexo deploy<br>注意请先生成静态文件再进行部署哦<br>若部署失败提示’ERROR Deployer not found: github’, 是因为Hexo3.0以后type需要改成git<br>1.安装 npm install hexo-deployer-git –save<br>2.将deploy 的 type由github改为git</p>\n</blockquote>\n<h2 id=\"此处粘贴Hexo常用命令\"><a href=\"#此处粘贴Hexo常用命令\" class=\"headerlink\" title=\"此处粘贴Hexo常用命令\"></a>此处粘贴Hexo常用命令</h2><hr>\n<blockquote>\n<p>hexo new “postName”  —新建文章<br>hexo new page “pageName”  —新建页面<br>hexo clean  —清除缓存 网页正常情况下可以忽略此条命令<br>hexo generate  —生成静态页面至public目录<br>hexo server  —开启预览访问端口（默认端口4000，’ctrl + c’关闭server）<br>hexo deploy  —将.deploy目录部署到GitHub</p>\n</blockquote>\n<h2 id=\"结束语\"><a href=\"#结束语\" class=\"headerlink\" title=\"结束语\"></a>结束语</h2><hr>\n<p>然后一不小心就玩通宵了，赶紧补眠去。<br>Good Day!</p>\n","excerpt":"<p>本文作为本骚年正式开始技术博客的开篇，当然先渲染一下快乐的氛围。接着会大致介绍搭建这个博客的步骤。<br>","more":"</p>\n<h2 id=\"首先为第一篇博客开心一下\"><a href=\"#首先为第一篇博客开心一下\" class=\"headerlink\" title=\"首先为第一篇博客开心一下\"></a>首先为第一篇博客开心一下</h2><hr>\n<p>或许在两个月前，本骚年还生活在远离github以及各种社区论坛的宅世界里。但即使是那样一个几乎与世隔绝的环境下，也依然满怀学习前端的热情。<br><!----><br>那时候做的事情不多，基本是些与jQuery打架，努力想解剖它，最后又握手言和的过家家。<br><!----><br>工作原因慢慢用上一些工具，也挑战自己上了框架、试着对代码进行抽离又封装，到如今在小伙伴的怂恿下试着在github搭博客。<br><!----><br>进步不得说不大，对于懒癌晚期只沉迷于学习远离、学习代码解析的骚年来说，各种各样的工具毫无疑问又增加了需要学习的范围。但，既来之则安之，有句话叫学无止境不是吗，要相信自己，哈哈。</p>\n<h2 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h2><hr>\n<p>关于创建github博客：<br><a href=\"http://blog.csdn.net/renfufei/article/details/37725057/\">http://blog.csdn.net/renfufei/article/details/37725057</a><br>Hexo搭建博客教程:<br><a href=\"http://ibruce.info/2013/11/22/hexo-your-blog/\">http://ibruce.info/2013/11/22/hexo-your-blog</a><br>知乎：Hexo好看的主题：<br><a href=\"https://www.zhihu.com/question/24422335\">https://www.zhihu.com/question/24422335</a></p>\n<h2 id=\"搭建步骤\"><a href=\"#搭建步骤\" class=\"headerlink\" title=\"搭建步骤\"></a>搭建步骤</h2><hr>\n<h3 id=\"注册一个github账户\"><a href=\"#注册一个github账户\" class=\"headerlink\" title=\"注册一个github账户\"></a>注册一个github账户</h3><h3 id=\"创建github-pages\"><a href=\"#创建github-pages\" class=\"headerlink\" title=\"创建github pages\"></a>创建github pages</h3><blockquote>\n<p>具体可参考Hexo搭建博客教程:<br><a href=\"http://ibruce.info/2013/11/22/hexo-your-blog/\">http://ibruce.info/2013/11/22/hexo-your-blog</a></p>\n</blockquote>\n<h3 id=\"装载Hexo\"><a href=\"#装载Hexo\" class=\"headerlink\" title=\"装载Hexo\"></a>装载Hexo</h3><blockquote>\n<p>该过程需要安装node以及Git，具体可参考Hexo搭建博客教程:<br><a href=\"http://ibruce.info/2013/11/22/hexo-your-blog/\">http://ibruce.info/2013/11/22/hexo-your-blog</a></p>\n</blockquote>\n<h3 id=\"选择自己喜欢的主题\"><a href=\"#选择自己喜欢的主题\" class=\"headerlink\" title=\"选择自己喜欢的主题\"></a>选择自己喜欢的主题</h3><blockquote>\n<p>Hexo主题可参考知乎：Hexo好看的主题：<br><a href=\"https://www.zhihu.com/question/24422335\">https://www.zhihu.com/question/24422335</a></p>\n</blockquote>\n<h3 id=\"对模板和样式进行修改\"><a href=\"#对模板和样式进行修改\" class=\"headerlink\" title=\"对模板和样式进行修改\"></a>对模板和样式进行修改</h3><blockquote>\n<p>Hexo装载的模板为ejs，炒鸡好懂的</p>\n</blockquote>\n<h3 id=\"选择喜欢的插件和挂件，统计等\"><a href=\"#选择喜欢的插件和挂件，统计等\" class=\"headerlink\" title=\"选择喜欢的插件和挂件，统计等\"></a>选择喜欢的插件和挂件，统计等</h3><blockquote>\n<p>Hexo搭建博客教程里面有提及相关的部署</p>\n</blockquote>\n<h3 id=\"部署到github上\"><a href=\"#部署到github上\" class=\"headerlink\" title=\"部署到github上\"></a>部署到github上</h3><blockquote>\n<p>设置./_config.yml中Deployment相关，然后hexo deploy<br>注意请先生成静态文件再进行部署哦<br>若部署失败提示’ERROR Deployer not found: github’, 是因为Hexo3.0以后type需要改成git<br>1.安装 npm install hexo-deployer-git –save<br>2.将deploy 的 type由github改为git</p>\n</blockquote>\n<h2 id=\"此处粘贴Hexo常用命令\"><a href=\"#此处粘贴Hexo常用命令\" class=\"headerlink\" title=\"此处粘贴Hexo常用命令\"></a>此处粘贴Hexo常用命令</h2><hr>\n<blockquote>\n<p>hexo new “postName”  —新建文章<br>hexo new page “pageName”  —新建页面<br>hexo clean  —清除缓存 网页正常情况下可以忽略此条命令<br>hexo generate  —生成静态页面至public目录<br>hexo server  —开启预览访问端口（默认端口4000，’ctrl + c’关闭server）<br>hexo deploy  —将.deploy目录部署到GitHub</p>\n</blockquote>\n<h2 id=\"结束语\"><a href=\"#结束语\" class=\"headerlink\" title=\"结束语\"></a>结束语</h2><hr>\n<p>然后一不小心就玩通宵了，赶紧补眠去。<br>Good Day!</p>"},{"title":"jQuery响应式瀑布流","date":"2016-06-20T12:42:49.000Z","_content":"之前用jQuery写过一个响应式的瀑布流。本文介绍实现方法。\n<!--more-->\n\n代码放在github上，有兴趣的小伙伴可以下载看\n[responsive-waterfall](https://github.com/godbasin/godbasin.github.io/tree/blog-codes/responsive-waterfall)\n\n最终效果图如下，改变浏览器大小效果更棒哦[点击查看页面](http://o922dcmwp.bkt.clouddn.com/index.html)\n![image](http://o905ne85q.bkt.clouddn.com/responsive-waterfall.png)\n\n以下我们将每个瀑布流盒子简称为box\n\n## 使用数组记录每个box宽和高\n-----\n\n### 设置不同屏幕宽度下每一行box的数量\n- 使用$(window).width()获取屏幕宽度\n- 根据不同屏幕宽度设置每一行box的数量\n- 得到每个box的宽度\n- 这里使用最傻的方法计算，有待优化\n\n``` javascript\nvar num = 4; //每行box数量\nif ($(window).width() <= 500) num = 1;\nif ($(window).width() > 500) num = 2;\nif ($(window).width() > 800) num = 3;\nif ($(window).width() > 1200) num = 5;\nvar boxWidth = $(window).width() / num; //每个box宽度\n```\n\n### 创建数组对象\n- 每个数组元素为对象，该对象属性有width/height/top/left等\n\n``` javascript\nfunction boxStyle(width, height, top, left) {\n\tthis.position = \"absolute\";\n\tthis.width = width;\n\tthis.height = height;\n\tthis.top = top;\n\tthis.left = left;\n}\n```\n\n### 创建数组记录元素宽高\n这里简述一下瀑布流原理：第一行box从左往右排列，第二行开始box的添加位置为各列中高度最小的一列，添加后该列高度则加上该box高度，以此类推\n- 设置每个元素宽度，高度自定义auto\n- 创建数组boxStyleArr来保存每个元素宽高\n- 使用数组boxArr保存每一竖列的高度，即每一竖列最后一个box的底部位置\n- 使用瀑布流原理计算每个box的位置（left和top）,并保存到数组boxStyleArr\n\n``` javascript\nbox.each(function(index, value) {\n\t//设置每个元素宽度，高度自定义auto\n\t$(value).css({\n\t\t\"width\": boxWidth,\n\t\t\"height\": \"auto\"\n\t});\n\t//数组boxStyleArr保存每个元素宽高\n\tboxStyleArr[index] = new boxStyle();\n\tboxStyleArr[index].width = boxWidth;\n\tboxStyleArr[index].height = box.eq(index).height();\n\t//首行box从左到右依次排列\n\tif (index < num) {\n\t\tboxArr[index] = boxStyleArr[index].height;\n\t\tboxStyleArr[index].left = boxWidth * index;\n\t\tboxStyleArr[index].top = 0;\n\t//瀑布流原理计算每个box的位置（left和top）\n\t} else {\n\t\tvar minboxHeight = Math.min.apply(null, boxArr);\n\t\tvar minboxIndex = $.inArray(minboxHeight, boxArr);\n\t\tboxStyleArr[index].left = boxStyleArr[minboxIndex].left;\n\t\tboxStyleArr[index].top = minboxHeight;\n\t\tboxArr[minboxIndex] += boxStyleArr[index].height;\n\t}\n});\n```\n\n\n## 放置box\n-----\n- 根据数组boxStyleArr，将每个box使用绝对定位放置到相应位置\n- 这里使用了动画效果，使所有box从左上角伸展\n\n``` javascript\nfunction boxLocation() {\n\tvar box = $(\".response\");\n\tvar boxStyleArr = [];\n\tboxArrBuild(boxStyleArr);\n\tbox.each(function(index, value) {\n\t\t//设置每个box最初位置为左上角，宽高为0\n\t\t$(value).css({\n\t\t\t\"position\": \"absolute\",\n\t\t\t\"top\": 0,\n\t\t\t\"left\": 0,\n\t\t\t\"width\": 0,\n\t\t\t\"height\": 0\n\t\t});\n\t\t//动画效果使box们进行伸展\n\t\t$(value).animate({\n\t\t\ttop: boxStyleArr[index].top,\n\t\t\tleft: boxStyleArr[index].left,\n\t\t\theight: boxStyleArr[index].height,\n\t\t\twidth: boxStyleArr[index].width\n\t\t}, 500);\n\t});\n}\n```\n\n## 绑定屏幕宽度改变事件\n-----\n- 当屏幕大小改变时，触发重新计算box位置\n  - 为了避免浏览器频繁改变宽度，这里增加了个小判断\n  - 当屏幕改变后200毫秒内不再改变，才触发重新计算\n\n``` javascript\n$(window).on(\"load\", function() {\n\tboxLocation();\n\twindow.onresize = function() {\n\t\twindowWidth = $(window).width();\n\t\tif (interval == null) {\n\t\t\tinterval = setInterval(\"test()\", 200);\n\t\t}\n\t}\n});\n```\n\n## 待完善的地方\n-----\n### 考虑图片加载\n- 图片加载过程可能影响对box高度判断\n- 可通过img.load来确保图片加载完成或者失败之后才进行计算\n### 代码优化&封装\n- 尽情发挥你的创造力吧\n\n## 结束语\n-----\n这个效果是我从别人的博客看到的，然后自己用jQuery实现，这也不失为创造的乐趣呢。","source":"_posts/responsive-waterfall.md","raw":"---\ntitle: jQuery响应式瀑布流\ndate: 2016-06-20 20:42:49\ncategories: jQuery杂烩\ntags: 逻辑实现\n---\n之前用jQuery写过一个响应式的瀑布流。本文介绍实现方法。\n<!--more-->\n\n代码放在github上，有兴趣的小伙伴可以下载看\n[responsive-waterfall](https://github.com/godbasin/godbasin.github.io/tree/blog-codes/responsive-waterfall)\n\n最终效果图如下，改变浏览器大小效果更棒哦[点击查看页面](http://o922dcmwp.bkt.clouddn.com/index.html)\n![image](http://o905ne85q.bkt.clouddn.com/responsive-waterfall.png)\n\n以下我们将每个瀑布流盒子简称为box\n\n## 使用数组记录每个box宽和高\n-----\n\n### 设置不同屏幕宽度下每一行box的数量\n- 使用$(window).width()获取屏幕宽度\n- 根据不同屏幕宽度设置每一行box的数量\n- 得到每个box的宽度\n- 这里使用最傻的方法计算，有待优化\n\n``` javascript\nvar num = 4; //每行box数量\nif ($(window).width() <= 500) num = 1;\nif ($(window).width() > 500) num = 2;\nif ($(window).width() > 800) num = 3;\nif ($(window).width() > 1200) num = 5;\nvar boxWidth = $(window).width() / num; //每个box宽度\n```\n\n### 创建数组对象\n- 每个数组元素为对象，该对象属性有width/height/top/left等\n\n``` javascript\nfunction boxStyle(width, height, top, left) {\n\tthis.position = \"absolute\";\n\tthis.width = width;\n\tthis.height = height;\n\tthis.top = top;\n\tthis.left = left;\n}\n```\n\n### 创建数组记录元素宽高\n这里简述一下瀑布流原理：第一行box从左往右排列，第二行开始box的添加位置为各列中高度最小的一列，添加后该列高度则加上该box高度，以此类推\n- 设置每个元素宽度，高度自定义auto\n- 创建数组boxStyleArr来保存每个元素宽高\n- 使用数组boxArr保存每一竖列的高度，即每一竖列最后一个box的底部位置\n- 使用瀑布流原理计算每个box的位置（left和top）,并保存到数组boxStyleArr\n\n``` javascript\nbox.each(function(index, value) {\n\t//设置每个元素宽度，高度自定义auto\n\t$(value).css({\n\t\t\"width\": boxWidth,\n\t\t\"height\": \"auto\"\n\t});\n\t//数组boxStyleArr保存每个元素宽高\n\tboxStyleArr[index] = new boxStyle();\n\tboxStyleArr[index].width = boxWidth;\n\tboxStyleArr[index].height = box.eq(index).height();\n\t//首行box从左到右依次排列\n\tif (index < num) {\n\t\tboxArr[index] = boxStyleArr[index].height;\n\t\tboxStyleArr[index].left = boxWidth * index;\n\t\tboxStyleArr[index].top = 0;\n\t//瀑布流原理计算每个box的位置（left和top）\n\t} else {\n\t\tvar minboxHeight = Math.min.apply(null, boxArr);\n\t\tvar minboxIndex = $.inArray(minboxHeight, boxArr);\n\t\tboxStyleArr[index].left = boxStyleArr[minboxIndex].left;\n\t\tboxStyleArr[index].top = minboxHeight;\n\t\tboxArr[minboxIndex] += boxStyleArr[index].height;\n\t}\n});\n```\n\n\n## 放置box\n-----\n- 根据数组boxStyleArr，将每个box使用绝对定位放置到相应位置\n- 这里使用了动画效果，使所有box从左上角伸展\n\n``` javascript\nfunction boxLocation() {\n\tvar box = $(\".response\");\n\tvar boxStyleArr = [];\n\tboxArrBuild(boxStyleArr);\n\tbox.each(function(index, value) {\n\t\t//设置每个box最初位置为左上角，宽高为0\n\t\t$(value).css({\n\t\t\t\"position\": \"absolute\",\n\t\t\t\"top\": 0,\n\t\t\t\"left\": 0,\n\t\t\t\"width\": 0,\n\t\t\t\"height\": 0\n\t\t});\n\t\t//动画效果使box们进行伸展\n\t\t$(value).animate({\n\t\t\ttop: boxStyleArr[index].top,\n\t\t\tleft: boxStyleArr[index].left,\n\t\t\theight: boxStyleArr[index].height,\n\t\t\twidth: boxStyleArr[index].width\n\t\t}, 500);\n\t});\n}\n```\n\n## 绑定屏幕宽度改变事件\n-----\n- 当屏幕大小改变时，触发重新计算box位置\n  - 为了避免浏览器频繁改变宽度，这里增加了个小判断\n  - 当屏幕改变后200毫秒内不再改变，才触发重新计算\n\n``` javascript\n$(window).on(\"load\", function() {\n\tboxLocation();\n\twindow.onresize = function() {\n\t\twindowWidth = $(window).width();\n\t\tif (interval == null) {\n\t\t\tinterval = setInterval(\"test()\", 200);\n\t\t}\n\t}\n});\n```\n\n## 待完善的地方\n-----\n### 考虑图片加载\n- 图片加载过程可能影响对box高度判断\n- 可通过img.load来确保图片加载完成或者失败之后才进行计算\n### 代码优化&封装\n- 尽情发挥你的创造力吧\n\n## 结束语\n-----\n这个效果是我从别人的博客看到的，然后自己用jQuery实现，这也不失为创造的乐趣呢。","slug":"responsive-waterfall","published":1,"updated":"2016-06-24T14:12:27.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cirrwvo2y000o38l568ocpy64","content":"<p>之前用jQuery写过一个响应式的瀑布流。本文介绍实现方法。<br><a id=\"more\"></a></p>\n<p>代码放在github上，有兴趣的小伙伴可以下载看<br><a href=\"https://github.com/godbasin/godbasin.github.io/tree/blog-codes/responsive-waterfall\" target=\"_blank\" rel=\"external\">responsive-waterfall</a></p>\n<p>最终效果图如下，改变浏览器大小效果更棒哦<a href=\"http://o922dcmwp.bkt.clouddn.com/index.html\" target=\"_blank\" rel=\"external\">点击查看页面</a><br><img src=\"http://o905ne85q.bkt.clouddn.com/responsive-waterfall.png\" alt=\"image\"></p>\n<p>以下我们将每个瀑布流盒子简称为box</p>\n<h2 id=\"使用数组记录每个box宽和高\"><a href=\"#使用数组记录每个box宽和高\" class=\"headerlink\" title=\"使用数组记录每个box宽和高\"></a>使用数组记录每个box宽和高</h2><hr>\n<h3 id=\"设置不同屏幕宽度下每一行box的数量\"><a href=\"#设置不同屏幕宽度下每一行box的数量\" class=\"headerlink\" title=\"设置不同屏幕宽度下每一行box的数量\"></a>设置不同屏幕宽度下每一行box的数量</h3><ul>\n<li>使用$(window).width()获取屏幕宽度</li>\n<li>根据不同屏幕宽度设置每一行box的数量</li>\n<li>得到每个box的宽度</li>\n<li>这里使用最傻的方法计算，有待优化</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> num = <span class=\"number\">4</span>; <span class=\"comment\">//每行box数量</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> ($(<span class=\"built_in\">window</span>).width() &lt;= <span class=\"number\">500</span>) num = <span class=\"number\">1</span>;</span><br><span class=\"line\"><span class=\"keyword\">if</span> ($(<span class=\"built_in\">window</span>).width() &gt; <span class=\"number\">500</span>) num = <span class=\"number\">2</span>;</span><br><span class=\"line\"><span class=\"keyword\">if</span> ($(<span class=\"built_in\">window</span>).width() &gt; <span class=\"number\">800</span>) num = <span class=\"number\">3</span>;</span><br><span class=\"line\"><span class=\"keyword\">if</span> ($(<span class=\"built_in\">window</span>).width() &gt; <span class=\"number\">1200</span>) num = <span class=\"number\">5</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> boxWidth = $(<span class=\"built_in\">window</span>).width() / num; <span class=\"comment\">//每个box宽度</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"创建数组对象\"><a href=\"#创建数组对象\" class=\"headerlink\" title=\"创建数组对象\"></a>创建数组对象</h3><ul>\n<li>每个数组元素为对象，该对象属性有width/height/top/left等</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">boxStyle</span>(<span class=\"params\">width, height, top, left</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.position = <span class=\"string\">\"absolute\"</span>;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.width = width;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.height = height;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.top = top;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.left = left;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"创建数组记录元素宽高\"><a href=\"#创建数组记录元素宽高\" class=\"headerlink\" title=\"创建数组记录元素宽高\"></a>创建数组记录元素宽高</h3><p>这里简述一下瀑布流原理：第一行box从左往右排列，第二行开始box的添加位置为各列中高度最小的一列，添加后该列高度则加上该box高度，以此类推</p>\n<ul>\n<li>设置每个元素宽度，高度自定义auto</li>\n<li>创建数组boxStyleArr来保存每个元素宽高</li>\n<li>使用数组boxArr保存每一竖列的高度，即每一竖列最后一个box的底部位置</li>\n<li>使用瀑布流原理计算每个box的位置（left和top）,并保存到数组boxStyleArr</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">box.each(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">index, value</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">//设置每个元素宽度，高度自定义auto</span></span><br><span class=\"line\">  $(value).css(&#123;</span><br><span class=\"line\">    <span class=\"string\">\"width\"</span>: boxWidth,</span><br><span class=\"line\">    <span class=\"string\">\"height\"</span>: <span class=\"string\">\"auto\"</span></span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">  <span class=\"comment\">//数组boxStyleArr保存每个元素宽高</span></span><br><span class=\"line\">  boxStyleArr[index] = <span class=\"keyword\">new</span> boxStyle();</span><br><span class=\"line\">  boxStyleArr[index].width = boxWidth;</span><br><span class=\"line\">  boxStyleArr[index].height = box.eq(index).height();</span><br><span class=\"line\">  <span class=\"comment\">//首行box从左到右依次排列</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (index &lt; num) &#123;</span><br><span class=\"line\">    boxArr[index] = boxStyleArr[index].height;</span><br><span class=\"line\">    boxStyleArr[index].left = boxWidth * index;</span><br><span class=\"line\">    boxStyleArr[index].top = <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"comment\">//瀑布流原理计算每个box的位置（left和top）</span></span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> minboxHeight = <span class=\"built_in\">Math</span>.min.apply(<span class=\"literal\">null</span>, boxArr);</span><br><span class=\"line\">    <span class=\"keyword\">var</span> minboxIndex = $.inArray(minboxHeight, boxArr);</span><br><span class=\"line\">    boxStyleArr[index].left = boxStyleArr[minboxIndex].left;</span><br><span class=\"line\">    boxStyleArr[index].top = minboxHeight;</span><br><span class=\"line\">    boxArr[minboxIndex] += boxStyleArr[index].height;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<h2 id=\"放置box\"><a href=\"#放置box\" class=\"headerlink\" title=\"放置box\"></a>放置box</h2><hr>\n<ul>\n<li>根据数组boxStyleArr，将每个box使用绝对定位放置到相应位置</li>\n<li>这里使用了动画效果，使所有box从左上角伸展</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">boxLocation</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> box = $(<span class=\"string\">\".response\"</span>);</span><br><span class=\"line\">  <span class=\"keyword\">var</span> boxStyleArr = [];</span><br><span class=\"line\">  boxArrBuild(boxStyleArr);</span><br><span class=\"line\">  box.each(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">index, value</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//设置每个box最初位置为左上角，宽高为0</span></span><br><span class=\"line\">    $(value).css(&#123;</span><br><span class=\"line\">      <span class=\"string\">\"position\"</span>: <span class=\"string\">\"absolute\"</span>,</span><br><span class=\"line\">      <span class=\"string\">\"top\"</span>: <span class=\"number\">0</span>,</span><br><span class=\"line\">      <span class=\"string\">\"left\"</span>: <span class=\"number\">0</span>,</span><br><span class=\"line\">      <span class=\"string\">\"width\"</span>: <span class=\"number\">0</span>,</span><br><span class=\"line\">      <span class=\"string\">\"height\"</span>: <span class=\"number\">0</span></span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">    <span class=\"comment\">//动画效果使box们进行伸展</span></span><br><span class=\"line\">    $(value).animate(&#123;</span><br><span class=\"line\">      top: boxStyleArr[index].top,</span><br><span class=\"line\">      left: boxStyleArr[index].left,</span><br><span class=\"line\">      height: boxStyleArr[index].height,</span><br><span class=\"line\">      width: boxStyleArr[index].width</span><br><span class=\"line\">    &#125;, <span class=\"number\">500</span>);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"绑定屏幕宽度改变事件\"><a href=\"#绑定屏幕宽度改变事件\" class=\"headerlink\" title=\"绑定屏幕宽度改变事件\"></a>绑定屏幕宽度改变事件</h2><hr>\n<ul>\n<li>当屏幕大小改变时，触发重新计算box位置<ul>\n<li>为了避免浏览器频繁改变宽度，这里增加了个小判断</li>\n<li>当屏幕改变后200毫秒内不再改变，才触发重新计算</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$(<span class=\"built_in\">window</span>).on(<span class=\"string\">\"load\"</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  boxLocation();</span><br><span class=\"line\">  <span class=\"built_in\">window</span>.onresize = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    windowWidth = $(<span class=\"built_in\">window</span>).width();</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (interval == <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">      interval = setInterval(<span class=\"string\">\"test()\"</span>, <span class=\"number\">200</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<h2 id=\"待完善的地方\"><a href=\"#待完善的地方\" class=\"headerlink\" title=\"待完善的地方\"></a>待完善的地方</h2><hr>\n<h3 id=\"考虑图片加载\"><a href=\"#考虑图片加载\" class=\"headerlink\" title=\"考虑图片加载\"></a>考虑图片加载</h3><ul>\n<li>图片加载过程可能影响对box高度判断</li>\n<li>可通过img.load来确保图片加载完成或者失败之后才进行计算<h3 id=\"代码优化-amp-封装\"><a href=\"#代码优化-amp-封装\" class=\"headerlink\" title=\"代码优化&amp;封装\"></a>代码优化&amp;封装</h3></li>\n<li>尽情发挥你的创造力吧</li>\n</ul>\n<h2 id=\"结束语\"><a href=\"#结束语\" class=\"headerlink\" title=\"结束语\"></a>结束语</h2><hr>\n<p>这个效果是我从别人的博客看到的，然后自己用jQuery实现，这也不失为创造的乐趣呢。</p>\n","excerpt":"<p>之前用jQuery写过一个响应式的瀑布流。本文介绍实现方法。<br>","more":"</p>\n<p>代码放在github上，有兴趣的小伙伴可以下载看<br><a href=\"https://github.com/godbasin/godbasin.github.io/tree/blog-codes/responsive-waterfall\">responsive-waterfall</a></p>\n<p>最终效果图如下，改变浏览器大小效果更棒哦<a href=\"http://o922dcmwp.bkt.clouddn.com/index.html\">点击查看页面</a><br><img src=\"http://o905ne85q.bkt.clouddn.com/responsive-waterfall.png\" alt=\"image\"></p>\n<p>以下我们将每个瀑布流盒子简称为box</p>\n<h2 id=\"使用数组记录每个box宽和高\"><a href=\"#使用数组记录每个box宽和高\" class=\"headerlink\" title=\"使用数组记录每个box宽和高\"></a>使用数组记录每个box宽和高</h2><hr>\n<h3 id=\"设置不同屏幕宽度下每一行box的数量\"><a href=\"#设置不同屏幕宽度下每一行box的数量\" class=\"headerlink\" title=\"设置不同屏幕宽度下每一行box的数量\"></a>设置不同屏幕宽度下每一行box的数量</h3><ul>\n<li>使用$(window).width()获取屏幕宽度</li>\n<li>根据不同屏幕宽度设置每一行box的数量</li>\n<li>得到每个box的宽度</li>\n<li>这里使用最傻的方法计算，有待优化</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> num = <span class=\"number\">4</span>; <span class=\"comment\">//每行box数量</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> ($(<span class=\"built_in\">window</span>).width() &lt;= <span class=\"number\">500</span>) num = <span class=\"number\">1</span>;</span><br><span class=\"line\"><span class=\"keyword\">if</span> ($(<span class=\"built_in\">window</span>).width() &gt; <span class=\"number\">500</span>) num = <span class=\"number\">2</span>;</span><br><span class=\"line\"><span class=\"keyword\">if</span> ($(<span class=\"built_in\">window</span>).width() &gt; <span class=\"number\">800</span>) num = <span class=\"number\">3</span>;</span><br><span class=\"line\"><span class=\"keyword\">if</span> ($(<span class=\"built_in\">window</span>).width() &gt; <span class=\"number\">1200</span>) num = <span class=\"number\">5</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> boxWidth = $(<span class=\"built_in\">window</span>).width() / num; <span class=\"comment\">//每个box宽度</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"创建数组对象\"><a href=\"#创建数组对象\" class=\"headerlink\" title=\"创建数组对象\"></a>创建数组对象</h3><ul>\n<li>每个数组元素为对象，该对象属性有width/height/top/left等</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">boxStyle</span>(<span class=\"params\">width, height, top, left</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.position = <span class=\"string\">\"absolute\"</span>;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.width = width;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.height = height;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.top = top;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.left = left;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"创建数组记录元素宽高\"><a href=\"#创建数组记录元素宽高\" class=\"headerlink\" title=\"创建数组记录元素宽高\"></a>创建数组记录元素宽高</h3><p>这里简述一下瀑布流原理：第一行box从左往右排列，第二行开始box的添加位置为各列中高度最小的一列，添加后该列高度则加上该box高度，以此类推</p>\n<ul>\n<li>设置每个元素宽度，高度自定义auto</li>\n<li>创建数组boxStyleArr来保存每个元素宽高</li>\n<li>使用数组boxArr保存每一竖列的高度，即每一竖列最后一个box的底部位置</li>\n<li>使用瀑布流原理计算每个box的位置（left和top）,并保存到数组boxStyleArr</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">box.each(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">index, value</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">//设置每个元素宽度，高度自定义auto</span></span><br><span class=\"line\">  $(value).css(&#123;</span><br><span class=\"line\">    <span class=\"string\">\"width\"</span>: boxWidth,</span><br><span class=\"line\">    <span class=\"string\">\"height\"</span>: <span class=\"string\">\"auto\"</span></span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">  <span class=\"comment\">//数组boxStyleArr保存每个元素宽高</span></span><br><span class=\"line\">  boxStyleArr[index] = <span class=\"keyword\">new</span> boxStyle();</span><br><span class=\"line\">  boxStyleArr[index].width = boxWidth;</span><br><span class=\"line\">  boxStyleArr[index].height = box.eq(index).height();</span><br><span class=\"line\">  <span class=\"comment\">//首行box从左到右依次排列</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (index &lt; num) &#123;</span><br><span class=\"line\">    boxArr[index] = boxStyleArr[index].height;</span><br><span class=\"line\">    boxStyleArr[index].left = boxWidth * index;</span><br><span class=\"line\">    boxStyleArr[index].top = <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"comment\">//瀑布流原理计算每个box的位置（left和top）</span></span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> minboxHeight = <span class=\"built_in\">Math</span>.min.apply(<span class=\"literal\">null</span>, boxArr);</span><br><span class=\"line\">    <span class=\"keyword\">var</span> minboxIndex = $.inArray(minboxHeight, boxArr);</span><br><span class=\"line\">    boxStyleArr[index].left = boxStyleArr[minboxIndex].left;</span><br><span class=\"line\">    boxStyleArr[index].top = minboxHeight;</span><br><span class=\"line\">    boxArr[minboxIndex] += boxStyleArr[index].height;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<h2 id=\"放置box\"><a href=\"#放置box\" class=\"headerlink\" title=\"放置box\"></a>放置box</h2><hr>\n<ul>\n<li>根据数组boxStyleArr，将每个box使用绝对定位放置到相应位置</li>\n<li>这里使用了动画效果，使所有box从左上角伸展</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">boxLocation</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> box = $(<span class=\"string\">\".response\"</span>);</span><br><span class=\"line\">  <span class=\"keyword\">var</span> boxStyleArr = [];</span><br><span class=\"line\">  boxArrBuild(boxStyleArr);</span><br><span class=\"line\">  box.each(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">index, value</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//设置每个box最初位置为左上角，宽高为0</span></span><br><span class=\"line\">    $(value).css(&#123;</span><br><span class=\"line\">      <span class=\"string\">\"position\"</span>: <span class=\"string\">\"absolute\"</span>,</span><br><span class=\"line\">      <span class=\"string\">\"top\"</span>: <span class=\"number\">0</span>,</span><br><span class=\"line\">      <span class=\"string\">\"left\"</span>: <span class=\"number\">0</span>,</span><br><span class=\"line\">      <span class=\"string\">\"width\"</span>: <span class=\"number\">0</span>,</span><br><span class=\"line\">      <span class=\"string\">\"height\"</span>: <span class=\"number\">0</span></span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">    <span class=\"comment\">//动画效果使box们进行伸展</span></span><br><span class=\"line\">    $(value).animate(&#123;</span><br><span class=\"line\">      top: boxStyleArr[index].top,</span><br><span class=\"line\">      left: boxStyleArr[index].left,</span><br><span class=\"line\">      height: boxStyleArr[index].height,</span><br><span class=\"line\">      width: boxStyleArr[index].width</span><br><span class=\"line\">    &#125;, <span class=\"number\">500</span>);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"绑定屏幕宽度改变事件\"><a href=\"#绑定屏幕宽度改变事件\" class=\"headerlink\" title=\"绑定屏幕宽度改变事件\"></a>绑定屏幕宽度改变事件</h2><hr>\n<ul>\n<li>当屏幕大小改变时，触发重新计算box位置<ul>\n<li>为了避免浏览器频繁改变宽度，这里增加了个小判断</li>\n<li>当屏幕改变后200毫秒内不再改变，才触发重新计算</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$(<span class=\"built_in\">window</span>).on(<span class=\"string\">\"load\"</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  boxLocation();</span><br><span class=\"line\">  <span class=\"built_in\">window</span>.onresize = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    windowWidth = $(<span class=\"built_in\">window</span>).width();</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (interval == <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">      interval = setInterval(<span class=\"string\">\"test()\"</span>, <span class=\"number\">200</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<h2 id=\"待完善的地方\"><a href=\"#待完善的地方\" class=\"headerlink\" title=\"待完善的地方\"></a>待完善的地方</h2><hr>\n<h3 id=\"考虑图片加载\"><a href=\"#考虑图片加载\" class=\"headerlink\" title=\"考虑图片加载\"></a>考虑图片加载</h3><ul>\n<li>图片加载过程可能影响对box高度判断</li>\n<li>可通过img.load来确保图片加载完成或者失败之后才进行计算<h3 id=\"代码优化-amp-封装\"><a href=\"#代码优化-amp-封装\" class=\"headerlink\" title=\"代码优化&amp;封装\"></a>代码优化&amp;封装</h3></li>\n<li>尽情发挥你的创造力吧</li>\n</ul>\n<h2 id=\"结束语\"><a href=\"#结束语\" class=\"headerlink\" title=\"结束语\"></a>结束语</h2><hr>\n<p>这个效果是我从别人的博客看到的，然后自己用jQuery实现，这也不失为创造的乐趣呢。</p>"},{"title":"我的前端入门之路","date":"2016-06-24T13:30:30.000Z","_content":"曾经作为物理学院的一名理工女，如今成为一名热爱代码的前端工程师。其中的过程也是颇为丰富，作为记录也好，参考也好，我都想写下来呢。仅供参考哦。\n<!--more-->\n\n## 入门基础学习\n------\n前端基础三剑客（瞎编的）： HTML、CSS、javascript\n\n### 充分利用网络资源\n- 最基础的语法可参考[W3C](http://www.w3school.com.cn/)，这也是一本很好的词典哦\n\n### HTML + CSS\n- [Bootstrap](http://www.bootcss.com/)，大家都在用的样式框架\n- [Font Awesome](http://www.bootcss.com/p/font-awesome/)，图标字体库\n- [jQuery Mobile](http://jquerymobile.com/)，移动web应用程序的框架\n- [jQuery UI](https://jqueryui.com/)，建立在jQuery库上的一组用户界面交互、特效、小部件及主题\n- 大家不妨用的时候也阅读一下这些框架/库的源码，有助于理解CSS特性哦\n\n### HTML5\n- 每一项都值得你去深入探究哦\n  - 用于绘画的canvas元素，可做图片裁剪、创作游戏等等\n  - 用于媒介回放的video和audio元素，可插入音乐和视频哦\n  - 对本地离线存储的更好的支持，离线你的API哈哈\n  - 新的特殊内容元素，比如article、footer、header、nav、section，让你的代码更好懂\n  - 新的表单控件，比如calendar、date、time、email、url、search，记得考虑兼容哦\n  - 实时通信的websocket，建议同时解一下socket.io\n  - 超实用的File API，可以做图片预览等等\n  - 当然少不了sessionStorage和localStorage，可以作为页面间的通讯哦\n\n### CSS3\n- 可以实现超级酷炫的动画效果，还有漂酿的样式哦\n- [w3cPlus](http://www.w3cplus.com/content/css3-gradient)上的CSS3教程不错哦\n  - 背景和边框，好看的按钮和阴影\n  - 文本效果，可以使用自己设计的字体哦\n  - 2D/3D 转换，配合动画和过渡一起使用哦\n  - 动画和过渡效果，快使用酷炫的交互效果吧\n\n### javascript\n- 原生javascript是基础中的基础，但也是能力最强大的主角呀\n- 推荐的书《JavaScript高级程序设计》，《JavaScript 权威指南》，花点钱买本正版吧，收益终身呀\n  - 基础的ECMAScript，js的自由度很高的哦\n  - DOM，若说浏览器是画布，DOM是画布上的内容，javascript就是画笔吧（瞎编+1）\n  - BOM，包括常用的window对象、location对象、history对象等等\n\n## 学会使用和了解框架和库\n-----\n### CSS框架\n- 上面提到的[Bootstrap](http://www.bootcss.com/)，[Font Awesome](http://www.bootcss.com/p/font-awesome/)，[jQuery Mobile](http://jquerymobile.com/)，[jQuery UI](https://jqueryui.com/)都可以去了解看看哦\n\n### LESS/SASS\n- [LESS](http://www.bootcss.com/p/lesscss/)将CSS赋予了动态语言的特性，如变量，继承，运算，函数等\n- [SASS](http://sass.bootcss.com/docs/sass-reference/)让CSS语言更强大、优雅。它允许你使用变量、嵌套规则、mixins、导入等众多功能，并且完全兼容CSS语法\n\n### jQuery库\n- 不得不说这是很强大的js库，曾经在我刚开始工作时帮助我解决了很多问题呢\n- 这里有份[《jQuery API中文文档》](http://www.css88.com/jqapi-1.9/)，查询专用哦\n  - jQuery可以帮忙解决初期的很多问题哦，例如：\n  - 1.消除了JavaScript跨平台兼容问题\n  - 2.丰富的DOM选择器，超便利的$()选择器哦\n  - 3.可以很容易地浏览文档、选择元素、处理事件以及添加效果\n  - 4.ajax操作支持，后面版本的还支持Promise哦\n  - 5.允许开发者定制插件，[jQuery form插件](http://www.cnblogs.com/heyuquan/p/form-plug-async-submit.html)不错哦\n\n### [zepto库](http://www.css88.com/doc/zeptojs_api/)\n- 轻量级的jQuery库，适合移动端\n- 个人觉得了解一下就够了。。除了touch事件有些参考价值，还是jQuery强大多了\n\n\n### MVC/MVVM框架\n- 这是待开拓的一大片领土，每个框架都有自己的特色和优势，很有意思哦\n- 虽然说纷繁琳目，但其实选一个喜欢的用起来就好啦，当然生产环境的话得考虑稳定性、社区、维护这些哦\n- [AngularJS](http://www.apjs.net/)，MVVM\n- [React](http://reactjs.cn/)，MVC的V\n- [Underscore](http://www.bootcss.com/p/underscore/)，JavaScript工具库\n- [Backbone](http://www.css88.com/doc/backbone/)，MVC，基于underscore.js\n- [Vue](http://cn.vuejs.org/)，国人MVVM的VM\n- [Avalon](http://avalonjs.github.io/)，国人MVVM\n\n\n## 前端开发工具\n-----\n### 编辑器\n- DW(Dreamweaver)挺老了，比较重量级\n- Sublime Text，很多人在用的\n- Hbuilder，本人在用，感觉还不错\n- Vim，听说很好用\n\n### Chrome开发者工具/Firebug\n- 浏览器调试工具，很强大哦，只需在浏览器右键-检查就能打开啦\n\n### Gulp/Grunt\n- 基于任务的javascript命令行构建工具\n- 用于任务自动化，创建工作区等\n\n### Mocha/Jasmine/Karma\n- Mocha/Jasmine是常用的前端测试框架\n- Karma是驱动测试的Runner\n\n### 其它前端工具\n- 这里有篇[《各式 Web 前端開發工具整理》](https://github.com/doggy8088/frontend-tools)\n\n\n\n## 成为一枚优质前端工程师\n-----\n### 注意代码规范\n- 良好的代码规范对团队合作很有帮助哦\n- 本骚年在这方面有警觉，但还是欠缺实践呢...\n\n### 针对性研究\n- [《理解Promise》](https://blog.coding.net/blog/how-do-promises-work)\n- [《XMLHttpRequest Level 2使用指南》](http://www.ruanyifeng.com/blog/2012/09/xmlhttprequest_level_2.html)\n- [《浏览器的渲染原理简介》](http://coolshell.cn/articles/9666.html)\n- [《Javascript装载和执行》](http://coolshell.cn/articles/9749.html#jtss-tsina)\n- [《一个对前端模板技术的全面总结》](http://www.html-js.com/article/Regularjs-Chinese-guidelines-for-a-comprehensive-summary-of-the-front-template-technology?utm_source=tuicool&utm_medium=referral)\n- [《浅谈HTML5单页面架构》](http://www.cnblogs.com/kenkofox/p/4643760.html)\n\n### 深入理解库/框架原理\n- 学习研究源代码是个很好的爱好哦，对个人提升也很有帮助呢\n- 当然像Bootstrap这样的优秀样式框架很值得阅读，建议直接翻开源码，配合浏览器调试工具一起学习吧\n- [《深入理解JavaScript系列》](http://www.sxrczx.com/docs/js/2286877.html)\n- [《jQuery源码分析系列》](http://www.cnblogs.com/aaronjs/p/3279314.html)\n- [《触碰jQuery：AJAX异步详解》](http://www.cnblogs.com/heyuquan/archive/2013/05/13/3076465.html)\n- React精华之虚拟DOM：[《如何实现一个Virtual DOM算法》](https://github.com/livoras/blog/issues/13)\n- [《Angular学习笔记》](https://www.zouyesheng.com/angular.html)\n- [《Angular源码分析系列》](http://www.html-js.com/article/2145)\n\n### 了解后台工作\n- 了解和你一起合作的小伙伴们也是很重要的哦\n- PHP、JAVA、Nodejs等服务端语言\n- MySQL、MongoDB等数据库\n\n## 培养你的热情\n-----\n你热爱前端吗？不清楚？\n那你喜欢逻辑吗，喜欢设计吗，想要将自己大大的脑洞里面装的所有有趣的都分享出来吗？\n我喜欢思考，喜欢想象，热爱学习，沉迷那种把想法写成成果的喜悦。\n如果你的热情跟不上，可以尝试一下设计些小项目：\n### 博客\n这是最大众的选择，但即使是这样普通的网页，依然可以刷上你喜欢的颜色，添加有趣的装饰，贴一些你的想法，分享自己的喜怒哀乐。\n还有什么比拥有一个专属自己的空间更值得开心呢？\n- 搭建方式： \n  - 1.使用现有工具快速搭建。可选择使用wordpress（基于PHP），或者是hexo(基于nodejs)。网上google教程，一搜一大堆，度娘和谷哥无论生活还是学习都是一强力工具呢（很可惜我的认知能力就到这里了。。）\n  - 2.网上下载一些喜欢的博客资源，然后根据自己的爱好进行修改\n  - 3.从基础开始，自己搭建。可以从静态页面开始，用最基础的HTML+CSS+javascript(jQuery)来编写你的静态页面吧。一步步实现自己的设计还是个很有成就感的事情呢。[看我用静态页面和PHP搭的很多bug的博客](http://www.godbasin.com/)\n\n### 游戏\n当然首先你自己得是个爱玩游戏的骚年。相信你会对自己在游戏中加入的小想法和念头沾沾自喜的。\n- 编写选择：\n  - 1.idea不足的时候，可以选择自己喜欢的一款游戏，使用前端去编写。\n  - 2.又或者可以下载已有的游戏，改成成自己喜欢的样子。\n  - 3.脑洞够大的你，当然要写一份自己设计的游戏啦。\n看我的[《打嗝的巴士》](http://o969gatx6.bkt.clouddn.com/index.html)和[《弹珠》](http://o969lbf8k.bkt.clouddn.com/ballt.html)\n\n### 动态页面\n一个简单但却动效十足的交互页面也是很有意思的哦。可参考[《酷炫HTML5》](http://o95scrds5.bkt.clouddn.com/index.html)\n当然这跟HTML5没多大关系，主要用的CSS3，不得不说CSS3太好玩了。\n\n### 静态网页\n静态网页可能没有前面的有意思，但也不妨为一种练习设计和基础的方式。\n当然酷酷的你肯定可以设计漂亮的静态页面，又或者你可以用多种库和框架练练手呢。\n参考入门初期写的一些网页： [《被删动漫》](http://o95u5v08d.bkt.clouddn.com/index.html)和[《Restaurant》](http://o95u208de.bkt.clouddn.com/index.html)\n\n## 结束语\n-----\n一年多来，我学到的也就这篇文章差不多的东西。\n前端很繁荣呢，还有很多很多的领域等待开拓和研究，相信你和我一样都满怀着好奇心和期待呢。\n每天期待去上班的，不能只是我一个呀。让你的工作成为你美好生活的一部分吧。","source":"_posts/front-end-getting-started.md","raw":"---\ntitle: 我的前端入门之路\ndate: 2016-06-24 21:30:30\ncategories: web乱炖\ntags: 分享\n---\n曾经作为物理学院的一名理工女，如今成为一名热爱代码的前端工程师。其中的过程也是颇为丰富，作为记录也好，参考也好，我都想写下来呢。仅供参考哦。\n<!--more-->\n\n## 入门基础学习\n------\n前端基础三剑客（瞎编的）： HTML、CSS、javascript\n\n### 充分利用网络资源\n- 最基础的语法可参考[W3C](http://www.w3school.com.cn/)，这也是一本很好的词典哦\n\n### HTML + CSS\n- [Bootstrap](http://www.bootcss.com/)，大家都在用的样式框架\n- [Font Awesome](http://www.bootcss.com/p/font-awesome/)，图标字体库\n- [jQuery Mobile](http://jquerymobile.com/)，移动web应用程序的框架\n- [jQuery UI](https://jqueryui.com/)，建立在jQuery库上的一组用户界面交互、特效、小部件及主题\n- 大家不妨用的时候也阅读一下这些框架/库的源码，有助于理解CSS特性哦\n\n### HTML5\n- 每一项都值得你去深入探究哦\n  - 用于绘画的canvas元素，可做图片裁剪、创作游戏等等\n  - 用于媒介回放的video和audio元素，可插入音乐和视频哦\n  - 对本地离线存储的更好的支持，离线你的API哈哈\n  - 新的特殊内容元素，比如article、footer、header、nav、section，让你的代码更好懂\n  - 新的表单控件，比如calendar、date、time、email、url、search，记得考虑兼容哦\n  - 实时通信的websocket，建议同时解一下socket.io\n  - 超实用的File API，可以做图片预览等等\n  - 当然少不了sessionStorage和localStorage，可以作为页面间的通讯哦\n\n### CSS3\n- 可以实现超级酷炫的动画效果，还有漂酿的样式哦\n- [w3cPlus](http://www.w3cplus.com/content/css3-gradient)上的CSS3教程不错哦\n  - 背景和边框，好看的按钮和阴影\n  - 文本效果，可以使用自己设计的字体哦\n  - 2D/3D 转换，配合动画和过渡一起使用哦\n  - 动画和过渡效果，快使用酷炫的交互效果吧\n\n### javascript\n- 原生javascript是基础中的基础，但也是能力最强大的主角呀\n- 推荐的书《JavaScript高级程序设计》，《JavaScript 权威指南》，花点钱买本正版吧，收益终身呀\n  - 基础的ECMAScript，js的自由度很高的哦\n  - DOM，若说浏览器是画布，DOM是画布上的内容，javascript就是画笔吧（瞎编+1）\n  - BOM，包括常用的window对象、location对象、history对象等等\n\n## 学会使用和了解框架和库\n-----\n### CSS框架\n- 上面提到的[Bootstrap](http://www.bootcss.com/)，[Font Awesome](http://www.bootcss.com/p/font-awesome/)，[jQuery Mobile](http://jquerymobile.com/)，[jQuery UI](https://jqueryui.com/)都可以去了解看看哦\n\n### LESS/SASS\n- [LESS](http://www.bootcss.com/p/lesscss/)将CSS赋予了动态语言的特性，如变量，继承，运算，函数等\n- [SASS](http://sass.bootcss.com/docs/sass-reference/)让CSS语言更强大、优雅。它允许你使用变量、嵌套规则、mixins、导入等众多功能，并且完全兼容CSS语法\n\n### jQuery库\n- 不得不说这是很强大的js库，曾经在我刚开始工作时帮助我解决了很多问题呢\n- 这里有份[《jQuery API中文文档》](http://www.css88.com/jqapi-1.9/)，查询专用哦\n  - jQuery可以帮忙解决初期的很多问题哦，例如：\n  - 1.消除了JavaScript跨平台兼容问题\n  - 2.丰富的DOM选择器，超便利的$()选择器哦\n  - 3.可以很容易地浏览文档、选择元素、处理事件以及添加效果\n  - 4.ajax操作支持，后面版本的还支持Promise哦\n  - 5.允许开发者定制插件，[jQuery form插件](http://www.cnblogs.com/heyuquan/p/form-plug-async-submit.html)不错哦\n\n### [zepto库](http://www.css88.com/doc/zeptojs_api/)\n- 轻量级的jQuery库，适合移动端\n- 个人觉得了解一下就够了。。除了touch事件有些参考价值，还是jQuery强大多了\n\n\n### MVC/MVVM框架\n- 这是待开拓的一大片领土，每个框架都有自己的特色和优势，很有意思哦\n- 虽然说纷繁琳目，但其实选一个喜欢的用起来就好啦，当然生产环境的话得考虑稳定性、社区、维护这些哦\n- [AngularJS](http://www.apjs.net/)，MVVM\n- [React](http://reactjs.cn/)，MVC的V\n- [Underscore](http://www.bootcss.com/p/underscore/)，JavaScript工具库\n- [Backbone](http://www.css88.com/doc/backbone/)，MVC，基于underscore.js\n- [Vue](http://cn.vuejs.org/)，国人MVVM的VM\n- [Avalon](http://avalonjs.github.io/)，国人MVVM\n\n\n## 前端开发工具\n-----\n### 编辑器\n- DW(Dreamweaver)挺老了，比较重量级\n- Sublime Text，很多人在用的\n- Hbuilder，本人在用，感觉还不错\n- Vim，听说很好用\n\n### Chrome开发者工具/Firebug\n- 浏览器调试工具，很强大哦，只需在浏览器右键-检查就能打开啦\n\n### Gulp/Grunt\n- 基于任务的javascript命令行构建工具\n- 用于任务自动化，创建工作区等\n\n### Mocha/Jasmine/Karma\n- Mocha/Jasmine是常用的前端测试框架\n- Karma是驱动测试的Runner\n\n### 其它前端工具\n- 这里有篇[《各式 Web 前端開發工具整理》](https://github.com/doggy8088/frontend-tools)\n\n\n\n## 成为一枚优质前端工程师\n-----\n### 注意代码规范\n- 良好的代码规范对团队合作很有帮助哦\n- 本骚年在这方面有警觉，但还是欠缺实践呢...\n\n### 针对性研究\n- [《理解Promise》](https://blog.coding.net/blog/how-do-promises-work)\n- [《XMLHttpRequest Level 2使用指南》](http://www.ruanyifeng.com/blog/2012/09/xmlhttprequest_level_2.html)\n- [《浏览器的渲染原理简介》](http://coolshell.cn/articles/9666.html)\n- [《Javascript装载和执行》](http://coolshell.cn/articles/9749.html#jtss-tsina)\n- [《一个对前端模板技术的全面总结》](http://www.html-js.com/article/Regularjs-Chinese-guidelines-for-a-comprehensive-summary-of-the-front-template-technology?utm_source=tuicool&utm_medium=referral)\n- [《浅谈HTML5单页面架构》](http://www.cnblogs.com/kenkofox/p/4643760.html)\n\n### 深入理解库/框架原理\n- 学习研究源代码是个很好的爱好哦，对个人提升也很有帮助呢\n- 当然像Bootstrap这样的优秀样式框架很值得阅读，建议直接翻开源码，配合浏览器调试工具一起学习吧\n- [《深入理解JavaScript系列》](http://www.sxrczx.com/docs/js/2286877.html)\n- [《jQuery源码分析系列》](http://www.cnblogs.com/aaronjs/p/3279314.html)\n- [《触碰jQuery：AJAX异步详解》](http://www.cnblogs.com/heyuquan/archive/2013/05/13/3076465.html)\n- React精华之虚拟DOM：[《如何实现一个Virtual DOM算法》](https://github.com/livoras/blog/issues/13)\n- [《Angular学习笔记》](https://www.zouyesheng.com/angular.html)\n- [《Angular源码分析系列》](http://www.html-js.com/article/2145)\n\n### 了解后台工作\n- 了解和你一起合作的小伙伴们也是很重要的哦\n- PHP、JAVA、Nodejs等服务端语言\n- MySQL、MongoDB等数据库\n\n## 培养你的热情\n-----\n你热爱前端吗？不清楚？\n那你喜欢逻辑吗，喜欢设计吗，想要将自己大大的脑洞里面装的所有有趣的都分享出来吗？\n我喜欢思考，喜欢想象，热爱学习，沉迷那种把想法写成成果的喜悦。\n如果你的热情跟不上，可以尝试一下设计些小项目：\n### 博客\n这是最大众的选择，但即使是这样普通的网页，依然可以刷上你喜欢的颜色，添加有趣的装饰，贴一些你的想法，分享自己的喜怒哀乐。\n还有什么比拥有一个专属自己的空间更值得开心呢？\n- 搭建方式： \n  - 1.使用现有工具快速搭建。可选择使用wordpress（基于PHP），或者是hexo(基于nodejs)。网上google教程，一搜一大堆，度娘和谷哥无论生活还是学习都是一强力工具呢（很可惜我的认知能力就到这里了。。）\n  - 2.网上下载一些喜欢的博客资源，然后根据自己的爱好进行修改\n  - 3.从基础开始，自己搭建。可以从静态页面开始，用最基础的HTML+CSS+javascript(jQuery)来编写你的静态页面吧。一步步实现自己的设计还是个很有成就感的事情呢。[看我用静态页面和PHP搭的很多bug的博客](http://www.godbasin.com/)\n\n### 游戏\n当然首先你自己得是个爱玩游戏的骚年。相信你会对自己在游戏中加入的小想法和念头沾沾自喜的。\n- 编写选择：\n  - 1.idea不足的时候，可以选择自己喜欢的一款游戏，使用前端去编写。\n  - 2.又或者可以下载已有的游戏，改成成自己喜欢的样子。\n  - 3.脑洞够大的你，当然要写一份自己设计的游戏啦。\n看我的[《打嗝的巴士》](http://o969gatx6.bkt.clouddn.com/index.html)和[《弹珠》](http://o969lbf8k.bkt.clouddn.com/ballt.html)\n\n### 动态页面\n一个简单但却动效十足的交互页面也是很有意思的哦。可参考[《酷炫HTML5》](http://o95scrds5.bkt.clouddn.com/index.html)\n当然这跟HTML5没多大关系，主要用的CSS3，不得不说CSS3太好玩了。\n\n### 静态网页\n静态网页可能没有前面的有意思，但也不妨为一种练习设计和基础的方式。\n当然酷酷的你肯定可以设计漂亮的静态页面，又或者你可以用多种库和框架练练手呢。\n参考入门初期写的一些网页： [《被删动漫》](http://o95u5v08d.bkt.clouddn.com/index.html)和[《Restaurant》](http://o95u208de.bkt.clouddn.com/index.html)\n\n## 结束语\n-----\n一年多来，我学到的也就这篇文章差不多的东西。\n前端很繁荣呢，还有很多很多的领域等待开拓和研究，相信你和我一样都满怀着好奇心和期待呢。\n每天期待去上班的，不能只是我一个呀。让你的工作成为你美好生活的一部分吧。","slug":"front-end-getting-started","published":1,"updated":"2016-06-24T13:54:25.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cirrwvo35000t38l5rfoc146d","content":"<p>曾经作为物理学院的一名理工女，如今成为一名热爱代码的前端工程师。其中的过程也是颇为丰富，作为记录也好，参考也好，我都想写下来呢。仅供参考哦。<br><a id=\"more\"></a></p>\n<h2 id=\"入门基础学习\"><a href=\"#入门基础学习\" class=\"headerlink\" title=\"入门基础学习\"></a>入门基础学习</h2><hr>\n<p>前端基础三剑客（瞎编的）： HTML、CSS、javascript</p>\n<h3 id=\"充分利用网络资源\"><a href=\"#充分利用网络资源\" class=\"headerlink\" title=\"充分利用网络资源\"></a>充分利用网络资源</h3><ul>\n<li>最基础的语法可参考<a href=\"http://www.w3school.com.cn/\" target=\"_blank\" rel=\"external\">W3C</a>，这也是一本很好的词典哦</li>\n</ul>\n<h3 id=\"HTML-CSS\"><a href=\"#HTML-CSS\" class=\"headerlink\" title=\"HTML + CSS\"></a>HTML + CSS</h3><ul>\n<li><a href=\"http://www.bootcss.com/\" target=\"_blank\" rel=\"external\">Bootstrap</a>，大家都在用的样式框架</li>\n<li><a href=\"http://www.bootcss.com/p/font-awesome/\" target=\"_blank\" rel=\"external\">Font Awesome</a>，图标字体库</li>\n<li><a href=\"http://jquerymobile.com/\" target=\"_blank\" rel=\"external\">jQuery Mobile</a>，移动web应用程序的框架</li>\n<li><a href=\"https://jqueryui.com/\" target=\"_blank\" rel=\"external\">jQuery UI</a>，建立在jQuery库上的一组用户界面交互、特效、小部件及主题</li>\n<li>大家不妨用的时候也阅读一下这些框架/库的源码，有助于理解CSS特性哦</li>\n</ul>\n<h3 id=\"HTML5\"><a href=\"#HTML5\" class=\"headerlink\" title=\"HTML5\"></a>HTML5</h3><ul>\n<li>每一项都值得你去深入探究哦<ul>\n<li>用于绘画的canvas元素，可做图片裁剪、创作游戏等等</li>\n<li>用于媒介回放的video和audio元素，可插入音乐和视频哦</li>\n<li>对本地离线存储的更好的支持，离线你的API哈哈</li>\n<li>新的特殊内容元素，比如article、footer、header、nav、section，让你的代码更好懂</li>\n<li>新的表单控件，比如calendar、date、time、email、url、search，记得考虑兼容哦</li>\n<li>实时通信的websocket，建议同时解一下socket.io</li>\n<li>超实用的File API，可以做图片预览等等</li>\n<li>当然少不了sessionStorage和localStorage，可以作为页面间的通讯哦</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"CSS3\"><a href=\"#CSS3\" class=\"headerlink\" title=\"CSS3\"></a>CSS3</h3><ul>\n<li>可以实现超级酷炫的动画效果，还有漂酿的样式哦</li>\n<li><a href=\"http://www.w3cplus.com/content/css3-gradient\" target=\"_blank\" rel=\"external\">w3cPlus</a>上的CSS3教程不错哦<ul>\n<li>背景和边框，好看的按钮和阴影</li>\n<li>文本效果，可以使用自己设计的字体哦</li>\n<li>2D/3D 转换，配合动画和过渡一起使用哦</li>\n<li>动画和过渡效果，快使用酷炫的交互效果吧</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"javascript\"><a href=\"#javascript\" class=\"headerlink\" title=\"javascript\"></a>javascript</h3><ul>\n<li>原生javascript是基础中的基础，但也是能力最强大的主角呀</li>\n<li>推荐的书《JavaScript高级程序设计》，《JavaScript 权威指南》，花点钱买本正版吧，收益终身呀<ul>\n<li>基础的ECMAScript，js的自由度很高的哦</li>\n<li>DOM，若说浏览器是画布，DOM是画布上的内容，javascript就是画笔吧（瞎编+1）</li>\n<li>BOM，包括常用的window对象、location对象、history对象等等</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"学会使用和了解框架和库\"><a href=\"#学会使用和了解框架和库\" class=\"headerlink\" title=\"学会使用和了解框架和库\"></a>学会使用和了解框架和库</h2><hr>\n<h3 id=\"CSS框架\"><a href=\"#CSS框架\" class=\"headerlink\" title=\"CSS框架\"></a>CSS框架</h3><ul>\n<li>上面提到的<a href=\"http://www.bootcss.com/\" target=\"_blank\" rel=\"external\">Bootstrap</a>，<a href=\"http://www.bootcss.com/p/font-awesome/\" target=\"_blank\" rel=\"external\">Font Awesome</a>，<a href=\"http://jquerymobile.com/\" target=\"_blank\" rel=\"external\">jQuery Mobile</a>，<a href=\"https://jqueryui.com/\" target=\"_blank\" rel=\"external\">jQuery UI</a>都可以去了解看看哦</li>\n</ul>\n<h3 id=\"LESS-SASS\"><a href=\"#LESS-SASS\" class=\"headerlink\" title=\"LESS/SASS\"></a>LESS/SASS</h3><ul>\n<li><a href=\"http://www.bootcss.com/p/lesscss/\" target=\"_blank\" rel=\"external\">LESS</a>将CSS赋予了动态语言的特性，如变量，继承，运算，函数等</li>\n<li><a href=\"http://sass.bootcss.com/docs/sass-reference/\" target=\"_blank\" rel=\"external\">SASS</a>让CSS语言更强大、优雅。它允许你使用变量、嵌套规则、mixins、导入等众多功能，并且完全兼容CSS语法</li>\n</ul>\n<h3 id=\"jQuery库\"><a href=\"#jQuery库\" class=\"headerlink\" title=\"jQuery库\"></a>jQuery库</h3><ul>\n<li>不得不说这是很强大的js库，曾经在我刚开始工作时帮助我解决了很多问题呢</li>\n<li>这里有份<a href=\"http://www.css88.com/jqapi-1.9/\" target=\"_blank\" rel=\"external\">《jQuery API中文文档》</a>，查询专用哦<ul>\n<li>jQuery可以帮忙解决初期的很多问题哦，例如：</li>\n<li>1.消除了JavaScript跨平台兼容问题</li>\n<li>2.丰富的DOM选择器，超便利的$()选择器哦</li>\n<li>3.可以很容易地浏览文档、选择元素、处理事件以及添加效果</li>\n<li>4.ajax操作支持，后面版本的还支持Promise哦</li>\n<li>5.允许开发者定制插件，<a href=\"http://www.cnblogs.com/heyuquan/p/form-plug-async-submit.html\" target=\"_blank\" rel=\"external\">jQuery form插件</a>不错哦</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"zepto库\"><a href=\"#zepto库\" class=\"headerlink\" title=\"zepto库\"></a><a href=\"http://www.css88.com/doc/zeptojs_api/\" target=\"_blank\" rel=\"external\">zepto库</a></h3><ul>\n<li>轻量级的jQuery库，适合移动端</li>\n<li>个人觉得了解一下就够了。。除了touch事件有些参考价值，还是jQuery强大多了</li>\n</ul>\n<h3 id=\"MVC-MVVM框架\"><a href=\"#MVC-MVVM框架\" class=\"headerlink\" title=\"MVC/MVVM框架\"></a>MVC/MVVM框架</h3><ul>\n<li>这是待开拓的一大片领土，每个框架都有自己的特色和优势，很有意思哦</li>\n<li>虽然说纷繁琳目，但其实选一个喜欢的用起来就好啦，当然生产环境的话得考虑稳定性、社区、维护这些哦</li>\n<li><a href=\"http://www.apjs.net/\" target=\"_blank\" rel=\"external\">AngularJS</a>，MVVM</li>\n<li><a href=\"http://reactjs.cn/\" target=\"_blank\" rel=\"external\">React</a>，MVC的V</li>\n<li><a href=\"http://www.bootcss.com/p/underscore/\" target=\"_blank\" rel=\"external\">Underscore</a>，JavaScript工具库</li>\n<li><a href=\"http://www.css88.com/doc/backbone/\" target=\"_blank\" rel=\"external\">Backbone</a>，MVC，基于underscore.js</li>\n<li><a href=\"http://cn.vuejs.org/\" target=\"_blank\" rel=\"external\">Vue</a>，国人MVVM的VM</li>\n<li><a href=\"http://avalonjs.github.io/\" target=\"_blank\" rel=\"external\">Avalon</a>，国人MVVM</li>\n</ul>\n<h2 id=\"前端开发工具\"><a href=\"#前端开发工具\" class=\"headerlink\" title=\"前端开发工具\"></a>前端开发工具</h2><hr>\n<h3 id=\"编辑器\"><a href=\"#编辑器\" class=\"headerlink\" title=\"编辑器\"></a>编辑器</h3><ul>\n<li>DW(Dreamweaver)挺老了，比较重量级</li>\n<li>Sublime Text，很多人在用的</li>\n<li>Hbuilder，本人在用，感觉还不错</li>\n<li>Vim，听说很好用</li>\n</ul>\n<h3 id=\"Chrome开发者工具-Firebug\"><a href=\"#Chrome开发者工具-Firebug\" class=\"headerlink\" title=\"Chrome开发者工具/Firebug\"></a>Chrome开发者工具/Firebug</h3><ul>\n<li>浏览器调试工具，很强大哦，只需在浏览器右键-检查就能打开啦</li>\n</ul>\n<h3 id=\"Gulp-Grunt\"><a href=\"#Gulp-Grunt\" class=\"headerlink\" title=\"Gulp/Grunt\"></a>Gulp/Grunt</h3><ul>\n<li>基于任务的javascript命令行构建工具</li>\n<li>用于任务自动化，创建工作区等</li>\n</ul>\n<h3 id=\"Mocha-Jasmine-Karma\"><a href=\"#Mocha-Jasmine-Karma\" class=\"headerlink\" title=\"Mocha/Jasmine/Karma\"></a>Mocha/Jasmine/Karma</h3><ul>\n<li>Mocha/Jasmine是常用的前端测试框架</li>\n<li>Karma是驱动测试的Runner</li>\n</ul>\n<h3 id=\"其它前端工具\"><a href=\"#其它前端工具\" class=\"headerlink\" title=\"其它前端工具\"></a>其它前端工具</h3><ul>\n<li>这里有篇<a href=\"https://github.com/doggy8088/frontend-tools\" target=\"_blank\" rel=\"external\">《各式 Web 前端開發工具整理》</a></li>\n</ul>\n<h2 id=\"成为一枚优质前端工程师\"><a href=\"#成为一枚优质前端工程师\" class=\"headerlink\" title=\"成为一枚优质前端工程师\"></a>成为一枚优质前端工程师</h2><hr>\n<h3 id=\"注意代码规范\"><a href=\"#注意代码规范\" class=\"headerlink\" title=\"注意代码规范\"></a>注意代码规范</h3><ul>\n<li>良好的代码规范对团队合作很有帮助哦</li>\n<li>本骚年在这方面有警觉，但还是欠缺实践呢…</li>\n</ul>\n<h3 id=\"针对性研究\"><a href=\"#针对性研究\" class=\"headerlink\" title=\"针对性研究\"></a>针对性研究</h3><ul>\n<li><a href=\"https://blog.coding.net/blog/how-do-promises-work\" target=\"_blank\" rel=\"external\">《理解Promise》</a></li>\n<li><a href=\"http://www.ruanyifeng.com/blog/2012/09/xmlhttprequest_level_2.html\" target=\"_blank\" rel=\"external\">《XMLHttpRequest Level 2使用指南》</a></li>\n<li><a href=\"http://coolshell.cn/articles/9666.html\" target=\"_blank\" rel=\"external\">《浏览器的渲染原理简介》</a></li>\n<li><a href=\"http://coolshell.cn/articles/9749.html#jtss-tsina\" target=\"_blank\" rel=\"external\">《Javascript装载和执行》</a></li>\n<li><a href=\"http://www.html-js.com/article/Regularjs-Chinese-guidelines-for-a-comprehensive-summary-of-the-front-template-technology?utm_source=tuicool&amp;utm_medium=referral\" target=\"_blank\" rel=\"external\">《一个对前端模板技术的全面总结》</a></li>\n<li><a href=\"http://www.cnblogs.com/kenkofox/p/4643760.html\" target=\"_blank\" rel=\"external\">《浅谈HTML5单页面架构》</a></li>\n</ul>\n<h3 id=\"深入理解库-框架原理\"><a href=\"#深入理解库-框架原理\" class=\"headerlink\" title=\"深入理解库/框架原理\"></a>深入理解库/框架原理</h3><ul>\n<li>学习研究源代码是个很好的爱好哦，对个人提升也很有帮助呢</li>\n<li>当然像Bootstrap这样的优秀样式框架很值得阅读，建议直接翻开源码，配合浏览器调试工具一起学习吧</li>\n<li><a href=\"http://www.sxrczx.com/docs/js/2286877.html\" target=\"_blank\" rel=\"external\">《深入理解JavaScript系列》</a></li>\n<li><a href=\"http://www.cnblogs.com/aaronjs/p/3279314.html\" target=\"_blank\" rel=\"external\">《jQuery源码分析系列》</a></li>\n<li><a href=\"http://www.cnblogs.com/heyuquan/archive/2013/05/13/3076465.html\" target=\"_blank\" rel=\"external\">《触碰jQuery：AJAX异步详解》</a></li>\n<li>React精华之虚拟DOM：<a href=\"https://github.com/livoras/blog/issues/13\" target=\"_blank\" rel=\"external\">《如何实现一个Virtual DOM算法》</a></li>\n<li><a href=\"https://www.zouyesheng.com/angular.html\" target=\"_blank\" rel=\"external\">《Angular学习笔记》</a></li>\n<li><a href=\"http://www.html-js.com/article/2145\" target=\"_blank\" rel=\"external\">《Angular源码分析系列》</a></li>\n</ul>\n<h3 id=\"了解后台工作\"><a href=\"#了解后台工作\" class=\"headerlink\" title=\"了解后台工作\"></a>了解后台工作</h3><ul>\n<li>了解和你一起合作的小伙伴们也是很重要的哦</li>\n<li>PHP、JAVA、Nodejs等服务端语言</li>\n<li>MySQL、MongoDB等数据库</li>\n</ul>\n<h2 id=\"培养你的热情\"><a href=\"#培养你的热情\" class=\"headerlink\" title=\"培养你的热情\"></a>培养你的热情</h2><hr>\n<p>你热爱前端吗？不清楚？<br>那你喜欢逻辑吗，喜欢设计吗，想要将自己大大的脑洞里面装的所有有趣的都分享出来吗？<br>我喜欢思考，喜欢想象，热爱学习，沉迷那种把想法写成成果的喜悦。<br>如果你的热情跟不上，可以尝试一下设计些小项目：</p>\n<h3 id=\"博客\"><a href=\"#博客\" class=\"headerlink\" title=\"博客\"></a>博客</h3><p>这是最大众的选择，但即使是这样普通的网页，依然可以刷上你喜欢的颜色，添加有趣的装饰，贴一些你的想法，分享自己的喜怒哀乐。<br>还有什么比拥有一个专属自己的空间更值得开心呢？</p>\n<ul>\n<li>搭建方式： <ul>\n<li>1.使用现有工具快速搭建。可选择使用wordpress（基于PHP），或者是hexo(基于nodejs)。网上google教程，一搜一大堆，度娘和谷哥无论生活还是学习都是一强力工具呢（很可惜我的认知能力就到这里了。。）</li>\n<li>2.网上下载一些喜欢的博客资源，然后根据自己的爱好进行修改</li>\n<li>3.从基础开始，自己搭建。可以从静态页面开始，用最基础的HTML+CSS+javascript(jQuery)来编写你的静态页面吧。一步步实现自己的设计还是个很有成就感的事情呢。<a href=\"http://www.godbasin.com/\" target=\"_blank\" rel=\"external\">看我用静态页面和PHP搭的很多bug的博客</a></li>\n</ul>\n</li>\n</ul>\n<h3 id=\"游戏\"><a href=\"#游戏\" class=\"headerlink\" title=\"游戏\"></a>游戏</h3><p>当然首先你自己得是个爱玩游戏的骚年。相信你会对自己在游戏中加入的小想法和念头沾沾自喜的。</p>\n<ul>\n<li>编写选择：<ul>\n<li>1.idea不足的时候，可以选择自己喜欢的一款游戏，使用前端去编写。</li>\n<li>2.又或者可以下载已有的游戏，改成成自己喜欢的样子。</li>\n<li>3.脑洞够大的你，当然要写一份自己设计的游戏啦。<br>看我的<a href=\"http://o969gatx6.bkt.clouddn.com/index.html\" target=\"_blank\" rel=\"external\">《打嗝的巴士》</a>和<a href=\"http://o969lbf8k.bkt.clouddn.com/ballt.html\" target=\"_blank\" rel=\"external\">《弹珠》</a></li>\n</ul>\n</li>\n</ul>\n<h3 id=\"动态页面\"><a href=\"#动态页面\" class=\"headerlink\" title=\"动态页面\"></a>动态页面</h3><p>一个简单但却动效十足的交互页面也是很有意思的哦。可参考<a href=\"http://o95scrds5.bkt.clouddn.com/index.html\" target=\"_blank\" rel=\"external\">《酷炫HTML5》</a><br>当然这跟HTML5没多大关系，主要用的CSS3，不得不说CSS3太好玩了。</p>\n<h3 id=\"静态网页\"><a href=\"#静态网页\" class=\"headerlink\" title=\"静态网页\"></a>静态网页</h3><p>静态网页可能没有前面的有意思，但也不妨为一种练习设计和基础的方式。<br>当然酷酷的你肯定可以设计漂亮的静态页面，又或者你可以用多种库和框架练练手呢。<br>参考入门初期写的一些网页： <a href=\"http://o95u5v08d.bkt.clouddn.com/index.html\" target=\"_blank\" rel=\"external\">《被删动漫》</a>和<a href=\"http://o95u208de.bkt.clouddn.com/index.html\" target=\"_blank\" rel=\"external\">《Restaurant》</a></p>\n<h2 id=\"结束语\"><a href=\"#结束语\" class=\"headerlink\" title=\"结束语\"></a>结束语</h2><hr>\n<p>一年多来，我学到的也就这篇文章差不多的东西。<br>前端很繁荣呢，还有很多很多的领域等待开拓和研究，相信你和我一样都满怀着好奇心和期待呢。<br>每天期待去上班的，不能只是我一个呀。让你的工作成为你美好生活的一部分吧。</p>\n","excerpt":"<p>曾经作为物理学院的一名理工女，如今成为一名热爱代码的前端工程师。其中的过程也是颇为丰富，作为记录也好，参考也好，我都想写下来呢。仅供参考哦。<br>","more":"</p>\n<h2 id=\"入门基础学习\"><a href=\"#入门基础学习\" class=\"headerlink\" title=\"入门基础学习\"></a>入门基础学习</h2><hr>\n<p>前端基础三剑客（瞎编的）： HTML、CSS、javascript</p>\n<h3 id=\"充分利用网络资源\"><a href=\"#充分利用网络资源\" class=\"headerlink\" title=\"充分利用网络资源\"></a>充分利用网络资源</h3><ul>\n<li>最基础的语法可参考<a href=\"http://www.w3school.com.cn/\">W3C</a>，这也是一本很好的词典哦</li>\n</ul>\n<h3 id=\"HTML-CSS\"><a href=\"#HTML-CSS\" class=\"headerlink\" title=\"HTML + CSS\"></a>HTML + CSS</h3><ul>\n<li><a href=\"http://www.bootcss.com/\">Bootstrap</a>，大家都在用的样式框架</li>\n<li><a href=\"http://www.bootcss.com/p/font-awesome/\">Font Awesome</a>，图标字体库</li>\n<li><a href=\"http://jquerymobile.com/\">jQuery Mobile</a>，移动web应用程序的框架</li>\n<li><a href=\"https://jqueryui.com/\">jQuery UI</a>，建立在jQuery库上的一组用户界面交互、特效、小部件及主题</li>\n<li>大家不妨用的时候也阅读一下这些框架/库的源码，有助于理解CSS特性哦</li>\n</ul>\n<h3 id=\"HTML5\"><a href=\"#HTML5\" class=\"headerlink\" title=\"HTML5\"></a>HTML5</h3><ul>\n<li>每一项都值得你去深入探究哦<ul>\n<li>用于绘画的canvas元素，可做图片裁剪、创作游戏等等</li>\n<li>用于媒介回放的video和audio元素，可插入音乐和视频哦</li>\n<li>对本地离线存储的更好的支持，离线你的API哈哈</li>\n<li>新的特殊内容元素，比如article、footer、header、nav、section，让你的代码更好懂</li>\n<li>新的表单控件，比如calendar、date、time、email、url、search，记得考虑兼容哦</li>\n<li>实时通信的websocket，建议同时解一下socket.io</li>\n<li>超实用的File API，可以做图片预览等等</li>\n<li>当然少不了sessionStorage和localStorage，可以作为页面间的通讯哦</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"CSS3\"><a href=\"#CSS3\" class=\"headerlink\" title=\"CSS3\"></a>CSS3</h3><ul>\n<li>可以实现超级酷炫的动画效果，还有漂酿的样式哦</li>\n<li><a href=\"http://www.w3cplus.com/content/css3-gradient\">w3cPlus</a>上的CSS3教程不错哦<ul>\n<li>背景和边框，好看的按钮和阴影</li>\n<li>文本效果，可以使用自己设计的字体哦</li>\n<li>2D/3D 转换，配合动画和过渡一起使用哦</li>\n<li>动画和过渡效果，快使用酷炫的交互效果吧</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"javascript\"><a href=\"#javascript\" class=\"headerlink\" title=\"javascript\"></a>javascript</h3><ul>\n<li>原生javascript是基础中的基础，但也是能力最强大的主角呀</li>\n<li>推荐的书《JavaScript高级程序设计》，《JavaScript 权威指南》，花点钱买本正版吧，收益终身呀<ul>\n<li>基础的ECMAScript，js的自由度很高的哦</li>\n<li>DOM，若说浏览器是画布，DOM是画布上的内容，javascript就是画笔吧（瞎编+1）</li>\n<li>BOM，包括常用的window对象、location对象、history对象等等</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"学会使用和了解框架和库\"><a href=\"#学会使用和了解框架和库\" class=\"headerlink\" title=\"学会使用和了解框架和库\"></a>学会使用和了解框架和库</h2><hr>\n<h3 id=\"CSS框架\"><a href=\"#CSS框架\" class=\"headerlink\" title=\"CSS框架\"></a>CSS框架</h3><ul>\n<li>上面提到的<a href=\"http://www.bootcss.com/\">Bootstrap</a>，<a href=\"http://www.bootcss.com/p/font-awesome/\">Font Awesome</a>，<a href=\"http://jquerymobile.com/\">jQuery Mobile</a>，<a href=\"https://jqueryui.com/\">jQuery UI</a>都可以去了解看看哦</li>\n</ul>\n<h3 id=\"LESS-SASS\"><a href=\"#LESS-SASS\" class=\"headerlink\" title=\"LESS/SASS\"></a>LESS/SASS</h3><ul>\n<li><a href=\"http://www.bootcss.com/p/lesscss/\">LESS</a>将CSS赋予了动态语言的特性，如变量，继承，运算，函数等</li>\n<li><a href=\"http://sass.bootcss.com/docs/sass-reference/\">SASS</a>让CSS语言更强大、优雅。它允许你使用变量、嵌套规则、mixins、导入等众多功能，并且完全兼容CSS语法</li>\n</ul>\n<h3 id=\"jQuery库\"><a href=\"#jQuery库\" class=\"headerlink\" title=\"jQuery库\"></a>jQuery库</h3><ul>\n<li>不得不说这是很强大的js库，曾经在我刚开始工作时帮助我解决了很多问题呢</li>\n<li>这里有份<a href=\"http://www.css88.com/jqapi-1.9/\">《jQuery API中文文档》</a>，查询专用哦<ul>\n<li>jQuery可以帮忙解决初期的很多问题哦，例如：</li>\n<li>1.消除了JavaScript跨平台兼容问题</li>\n<li>2.丰富的DOM选择器，超便利的$()选择器哦</li>\n<li>3.可以很容易地浏览文档、选择元素、处理事件以及添加效果</li>\n<li>4.ajax操作支持，后面版本的还支持Promise哦</li>\n<li>5.允许开发者定制插件，<a href=\"http://www.cnblogs.com/heyuquan/p/form-plug-async-submit.html\">jQuery form插件</a>不错哦</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"zepto库\"><a href=\"#zepto库\" class=\"headerlink\" title=\"zepto库\"></a><a href=\"http://www.css88.com/doc/zeptojs_api/\">zepto库</a></h3><ul>\n<li>轻量级的jQuery库，适合移动端</li>\n<li>个人觉得了解一下就够了。。除了touch事件有些参考价值，还是jQuery强大多了</li>\n</ul>\n<h3 id=\"MVC-MVVM框架\"><a href=\"#MVC-MVVM框架\" class=\"headerlink\" title=\"MVC/MVVM框架\"></a>MVC/MVVM框架</h3><ul>\n<li>这是待开拓的一大片领土，每个框架都有自己的特色和优势，很有意思哦</li>\n<li>虽然说纷繁琳目，但其实选一个喜欢的用起来就好啦，当然生产环境的话得考虑稳定性、社区、维护这些哦</li>\n<li><a href=\"http://www.apjs.net/\">AngularJS</a>，MVVM</li>\n<li><a href=\"http://reactjs.cn/\">React</a>，MVC的V</li>\n<li><a href=\"http://www.bootcss.com/p/underscore/\">Underscore</a>，JavaScript工具库</li>\n<li><a href=\"http://www.css88.com/doc/backbone/\">Backbone</a>，MVC，基于underscore.js</li>\n<li><a href=\"http://cn.vuejs.org/\">Vue</a>，国人MVVM的VM</li>\n<li><a href=\"http://avalonjs.github.io/\">Avalon</a>，国人MVVM</li>\n</ul>\n<h2 id=\"前端开发工具\"><a href=\"#前端开发工具\" class=\"headerlink\" title=\"前端开发工具\"></a>前端开发工具</h2><hr>\n<h3 id=\"编辑器\"><a href=\"#编辑器\" class=\"headerlink\" title=\"编辑器\"></a>编辑器</h3><ul>\n<li>DW(Dreamweaver)挺老了，比较重量级</li>\n<li>Sublime Text，很多人在用的</li>\n<li>Hbuilder，本人在用，感觉还不错</li>\n<li>Vim，听说很好用</li>\n</ul>\n<h3 id=\"Chrome开发者工具-Firebug\"><a href=\"#Chrome开发者工具-Firebug\" class=\"headerlink\" title=\"Chrome开发者工具/Firebug\"></a>Chrome开发者工具/Firebug</h3><ul>\n<li>浏览器调试工具，很强大哦，只需在浏览器右键-检查就能打开啦</li>\n</ul>\n<h3 id=\"Gulp-Grunt\"><a href=\"#Gulp-Grunt\" class=\"headerlink\" title=\"Gulp/Grunt\"></a>Gulp/Grunt</h3><ul>\n<li>基于任务的javascript命令行构建工具</li>\n<li>用于任务自动化，创建工作区等</li>\n</ul>\n<h3 id=\"Mocha-Jasmine-Karma\"><a href=\"#Mocha-Jasmine-Karma\" class=\"headerlink\" title=\"Mocha/Jasmine/Karma\"></a>Mocha/Jasmine/Karma</h3><ul>\n<li>Mocha/Jasmine是常用的前端测试框架</li>\n<li>Karma是驱动测试的Runner</li>\n</ul>\n<h3 id=\"其它前端工具\"><a href=\"#其它前端工具\" class=\"headerlink\" title=\"其它前端工具\"></a>其它前端工具</h3><ul>\n<li>这里有篇<a href=\"https://github.com/doggy8088/frontend-tools\">《各式 Web 前端開發工具整理》</a></li>\n</ul>\n<h2 id=\"成为一枚优质前端工程师\"><a href=\"#成为一枚优质前端工程师\" class=\"headerlink\" title=\"成为一枚优质前端工程师\"></a>成为一枚优质前端工程师</h2><hr>\n<h3 id=\"注意代码规范\"><a href=\"#注意代码规范\" class=\"headerlink\" title=\"注意代码规范\"></a>注意代码规范</h3><ul>\n<li>良好的代码规范对团队合作很有帮助哦</li>\n<li>本骚年在这方面有警觉，但还是欠缺实践呢…</li>\n</ul>\n<h3 id=\"针对性研究\"><a href=\"#针对性研究\" class=\"headerlink\" title=\"针对性研究\"></a>针对性研究</h3><ul>\n<li><a href=\"https://blog.coding.net/blog/how-do-promises-work\">《理解Promise》</a></li>\n<li><a href=\"http://www.ruanyifeng.com/blog/2012/09/xmlhttprequest_level_2.html\">《XMLHttpRequest Level 2使用指南》</a></li>\n<li><a href=\"http://coolshell.cn/articles/9666.html\">《浏览器的渲染原理简介》</a></li>\n<li><a href=\"http://coolshell.cn/articles/9749.html#jtss-tsina\">《Javascript装载和执行》</a></li>\n<li><a href=\"http://www.html-js.com/article/Regularjs-Chinese-guidelines-for-a-comprehensive-summary-of-the-front-template-technology?utm_source=tuicool&amp;utm_medium=referral\">《一个对前端模板技术的全面总结》</a></li>\n<li><a href=\"http://www.cnblogs.com/kenkofox/p/4643760.html\">《浅谈HTML5单页面架构》</a></li>\n</ul>\n<h3 id=\"深入理解库-框架原理\"><a href=\"#深入理解库-框架原理\" class=\"headerlink\" title=\"深入理解库/框架原理\"></a>深入理解库/框架原理</h3><ul>\n<li>学习研究源代码是个很好的爱好哦，对个人提升也很有帮助呢</li>\n<li>当然像Bootstrap这样的优秀样式框架很值得阅读，建议直接翻开源码，配合浏览器调试工具一起学习吧</li>\n<li><a href=\"http://www.sxrczx.com/docs/js/2286877.html\">《深入理解JavaScript系列》</a></li>\n<li><a href=\"http://www.cnblogs.com/aaronjs/p/3279314.html\">《jQuery源码分析系列》</a></li>\n<li><a href=\"http://www.cnblogs.com/heyuquan/archive/2013/05/13/3076465.html\">《触碰jQuery：AJAX异步详解》</a></li>\n<li>React精华之虚拟DOM：<a href=\"https://github.com/livoras/blog/issues/13\">《如何实现一个Virtual DOM算法》</a></li>\n<li><a href=\"https://www.zouyesheng.com/angular.html\">《Angular学习笔记》</a></li>\n<li><a href=\"http://www.html-js.com/article/2145\">《Angular源码分析系列》</a></li>\n</ul>\n<h3 id=\"了解后台工作\"><a href=\"#了解后台工作\" class=\"headerlink\" title=\"了解后台工作\"></a>了解后台工作</h3><ul>\n<li>了解和你一起合作的小伙伴们也是很重要的哦</li>\n<li>PHP、JAVA、Nodejs等服务端语言</li>\n<li>MySQL、MongoDB等数据库</li>\n</ul>\n<h2 id=\"培养你的热情\"><a href=\"#培养你的热情\" class=\"headerlink\" title=\"培养你的热情\"></a>培养你的热情</h2><hr>\n<p>你热爱前端吗？不清楚？<br>那你喜欢逻辑吗，喜欢设计吗，想要将自己大大的脑洞里面装的所有有趣的都分享出来吗？<br>我喜欢思考，喜欢想象，热爱学习，沉迷那种把想法写成成果的喜悦。<br>如果你的热情跟不上，可以尝试一下设计些小项目：</p>\n<h3 id=\"博客\"><a href=\"#博客\" class=\"headerlink\" title=\"博客\"></a>博客</h3><p>这是最大众的选择，但即使是这样普通的网页，依然可以刷上你喜欢的颜色，添加有趣的装饰，贴一些你的想法，分享自己的喜怒哀乐。<br>还有什么比拥有一个专属自己的空间更值得开心呢？</p>\n<ul>\n<li>搭建方式： <ul>\n<li>1.使用现有工具快速搭建。可选择使用wordpress（基于PHP），或者是hexo(基于nodejs)。网上google教程，一搜一大堆，度娘和谷哥无论生活还是学习都是一强力工具呢（很可惜我的认知能力就到这里了。。）</li>\n<li>2.网上下载一些喜欢的博客资源，然后根据自己的爱好进行修改</li>\n<li>3.从基础开始，自己搭建。可以从静态页面开始，用最基础的HTML+CSS+javascript(jQuery)来编写你的静态页面吧。一步步实现自己的设计还是个很有成就感的事情呢。<a href=\"http://www.godbasin.com/\">看我用静态页面和PHP搭的很多bug的博客</a></li>\n</ul>\n</li>\n</ul>\n<h3 id=\"游戏\"><a href=\"#游戏\" class=\"headerlink\" title=\"游戏\"></a>游戏</h3><p>当然首先你自己得是个爱玩游戏的骚年。相信你会对自己在游戏中加入的小想法和念头沾沾自喜的。</p>\n<ul>\n<li>编写选择：<ul>\n<li>1.idea不足的时候，可以选择自己喜欢的一款游戏，使用前端去编写。</li>\n<li>2.又或者可以下载已有的游戏，改成成自己喜欢的样子。</li>\n<li>3.脑洞够大的你，当然要写一份自己设计的游戏啦。<br>看我的<a href=\"http://o969gatx6.bkt.clouddn.com/index.html\">《打嗝的巴士》</a>和<a href=\"http://o969lbf8k.bkt.clouddn.com/ballt.html\">《弹珠》</a></li>\n</ul>\n</li>\n</ul>\n<h3 id=\"动态页面\"><a href=\"#动态页面\" class=\"headerlink\" title=\"动态页面\"></a>动态页面</h3><p>一个简单但却动效十足的交互页面也是很有意思的哦。可参考<a href=\"http://o95scrds5.bkt.clouddn.com/index.html\">《酷炫HTML5》</a><br>当然这跟HTML5没多大关系，主要用的CSS3，不得不说CSS3太好玩了。</p>\n<h3 id=\"静态网页\"><a href=\"#静态网页\" class=\"headerlink\" title=\"静态网页\"></a>静态网页</h3><p>静态网页可能没有前面的有意思，但也不妨为一种练习设计和基础的方式。<br>当然酷酷的你肯定可以设计漂亮的静态页面，又或者你可以用多种库和框架练练手呢。<br>参考入门初期写的一些网页： <a href=\"http://o95u5v08d.bkt.clouddn.com/index.html\">《被删动漫》</a>和<a href=\"http://o95u208de.bkt.clouddn.com/index.html\">《Restaurant》</a></p>\n<h2 id=\"结束语\"><a href=\"#结束语\" class=\"headerlink\" title=\"结束语\"></a>结束语</h2><hr>\n<p>一年多来，我学到的也就这篇文章差不多的东西。<br>前端很繁荣呢，还有很多很多的领域等待开拓和研究，相信你和我一样都满怀着好奇心和期待呢。<br>每天期待去上班的，不能只是我一个呀。让你的工作成为你美好生活的一部分吧。</p>"},{"title":"Angular使用笔记9-使用sessionStorage判断是否已登录","date":"2016-07-24T01:32:34.000Z","_content":"最近的一个项目使用AngularJS(v1.2.6)作为前端的框架，《Angular使用笔记》系列用于记录过程中的一些使用和解决方法。\n本文记录使用sessionStorage判断是否已登录并进行跳转的过程。\n<!--more-->\n\n前面篇章我们已经讲述过公用信息的获取和设置方法，具体可以查看[《Angular使用笔记3--公用信息的管理》](https://godbasin.github.io/2016/07/09/angular-note-3-common-info-manage/)。\n在这里我们使用sessionStorage来记录会话，如果没登录则自行跳转至登录页面。\n## sessionStorage\n-----\n### HTML5新特性: SessionStorage\n- sessionStorage用于本地存储一个会话（session）中的数据，这些数据只有在同一个会话中的页面才能访问并且当会话结束后数据也随之销毁\n- sessionStorage不是一种持久化的本地存储，仅仅是会话级别的存储\n- 可利用SessionStorage保存一些会话类公共信息\n\n### 使用sessionStorage\n- 检测兼容性：window.sessionStorage\n- 设置session项：sessionStorage.setItem(key, value)\n- 获取session项：sessionStorage.getItem(key)\n- 删除session项：sessionStorage.removeItem(key)\n- 清除所有session信息：sessionStorage.clear()\n- sessionStorage的项目数：sessionStorage.length\n\n### sessionStorage/localStorage/Cookie的异同\n-  sessionStorage数据的存储仅特定于某个会话中，也就是说数据只保持到浏览器关闭，当浏览器关闭后重新打开这个页面时，之前的存储已经被清除\n-  localStorage是一个持久化的存储，它并不局限于会话\n-  Cookie非常小，它的大小限制为4KB左右（sessionStorage和localStorage为5M左右），可设置失效时间，默认是关闭浏览器后失效\n\n### 依赖注入使用filter\n- 需使用依赖注入方法将$filter注入到该controller中\n\n``` javascrpit\nvar new_value = $filter('filtername')(old_value);\n```\n\n## 使用sessionStorage判断是否已登录\n-----\n### 登录提交设置sessionStorage\n登录的时候将账户信息添加进sessionStorage，这里为方便直接记录账户名。当然在实际使用中一般都是登录成功返回信息时进行添加，然后再进行跳转。\n- 在LoginCtrl控制器中跳转前加入以下代码：\n\n``` javascrpit\nsessionStorage.setItem('username', $scope.username);\n```\n\n### 在页面中添加判断\n除了login页面之外，其他页面都需要进行判断，方法可以有以下几种：\n- 在每个页面的控制器中添加判断\n- 在头部控制器中添加判断（除login页面之外都有头部指令）\n- 集成服务，在服务中进行判断，然后在控制器中注入服务并使用\n\n这里我们在头部控制器里加入判断\n``` javascrpit\n//判断是否已经登录，未登录则进行跳转\nif (!sessionStorage.getItem('username')) {\n\talert(\"请登录\");\n\tlocation.href = 'index.html#/';\n}\n```\n\n### 退出时注销登录信息\n我们之前在头部下拉菜单上添加了退出选项，现在我们需要在跳转前注销登录信息。\n- 绑定ng-click事件\n- 添加click选项，值为funxtion执行函数\n\n``` javascrpit\n$scope.usermenus = [{\n\ttext: '退出', //text用于储存该菜单显示名称\n\tclick: function() {\n\t\tsessionStorage.clear(); //清除登录信息\n\t\tlocation.href = 'index.html#/login'; //设定该菜单跳转路由\n\t}\n}];\n```\n\n## 结束语\n-----\n至此，我们大概完成了一个较完整的项目，当然实际中工程远大于本骚年所介绍的，遇到的问题也远比这些复杂。但没关系，困难都是一步步克服的，相信大家能很好地解决掉他们。\n[此处查看项目代码（仅包含app部分）](https://github.com/godbasin/godbasin.github.io/tree/blog-codes/angular-notes/8-create-filter)\n[此处查看页面效果](http://o9grhhyar.bkt.clouddn.com/9-session-commit/index.html#/index)","source":"_posts/angular-note-9-session-commit.md","raw":"---\ntitle: Angular使用笔记9-使用sessionStorage判断是否已登录\ndate: 2016-07-24 09:32:34\ncategories: angular混搭\ntags: 笔记\n---\n最近的一个项目使用AngularJS(v1.2.6)作为前端的框架，《Angular使用笔记》系列用于记录过程中的一些使用和解决方法。\n本文记录使用sessionStorage判断是否已登录并进行跳转的过程。\n<!--more-->\n\n前面篇章我们已经讲述过公用信息的获取和设置方法，具体可以查看[《Angular使用笔记3--公用信息的管理》](https://godbasin.github.io/2016/07/09/angular-note-3-common-info-manage/)。\n在这里我们使用sessionStorage来记录会话，如果没登录则自行跳转至登录页面。\n## sessionStorage\n-----\n### HTML5新特性: SessionStorage\n- sessionStorage用于本地存储一个会话（session）中的数据，这些数据只有在同一个会话中的页面才能访问并且当会话结束后数据也随之销毁\n- sessionStorage不是一种持久化的本地存储，仅仅是会话级别的存储\n- 可利用SessionStorage保存一些会话类公共信息\n\n### 使用sessionStorage\n- 检测兼容性：window.sessionStorage\n- 设置session项：sessionStorage.setItem(key, value)\n- 获取session项：sessionStorage.getItem(key)\n- 删除session项：sessionStorage.removeItem(key)\n- 清除所有session信息：sessionStorage.clear()\n- sessionStorage的项目数：sessionStorage.length\n\n### sessionStorage/localStorage/Cookie的异同\n-  sessionStorage数据的存储仅特定于某个会话中，也就是说数据只保持到浏览器关闭，当浏览器关闭后重新打开这个页面时，之前的存储已经被清除\n-  localStorage是一个持久化的存储，它并不局限于会话\n-  Cookie非常小，它的大小限制为4KB左右（sessionStorage和localStorage为5M左右），可设置失效时间，默认是关闭浏览器后失效\n\n### 依赖注入使用filter\n- 需使用依赖注入方法将$filter注入到该controller中\n\n``` javascrpit\nvar new_value = $filter('filtername')(old_value);\n```\n\n## 使用sessionStorage判断是否已登录\n-----\n### 登录提交设置sessionStorage\n登录的时候将账户信息添加进sessionStorage，这里为方便直接记录账户名。当然在实际使用中一般都是登录成功返回信息时进行添加，然后再进行跳转。\n- 在LoginCtrl控制器中跳转前加入以下代码：\n\n``` javascrpit\nsessionStorage.setItem('username', $scope.username);\n```\n\n### 在页面中添加判断\n除了login页面之外，其他页面都需要进行判断，方法可以有以下几种：\n- 在每个页面的控制器中添加判断\n- 在头部控制器中添加判断（除login页面之外都有头部指令）\n- 集成服务，在服务中进行判断，然后在控制器中注入服务并使用\n\n这里我们在头部控制器里加入判断\n``` javascrpit\n//判断是否已经登录，未登录则进行跳转\nif (!sessionStorage.getItem('username')) {\n\talert(\"请登录\");\n\tlocation.href = 'index.html#/';\n}\n```\n\n### 退出时注销登录信息\n我们之前在头部下拉菜单上添加了退出选项，现在我们需要在跳转前注销登录信息。\n- 绑定ng-click事件\n- 添加click选项，值为funxtion执行函数\n\n``` javascrpit\n$scope.usermenus = [{\n\ttext: '退出', //text用于储存该菜单显示名称\n\tclick: function() {\n\t\tsessionStorage.clear(); //清除登录信息\n\t\tlocation.href = 'index.html#/login'; //设定该菜单跳转路由\n\t}\n}];\n```\n\n## 结束语\n-----\n至此，我们大概完成了一个较完整的项目，当然实际中工程远大于本骚年所介绍的，遇到的问题也远比这些复杂。但没关系，困难都是一步步克服的，相信大家能很好地解决掉他们。\n[此处查看项目代码（仅包含app部分）](https://github.com/godbasin/godbasin.github.io/tree/blog-codes/angular-notes/8-create-filter)\n[此处查看页面效果](http://o9grhhyar.bkt.clouddn.com/9-session-commit/index.html#/index)","slug":"angular-note-9-session-commit","published":1,"updated":"2016-07-29T13:21:25.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cirrwvo3d000w38l54tztt6nj","content":"<p>最近的一个项目使用AngularJS(v1.2.6)作为前端的框架，《Angular使用笔记》系列用于记录过程中的一些使用和解决方法。<br>本文记录使用sessionStorage判断是否已登录并进行跳转的过程。<br><a id=\"more\"></a></p>\n<p>前面篇章我们已经讲述过公用信息的获取和设置方法，具体可以查看<a href=\"https://godbasin.github.io/2016/07/09/angular-note-3-common-info-manage/\">《Angular使用笔记3–公用信息的管理》</a>。<br>在这里我们使用sessionStorage来记录会话，如果没登录则自行跳转至登录页面。</p>\n<h2 id=\"sessionStorage\"><a href=\"#sessionStorage\" class=\"headerlink\" title=\"sessionStorage\"></a>sessionStorage</h2><hr>\n<h3 id=\"HTML5新特性-SessionStorage\"><a href=\"#HTML5新特性-SessionStorage\" class=\"headerlink\" title=\"HTML5新特性: SessionStorage\"></a>HTML5新特性: SessionStorage</h3><ul>\n<li>sessionStorage用于本地存储一个会话（session）中的数据，这些数据只有在同一个会话中的页面才能访问并且当会话结束后数据也随之销毁</li>\n<li>sessionStorage不是一种持久化的本地存储，仅仅是会话级别的存储</li>\n<li>可利用SessionStorage保存一些会话类公共信息</li>\n</ul>\n<h3 id=\"使用sessionStorage\"><a href=\"#使用sessionStorage\" class=\"headerlink\" title=\"使用sessionStorage\"></a>使用sessionStorage</h3><ul>\n<li>检测兼容性：window.sessionStorage</li>\n<li>设置session项：sessionStorage.setItem(key, value)</li>\n<li>获取session项：sessionStorage.getItem(key)</li>\n<li>删除session项：sessionStorage.removeItem(key)</li>\n<li>清除所有session信息：sessionStorage.clear()</li>\n<li>sessionStorage的项目数：sessionStorage.length</li>\n</ul>\n<h3 id=\"sessionStorage-localStorage-Cookie的异同\"><a href=\"#sessionStorage-localStorage-Cookie的异同\" class=\"headerlink\" title=\"sessionStorage/localStorage/Cookie的异同\"></a>sessionStorage/localStorage/Cookie的异同</h3><ul>\n<li>sessionStorage数据的存储仅特定于某个会话中，也就是说数据只保持到浏览器关闭，当浏览器关闭后重新打开这个页面时，之前的存储已经被清除</li>\n<li>localStorage是一个持久化的存储，它并不局限于会话</li>\n<li>Cookie非常小，它的大小限制为4KB左右（sessionStorage和localStorage为5M左右），可设置失效时间，默认是关闭浏览器后失效</li>\n</ul>\n<h3 id=\"依赖注入使用filter\"><a href=\"#依赖注入使用filter\" class=\"headerlink\" title=\"依赖注入使用filter\"></a>依赖注入使用filter</h3><ul>\n<li>需使用依赖注入方法将$filter注入到该controller中</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var new_value = $filter(&apos;filtername&apos;)(old_value);</span><br></pre></td></tr></table></figure>\n<h2 id=\"使用sessionStorage判断是否已登录\"><a href=\"#使用sessionStorage判断是否已登录\" class=\"headerlink\" title=\"使用sessionStorage判断是否已登录\"></a>使用sessionStorage判断是否已登录</h2><hr>\n<h3 id=\"登录提交设置sessionStorage\"><a href=\"#登录提交设置sessionStorage\" class=\"headerlink\" title=\"登录提交设置sessionStorage\"></a>登录提交设置sessionStorage</h3><p>登录的时候将账户信息添加进sessionStorage，这里为方便直接记录账户名。当然在实际使用中一般都是登录成功返回信息时进行添加，然后再进行跳转。</p>\n<ul>\n<li>在LoginCtrl控制器中跳转前加入以下代码：</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sessionStorage.setItem(&apos;username&apos;, $scope.username);</span><br></pre></td></tr></table></figure>\n<h3 id=\"在页面中添加判断\"><a href=\"#在页面中添加判断\" class=\"headerlink\" title=\"在页面中添加判断\"></a>在页面中添加判断</h3><p>除了login页面之外，其他页面都需要进行判断，方法可以有以下几种：</p>\n<ul>\n<li>在每个页面的控制器中添加判断</li>\n<li>在头部控制器中添加判断（除login页面之外都有头部指令）</li>\n<li>集成服务，在服务中进行判断，然后在控制器中注入服务并使用</li>\n</ul>\n<p>这里我们在头部控制器里加入判断<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//判断是否已经登录，未登录则进行跳转</span><br><span class=\"line\">if (!sessionStorage.getItem(&apos;username&apos;)) &#123;</span><br><span class=\"line\">  alert(&quot;请登录&quot;);</span><br><span class=\"line\">  location.href = &apos;index.html#/&apos;;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"退出时注销登录信息\"><a href=\"#退出时注销登录信息\" class=\"headerlink\" title=\"退出时注销登录信息\"></a>退出时注销登录信息</h3><p>我们之前在头部下拉菜单上添加了退出选项，现在我们需要在跳转前注销登录信息。</p>\n<ul>\n<li>绑定ng-click事件</li>\n<li>添加click选项，值为funxtion执行函数</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$scope.usermenus = [&#123;</span><br><span class=\"line\">  text: &apos;退出&apos;, //text用于储存该菜单显示名称</span><br><span class=\"line\">  click: function() &#123;</span><br><span class=\"line\">    sessionStorage.clear(); //清除登录信息</span><br><span class=\"line\">    location.href = &apos;index.html#/login&apos;; //设定该菜单跳转路由</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;];</span><br></pre></td></tr></table></figure>\n<h2 id=\"结束语\"><a href=\"#结束语\" class=\"headerlink\" title=\"结束语\"></a>结束语</h2><hr>\n<p>至此，我们大概完成了一个较完整的项目，当然实际中工程远大于本骚年所介绍的，遇到的问题也远比这些复杂。但没关系，困难都是一步步克服的，相信大家能很好地解决掉他们。<br><a href=\"https://github.com/godbasin/godbasin.github.io/tree/blog-codes/angular-notes/8-create-filter\" target=\"_blank\" rel=\"external\">此处查看项目代码（仅包含app部分）</a><br><a href=\"http://o9grhhyar.bkt.clouddn.com/9-session-commit/index.html#/index\" target=\"_blank\" rel=\"external\">此处查看页面效果</a></p>\n","excerpt":"<p>最近的一个项目使用AngularJS(v1.2.6)作为前端的框架，《Angular使用笔记》系列用于记录过程中的一些使用和解决方法。<br>本文记录使用sessionStorage判断是否已登录并进行跳转的过程。<br>","more":"</p>\n<p>前面篇章我们已经讲述过公用信息的获取和设置方法，具体可以查看<a href=\"https://godbasin.github.io/2016/07/09/angular-note-3-common-info-manage/\">《Angular使用笔记3–公用信息的管理》</a>。<br>在这里我们使用sessionStorage来记录会话，如果没登录则自行跳转至登录页面。</p>\n<h2 id=\"sessionStorage\"><a href=\"#sessionStorage\" class=\"headerlink\" title=\"sessionStorage\"></a>sessionStorage</h2><hr>\n<h3 id=\"HTML5新特性-SessionStorage\"><a href=\"#HTML5新特性-SessionStorage\" class=\"headerlink\" title=\"HTML5新特性: SessionStorage\"></a>HTML5新特性: SessionStorage</h3><ul>\n<li>sessionStorage用于本地存储一个会话（session）中的数据，这些数据只有在同一个会话中的页面才能访问并且当会话结束后数据也随之销毁</li>\n<li>sessionStorage不是一种持久化的本地存储，仅仅是会话级别的存储</li>\n<li>可利用SessionStorage保存一些会话类公共信息</li>\n</ul>\n<h3 id=\"使用sessionStorage\"><a href=\"#使用sessionStorage\" class=\"headerlink\" title=\"使用sessionStorage\"></a>使用sessionStorage</h3><ul>\n<li>检测兼容性：window.sessionStorage</li>\n<li>设置session项：sessionStorage.setItem(key, value)</li>\n<li>获取session项：sessionStorage.getItem(key)</li>\n<li>删除session项：sessionStorage.removeItem(key)</li>\n<li>清除所有session信息：sessionStorage.clear()</li>\n<li>sessionStorage的项目数：sessionStorage.length</li>\n</ul>\n<h3 id=\"sessionStorage-localStorage-Cookie的异同\"><a href=\"#sessionStorage-localStorage-Cookie的异同\" class=\"headerlink\" title=\"sessionStorage/localStorage/Cookie的异同\"></a>sessionStorage/localStorage/Cookie的异同</h3><ul>\n<li>sessionStorage数据的存储仅特定于某个会话中，也就是说数据只保持到浏览器关闭，当浏览器关闭后重新打开这个页面时，之前的存储已经被清除</li>\n<li>localStorage是一个持久化的存储，它并不局限于会话</li>\n<li>Cookie非常小，它的大小限制为4KB左右（sessionStorage和localStorage为5M左右），可设置失效时间，默认是关闭浏览器后失效</li>\n</ul>\n<h3 id=\"依赖注入使用filter\"><a href=\"#依赖注入使用filter\" class=\"headerlink\" title=\"依赖注入使用filter\"></a>依赖注入使用filter</h3><ul>\n<li>需使用依赖注入方法将$filter注入到该controller中</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var new_value = $filter(&apos;filtername&apos;)(old_value);</span><br></pre></td></tr></table></figure>\n<h2 id=\"使用sessionStorage判断是否已登录\"><a href=\"#使用sessionStorage判断是否已登录\" class=\"headerlink\" title=\"使用sessionStorage判断是否已登录\"></a>使用sessionStorage判断是否已登录</h2><hr>\n<h3 id=\"登录提交设置sessionStorage\"><a href=\"#登录提交设置sessionStorage\" class=\"headerlink\" title=\"登录提交设置sessionStorage\"></a>登录提交设置sessionStorage</h3><p>登录的时候将账户信息添加进sessionStorage，这里为方便直接记录账户名。当然在实际使用中一般都是登录成功返回信息时进行添加，然后再进行跳转。</p>\n<ul>\n<li>在LoginCtrl控制器中跳转前加入以下代码：</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sessionStorage.setItem(&apos;username&apos;, $scope.username);</span><br></pre></td></tr></table></figure>\n<h3 id=\"在页面中添加判断\"><a href=\"#在页面中添加判断\" class=\"headerlink\" title=\"在页面中添加判断\"></a>在页面中添加判断</h3><p>除了login页面之外，其他页面都需要进行判断，方法可以有以下几种：</p>\n<ul>\n<li>在每个页面的控制器中添加判断</li>\n<li>在头部控制器中添加判断（除login页面之外都有头部指令）</li>\n<li>集成服务，在服务中进行判断，然后在控制器中注入服务并使用</li>\n</ul>\n<p>这里我们在头部控制器里加入判断<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//判断是否已经登录，未登录则进行跳转</span><br><span class=\"line\">if (!sessionStorage.getItem(&apos;username&apos;)) &#123;</span><br><span class=\"line\">  alert(&quot;请登录&quot;);</span><br><span class=\"line\">  location.href = &apos;index.html#/&apos;;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"退出时注销登录信息\"><a href=\"#退出时注销登录信息\" class=\"headerlink\" title=\"退出时注销登录信息\"></a>退出时注销登录信息</h3><p>我们之前在头部下拉菜单上添加了退出选项，现在我们需要在跳转前注销登录信息。</p>\n<ul>\n<li>绑定ng-click事件</li>\n<li>添加click选项，值为funxtion执行函数</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$scope.usermenus = [&#123;</span><br><span class=\"line\">  text: &apos;退出&apos;, //text用于储存该菜单显示名称</span><br><span class=\"line\">  click: function() &#123;</span><br><span class=\"line\">    sessionStorage.clear(); //清除登录信息</span><br><span class=\"line\">    location.href = &apos;index.html#/login&apos;; //设定该菜单跳转路由</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;];</span><br></pre></td></tr></table></figure>\n<h2 id=\"结束语\"><a href=\"#结束语\" class=\"headerlink\" title=\"结束语\"></a>结束语</h2><hr>\n<p>至此，我们大概完成了一个较完整的项目，当然实际中工程远大于本骚年所介绍的，遇到的问题也远比这些复杂。但没关系，困难都是一步步克服的，相信大家能很好地解决掉他们。<br><a href=\"https://github.com/godbasin/godbasin.github.io/tree/blog-codes/angular-notes/8-create-filter\">此处查看项目代码（仅包含app部分）</a><br><a href=\"http://o9grhhyar.bkt.clouddn.com/9-session-commit/index.html#/index\">此处查看页面效果</a></p>"},{"title":"React使用笔记1--使用webpack搭建React项目","date":"2016-08-06T00:52:22.000Z","_content":"最近在学习使用React作为前端的框架，《React使用笔记》系列用于记录过程中的一些使用和解决方法。\n本文记录使用webpack初步搭建项目的过程。\n<!--more-->\n\n## 初步使用React应用\n\n### 直接使用React源码\n- 下载[React源代码](https://facebook.github.io/react/downloads.html)\n- 引入到页面内\n- 页面模板\n\n``` html\n<!DOCTYPE html>\n<html>\n  <head>\n    <meta charset=\"UTF-8\" />\n    <title>Hello React!</title>\n\t<!-- 引入源文件到页面内 -->\n    <script src=\"build/react.js\"></script>\n    <script src=\"build/react-dom.js\"></script>\n    <script src=\"https://cdnjs.cloudflare.com/ajax/libs/babel-core/5.8.34/browser.min.js\"></script>\n  </head>\n  <body>\n    <div id=\"example\"></div>\n\t<!-- type属性为text/babel -->\n    <script type=\"text/babel\">\n      ReactDOM.render(\n        <h1>Hello, world!</h1>,\n        document.getElementById('example')\n      );\n    </script>\n  </body>\n</html>\n```\n- 注意\n  - 在这里type属性为text/babel，原因是React的JSX语法，跟 JavaScript不兼容\n  - ReactDOM.render是React的最基本方法，用于将模板转为HTML语言，并插入指定的DOM节点\n- 参考[React官方教程](https://facebook.github.io/react/docs/getting-started.html)\n\n### 自动化搭建\n- 本骚念使用的是Webpack自动搭建，后面附上详细教程\n- 自动化搭建的好处：\n  - 1.可快速了解React通过Webpack工程化的过程\n  - 2.通过npm可选择引入需要使用的React模块，像React/React-dom/bootstrap/jQuery/less等可以添加并导入到应用中\n  - 3.自动ES6转换，React对ES6的支持程度很不错，怎么能错过使用的机会呢\n  - 4.自动jsx格式转换，React的特色JSX也必须少不了哒\n  - 5.热部署，文件修改保存之后自动刷新页面\n  - 6.可快速搭建单元测试环境\n- 参考[《手把手教你基于ES6架构自己的React Boilerplate项目》](http://www.open-open.com/lib/view/open1462013660085.html)\n\n### Webpack\n- webpack支持的功能特性：\n1. 支持CommonJs和AMD模块，意思也就是我们基本可以无痛迁移旧项目。\n2. 支持模块加载器和插件机制，可对模块灵活定制。特别是babel-loader，有效支持ES6。\n3. 可以通过配置，打包成多个文件。有效利用浏览器的缓存功能提升性能。\n4. 将样式文件和图片等静态资源也可视为模块进行打包。配合loader加载器，可以支持sass，less等CSS预处理器。\n5. 内置有source map，即使打包在一起依旧方便调试。\n\n- loader加载器\n  - loaders被应用于应用程序的资源文件中，通常用来做转换。\n  - 它们都是函数（运行在nodejs中），将资源文件的源码作为入参，处理完后，返回新的源码文件。\n  - less/sass loader加载器\n  - url-loader可对图片资源打包\n  - babel ES6预处理器\n\n- webpack安装\n\n``` javascript\n//按照webpack依赖\n$ npm install webpack -g\n//html-webpack-plugin插件用来简化创建服务于webpack bundle的HTML文件\n$ npm install html-webpack-plugin --save-dev\n//在本地启动一个web服务器\n$ npm install webpack-dev-server --save-dev\n//安装各个必须的loader\n$ npm install style-loader css-loader url-loader babel-loader less-loader file-loader --save-dev\n```\n- 参考[《webpack前端模块加载工具》](http://www.cnblogs.com/YikaJ/p/4586703.html)\n\n## 目录组织\n-----\nReact的目录组织相对自由，但自由通常也会带来不好维护的问题呢，所以建议大家好好管理文件哦。\n### 本骚年目录组织\n如下：\n![image](http://o905ne85q.bkt.clouddn.com/C315.tmp.png)\n- build用于存放最终生成的代码\n- components用于存放React的组件\n- images/less不用说当然是用来存放图片和样式文件的\n- node_modules大家都知道是npm的依赖文件\n- templates里面存放页面模板，index.ejs则是主页的模板\n- index.js是启动入口啦\n- package.json是管理npm依赖的文件\n- webpack.config.js则是webpack的配置项\n\n### webpack.config.js\n``` javascript\nvar webpack = require('webpack'); //引入node的webpack库\nvar path = require('path'); //引入node的path库\nvar HtmlwebpackPlugin = require('html-webpack-plugin'); //引入node的html-webpack-plugin库\nvar config = {\n\t//页面入口文件配置\n\tentry: [\n\t\t'webpack/hot/dev-server', //热部署\n\t\t'webpack-dev-server/client?http://localhost:3000', //本地服务端口\n\t\t'./index.js' //入口文件\n\t],\n\t//入口文件输出配置\n\toutput: {\n\t\tpath: path.resolve(__dirname, 'build'), // 指定编译后的代码位置为 build\n\t\tfilename: 'bundle.js' //打包JavaScript文件以及依赖(就是那些第三方的库)文件\n\t},\n\tmodule: {\n\t\t//加载器配置\n\t\tloaders: [\n\t\t\t//.jsx 文件使用babel-loader来编译处理\n\t\t\t{test: /\\.jsx?$/, loader: 'babel', exclude: /node_modules/, query: {presets: ['react', 'es2015']}},\n\t\t\t//.less 文件使用 style-loader/css-loader/less-loader 来处理\n\t\t\t{test: /\\.less$/, loaders: ['style', 'css', 'less'], include: path.resolve(__dirname, 'less')},\n\t\t\t//.jsx 文件使用babel-loader来编译处理\n\t\t\t{test: /\\.js$/, loaders: ['babel'], exclude: /node_modules/ },\n\t\t\t//图片文件使用 url-loader 来处理，小于8kb的直接转为base64\n\t\t\t{test: /\\.(jpg|png)$/, loader: \"url?limit=8192\"}\n\t\t]\n\t},\n\t//插件项\n\tplugins: [\n\t\tnew HtmlwebpackPlugin({\n\t\t\ttitle: 'React',\n\t\t\ttemplate: path.resolve(__dirname, 'templates/index.ejs'),\n\t\t\tinject: 'body'\n\t\t}),\n\t],\n};\nmodule.exports = config;\n```\n\n### package.json\n``` json\n\"devDependencies\": {\n\t\"babel-core\": \"^6.10.4\",\n\t\"babel-loader\": \"^6.2.4\",\n\t\"babel-preset-es2015\": \"^6.9.0\",\n\t\"babel-preset-react\": \"^6.11.1\",\n\t\"bootstrap\": \"^3.3.6\",\n\t\"css-loader\": \"^0.23.1\",\n\t\"file-loader\": \"^0.9.0\",\n\t\"html-webpack-plugin\": \"^2.21.0\",\n\t\"jquery\": \"^3.0.0\",\n\t\"less\": \"^2.7.1\",\n\t\"less-loader\": \"^2.2.3\",\n\t\"moment\": \"^2.13.0\",\n\t\"npm-install-webpack-plugin\": \"^4.0.3\",\n\t\"sass-loader\": \"^4.0.0\",\n\t\"style-loader\": \"^0.13.1\",\n\t\"url-loader\": \"^0.5.7\",\n\t\"webpack\": \"^1.13.1\",\n\t\"webpack-dev-server\": \"^1.14.1\"\n},\n\"dependencies\": {\n\t\"react\": \"^15.1.0\",\n\t\"react-dom\": \"^15.1.0\",\n\t\"webpack\": \"^1.13.1\"\n}\n```\n\n### 基本搭建项目\n- 在templates/index.ejs中添加初始模板\n\n``` javascript\n<!DOCTYPE html>\n<html>\n  <head>\n    <meta charset=\"utf-8\">\n    <title>react-test</title>   \n  </head>\n  <body>\n    <div id=\"test\"></div>\n  </body>\n</html>\n```\n\n- 在index.js中加入启动和依赖文件\n\n``` javascript\nimport './less/index.less'; //less样式文件\nimport React from 'react'; //react\nimport ReactDOM from 'react-dom'; //react-dom\nimport Component from  './components/component.jsx'; //你的自定义组件\nimport $ from 'jquery'; //这里引入jquery\n//将其渲染到页面上id为test的DOM元素内\nReactDOM.render(<Component></Component>, $('#test')[0]);\n```\n\n- 在components/component.jsx中添加组件\n\n``` javascript\nimport React from 'react';\n\nclass Component extends React.Component{\n  render() {\n    return <h1>Hello React</h1>;\n  }\n}\nmodule.exports = Component;\n```\n\n- 启动本地服务以及热部署\n\n``` javascript\nnpm run dev\n```\n\n- 生成文件到build\n\n``` javascript\nnpm run build\n```\n生成文件要注意把webpack.config.js里的热部署相关去掉哦\n``` javascript\nentry: [\n\t'./index.js' //入口文件\n],\n```\n- 至此，我们初步搭建了个React的项目\n效果如下：\n![image](http://o905ne85q.bkt.clouddn.com/3867.tmp.png)\n\n## 结束语\n-----\n自动化搭建可是个高效又酷酷的工程哦，而且在这过程中学到的也很多呢。\n[此处查看项目代码（仅包含app部分）](https://github.com/godbasin/godbasin.github.io/tree/blog-codes/react-notes/1-build-react-project)\n[此处查看页面效果](http://o9j9owc7b.bkt.clouddn.com/1-build-react-project/index.html)","source":"_posts/react-notes-1-build-react-project.md","raw":"---\ntitle: React使用笔记1--使用webpack搭建React项目\ndate: 2016-08-06 08:52:22\ncategories: react沙拉\ntags: 笔记\n---\n最近在学习使用React作为前端的框架，《React使用笔记》系列用于记录过程中的一些使用和解决方法。\n本文记录使用webpack初步搭建项目的过程。\n<!--more-->\n\n## 初步使用React应用\n\n### 直接使用React源码\n- 下载[React源代码](https://facebook.github.io/react/downloads.html)\n- 引入到页面内\n- 页面模板\n\n``` html\n<!DOCTYPE html>\n<html>\n  <head>\n    <meta charset=\"UTF-8\" />\n    <title>Hello React!</title>\n\t<!-- 引入源文件到页面内 -->\n    <script src=\"build/react.js\"></script>\n    <script src=\"build/react-dom.js\"></script>\n    <script src=\"https://cdnjs.cloudflare.com/ajax/libs/babel-core/5.8.34/browser.min.js\"></script>\n  </head>\n  <body>\n    <div id=\"example\"></div>\n\t<!-- type属性为text/babel -->\n    <script type=\"text/babel\">\n      ReactDOM.render(\n        <h1>Hello, world!</h1>,\n        document.getElementById('example')\n      );\n    </script>\n  </body>\n</html>\n```\n- 注意\n  - 在这里type属性为text/babel，原因是React的JSX语法，跟 JavaScript不兼容\n  - ReactDOM.render是React的最基本方法，用于将模板转为HTML语言，并插入指定的DOM节点\n- 参考[React官方教程](https://facebook.github.io/react/docs/getting-started.html)\n\n### 自动化搭建\n- 本骚念使用的是Webpack自动搭建，后面附上详细教程\n- 自动化搭建的好处：\n  - 1.可快速了解React通过Webpack工程化的过程\n  - 2.通过npm可选择引入需要使用的React模块，像React/React-dom/bootstrap/jQuery/less等可以添加并导入到应用中\n  - 3.自动ES6转换，React对ES6的支持程度很不错，怎么能错过使用的机会呢\n  - 4.自动jsx格式转换，React的特色JSX也必须少不了哒\n  - 5.热部署，文件修改保存之后自动刷新页面\n  - 6.可快速搭建单元测试环境\n- 参考[《手把手教你基于ES6架构自己的React Boilerplate项目》](http://www.open-open.com/lib/view/open1462013660085.html)\n\n### Webpack\n- webpack支持的功能特性：\n1. 支持CommonJs和AMD模块，意思也就是我们基本可以无痛迁移旧项目。\n2. 支持模块加载器和插件机制，可对模块灵活定制。特别是babel-loader，有效支持ES6。\n3. 可以通过配置，打包成多个文件。有效利用浏览器的缓存功能提升性能。\n4. 将样式文件和图片等静态资源也可视为模块进行打包。配合loader加载器，可以支持sass，less等CSS预处理器。\n5. 内置有source map，即使打包在一起依旧方便调试。\n\n- loader加载器\n  - loaders被应用于应用程序的资源文件中，通常用来做转换。\n  - 它们都是函数（运行在nodejs中），将资源文件的源码作为入参，处理完后，返回新的源码文件。\n  - less/sass loader加载器\n  - url-loader可对图片资源打包\n  - babel ES6预处理器\n\n- webpack安装\n\n``` javascript\n//按照webpack依赖\n$ npm install webpack -g\n//html-webpack-plugin插件用来简化创建服务于webpack bundle的HTML文件\n$ npm install html-webpack-plugin --save-dev\n//在本地启动一个web服务器\n$ npm install webpack-dev-server --save-dev\n//安装各个必须的loader\n$ npm install style-loader css-loader url-loader babel-loader less-loader file-loader --save-dev\n```\n- 参考[《webpack前端模块加载工具》](http://www.cnblogs.com/YikaJ/p/4586703.html)\n\n## 目录组织\n-----\nReact的目录组织相对自由，但自由通常也会带来不好维护的问题呢，所以建议大家好好管理文件哦。\n### 本骚年目录组织\n如下：\n![image](http://o905ne85q.bkt.clouddn.com/C315.tmp.png)\n- build用于存放最终生成的代码\n- components用于存放React的组件\n- images/less不用说当然是用来存放图片和样式文件的\n- node_modules大家都知道是npm的依赖文件\n- templates里面存放页面模板，index.ejs则是主页的模板\n- index.js是启动入口啦\n- package.json是管理npm依赖的文件\n- webpack.config.js则是webpack的配置项\n\n### webpack.config.js\n``` javascript\nvar webpack = require('webpack'); //引入node的webpack库\nvar path = require('path'); //引入node的path库\nvar HtmlwebpackPlugin = require('html-webpack-plugin'); //引入node的html-webpack-plugin库\nvar config = {\n\t//页面入口文件配置\n\tentry: [\n\t\t'webpack/hot/dev-server', //热部署\n\t\t'webpack-dev-server/client?http://localhost:3000', //本地服务端口\n\t\t'./index.js' //入口文件\n\t],\n\t//入口文件输出配置\n\toutput: {\n\t\tpath: path.resolve(__dirname, 'build'), // 指定编译后的代码位置为 build\n\t\tfilename: 'bundle.js' //打包JavaScript文件以及依赖(就是那些第三方的库)文件\n\t},\n\tmodule: {\n\t\t//加载器配置\n\t\tloaders: [\n\t\t\t//.jsx 文件使用babel-loader来编译处理\n\t\t\t{test: /\\.jsx?$/, loader: 'babel', exclude: /node_modules/, query: {presets: ['react', 'es2015']}},\n\t\t\t//.less 文件使用 style-loader/css-loader/less-loader 来处理\n\t\t\t{test: /\\.less$/, loaders: ['style', 'css', 'less'], include: path.resolve(__dirname, 'less')},\n\t\t\t//.jsx 文件使用babel-loader来编译处理\n\t\t\t{test: /\\.js$/, loaders: ['babel'], exclude: /node_modules/ },\n\t\t\t//图片文件使用 url-loader 来处理，小于8kb的直接转为base64\n\t\t\t{test: /\\.(jpg|png)$/, loader: \"url?limit=8192\"}\n\t\t]\n\t},\n\t//插件项\n\tplugins: [\n\t\tnew HtmlwebpackPlugin({\n\t\t\ttitle: 'React',\n\t\t\ttemplate: path.resolve(__dirname, 'templates/index.ejs'),\n\t\t\tinject: 'body'\n\t\t}),\n\t],\n};\nmodule.exports = config;\n```\n\n### package.json\n``` json\n\"devDependencies\": {\n\t\"babel-core\": \"^6.10.4\",\n\t\"babel-loader\": \"^6.2.4\",\n\t\"babel-preset-es2015\": \"^6.9.0\",\n\t\"babel-preset-react\": \"^6.11.1\",\n\t\"bootstrap\": \"^3.3.6\",\n\t\"css-loader\": \"^0.23.1\",\n\t\"file-loader\": \"^0.9.0\",\n\t\"html-webpack-plugin\": \"^2.21.0\",\n\t\"jquery\": \"^3.0.0\",\n\t\"less\": \"^2.7.1\",\n\t\"less-loader\": \"^2.2.3\",\n\t\"moment\": \"^2.13.0\",\n\t\"npm-install-webpack-plugin\": \"^4.0.3\",\n\t\"sass-loader\": \"^4.0.0\",\n\t\"style-loader\": \"^0.13.1\",\n\t\"url-loader\": \"^0.5.7\",\n\t\"webpack\": \"^1.13.1\",\n\t\"webpack-dev-server\": \"^1.14.1\"\n},\n\"dependencies\": {\n\t\"react\": \"^15.1.0\",\n\t\"react-dom\": \"^15.1.0\",\n\t\"webpack\": \"^1.13.1\"\n}\n```\n\n### 基本搭建项目\n- 在templates/index.ejs中添加初始模板\n\n``` javascript\n<!DOCTYPE html>\n<html>\n  <head>\n    <meta charset=\"utf-8\">\n    <title>react-test</title>   \n  </head>\n  <body>\n    <div id=\"test\"></div>\n  </body>\n</html>\n```\n\n- 在index.js中加入启动和依赖文件\n\n``` javascript\nimport './less/index.less'; //less样式文件\nimport React from 'react'; //react\nimport ReactDOM from 'react-dom'; //react-dom\nimport Component from  './components/component.jsx'; //你的自定义组件\nimport $ from 'jquery'; //这里引入jquery\n//将其渲染到页面上id为test的DOM元素内\nReactDOM.render(<Component></Component>, $('#test')[0]);\n```\n\n- 在components/component.jsx中添加组件\n\n``` javascript\nimport React from 'react';\n\nclass Component extends React.Component{\n  render() {\n    return <h1>Hello React</h1>;\n  }\n}\nmodule.exports = Component;\n```\n\n- 启动本地服务以及热部署\n\n``` javascript\nnpm run dev\n```\n\n- 生成文件到build\n\n``` javascript\nnpm run build\n```\n生成文件要注意把webpack.config.js里的热部署相关去掉哦\n``` javascript\nentry: [\n\t'./index.js' //入口文件\n],\n```\n- 至此，我们初步搭建了个React的项目\n效果如下：\n![image](http://o905ne85q.bkt.clouddn.com/3867.tmp.png)\n\n## 结束语\n-----\n自动化搭建可是个高效又酷酷的工程哦，而且在这过程中学到的也很多呢。\n[此处查看项目代码（仅包含app部分）](https://github.com/godbasin/godbasin.github.io/tree/blog-codes/react-notes/1-build-react-project)\n[此处查看页面效果](http://o9j9owc7b.bkt.clouddn.com/1-build-react-project/index.html)","slug":"react-notes-1-build-react-project","published":1,"updated":"2016-08-06T01:33:54.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cirrwvo3i000z38l5o0q3v2sp","content":"<p>最近在学习使用React作为前端的框架，《React使用笔记》系列用于记录过程中的一些使用和解决方法。<br>本文记录使用webpack初步搭建项目的过程。<br><a id=\"more\"></a></p>\n<h2 id=\"初步使用React应用\"><a href=\"#初步使用React应用\" class=\"headerlink\" title=\"初步使用React应用\"></a>初步使用React应用</h2><h3 id=\"直接使用React源码\"><a href=\"#直接使用React源码\" class=\"headerlink\" title=\"直接使用React源码\"></a>直接使用React源码</h3><ul>\n<li>下载<a href=\"https://facebook.github.io/react/downloads.html\" target=\"_blank\" rel=\"external\">React源代码</a></li>\n<li>引入到页面内</li>\n<li>页面模板</li>\n</ul>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE html&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"UTF-8\"</span> /&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>Hello React!<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\">  <span class=\"comment\">&lt;!-- 引入源文件到页面内 --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"build/react.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"build/react-dom.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"https://cdnjs.cloudflare.com/ajax/libs/babel-core/5.8.34/browser.min.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"example\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"comment\">&lt;!-- type属性为text/babel --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/babel\"</span>&gt;</span><span class=\"javascript\"></span><br><span class=\"line\">      ReactDOM.render(</span><br><span class=\"line\">        <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>Hello, world!<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span>,</span><br><span class=\"line\">        <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'example'</span>)</span><br><span class=\"line\">      );</span><br><span class=\"line\">    </span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li>注意<ul>\n<li>在这里type属性为text/babel，原因是React的JSX语法，跟 JavaScript不兼容</li>\n<li>ReactDOM.render是React的最基本方法，用于将模板转为HTML语言，并插入指定的DOM节点</li>\n</ul>\n</li>\n<li>参考<a href=\"https://facebook.github.io/react/docs/getting-started.html\" target=\"_blank\" rel=\"external\">React官方教程</a></li>\n</ul>\n<h3 id=\"自动化搭建\"><a href=\"#自动化搭建\" class=\"headerlink\" title=\"自动化搭建\"></a>自动化搭建</h3><ul>\n<li>本骚念使用的是Webpack自动搭建，后面附上详细教程</li>\n<li>自动化搭建的好处：<ul>\n<li>1.可快速了解React通过Webpack工程化的过程</li>\n<li>2.通过npm可选择引入需要使用的React模块，像React/React-dom/bootstrap/jQuery/less等可以添加并导入到应用中</li>\n<li>3.自动ES6转换，React对ES6的支持程度很不错，怎么能错过使用的机会呢</li>\n<li>4.自动jsx格式转换，React的特色JSX也必须少不了哒</li>\n<li>5.热部署，文件修改保存之后自动刷新页面</li>\n<li>6.可快速搭建单元测试环境</li>\n</ul>\n</li>\n<li>参考<a href=\"http://www.open-open.com/lib/view/open1462013660085.html\" target=\"_blank\" rel=\"external\">《手把手教你基于ES6架构自己的React Boilerplate项目》</a></li>\n</ul>\n<h3 id=\"Webpack\"><a href=\"#Webpack\" class=\"headerlink\" title=\"Webpack\"></a>Webpack</h3><ul>\n<li>webpack支持的功能特性：</li>\n</ul>\n<ol>\n<li>支持CommonJs和AMD模块，意思也就是我们基本可以无痛迁移旧项目。</li>\n<li>支持模块加载器和插件机制，可对模块灵活定制。特别是babel-loader，有效支持ES6。</li>\n<li>可以通过配置，打包成多个文件。有效利用浏览器的缓存功能提升性能。</li>\n<li>将样式文件和图片等静态资源也可视为模块进行打包。配合loader加载器，可以支持sass，less等CSS预处理器。</li>\n<li>内置有source map，即使打包在一起依旧方便调试。</li>\n</ol>\n<ul>\n<li><p>loader加载器</p>\n<ul>\n<li>loaders被应用于应用程序的资源文件中，通常用来做转换。</li>\n<li>它们都是函数（运行在nodejs中），将资源文件的源码作为入参，处理完后，返回新的源码文件。</li>\n<li>less/sass loader加载器</li>\n<li>url-loader可对图片资源打包</li>\n<li>babel ES6预处理器</li>\n</ul>\n</li>\n<li><p>webpack安装</p>\n</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//按照webpack依赖</span></span><br><span class=\"line\">$ npm install webpack -g</span><br><span class=\"line\"><span class=\"comment\">//html-webpack-plugin插件用来简化创建服务于webpack bundle的HTML文件</span></span><br><span class=\"line\">$ npm install html-webpack-plugin --save-dev</span><br><span class=\"line\"><span class=\"comment\">//在本地启动一个web服务器</span></span><br><span class=\"line\">$ npm install webpack-dev-server --save-dev</span><br><span class=\"line\"><span class=\"comment\">//安装各个必须的loader</span></span><br><span class=\"line\">$ npm install style-loader css-loader url-loader babel-loader less-loader file-loader --save-dev</span><br></pre></td></tr></table></figure>\n<ul>\n<li>参考<a href=\"http://www.cnblogs.com/YikaJ/p/4586703.html\" target=\"_blank\" rel=\"external\">《webpack前端模块加载工具》</a></li>\n</ul>\n<h2 id=\"目录组织\"><a href=\"#目录组织\" class=\"headerlink\" title=\"目录组织\"></a>目录组织</h2><hr>\n<p>React的目录组织相对自由，但自由通常也会带来不好维护的问题呢，所以建议大家好好管理文件哦。</p>\n<h3 id=\"本骚年目录组织\"><a href=\"#本骚年目录组织\" class=\"headerlink\" title=\"本骚年目录组织\"></a>本骚年目录组织</h3><p>如下：<br><img src=\"http://o905ne85q.bkt.clouddn.com/C315.tmp.png\" alt=\"image\"></p>\n<ul>\n<li>build用于存放最终生成的代码</li>\n<li>components用于存放React的组件</li>\n<li>images/less不用说当然是用来存放图片和样式文件的</li>\n<li>node_modules大家都知道是npm的依赖文件</li>\n<li>templates里面存放页面模板，index.ejs则是主页的模板</li>\n<li>index.js是启动入口啦</li>\n<li>package.json是管理npm依赖的文件</li>\n<li>webpack.config.js则是webpack的配置项</li>\n</ul>\n<h3 id=\"webpack-config-js\"><a href=\"#webpack-config-js\" class=\"headerlink\" title=\"webpack.config.js\"></a>webpack.config.js</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> webpack = <span class=\"built_in\">require</span>(<span class=\"string\">'webpack'</span>); <span class=\"comment\">//引入node的webpack库</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> path = <span class=\"built_in\">require</span>(<span class=\"string\">'path'</span>); <span class=\"comment\">//引入node的path库</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> HtmlwebpackPlugin = <span class=\"built_in\">require</span>(<span class=\"string\">'html-webpack-plugin'</span>); <span class=\"comment\">//引入node的html-webpack-plugin库</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> config = &#123;</span><br><span class=\"line\">  <span class=\"comment\">//页面入口文件配置</span></span><br><span class=\"line\">  entry: [</span><br><span class=\"line\">    <span class=\"string\">'webpack/hot/dev-server'</span>, <span class=\"comment\">//热部署</span></span><br><span class=\"line\">    <span class=\"string\">'webpack-dev-server/client?http://localhost:3000'</span>, <span class=\"comment\">//本地服务端口</span></span><br><span class=\"line\">    <span class=\"string\">'./index.js'</span> <span class=\"comment\">//入口文件</span></span><br><span class=\"line\">  ],</span><br><span class=\"line\">  <span class=\"comment\">//入口文件输出配置</span></span><br><span class=\"line\">  output: &#123;</span><br><span class=\"line\">    path: path.resolve(__dirname, <span class=\"string\">'build'</span>), <span class=\"comment\">// 指定编译后的代码位置为 build</span></span><br><span class=\"line\">    filename: <span class=\"string\">'bundle.js'</span> <span class=\"comment\">//打包JavaScript文件以及依赖(就是那些第三方的库)文件</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"built_in\">module</span>: &#123;</span><br><span class=\"line\">    <span class=\"comment\">//加载器配置</span></span><br><span class=\"line\">    loaders: [</span><br><span class=\"line\">      <span class=\"comment\">//.jsx 文件使用babel-loader来编译处理</span></span><br><span class=\"line\">      &#123;test: <span class=\"regexp\">/\\.jsx?$/</span>, loader: <span class=\"string\">'babel'</span>, exclude: <span class=\"regexp\">/node_modules/</span>, query: &#123;presets: [<span class=\"string\">'react'</span>, <span class=\"string\">'es2015'</span>]&#125;&#125;,</span><br><span class=\"line\">      <span class=\"comment\">//.less 文件使用 style-loader/css-loader/less-loader 来处理</span></span><br><span class=\"line\">      &#123;test: <span class=\"regexp\">/\\.less$/</span>, loaders: [<span class=\"string\">'style'</span>, <span class=\"string\">'css'</span>, <span class=\"string\">'less'</span>], include: path.resolve(__dirname, <span class=\"string\">'less'</span>)&#125;,</span><br><span class=\"line\">      <span class=\"comment\">//.jsx 文件使用babel-loader来编译处理</span></span><br><span class=\"line\">      &#123;test: <span class=\"regexp\">/\\.js$/</span>, loaders: [<span class=\"string\">'babel'</span>], exclude: <span class=\"regexp\">/node_modules/</span> &#125;,</span><br><span class=\"line\">      <span class=\"comment\">//图片文件使用 url-loader 来处理，小于8kb的直接转为base64</span></span><br><span class=\"line\">      &#123;test: <span class=\"regexp\">/\\.(jpg|png)$/</span>, loader: <span class=\"string\">\"url?limit=8192\"</span>&#125;</span><br><span class=\"line\">    ]</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"comment\">//插件项</span></span><br><span class=\"line\">  plugins: [</span><br><span class=\"line\">    <span class=\"keyword\">new</span> HtmlwebpackPlugin(&#123;</span><br><span class=\"line\">      title: <span class=\"string\">'React'</span>,</span><br><span class=\"line\">      template: path.resolve(__dirname, <span class=\"string\">'templates/index.ejs'</span>),</span><br><span class=\"line\">      inject: <span class=\"string\">'body'</span></span><br><span class=\"line\">    &#125;),</span><br><span class=\"line\">  ],</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = config;</span><br></pre></td></tr></table></figure>\n<h3 id=\"package-json\"><a href=\"#package-json\" class=\"headerlink\" title=\"package.json\"></a>package.json</h3><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">\"devDependencies\": &#123;</span><br><span class=\"line\">  \"babel-core\": \"^6.10.4\",</span><br><span class=\"line\">  \"babel-loader\": \"^6.2.4\",</span><br><span class=\"line\">  \"babel-preset-es2015\": \"^6.9.0\",</span><br><span class=\"line\">  \"babel-preset-react\": \"^6.11.1\",</span><br><span class=\"line\">  \"bootstrap\": \"^3.3.6\",</span><br><span class=\"line\">  \"css-loader\": \"^0.23.1\",</span><br><span class=\"line\">  \"file-loader\": \"^0.9.0\",</span><br><span class=\"line\">  \"html-webpack-plugin\": \"^2.21.0\",</span><br><span class=\"line\">  \"jquery\": \"^3.0.0\",</span><br><span class=\"line\">  \"less\": \"^2.7.1\",</span><br><span class=\"line\">  \"less-loader\": \"^2.2.3\",</span><br><span class=\"line\">  \"moment\": \"^2.13.0\",</span><br><span class=\"line\">  \"npm-install-webpack-plugin\": \"^4.0.3\",</span><br><span class=\"line\">  \"sass-loader\": \"^4.0.0\",</span><br><span class=\"line\">  \"style-loader\": \"^0.13.1\",</span><br><span class=\"line\">  \"url-loader\": \"^0.5.7\",</span><br><span class=\"line\">  \"webpack\": \"^1.13.1\",</span><br><span class=\"line\">  \"webpack-dev-server\": \"^1.14.1\"</span><br><span class=\"line\">&#125;,</span><br><span class=\"line\">\"dependencies\": &#123;</span><br><span class=\"line\">  \"react\": \"^15.1.0\",</span><br><span class=\"line\">  \"react-dom\": \"^15.1.0\",</span><br><span class=\"line\">  \"webpack\": \"^1.13.1\"</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"基本搭建项目\"><a href=\"#基本搭建项目\" class=\"headerlink\" title=\"基本搭建项目\"></a>基本搭建项目</h3><ul>\n<li>在templates/index.ejs中添加初始模板</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!DOCTYPE html&gt;</span><br><span class=\"line\"><span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"utf-8\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>react-test<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span>   </span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"test\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span></span><br></pre></td></tr></table></figure>\n<ul>\n<li>在index.js中加入启动和依赖文件</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">'./less/index.less'</span>; <span class=\"comment\">//less样式文件</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> React <span class=\"keyword\">from</span> <span class=\"string\">'react'</span>; <span class=\"comment\">//react</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> ReactDOM <span class=\"keyword\">from</span> <span class=\"string\">'react-dom'</span>; <span class=\"comment\">//react-dom</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> Component <span class=\"keyword\">from</span>  <span class=\"string\">'./components/component.jsx'</span>; <span class=\"comment\">//你的自定义组件</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> $ <span class=\"keyword\">from</span> <span class=\"string\">'jquery'</span>; <span class=\"comment\">//这里引入jquery</span></span><br><span class=\"line\"><span class=\"comment\">//将其渲染到页面上id为test的DOM元素内</span></span><br><span class=\"line\">ReactDOM.render(<span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">Component</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">Component</span>&gt;</span></span>, $(<span class=\"string\">'#test'</span>)[<span class=\"number\">0</span>]);</span><br></pre></td></tr></table></figure>\n<ul>\n<li>在components/component.jsx中添加组件</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> React <span class=\"keyword\">from</span> <span class=\"string\">'react'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Component</span> <span class=\"keyword\">extends</span> <span class=\"title\">React</span>.<span class=\"title\">Component</span></span>&#123;</span><br><span class=\"line\">  render() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>Hello React<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = Component;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>启动本地服务以及热部署</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm run dev</span><br></pre></td></tr></table></figure>\n<ul>\n<li>生成文件到build</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm run build</span><br></pre></td></tr></table></figure>\n<p>生成文件要注意把webpack.config.js里的热部署相关去掉哦<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">entry: [</span><br><span class=\"line\">  <span class=\"string\">'./index.js'</span> <span class=\"comment\">//入口文件</span></span><br><span class=\"line\">],</span><br></pre></td></tr></table></figure></p>\n<ul>\n<li>至此，我们初步搭建了个React的项目<br>效果如下：<br><img src=\"http://o905ne85q.bkt.clouddn.com/3867.tmp.png\" alt=\"image\"></li>\n</ul>\n<h2 id=\"结束语\"><a href=\"#结束语\" class=\"headerlink\" title=\"结束语\"></a>结束语</h2><hr>\n<p>自动化搭建可是个高效又酷酷的工程哦，而且在这过程中学到的也很多呢。<br><a href=\"https://github.com/godbasin/godbasin.github.io/tree/blog-codes/react-notes/1-build-react-project\" target=\"_blank\" rel=\"external\">此处查看项目代码（仅包含app部分）</a><br><a href=\"http://o9j9owc7b.bkt.clouddn.com/1-build-react-project/index.html\" target=\"_blank\" rel=\"external\">此处查看页面效果</a></p>\n","excerpt":"<p>最近在学习使用React作为前端的框架，《React使用笔记》系列用于记录过程中的一些使用和解决方法。<br>本文记录使用webpack初步搭建项目的过程。<br>","more":"</p>\n<h2 id=\"初步使用React应用\"><a href=\"#初步使用React应用\" class=\"headerlink\" title=\"初步使用React应用\"></a>初步使用React应用</h2><h3 id=\"直接使用React源码\"><a href=\"#直接使用React源码\" class=\"headerlink\" title=\"直接使用React源码\"></a>直接使用React源码</h3><ul>\n<li>下载<a href=\"https://facebook.github.io/react/downloads.html\">React源代码</a></li>\n<li>引入到页面内</li>\n<li>页面模板</li>\n</ul>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE html&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"UTF-8\"</span> /&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>Hello React!<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\">  <span class=\"comment\">&lt;!-- 引入源文件到页面内 --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"build/react.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"build/react-dom.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"https://cdnjs.cloudflare.com/ajax/libs/babel-core/5.8.34/browser.min.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"example\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"comment\">&lt;!-- type属性为text/babel --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/babel\"</span>&gt;</span><span class=\"javascript\"></span><br><span class=\"line\">      ReactDOM.render(</span><br><span class=\"line\">        <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>Hello, world!<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span>,</span><br><span class=\"line\">        <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'example'</span>)</span><br><span class=\"line\">      );</span><br><span class=\"line\">    </span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li>注意<ul>\n<li>在这里type属性为text/babel，原因是React的JSX语法，跟 JavaScript不兼容</li>\n<li>ReactDOM.render是React的最基本方法，用于将模板转为HTML语言，并插入指定的DOM节点</li>\n</ul>\n</li>\n<li>参考<a href=\"https://facebook.github.io/react/docs/getting-started.html\">React官方教程</a></li>\n</ul>\n<h3 id=\"自动化搭建\"><a href=\"#自动化搭建\" class=\"headerlink\" title=\"自动化搭建\"></a>自动化搭建</h3><ul>\n<li>本骚念使用的是Webpack自动搭建，后面附上详细教程</li>\n<li>自动化搭建的好处：<ul>\n<li>1.可快速了解React通过Webpack工程化的过程</li>\n<li>2.通过npm可选择引入需要使用的React模块，像React/React-dom/bootstrap/jQuery/less等可以添加并导入到应用中</li>\n<li>3.自动ES6转换，React对ES6的支持程度很不错，怎么能错过使用的机会呢</li>\n<li>4.自动jsx格式转换，React的特色JSX也必须少不了哒</li>\n<li>5.热部署，文件修改保存之后自动刷新页面</li>\n<li>6.可快速搭建单元测试环境</li>\n</ul>\n</li>\n<li>参考<a href=\"http://www.open-open.com/lib/view/open1462013660085.html\">《手把手教你基于ES6架构自己的React Boilerplate项目》</a></li>\n</ul>\n<h3 id=\"Webpack\"><a href=\"#Webpack\" class=\"headerlink\" title=\"Webpack\"></a>Webpack</h3><ul>\n<li>webpack支持的功能特性：</li>\n</ul>\n<ol>\n<li>支持CommonJs和AMD模块，意思也就是我们基本可以无痛迁移旧项目。</li>\n<li>支持模块加载器和插件机制，可对模块灵活定制。特别是babel-loader，有效支持ES6。</li>\n<li>可以通过配置，打包成多个文件。有效利用浏览器的缓存功能提升性能。</li>\n<li>将样式文件和图片等静态资源也可视为模块进行打包。配合loader加载器，可以支持sass，less等CSS预处理器。</li>\n<li>内置有source map，即使打包在一起依旧方便调试。</li>\n</ol>\n<ul>\n<li><p>loader加载器</p>\n<ul>\n<li>loaders被应用于应用程序的资源文件中，通常用来做转换。</li>\n<li>它们都是函数（运行在nodejs中），将资源文件的源码作为入参，处理完后，返回新的源码文件。</li>\n<li>less/sass loader加载器</li>\n<li>url-loader可对图片资源打包</li>\n<li>babel ES6预处理器</li>\n</ul>\n</li>\n<li><p>webpack安装</p>\n</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//按照webpack依赖</span></span><br><span class=\"line\">$ npm install webpack -g</span><br><span class=\"line\"><span class=\"comment\">//html-webpack-plugin插件用来简化创建服务于webpack bundle的HTML文件</span></span><br><span class=\"line\">$ npm install html-webpack-plugin --save-dev</span><br><span class=\"line\"><span class=\"comment\">//在本地启动一个web服务器</span></span><br><span class=\"line\">$ npm install webpack-dev-server --save-dev</span><br><span class=\"line\"><span class=\"comment\">//安装各个必须的loader</span></span><br><span class=\"line\">$ npm install style-loader css-loader url-loader babel-loader less-loader file-loader --save-dev</span><br></pre></td></tr></table></figure>\n<ul>\n<li>参考<a href=\"http://www.cnblogs.com/YikaJ/p/4586703.html\">《webpack前端模块加载工具》</a></li>\n</ul>\n<h2 id=\"目录组织\"><a href=\"#目录组织\" class=\"headerlink\" title=\"目录组织\"></a>目录组织</h2><hr>\n<p>React的目录组织相对自由，但自由通常也会带来不好维护的问题呢，所以建议大家好好管理文件哦。</p>\n<h3 id=\"本骚年目录组织\"><a href=\"#本骚年目录组织\" class=\"headerlink\" title=\"本骚年目录组织\"></a>本骚年目录组织</h3><p>如下：<br><img src=\"http://o905ne85q.bkt.clouddn.com/C315.tmp.png\" alt=\"image\"></p>\n<ul>\n<li>build用于存放最终生成的代码</li>\n<li>components用于存放React的组件</li>\n<li>images/less不用说当然是用来存放图片和样式文件的</li>\n<li>node_modules大家都知道是npm的依赖文件</li>\n<li>templates里面存放页面模板，index.ejs则是主页的模板</li>\n<li>index.js是启动入口啦</li>\n<li>package.json是管理npm依赖的文件</li>\n<li>webpack.config.js则是webpack的配置项</li>\n</ul>\n<h3 id=\"webpack-config-js\"><a href=\"#webpack-config-js\" class=\"headerlink\" title=\"webpack.config.js\"></a>webpack.config.js</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> webpack = <span class=\"built_in\">require</span>(<span class=\"string\">'webpack'</span>); <span class=\"comment\">//引入node的webpack库</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> path = <span class=\"built_in\">require</span>(<span class=\"string\">'path'</span>); <span class=\"comment\">//引入node的path库</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> HtmlwebpackPlugin = <span class=\"built_in\">require</span>(<span class=\"string\">'html-webpack-plugin'</span>); <span class=\"comment\">//引入node的html-webpack-plugin库</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> config = &#123;</span><br><span class=\"line\">  <span class=\"comment\">//页面入口文件配置</span></span><br><span class=\"line\">  entry: [</span><br><span class=\"line\">    <span class=\"string\">'webpack/hot/dev-server'</span>, <span class=\"comment\">//热部署</span></span><br><span class=\"line\">    <span class=\"string\">'webpack-dev-server/client?http://localhost:3000'</span>, <span class=\"comment\">//本地服务端口</span></span><br><span class=\"line\">    <span class=\"string\">'./index.js'</span> <span class=\"comment\">//入口文件</span></span><br><span class=\"line\">  ],</span><br><span class=\"line\">  <span class=\"comment\">//入口文件输出配置</span></span><br><span class=\"line\">  output: &#123;</span><br><span class=\"line\">    path: path.resolve(__dirname, <span class=\"string\">'build'</span>), <span class=\"comment\">// 指定编译后的代码位置为 build</span></span><br><span class=\"line\">    filename: <span class=\"string\">'bundle.js'</span> <span class=\"comment\">//打包JavaScript文件以及依赖(就是那些第三方的库)文件</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"built_in\">module</span>: &#123;</span><br><span class=\"line\">    <span class=\"comment\">//加载器配置</span></span><br><span class=\"line\">    loaders: [</span><br><span class=\"line\">      <span class=\"comment\">//.jsx 文件使用babel-loader来编译处理</span></span><br><span class=\"line\">      &#123;test: <span class=\"regexp\">/\\.jsx?$/</span>, loader: <span class=\"string\">'babel'</span>, exclude: <span class=\"regexp\">/node_modules/</span>, query: &#123;presets: [<span class=\"string\">'react'</span>, <span class=\"string\">'es2015'</span>]&#125;&#125;,</span><br><span class=\"line\">      <span class=\"comment\">//.less 文件使用 style-loader/css-loader/less-loader 来处理</span></span><br><span class=\"line\">      &#123;test: <span class=\"regexp\">/\\.less$/</span>, loaders: [<span class=\"string\">'style'</span>, <span class=\"string\">'css'</span>, <span class=\"string\">'less'</span>], include: path.resolve(__dirname, <span class=\"string\">'less'</span>)&#125;,</span><br><span class=\"line\">      <span class=\"comment\">//.jsx 文件使用babel-loader来编译处理</span></span><br><span class=\"line\">      &#123;test: <span class=\"regexp\">/\\.js$/</span>, loaders: [<span class=\"string\">'babel'</span>], exclude: <span class=\"regexp\">/node_modules/</span> &#125;,</span><br><span class=\"line\">      <span class=\"comment\">//图片文件使用 url-loader 来处理，小于8kb的直接转为base64</span></span><br><span class=\"line\">      &#123;test: <span class=\"regexp\">/\\.(jpg|png)$/</span>, loader: <span class=\"string\">\"url?limit=8192\"</span>&#125;</span><br><span class=\"line\">    ]</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"comment\">//插件项</span></span><br><span class=\"line\">  plugins: [</span><br><span class=\"line\">    <span class=\"keyword\">new</span> HtmlwebpackPlugin(&#123;</span><br><span class=\"line\">      title: <span class=\"string\">'React'</span>,</span><br><span class=\"line\">      template: path.resolve(__dirname, <span class=\"string\">'templates/index.ejs'</span>),</span><br><span class=\"line\">      inject: <span class=\"string\">'body'</span></span><br><span class=\"line\">    &#125;),</span><br><span class=\"line\">  ],</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = config;</span><br></pre></td></tr></table></figure>\n<h3 id=\"package-json\"><a href=\"#package-json\" class=\"headerlink\" title=\"package.json\"></a>package.json</h3><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">\"devDependencies\": &#123;</span><br><span class=\"line\">  \"babel-core\": \"^6.10.4\",</span><br><span class=\"line\">  \"babel-loader\": \"^6.2.4\",</span><br><span class=\"line\">  \"babel-preset-es2015\": \"^6.9.0\",</span><br><span class=\"line\">  \"babel-preset-react\": \"^6.11.1\",</span><br><span class=\"line\">  \"bootstrap\": \"^3.3.6\",</span><br><span class=\"line\">  \"css-loader\": \"^0.23.1\",</span><br><span class=\"line\">  \"file-loader\": \"^0.9.0\",</span><br><span class=\"line\">  \"html-webpack-plugin\": \"^2.21.0\",</span><br><span class=\"line\">  \"jquery\": \"^3.0.0\",</span><br><span class=\"line\">  \"less\": \"^2.7.1\",</span><br><span class=\"line\">  \"less-loader\": \"^2.2.3\",</span><br><span class=\"line\">  \"moment\": \"^2.13.0\",</span><br><span class=\"line\">  \"npm-install-webpack-plugin\": \"^4.0.3\",</span><br><span class=\"line\">  \"sass-loader\": \"^4.0.0\",</span><br><span class=\"line\">  \"style-loader\": \"^0.13.1\",</span><br><span class=\"line\">  \"url-loader\": \"^0.5.7\",</span><br><span class=\"line\">  \"webpack\": \"^1.13.1\",</span><br><span class=\"line\">  \"webpack-dev-server\": \"^1.14.1\"</span><br><span class=\"line\">&#125;,</span><br><span class=\"line\">\"dependencies\": &#123;</span><br><span class=\"line\">  \"react\": \"^15.1.0\",</span><br><span class=\"line\">  \"react-dom\": \"^15.1.0\",</span><br><span class=\"line\">  \"webpack\": \"^1.13.1\"</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"基本搭建项目\"><a href=\"#基本搭建项目\" class=\"headerlink\" title=\"基本搭建项目\"></a>基本搭建项目</h3><ul>\n<li>在templates/index.ejs中添加初始模板</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!DOCTYPE html&gt;</span><br><span class=\"line\"><span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"utf-8\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>react-test<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span>   </span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"test\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span></span><br></pre></td></tr></table></figure>\n<ul>\n<li>在index.js中加入启动和依赖文件</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">'./less/index.less'</span>; <span class=\"comment\">//less样式文件</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> React <span class=\"keyword\">from</span> <span class=\"string\">'react'</span>; <span class=\"comment\">//react</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> ReactDOM <span class=\"keyword\">from</span> <span class=\"string\">'react-dom'</span>; <span class=\"comment\">//react-dom</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> Component <span class=\"keyword\">from</span>  <span class=\"string\">'./components/component.jsx'</span>; <span class=\"comment\">//你的自定义组件</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> $ <span class=\"keyword\">from</span> <span class=\"string\">'jquery'</span>; <span class=\"comment\">//这里引入jquery</span></span><br><span class=\"line\"><span class=\"comment\">//将其渲染到页面上id为test的DOM元素内</span></span><br><span class=\"line\">ReactDOM.render(<span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">Component</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">Component</span>&gt;</span></span>, $(<span class=\"string\">'#test'</span>)[<span class=\"number\">0</span>]);</span><br></pre></td></tr></table></figure>\n<ul>\n<li>在components/component.jsx中添加组件</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> React <span class=\"keyword\">from</span> <span class=\"string\">'react'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Component</span> <span class=\"keyword\">extends</span> <span class=\"title\">React</span>.<span class=\"title\">Component</span></span>&#123;</span><br><span class=\"line\">  render() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>Hello React<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = Component;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>启动本地服务以及热部署</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm run dev</span><br></pre></td></tr></table></figure>\n<ul>\n<li>生成文件到build</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm run build</span><br></pre></td></tr></table></figure>\n<p>生成文件要注意把webpack.config.js里的热部署相关去掉哦<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">entry: [</span><br><span class=\"line\">  <span class=\"string\">'./index.js'</span> <span class=\"comment\">//入口文件</span></span><br><span class=\"line\">],</span><br></pre></td></tr></table></figure></p>\n<ul>\n<li>至此，我们初步搭建了个React的项目<br>效果如下：<br><img src=\"http://o905ne85q.bkt.clouddn.com/3867.tmp.png\" alt=\"image\"></li>\n</ul>\n<h2 id=\"结束语\"><a href=\"#结束语\" class=\"headerlink\" title=\"结束语\"></a>结束语</h2><hr>\n<p>自动化搭建可是个高效又酷酷的工程哦，而且在这过程中学到的也很多呢。<br><a href=\"https://github.com/godbasin/godbasin.github.io/tree/blog-codes/react-notes/1-build-react-project\">此处查看项目代码（仅包含app部分）</a><br><a href=\"http://o9j9owc7b.bkt.clouddn.com/1-build-react-project/index.html\">此处查看页面效果</a></p>"},{"title":"做一个拖放功能的自定义页面","date":"2016-06-19T07:42:49.000Z","_content":"以前写过一个拖放功能的页面，用来搭建自定义移动端页面。本文介绍实现方法。\n<!--more-->\n\n项目放在github上，有兴趣的小伙伴可以下载玩玩看\n[DD-custom-pages](https://github.com/godbasin/godbasin.github.io/tree/blog-codes/DD-custom-pages)\n已经没有在维护了，也基本没优化，但还是挺有意思的一个项目\n\n最终效果图如下[点击查看页面](http://o907xb1mi.bkt.clouddn.com/index.html)\n![image](http://o905ne85q.bkt.clouddn.com/dd_custom_pages.png)\n\n\n## 基本页面搭建\n-----\n首先是最基本的页面搭建\n- 三个基本布局对象\n  - 1.左侧布局列表\n  - 2.中间页面效果\n  - 3.右侧控件列表\n- 对象的事件处理\n对象基本事件的编写\n  - 1.布局切换，以及自定义布局事件\n  - 2.控件切换，选择等\n  \n样式布局什么的，这里就略过啦，具体可参考[项目](https://github.com/godbasin/DD-custom-pages)\n\n## 绑定鼠标左键按下事件\n-----\n### 需要进行绑定的对象\n- 需要进行鼠标左键按下绑定的对象有两种：布局和控件\n- 布局分为两种：左侧布局列表获取、中间页面效果获取的布局，class为fix-layout和float-layout区分\n- 控件同理: 右侧控件列表获取、中间页面效果获取的控件，class为fix-target和float-target区分\n\n- 全局绑定鼠标鼠标左键按下事件\n由于该项目中鼠标事件几乎是最主要事件，因此采用全局绑定\n\n### 点击对象后进行处理\n- 设置拖动标志true，此时可进行鼠标移动事件的处理，后面会提及\n- 这里采用复制元素的方式，jQuery实现，$().clone()复制元素对象\n- 复制对象后，设置对象位置、大小等，这里设置拖动时将元素宽度减小为一般\n\n### 若对象位于页面效果内，进行相关处理\n- 若是对象为布局，则插入布局位置效果\n\n``` javascript\n//绑定事件，这里使用了jQuery\n$(document).on('mousedown', mouseDown);\nfunction mouseDown(e) {\n\t//获取左键点击事件\n\tif (e.which == 1) {\n\t\t//定位当前事件位置，并取出相关元素\n\t\tposition_target(e);\n\t\t//处理左侧布局列表获取的布局元素事件\n\t\tif ($(target).attr('class') == \"fix-layout\") {\n\t\t\tdragging = true; //设置拖动标志\n\t\t\ttarget = $(target).clone(); //复制元素\n\t\t\t$(target).removeClass(\"fix-layout\").addClass(\"move-layout\"); //拖动时元素样式\n\t\t\t$(\".container\").append(target); //将复制的元素添加到页面\n\t\t}\n\t\t//处理中间布局列表获取的布局元素事件\n\t\tif ($(target).attr('class') == \"float-layout\") {\n\t\t\tdragging = true; //设置拖动标志\n\t\t\t$(target).removeClass(\"float-layout\").addClass(\"move-layout\"); //拖动时元素样式\n\t\t\t$(\".container\").append(target); //将元素移动到页面\n\t\t}\n\t\t//处理右侧控件列表获取的控件元素事件\n\t\tif ($(target).attr('class') == \"fix-target\") {\n\t\t\tdragging = true; //设置拖动标志\n\t\t\ttarget = $(target).clone(); //复制元素\n\t\t\t$(target).removeClass(\"fix-target\").addClass(\"move-target\"); //拖动时元素样式\n\t\t\t$(\".container\").append(target); //将复制的元素添加到页面\n\t\t}\n\t\t//处理中间布局列表获取的控件元素事件\n\t\tif ($(target).attr('class') == \"float-target\") {\n\t\t\tdragging = true; //设置拖动标志\n\t\t\t$(target).removeClass(\"float-target\").addClass(\"move-target\"); //拖动时元素样式\n\t\t\t$(\".container\").append(target); //将元素移动到页面\n\t\t\t$(target).children(\".header, .footer, .nav, .content, .slider-7, .slider-8, .slider-9\").css(\"height\", \"auto\"); //拖动时元素内层控件样式\n\t\t\t$(target).children(\".listview-l\").css(\"height\", \"100px\"); //拖动时元素内层控件样式\n\t\t\t$(target).children(\".listview-s\").css(\"height\", \"50px\"); //拖动时元素内层控件样式\n\t\t}\n\t\t//判断是否有元素在拖动，将元素位置设置在当前鼠标位置\n\t\tif (dragging) {\n\t\t\tvar oX = getMousePos(e).x - $(target).width() / 2;\n\t\t\tvar oY = getMousePos(e).y - $(target).height() / 2;\n\t\t\t$(target).css({\n\t\t\t\t\"left\": oX + \"px\",\n\t\t\t\t\"top\": oY + \"px\"\n\t\t\t});\n\t\t}\n\t\t//定位当前事件位置，判断是否在合适的位置\n\t\t//若当前元素为布局，且位置为页面效果内，则添加提示，元素放置的位置\n\t\tposition_box(e);\n\t\tif ($(box).attr('id') == \"box\") {\n\t\t\tif ($(target).attr('class') == \"move-layout\" || $(target).attr('class') == \"move-layout-over\") {\n\t\t\t\t$(target).removeClass(\"move-layout\").addClass(\"move-layout-over\");\n\t\t\t\tif (dropping == false) {\n\t\t\t\t\tdrop = $(\"<div class='drop-layout'></div>\");\n\t\t\t\t\tmoveDrop();\n\t\t\t\t\t$(\"#box-content\").append(drop);\n\t\t\t\t\tdropping = true;\n\t\t\t\t} else {\n\t\t\t\t\t$(drop).remove();\n\t\t\t\t\tmoveDrop();\n\t\t\t\t\t$(\"#box-content\").append(drop);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn false;\n}\n```\n\n## 定位当前位置是否有特定元素\n-----\n- 使用鼠标定位获取相关布局或者控件对象\n这里可参考上一篇文章：[《js判断某个位置是否特定元素》](https://godbasin.github.io/2016/06/19/position-object/)\n\n- 获取当前鼠标位置\n``` javascript\nfunction getMousePos(event) {\n\tvar e = event || window.event;\n\tvar scrollX = document.documentElement.scrollLeft || document.body.scrollLeft;\n\tvar scrollY = document.documentElement.scrollTop || document.body.scrollTop;\n\tvar x = e.pageX || e.clientX + scrollX;\n\tvar y = e.pageY || e.clientY + scrollY;\n\treturn {\n\t\t'x': x,\n\t\t'y': y\n\t};\n}\n```\n\n- 定位当前位置是否有布局或者控件对象position_target\n``` javascript\nfunction position_target(e) {\n\tvar e = e || window.event;\n\tvar scrollX = document.documentElement.scrollLeft || document.body.scrollLeft;\n\tvar scrollY = document.documentElement.scrollTop || document.body.scrollTop;\n\tvar eventX = e.pageX - scrollX || e.clientX;\n\tvar eventY = e.pageY - scrollY || e.clientY;\n\ttarget = document.elementFromPoint(eventX, eventY);\n\ttarget = fnGetTable(target);\n}\nfunction fnGetTable(oEl) {\n\twhile (null != oEl && $(oEl).attr('class') != \"fix-target\" && $(oEl).attr('id') != \"set-layout\" && $(oEl).attr('id') != \"save-page\" && $(oEl).attr('class') != \"box-footer\" && $(oEl).attr('class') != \"to-edit\" && $(oEl).attr('class') != \"edit\" && $(oEl).attr('class') != \"container\" && $(oEl).attr('class') != \"float-target\" && $(oEl).attr('class') != \"fix-layout\" && $(oEl).attr('class') != \"float-layout\") {\n\t\toEl = oEl.parentElement;\n\t}\n\treturn oEl;\n}\n```\n- 定位当前位置是否有在页面效果的布局里position_target\n``` javascript\nfunction position_box(e) {\n\tvar e = e || window.event;\n\tvar scrollX = document.documentElement.scrollLeft || document.body.scrollLeft;\n\tvar scrollY = document.documentElement.scrollTop || document.body.scrollTop;\n\tvar eventX = e.pageX - scrollX || e.clientX;\n\tvar eventY = $(target).offset().top - 1 - scrollY;\n\tbox = document.elementFromPoint(eventX, eventY);\n\tbox = fnGetTable2(box);\n}\nfunction fnGetTable2(oEl) {\n\twhile (null != oEl && $(oEl).attr('id') != \"box\" && $(oEl).attr('class') != \"container\" && $(oEl).attr('data-type') != \"layout\") {\n\t\toEl = oEl.parentElement;\n\t}\n\treturn oEl;\n}\n```\n\n## 绑定鼠标移动事件\n-----\n### 需要进行的判断\n- 是否有正在拖动的布局或者控件\n- 当前鼠标位置是否在页面效果内，添加布局示意（蓝色框框表示即将添加布局的位置）\n- 当前鼠标位置是否在页面效果内的某个布局上方，在相应位置添加布局示意\n- 全局绑定鼠标移动事件\n\n``` javascript\n$(document).mousemove(function(e) {\n\t//判断是否有正在拖动的布局或者控件\n\tif (dragging) {\n\t\t//正在拖动的对象位置跟随鼠标移动\n\t\tvar oX = getMousePos(e).x - $(target).width() / 2;\n\t\tvar oY = getMousePos(e).y - $(target).height() / 2;\n\t\t$(target).css({\n\t\t\t\"left\": oX + \"px\",\n\t\t\t\"top\": oY + \"px\"\n\t\t});\n\t\t//定位当前事件位置\n\t\tposition_box(e);\n\t\t//判断当前位置在页面效果内，且在某个布局上方，布局示意添加在当前布局前方\n\t\tif ($(box).attr('data-type') == \"layout\" && $(box).parent().attr('class') == \"float-layout\") {\n\t\t\tif ($(target).attr('class') == \"move-layout\" || $(target).attr('class') == \"move-layout-over\") {\n\t\t\t\t$(target).removeClass(\"move-layout\").addClass(\"move-layout-over\");\n\t\t\t\tif (dropping == false) {\n\t\t\t\t\tdrop = $(\"<div class='drop-layout'></div>\");\n\t\t\t\t\tmoveDrop();\n\t\t\t\t\t$($(box).parent()).before(drop);\n\t\t\t\t\tdropping = true;\n\t\t\t\t} else {\n\t\t\t\t\t$(drop).remove();\n\t\t\t\t\tmoveDrop();\n\t\t\t\t\t$($(box).parent()).before(drop);\n\t\t\t\t}\n\t\t\t}\n\t\t//判断当前位置在页面效果内，且不在某个布局上方，布局示意添加在页面效果最后\n\t\t} else if ($(box).attr('id') == \"box\") {\n\t\t\tif ($(target).attr('class') == \"move-layout\" || $(target).attr('class') == \"move-layout-over\") {\n\t\t\t\t$(target).removeClass(\"move-layout\").addClass(\"move-layout-over\");\n\t\t\t\tif (dropping == false) {\n\t\t\t\t\tdrop = $(\"<div class='drop-layout'></div>\");\n\t\t\t\t\tmoveDrop();\n\t\t\t\t\t$(\"#box-content\").append(drop);\n\t\t\t\t\tdropping = true;\n\t\t\t\t} else {\n\t\t\t\t\t$(drop).remove();\n\t\t\t\t\tmoveDrop();\n\t\t\t\t\t$(\"#box-content\").append(drop);\n\t\t\t\t}\n\t\t\t}\n\t\t//判断当前位置不在页面效果内，移除布局示意\n\t\t} else {\n\t\t\tif ($(target).attr('class') == \"move-layout-over\") {\n\t\t\t\t$(target).removeClass(\"move-layout-over\").addClass(\"move-layout\");\n\t\t\t}\n\t\t\tif (dropping == true) {\n\t\t\t\t$(drop).remove();\n\t\t\t\tdropping = false;\n\t\t\t}\n\t\t}\n\t}\n\treturn false;\n});\n```\n\n## 绑定鼠标左键松开事件\n-----\n### 效果事件\n- 当前拖动的对象为布局，且当前鼠标位置是否在页面效果内，添加布局\n- 当前拖动的对象为控件，且当前鼠标位置是否在页面效果内某个布局上方，且该布局内无其他控件，添加控件至布局\n- 当前鼠标位置不在页面效果内，移除拖动的对象\n\n### 需要进行的判断\n- 是否有正在拖动的布局或者控件\n- 当前鼠标位置是否在页面效果内\n- 当前拖动的对象是否为布局，且当前鼠标位置是否在页面效果内\n- 当前拖动的对象是否为控件，且当前鼠标位置是否在页面效果内某个布局上方，该布局是否为空\n- 全局绑定鼠标左键松开事件\n\n``` javascript\n$(document).mouseup(function(e) {\n\t//定位当前事件位置\n\tposition_box(e);\n\te.cancelBubble = true;\n\t//判断是否有正在拖动的布局或者控件\n\tif (dragging == true) {\n\t\t//当前位置为页面效果内的某个布局上方，添加布局或者添加控件\n\t\tif (($(box).attr('data-type') == \"layout\" && $(box).parent().attr('class') == \"float-layout\") || ($(box).attr('data-type') == \"layout\" && $(box).parent().attr('data-type') == \"layout\")) {\n\t\t\tif ($(target).attr('class') == \"move-target\" && $(box).children().length == 0) {\n\t\t\t\t$(target).removeClass(\"move-target\").addClass(\"float-target\");\n\t\t\t\t$(target).children(\".header, .footer, .nav, .listview-l, .listview-s, .content, .slider-7, .slider-8, .slider-9\").css(\"height\", \"100%\");\n\t\t\t\t$(box).append(target);\n\t\t\t} else if ($(target).attr('class') == \"move-layout-over\") {\n\t\t\t\tif (dropping) {\n\t\t\t\t\t$(target).removeClass(\"move-layout-over\").addClass(\"float-layout\");\n\t\t\t\t\t$(drop).before($(target));\n\t\t\t\t}\n\t\t\t} else $(target).remove();\n\t\t//当前位置为页面效果内，添加布局\n\t\t} else if ($(box).attr('id') == \"box\") {\n\t\t\tif ($(target).attr('class') == \"move-layout-over\") {\n\t\t\t\tif (dropping) {\n\t\t\t\t\t$(target).removeClass(\"move-layout-over\").addClass(\"float-layout\");\n\t\t\t\t\t$(drop).before($(target));\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\t$(target).remove();\n\t\t\t}\n\t\t//当前鼠标位置不在页面效果内，移除拖动的对象\n\t\t} else {\n\t\t\t$(target).remove();\n\t\t}\n\t}\n\t$(drop).remove();\n\tdropping = false;\n\tdragging = false;\n});\n```\n\n## 完善后续处理\n-----\n- 编辑控件样式\n  - 在页面效果内的控件可进行编辑（改变颜色、内容等）\n- 保存页面效果\n  - 这里为了偷懒直接把整个html导出，将它导出保存到html页面内，并加载相应的样式\n  - 当然为了数据处理的方便，你也可以将这一切都转成数据保存到数据库，提取的时候进行相关处理就好了\n\n## 结束语\n-----\n有时候写些有意思的项目也是很不错的，脑洞要大大的，当然事后别忘了优化哦。","source":"_posts/drag-and-drop.md","raw":"---\ntitle: 做一个拖放功能的自定义页面\ndate: 2016-06-19 15:42:49\ncategories: js什锦\ntags: 原创部件\n---\n以前写过一个拖放功能的页面，用来搭建自定义移动端页面。本文介绍实现方法。\n<!--more-->\n\n项目放在github上，有兴趣的小伙伴可以下载玩玩看\n[DD-custom-pages](https://github.com/godbasin/godbasin.github.io/tree/blog-codes/DD-custom-pages)\n已经没有在维护了，也基本没优化，但还是挺有意思的一个项目\n\n最终效果图如下[点击查看页面](http://o907xb1mi.bkt.clouddn.com/index.html)\n![image](http://o905ne85q.bkt.clouddn.com/dd_custom_pages.png)\n\n\n## 基本页面搭建\n-----\n首先是最基本的页面搭建\n- 三个基本布局对象\n  - 1.左侧布局列表\n  - 2.中间页面效果\n  - 3.右侧控件列表\n- 对象的事件处理\n对象基本事件的编写\n  - 1.布局切换，以及自定义布局事件\n  - 2.控件切换，选择等\n  \n样式布局什么的，这里就略过啦，具体可参考[项目](https://github.com/godbasin/DD-custom-pages)\n\n## 绑定鼠标左键按下事件\n-----\n### 需要进行绑定的对象\n- 需要进行鼠标左键按下绑定的对象有两种：布局和控件\n- 布局分为两种：左侧布局列表获取、中间页面效果获取的布局，class为fix-layout和float-layout区分\n- 控件同理: 右侧控件列表获取、中间页面效果获取的控件，class为fix-target和float-target区分\n\n- 全局绑定鼠标鼠标左键按下事件\n由于该项目中鼠标事件几乎是最主要事件，因此采用全局绑定\n\n### 点击对象后进行处理\n- 设置拖动标志true，此时可进行鼠标移动事件的处理，后面会提及\n- 这里采用复制元素的方式，jQuery实现，$().clone()复制元素对象\n- 复制对象后，设置对象位置、大小等，这里设置拖动时将元素宽度减小为一般\n\n### 若对象位于页面效果内，进行相关处理\n- 若是对象为布局，则插入布局位置效果\n\n``` javascript\n//绑定事件，这里使用了jQuery\n$(document).on('mousedown', mouseDown);\nfunction mouseDown(e) {\n\t//获取左键点击事件\n\tif (e.which == 1) {\n\t\t//定位当前事件位置，并取出相关元素\n\t\tposition_target(e);\n\t\t//处理左侧布局列表获取的布局元素事件\n\t\tif ($(target).attr('class') == \"fix-layout\") {\n\t\t\tdragging = true; //设置拖动标志\n\t\t\ttarget = $(target).clone(); //复制元素\n\t\t\t$(target).removeClass(\"fix-layout\").addClass(\"move-layout\"); //拖动时元素样式\n\t\t\t$(\".container\").append(target); //将复制的元素添加到页面\n\t\t}\n\t\t//处理中间布局列表获取的布局元素事件\n\t\tif ($(target).attr('class') == \"float-layout\") {\n\t\t\tdragging = true; //设置拖动标志\n\t\t\t$(target).removeClass(\"float-layout\").addClass(\"move-layout\"); //拖动时元素样式\n\t\t\t$(\".container\").append(target); //将元素移动到页面\n\t\t}\n\t\t//处理右侧控件列表获取的控件元素事件\n\t\tif ($(target).attr('class') == \"fix-target\") {\n\t\t\tdragging = true; //设置拖动标志\n\t\t\ttarget = $(target).clone(); //复制元素\n\t\t\t$(target).removeClass(\"fix-target\").addClass(\"move-target\"); //拖动时元素样式\n\t\t\t$(\".container\").append(target); //将复制的元素添加到页面\n\t\t}\n\t\t//处理中间布局列表获取的控件元素事件\n\t\tif ($(target).attr('class') == \"float-target\") {\n\t\t\tdragging = true; //设置拖动标志\n\t\t\t$(target).removeClass(\"float-target\").addClass(\"move-target\"); //拖动时元素样式\n\t\t\t$(\".container\").append(target); //将元素移动到页面\n\t\t\t$(target).children(\".header, .footer, .nav, .content, .slider-7, .slider-8, .slider-9\").css(\"height\", \"auto\"); //拖动时元素内层控件样式\n\t\t\t$(target).children(\".listview-l\").css(\"height\", \"100px\"); //拖动时元素内层控件样式\n\t\t\t$(target).children(\".listview-s\").css(\"height\", \"50px\"); //拖动时元素内层控件样式\n\t\t}\n\t\t//判断是否有元素在拖动，将元素位置设置在当前鼠标位置\n\t\tif (dragging) {\n\t\t\tvar oX = getMousePos(e).x - $(target).width() / 2;\n\t\t\tvar oY = getMousePos(e).y - $(target).height() / 2;\n\t\t\t$(target).css({\n\t\t\t\t\"left\": oX + \"px\",\n\t\t\t\t\"top\": oY + \"px\"\n\t\t\t});\n\t\t}\n\t\t//定位当前事件位置，判断是否在合适的位置\n\t\t//若当前元素为布局，且位置为页面效果内，则添加提示，元素放置的位置\n\t\tposition_box(e);\n\t\tif ($(box).attr('id') == \"box\") {\n\t\t\tif ($(target).attr('class') == \"move-layout\" || $(target).attr('class') == \"move-layout-over\") {\n\t\t\t\t$(target).removeClass(\"move-layout\").addClass(\"move-layout-over\");\n\t\t\t\tif (dropping == false) {\n\t\t\t\t\tdrop = $(\"<div class='drop-layout'></div>\");\n\t\t\t\t\tmoveDrop();\n\t\t\t\t\t$(\"#box-content\").append(drop);\n\t\t\t\t\tdropping = true;\n\t\t\t\t} else {\n\t\t\t\t\t$(drop).remove();\n\t\t\t\t\tmoveDrop();\n\t\t\t\t\t$(\"#box-content\").append(drop);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn false;\n}\n```\n\n## 定位当前位置是否有特定元素\n-----\n- 使用鼠标定位获取相关布局或者控件对象\n这里可参考上一篇文章：[《js判断某个位置是否特定元素》](https://godbasin.github.io/2016/06/19/position-object/)\n\n- 获取当前鼠标位置\n``` javascript\nfunction getMousePos(event) {\n\tvar e = event || window.event;\n\tvar scrollX = document.documentElement.scrollLeft || document.body.scrollLeft;\n\tvar scrollY = document.documentElement.scrollTop || document.body.scrollTop;\n\tvar x = e.pageX || e.clientX + scrollX;\n\tvar y = e.pageY || e.clientY + scrollY;\n\treturn {\n\t\t'x': x,\n\t\t'y': y\n\t};\n}\n```\n\n- 定位当前位置是否有布局或者控件对象position_target\n``` javascript\nfunction position_target(e) {\n\tvar e = e || window.event;\n\tvar scrollX = document.documentElement.scrollLeft || document.body.scrollLeft;\n\tvar scrollY = document.documentElement.scrollTop || document.body.scrollTop;\n\tvar eventX = e.pageX - scrollX || e.clientX;\n\tvar eventY = e.pageY - scrollY || e.clientY;\n\ttarget = document.elementFromPoint(eventX, eventY);\n\ttarget = fnGetTable(target);\n}\nfunction fnGetTable(oEl) {\n\twhile (null != oEl && $(oEl).attr('class') != \"fix-target\" && $(oEl).attr('id') != \"set-layout\" && $(oEl).attr('id') != \"save-page\" && $(oEl).attr('class') != \"box-footer\" && $(oEl).attr('class') != \"to-edit\" && $(oEl).attr('class') != \"edit\" && $(oEl).attr('class') != \"container\" && $(oEl).attr('class') != \"float-target\" && $(oEl).attr('class') != \"fix-layout\" && $(oEl).attr('class') != \"float-layout\") {\n\t\toEl = oEl.parentElement;\n\t}\n\treturn oEl;\n}\n```\n- 定位当前位置是否有在页面效果的布局里position_target\n``` javascript\nfunction position_box(e) {\n\tvar e = e || window.event;\n\tvar scrollX = document.documentElement.scrollLeft || document.body.scrollLeft;\n\tvar scrollY = document.documentElement.scrollTop || document.body.scrollTop;\n\tvar eventX = e.pageX - scrollX || e.clientX;\n\tvar eventY = $(target).offset().top - 1 - scrollY;\n\tbox = document.elementFromPoint(eventX, eventY);\n\tbox = fnGetTable2(box);\n}\nfunction fnGetTable2(oEl) {\n\twhile (null != oEl && $(oEl).attr('id') != \"box\" && $(oEl).attr('class') != \"container\" && $(oEl).attr('data-type') != \"layout\") {\n\t\toEl = oEl.parentElement;\n\t}\n\treturn oEl;\n}\n```\n\n## 绑定鼠标移动事件\n-----\n### 需要进行的判断\n- 是否有正在拖动的布局或者控件\n- 当前鼠标位置是否在页面效果内，添加布局示意（蓝色框框表示即将添加布局的位置）\n- 当前鼠标位置是否在页面效果内的某个布局上方，在相应位置添加布局示意\n- 全局绑定鼠标移动事件\n\n``` javascript\n$(document).mousemove(function(e) {\n\t//判断是否有正在拖动的布局或者控件\n\tif (dragging) {\n\t\t//正在拖动的对象位置跟随鼠标移动\n\t\tvar oX = getMousePos(e).x - $(target).width() / 2;\n\t\tvar oY = getMousePos(e).y - $(target).height() / 2;\n\t\t$(target).css({\n\t\t\t\"left\": oX + \"px\",\n\t\t\t\"top\": oY + \"px\"\n\t\t});\n\t\t//定位当前事件位置\n\t\tposition_box(e);\n\t\t//判断当前位置在页面效果内，且在某个布局上方，布局示意添加在当前布局前方\n\t\tif ($(box).attr('data-type') == \"layout\" && $(box).parent().attr('class') == \"float-layout\") {\n\t\t\tif ($(target).attr('class') == \"move-layout\" || $(target).attr('class') == \"move-layout-over\") {\n\t\t\t\t$(target).removeClass(\"move-layout\").addClass(\"move-layout-over\");\n\t\t\t\tif (dropping == false) {\n\t\t\t\t\tdrop = $(\"<div class='drop-layout'></div>\");\n\t\t\t\t\tmoveDrop();\n\t\t\t\t\t$($(box).parent()).before(drop);\n\t\t\t\t\tdropping = true;\n\t\t\t\t} else {\n\t\t\t\t\t$(drop).remove();\n\t\t\t\t\tmoveDrop();\n\t\t\t\t\t$($(box).parent()).before(drop);\n\t\t\t\t}\n\t\t\t}\n\t\t//判断当前位置在页面效果内，且不在某个布局上方，布局示意添加在页面效果最后\n\t\t} else if ($(box).attr('id') == \"box\") {\n\t\t\tif ($(target).attr('class') == \"move-layout\" || $(target).attr('class') == \"move-layout-over\") {\n\t\t\t\t$(target).removeClass(\"move-layout\").addClass(\"move-layout-over\");\n\t\t\t\tif (dropping == false) {\n\t\t\t\t\tdrop = $(\"<div class='drop-layout'></div>\");\n\t\t\t\t\tmoveDrop();\n\t\t\t\t\t$(\"#box-content\").append(drop);\n\t\t\t\t\tdropping = true;\n\t\t\t\t} else {\n\t\t\t\t\t$(drop).remove();\n\t\t\t\t\tmoveDrop();\n\t\t\t\t\t$(\"#box-content\").append(drop);\n\t\t\t\t}\n\t\t\t}\n\t\t//判断当前位置不在页面效果内，移除布局示意\n\t\t} else {\n\t\t\tif ($(target).attr('class') == \"move-layout-over\") {\n\t\t\t\t$(target).removeClass(\"move-layout-over\").addClass(\"move-layout\");\n\t\t\t}\n\t\t\tif (dropping == true) {\n\t\t\t\t$(drop).remove();\n\t\t\t\tdropping = false;\n\t\t\t}\n\t\t}\n\t}\n\treturn false;\n});\n```\n\n## 绑定鼠标左键松开事件\n-----\n### 效果事件\n- 当前拖动的对象为布局，且当前鼠标位置是否在页面效果内，添加布局\n- 当前拖动的对象为控件，且当前鼠标位置是否在页面效果内某个布局上方，且该布局内无其他控件，添加控件至布局\n- 当前鼠标位置不在页面效果内，移除拖动的对象\n\n### 需要进行的判断\n- 是否有正在拖动的布局或者控件\n- 当前鼠标位置是否在页面效果内\n- 当前拖动的对象是否为布局，且当前鼠标位置是否在页面效果内\n- 当前拖动的对象是否为控件，且当前鼠标位置是否在页面效果内某个布局上方，该布局是否为空\n- 全局绑定鼠标左键松开事件\n\n``` javascript\n$(document).mouseup(function(e) {\n\t//定位当前事件位置\n\tposition_box(e);\n\te.cancelBubble = true;\n\t//判断是否有正在拖动的布局或者控件\n\tif (dragging == true) {\n\t\t//当前位置为页面效果内的某个布局上方，添加布局或者添加控件\n\t\tif (($(box).attr('data-type') == \"layout\" && $(box).parent().attr('class') == \"float-layout\") || ($(box).attr('data-type') == \"layout\" && $(box).parent().attr('data-type') == \"layout\")) {\n\t\t\tif ($(target).attr('class') == \"move-target\" && $(box).children().length == 0) {\n\t\t\t\t$(target).removeClass(\"move-target\").addClass(\"float-target\");\n\t\t\t\t$(target).children(\".header, .footer, .nav, .listview-l, .listview-s, .content, .slider-7, .slider-8, .slider-9\").css(\"height\", \"100%\");\n\t\t\t\t$(box).append(target);\n\t\t\t} else if ($(target).attr('class') == \"move-layout-over\") {\n\t\t\t\tif (dropping) {\n\t\t\t\t\t$(target).removeClass(\"move-layout-over\").addClass(\"float-layout\");\n\t\t\t\t\t$(drop).before($(target));\n\t\t\t\t}\n\t\t\t} else $(target).remove();\n\t\t//当前位置为页面效果内，添加布局\n\t\t} else if ($(box).attr('id') == \"box\") {\n\t\t\tif ($(target).attr('class') == \"move-layout-over\") {\n\t\t\t\tif (dropping) {\n\t\t\t\t\t$(target).removeClass(\"move-layout-over\").addClass(\"float-layout\");\n\t\t\t\t\t$(drop).before($(target));\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\t$(target).remove();\n\t\t\t}\n\t\t//当前鼠标位置不在页面效果内，移除拖动的对象\n\t\t} else {\n\t\t\t$(target).remove();\n\t\t}\n\t}\n\t$(drop).remove();\n\tdropping = false;\n\tdragging = false;\n});\n```\n\n## 完善后续处理\n-----\n- 编辑控件样式\n  - 在页面效果内的控件可进行编辑（改变颜色、内容等）\n- 保存页面效果\n  - 这里为了偷懒直接把整个html导出，将它导出保存到html页面内，并加载相应的样式\n  - 当然为了数据处理的方便，你也可以将这一切都转成数据保存到数据库，提取的时候进行相关处理就好了\n\n## 结束语\n-----\n有时候写些有意思的项目也是很不错的，脑洞要大大的，当然事后别忘了优化哦。","slug":"drag-and-drop","published":1,"updated":"2016-06-24T14:07:14.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cirrwvo3m001338l54azv90gs","content":"<p>以前写过一个拖放功能的页面，用来搭建自定义移动端页面。本文介绍实现方法。<br><a id=\"more\"></a></p>\n<p>项目放在github上，有兴趣的小伙伴可以下载玩玩看<br><a href=\"https://github.com/godbasin/godbasin.github.io/tree/blog-codes/DD-custom-pages\" target=\"_blank\" rel=\"external\">DD-custom-pages</a><br>已经没有在维护了，也基本没优化，但还是挺有意思的一个项目</p>\n<p>最终效果图如下<a href=\"http://o907xb1mi.bkt.clouddn.com/index.html\" target=\"_blank\" rel=\"external\">点击查看页面</a><br><img src=\"http://o905ne85q.bkt.clouddn.com/dd_custom_pages.png\" alt=\"image\"></p>\n<h2 id=\"基本页面搭建\"><a href=\"#基本页面搭建\" class=\"headerlink\" title=\"基本页面搭建\"></a>基本页面搭建</h2><hr>\n<p>首先是最基本的页面搭建</p>\n<ul>\n<li>三个基本布局对象<ul>\n<li>1.左侧布局列表</li>\n<li>2.中间页面效果</li>\n<li>3.右侧控件列表</li>\n</ul>\n</li>\n<li>对象的事件处理<br>对象基本事件的编写<ul>\n<li>1.布局切换，以及自定义布局事件</li>\n<li>2.控件切换，选择等</li>\n</ul>\n</li>\n</ul>\n<p>样式布局什么的，这里就略过啦，具体可参考<a href=\"https://github.com/godbasin/DD-custom-pages\" target=\"_blank\" rel=\"external\">项目</a></p>\n<h2 id=\"绑定鼠标左键按下事件\"><a href=\"#绑定鼠标左键按下事件\" class=\"headerlink\" title=\"绑定鼠标左键按下事件\"></a>绑定鼠标左键按下事件</h2><hr>\n<h3 id=\"需要进行绑定的对象\"><a href=\"#需要进行绑定的对象\" class=\"headerlink\" title=\"需要进行绑定的对象\"></a>需要进行绑定的对象</h3><ul>\n<li>需要进行鼠标左键按下绑定的对象有两种：布局和控件</li>\n<li>布局分为两种：左侧布局列表获取、中间页面效果获取的布局，class为fix-layout和float-layout区分</li>\n<li><p>控件同理: 右侧控件列表获取、中间页面效果获取的控件，class为fix-target和float-target区分</p>\n</li>\n<li><p>全局绑定鼠标鼠标左键按下事件<br>由于该项目中鼠标事件几乎是最主要事件，因此采用全局绑定</p>\n</li>\n</ul>\n<h3 id=\"点击对象后进行处理\"><a href=\"#点击对象后进行处理\" class=\"headerlink\" title=\"点击对象后进行处理\"></a>点击对象后进行处理</h3><ul>\n<li>设置拖动标志true，此时可进行鼠标移动事件的处理，后面会提及</li>\n<li>这里采用复制元素的方式，jQuery实现，$().clone()复制元素对象</li>\n<li>复制对象后，设置对象位置、大小等，这里设置拖动时将元素宽度减小为一般</li>\n</ul>\n<h3 id=\"若对象位于页面效果内，进行相关处理\"><a href=\"#若对象位于页面效果内，进行相关处理\" class=\"headerlink\" title=\"若对象位于页面效果内，进行相关处理\"></a>若对象位于页面效果内，进行相关处理</h3><ul>\n<li>若是对象为布局，则插入布局位置效果</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//绑定事件，这里使用了jQuery</span></span><br><span class=\"line\">$(<span class=\"built_in\">document</span>).on(<span class=\"string\">'mousedown'</span>, mouseDown);</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">mouseDown</span>(<span class=\"params\">e</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">//获取左键点击事件</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (e.which == <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">//定位当前事件位置，并取出相关元素</span></span><br><span class=\"line\">    position_target(e);</span><br><span class=\"line\">    <span class=\"comment\">//处理左侧布局列表获取的布局元素事件</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> ($(target).attr(<span class=\"string\">'class'</span>) == <span class=\"string\">\"fix-layout\"</span>) &#123;</span><br><span class=\"line\">      dragging = <span class=\"literal\">true</span>; <span class=\"comment\">//设置拖动标志</span></span><br><span class=\"line\">      target = $(target).clone(); <span class=\"comment\">//复制元素</span></span><br><span class=\"line\">      $(target).removeClass(<span class=\"string\">\"fix-layout\"</span>).addClass(<span class=\"string\">\"move-layout\"</span>); <span class=\"comment\">//拖动时元素样式</span></span><br><span class=\"line\">      $(<span class=\"string\">\".container\"</span>).append(target); <span class=\"comment\">//将复制的元素添加到页面</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//处理中间布局列表获取的布局元素事件</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> ($(target).attr(<span class=\"string\">'class'</span>) == <span class=\"string\">\"float-layout\"</span>) &#123;</span><br><span class=\"line\">      dragging = <span class=\"literal\">true</span>; <span class=\"comment\">//设置拖动标志</span></span><br><span class=\"line\">      $(target).removeClass(<span class=\"string\">\"float-layout\"</span>).addClass(<span class=\"string\">\"move-layout\"</span>); <span class=\"comment\">//拖动时元素样式</span></span><br><span class=\"line\">      $(<span class=\"string\">\".container\"</span>).append(target); <span class=\"comment\">//将元素移动到页面</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//处理右侧控件列表获取的控件元素事件</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> ($(target).attr(<span class=\"string\">'class'</span>) == <span class=\"string\">\"fix-target\"</span>) &#123;</span><br><span class=\"line\">      dragging = <span class=\"literal\">true</span>; <span class=\"comment\">//设置拖动标志</span></span><br><span class=\"line\">      target = $(target).clone(); <span class=\"comment\">//复制元素</span></span><br><span class=\"line\">      $(target).removeClass(<span class=\"string\">\"fix-target\"</span>).addClass(<span class=\"string\">\"move-target\"</span>); <span class=\"comment\">//拖动时元素样式</span></span><br><span class=\"line\">      $(<span class=\"string\">\".container\"</span>).append(target); <span class=\"comment\">//将复制的元素添加到页面</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//处理中间布局列表获取的控件元素事件</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> ($(target).attr(<span class=\"string\">'class'</span>) == <span class=\"string\">\"float-target\"</span>) &#123;</span><br><span class=\"line\">      dragging = <span class=\"literal\">true</span>; <span class=\"comment\">//设置拖动标志</span></span><br><span class=\"line\">      $(target).removeClass(<span class=\"string\">\"float-target\"</span>).addClass(<span class=\"string\">\"move-target\"</span>); <span class=\"comment\">//拖动时元素样式</span></span><br><span class=\"line\">      $(<span class=\"string\">\".container\"</span>).append(target); <span class=\"comment\">//将元素移动到页面</span></span><br><span class=\"line\">      $(target).children(<span class=\"string\">\".header, .footer, .nav, .content, .slider-7, .slider-8, .slider-9\"</span>).css(<span class=\"string\">\"height\"</span>, <span class=\"string\">\"auto\"</span>); <span class=\"comment\">//拖动时元素内层控件样式</span></span><br><span class=\"line\">      $(target).children(<span class=\"string\">\".listview-l\"</span>).css(<span class=\"string\">\"height\"</span>, <span class=\"string\">\"100px\"</span>); <span class=\"comment\">//拖动时元素内层控件样式</span></span><br><span class=\"line\">      $(target).children(<span class=\"string\">\".listview-s\"</span>).css(<span class=\"string\">\"height\"</span>, <span class=\"string\">\"50px\"</span>); <span class=\"comment\">//拖动时元素内层控件样式</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//判断是否有元素在拖动，将元素位置设置在当前鼠标位置</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (dragging) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">var</span> oX = getMousePos(e).x - $(target).width() / <span class=\"number\">2</span>;</span><br><span class=\"line\">      <span class=\"keyword\">var</span> oY = getMousePos(e).y - $(target).height() / <span class=\"number\">2</span>;</span><br><span class=\"line\">      $(target).css(&#123;</span><br><span class=\"line\">        <span class=\"string\">\"left\"</span>: oX + <span class=\"string\">\"px\"</span>,</span><br><span class=\"line\">        <span class=\"string\">\"top\"</span>: oY + <span class=\"string\">\"px\"</span></span><br><span class=\"line\">      &#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//定位当前事件位置，判断是否在合适的位置</span></span><br><span class=\"line\">    <span class=\"comment\">//若当前元素为布局，且位置为页面效果内，则添加提示，元素放置的位置</span></span><br><span class=\"line\">    position_box(e);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> ($(box).attr(<span class=\"string\">'id'</span>) == <span class=\"string\">\"box\"</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> ($(target).attr(<span class=\"string\">'class'</span>) == <span class=\"string\">\"move-layout\"</span> || $(target).attr(<span class=\"string\">'class'</span>) == <span class=\"string\">\"move-layout-over\"</span>) &#123;</span><br><span class=\"line\">        $(target).removeClass(<span class=\"string\">\"move-layout\"</span>).addClass(<span class=\"string\">\"move-layout-over\"</span>);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (dropping == <span class=\"literal\">false</span>) &#123;</span><br><span class=\"line\">          drop = $(<span class=\"string\">\"&lt;div class='drop-layout'&gt;&lt;/div&gt;\"</span>);</span><br><span class=\"line\">          moveDrop();</span><br><span class=\"line\">          $(<span class=\"string\">\"#box-content\"</span>).append(drop);</span><br><span class=\"line\">          dropping = <span class=\"literal\">true</span>;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">          $(drop).remove();</span><br><span class=\"line\">          moveDrop();</span><br><span class=\"line\">          $(<span class=\"string\">\"#box-content\"</span>).append(drop);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"定位当前位置是否有特定元素\"><a href=\"#定位当前位置是否有特定元素\" class=\"headerlink\" title=\"定位当前位置是否有特定元素\"></a>定位当前位置是否有特定元素</h2><hr>\n<ul>\n<li><p>使用鼠标定位获取相关布局或者控件对象<br>这里可参考上一篇文章：<a href=\"https://godbasin.github.io/2016/06/19/position-object/\">《js判断某个位置是否特定元素》</a></p>\n</li>\n<li><p>获取当前鼠标位置</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getMousePos</span>(<span class=\"params\">event</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> e = event || <span class=\"built_in\">window</span>.event;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> scrollX = <span class=\"built_in\">document</span>.documentElement.scrollLeft || <span class=\"built_in\">document</span>.body.scrollLeft;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> scrollY = <span class=\"built_in\">document</span>.documentElement.scrollTop || <span class=\"built_in\">document</span>.body.scrollTop;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> x = e.pageX || e.clientX + scrollX;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> y = e.pageY || e.clientY + scrollY;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">    <span class=\"string\">'x'</span>: x,</span><br><span class=\"line\">    <span class=\"string\">'y'</span>: y</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>定位当前位置是否有布局或者控件对象position_target</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">position_target</span>(<span class=\"params\">e</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> e = e || <span class=\"built_in\">window</span>.event;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> scrollX = <span class=\"built_in\">document</span>.documentElement.scrollLeft || <span class=\"built_in\">document</span>.body.scrollLeft;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> scrollY = <span class=\"built_in\">document</span>.documentElement.scrollTop || <span class=\"built_in\">document</span>.body.scrollTop;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> eventX = e.pageX - scrollX || e.clientX;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> eventY = e.pageY - scrollY || e.clientY;</span><br><span class=\"line\">  target = <span class=\"built_in\">document</span>.elementFromPoint(eventX, eventY);</span><br><span class=\"line\">  target = fnGetTable(target);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fnGetTable</span>(<span class=\"params\">oEl</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">while</span> (<span class=\"literal\">null</span> != oEl &amp;&amp; $(oEl).attr(<span class=\"string\">'class'</span>) != <span class=\"string\">\"fix-target\"</span> &amp;&amp; $(oEl).attr(<span class=\"string\">'id'</span>) != <span class=\"string\">\"set-layout\"</span> &amp;&amp; $(oEl).attr(<span class=\"string\">'id'</span>) != <span class=\"string\">\"save-page\"</span> &amp;&amp; $(oEl).attr(<span class=\"string\">'class'</span>) != <span class=\"string\">\"box-footer\"</span> &amp;&amp; $(oEl).attr(<span class=\"string\">'class'</span>) != <span class=\"string\">\"to-edit\"</span> &amp;&amp; $(oEl).attr(<span class=\"string\">'class'</span>) != <span class=\"string\">\"edit\"</span> &amp;&amp; $(oEl).attr(<span class=\"string\">'class'</span>) != <span class=\"string\">\"container\"</span> &amp;&amp; $(oEl).attr(<span class=\"string\">'class'</span>) != <span class=\"string\">\"float-target\"</span> &amp;&amp; $(oEl).attr(<span class=\"string\">'class'</span>) != <span class=\"string\">\"fix-layout\"</span> &amp;&amp; $(oEl).attr(<span class=\"string\">'class'</span>) != <span class=\"string\">\"float-layout\"</span>) &#123;</span><br><span class=\"line\">    oEl = oEl.parentElement;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> oEl;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>定位当前位置是否有在页面效果的布局里position_target</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">position_box</span>(<span class=\"params\">e</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> e = e || <span class=\"built_in\">window</span>.event;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> scrollX = <span class=\"built_in\">document</span>.documentElement.scrollLeft || <span class=\"built_in\">document</span>.body.scrollLeft;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> scrollY = <span class=\"built_in\">document</span>.documentElement.scrollTop || <span class=\"built_in\">document</span>.body.scrollTop;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> eventX = e.pageX - scrollX || e.clientX;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> eventY = $(target).offset().top - <span class=\"number\">1</span> - scrollY;</span><br><span class=\"line\">  box = <span class=\"built_in\">document</span>.elementFromPoint(eventX, eventY);</span><br><span class=\"line\">  box = fnGetTable2(box);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fnGetTable2</span>(<span class=\"params\">oEl</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">while</span> (<span class=\"literal\">null</span> != oEl &amp;&amp; $(oEl).attr(<span class=\"string\">'id'</span>) != <span class=\"string\">\"box\"</span> &amp;&amp; $(oEl).attr(<span class=\"string\">'class'</span>) != <span class=\"string\">\"container\"</span> &amp;&amp; $(oEl).attr(<span class=\"string\">'data-type'</span>) != <span class=\"string\">\"layout\"</span>) &#123;</span><br><span class=\"line\">    oEl = oEl.parentElement;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> oEl;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h2 id=\"绑定鼠标移动事件\"><a href=\"#绑定鼠标移动事件\" class=\"headerlink\" title=\"绑定鼠标移动事件\"></a>绑定鼠标移动事件</h2><hr>\n<h3 id=\"需要进行的判断\"><a href=\"#需要进行的判断\" class=\"headerlink\" title=\"需要进行的判断\"></a>需要进行的判断</h3><ul>\n<li>是否有正在拖动的布局或者控件</li>\n<li>当前鼠标位置是否在页面效果内，添加布局示意（蓝色框框表示即将添加布局的位置）</li>\n<li>当前鼠标位置是否在页面效果内的某个布局上方，在相应位置添加布局示意</li>\n<li>全局绑定鼠标移动事件</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$(<span class=\"built_in\">document</span>).mousemove(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">e</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">//判断是否有正在拖动的布局或者控件</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (dragging) &#123;</span><br><span class=\"line\">    <span class=\"comment\">//正在拖动的对象位置跟随鼠标移动</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> oX = getMousePos(e).x - $(target).width() / <span class=\"number\">2</span>;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> oY = getMousePos(e).y - $(target).height() / <span class=\"number\">2</span>;</span><br><span class=\"line\">    $(target).css(&#123;</span><br><span class=\"line\">      <span class=\"string\">\"left\"</span>: oX + <span class=\"string\">\"px\"</span>,</span><br><span class=\"line\">      <span class=\"string\">\"top\"</span>: oY + <span class=\"string\">\"px\"</span></span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">    <span class=\"comment\">//定位当前事件位置</span></span><br><span class=\"line\">    position_box(e);</span><br><span class=\"line\">    <span class=\"comment\">//判断当前位置在页面效果内，且在某个布局上方，布局示意添加在当前布局前方</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> ($(box).attr(<span class=\"string\">'data-type'</span>) == <span class=\"string\">\"layout\"</span> &amp;&amp; $(box).parent().attr(<span class=\"string\">'class'</span>) == <span class=\"string\">\"float-layout\"</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> ($(target).attr(<span class=\"string\">'class'</span>) == <span class=\"string\">\"move-layout\"</span> || $(target).attr(<span class=\"string\">'class'</span>) == <span class=\"string\">\"move-layout-over\"</span>) &#123;</span><br><span class=\"line\">        $(target).removeClass(<span class=\"string\">\"move-layout\"</span>).addClass(<span class=\"string\">\"move-layout-over\"</span>);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (dropping == <span class=\"literal\">false</span>) &#123;</span><br><span class=\"line\">          drop = $(<span class=\"string\">\"&lt;div class='drop-layout'&gt;&lt;/div&gt;\"</span>);</span><br><span class=\"line\">          moveDrop();</span><br><span class=\"line\">          $($(box).parent()).before(drop);</span><br><span class=\"line\">          dropping = <span class=\"literal\">true</span>;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">          $(drop).remove();</span><br><span class=\"line\">          moveDrop();</span><br><span class=\"line\">          $($(box).parent()).before(drop);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    <span class=\"comment\">//判断当前位置在页面效果内，且不在某个布局上方，布局示意添加在页面效果最后</span></span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> ($(box).attr(<span class=\"string\">'id'</span>) == <span class=\"string\">\"box\"</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> ($(target).attr(<span class=\"string\">'class'</span>) == <span class=\"string\">\"move-layout\"</span> || $(target).attr(<span class=\"string\">'class'</span>) == <span class=\"string\">\"move-layout-over\"</span>) &#123;</span><br><span class=\"line\">        $(target).removeClass(<span class=\"string\">\"move-layout\"</span>).addClass(<span class=\"string\">\"move-layout-over\"</span>);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (dropping == <span class=\"literal\">false</span>) &#123;</span><br><span class=\"line\">          drop = $(<span class=\"string\">\"&lt;div class='drop-layout'&gt;&lt;/div&gt;\"</span>);</span><br><span class=\"line\">          moveDrop();</span><br><span class=\"line\">          $(<span class=\"string\">\"#box-content\"</span>).append(drop);</span><br><span class=\"line\">          dropping = <span class=\"literal\">true</span>;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">          $(drop).remove();</span><br><span class=\"line\">          moveDrop();</span><br><span class=\"line\">          $(<span class=\"string\">\"#box-content\"</span>).append(drop);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    <span class=\"comment\">//判断当前位置不在页面效果内，移除布局示意</span></span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> ($(target).attr(<span class=\"string\">'class'</span>) == <span class=\"string\">\"move-layout-over\"</span>) &#123;</span><br><span class=\"line\">        $(target).removeClass(<span class=\"string\">\"move-layout-over\"</span>).addClass(<span class=\"string\">\"move-layout\"</span>);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (dropping == <span class=\"literal\">true</span>) &#123;</span><br><span class=\"line\">        $(drop).remove();</span><br><span class=\"line\">        dropping = <span class=\"literal\">false</span>;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<h2 id=\"绑定鼠标左键松开事件\"><a href=\"#绑定鼠标左键松开事件\" class=\"headerlink\" title=\"绑定鼠标左键松开事件\"></a>绑定鼠标左键松开事件</h2><hr>\n<h3 id=\"效果事件\"><a href=\"#效果事件\" class=\"headerlink\" title=\"效果事件\"></a>效果事件</h3><ul>\n<li>当前拖动的对象为布局，且当前鼠标位置是否在页面效果内，添加布局</li>\n<li>当前拖动的对象为控件，且当前鼠标位置是否在页面效果内某个布局上方，且该布局内无其他控件，添加控件至布局</li>\n<li>当前鼠标位置不在页面效果内，移除拖动的对象</li>\n</ul>\n<h3 id=\"需要进行的判断-1\"><a href=\"#需要进行的判断-1\" class=\"headerlink\" title=\"需要进行的判断\"></a>需要进行的判断</h3><ul>\n<li>是否有正在拖动的布局或者控件</li>\n<li>当前鼠标位置是否在页面效果内</li>\n<li>当前拖动的对象是否为布局，且当前鼠标位置是否在页面效果内</li>\n<li>当前拖动的对象是否为控件，且当前鼠标位置是否在页面效果内某个布局上方，该布局是否为空</li>\n<li>全局绑定鼠标左键松开事件</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$(<span class=\"built_in\">document</span>).mouseup(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">e</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">//定位当前事件位置</span></span><br><span class=\"line\">  position_box(e);</span><br><span class=\"line\">  e.cancelBubble = <span class=\"literal\">true</span>;</span><br><span class=\"line\">  <span class=\"comment\">//判断是否有正在拖动的布局或者控件</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (dragging == <span class=\"literal\">true</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">//当前位置为页面效果内的某个布局上方，添加布局或者添加控件</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (($(box).attr(<span class=\"string\">'data-type'</span>) == <span class=\"string\">\"layout\"</span> &amp;&amp; $(box).parent().attr(<span class=\"string\">'class'</span>) == <span class=\"string\">\"float-layout\"</span>) || ($(box).attr(<span class=\"string\">'data-type'</span>) == <span class=\"string\">\"layout\"</span> &amp;&amp; $(box).parent().attr(<span class=\"string\">'data-type'</span>) == <span class=\"string\">\"layout\"</span>)) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> ($(target).attr(<span class=\"string\">'class'</span>) == <span class=\"string\">\"move-target\"</span> &amp;&amp; $(box).children().length == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        $(target).removeClass(<span class=\"string\">\"move-target\"</span>).addClass(<span class=\"string\">\"float-target\"</span>);</span><br><span class=\"line\">        $(target).children(<span class=\"string\">\".header, .footer, .nav, .listview-l, .listview-s, .content, .slider-7, .slider-8, .slider-9\"</span>).css(<span class=\"string\">\"height\"</span>, <span class=\"string\">\"100%\"</span>);</span><br><span class=\"line\">        $(box).append(target);</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> ($(target).attr(<span class=\"string\">'class'</span>) == <span class=\"string\">\"move-layout-over\"</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (dropping) &#123;</span><br><span class=\"line\">          $(target).removeClass(<span class=\"string\">\"move-layout-over\"</span>).addClass(<span class=\"string\">\"float-layout\"</span>);</span><br><span class=\"line\">          $(drop).before($(target));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> $(target).remove();</span><br><span class=\"line\">    <span class=\"comment\">//当前位置为页面效果内，添加布局</span></span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> ($(box).attr(<span class=\"string\">'id'</span>) == <span class=\"string\">\"box\"</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> ($(target).attr(<span class=\"string\">'class'</span>) == <span class=\"string\">\"move-layout-over\"</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (dropping) &#123;</span><br><span class=\"line\">          $(target).removeClass(<span class=\"string\">\"move-layout-over\"</span>).addClass(<span class=\"string\">\"float-layout\"</span>);</span><br><span class=\"line\">          $(drop).before($(target));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        $(target).remove();</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    <span class=\"comment\">//当前鼠标位置不在页面效果内，移除拖动的对象</span></span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      $(target).remove();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  $(drop).remove();</span><br><span class=\"line\">  dropping = <span class=\"literal\">false</span>;</span><br><span class=\"line\">  dragging = <span class=\"literal\">false</span>;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<h2 id=\"完善后续处理\"><a href=\"#完善后续处理\" class=\"headerlink\" title=\"完善后续处理\"></a>完善后续处理</h2><hr>\n<ul>\n<li>编辑控件样式<ul>\n<li>在页面效果内的控件可进行编辑（改变颜色、内容等）</li>\n</ul>\n</li>\n<li>保存页面效果<ul>\n<li>这里为了偷懒直接把整个html导出，将它导出保存到html页面内，并加载相应的样式</li>\n<li>当然为了数据处理的方便，你也可以将这一切都转成数据保存到数据库，提取的时候进行相关处理就好了</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"结束语\"><a href=\"#结束语\" class=\"headerlink\" title=\"结束语\"></a>结束语</h2><hr>\n<p>有时候写些有意思的项目也是很不错的，脑洞要大大的，当然事后别忘了优化哦。</p>\n","excerpt":"<p>以前写过一个拖放功能的页面，用来搭建自定义移动端页面。本文介绍实现方法。<br>","more":"</p>\n<p>项目放在github上，有兴趣的小伙伴可以下载玩玩看<br><a href=\"https://github.com/godbasin/godbasin.github.io/tree/blog-codes/DD-custom-pages\">DD-custom-pages</a><br>已经没有在维护了，也基本没优化，但还是挺有意思的一个项目</p>\n<p>最终效果图如下<a href=\"http://o907xb1mi.bkt.clouddn.com/index.html\">点击查看页面</a><br><img src=\"http://o905ne85q.bkt.clouddn.com/dd_custom_pages.png\" alt=\"image\"></p>\n<h2 id=\"基本页面搭建\"><a href=\"#基本页面搭建\" class=\"headerlink\" title=\"基本页面搭建\"></a>基本页面搭建</h2><hr>\n<p>首先是最基本的页面搭建</p>\n<ul>\n<li>三个基本布局对象<ul>\n<li>1.左侧布局列表</li>\n<li>2.中间页面效果</li>\n<li>3.右侧控件列表</li>\n</ul>\n</li>\n<li>对象的事件处理<br>对象基本事件的编写<ul>\n<li>1.布局切换，以及自定义布局事件</li>\n<li>2.控件切换，选择等</li>\n</ul>\n</li>\n</ul>\n<p>样式布局什么的，这里就略过啦，具体可参考<a href=\"https://github.com/godbasin/DD-custom-pages\">项目</a></p>\n<h2 id=\"绑定鼠标左键按下事件\"><a href=\"#绑定鼠标左键按下事件\" class=\"headerlink\" title=\"绑定鼠标左键按下事件\"></a>绑定鼠标左键按下事件</h2><hr>\n<h3 id=\"需要进行绑定的对象\"><a href=\"#需要进行绑定的对象\" class=\"headerlink\" title=\"需要进行绑定的对象\"></a>需要进行绑定的对象</h3><ul>\n<li>需要进行鼠标左键按下绑定的对象有两种：布局和控件</li>\n<li>布局分为两种：左侧布局列表获取、中间页面效果获取的布局，class为fix-layout和float-layout区分</li>\n<li><p>控件同理: 右侧控件列表获取、中间页面效果获取的控件，class为fix-target和float-target区分</p>\n</li>\n<li><p>全局绑定鼠标鼠标左键按下事件<br>由于该项目中鼠标事件几乎是最主要事件，因此采用全局绑定</p>\n</li>\n</ul>\n<h3 id=\"点击对象后进行处理\"><a href=\"#点击对象后进行处理\" class=\"headerlink\" title=\"点击对象后进行处理\"></a>点击对象后进行处理</h3><ul>\n<li>设置拖动标志true，此时可进行鼠标移动事件的处理，后面会提及</li>\n<li>这里采用复制元素的方式，jQuery实现，$().clone()复制元素对象</li>\n<li>复制对象后，设置对象位置、大小等，这里设置拖动时将元素宽度减小为一般</li>\n</ul>\n<h3 id=\"若对象位于页面效果内，进行相关处理\"><a href=\"#若对象位于页面效果内，进行相关处理\" class=\"headerlink\" title=\"若对象位于页面效果内，进行相关处理\"></a>若对象位于页面效果内，进行相关处理</h3><ul>\n<li>若是对象为布局，则插入布局位置效果</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//绑定事件，这里使用了jQuery</span></span><br><span class=\"line\">$(<span class=\"built_in\">document</span>).on(<span class=\"string\">'mousedown'</span>, mouseDown);</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">mouseDown</span>(<span class=\"params\">e</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">//获取左键点击事件</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (e.which == <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">//定位当前事件位置，并取出相关元素</span></span><br><span class=\"line\">    position_target(e);</span><br><span class=\"line\">    <span class=\"comment\">//处理左侧布局列表获取的布局元素事件</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> ($(target).attr(<span class=\"string\">'class'</span>) == <span class=\"string\">\"fix-layout\"</span>) &#123;</span><br><span class=\"line\">      dragging = <span class=\"literal\">true</span>; <span class=\"comment\">//设置拖动标志</span></span><br><span class=\"line\">      target = $(target).clone(); <span class=\"comment\">//复制元素</span></span><br><span class=\"line\">      $(target).removeClass(<span class=\"string\">\"fix-layout\"</span>).addClass(<span class=\"string\">\"move-layout\"</span>); <span class=\"comment\">//拖动时元素样式</span></span><br><span class=\"line\">      $(<span class=\"string\">\".container\"</span>).append(target); <span class=\"comment\">//将复制的元素添加到页面</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//处理中间布局列表获取的布局元素事件</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> ($(target).attr(<span class=\"string\">'class'</span>) == <span class=\"string\">\"float-layout\"</span>) &#123;</span><br><span class=\"line\">      dragging = <span class=\"literal\">true</span>; <span class=\"comment\">//设置拖动标志</span></span><br><span class=\"line\">      $(target).removeClass(<span class=\"string\">\"float-layout\"</span>).addClass(<span class=\"string\">\"move-layout\"</span>); <span class=\"comment\">//拖动时元素样式</span></span><br><span class=\"line\">      $(<span class=\"string\">\".container\"</span>).append(target); <span class=\"comment\">//将元素移动到页面</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//处理右侧控件列表获取的控件元素事件</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> ($(target).attr(<span class=\"string\">'class'</span>) == <span class=\"string\">\"fix-target\"</span>) &#123;</span><br><span class=\"line\">      dragging = <span class=\"literal\">true</span>; <span class=\"comment\">//设置拖动标志</span></span><br><span class=\"line\">      target = $(target).clone(); <span class=\"comment\">//复制元素</span></span><br><span class=\"line\">      $(target).removeClass(<span class=\"string\">\"fix-target\"</span>).addClass(<span class=\"string\">\"move-target\"</span>); <span class=\"comment\">//拖动时元素样式</span></span><br><span class=\"line\">      $(<span class=\"string\">\".container\"</span>).append(target); <span class=\"comment\">//将复制的元素添加到页面</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//处理中间布局列表获取的控件元素事件</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> ($(target).attr(<span class=\"string\">'class'</span>) == <span class=\"string\">\"float-target\"</span>) &#123;</span><br><span class=\"line\">      dragging = <span class=\"literal\">true</span>; <span class=\"comment\">//设置拖动标志</span></span><br><span class=\"line\">      $(target).removeClass(<span class=\"string\">\"float-target\"</span>).addClass(<span class=\"string\">\"move-target\"</span>); <span class=\"comment\">//拖动时元素样式</span></span><br><span class=\"line\">      $(<span class=\"string\">\".container\"</span>).append(target); <span class=\"comment\">//将元素移动到页面</span></span><br><span class=\"line\">      $(target).children(<span class=\"string\">\".header, .footer, .nav, .content, .slider-7, .slider-8, .slider-9\"</span>).css(<span class=\"string\">\"height\"</span>, <span class=\"string\">\"auto\"</span>); <span class=\"comment\">//拖动时元素内层控件样式</span></span><br><span class=\"line\">      $(target).children(<span class=\"string\">\".listview-l\"</span>).css(<span class=\"string\">\"height\"</span>, <span class=\"string\">\"100px\"</span>); <span class=\"comment\">//拖动时元素内层控件样式</span></span><br><span class=\"line\">      $(target).children(<span class=\"string\">\".listview-s\"</span>).css(<span class=\"string\">\"height\"</span>, <span class=\"string\">\"50px\"</span>); <span class=\"comment\">//拖动时元素内层控件样式</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//判断是否有元素在拖动，将元素位置设置在当前鼠标位置</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (dragging) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">var</span> oX = getMousePos(e).x - $(target).width() / <span class=\"number\">2</span>;</span><br><span class=\"line\">      <span class=\"keyword\">var</span> oY = getMousePos(e).y - $(target).height() / <span class=\"number\">2</span>;</span><br><span class=\"line\">      $(target).css(&#123;</span><br><span class=\"line\">        <span class=\"string\">\"left\"</span>: oX + <span class=\"string\">\"px\"</span>,</span><br><span class=\"line\">        <span class=\"string\">\"top\"</span>: oY + <span class=\"string\">\"px\"</span></span><br><span class=\"line\">      &#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//定位当前事件位置，判断是否在合适的位置</span></span><br><span class=\"line\">    <span class=\"comment\">//若当前元素为布局，且位置为页面效果内，则添加提示，元素放置的位置</span></span><br><span class=\"line\">    position_box(e);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> ($(box).attr(<span class=\"string\">'id'</span>) == <span class=\"string\">\"box\"</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> ($(target).attr(<span class=\"string\">'class'</span>) == <span class=\"string\">\"move-layout\"</span> || $(target).attr(<span class=\"string\">'class'</span>) == <span class=\"string\">\"move-layout-over\"</span>) &#123;</span><br><span class=\"line\">        $(target).removeClass(<span class=\"string\">\"move-layout\"</span>).addClass(<span class=\"string\">\"move-layout-over\"</span>);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (dropping == <span class=\"literal\">false</span>) &#123;</span><br><span class=\"line\">          drop = $(<span class=\"string\">\"&lt;div class='drop-layout'&gt;&lt;/div&gt;\"</span>);</span><br><span class=\"line\">          moveDrop();</span><br><span class=\"line\">          $(<span class=\"string\">\"#box-content\"</span>).append(drop);</span><br><span class=\"line\">          dropping = <span class=\"literal\">true</span>;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">          $(drop).remove();</span><br><span class=\"line\">          moveDrop();</span><br><span class=\"line\">          $(<span class=\"string\">\"#box-content\"</span>).append(drop);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"定位当前位置是否有特定元素\"><a href=\"#定位当前位置是否有特定元素\" class=\"headerlink\" title=\"定位当前位置是否有特定元素\"></a>定位当前位置是否有特定元素</h2><hr>\n<ul>\n<li><p>使用鼠标定位获取相关布局或者控件对象<br>这里可参考上一篇文章：<a href=\"https://godbasin.github.io/2016/06/19/position-object/\">《js判断某个位置是否特定元素》</a></p>\n</li>\n<li><p>获取当前鼠标位置</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getMousePos</span>(<span class=\"params\">event</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> e = event || <span class=\"built_in\">window</span>.event;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> scrollX = <span class=\"built_in\">document</span>.documentElement.scrollLeft || <span class=\"built_in\">document</span>.body.scrollLeft;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> scrollY = <span class=\"built_in\">document</span>.documentElement.scrollTop || <span class=\"built_in\">document</span>.body.scrollTop;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> x = e.pageX || e.clientX + scrollX;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> y = e.pageY || e.clientY + scrollY;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">    <span class=\"string\">'x'</span>: x,</span><br><span class=\"line\">    <span class=\"string\">'y'</span>: y</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>定位当前位置是否有布局或者控件对象position_target</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">position_target</span>(<span class=\"params\">e</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> e = e || <span class=\"built_in\">window</span>.event;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> scrollX = <span class=\"built_in\">document</span>.documentElement.scrollLeft || <span class=\"built_in\">document</span>.body.scrollLeft;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> scrollY = <span class=\"built_in\">document</span>.documentElement.scrollTop || <span class=\"built_in\">document</span>.body.scrollTop;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> eventX = e.pageX - scrollX || e.clientX;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> eventY = e.pageY - scrollY || e.clientY;</span><br><span class=\"line\">  target = <span class=\"built_in\">document</span>.elementFromPoint(eventX, eventY);</span><br><span class=\"line\">  target = fnGetTable(target);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fnGetTable</span>(<span class=\"params\">oEl</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">while</span> (<span class=\"literal\">null</span> != oEl &amp;&amp; $(oEl).attr(<span class=\"string\">'class'</span>) != <span class=\"string\">\"fix-target\"</span> &amp;&amp; $(oEl).attr(<span class=\"string\">'id'</span>) != <span class=\"string\">\"set-layout\"</span> &amp;&amp; $(oEl).attr(<span class=\"string\">'id'</span>) != <span class=\"string\">\"save-page\"</span> &amp;&amp; $(oEl).attr(<span class=\"string\">'class'</span>) != <span class=\"string\">\"box-footer\"</span> &amp;&amp; $(oEl).attr(<span class=\"string\">'class'</span>) != <span class=\"string\">\"to-edit\"</span> &amp;&amp; $(oEl).attr(<span class=\"string\">'class'</span>) != <span class=\"string\">\"edit\"</span> &amp;&amp; $(oEl).attr(<span class=\"string\">'class'</span>) != <span class=\"string\">\"container\"</span> &amp;&amp; $(oEl).attr(<span class=\"string\">'class'</span>) != <span class=\"string\">\"float-target\"</span> &amp;&amp; $(oEl).attr(<span class=\"string\">'class'</span>) != <span class=\"string\">\"fix-layout\"</span> &amp;&amp; $(oEl).attr(<span class=\"string\">'class'</span>) != <span class=\"string\">\"float-layout\"</span>) &#123;</span><br><span class=\"line\">    oEl = oEl.parentElement;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> oEl;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>定位当前位置是否有在页面效果的布局里position_target</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">position_box</span>(<span class=\"params\">e</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> e = e || <span class=\"built_in\">window</span>.event;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> scrollX = <span class=\"built_in\">document</span>.documentElement.scrollLeft || <span class=\"built_in\">document</span>.body.scrollLeft;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> scrollY = <span class=\"built_in\">document</span>.documentElement.scrollTop || <span class=\"built_in\">document</span>.body.scrollTop;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> eventX = e.pageX - scrollX || e.clientX;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> eventY = $(target).offset().top - <span class=\"number\">1</span> - scrollY;</span><br><span class=\"line\">  box = <span class=\"built_in\">document</span>.elementFromPoint(eventX, eventY);</span><br><span class=\"line\">  box = fnGetTable2(box);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fnGetTable2</span>(<span class=\"params\">oEl</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">while</span> (<span class=\"literal\">null</span> != oEl &amp;&amp; $(oEl).attr(<span class=\"string\">'id'</span>) != <span class=\"string\">\"box\"</span> &amp;&amp; $(oEl).attr(<span class=\"string\">'class'</span>) != <span class=\"string\">\"container\"</span> &amp;&amp; $(oEl).attr(<span class=\"string\">'data-type'</span>) != <span class=\"string\">\"layout\"</span>) &#123;</span><br><span class=\"line\">    oEl = oEl.parentElement;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> oEl;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h2 id=\"绑定鼠标移动事件\"><a href=\"#绑定鼠标移动事件\" class=\"headerlink\" title=\"绑定鼠标移动事件\"></a>绑定鼠标移动事件</h2><hr>\n<h3 id=\"需要进行的判断\"><a href=\"#需要进行的判断\" class=\"headerlink\" title=\"需要进行的判断\"></a>需要进行的判断</h3><ul>\n<li>是否有正在拖动的布局或者控件</li>\n<li>当前鼠标位置是否在页面效果内，添加布局示意（蓝色框框表示即将添加布局的位置）</li>\n<li>当前鼠标位置是否在页面效果内的某个布局上方，在相应位置添加布局示意</li>\n<li>全局绑定鼠标移动事件</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$(<span class=\"built_in\">document</span>).mousemove(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">e</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">//判断是否有正在拖动的布局或者控件</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (dragging) &#123;</span><br><span class=\"line\">    <span class=\"comment\">//正在拖动的对象位置跟随鼠标移动</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> oX = getMousePos(e).x - $(target).width() / <span class=\"number\">2</span>;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> oY = getMousePos(e).y - $(target).height() / <span class=\"number\">2</span>;</span><br><span class=\"line\">    $(target).css(&#123;</span><br><span class=\"line\">      <span class=\"string\">\"left\"</span>: oX + <span class=\"string\">\"px\"</span>,</span><br><span class=\"line\">      <span class=\"string\">\"top\"</span>: oY + <span class=\"string\">\"px\"</span></span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">    <span class=\"comment\">//定位当前事件位置</span></span><br><span class=\"line\">    position_box(e);</span><br><span class=\"line\">    <span class=\"comment\">//判断当前位置在页面效果内，且在某个布局上方，布局示意添加在当前布局前方</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> ($(box).attr(<span class=\"string\">'data-type'</span>) == <span class=\"string\">\"layout\"</span> &amp;&amp; $(box).parent().attr(<span class=\"string\">'class'</span>) == <span class=\"string\">\"float-layout\"</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> ($(target).attr(<span class=\"string\">'class'</span>) == <span class=\"string\">\"move-layout\"</span> || $(target).attr(<span class=\"string\">'class'</span>) == <span class=\"string\">\"move-layout-over\"</span>) &#123;</span><br><span class=\"line\">        $(target).removeClass(<span class=\"string\">\"move-layout\"</span>).addClass(<span class=\"string\">\"move-layout-over\"</span>);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (dropping == <span class=\"literal\">false</span>) &#123;</span><br><span class=\"line\">          drop = $(<span class=\"string\">\"&lt;div class='drop-layout'&gt;&lt;/div&gt;\"</span>);</span><br><span class=\"line\">          moveDrop();</span><br><span class=\"line\">          $($(box).parent()).before(drop);</span><br><span class=\"line\">          dropping = <span class=\"literal\">true</span>;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">          $(drop).remove();</span><br><span class=\"line\">          moveDrop();</span><br><span class=\"line\">          $($(box).parent()).before(drop);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    <span class=\"comment\">//判断当前位置在页面效果内，且不在某个布局上方，布局示意添加在页面效果最后</span></span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> ($(box).attr(<span class=\"string\">'id'</span>) == <span class=\"string\">\"box\"</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> ($(target).attr(<span class=\"string\">'class'</span>) == <span class=\"string\">\"move-layout\"</span> || $(target).attr(<span class=\"string\">'class'</span>) == <span class=\"string\">\"move-layout-over\"</span>) &#123;</span><br><span class=\"line\">        $(target).removeClass(<span class=\"string\">\"move-layout\"</span>).addClass(<span class=\"string\">\"move-layout-over\"</span>);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (dropping == <span class=\"literal\">false</span>) &#123;</span><br><span class=\"line\">          drop = $(<span class=\"string\">\"&lt;div class='drop-layout'&gt;&lt;/div&gt;\"</span>);</span><br><span class=\"line\">          moveDrop();</span><br><span class=\"line\">          $(<span class=\"string\">\"#box-content\"</span>).append(drop);</span><br><span class=\"line\">          dropping = <span class=\"literal\">true</span>;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">          $(drop).remove();</span><br><span class=\"line\">          moveDrop();</span><br><span class=\"line\">          $(<span class=\"string\">\"#box-content\"</span>).append(drop);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    <span class=\"comment\">//判断当前位置不在页面效果内，移除布局示意</span></span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> ($(target).attr(<span class=\"string\">'class'</span>) == <span class=\"string\">\"move-layout-over\"</span>) &#123;</span><br><span class=\"line\">        $(target).removeClass(<span class=\"string\">\"move-layout-over\"</span>).addClass(<span class=\"string\">\"move-layout\"</span>);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (dropping == <span class=\"literal\">true</span>) &#123;</span><br><span class=\"line\">        $(drop).remove();</span><br><span class=\"line\">        dropping = <span class=\"literal\">false</span>;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<h2 id=\"绑定鼠标左键松开事件\"><a href=\"#绑定鼠标左键松开事件\" class=\"headerlink\" title=\"绑定鼠标左键松开事件\"></a>绑定鼠标左键松开事件</h2><hr>\n<h3 id=\"效果事件\"><a href=\"#效果事件\" class=\"headerlink\" title=\"效果事件\"></a>效果事件</h3><ul>\n<li>当前拖动的对象为布局，且当前鼠标位置是否在页面效果内，添加布局</li>\n<li>当前拖动的对象为控件，且当前鼠标位置是否在页面效果内某个布局上方，且该布局内无其他控件，添加控件至布局</li>\n<li>当前鼠标位置不在页面效果内，移除拖动的对象</li>\n</ul>\n<h3 id=\"需要进行的判断-1\"><a href=\"#需要进行的判断-1\" class=\"headerlink\" title=\"需要进行的判断\"></a>需要进行的判断</h3><ul>\n<li>是否有正在拖动的布局或者控件</li>\n<li>当前鼠标位置是否在页面效果内</li>\n<li>当前拖动的对象是否为布局，且当前鼠标位置是否在页面效果内</li>\n<li>当前拖动的对象是否为控件，且当前鼠标位置是否在页面效果内某个布局上方，该布局是否为空</li>\n<li>全局绑定鼠标左键松开事件</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$(<span class=\"built_in\">document</span>).mouseup(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">e</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">//定位当前事件位置</span></span><br><span class=\"line\">  position_box(e);</span><br><span class=\"line\">  e.cancelBubble = <span class=\"literal\">true</span>;</span><br><span class=\"line\">  <span class=\"comment\">//判断是否有正在拖动的布局或者控件</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (dragging == <span class=\"literal\">true</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">//当前位置为页面效果内的某个布局上方，添加布局或者添加控件</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (($(box).attr(<span class=\"string\">'data-type'</span>) == <span class=\"string\">\"layout\"</span> &amp;&amp; $(box).parent().attr(<span class=\"string\">'class'</span>) == <span class=\"string\">\"float-layout\"</span>) || ($(box).attr(<span class=\"string\">'data-type'</span>) == <span class=\"string\">\"layout\"</span> &amp;&amp; $(box).parent().attr(<span class=\"string\">'data-type'</span>) == <span class=\"string\">\"layout\"</span>)) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> ($(target).attr(<span class=\"string\">'class'</span>) == <span class=\"string\">\"move-target\"</span> &amp;&amp; $(box).children().length == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        $(target).removeClass(<span class=\"string\">\"move-target\"</span>).addClass(<span class=\"string\">\"float-target\"</span>);</span><br><span class=\"line\">        $(target).children(<span class=\"string\">\".header, .footer, .nav, .listview-l, .listview-s, .content, .slider-7, .slider-8, .slider-9\"</span>).css(<span class=\"string\">\"height\"</span>, <span class=\"string\">\"100%\"</span>);</span><br><span class=\"line\">        $(box).append(target);</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> ($(target).attr(<span class=\"string\">'class'</span>) == <span class=\"string\">\"move-layout-over\"</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (dropping) &#123;</span><br><span class=\"line\">          $(target).removeClass(<span class=\"string\">\"move-layout-over\"</span>).addClass(<span class=\"string\">\"float-layout\"</span>);</span><br><span class=\"line\">          $(drop).before($(target));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> $(target).remove();</span><br><span class=\"line\">    <span class=\"comment\">//当前位置为页面效果内，添加布局</span></span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> ($(box).attr(<span class=\"string\">'id'</span>) == <span class=\"string\">\"box\"</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> ($(target).attr(<span class=\"string\">'class'</span>) == <span class=\"string\">\"move-layout-over\"</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (dropping) &#123;</span><br><span class=\"line\">          $(target).removeClass(<span class=\"string\">\"move-layout-over\"</span>).addClass(<span class=\"string\">\"float-layout\"</span>);</span><br><span class=\"line\">          $(drop).before($(target));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        $(target).remove();</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    <span class=\"comment\">//当前鼠标位置不在页面效果内，移除拖动的对象</span></span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      $(target).remove();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  $(drop).remove();</span><br><span class=\"line\">  dropping = <span class=\"literal\">false</span>;</span><br><span class=\"line\">  dragging = <span class=\"literal\">false</span>;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<h2 id=\"完善后续处理\"><a href=\"#完善后续处理\" class=\"headerlink\" title=\"完善后续处理\"></a>完善后续处理</h2><hr>\n<ul>\n<li>编辑控件样式<ul>\n<li>在页面效果内的控件可进行编辑（改变颜色、内容等）</li>\n</ul>\n</li>\n<li>保存页面效果<ul>\n<li>这里为了偷懒直接把整个html导出，将它导出保存到html页面内，并加载相应的样式</li>\n<li>当然为了数据处理的方便，你也可以将这一切都转成数据保存到数据库，提取的时候进行相关处理就好了</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"结束语\"><a href=\"#结束语\" class=\"headerlink\" title=\"结束语\"></a>结束语</h2><hr>\n<p>有时候写些有意思的项目也是很不错的，脑洞要大大的，当然事后别忘了优化哦。</p>"},{"title":"Angular使用笔记8--使用filter服务进行格式转换","date":"2016-07-23T14:42:23.000Z","_content":"最近的一个项目使用AngularJS(v1.2.6)作为前端的框架，《Angular使用笔记》系列用于记录过程中的一些使用和解决方法。\n本文记录使用filter服务进行格式转换的过程。\n<!--more-->\n## AngularJS Filter\n-----\nAngularJS 过滤器可用于转换数据。\n### ng内置过滤器\n- currency： 格式化数字为货币格式\n- filter： 从数组项中选择一个子集\n- lowercase： 格式化字符串为小写\n- orderBy： 根据某个表达式排列数组\n- uppercase： 格式化字符串为大写\n- date: 日期格式化\n- json: 格式化json对象\n- limitTo: 限制数组长度或字符串长度\n- number: 格式化数字（如千分位）\n\n### 在模板中使用filter\n- 过滤器可以通过一个管道字符（|）和一个过滤器添加到表达式中\n\n``` html\n{{ expression | filter }}\n```\n- 可以多个filter连用，上一个filter的输出将作为下一个filter的输入\n\n``` html\n{{ expression | filter1 | filter2 | ... }}\n```\n- filter可以接收参数，参数用 : 进行分割\n\n``` html\n{{ expression | filter:argument1:argument2:... }}\n```\n### 依赖注入使用filter\n- 需使用依赖注入方法将$filter注入到该controller中\n\n``` javascrpit\nvar new_value = $filter('filtername')(old_value);\n```\n\n### 参考\n[《AngularJS的Filter用法详解》](http://www.cnblogs.com/wushangjue/p/4516107.html?utm_source=tuicool&utm_medium=referral)\n\n## 自定义过滤器\n-----\n- 使用module的filter方法，返回一个函数\n- 该函数接收输入值，并返回处理后的结果\n\n这里我们自定义一个日期格式化的过滤器，可传入type参数进行设置格式(默认为xxxx.xx.xx，传入cn为中文日期xxxx年xx月xx日)。\n\n### 格式简介\n- xxxx.xx.xx格式\n> 该格式需要对月和日进行补全，即小于10表示为0x\n\n``` javascrpit\nvar numStd = function(num) {\n\tif (num === undefined) return; //若无传入值，则返回\n\tvar _val = parseInt(num), //数字化值，去除多余0\n\t\t_num;\n\t//判断小于10，则在前方添加0\n\t_num = (_val < 10) ? ('0' + _val) : ('' + _val);\n\treturn _num; //返回新值\n};\n```\n- xxxx年xx月xx日\n> 该格式需要对月和日数字化，即小于10表示为x\n\n``` javascrpit\nvar numUnstd = function(num) {\n\tif (num === undefined) return; //若无传入值，则返回\n\tvar _num = parseInt(num); //数字化值，去除多余0\n\treturn _num; //返回新值\n};\n```\n\n### 设置过滤器\n- 首先需要对传入值进行判断，若为undefined则返回\n- 使用正则判断当前值的格式，将其拆分取出年月日\n- 根据传入的type参数值，格式化为新的值，并返回\n\n``` javascript\n.filter('myDate', function() {\n\t/**此处略去上方提到的数字格式化***/\n\treturn function(str, type) {\n\t\tif (_str === undefined) return; //若无传入值，则返回\n\t\tvar _str = str + ''; //将该值转换为字符串格式\n\t\t//正则判断当前日期格式\n\t\t//是否为xxxx-xx-xx\n\t\tif (/\\d{4}-\\d{1,2}-\\d{1,2}/.test(_str)) {\n\t\t\tvar datearr = _str.split('-'); //取出年月日\n\t\t\t//若type为cn，则转换成xxxx年xx月xx日，否则为xxxx.xx.xx\n\t\t\tif (type && type.toLowerCase() == 'cn') {\n\t\t\t\t_str = numUnstd(datearr[0]) + '年' + numUnstd(datearr[1]) + '月' + numUnstd(datearr[2]) + '日';\n\t\t\t} else {\n\t\t\t\t_str = numStd(datearr[0]) + '.' + numStd(datearr[1]) + '.' + numStd(datearr[2]);\n\t\t\t}\n\t\t//是否为xxxx.xx.xx\n\t\t} else if (/\\d{4}\\.\\d{1,2}\\.\\d{1,2}/.test(_str)) {\n\t\t\tvar datearr = _str.split('.'); //取出年月日\n\t\t\t//若type为cn，则转换成xxxx年xx月xx日，否则为xxxx.xx.xx\n\t\t\tif (type && type.toLowerCase() == 'cn') {\n\t\t\t\t_str = numUnstd(datearr[0]) + '年' + numUnstd(datearr[1]) + '月' + numUnstd(datearr[2]) + '日';\n\t\t\t} else {\n\t\t\t\t_str = numStd(datearr[0]) + '.' + numStd(datearr[1]) + '.' + numStd(datearr[2]);\n\t\t\t}\n\t\t//是否为xxxx年xx月xx日\n\t\t} else if ((_str.indexOf('年') > -1) && (_str.indexOf('月') > -1) && (_str.indexOf('日') > -1)) {\n\t\t\t //取出年月日\n\t\t\tvar datearr = _str.split('年'),\n\t\t\t\tyear = datearr[0],\n\t\t\t\tmonth = datearr[1].split('月')[0],\n\t\t\t\tday = datearr[1].split('月')[1].replace('日', '');\n\t\t\t//若type为cn，则转换成xxxx年xx月xx日，否则为xxxx.xx.xx\n\t\t\tif (type && type.toLowerCase() == 'cn') {\n\t\t\t\t_str = numUnstd(year) + '年' + numUnstd(month) + '月' + numUnstd(day) + '日';\n\t\t\t} else {\n\t\t\t\t_str = numStd(year) + '.' + numStd(month) + '.' + numStd(day);\n\t\t\t}\t\n\t\t} else {\n\t\t\treturn str; //以上均不符合，返回原值\n\n\t\treturn _str; //返回新值\n\t};\n});\n```\n\n## 在other页面中使用\n-----\n### 添加filter.js\n- 在scripts文件夹新建filter文件夹\n- 在filter文件夹添加filter.js，并添加上述内容\n\n### 添加other页面\n- 在views文件夹内添加一个other.html\n- 在other.html页面内加入头部指令\n\n``` html\n<header app-header></header>\n```\n- 在app.js文件中添加路由\n\n``` javascript\n.when('/other', {\n\ttemplateUrl: 'views/other.html', //other的html页面\n\tcontroller: 'OtherCtrl' //other的控制器\n})\n```\n\n- 添加一些展示过滤器的信息\n\n### 添加控制器\n- 在controller文件夹内添加一个otherCtrl.js\n- 在index启动页面中添加该文件\n- 注入$filter服务\n- 设置一些用于展示的初始值\n\n``` javascript\napp.controller('OtherCtrl', ['$scope', '$filter',  function($scope, $filter) {\n\t$scope.string = 'This is a long long long long long long long long long long very long string.';\n\t$scope.date = new Date();\n\t$scope.number = 1263714072;\n\t$scope.number_with_currency = $filter('currency')($scope.number, '￥');\n}]);\n```\n### 最终效果\n如图：\n![image](http://o905ne85q.bkt.clouddn.com/511E.tmp.png)\n\n## 结束语\n-----\n使用filter服务可以很方便转换各种的数据格式哦，而且也方便统一管理呢。\n[此处查看项目代码（仅包含app部分）](https://github.com/godbasin/godbasin.github.io/tree/blog-codes/angular-notes/8-create-filter)\n[此处查看页面效果](http://o9grhhyar.bkt.clouddn.com/8-create-filter/index.html#/other)","source":"_posts/angular-note-8-create-filter.md","raw":"---\ntitle: Angular使用笔记8--使用filter服务进行格式转换\ndate: 2016-07-23 22:42:23\ncategories: angular混搭\ntags: 笔记\n---\n最近的一个项目使用AngularJS(v1.2.6)作为前端的框架，《Angular使用笔记》系列用于记录过程中的一些使用和解决方法。\n本文记录使用filter服务进行格式转换的过程。\n<!--more-->\n## AngularJS Filter\n-----\nAngularJS 过滤器可用于转换数据。\n### ng内置过滤器\n- currency： 格式化数字为货币格式\n- filter： 从数组项中选择一个子集\n- lowercase： 格式化字符串为小写\n- orderBy： 根据某个表达式排列数组\n- uppercase： 格式化字符串为大写\n- date: 日期格式化\n- json: 格式化json对象\n- limitTo: 限制数组长度或字符串长度\n- number: 格式化数字（如千分位）\n\n### 在模板中使用filter\n- 过滤器可以通过一个管道字符（|）和一个过滤器添加到表达式中\n\n``` html\n{{ expression | filter }}\n```\n- 可以多个filter连用，上一个filter的输出将作为下一个filter的输入\n\n``` html\n{{ expression | filter1 | filter2 | ... }}\n```\n- filter可以接收参数，参数用 : 进行分割\n\n``` html\n{{ expression | filter:argument1:argument2:... }}\n```\n### 依赖注入使用filter\n- 需使用依赖注入方法将$filter注入到该controller中\n\n``` javascrpit\nvar new_value = $filter('filtername')(old_value);\n```\n\n### 参考\n[《AngularJS的Filter用法详解》](http://www.cnblogs.com/wushangjue/p/4516107.html?utm_source=tuicool&utm_medium=referral)\n\n## 自定义过滤器\n-----\n- 使用module的filter方法，返回一个函数\n- 该函数接收输入值，并返回处理后的结果\n\n这里我们自定义一个日期格式化的过滤器，可传入type参数进行设置格式(默认为xxxx.xx.xx，传入cn为中文日期xxxx年xx月xx日)。\n\n### 格式简介\n- xxxx.xx.xx格式\n> 该格式需要对月和日进行补全，即小于10表示为0x\n\n``` javascrpit\nvar numStd = function(num) {\n\tif (num === undefined) return; //若无传入值，则返回\n\tvar _val = parseInt(num), //数字化值，去除多余0\n\t\t_num;\n\t//判断小于10，则在前方添加0\n\t_num = (_val < 10) ? ('0' + _val) : ('' + _val);\n\treturn _num; //返回新值\n};\n```\n- xxxx年xx月xx日\n> 该格式需要对月和日数字化，即小于10表示为x\n\n``` javascrpit\nvar numUnstd = function(num) {\n\tif (num === undefined) return; //若无传入值，则返回\n\tvar _num = parseInt(num); //数字化值，去除多余0\n\treturn _num; //返回新值\n};\n```\n\n### 设置过滤器\n- 首先需要对传入值进行判断，若为undefined则返回\n- 使用正则判断当前值的格式，将其拆分取出年月日\n- 根据传入的type参数值，格式化为新的值，并返回\n\n``` javascript\n.filter('myDate', function() {\n\t/**此处略去上方提到的数字格式化***/\n\treturn function(str, type) {\n\t\tif (_str === undefined) return; //若无传入值，则返回\n\t\tvar _str = str + ''; //将该值转换为字符串格式\n\t\t//正则判断当前日期格式\n\t\t//是否为xxxx-xx-xx\n\t\tif (/\\d{4}-\\d{1,2}-\\d{1,2}/.test(_str)) {\n\t\t\tvar datearr = _str.split('-'); //取出年月日\n\t\t\t//若type为cn，则转换成xxxx年xx月xx日，否则为xxxx.xx.xx\n\t\t\tif (type && type.toLowerCase() == 'cn') {\n\t\t\t\t_str = numUnstd(datearr[0]) + '年' + numUnstd(datearr[1]) + '月' + numUnstd(datearr[2]) + '日';\n\t\t\t} else {\n\t\t\t\t_str = numStd(datearr[0]) + '.' + numStd(datearr[1]) + '.' + numStd(datearr[2]);\n\t\t\t}\n\t\t//是否为xxxx.xx.xx\n\t\t} else if (/\\d{4}\\.\\d{1,2}\\.\\d{1,2}/.test(_str)) {\n\t\t\tvar datearr = _str.split('.'); //取出年月日\n\t\t\t//若type为cn，则转换成xxxx年xx月xx日，否则为xxxx.xx.xx\n\t\t\tif (type && type.toLowerCase() == 'cn') {\n\t\t\t\t_str = numUnstd(datearr[0]) + '年' + numUnstd(datearr[1]) + '月' + numUnstd(datearr[2]) + '日';\n\t\t\t} else {\n\t\t\t\t_str = numStd(datearr[0]) + '.' + numStd(datearr[1]) + '.' + numStd(datearr[2]);\n\t\t\t}\n\t\t//是否为xxxx年xx月xx日\n\t\t} else if ((_str.indexOf('年') > -1) && (_str.indexOf('月') > -1) && (_str.indexOf('日') > -1)) {\n\t\t\t //取出年月日\n\t\t\tvar datearr = _str.split('年'),\n\t\t\t\tyear = datearr[0],\n\t\t\t\tmonth = datearr[1].split('月')[0],\n\t\t\t\tday = datearr[1].split('月')[1].replace('日', '');\n\t\t\t//若type为cn，则转换成xxxx年xx月xx日，否则为xxxx.xx.xx\n\t\t\tif (type && type.toLowerCase() == 'cn') {\n\t\t\t\t_str = numUnstd(year) + '年' + numUnstd(month) + '月' + numUnstd(day) + '日';\n\t\t\t} else {\n\t\t\t\t_str = numStd(year) + '.' + numStd(month) + '.' + numStd(day);\n\t\t\t}\t\n\t\t} else {\n\t\t\treturn str; //以上均不符合，返回原值\n\n\t\treturn _str; //返回新值\n\t};\n});\n```\n\n## 在other页面中使用\n-----\n### 添加filter.js\n- 在scripts文件夹新建filter文件夹\n- 在filter文件夹添加filter.js，并添加上述内容\n\n### 添加other页面\n- 在views文件夹内添加一个other.html\n- 在other.html页面内加入头部指令\n\n``` html\n<header app-header></header>\n```\n- 在app.js文件中添加路由\n\n``` javascript\n.when('/other', {\n\ttemplateUrl: 'views/other.html', //other的html页面\n\tcontroller: 'OtherCtrl' //other的控制器\n})\n```\n\n- 添加一些展示过滤器的信息\n\n### 添加控制器\n- 在controller文件夹内添加一个otherCtrl.js\n- 在index启动页面中添加该文件\n- 注入$filter服务\n- 设置一些用于展示的初始值\n\n``` javascript\napp.controller('OtherCtrl', ['$scope', '$filter',  function($scope, $filter) {\n\t$scope.string = 'This is a long long long long long long long long long long very long string.';\n\t$scope.date = new Date();\n\t$scope.number = 1263714072;\n\t$scope.number_with_currency = $filter('currency')($scope.number, '￥');\n}]);\n```\n### 最终效果\n如图：\n![image](http://o905ne85q.bkt.clouddn.com/511E.tmp.png)\n\n## 结束语\n-----\n使用filter服务可以很方便转换各种的数据格式哦，而且也方便统一管理呢。\n[此处查看项目代码（仅包含app部分）](https://github.com/godbasin/godbasin.github.io/tree/blog-codes/angular-notes/8-create-filter)\n[此处查看页面效果](http://o9grhhyar.bkt.clouddn.com/8-create-filter/index.html#/other)","slug":"angular-note-8-create-filter","published":1,"updated":"2016-07-29T13:23:03.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cirrwvo3r001838l5dof66xgn","content":"<p>最近的一个项目使用AngularJS(v1.2.6)作为前端的框架，《Angular使用笔记》系列用于记录过程中的一些使用和解决方法。<br>本文记录使用filter服务进行格式转换的过程。<br><a id=\"more\"></a></p>\n<h2 id=\"AngularJS-Filter\"><a href=\"#AngularJS-Filter\" class=\"headerlink\" title=\"AngularJS Filter\"></a>AngularJS Filter</h2><hr>\n<p>AngularJS 过滤器可用于转换数据。</p>\n<h3 id=\"ng内置过滤器\"><a href=\"#ng内置过滤器\" class=\"headerlink\" title=\"ng内置过滤器\"></a>ng内置过滤器</h3><ul>\n<li>currency： 格式化数字为货币格式</li>\n<li>filter： 从数组项中选择一个子集</li>\n<li>lowercase： 格式化字符串为小写</li>\n<li>orderBy： 根据某个表达式排列数组</li>\n<li>uppercase： 格式化字符串为大写</li>\n<li>date: 日期格式化</li>\n<li>json: 格式化json对象</li>\n<li>limitTo: 限制数组长度或字符串长度</li>\n<li>number: 格式化数字（如千分位）</li>\n</ul>\n<h3 id=\"在模板中使用filter\"><a href=\"#在模板中使用filter\" class=\"headerlink\" title=\"在模板中使用filter\"></a>在模板中使用filter</h3><ul>\n<li>过滤器可以通过一个管道字符（|）和一个过滤器添加到表达式中</li>\n</ul>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;&#123; expression | filter &#125;&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>可以多个filter连用，上一个filter的输出将作为下一个filter的输入</li>\n</ul>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;&#123; expression | filter1 | filter2 | ... &#125;&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>filter可以接收参数，参数用 : 进行分割</li>\n</ul>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;&#123; expression | filter:argument1:argument2:... &#125;&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"依赖注入使用filter\"><a href=\"#依赖注入使用filter\" class=\"headerlink\" title=\"依赖注入使用filter\"></a>依赖注入使用filter</h3><ul>\n<li>需使用依赖注入方法将$filter注入到该controller中</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var new_value = $filter(&apos;filtername&apos;)(old_value);</span><br></pre></td></tr></table></figure>\n<h3 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h3><p><a href=\"http://www.cnblogs.com/wushangjue/p/4516107.html?utm_source=tuicool&amp;utm_medium=referral\" target=\"_blank\" rel=\"external\">《AngularJS的Filter用法详解》</a></p>\n<h2 id=\"自定义过滤器\"><a href=\"#自定义过滤器\" class=\"headerlink\" title=\"自定义过滤器\"></a>自定义过滤器</h2><hr>\n<ul>\n<li>使用module的filter方法，返回一个函数</li>\n<li>该函数接收输入值，并返回处理后的结果</li>\n</ul>\n<p>这里我们自定义一个日期格式化的过滤器，可传入type参数进行设置格式(默认为xxxx.xx.xx，传入cn为中文日期xxxx年xx月xx日)。</p>\n<h3 id=\"格式简介\"><a href=\"#格式简介\" class=\"headerlink\" title=\"格式简介\"></a>格式简介</h3><ul>\n<li>xxxx.xx.xx格式<blockquote>\n<p>该格式需要对月和日进行补全，即小于10表示为0x</p>\n</blockquote>\n</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var numStd = function(num) &#123;</span><br><span class=\"line\">  if (num === undefined) return; //若无传入值，则返回</span><br><span class=\"line\">  var _val = parseInt(num), //数字化值，去除多余0</span><br><span class=\"line\">    _num;</span><br><span class=\"line\">  //判断小于10，则在前方添加0</span><br><span class=\"line\">  _num = (_val &lt; 10) ? (&apos;0&apos; + _val) : (&apos;&apos; + _val);</span><br><span class=\"line\">  return _num; //返回新值</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>xxxx年xx月xx日<blockquote>\n<p>该格式需要对月和日数字化，即小于10表示为x</p>\n</blockquote>\n</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var numUnstd = function(num) &#123;</span><br><span class=\"line\">  if (num === undefined) return; //若无传入值，则返回</span><br><span class=\"line\">  var _num = parseInt(num); //数字化值，去除多余0</span><br><span class=\"line\">  return _num; //返回新值</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h3 id=\"设置过滤器\"><a href=\"#设置过滤器\" class=\"headerlink\" title=\"设置过滤器\"></a>设置过滤器</h3><ul>\n<li>首先需要对传入值进行判断，若为undefined则返回</li>\n<li>使用正则判断当前值的格式，将其拆分取出年月日</li>\n<li>根据传入的type参数值，格式化为新的值，并返回</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.filter(<span class=\"string\">'myDate'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">/**此处略去上方提到的数字格式化***/</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">str, type</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (_str === <span class=\"literal\">undefined</span>) <span class=\"keyword\">return</span>; <span class=\"comment\">//若无传入值，则返回</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> _str = str + <span class=\"string\">''</span>; <span class=\"comment\">//将该值转换为字符串格式</span></span><br><span class=\"line\">    <span class=\"comment\">//正则判断当前日期格式</span></span><br><span class=\"line\">    <span class=\"comment\">//是否为xxxx-xx-xx</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"regexp\">/\\d&#123;4&#125;-\\d&#123;1,2&#125;-\\d&#123;1,2&#125;/</span>.test(_str)) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">var</span> datearr = _str.split(<span class=\"string\">'-'</span>); <span class=\"comment\">//取出年月日</span></span><br><span class=\"line\">      <span class=\"comment\">//若type为cn，则转换成xxxx年xx月xx日，否则为xxxx.xx.xx</span></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (type &amp;&amp; type.toLowerCase() == <span class=\"string\">'cn'</span>) &#123;</span><br><span class=\"line\">        _str = numUnstd(datearr[<span class=\"number\">0</span>]) + <span class=\"string\">'年'</span> + numUnstd(datearr[<span class=\"number\">1</span>]) + <span class=\"string\">'月'</span> + numUnstd(datearr[<span class=\"number\">2</span>]) + <span class=\"string\">'日'</span>;</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        _str = numStd(datearr[<span class=\"number\">0</span>]) + <span class=\"string\">'.'</span> + numStd(datearr[<span class=\"number\">1</span>]) + <span class=\"string\">'.'</span> + numStd(datearr[<span class=\"number\">2</span>]);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    <span class=\"comment\">//是否为xxxx.xx.xx</span></span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (<span class=\"regexp\">/\\d&#123;4&#125;\\.\\d&#123;1,2&#125;\\.\\d&#123;1,2&#125;/</span>.test(_str)) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">var</span> datearr = _str.split(<span class=\"string\">'.'</span>); <span class=\"comment\">//取出年月日</span></span><br><span class=\"line\">      <span class=\"comment\">//若type为cn，则转换成xxxx年xx月xx日，否则为xxxx.xx.xx</span></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (type &amp;&amp; type.toLowerCase() == <span class=\"string\">'cn'</span>) &#123;</span><br><span class=\"line\">        _str = numUnstd(datearr[<span class=\"number\">0</span>]) + <span class=\"string\">'年'</span> + numUnstd(datearr[<span class=\"number\">1</span>]) + <span class=\"string\">'月'</span> + numUnstd(datearr[<span class=\"number\">2</span>]) + <span class=\"string\">'日'</span>;</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        _str = numStd(datearr[<span class=\"number\">0</span>]) + <span class=\"string\">'.'</span> + numStd(datearr[<span class=\"number\">1</span>]) + <span class=\"string\">'.'</span> + numStd(datearr[<span class=\"number\">2</span>]);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    <span class=\"comment\">//是否为xxxx年xx月xx日</span></span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> ((_str.indexOf(<span class=\"string\">'年'</span>) &gt; <span class=\"number\">-1</span>) &amp;&amp; (_str.indexOf(<span class=\"string\">'月'</span>) &gt; <span class=\"number\">-1</span>) &amp;&amp; (_str.indexOf(<span class=\"string\">'日'</span>) &gt; <span class=\"number\">-1</span>)) &#123;</span><br><span class=\"line\">       <span class=\"comment\">//取出年月日</span></span><br><span class=\"line\">      <span class=\"keyword\">var</span> datearr = _str.split(<span class=\"string\">'年'</span>),</span><br><span class=\"line\">        year = datearr[<span class=\"number\">0</span>],</span><br><span class=\"line\">        month = datearr[<span class=\"number\">1</span>].split(<span class=\"string\">'月'</span>)[<span class=\"number\">0</span>],</span><br><span class=\"line\">        day = datearr[<span class=\"number\">1</span>].split(<span class=\"string\">'月'</span>)[<span class=\"number\">1</span>].replace(<span class=\"string\">'日'</span>, <span class=\"string\">''</span>);</span><br><span class=\"line\">      <span class=\"comment\">//若type为cn，则转换成xxxx年xx月xx日，否则为xxxx.xx.xx</span></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (type &amp;&amp; type.toLowerCase() == <span class=\"string\">'cn'</span>) &#123;</span><br><span class=\"line\">        _str = numUnstd(year) + <span class=\"string\">'年'</span> + numUnstd(month) + <span class=\"string\">'月'</span> + numUnstd(day) + <span class=\"string\">'日'</span>;</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        _str = numStd(year) + <span class=\"string\">'.'</span> + numStd(month) + <span class=\"string\">'.'</span> + numStd(day);</span><br><span class=\"line\">      &#125;\t</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> str; <span class=\"comment\">//以上均不符合，返回原值</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> _str; <span class=\"comment\">//返回新值</span></span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<h2 id=\"在other页面中使用\"><a href=\"#在other页面中使用\" class=\"headerlink\" title=\"在other页面中使用\"></a>在other页面中使用</h2><hr>\n<h3 id=\"添加filter-js\"><a href=\"#添加filter-js\" class=\"headerlink\" title=\"添加filter.js\"></a>添加filter.js</h3><ul>\n<li>在scripts文件夹新建filter文件夹</li>\n<li>在filter文件夹添加filter.js，并添加上述内容</li>\n</ul>\n<h3 id=\"添加other页面\"><a href=\"#添加other页面\" class=\"headerlink\" title=\"添加other页面\"></a>添加other页面</h3><ul>\n<li>在views文件夹内添加一个other.html</li>\n<li>在other.html页面内加入头部指令</li>\n</ul>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">header</span> <span class=\"attr\">app-header</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">header</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li>在app.js文件中添加路由</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.when(<span class=\"string\">'/other'</span>, &#123;</span><br><span class=\"line\">  templateUrl: <span class=\"string\">'views/other.html'</span>, <span class=\"comment\">//other的html页面</span></span><br><span class=\"line\">  controller: <span class=\"string\">'OtherCtrl'</span> <span class=\"comment\">//other的控制器</span></span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<ul>\n<li>添加一些展示过滤器的信息</li>\n</ul>\n<h3 id=\"添加控制器\"><a href=\"#添加控制器\" class=\"headerlink\" title=\"添加控制器\"></a>添加控制器</h3><ul>\n<li>在controller文件夹内添加一个otherCtrl.js</li>\n<li>在index启动页面中添加该文件</li>\n<li>注入$filter服务</li>\n<li>设置一些用于展示的初始值</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">app.controller(<span class=\"string\">'OtherCtrl'</span>, [<span class=\"string\">'$scope'</span>, <span class=\"string\">'$filter'</span>,  <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">$scope, $filter</span>) </span>&#123;</span><br><span class=\"line\">  $scope.string = <span class=\"string\">'This is a long long long long long long long long long long very long string.'</span>;</span><br><span class=\"line\">  $scope.date = <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>();</span><br><span class=\"line\">  $scope.number = <span class=\"number\">1263714072</span>;</span><br><span class=\"line\">  $scope.number_with_currency = $filter(<span class=\"string\">'currency'</span>)($scope.number, <span class=\"string\">'￥'</span>);</span><br><span class=\"line\">&#125;]);</span><br></pre></td></tr></table></figure>\n<h3 id=\"最终效果\"><a href=\"#最终效果\" class=\"headerlink\" title=\"最终效果\"></a>最终效果</h3><p>如图：<br><img src=\"http://o905ne85q.bkt.clouddn.com/511E.tmp.png\" alt=\"image\"></p>\n<h2 id=\"结束语\"><a href=\"#结束语\" class=\"headerlink\" title=\"结束语\"></a>结束语</h2><hr>\n<p>使用filter服务可以很方便转换各种的数据格式哦，而且也方便统一管理呢。<br><a href=\"https://github.com/godbasin/godbasin.github.io/tree/blog-codes/angular-notes/8-create-filter\" target=\"_blank\" rel=\"external\">此处查看项目代码（仅包含app部分）</a><br><a href=\"http://o9grhhyar.bkt.clouddn.com/8-create-filter/index.html#/other\" target=\"_blank\" rel=\"external\">此处查看页面效果</a></p>\n","excerpt":"<p>最近的一个项目使用AngularJS(v1.2.6)作为前端的框架，《Angular使用笔记》系列用于记录过程中的一些使用和解决方法。<br>本文记录使用filter服务进行格式转换的过程。<br>","more":"</p>\n<h2 id=\"AngularJS-Filter\"><a href=\"#AngularJS-Filter\" class=\"headerlink\" title=\"AngularJS Filter\"></a>AngularJS Filter</h2><hr>\n<p>AngularJS 过滤器可用于转换数据。</p>\n<h3 id=\"ng内置过滤器\"><a href=\"#ng内置过滤器\" class=\"headerlink\" title=\"ng内置过滤器\"></a>ng内置过滤器</h3><ul>\n<li>currency： 格式化数字为货币格式</li>\n<li>filter： 从数组项中选择一个子集</li>\n<li>lowercase： 格式化字符串为小写</li>\n<li>orderBy： 根据某个表达式排列数组</li>\n<li>uppercase： 格式化字符串为大写</li>\n<li>date: 日期格式化</li>\n<li>json: 格式化json对象</li>\n<li>limitTo: 限制数组长度或字符串长度</li>\n<li>number: 格式化数字（如千分位）</li>\n</ul>\n<h3 id=\"在模板中使用filter\"><a href=\"#在模板中使用filter\" class=\"headerlink\" title=\"在模板中使用filter\"></a>在模板中使用filter</h3><ul>\n<li>过滤器可以通过一个管道字符（|）和一个过滤器添加到表达式中</li>\n</ul>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;&#123; expression | filter &#125;&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>可以多个filter连用，上一个filter的输出将作为下一个filter的输入</li>\n</ul>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;&#123; expression | filter1 | filter2 | ... &#125;&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>filter可以接收参数，参数用 : 进行分割</li>\n</ul>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;&#123; expression | filter:argument1:argument2:... &#125;&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"依赖注入使用filter\"><a href=\"#依赖注入使用filter\" class=\"headerlink\" title=\"依赖注入使用filter\"></a>依赖注入使用filter</h3><ul>\n<li>需使用依赖注入方法将$filter注入到该controller中</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var new_value = $filter(&apos;filtername&apos;)(old_value);</span><br></pre></td></tr></table></figure>\n<h3 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h3><p><a href=\"http://www.cnblogs.com/wushangjue/p/4516107.html?utm_source=tuicool&amp;utm_medium=referral\">《AngularJS的Filter用法详解》</a></p>\n<h2 id=\"自定义过滤器\"><a href=\"#自定义过滤器\" class=\"headerlink\" title=\"自定义过滤器\"></a>自定义过滤器</h2><hr>\n<ul>\n<li>使用module的filter方法，返回一个函数</li>\n<li>该函数接收输入值，并返回处理后的结果</li>\n</ul>\n<p>这里我们自定义一个日期格式化的过滤器，可传入type参数进行设置格式(默认为xxxx.xx.xx，传入cn为中文日期xxxx年xx月xx日)。</p>\n<h3 id=\"格式简介\"><a href=\"#格式简介\" class=\"headerlink\" title=\"格式简介\"></a>格式简介</h3><ul>\n<li>xxxx.xx.xx格式<blockquote>\n<p>该格式需要对月和日进行补全，即小于10表示为0x</p>\n</blockquote>\n</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var numStd = function(num) &#123;</span><br><span class=\"line\">  if (num === undefined) return; //若无传入值，则返回</span><br><span class=\"line\">  var _val = parseInt(num), //数字化值，去除多余0</span><br><span class=\"line\">    _num;</span><br><span class=\"line\">  //判断小于10，则在前方添加0</span><br><span class=\"line\">  _num = (_val &lt; 10) ? (&apos;0&apos; + _val) : (&apos;&apos; + _val);</span><br><span class=\"line\">  return _num; //返回新值</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>xxxx年xx月xx日<blockquote>\n<p>该格式需要对月和日数字化，即小于10表示为x</p>\n</blockquote>\n</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var numUnstd = function(num) &#123;</span><br><span class=\"line\">  if (num === undefined) return; //若无传入值，则返回</span><br><span class=\"line\">  var _num = parseInt(num); //数字化值，去除多余0</span><br><span class=\"line\">  return _num; //返回新值</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h3 id=\"设置过滤器\"><a href=\"#设置过滤器\" class=\"headerlink\" title=\"设置过滤器\"></a>设置过滤器</h3><ul>\n<li>首先需要对传入值进行判断，若为undefined则返回</li>\n<li>使用正则判断当前值的格式，将其拆分取出年月日</li>\n<li>根据传入的type参数值，格式化为新的值，并返回</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.filter(<span class=\"string\">'myDate'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">/**此处略去上方提到的数字格式化***/</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">str, type</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (_str === <span class=\"literal\">undefined</span>) <span class=\"keyword\">return</span>; <span class=\"comment\">//若无传入值，则返回</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> _str = str + <span class=\"string\">''</span>; <span class=\"comment\">//将该值转换为字符串格式</span></span><br><span class=\"line\">    <span class=\"comment\">//正则判断当前日期格式</span></span><br><span class=\"line\">    <span class=\"comment\">//是否为xxxx-xx-xx</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"regexp\">/\\d&#123;4&#125;-\\d&#123;1,2&#125;-\\d&#123;1,2&#125;/</span>.test(_str)) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">var</span> datearr = _str.split(<span class=\"string\">'-'</span>); <span class=\"comment\">//取出年月日</span></span><br><span class=\"line\">      <span class=\"comment\">//若type为cn，则转换成xxxx年xx月xx日，否则为xxxx.xx.xx</span></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (type &amp;&amp; type.toLowerCase() == <span class=\"string\">'cn'</span>) &#123;</span><br><span class=\"line\">        _str = numUnstd(datearr[<span class=\"number\">0</span>]) + <span class=\"string\">'年'</span> + numUnstd(datearr[<span class=\"number\">1</span>]) + <span class=\"string\">'月'</span> + numUnstd(datearr[<span class=\"number\">2</span>]) + <span class=\"string\">'日'</span>;</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        _str = numStd(datearr[<span class=\"number\">0</span>]) + <span class=\"string\">'.'</span> + numStd(datearr[<span class=\"number\">1</span>]) + <span class=\"string\">'.'</span> + numStd(datearr[<span class=\"number\">2</span>]);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    <span class=\"comment\">//是否为xxxx.xx.xx</span></span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (<span class=\"regexp\">/\\d&#123;4&#125;\\.\\d&#123;1,2&#125;\\.\\d&#123;1,2&#125;/</span>.test(_str)) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">var</span> datearr = _str.split(<span class=\"string\">'.'</span>); <span class=\"comment\">//取出年月日</span></span><br><span class=\"line\">      <span class=\"comment\">//若type为cn，则转换成xxxx年xx月xx日，否则为xxxx.xx.xx</span></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (type &amp;&amp; type.toLowerCase() == <span class=\"string\">'cn'</span>) &#123;</span><br><span class=\"line\">        _str = numUnstd(datearr[<span class=\"number\">0</span>]) + <span class=\"string\">'年'</span> + numUnstd(datearr[<span class=\"number\">1</span>]) + <span class=\"string\">'月'</span> + numUnstd(datearr[<span class=\"number\">2</span>]) + <span class=\"string\">'日'</span>;</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        _str = numStd(datearr[<span class=\"number\">0</span>]) + <span class=\"string\">'.'</span> + numStd(datearr[<span class=\"number\">1</span>]) + <span class=\"string\">'.'</span> + numStd(datearr[<span class=\"number\">2</span>]);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    <span class=\"comment\">//是否为xxxx年xx月xx日</span></span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> ((_str.indexOf(<span class=\"string\">'年'</span>) &gt; <span class=\"number\">-1</span>) &amp;&amp; (_str.indexOf(<span class=\"string\">'月'</span>) &gt; <span class=\"number\">-1</span>) &amp;&amp; (_str.indexOf(<span class=\"string\">'日'</span>) &gt; <span class=\"number\">-1</span>)) &#123;</span><br><span class=\"line\">       <span class=\"comment\">//取出年月日</span></span><br><span class=\"line\">      <span class=\"keyword\">var</span> datearr = _str.split(<span class=\"string\">'年'</span>),</span><br><span class=\"line\">        year = datearr[<span class=\"number\">0</span>],</span><br><span class=\"line\">        month = datearr[<span class=\"number\">1</span>].split(<span class=\"string\">'月'</span>)[<span class=\"number\">0</span>],</span><br><span class=\"line\">        day = datearr[<span class=\"number\">1</span>].split(<span class=\"string\">'月'</span>)[<span class=\"number\">1</span>].replace(<span class=\"string\">'日'</span>, <span class=\"string\">''</span>);</span><br><span class=\"line\">      <span class=\"comment\">//若type为cn，则转换成xxxx年xx月xx日，否则为xxxx.xx.xx</span></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (type &amp;&amp; type.toLowerCase() == <span class=\"string\">'cn'</span>) &#123;</span><br><span class=\"line\">        _str = numUnstd(year) + <span class=\"string\">'年'</span> + numUnstd(month) + <span class=\"string\">'月'</span> + numUnstd(day) + <span class=\"string\">'日'</span>;</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        _str = numStd(year) + <span class=\"string\">'.'</span> + numStd(month) + <span class=\"string\">'.'</span> + numStd(day);</span><br><span class=\"line\">      &#125;\t</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> str; <span class=\"comment\">//以上均不符合，返回原值</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> _str; <span class=\"comment\">//返回新值</span></span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<h2 id=\"在other页面中使用\"><a href=\"#在other页面中使用\" class=\"headerlink\" title=\"在other页面中使用\"></a>在other页面中使用</h2><hr>\n<h3 id=\"添加filter-js\"><a href=\"#添加filter-js\" class=\"headerlink\" title=\"添加filter.js\"></a>添加filter.js</h3><ul>\n<li>在scripts文件夹新建filter文件夹</li>\n<li>在filter文件夹添加filter.js，并添加上述内容</li>\n</ul>\n<h3 id=\"添加other页面\"><a href=\"#添加other页面\" class=\"headerlink\" title=\"添加other页面\"></a>添加other页面</h3><ul>\n<li>在views文件夹内添加一个other.html</li>\n<li>在other.html页面内加入头部指令</li>\n</ul>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">header</span> <span class=\"attr\">app-header</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">header</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li>在app.js文件中添加路由</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.when(<span class=\"string\">'/other'</span>, &#123;</span><br><span class=\"line\">  templateUrl: <span class=\"string\">'views/other.html'</span>, <span class=\"comment\">//other的html页面</span></span><br><span class=\"line\">  controller: <span class=\"string\">'OtherCtrl'</span> <span class=\"comment\">//other的控制器</span></span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<ul>\n<li>添加一些展示过滤器的信息</li>\n</ul>\n<h3 id=\"添加控制器\"><a href=\"#添加控制器\" class=\"headerlink\" title=\"添加控制器\"></a>添加控制器</h3><ul>\n<li>在controller文件夹内添加一个otherCtrl.js</li>\n<li>在index启动页面中添加该文件</li>\n<li>注入$filter服务</li>\n<li>设置一些用于展示的初始值</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">app.controller(<span class=\"string\">'OtherCtrl'</span>, [<span class=\"string\">'$scope'</span>, <span class=\"string\">'$filter'</span>,  <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">$scope, $filter</span>) </span>&#123;</span><br><span class=\"line\">  $scope.string = <span class=\"string\">'This is a long long long long long long long long long long very long string.'</span>;</span><br><span class=\"line\">  $scope.date = <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>();</span><br><span class=\"line\">  $scope.number = <span class=\"number\">1263714072</span>;</span><br><span class=\"line\">  $scope.number_with_currency = $filter(<span class=\"string\">'currency'</span>)($scope.number, <span class=\"string\">'￥'</span>);</span><br><span class=\"line\">&#125;]);</span><br></pre></td></tr></table></figure>\n<h3 id=\"最终效果\"><a href=\"#最终效果\" class=\"headerlink\" title=\"最终效果\"></a>最终效果</h3><p>如图：<br><img src=\"http://o905ne85q.bkt.clouddn.com/511E.tmp.png\" alt=\"image\"></p>\n<h2 id=\"结束语\"><a href=\"#结束语\" class=\"headerlink\" title=\"结束语\"></a>结束语</h2><hr>\n<p>使用filter服务可以很方便转换各种的数据格式哦，而且也方便统一管理呢。<br><a href=\"https://github.com/godbasin/godbasin.github.io/tree/blog-codes/angular-notes/8-create-filter\">此处查看项目代码（仅包含app部分）</a><br><a href=\"http://o9grhhyar.bkt.clouddn.com/8-create-filter/index.html#/other\">此处查看页面效果</a></p>"},{"title":"Angular使用笔记3--公用信息的管理","date":"2016-07-09T08:59:57.000Z","_content":"最近的一个项目使用AngularJS(v1.2.6)作为前端的框架，《Angular使用笔记》系列用于记录过程中的一些使用和解决方法。\n本文记录公共信息的管理方法。\n<!--more-->\n## 使用服务\n-----\n### 什么是服务\n- 在AngularJS中，服务是一个函数或对象，可在你的AngularJS应用中使用\n- AngularJS中有内置服务如$http, $route, $window, $location\n- 服务通过注入依赖方式进行使用\n\n### 创建自定义服务\n有若干方法来创建服务\n- 1.工厂(factory)\n- 2.服务(service)\n- 3.provider，唯一一种你可以传进.config()函数的service。当你想要在service对象启用之前，先进行模块范围的配置，那就应该用 provider\n\n### factory服务示例\n- 创建一个对象，为它添加属性，然后把这个对象返回出来\n\n``` javascript\napp.factory('CommonInfo', function() {\n\tvar data = '';\n\treturn {\n\t\tset: function(data) {\n\t\t\tdata = data;\n\t\t},\n\t\tget: function() {\n\t\t\treturn data;\n\t\t}\n\t};\n});\n```\n\n### service服务示例\n- 用\"new\"关键字实例化，给\"this\"添加属性，然后 service返回\"this\"\n- Angular中，Services和Factories几乎一样\n\n``` javascript\napp.service('CommonInfo', function() {\n\tvar data = '';\n\tthis.set = function(data) {\n\t\tdata = data;\n\t};\n\tthis.get: function() {\n\t\treturn data;\n\t};\n});\n```\n\n### provider\n- 使用Provider创建一个service的独特之处是，你可以在Provider对象传递到应用程序的其他部分之前在app.config函数对其进行修改\n\n``` javascript\napp.provider('CommonInfo', function() {\n\tvar data = '';\n\treturn {\n\t\tset: function(data) {\n\t\t\tdata = data;\n\t\t},\n\t\tget: function() {\n\t\t\treturn data;\n\t\t}\n\t};\n});\napp.config(function(CommonInfo) {\n\tCommonInfo.set('Config');\n});\n```\n\n### 参考\n- [《AngularJS中的Provider们：Service和Factory等的区别》](https://segmentfault.com/a/1190000003096933)\n- [《AngularJS之Factory vs Service vs Provider》](http://www.linuxidc.com/Linux/2014-05/101475.htm)\n- [《走进AngularJs(六) 服务》](http://www.cnblogs.com/lvdabao/p/3464015.html?utm_source=tuicool&utm_medium=referral)\n\n## 使用$rootscope\n-----\n### 什么是作用域Scope\n- Scope(作用域)是应用在HTML(视图)和JavaScript(控制器)之间的纽带\n- Scope是一个对象，有可用的方法和属性\n- Scope可应用在视图和控制器上\n\n### 什么是跟作用域$rootScope\n- $rootScope可作用于整个应用中。是各个controller中scope的桥梁。用rootscope定义的值，可以在各个controller中使用\n- $rootScope是由angularJS加载模块的时候自动创建的，每个模块只会有1个rootScope\n\n### 使用$rootscope保存公用信息\n- 使用$rootscope跟作用域保存公用信息，则在每个控制器中均可获取这些信息\n- 使用$rootscope需要引用'$rootscope'依赖\n\n``` javascript\napp.controller('SomeCtrl', ['$rootscope', '$scope', function($rootscope, $scope) {\n\t//设置$rootscope的信息\n\t$rootscope.data = data;\n\t//获取$rootscope的信息\n\t$scope.data = $rootscope.data;\n}]);\n```\n\n### 参考\n- [【原创】angularjs1.3.0源码解析之scope](http://www.html-js.com/article/2365)\n\n## 使用SessionStorage\n-----\n### HTML5新特性: SessionStorage\n- sessionStorage用于本地存储一个会话（session）中的数据，这些数据只有在同一个会话中的页面才能访问并且当会话结束后数据也随之销毁\n- sessionStorage不是一种持久化的本地存储，仅仅是会话级别的存储\n- 可利用SessionStorage保存一些会话类公共信息\n\n### 使用sessionStorage\n- 检测兼容性：window.sessionStorage\n- 设置session项：sessionStorage.setItem(key, value)\n- 获取session项：sessionStorage.getItem(key)\n- 删除session项：sessionStorage.removeItem(key)\n- 清除所有session信息：sessionStorage.clear()\n\n## 各种方法适用性\n-----\n### 服务的使用\n- 需通过http获取数据保存的信息\n- 公用方法的服务\n\n### $rootscope的使用\n- 在HTML DOM中直接使用的信息，如权限等\n- 可配合ng-if等绑定界面结构\n\n### sessionStorage的使用\n- 会话中的数据，如登录信息\n- 模块间跳转时需要携带数据信息\n  - 跳转前设置session\n  - location.href进行跳转\n  - 控制器加载时判断是否加载特定数据\n  - 加载数据后销毁相关session\n\n## 结束语\n-----\n以上方法均为本骚年脑洞出来的方法，若有不正确之处希望大家指出，又或者有更多的办法欢迎加入讨论呀。","source":"_posts/angular-note-3-common-info-manage.md","raw":"---\ntitle: Angular使用笔记3--公用信息的管理\ndate: 2016-07-09 16:59:57\ncategories: angular混搭\ntags: 笔记\n---\n最近的一个项目使用AngularJS(v1.2.6)作为前端的框架，《Angular使用笔记》系列用于记录过程中的一些使用和解决方法。\n本文记录公共信息的管理方法。\n<!--more-->\n## 使用服务\n-----\n### 什么是服务\n- 在AngularJS中，服务是一个函数或对象，可在你的AngularJS应用中使用\n- AngularJS中有内置服务如$http, $route, $window, $location\n- 服务通过注入依赖方式进行使用\n\n### 创建自定义服务\n有若干方法来创建服务\n- 1.工厂(factory)\n- 2.服务(service)\n- 3.provider，唯一一种你可以传进.config()函数的service。当你想要在service对象启用之前，先进行模块范围的配置，那就应该用 provider\n\n### factory服务示例\n- 创建一个对象，为它添加属性，然后把这个对象返回出来\n\n``` javascript\napp.factory('CommonInfo', function() {\n\tvar data = '';\n\treturn {\n\t\tset: function(data) {\n\t\t\tdata = data;\n\t\t},\n\t\tget: function() {\n\t\t\treturn data;\n\t\t}\n\t};\n});\n```\n\n### service服务示例\n- 用\"new\"关键字实例化，给\"this\"添加属性，然后 service返回\"this\"\n- Angular中，Services和Factories几乎一样\n\n``` javascript\napp.service('CommonInfo', function() {\n\tvar data = '';\n\tthis.set = function(data) {\n\t\tdata = data;\n\t};\n\tthis.get: function() {\n\t\treturn data;\n\t};\n});\n```\n\n### provider\n- 使用Provider创建一个service的独特之处是，你可以在Provider对象传递到应用程序的其他部分之前在app.config函数对其进行修改\n\n``` javascript\napp.provider('CommonInfo', function() {\n\tvar data = '';\n\treturn {\n\t\tset: function(data) {\n\t\t\tdata = data;\n\t\t},\n\t\tget: function() {\n\t\t\treturn data;\n\t\t}\n\t};\n});\napp.config(function(CommonInfo) {\n\tCommonInfo.set('Config');\n});\n```\n\n### 参考\n- [《AngularJS中的Provider们：Service和Factory等的区别》](https://segmentfault.com/a/1190000003096933)\n- [《AngularJS之Factory vs Service vs Provider》](http://www.linuxidc.com/Linux/2014-05/101475.htm)\n- [《走进AngularJs(六) 服务》](http://www.cnblogs.com/lvdabao/p/3464015.html?utm_source=tuicool&utm_medium=referral)\n\n## 使用$rootscope\n-----\n### 什么是作用域Scope\n- Scope(作用域)是应用在HTML(视图)和JavaScript(控制器)之间的纽带\n- Scope是一个对象，有可用的方法和属性\n- Scope可应用在视图和控制器上\n\n### 什么是跟作用域$rootScope\n- $rootScope可作用于整个应用中。是各个controller中scope的桥梁。用rootscope定义的值，可以在各个controller中使用\n- $rootScope是由angularJS加载模块的时候自动创建的，每个模块只会有1个rootScope\n\n### 使用$rootscope保存公用信息\n- 使用$rootscope跟作用域保存公用信息，则在每个控制器中均可获取这些信息\n- 使用$rootscope需要引用'$rootscope'依赖\n\n``` javascript\napp.controller('SomeCtrl', ['$rootscope', '$scope', function($rootscope, $scope) {\n\t//设置$rootscope的信息\n\t$rootscope.data = data;\n\t//获取$rootscope的信息\n\t$scope.data = $rootscope.data;\n}]);\n```\n\n### 参考\n- [【原创】angularjs1.3.0源码解析之scope](http://www.html-js.com/article/2365)\n\n## 使用SessionStorage\n-----\n### HTML5新特性: SessionStorage\n- sessionStorage用于本地存储一个会话（session）中的数据，这些数据只有在同一个会话中的页面才能访问并且当会话结束后数据也随之销毁\n- sessionStorage不是一种持久化的本地存储，仅仅是会话级别的存储\n- 可利用SessionStorage保存一些会话类公共信息\n\n### 使用sessionStorage\n- 检测兼容性：window.sessionStorage\n- 设置session项：sessionStorage.setItem(key, value)\n- 获取session项：sessionStorage.getItem(key)\n- 删除session项：sessionStorage.removeItem(key)\n- 清除所有session信息：sessionStorage.clear()\n\n## 各种方法适用性\n-----\n### 服务的使用\n- 需通过http获取数据保存的信息\n- 公用方法的服务\n\n### $rootscope的使用\n- 在HTML DOM中直接使用的信息，如权限等\n- 可配合ng-if等绑定界面结构\n\n### sessionStorage的使用\n- 会话中的数据，如登录信息\n- 模块间跳转时需要携带数据信息\n  - 跳转前设置session\n  - location.href进行跳转\n  - 控制器加载时判断是否加载特定数据\n  - 加载数据后销毁相关session\n\n## 结束语\n-----\n以上方法均为本骚年脑洞出来的方法，若有不正确之处希望大家指出，又或者有更多的办法欢迎加入讨论呀。","slug":"angular-note-3-common-info-manage","published":1,"updated":"2016-07-29T13:25:46.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cirrwvo3w001b38l5i9kfvdz4","content":"<p>最近的一个项目使用AngularJS(v1.2.6)作为前端的框架，《Angular使用笔记》系列用于记录过程中的一些使用和解决方法。<br>本文记录公共信息的管理方法。<br><a id=\"more\"></a></p>\n<h2 id=\"使用服务\"><a href=\"#使用服务\" class=\"headerlink\" title=\"使用服务\"></a>使用服务</h2><hr>\n<h3 id=\"什么是服务\"><a href=\"#什么是服务\" class=\"headerlink\" title=\"什么是服务\"></a>什么是服务</h3><ul>\n<li>在AngularJS中，服务是一个函数或对象，可在你的AngularJS应用中使用</li>\n<li>AngularJS中有内置服务如$http, $route, $window, $location</li>\n<li>服务通过注入依赖方式进行使用</li>\n</ul>\n<h3 id=\"创建自定义服务\"><a href=\"#创建自定义服务\" class=\"headerlink\" title=\"创建自定义服务\"></a>创建自定义服务</h3><p>有若干方法来创建服务</p>\n<ul>\n<li>1.工厂(factory)</li>\n<li>2.服务(service)</li>\n<li>3.provider，唯一一种你可以传进.config()函数的service。当你想要在service对象启用之前，先进行模块范围的配置，那就应该用 provider</li>\n</ul>\n<h3 id=\"factory服务示例\"><a href=\"#factory服务示例\" class=\"headerlink\" title=\"factory服务示例\"></a>factory服务示例</h3><ul>\n<li>创建一个对象，为它添加属性，然后把这个对象返回出来</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">app.factory(<span class=\"string\">'CommonInfo'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> data = <span class=\"string\">''</span>;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">    set: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">data</span>) </span>&#123;</span><br><span class=\"line\">      data = data;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    get: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> data;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<h3 id=\"service服务示例\"><a href=\"#service服务示例\" class=\"headerlink\" title=\"service服务示例\"></a>service服务示例</h3><ul>\n<li>用”new”关键字实例化，给”this”添加属性，然后 service返回”this”</li>\n<li>Angular中，Services和Factories几乎一样</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">app.service(<span class=\"string\">'CommonInfo'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> data = <span class=\"string\">''</span>;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.set = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">data</span>) </span>&#123;</span><br><span class=\"line\">    data = data;</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.get: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> data;</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<h3 id=\"provider\"><a href=\"#provider\" class=\"headerlink\" title=\"provider\"></a>provider</h3><ul>\n<li>使用Provider创建一个service的独特之处是，你可以在Provider对象传递到应用程序的其他部分之前在app.config函数对其进行修改</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">app.provider(<span class=\"string\">'CommonInfo'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> data = <span class=\"string\">''</span>;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">    set: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">data</span>) </span>&#123;</span><br><span class=\"line\">      data = data;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    get: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> data;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">app.config(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">CommonInfo</span>) </span>&#123;</span><br><span class=\"line\">  CommonInfo.set(<span class=\"string\">'Config'</span>);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<h3 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h3><ul>\n<li><a href=\"https://segmentfault.com/a/1190000003096933\" target=\"_blank\" rel=\"external\">《AngularJS中的Provider们：Service和Factory等的区别》</a></li>\n<li><a href=\"http://www.linuxidc.com/Linux/2014-05/101475.htm\" target=\"_blank\" rel=\"external\">《AngularJS之Factory vs Service vs Provider》</a></li>\n<li><a href=\"http://www.cnblogs.com/lvdabao/p/3464015.html?utm_source=tuicool&amp;utm_medium=referral\" target=\"_blank\" rel=\"external\">《走进AngularJs(六) 服务》</a></li>\n</ul>\n<h2 id=\"使用-rootscope\"><a href=\"#使用-rootscope\" class=\"headerlink\" title=\"使用$rootscope\"></a>使用$rootscope</h2><hr>\n<h3 id=\"什么是作用域Scope\"><a href=\"#什么是作用域Scope\" class=\"headerlink\" title=\"什么是作用域Scope\"></a>什么是作用域Scope</h3><ul>\n<li>Scope(作用域)是应用在HTML(视图)和JavaScript(控制器)之间的纽带</li>\n<li>Scope是一个对象，有可用的方法和属性</li>\n<li>Scope可应用在视图和控制器上</li>\n</ul>\n<h3 id=\"什么是跟作用域-rootScope\"><a href=\"#什么是跟作用域-rootScope\" class=\"headerlink\" title=\"什么是跟作用域$rootScope\"></a>什么是跟作用域$rootScope</h3><ul>\n<li>$rootScope可作用于整个应用中。是各个controller中scope的桥梁。用rootscope定义的值，可以在各个controller中使用</li>\n<li>$rootScope是由angularJS加载模块的时候自动创建的，每个模块只会有1个rootScope</li>\n</ul>\n<h3 id=\"使用-rootscope保存公用信息\"><a href=\"#使用-rootscope保存公用信息\" class=\"headerlink\" title=\"使用$rootscope保存公用信息\"></a>使用$rootscope保存公用信息</h3><ul>\n<li>使用$rootscope跟作用域保存公用信息，则在每个控制器中均可获取这些信息</li>\n<li>使用$rootscope需要引用’$rootscope’依赖</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">app.controller(<span class=\"string\">'SomeCtrl'</span>, [<span class=\"string\">'$rootscope'</span>, <span class=\"string\">'$scope'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">$rootscope, $scope</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">//设置$rootscope的信息</span></span><br><span class=\"line\">  $rootscope.data = data;</span><br><span class=\"line\">  <span class=\"comment\">//获取$rootscope的信息</span></span><br><span class=\"line\">  $scope.data = $rootscope.data;</span><br><span class=\"line\">&#125;]);</span><br></pre></td></tr></table></figure>\n<h3 id=\"参考-1\"><a href=\"#参考-1\" class=\"headerlink\" title=\"参考\"></a>参考</h3><ul>\n<li><a href=\"http://www.html-js.com/article/2365\" target=\"_blank\" rel=\"external\">【原创】angularjs1.3.0源码解析之scope</a></li>\n</ul>\n<h2 id=\"使用SessionStorage\"><a href=\"#使用SessionStorage\" class=\"headerlink\" title=\"使用SessionStorage\"></a>使用SessionStorage</h2><hr>\n<h3 id=\"HTML5新特性-SessionStorage\"><a href=\"#HTML5新特性-SessionStorage\" class=\"headerlink\" title=\"HTML5新特性: SessionStorage\"></a>HTML5新特性: SessionStorage</h3><ul>\n<li>sessionStorage用于本地存储一个会话（session）中的数据，这些数据只有在同一个会话中的页面才能访问并且当会话结束后数据也随之销毁</li>\n<li>sessionStorage不是一种持久化的本地存储，仅仅是会话级别的存储</li>\n<li>可利用SessionStorage保存一些会话类公共信息</li>\n</ul>\n<h3 id=\"使用sessionStorage\"><a href=\"#使用sessionStorage\" class=\"headerlink\" title=\"使用sessionStorage\"></a>使用sessionStorage</h3><ul>\n<li>检测兼容性：window.sessionStorage</li>\n<li>设置session项：sessionStorage.setItem(key, value)</li>\n<li>获取session项：sessionStorage.getItem(key)</li>\n<li>删除session项：sessionStorage.removeItem(key)</li>\n<li>清除所有session信息：sessionStorage.clear()</li>\n</ul>\n<h2 id=\"各种方法适用性\"><a href=\"#各种方法适用性\" class=\"headerlink\" title=\"各种方法适用性\"></a>各种方法适用性</h2><hr>\n<h3 id=\"服务的使用\"><a href=\"#服务的使用\" class=\"headerlink\" title=\"服务的使用\"></a>服务的使用</h3><ul>\n<li>需通过http获取数据保存的信息</li>\n<li>公用方法的服务</li>\n</ul>\n<h3 id=\"rootscope的使用\"><a href=\"#rootscope的使用\" class=\"headerlink\" title=\"$rootscope的使用\"></a>$rootscope的使用</h3><ul>\n<li>在HTML DOM中直接使用的信息，如权限等</li>\n<li>可配合ng-if等绑定界面结构</li>\n</ul>\n<h3 id=\"sessionStorage的使用\"><a href=\"#sessionStorage的使用\" class=\"headerlink\" title=\"sessionStorage的使用\"></a>sessionStorage的使用</h3><ul>\n<li>会话中的数据，如登录信息</li>\n<li>模块间跳转时需要携带数据信息<ul>\n<li>跳转前设置session</li>\n<li>location.href进行跳转</li>\n<li>控制器加载时判断是否加载特定数据</li>\n<li>加载数据后销毁相关session</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"结束语\"><a href=\"#结束语\" class=\"headerlink\" title=\"结束语\"></a>结束语</h2><hr>\n<p>以上方法均为本骚年脑洞出来的方法，若有不正确之处希望大家指出，又或者有更多的办法欢迎加入讨论呀。</p>\n","excerpt":"<p>最近的一个项目使用AngularJS(v1.2.6)作为前端的框架，《Angular使用笔记》系列用于记录过程中的一些使用和解决方法。<br>本文记录公共信息的管理方法。<br>","more":"</p>\n<h2 id=\"使用服务\"><a href=\"#使用服务\" class=\"headerlink\" title=\"使用服务\"></a>使用服务</h2><hr>\n<h3 id=\"什么是服务\"><a href=\"#什么是服务\" class=\"headerlink\" title=\"什么是服务\"></a>什么是服务</h3><ul>\n<li>在AngularJS中，服务是一个函数或对象，可在你的AngularJS应用中使用</li>\n<li>AngularJS中有内置服务如$http, $route, $window, $location</li>\n<li>服务通过注入依赖方式进行使用</li>\n</ul>\n<h3 id=\"创建自定义服务\"><a href=\"#创建自定义服务\" class=\"headerlink\" title=\"创建自定义服务\"></a>创建自定义服务</h3><p>有若干方法来创建服务</p>\n<ul>\n<li>1.工厂(factory)</li>\n<li>2.服务(service)</li>\n<li>3.provider，唯一一种你可以传进.config()函数的service。当你想要在service对象启用之前，先进行模块范围的配置，那就应该用 provider</li>\n</ul>\n<h3 id=\"factory服务示例\"><a href=\"#factory服务示例\" class=\"headerlink\" title=\"factory服务示例\"></a>factory服务示例</h3><ul>\n<li>创建一个对象，为它添加属性，然后把这个对象返回出来</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">app.factory(<span class=\"string\">'CommonInfo'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> data = <span class=\"string\">''</span>;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">    set: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">data</span>) </span>&#123;</span><br><span class=\"line\">      data = data;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    get: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> data;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<h3 id=\"service服务示例\"><a href=\"#service服务示例\" class=\"headerlink\" title=\"service服务示例\"></a>service服务示例</h3><ul>\n<li>用”new”关键字实例化，给”this”添加属性，然后 service返回”this”</li>\n<li>Angular中，Services和Factories几乎一样</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">app.service(<span class=\"string\">'CommonInfo'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> data = <span class=\"string\">''</span>;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.set = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">data</span>) </span>&#123;</span><br><span class=\"line\">    data = data;</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.get: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> data;</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<h3 id=\"provider\"><a href=\"#provider\" class=\"headerlink\" title=\"provider\"></a>provider</h3><ul>\n<li>使用Provider创建一个service的独特之处是，你可以在Provider对象传递到应用程序的其他部分之前在app.config函数对其进行修改</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">app.provider(<span class=\"string\">'CommonInfo'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> data = <span class=\"string\">''</span>;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">    set: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">data</span>) </span>&#123;</span><br><span class=\"line\">      data = data;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    get: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> data;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">app.config(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">CommonInfo</span>) </span>&#123;</span><br><span class=\"line\">  CommonInfo.set(<span class=\"string\">'Config'</span>);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<h3 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h3><ul>\n<li><a href=\"https://segmentfault.com/a/1190000003096933\">《AngularJS中的Provider们：Service和Factory等的区别》</a></li>\n<li><a href=\"http://www.linuxidc.com/Linux/2014-05/101475.htm\">《AngularJS之Factory vs Service vs Provider》</a></li>\n<li><a href=\"http://www.cnblogs.com/lvdabao/p/3464015.html?utm_source=tuicool&amp;utm_medium=referral\">《走进AngularJs(六) 服务》</a></li>\n</ul>\n<h2 id=\"使用-rootscope\"><a href=\"#使用-rootscope\" class=\"headerlink\" title=\"使用$rootscope\"></a>使用$rootscope</h2><hr>\n<h3 id=\"什么是作用域Scope\"><a href=\"#什么是作用域Scope\" class=\"headerlink\" title=\"什么是作用域Scope\"></a>什么是作用域Scope</h3><ul>\n<li>Scope(作用域)是应用在HTML(视图)和JavaScript(控制器)之间的纽带</li>\n<li>Scope是一个对象，有可用的方法和属性</li>\n<li>Scope可应用在视图和控制器上</li>\n</ul>\n<h3 id=\"什么是跟作用域-rootScope\"><a href=\"#什么是跟作用域-rootScope\" class=\"headerlink\" title=\"什么是跟作用域$rootScope\"></a>什么是跟作用域$rootScope</h3><ul>\n<li>$rootScope可作用于整个应用中。是各个controller中scope的桥梁。用rootscope定义的值，可以在各个controller中使用</li>\n<li>$rootScope是由angularJS加载模块的时候自动创建的，每个模块只会有1个rootScope</li>\n</ul>\n<h3 id=\"使用-rootscope保存公用信息\"><a href=\"#使用-rootscope保存公用信息\" class=\"headerlink\" title=\"使用$rootscope保存公用信息\"></a>使用$rootscope保存公用信息</h3><ul>\n<li>使用$rootscope跟作用域保存公用信息，则在每个控制器中均可获取这些信息</li>\n<li>使用$rootscope需要引用’$rootscope’依赖</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">app.controller(<span class=\"string\">'SomeCtrl'</span>, [<span class=\"string\">'$rootscope'</span>, <span class=\"string\">'$scope'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">$rootscope, $scope</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">//设置$rootscope的信息</span></span><br><span class=\"line\">  $rootscope.data = data;</span><br><span class=\"line\">  <span class=\"comment\">//获取$rootscope的信息</span></span><br><span class=\"line\">  $scope.data = $rootscope.data;</span><br><span class=\"line\">&#125;]);</span><br></pre></td></tr></table></figure>\n<h3 id=\"参考-1\"><a href=\"#参考-1\" class=\"headerlink\" title=\"参考\"></a>参考</h3><ul>\n<li><a href=\"http://www.html-js.com/article/2365\">【原创】angularjs1.3.0源码解析之scope</a></li>\n</ul>\n<h2 id=\"使用SessionStorage\"><a href=\"#使用SessionStorage\" class=\"headerlink\" title=\"使用SessionStorage\"></a>使用SessionStorage</h2><hr>\n<h3 id=\"HTML5新特性-SessionStorage\"><a href=\"#HTML5新特性-SessionStorage\" class=\"headerlink\" title=\"HTML5新特性: SessionStorage\"></a>HTML5新特性: SessionStorage</h3><ul>\n<li>sessionStorage用于本地存储一个会话（session）中的数据，这些数据只有在同一个会话中的页面才能访问并且当会话结束后数据也随之销毁</li>\n<li>sessionStorage不是一种持久化的本地存储，仅仅是会话级别的存储</li>\n<li>可利用SessionStorage保存一些会话类公共信息</li>\n</ul>\n<h3 id=\"使用sessionStorage\"><a href=\"#使用sessionStorage\" class=\"headerlink\" title=\"使用sessionStorage\"></a>使用sessionStorage</h3><ul>\n<li>检测兼容性：window.sessionStorage</li>\n<li>设置session项：sessionStorage.setItem(key, value)</li>\n<li>获取session项：sessionStorage.getItem(key)</li>\n<li>删除session项：sessionStorage.removeItem(key)</li>\n<li>清除所有session信息：sessionStorage.clear()</li>\n</ul>\n<h2 id=\"各种方法适用性\"><a href=\"#各种方法适用性\" class=\"headerlink\" title=\"各种方法适用性\"></a>各种方法适用性</h2><hr>\n<h3 id=\"服务的使用\"><a href=\"#服务的使用\" class=\"headerlink\" title=\"服务的使用\"></a>服务的使用</h3><ul>\n<li>需通过http获取数据保存的信息</li>\n<li>公用方法的服务</li>\n</ul>\n<h3 id=\"rootscope的使用\"><a href=\"#rootscope的使用\" class=\"headerlink\" title=\"$rootscope的使用\"></a>$rootscope的使用</h3><ul>\n<li>在HTML DOM中直接使用的信息，如权限等</li>\n<li>可配合ng-if等绑定界面结构</li>\n</ul>\n<h3 id=\"sessionStorage的使用\"><a href=\"#sessionStorage的使用\" class=\"headerlink\" title=\"sessionStorage的使用\"></a>sessionStorage的使用</h3><ul>\n<li>会话中的数据，如登录信息</li>\n<li>模块间跳转时需要携带数据信息<ul>\n<li>跳转前设置session</li>\n<li>location.href进行跳转</li>\n<li>控制器加载时判断是否加载特定数据</li>\n<li>加载数据后销毁相关session</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"结束语\"><a href=\"#结束语\" class=\"headerlink\" title=\"结束语\"></a>结束语</h2><hr>\n<p>以上方法均为本骚年脑洞出来的方法，若有不正确之处希望大家指出，又或者有更多的办法欢迎加入讨论呀。</p>"},{"title":"Angular使用笔记4--制作头部指令","date":"2016-07-10T03:32:37.000Z","_content":"最近的一个项目使用AngularJS(v1.2.6)作为前端的框架，《Angular使用笔记》系列用于记录过程中的一些使用和解决方法。\n本文记录简单介绍指令，以及制作头部指令的过程。\n<!--more-->\n## 有关angularJS指令\n-----\n### 指令要求\n- 指令作为一种服务，其定义有几个特殊要求\n  - 1.必须使用模块的directive方法定义\n  - 2.必须提供factory方法\n  - 3.factory方法返回的对象必须返回一个指令定义的对象\n\n### 指令常用属性\n- restrict\n- 可以是EAMC这四个字母的任意组合，来限定指令的应用场景\n  - E: 只限元素名使用\n  - A: 只限属性使用\n  - C: 只限类名使用\n  - M: 只限注释使用\n\n- template/templateUrl\n  - 指定HTML标记替换指令内容（或指令自身）\n  - 可使用templateUrl指定模板位置\n\n- transclude\n  - 包裹指令的内容，如果transclude属性为true\n  - 模板中使用ng-transclude定位\n\n- replace\n  - 如果replace=true，那么用HTML片段替换指令本身\n\n- scope作用域\n  - 如果设置为true \n    - 将为这个指令创建一个新的作用域\n    - 如果在同一个元素中有多个指令需要新的作用域的话，它还是只会创建一个作用域\n    - 新的作用域规则不适用于根模版（root of the template），因此根模版往往会获得一个新的作用域\n  - 如果设置为{}(object hash)\n    - 将创建一个新的、独立(isolate)的作用域\n    - @或@attr: 建立一个local scope property到DOM属性的绑定\n    - =或=expression: 在本地作用域属性与父作用域属性之间设置双向的绑定\n    - &或&attr: 提供一个在父作用域上下文中执行一个表达式的途径\n\n- require\n  - 请求另外的controller，传入当前directive的link函数中\n  - require需要传入一个指令controller的名称\n\n- link函数\n  - link函数负责实现DOM和Scope的数据绑定\n  - 通常在link里执行DOM事件监听和数据变化监听\n  - link函数在template执行后被调用\n\n- controller函数\n  - 指令可以有controller，因为指令可以创建scope\n  - controller在所有的同一scope的指令中共享，同时可以作为link函数的第四个参数被访问到\n  - 在同一层级的scope上，这些controller是指令间的一个可用的通信信道，也可能包含指令自身\n\n- compile函数\n  - 在所有module都装载完毕在之后，compile(element)(scope)\n  - 这句开始编译和链接整个dom树（其实就是调用dom上出现的指令）\n\n### 解析指令编译过程\n首先，controller会在prelink步骤之前进行初始化，并允许其他directive通过指定名称的require进行共享\n接下来，angular在解析指令的时候，其实会先按一定的顺序执行所有指令的compile函数，然后执行所有指令的preLink函数（如果存在的话），最后执行所有指令的postLink函数\n- compile过程如下：\n  - 1.传递应用根节点给$compile函数，开始编译，返回link函数\n  - 2.传递根作用域给link函数，开始链接（每个指令分为pre link 和 post link两个过程）\n\n- 关于link和compile\n  由于在compile函数最后返回link函数，故有compile函数时指令设置link函数无效，将自动使用compile返回的link函数\n\n- 关于link和controller\n  控制器可以暴露一个API，而link可以通过require与其他的指令控制器交互。所以如果要开放出一个API给其他指令用就写在controller中，否则写在link中\n\n### 参考\n- [《angularjs directive实例详解》](http://blog.51yip.com/jsjquery/1607.html)\n- [《angularjs1.3.0源码解析之directive》](http://www.html-js.com/article/Front-end-source-code-analysis-directive-angularjs130-source-code-analysis-of-the-original)\n\n## 制作头部菜单栏\n-----\n头部菜单栏包括，主菜单，侧边下拉菜单和时钟。如图：\n![image](http://o905ne85q.bkt.clouddn.com/753B.tmp.png)\n\n### 添加index页面\n- 在views文件夹内添加一个index.html\n- 在app.js文件中添加路由\n\n``` javascript\n.when('/index', {\n\ttemplateUrl: 'views/index.html', //index的html页面\n\tcontroller: '' //index的控制器，现在暂时不加\n})\n```\n- 设置login登录后跳转至index页面\n\n``` javascript\nwindow.location.href = 'index.html#/index';\n```\n### 添加头部菜单指令\n- 在scripts文件夹中添加directives文件夹，然后新增headerDir.js文件\n- 创建指令header\n\n``` javascript\napp.directive('appheader', ['$timeout', function($timeout) {\n\treturn {\n\t\trestrict: 'AE', \n\t\ttemplateUrl: './views/directive/header.html',\n\t\tcontroller: function($scope, $element){},\n\t};\n}]);\n```\n- 在index.html页面内引入headerDir.js文件\n\n### 添加头部菜单模板\n- 若模板比较长，为了方便维护可将其放在views中，然后使用templateUrl进行引用\n- 模板架构\n  - 这里使用bootstrap的导航条作为头部\n  - 使用ng-repeat来加载菜单，则可将菜单相关设置放置到scope中，方便维护\n- 这里直接使用template编写模板，具体代码可到项目源码中查看，这里就不放出来了\n\n### 添加控制器\n- 若控制器逻辑比较多，可新增一个controller的js文件来储存逻辑，然后使用require注入或者模板添加ng-controller引用即可\n- 这里直接使用指令的controller来进行逻辑整理\n- 主要逻辑\n  - 设置主菜单和侧边下拉菜单内容\n  - 判断当前路径，并点亮对应菜单（使其active）\n  - 加载和格式化时钟，并定时刷新时间\n\n``` javascript\ncontroller: function($scope, $element, $timeout) {\n\t//$scope.menus用于储存主菜单\n\t$scope.menus = [{\n\t\ttitle: 'index', //title用于储存路由对应的路径\n\t\thref: 'index.html#/index', //href用于设定该菜单跳转路由\n\t\ttext: '首页', //text用于储存该菜单显示名称\n\t}, {\n\t\ttitle: 'others',\n\t\thref: 'index.html#/other',\n\t\ttext: '其他',\n\t}];\n\t//$scope.usermenus用于储存侧边下拉菜单\n\t$scope.usermenus = [{\n\t\thref: 'index.html#/login', //href用于设定该菜单跳转路由\n\t\ttext: '退出', //text用于储存该菜单显示名称\n\t}];\n\t//判断当前路径，点亮对应模块\n\tvar _location = location.hash.split('/')[1];\n\tfor (var i in $scope.menus) {\n\t\t//current用于储存当前菜单是否与当前路径符合，符合则点亮(active)菜单\n\t\tif ($scope.menus[i].title == _location){$scope.menus[i].current = true;}\n\t\telse{$scope.menus[i].current = false;}\n\t}\n\t//用于格式化时间（少于10在前面增加0）\n\tvar numberStandard = function(num) {\n\t\tvar _val = Number(num),\n\t\t\t_num;\n\t\t_num = (_val < 10) ? ('0' + _val) : ('' + _val);\n\t\treturn _num;\n\t};\n\t//用于渲染时钟\n\tvar renderClock = function() {\n\t\tvar _date = new Date();\n\t\t$scope.clock = '';\n\t\t$scope.clock += _date.getFullYear() + '年' + (_date.getMonth() + 1) + '月' +\n\t\t\t_date.getDate() + '日';\n\t\t$scope.clock += ' ' + numberStandard(_date.getHours()) + ':' + numberStandard(_date.getMinutes()) +\n\t\t\t':' + numberStandard(_date.getSeconds());\n\t\t//此处已通过参数注入$timeout服务，若需要注入自定义服务需要require\n\t\t$timeout(function() {\n\t\t\trenderClock();\n\t\t}, 500);\n\t};\n\trenderClock();\n}\n```\n\n### 在index页面中引入头部指令\n``` html\n<header app-header></header>\n```\n\n### 最终效果\n如图：\n![image](http://o905ne85q.bkt.clouddn.com/C902.tmp.png)\n\n## 结束语\n-----\nAngularJS指令的使用过程中可能会出现一些莫名的问题，主要是因为对指令的了解不够深入，大家可以结合使用多去熟悉一下指令过程。\n[此处查看项目代码（仅包含app部分）](https://github.com/godbasin/godbasin.github.io/tree/blog-codes/angular-notes/4-create-header)\n[此处查看页面效果](http://o9grhhyar.bkt.clouddn.com/4-create-header/index.html#/)","source":"_posts/angular-note-4-make-header-directive.md","raw":"---\ntitle: Angular使用笔记4--制作头部指令\ndate: 2016-07-10 11:32:37\ncategories: angular混搭\ntags: 笔记\n---\n最近的一个项目使用AngularJS(v1.2.6)作为前端的框架，《Angular使用笔记》系列用于记录过程中的一些使用和解决方法。\n本文记录简单介绍指令，以及制作头部指令的过程。\n<!--more-->\n## 有关angularJS指令\n-----\n### 指令要求\n- 指令作为一种服务，其定义有几个特殊要求\n  - 1.必须使用模块的directive方法定义\n  - 2.必须提供factory方法\n  - 3.factory方法返回的对象必须返回一个指令定义的对象\n\n### 指令常用属性\n- restrict\n- 可以是EAMC这四个字母的任意组合，来限定指令的应用场景\n  - E: 只限元素名使用\n  - A: 只限属性使用\n  - C: 只限类名使用\n  - M: 只限注释使用\n\n- template/templateUrl\n  - 指定HTML标记替换指令内容（或指令自身）\n  - 可使用templateUrl指定模板位置\n\n- transclude\n  - 包裹指令的内容，如果transclude属性为true\n  - 模板中使用ng-transclude定位\n\n- replace\n  - 如果replace=true，那么用HTML片段替换指令本身\n\n- scope作用域\n  - 如果设置为true \n    - 将为这个指令创建一个新的作用域\n    - 如果在同一个元素中有多个指令需要新的作用域的话，它还是只会创建一个作用域\n    - 新的作用域规则不适用于根模版（root of the template），因此根模版往往会获得一个新的作用域\n  - 如果设置为{}(object hash)\n    - 将创建一个新的、独立(isolate)的作用域\n    - @或@attr: 建立一个local scope property到DOM属性的绑定\n    - =或=expression: 在本地作用域属性与父作用域属性之间设置双向的绑定\n    - &或&attr: 提供一个在父作用域上下文中执行一个表达式的途径\n\n- require\n  - 请求另外的controller，传入当前directive的link函数中\n  - require需要传入一个指令controller的名称\n\n- link函数\n  - link函数负责实现DOM和Scope的数据绑定\n  - 通常在link里执行DOM事件监听和数据变化监听\n  - link函数在template执行后被调用\n\n- controller函数\n  - 指令可以有controller，因为指令可以创建scope\n  - controller在所有的同一scope的指令中共享，同时可以作为link函数的第四个参数被访问到\n  - 在同一层级的scope上，这些controller是指令间的一个可用的通信信道，也可能包含指令自身\n\n- compile函数\n  - 在所有module都装载完毕在之后，compile(element)(scope)\n  - 这句开始编译和链接整个dom树（其实就是调用dom上出现的指令）\n\n### 解析指令编译过程\n首先，controller会在prelink步骤之前进行初始化，并允许其他directive通过指定名称的require进行共享\n接下来，angular在解析指令的时候，其实会先按一定的顺序执行所有指令的compile函数，然后执行所有指令的preLink函数（如果存在的话），最后执行所有指令的postLink函数\n- compile过程如下：\n  - 1.传递应用根节点给$compile函数，开始编译，返回link函数\n  - 2.传递根作用域给link函数，开始链接（每个指令分为pre link 和 post link两个过程）\n\n- 关于link和compile\n  由于在compile函数最后返回link函数，故有compile函数时指令设置link函数无效，将自动使用compile返回的link函数\n\n- 关于link和controller\n  控制器可以暴露一个API，而link可以通过require与其他的指令控制器交互。所以如果要开放出一个API给其他指令用就写在controller中，否则写在link中\n\n### 参考\n- [《angularjs directive实例详解》](http://blog.51yip.com/jsjquery/1607.html)\n- [《angularjs1.3.0源码解析之directive》](http://www.html-js.com/article/Front-end-source-code-analysis-directive-angularjs130-source-code-analysis-of-the-original)\n\n## 制作头部菜单栏\n-----\n头部菜单栏包括，主菜单，侧边下拉菜单和时钟。如图：\n![image](http://o905ne85q.bkt.clouddn.com/753B.tmp.png)\n\n### 添加index页面\n- 在views文件夹内添加一个index.html\n- 在app.js文件中添加路由\n\n``` javascript\n.when('/index', {\n\ttemplateUrl: 'views/index.html', //index的html页面\n\tcontroller: '' //index的控制器，现在暂时不加\n})\n```\n- 设置login登录后跳转至index页面\n\n``` javascript\nwindow.location.href = 'index.html#/index';\n```\n### 添加头部菜单指令\n- 在scripts文件夹中添加directives文件夹，然后新增headerDir.js文件\n- 创建指令header\n\n``` javascript\napp.directive('appheader', ['$timeout', function($timeout) {\n\treturn {\n\t\trestrict: 'AE', \n\t\ttemplateUrl: './views/directive/header.html',\n\t\tcontroller: function($scope, $element){},\n\t};\n}]);\n```\n- 在index.html页面内引入headerDir.js文件\n\n### 添加头部菜单模板\n- 若模板比较长，为了方便维护可将其放在views中，然后使用templateUrl进行引用\n- 模板架构\n  - 这里使用bootstrap的导航条作为头部\n  - 使用ng-repeat来加载菜单，则可将菜单相关设置放置到scope中，方便维护\n- 这里直接使用template编写模板，具体代码可到项目源码中查看，这里就不放出来了\n\n### 添加控制器\n- 若控制器逻辑比较多，可新增一个controller的js文件来储存逻辑，然后使用require注入或者模板添加ng-controller引用即可\n- 这里直接使用指令的controller来进行逻辑整理\n- 主要逻辑\n  - 设置主菜单和侧边下拉菜单内容\n  - 判断当前路径，并点亮对应菜单（使其active）\n  - 加载和格式化时钟，并定时刷新时间\n\n``` javascript\ncontroller: function($scope, $element, $timeout) {\n\t//$scope.menus用于储存主菜单\n\t$scope.menus = [{\n\t\ttitle: 'index', //title用于储存路由对应的路径\n\t\thref: 'index.html#/index', //href用于设定该菜单跳转路由\n\t\ttext: '首页', //text用于储存该菜单显示名称\n\t}, {\n\t\ttitle: 'others',\n\t\thref: 'index.html#/other',\n\t\ttext: '其他',\n\t}];\n\t//$scope.usermenus用于储存侧边下拉菜单\n\t$scope.usermenus = [{\n\t\thref: 'index.html#/login', //href用于设定该菜单跳转路由\n\t\ttext: '退出', //text用于储存该菜单显示名称\n\t}];\n\t//判断当前路径，点亮对应模块\n\tvar _location = location.hash.split('/')[1];\n\tfor (var i in $scope.menus) {\n\t\t//current用于储存当前菜单是否与当前路径符合，符合则点亮(active)菜单\n\t\tif ($scope.menus[i].title == _location){$scope.menus[i].current = true;}\n\t\telse{$scope.menus[i].current = false;}\n\t}\n\t//用于格式化时间（少于10在前面增加0）\n\tvar numberStandard = function(num) {\n\t\tvar _val = Number(num),\n\t\t\t_num;\n\t\t_num = (_val < 10) ? ('0' + _val) : ('' + _val);\n\t\treturn _num;\n\t};\n\t//用于渲染时钟\n\tvar renderClock = function() {\n\t\tvar _date = new Date();\n\t\t$scope.clock = '';\n\t\t$scope.clock += _date.getFullYear() + '年' + (_date.getMonth() + 1) + '月' +\n\t\t\t_date.getDate() + '日';\n\t\t$scope.clock += ' ' + numberStandard(_date.getHours()) + ':' + numberStandard(_date.getMinutes()) +\n\t\t\t':' + numberStandard(_date.getSeconds());\n\t\t//此处已通过参数注入$timeout服务，若需要注入自定义服务需要require\n\t\t$timeout(function() {\n\t\t\trenderClock();\n\t\t}, 500);\n\t};\n\trenderClock();\n}\n```\n\n### 在index页面中引入头部指令\n``` html\n<header app-header></header>\n```\n\n### 最终效果\n如图：\n![image](http://o905ne85q.bkt.clouddn.com/C902.tmp.png)\n\n## 结束语\n-----\nAngularJS指令的使用过程中可能会出现一些莫名的问题，主要是因为对指令的了解不够深入，大家可以结合使用多去熟悉一下指令过程。\n[此处查看项目代码（仅包含app部分）](https://github.com/godbasin/godbasin.github.io/tree/blog-codes/angular-notes/4-create-header)\n[此处查看页面效果](http://o9grhhyar.bkt.clouddn.com/4-create-header/index.html#/)","slug":"angular-note-4-make-header-directive","published":1,"updated":"2016-07-29T13:24:39.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cirrwvo41001e38l5ssuatx4r","content":"<p>最近的一个项目使用AngularJS(v1.2.6)作为前端的框架，《Angular使用笔记》系列用于记录过程中的一些使用和解决方法。<br>本文记录简单介绍指令，以及制作头部指令的过程。<br><a id=\"more\"></a></p>\n<h2 id=\"有关angularJS指令\"><a href=\"#有关angularJS指令\" class=\"headerlink\" title=\"有关angularJS指令\"></a>有关angularJS指令</h2><hr>\n<h3 id=\"指令要求\"><a href=\"#指令要求\" class=\"headerlink\" title=\"指令要求\"></a>指令要求</h3><ul>\n<li>指令作为一种服务，其定义有几个特殊要求<ul>\n<li>1.必须使用模块的directive方法定义</li>\n<li>2.必须提供factory方法</li>\n<li>3.factory方法返回的对象必须返回一个指令定义的对象</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"指令常用属性\"><a href=\"#指令常用属性\" class=\"headerlink\" title=\"指令常用属性\"></a>指令常用属性</h3><ul>\n<li>restrict</li>\n<li><p>可以是EAMC这四个字母的任意组合，来限定指令的应用场景</p>\n<ul>\n<li>E: 只限元素名使用</li>\n<li>A: 只限属性使用</li>\n<li>C: 只限类名使用</li>\n<li>M: 只限注释使用</li>\n</ul>\n</li>\n<li><p>template/templateUrl</p>\n<ul>\n<li>指定HTML标记替换指令内容（或指令自身）</li>\n<li>可使用templateUrl指定模板位置</li>\n</ul>\n</li>\n<li><p>transclude</p>\n<ul>\n<li>包裹指令的内容，如果transclude属性为true</li>\n<li>模板中使用ng-transclude定位</li>\n</ul>\n</li>\n<li><p>replace</p>\n<ul>\n<li>如果replace=true，那么用HTML片段替换指令本身</li>\n</ul>\n</li>\n<li><p>scope作用域</p>\n<ul>\n<li>如果设置为true <ul>\n<li>将为这个指令创建一个新的作用域</li>\n<li>如果在同一个元素中有多个指令需要新的作用域的话，它还是只会创建一个作用域</li>\n<li>新的作用域规则不适用于根模版（root of the template），因此根模版往往会获得一个新的作用域</li>\n</ul>\n</li>\n<li>如果设置为{}(object hash)<ul>\n<li>将创建一个新的、独立(isolate)的作用域</li>\n<li>@或@attr: 建立一个local scope property到DOM属性的绑定</li>\n<li>=或=expression: 在本地作用域属性与父作用域属性之间设置双向的绑定</li>\n<li>&amp;或&amp;attr: 提供一个在父作用域上下文中执行一个表达式的途径</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>require</p>\n<ul>\n<li>请求另外的controller，传入当前directive的link函数中</li>\n<li>require需要传入一个指令controller的名称</li>\n</ul>\n</li>\n<li><p>link函数</p>\n<ul>\n<li>link函数负责实现DOM和Scope的数据绑定</li>\n<li>通常在link里执行DOM事件监听和数据变化监听</li>\n<li>link函数在template执行后被调用</li>\n</ul>\n</li>\n<li><p>controller函数</p>\n<ul>\n<li>指令可以有controller，因为指令可以创建scope</li>\n<li>controller在所有的同一scope的指令中共享，同时可以作为link函数的第四个参数被访问到</li>\n<li>在同一层级的scope上，这些controller是指令间的一个可用的通信信道，也可能包含指令自身</li>\n</ul>\n</li>\n<li><p>compile函数</p>\n<ul>\n<li>在所有module都装载完毕在之后，compile(element)(scope)</li>\n<li>这句开始编译和链接整个dom树（其实就是调用dom上出现的指令）</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"解析指令编译过程\"><a href=\"#解析指令编译过程\" class=\"headerlink\" title=\"解析指令编译过程\"></a>解析指令编译过程</h3><p>首先，controller会在prelink步骤之前进行初始化，并允许其他directive通过指定名称的require进行共享<br>接下来，angular在解析指令的时候，其实会先按一定的顺序执行所有指令的compile函数，然后执行所有指令的preLink函数（如果存在的话），最后执行所有指令的postLink函数</p>\n<ul>\n<li><p>compile过程如下：</p>\n<ul>\n<li>1.传递应用根节点给$compile函数，开始编译，返回link函数</li>\n<li>2.传递根作用域给link函数，开始链接（每个指令分为pre link 和 post link两个过程）</li>\n</ul>\n</li>\n<li><p>关于link和compile<br>由于在compile函数最后返回link函数，故有compile函数时指令设置link函数无效，将自动使用compile返回的link函数</p>\n</li>\n<li><p>关于link和controller<br>控制器可以暴露一个API，而link可以通过require与其他的指令控制器交互。所以如果要开放出一个API给其他指令用就写在controller中，否则写在link中</p>\n</li>\n</ul>\n<h3 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h3><ul>\n<li><a href=\"http://blog.51yip.com/jsjquery/1607.html\" target=\"_blank\" rel=\"external\">《angularjs directive实例详解》</a></li>\n<li><a href=\"http://www.html-js.com/article/Front-end-source-code-analysis-directive-angularjs130-source-code-analysis-of-the-original\" target=\"_blank\" rel=\"external\">《angularjs1.3.0源码解析之directive》</a></li>\n</ul>\n<h2 id=\"制作头部菜单栏\"><a href=\"#制作头部菜单栏\" class=\"headerlink\" title=\"制作头部菜单栏\"></a>制作头部菜单栏</h2><hr>\n<p>头部菜单栏包括，主菜单，侧边下拉菜单和时钟。如图：<br><img src=\"http://o905ne85q.bkt.clouddn.com/753B.tmp.png\" alt=\"image\"></p>\n<h3 id=\"添加index页面\"><a href=\"#添加index页面\" class=\"headerlink\" title=\"添加index页面\"></a>添加index页面</h3><ul>\n<li>在views文件夹内添加一个index.html</li>\n<li>在app.js文件中添加路由</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.when(<span class=\"string\">'/index'</span>, &#123;</span><br><span class=\"line\">  templateUrl: <span class=\"string\">'views/index.html'</span>, <span class=\"comment\">//index的html页面</span></span><br><span class=\"line\">  controller: <span class=\"string\">''</span> <span class=\"comment\">//index的控制器，现在暂时不加</span></span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<ul>\n<li>设置login登录后跳转至index页面</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">window</span>.location.href = <span class=\"string\">'index.html#/index'</span>;</span><br></pre></td></tr></table></figure>\n<h3 id=\"添加头部菜单指令\"><a href=\"#添加头部菜单指令\" class=\"headerlink\" title=\"添加头部菜单指令\"></a>添加头部菜单指令</h3><ul>\n<li>在scripts文件夹中添加directives文件夹，然后新增headerDir.js文件</li>\n<li>创建指令header</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">app.directive(<span class=\"string\">'appheader'</span>, [<span class=\"string\">'$timeout'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">$timeout</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">    restrict: <span class=\"string\">'AE'</span>, </span><br><span class=\"line\">    templateUrl: <span class=\"string\">'./views/directive/header.html'</span>,</span><br><span class=\"line\">    controller: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">$scope, $element</span>)</span>&#123;&#125;,</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">&#125;]);</span><br></pre></td></tr></table></figure>\n<ul>\n<li>在index.html页面内引入headerDir.js文件</li>\n</ul>\n<h3 id=\"添加头部菜单模板\"><a href=\"#添加头部菜单模板\" class=\"headerlink\" title=\"添加头部菜单模板\"></a>添加头部菜单模板</h3><ul>\n<li>若模板比较长，为了方便维护可将其放在views中，然后使用templateUrl进行引用</li>\n<li>模板架构<ul>\n<li>这里使用bootstrap的导航条作为头部</li>\n<li>使用ng-repeat来加载菜单，则可将菜单相关设置放置到scope中，方便维护</li>\n</ul>\n</li>\n<li>这里直接使用template编写模板，具体代码可到项目源码中查看，这里就不放出来了</li>\n</ul>\n<h3 id=\"添加控制器\"><a href=\"#添加控制器\" class=\"headerlink\" title=\"添加控制器\"></a>添加控制器</h3><ul>\n<li>若控制器逻辑比较多，可新增一个controller的js文件来储存逻辑，然后使用require注入或者模板添加ng-controller引用即可</li>\n<li>这里直接使用指令的controller来进行逻辑整理</li>\n<li>主要逻辑<ul>\n<li>设置主菜单和侧边下拉菜单内容</li>\n<li>判断当前路径，并点亮对应菜单（使其active）</li>\n<li>加载和格式化时钟，并定时刷新时间</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">controller: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">$scope, $element, $timeout</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">//$scope.menus用于储存主菜单</span></span><br><span class=\"line\">  $scope.menus = [&#123;</span><br><span class=\"line\">    title: <span class=\"string\">'index'</span>, <span class=\"comment\">//title用于储存路由对应的路径</span></span><br><span class=\"line\">    href: <span class=\"string\">'index.html#/index'</span>, <span class=\"comment\">//href用于设定该菜单跳转路由</span></span><br><span class=\"line\">    text: <span class=\"string\">'首页'</span>, <span class=\"comment\">//text用于储存该菜单显示名称</span></span><br><span class=\"line\">  &#125;, &#123;</span><br><span class=\"line\">    title: <span class=\"string\">'others'</span>,</span><br><span class=\"line\">    href: <span class=\"string\">'index.html#/other'</span>,</span><br><span class=\"line\">    text: <span class=\"string\">'其他'</span>,</span><br><span class=\"line\">  &#125;];</span><br><span class=\"line\">  <span class=\"comment\">//$scope.usermenus用于储存侧边下拉菜单</span></span><br><span class=\"line\">  $scope.usermenus = [&#123;</span><br><span class=\"line\">    href: <span class=\"string\">'index.html#/login'</span>, <span class=\"comment\">//href用于设定该菜单跳转路由</span></span><br><span class=\"line\">    text: <span class=\"string\">'退出'</span>, <span class=\"comment\">//text用于储存该菜单显示名称</span></span><br><span class=\"line\">  &#125;];</span><br><span class=\"line\">  <span class=\"comment\">//判断当前路径，点亮对应模块</span></span><br><span class=\"line\">  <span class=\"keyword\">var</span> _location = location.hash.split(<span class=\"string\">'/'</span>)[<span class=\"number\">1</span>];</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i <span class=\"keyword\">in</span> $scope.menus) &#123;</span><br><span class=\"line\">    <span class=\"comment\">//current用于储存当前菜单是否与当前路径符合，符合则点亮(active)菜单</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> ($scope.menus[i].title == _location)&#123;$scope.menus[i].current = <span class=\"literal\">true</span>;&#125;</span><br><span class=\"line\">    <span class=\"keyword\">else</span>&#123;$scope.menus[i].current = <span class=\"literal\">false</span>;&#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">//用于格式化时间（少于10在前面增加0）</span></span><br><span class=\"line\">  <span class=\"keyword\">var</span> numberStandard = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">num</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> _val = <span class=\"built_in\">Number</span>(num),</span><br><span class=\"line\">      _num;</span><br><span class=\"line\">    _num = (_val &lt; <span class=\"number\">10</span>) ? (<span class=\"string\">'0'</span> + _val) : (<span class=\"string\">''</span> + _val);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> _num;</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">  <span class=\"comment\">//用于渲染时钟</span></span><br><span class=\"line\">  <span class=\"keyword\">var</span> renderClock = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> _date = <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>();</span><br><span class=\"line\">    $scope.clock = <span class=\"string\">''</span>;</span><br><span class=\"line\">    $scope.clock += _date.getFullYear() + <span class=\"string\">'年'</span> + (_date.getMonth() + <span class=\"number\">1</span>) + <span class=\"string\">'月'</span> +</span><br><span class=\"line\">      _date.getDate() + <span class=\"string\">'日'</span>;</span><br><span class=\"line\">    $scope.clock += <span class=\"string\">' '</span> + numberStandard(_date.getHours()) + <span class=\"string\">':'</span> + numberStandard(_date.getMinutes()) +</span><br><span class=\"line\">      <span class=\"string\">':'</span> + numberStandard(_date.getSeconds());</span><br><span class=\"line\">    <span class=\"comment\">//此处已通过参数注入$timeout服务，若需要注入自定义服务需要require</span></span><br><span class=\"line\">    $timeout(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">      renderClock();</span><br><span class=\"line\">    &#125;, <span class=\"number\">500</span>);</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">  renderClock();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"在index页面中引入头部指令\"><a href=\"#在index页面中引入头部指令\" class=\"headerlink\" title=\"在index页面中引入头部指令\"></a>在index页面中引入头部指令</h3><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">header</span> <span class=\"attr\">app-header</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">header</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"最终效果\"><a href=\"#最终效果\" class=\"headerlink\" title=\"最终效果\"></a>最终效果</h3><p>如图：<br><img src=\"http://o905ne85q.bkt.clouddn.com/C902.tmp.png\" alt=\"image\"></p>\n<h2 id=\"结束语\"><a href=\"#结束语\" class=\"headerlink\" title=\"结束语\"></a>结束语</h2><hr>\n<p>AngularJS指令的使用过程中可能会出现一些莫名的问题，主要是因为对指令的了解不够深入，大家可以结合使用多去熟悉一下指令过程。<br><a href=\"https://github.com/godbasin/godbasin.github.io/tree/blog-codes/angular-notes/4-create-header\" target=\"_blank\" rel=\"external\">此处查看项目代码（仅包含app部分）</a><br><a href=\"http://o9grhhyar.bkt.clouddn.com/4-create-header/index.html#/\" target=\"_blank\" rel=\"external\">此处查看页面效果</a></p>\n","excerpt":"<p>最近的一个项目使用AngularJS(v1.2.6)作为前端的框架，《Angular使用笔记》系列用于记录过程中的一些使用和解决方法。<br>本文记录简单介绍指令，以及制作头部指令的过程。<br>","more":"</p>\n<h2 id=\"有关angularJS指令\"><a href=\"#有关angularJS指令\" class=\"headerlink\" title=\"有关angularJS指令\"></a>有关angularJS指令</h2><hr>\n<h3 id=\"指令要求\"><a href=\"#指令要求\" class=\"headerlink\" title=\"指令要求\"></a>指令要求</h3><ul>\n<li>指令作为一种服务，其定义有几个特殊要求<ul>\n<li>1.必须使用模块的directive方法定义</li>\n<li>2.必须提供factory方法</li>\n<li>3.factory方法返回的对象必须返回一个指令定义的对象</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"指令常用属性\"><a href=\"#指令常用属性\" class=\"headerlink\" title=\"指令常用属性\"></a>指令常用属性</h3><ul>\n<li>restrict</li>\n<li><p>可以是EAMC这四个字母的任意组合，来限定指令的应用场景</p>\n<ul>\n<li>E: 只限元素名使用</li>\n<li>A: 只限属性使用</li>\n<li>C: 只限类名使用</li>\n<li>M: 只限注释使用</li>\n</ul>\n</li>\n<li><p>template/templateUrl</p>\n<ul>\n<li>指定HTML标记替换指令内容（或指令自身）</li>\n<li>可使用templateUrl指定模板位置</li>\n</ul>\n</li>\n<li><p>transclude</p>\n<ul>\n<li>包裹指令的内容，如果transclude属性为true</li>\n<li>模板中使用ng-transclude定位</li>\n</ul>\n</li>\n<li><p>replace</p>\n<ul>\n<li>如果replace=true，那么用HTML片段替换指令本身</li>\n</ul>\n</li>\n<li><p>scope作用域</p>\n<ul>\n<li>如果设置为true <ul>\n<li>将为这个指令创建一个新的作用域</li>\n<li>如果在同一个元素中有多个指令需要新的作用域的话，它还是只会创建一个作用域</li>\n<li>新的作用域规则不适用于根模版（root of the template），因此根模版往往会获得一个新的作用域</li>\n</ul>\n</li>\n<li>如果设置为{}(object hash)<ul>\n<li>将创建一个新的、独立(isolate)的作用域</li>\n<li>@或@attr: 建立一个local scope property到DOM属性的绑定</li>\n<li>=或=expression: 在本地作用域属性与父作用域属性之间设置双向的绑定</li>\n<li>&amp;或&amp;attr: 提供一个在父作用域上下文中执行一个表达式的途径</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>require</p>\n<ul>\n<li>请求另外的controller，传入当前directive的link函数中</li>\n<li>require需要传入一个指令controller的名称</li>\n</ul>\n</li>\n<li><p>link函数</p>\n<ul>\n<li>link函数负责实现DOM和Scope的数据绑定</li>\n<li>通常在link里执行DOM事件监听和数据变化监听</li>\n<li>link函数在template执行后被调用</li>\n</ul>\n</li>\n<li><p>controller函数</p>\n<ul>\n<li>指令可以有controller，因为指令可以创建scope</li>\n<li>controller在所有的同一scope的指令中共享，同时可以作为link函数的第四个参数被访问到</li>\n<li>在同一层级的scope上，这些controller是指令间的一个可用的通信信道，也可能包含指令自身</li>\n</ul>\n</li>\n<li><p>compile函数</p>\n<ul>\n<li>在所有module都装载完毕在之后，compile(element)(scope)</li>\n<li>这句开始编译和链接整个dom树（其实就是调用dom上出现的指令）</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"解析指令编译过程\"><a href=\"#解析指令编译过程\" class=\"headerlink\" title=\"解析指令编译过程\"></a>解析指令编译过程</h3><p>首先，controller会在prelink步骤之前进行初始化，并允许其他directive通过指定名称的require进行共享<br>接下来，angular在解析指令的时候，其实会先按一定的顺序执行所有指令的compile函数，然后执行所有指令的preLink函数（如果存在的话），最后执行所有指令的postLink函数</p>\n<ul>\n<li><p>compile过程如下：</p>\n<ul>\n<li>1.传递应用根节点给$compile函数，开始编译，返回link函数</li>\n<li>2.传递根作用域给link函数，开始链接（每个指令分为pre link 和 post link两个过程）</li>\n</ul>\n</li>\n<li><p>关于link和compile<br>由于在compile函数最后返回link函数，故有compile函数时指令设置link函数无效，将自动使用compile返回的link函数</p>\n</li>\n<li><p>关于link和controller<br>控制器可以暴露一个API，而link可以通过require与其他的指令控制器交互。所以如果要开放出一个API给其他指令用就写在controller中，否则写在link中</p>\n</li>\n</ul>\n<h3 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h3><ul>\n<li><a href=\"http://blog.51yip.com/jsjquery/1607.html\">《angularjs directive实例详解》</a></li>\n<li><a href=\"http://www.html-js.com/article/Front-end-source-code-analysis-directive-angularjs130-source-code-analysis-of-the-original\">《angularjs1.3.0源码解析之directive》</a></li>\n</ul>\n<h2 id=\"制作头部菜单栏\"><a href=\"#制作头部菜单栏\" class=\"headerlink\" title=\"制作头部菜单栏\"></a>制作头部菜单栏</h2><hr>\n<p>头部菜单栏包括，主菜单，侧边下拉菜单和时钟。如图：<br><img src=\"http://o905ne85q.bkt.clouddn.com/753B.tmp.png\" alt=\"image\"></p>\n<h3 id=\"添加index页面\"><a href=\"#添加index页面\" class=\"headerlink\" title=\"添加index页面\"></a>添加index页面</h3><ul>\n<li>在views文件夹内添加一个index.html</li>\n<li>在app.js文件中添加路由</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.when(<span class=\"string\">'/index'</span>, &#123;</span><br><span class=\"line\">  templateUrl: <span class=\"string\">'views/index.html'</span>, <span class=\"comment\">//index的html页面</span></span><br><span class=\"line\">  controller: <span class=\"string\">''</span> <span class=\"comment\">//index的控制器，现在暂时不加</span></span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<ul>\n<li>设置login登录后跳转至index页面</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">window</span>.location.href = <span class=\"string\">'index.html#/index'</span>;</span><br></pre></td></tr></table></figure>\n<h3 id=\"添加头部菜单指令\"><a href=\"#添加头部菜单指令\" class=\"headerlink\" title=\"添加头部菜单指令\"></a>添加头部菜单指令</h3><ul>\n<li>在scripts文件夹中添加directives文件夹，然后新增headerDir.js文件</li>\n<li>创建指令header</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">app.directive(<span class=\"string\">'appheader'</span>, [<span class=\"string\">'$timeout'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">$timeout</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">    restrict: <span class=\"string\">'AE'</span>, </span><br><span class=\"line\">    templateUrl: <span class=\"string\">'./views/directive/header.html'</span>,</span><br><span class=\"line\">    controller: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">$scope, $element</span>)</span>&#123;&#125;,</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">&#125;]);</span><br></pre></td></tr></table></figure>\n<ul>\n<li>在index.html页面内引入headerDir.js文件</li>\n</ul>\n<h3 id=\"添加头部菜单模板\"><a href=\"#添加头部菜单模板\" class=\"headerlink\" title=\"添加头部菜单模板\"></a>添加头部菜单模板</h3><ul>\n<li>若模板比较长，为了方便维护可将其放在views中，然后使用templateUrl进行引用</li>\n<li>模板架构<ul>\n<li>这里使用bootstrap的导航条作为头部</li>\n<li>使用ng-repeat来加载菜单，则可将菜单相关设置放置到scope中，方便维护</li>\n</ul>\n</li>\n<li>这里直接使用template编写模板，具体代码可到项目源码中查看，这里就不放出来了</li>\n</ul>\n<h3 id=\"添加控制器\"><a href=\"#添加控制器\" class=\"headerlink\" title=\"添加控制器\"></a>添加控制器</h3><ul>\n<li>若控制器逻辑比较多，可新增一个controller的js文件来储存逻辑，然后使用require注入或者模板添加ng-controller引用即可</li>\n<li>这里直接使用指令的controller来进行逻辑整理</li>\n<li>主要逻辑<ul>\n<li>设置主菜单和侧边下拉菜单内容</li>\n<li>判断当前路径，并点亮对应菜单（使其active）</li>\n<li>加载和格式化时钟，并定时刷新时间</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">controller: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">$scope, $element, $timeout</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">//$scope.menus用于储存主菜单</span></span><br><span class=\"line\">  $scope.menus = [&#123;</span><br><span class=\"line\">    title: <span class=\"string\">'index'</span>, <span class=\"comment\">//title用于储存路由对应的路径</span></span><br><span class=\"line\">    href: <span class=\"string\">'index.html#/index'</span>, <span class=\"comment\">//href用于设定该菜单跳转路由</span></span><br><span class=\"line\">    text: <span class=\"string\">'首页'</span>, <span class=\"comment\">//text用于储存该菜单显示名称</span></span><br><span class=\"line\">  &#125;, &#123;</span><br><span class=\"line\">    title: <span class=\"string\">'others'</span>,</span><br><span class=\"line\">    href: <span class=\"string\">'index.html#/other'</span>,</span><br><span class=\"line\">    text: <span class=\"string\">'其他'</span>,</span><br><span class=\"line\">  &#125;];</span><br><span class=\"line\">  <span class=\"comment\">//$scope.usermenus用于储存侧边下拉菜单</span></span><br><span class=\"line\">  $scope.usermenus = [&#123;</span><br><span class=\"line\">    href: <span class=\"string\">'index.html#/login'</span>, <span class=\"comment\">//href用于设定该菜单跳转路由</span></span><br><span class=\"line\">    text: <span class=\"string\">'退出'</span>, <span class=\"comment\">//text用于储存该菜单显示名称</span></span><br><span class=\"line\">  &#125;];</span><br><span class=\"line\">  <span class=\"comment\">//判断当前路径，点亮对应模块</span></span><br><span class=\"line\">  <span class=\"keyword\">var</span> _location = location.hash.split(<span class=\"string\">'/'</span>)[<span class=\"number\">1</span>];</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i <span class=\"keyword\">in</span> $scope.menus) &#123;</span><br><span class=\"line\">    <span class=\"comment\">//current用于储存当前菜单是否与当前路径符合，符合则点亮(active)菜单</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> ($scope.menus[i].title == _location)&#123;$scope.menus[i].current = <span class=\"literal\">true</span>;&#125;</span><br><span class=\"line\">    <span class=\"keyword\">else</span>&#123;$scope.menus[i].current = <span class=\"literal\">false</span>;&#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">//用于格式化时间（少于10在前面增加0）</span></span><br><span class=\"line\">  <span class=\"keyword\">var</span> numberStandard = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">num</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> _val = <span class=\"built_in\">Number</span>(num),</span><br><span class=\"line\">      _num;</span><br><span class=\"line\">    _num = (_val &lt; <span class=\"number\">10</span>) ? (<span class=\"string\">'0'</span> + _val) : (<span class=\"string\">''</span> + _val);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> _num;</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">  <span class=\"comment\">//用于渲染时钟</span></span><br><span class=\"line\">  <span class=\"keyword\">var</span> renderClock = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> _date = <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>();</span><br><span class=\"line\">    $scope.clock = <span class=\"string\">''</span>;</span><br><span class=\"line\">    $scope.clock += _date.getFullYear() + <span class=\"string\">'年'</span> + (_date.getMonth() + <span class=\"number\">1</span>) + <span class=\"string\">'月'</span> +</span><br><span class=\"line\">      _date.getDate() + <span class=\"string\">'日'</span>;</span><br><span class=\"line\">    $scope.clock += <span class=\"string\">' '</span> + numberStandard(_date.getHours()) + <span class=\"string\">':'</span> + numberStandard(_date.getMinutes()) +</span><br><span class=\"line\">      <span class=\"string\">':'</span> + numberStandard(_date.getSeconds());</span><br><span class=\"line\">    <span class=\"comment\">//此处已通过参数注入$timeout服务，若需要注入自定义服务需要require</span></span><br><span class=\"line\">    $timeout(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">      renderClock();</span><br><span class=\"line\">    &#125;, <span class=\"number\">500</span>);</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">  renderClock();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"在index页面中引入头部指令\"><a href=\"#在index页面中引入头部指令\" class=\"headerlink\" title=\"在index页面中引入头部指令\"></a>在index页面中引入头部指令</h3><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">header</span> <span class=\"attr\">app-header</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">header</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"最终效果\"><a href=\"#最终效果\" class=\"headerlink\" title=\"最终效果\"></a>最终效果</h3><p>如图：<br><img src=\"http://o905ne85q.bkt.clouddn.com/C902.tmp.png\" alt=\"image\"></p>\n<h2 id=\"结束语\"><a href=\"#结束语\" class=\"headerlink\" title=\"结束语\"></a>结束语</h2><hr>\n<p>AngularJS指令的使用过程中可能会出现一些莫名的问题，主要是因为对指令的了解不够深入，大家可以结合使用多去熟悉一下指令过程。<br><a href=\"https://github.com/godbasin/godbasin.github.io/tree/blog-codes/angular-notes/4-create-header\">此处查看项目代码（仅包含app部分）</a><br><a href=\"http://o9grhhyar.bkt.clouddn.com/4-create-header/index.html#/\">此处查看页面效果</a></p>"},{"title":"谈谈js的this","date":"2016-07-02T07:32:32.000Z","_content":"有个同事一直问我代码里面为啥要return this。今天就简单聊聊关于javascript中的this吧。\n<!--more-->\n\n首先，在js里面，this指针代表的是执行当前代码的对象的所有者。\n\n## js对象\n-----\n### 一切皆对象\n一切皆对象相信大家都很熟悉了吧。与其他面向对象语言不同的是，JS并没有Class的概念，在其他语言中，我们基本都需要实例化某个具体类的实例，但JS里却不同，它的做法是：任何函数都可以被实例化为一个对象。\nJavaScript中的所有事物都是对象：字符串、数值、数组、函数...此外，JavaScript允许自定义对象。\n\n### javascript对象\nJavaScript提供多个内建对象，比如 String、Date、Array等等。\n对象只是带有属性和方法的特殊数据类型。\n- 访问对象的属性\n属性是与对象相关的值。访问对象属性的语法是：\n``` javascript\nobjectName.propertyName\n```\n- 访问对象的方法\n方法是能够在对象上执行的动作。可以通过以下语法来调用方法：\n``` javascript\nobjectName.methodName()\n```\n\n### 判断对象类型\n- typeof运算符\n  - typeof的返回值，主要有五种： undefined, boolean, number, string, object。\n  - 对于typeof的返回值，容易混淆object和null，因为null在js中指的是一个空对象。\n  - 使用typeof的一个不好的地方就是它会把Array还有用户自定义函数都返回为object。\n- instanceof运算符\n  - instanceof也是一个运算符，运算过程中也需要一个参数(Object, Boolean, Number, String, Function)，判断某一个对象是否是所给的构造函数的一个实例，返回值是true或者false。\n- object.constructor\n  - constructor属性返回对创建此对象的数组函数的引用。\n\n### 创建对象的方法\n- 使用内置对象\n  - JavaScript语言原生对象（语言级对象），如String、Object、Function等； \n  - JavaScript运行期的宿主对象（环境宿主级对象），如window、document、body等。 \n- 使用JSON符号 \n``` javascript\n{name:\"name\", key:\"value\"} \n```\n- 自定义对象构造 \n方法很多，工厂方法、构造函数方法、原型方法、混合的构造函数/原型方法等。《javascript高级程序设计》里面讲得很详细，又或者大家可以上网自行谷哥。\n  - 使用this关键字构造\n  - 使用原型prototype构造\n\n### 参考\n[《JavaScript 对象》](http://www.w3school.com.cn/js/js_objects.asp)\n\n## js执行环境\n-----\n执行环境定义了变量和函数有权访问的其他数据，决定了他们各自的行为。\n\n### 全局执行环境\n- 在一个页面中，第一次载入JS代码时创建一个全局执行环境，全局执行环境是最外围的执行环境\n- 在Web浏览器中，全局执行环境被认为是window对象\n  - 因此，所有的全局变量和函数都是作为window对象的属性和方法创建的。\n  - 全局执行环境直到应用程序退出后---例如关闭浏览器和网页---时才被销毁。\n\n### 函数执行环境\n- ECMAScript程序中的执行流\n  - 每个函数都有自己的执行环境，当执行进入一个函数时，函数的执行环境就会被推入一个执行环境栈的顶部并获取执行权。\n  - 当这个函数执行完毕，它的执行环境又从这个栈的顶部被删除，并把执行权并还给之前执行环境。\n  - 该执行环境中的所有代码执行完毕后，该环境被销毁，保存在其中的所有变量和函数定义也随之销毁。\n- 定义期\n  - 全局函数A创建了一个A的[[scope]]属性，包含全局[[scope]]\n  - 函数A里定义函数B，则B的[[scope]]包含全局[[scope]]和A的[[scope]]\n- 执行期\n当函数被执行的时候，就是进入这个函数的执行环境，首先会创一个它自己的活动对象，包含\n  - this\n  - 参数(arguments，全局对象没有arguments)\n  - 局部变量(包括命名的参数)\n  - 一个变量对象的作用域链[[scope chain]]\n\n### 作用域 \n- 没有块级作用域\n- 延长作用域链\n  - try-catch语句的catch块\n  - with语句\n\n### 参考\n[《javascript高级程序第三版学习笔记【执行环境、作用域】》](http://www.cnblogs.com/pigtail/archive/2012/07/19/2570988.html)\n\n## js的this\n-----\n讲了那么多，终于来到本节的重点了。不过前面讲的也跟接下来的有关系的哦。\n\n### this指向什么\nthis指针代表的是执行当前代码的对象的所有者。即有以下两种：\n- this指向全局变量\n- this指向某个对象\n\n### this与全局变量\n我们来看以下代码（例1）：\n``` javascript\nvar x;\nfunction example(x) { \n this.x = x; \n} \nexample(5); \nalert(x); //5\n```\n在这里，x和函数example均是全局变量，因此它们的全局执行环境是window对象。所以在example中的this也是指向全局的window对象。\n\n### this与某个对象\n来看下面的代码（例2）\n``` javascript\nvar x;\nvar example = {\n\tfun: function(x){\n\t\tthis.x = x;\n\t\talert(this.x); //5\n\t}\n};\nexample.fun(5); \nalert(x); //undefined\nalert(this.x); //undefined\n```\n在这里，我们定义了一个example对象，同时给该对象添加了x属性和fun方法，因此在调用fun方法时其执行环境为example的fun函数，而this指向该函数的所有者为example对象。\n故最后全局变量x并没有改变，仍然是undefined。\n\n当然上面我们也提到过，js对象的创建办法有几种，刚才的是通过json创建，我们还可以使用其它自定义对象构造方法。\n（例3）：\n``` javascript\n//构造函数，就是通过这个函数生成一个新对象（object），this就指这个新对象\nfunction obj(){\n\tthis.x = 5;\n\talert(this.x); //5\n}\nvar example = new obj();\nalert(example.x); //5\nalert(this.x); //undefined\n```\n\n现在我们再看看下面的代码（例4）：\n``` javascript\nvar x;\nvar example = {\n\tfun: function(x){\n\t\tvar fun2 = function(x){\n\t\t\tthis.x = x;\n\t\t\talert(this.x); //5\n\t\t};\n\t\tfun2(x);\n\t\talert(this.x); //undefined\n\t}\n};\nexample.fun(5); \nalert(example.x); //undefined\nalert(this.x); //5\n```\n当我们在对象的方法内定义新的函数，这时候该函数内的this绑定到全局window对象。是不是有点不可思议？\n这也是我们在写代码过程中容易遇到的一些问题，这里补充一下函数的调用方法一起说明吧。\n\n### JavaScript中函数的调用方式\n- 作为对象方法调用\n  - 在JavaScript中，函数也是对象，因此函数可以作为一个对象的属性。\n  - 此时该函数被称为该对象的方法，在使用这种调用方式时，this被自然绑定到该对象。\n- 作为函数调用\n这是我们刚才遇到的现象（例4），也即函数作为函数调用。\n  - 函数也可以直接被调用，此时this绑定到全局对象。\n  - 在浏览器中，window就是该全局对象。\n我们可以使用下面变量替代的方法规避这一缺陷：\n``` javascript\nvar x;\nvar example = {\n\tfun: function(x){\n\t\tvar that = this;\n\t\tvar fun2 = function(x){\n\t\t\tthat.x = x;\n\t\t\talert(this.x); //undefined\n\t\t\talert(that.x); //5\n\t\t};\n\t\tfun2(x);\n\t\talert(this.x); //5\n\t}\n};\nexample.fun(5); \nalert(example.x); //5\nalert(this.x); //undefined\n```\n同时，像setTimeout和setInterval这样的异步回调函数，经常也会遇到执行环境变更的问题，此时我们也可以使用该方法进行规避。\n- 作为构造函数调用（例3）\n  - JavaScript并没有类（class）的概念，而是使用基于原型（prototype）的继承方式。\n  - JavaScript中的构造函数也很特殊，如果不使用new调用，则和普通函数一样。（例1）\n- 使用apply或call调用\n  - 在JavaScript中函数也是对象，对象则有方法，apply和call就是函数对象的方法。\n  - 这两个方法异常强大，他们允许切换函数执行的上下文环境（context），即this绑定的对象。\n现在我们定义一个obj对象，并使它的一个方法等于全局函数：\n``` javascript\nfunction example(){\n\tthis.x = 5;\n\talert(this.x); //5\n}\nvar obj = {};\nobj.x = 1;\nobj.fun = example;\nalert(obj.x); //1\nalert(this.x); //undefined\n```\n1.此时我们直接调用该方法，会修改该对象的属性值。\n``` javascript\nobj.fun();\nalert(obj.x); //5\nalert(this.x); //undefined\n```\n2.如果我们在该方法上进行apply，则会出现以下结果。说明apply()的参数为空时，默认调用全局对象。\n``` javascript\nobj.fun.apply();\nalert(obj.x); //1\nalert(this.x); //5\n```\n3.我们给apply添加该对象作为参数。apply()的作用是改变函数的调用对象，它的第一个参数就表示改变后的调用这个函数的对象。。\n``` javascript\nobj.fun.apply(obj);\nalert(obj.x); //5\nalert(this.x); //undefined\n```\n\n另外，call方法可以用来代替另一个对象调用一个方法。call方法可将一个函数的对象上下文从初始的上下文改变为由thisObj指定的新对象。\n- apply和call两者在作用上是相同的，但两者在参数上有区别的：\n  - 对于第一个参数意义都一样\n  - 对第二个参数：apply传入的是一个参数数组，也就是将多个参数组合成为一个数组传入，而call则作为call的参数传入（从第二个参数开始\n\n### return this链式调用\n最后我们回到最开始的问题，为什么要在代码中使用return this呢？\n其实这是个链式调用的小技巧，我们只需要在对象的方法最后return this，就可以返回该对象，继续调用该对象的其它方法。看以下代码：\n``` javascript\nvar x;\nvar example = {\n\tfun1: function(x){\n\t\tthis.x = x;\n\t\talert(\"fun1: \" + this.x);\n\t\treturn this;\n\t},\n\tfun2: function(){\n\t\tthis.x += 1;\n\t\talert(\"fun2: \" + this.x);\n\t\treturn this;\n\t}\n};\nexample.fun1(5).fun2().fun1(2).fun2(); //链式调用对象的方法\n//fun1: 5\n//fun2: 6\n//fun1: 2\n//fun2: 3\nalert(example.x); //3\nalert(this.x); //undefined\n```\n链式调用是个挺有趣的东西，本骚年当初也是在研究jQuery的源码的时候看到的呢。\n\n### 参考\n[《深入浅出JavaScript中的this》](http://www.ibm.com/developerworks/cn/web/1207_wangqf_jsthis/)\n[《Javascript的this用法》](http://www.ruanyifeng.com/blog/2010/04/using_this_keyword_in_javascript.html)\n\n## 结束语\n-----\n有些人觉得jQuery已经过时了，现在都流行像AngularJS/ReactJS/Backbone.js这些框架。\n其实jQuery只是个库，它帮我们解决了很多兼容问题，也简化了js代码，跟框架不一样。而且本骚年认为jQuery库还是有很多精华的逻辑和思维呢，这些是永远都不会过时的呀。","source":"_posts/js-this.md","raw":"---\ntitle: 谈谈js的this\ndate: 2016-07-02 15:32:32\ncategories: js什锦\ntags: 笔记\n---\n有个同事一直问我代码里面为啥要return this。今天就简单聊聊关于javascript中的this吧。\n<!--more-->\n\n首先，在js里面，this指针代表的是执行当前代码的对象的所有者。\n\n## js对象\n-----\n### 一切皆对象\n一切皆对象相信大家都很熟悉了吧。与其他面向对象语言不同的是，JS并没有Class的概念，在其他语言中，我们基本都需要实例化某个具体类的实例，但JS里却不同，它的做法是：任何函数都可以被实例化为一个对象。\nJavaScript中的所有事物都是对象：字符串、数值、数组、函数...此外，JavaScript允许自定义对象。\n\n### javascript对象\nJavaScript提供多个内建对象，比如 String、Date、Array等等。\n对象只是带有属性和方法的特殊数据类型。\n- 访问对象的属性\n属性是与对象相关的值。访问对象属性的语法是：\n``` javascript\nobjectName.propertyName\n```\n- 访问对象的方法\n方法是能够在对象上执行的动作。可以通过以下语法来调用方法：\n``` javascript\nobjectName.methodName()\n```\n\n### 判断对象类型\n- typeof运算符\n  - typeof的返回值，主要有五种： undefined, boolean, number, string, object。\n  - 对于typeof的返回值，容易混淆object和null，因为null在js中指的是一个空对象。\n  - 使用typeof的一个不好的地方就是它会把Array还有用户自定义函数都返回为object。\n- instanceof运算符\n  - instanceof也是一个运算符，运算过程中也需要一个参数(Object, Boolean, Number, String, Function)，判断某一个对象是否是所给的构造函数的一个实例，返回值是true或者false。\n- object.constructor\n  - constructor属性返回对创建此对象的数组函数的引用。\n\n### 创建对象的方法\n- 使用内置对象\n  - JavaScript语言原生对象（语言级对象），如String、Object、Function等； \n  - JavaScript运行期的宿主对象（环境宿主级对象），如window、document、body等。 \n- 使用JSON符号 \n``` javascript\n{name:\"name\", key:\"value\"} \n```\n- 自定义对象构造 \n方法很多，工厂方法、构造函数方法、原型方法、混合的构造函数/原型方法等。《javascript高级程序设计》里面讲得很详细，又或者大家可以上网自行谷哥。\n  - 使用this关键字构造\n  - 使用原型prototype构造\n\n### 参考\n[《JavaScript 对象》](http://www.w3school.com.cn/js/js_objects.asp)\n\n## js执行环境\n-----\n执行环境定义了变量和函数有权访问的其他数据，决定了他们各自的行为。\n\n### 全局执行环境\n- 在一个页面中，第一次载入JS代码时创建一个全局执行环境，全局执行环境是最外围的执行环境\n- 在Web浏览器中，全局执行环境被认为是window对象\n  - 因此，所有的全局变量和函数都是作为window对象的属性和方法创建的。\n  - 全局执行环境直到应用程序退出后---例如关闭浏览器和网页---时才被销毁。\n\n### 函数执行环境\n- ECMAScript程序中的执行流\n  - 每个函数都有自己的执行环境，当执行进入一个函数时，函数的执行环境就会被推入一个执行环境栈的顶部并获取执行权。\n  - 当这个函数执行完毕，它的执行环境又从这个栈的顶部被删除，并把执行权并还给之前执行环境。\n  - 该执行环境中的所有代码执行完毕后，该环境被销毁，保存在其中的所有变量和函数定义也随之销毁。\n- 定义期\n  - 全局函数A创建了一个A的[[scope]]属性，包含全局[[scope]]\n  - 函数A里定义函数B，则B的[[scope]]包含全局[[scope]]和A的[[scope]]\n- 执行期\n当函数被执行的时候，就是进入这个函数的执行环境，首先会创一个它自己的活动对象，包含\n  - this\n  - 参数(arguments，全局对象没有arguments)\n  - 局部变量(包括命名的参数)\n  - 一个变量对象的作用域链[[scope chain]]\n\n### 作用域 \n- 没有块级作用域\n- 延长作用域链\n  - try-catch语句的catch块\n  - with语句\n\n### 参考\n[《javascript高级程序第三版学习笔记【执行环境、作用域】》](http://www.cnblogs.com/pigtail/archive/2012/07/19/2570988.html)\n\n## js的this\n-----\n讲了那么多，终于来到本节的重点了。不过前面讲的也跟接下来的有关系的哦。\n\n### this指向什么\nthis指针代表的是执行当前代码的对象的所有者。即有以下两种：\n- this指向全局变量\n- this指向某个对象\n\n### this与全局变量\n我们来看以下代码（例1）：\n``` javascript\nvar x;\nfunction example(x) { \n this.x = x; \n} \nexample(5); \nalert(x); //5\n```\n在这里，x和函数example均是全局变量，因此它们的全局执行环境是window对象。所以在example中的this也是指向全局的window对象。\n\n### this与某个对象\n来看下面的代码（例2）\n``` javascript\nvar x;\nvar example = {\n\tfun: function(x){\n\t\tthis.x = x;\n\t\talert(this.x); //5\n\t}\n};\nexample.fun(5); \nalert(x); //undefined\nalert(this.x); //undefined\n```\n在这里，我们定义了一个example对象，同时给该对象添加了x属性和fun方法，因此在调用fun方法时其执行环境为example的fun函数，而this指向该函数的所有者为example对象。\n故最后全局变量x并没有改变，仍然是undefined。\n\n当然上面我们也提到过，js对象的创建办法有几种，刚才的是通过json创建，我们还可以使用其它自定义对象构造方法。\n（例3）：\n``` javascript\n//构造函数，就是通过这个函数生成一个新对象（object），this就指这个新对象\nfunction obj(){\n\tthis.x = 5;\n\talert(this.x); //5\n}\nvar example = new obj();\nalert(example.x); //5\nalert(this.x); //undefined\n```\n\n现在我们再看看下面的代码（例4）：\n``` javascript\nvar x;\nvar example = {\n\tfun: function(x){\n\t\tvar fun2 = function(x){\n\t\t\tthis.x = x;\n\t\t\talert(this.x); //5\n\t\t};\n\t\tfun2(x);\n\t\talert(this.x); //undefined\n\t}\n};\nexample.fun(5); \nalert(example.x); //undefined\nalert(this.x); //5\n```\n当我们在对象的方法内定义新的函数，这时候该函数内的this绑定到全局window对象。是不是有点不可思议？\n这也是我们在写代码过程中容易遇到的一些问题，这里补充一下函数的调用方法一起说明吧。\n\n### JavaScript中函数的调用方式\n- 作为对象方法调用\n  - 在JavaScript中，函数也是对象，因此函数可以作为一个对象的属性。\n  - 此时该函数被称为该对象的方法，在使用这种调用方式时，this被自然绑定到该对象。\n- 作为函数调用\n这是我们刚才遇到的现象（例4），也即函数作为函数调用。\n  - 函数也可以直接被调用，此时this绑定到全局对象。\n  - 在浏览器中，window就是该全局对象。\n我们可以使用下面变量替代的方法规避这一缺陷：\n``` javascript\nvar x;\nvar example = {\n\tfun: function(x){\n\t\tvar that = this;\n\t\tvar fun2 = function(x){\n\t\t\tthat.x = x;\n\t\t\talert(this.x); //undefined\n\t\t\talert(that.x); //5\n\t\t};\n\t\tfun2(x);\n\t\talert(this.x); //5\n\t}\n};\nexample.fun(5); \nalert(example.x); //5\nalert(this.x); //undefined\n```\n同时，像setTimeout和setInterval这样的异步回调函数，经常也会遇到执行环境变更的问题，此时我们也可以使用该方法进行规避。\n- 作为构造函数调用（例3）\n  - JavaScript并没有类（class）的概念，而是使用基于原型（prototype）的继承方式。\n  - JavaScript中的构造函数也很特殊，如果不使用new调用，则和普通函数一样。（例1）\n- 使用apply或call调用\n  - 在JavaScript中函数也是对象，对象则有方法，apply和call就是函数对象的方法。\n  - 这两个方法异常强大，他们允许切换函数执行的上下文环境（context），即this绑定的对象。\n现在我们定义一个obj对象，并使它的一个方法等于全局函数：\n``` javascript\nfunction example(){\n\tthis.x = 5;\n\talert(this.x); //5\n}\nvar obj = {};\nobj.x = 1;\nobj.fun = example;\nalert(obj.x); //1\nalert(this.x); //undefined\n```\n1.此时我们直接调用该方法，会修改该对象的属性值。\n``` javascript\nobj.fun();\nalert(obj.x); //5\nalert(this.x); //undefined\n```\n2.如果我们在该方法上进行apply，则会出现以下结果。说明apply()的参数为空时，默认调用全局对象。\n``` javascript\nobj.fun.apply();\nalert(obj.x); //1\nalert(this.x); //5\n```\n3.我们给apply添加该对象作为参数。apply()的作用是改变函数的调用对象，它的第一个参数就表示改变后的调用这个函数的对象。。\n``` javascript\nobj.fun.apply(obj);\nalert(obj.x); //5\nalert(this.x); //undefined\n```\n\n另外，call方法可以用来代替另一个对象调用一个方法。call方法可将一个函数的对象上下文从初始的上下文改变为由thisObj指定的新对象。\n- apply和call两者在作用上是相同的，但两者在参数上有区别的：\n  - 对于第一个参数意义都一样\n  - 对第二个参数：apply传入的是一个参数数组，也就是将多个参数组合成为一个数组传入，而call则作为call的参数传入（从第二个参数开始\n\n### return this链式调用\n最后我们回到最开始的问题，为什么要在代码中使用return this呢？\n其实这是个链式调用的小技巧，我们只需要在对象的方法最后return this，就可以返回该对象，继续调用该对象的其它方法。看以下代码：\n``` javascript\nvar x;\nvar example = {\n\tfun1: function(x){\n\t\tthis.x = x;\n\t\talert(\"fun1: \" + this.x);\n\t\treturn this;\n\t},\n\tfun2: function(){\n\t\tthis.x += 1;\n\t\talert(\"fun2: \" + this.x);\n\t\treturn this;\n\t}\n};\nexample.fun1(5).fun2().fun1(2).fun2(); //链式调用对象的方法\n//fun1: 5\n//fun2: 6\n//fun1: 2\n//fun2: 3\nalert(example.x); //3\nalert(this.x); //undefined\n```\n链式调用是个挺有趣的东西，本骚年当初也是在研究jQuery的源码的时候看到的呢。\n\n### 参考\n[《深入浅出JavaScript中的this》](http://www.ibm.com/developerworks/cn/web/1207_wangqf_jsthis/)\n[《Javascript的this用法》](http://www.ruanyifeng.com/blog/2010/04/using_this_keyword_in_javascript.html)\n\n## 结束语\n-----\n有些人觉得jQuery已经过时了，现在都流行像AngularJS/ReactJS/Backbone.js这些框架。\n其实jQuery只是个库，它帮我们解决了很多兼容问题，也简化了js代码，跟框架不一样。而且本骚年认为jQuery库还是有很多精华的逻辑和思维呢，这些是永远都不会过时的呀。","slug":"js-this","published":1,"updated":"2016-07-29T13:29:54.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cirrwvo4b001h38l5o6nlor7u","content":"<p>有个同事一直问我代码里面为啥要return this。今天就简单聊聊关于javascript中的this吧。<br><a id=\"more\"></a></p>\n<p>首先，在js里面，this指针代表的是执行当前代码的对象的所有者。</p>\n<h2 id=\"js对象\"><a href=\"#js对象\" class=\"headerlink\" title=\"js对象\"></a>js对象</h2><hr>\n<h3 id=\"一切皆对象\"><a href=\"#一切皆对象\" class=\"headerlink\" title=\"一切皆对象\"></a>一切皆对象</h3><p>一切皆对象相信大家都很熟悉了吧。与其他面向对象语言不同的是，JS并没有Class的概念，在其他语言中，我们基本都需要实例化某个具体类的实例，但JS里却不同，它的做法是：任何函数都可以被实例化为一个对象。<br>JavaScript中的所有事物都是对象：字符串、数值、数组、函数…此外，JavaScript允许自定义对象。</p>\n<h3 id=\"javascript对象\"><a href=\"#javascript对象\" class=\"headerlink\" title=\"javascript对象\"></a>javascript对象</h3><p>JavaScript提供多个内建对象，比如 String、Date、Array等等。<br>对象只是带有属性和方法的特殊数据类型。</p>\n<ul>\n<li><p>访问对象的属性<br>属性是与对象相关的值。访问对象属性的语法是：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">objectName.propertyName</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>访问对象的方法<br>方法是能够在对象上执行的动作。可以通过以下语法来调用方法：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">objectName.methodName()</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3 id=\"判断对象类型\"><a href=\"#判断对象类型\" class=\"headerlink\" title=\"判断对象类型\"></a>判断对象类型</h3><ul>\n<li>typeof运算符<ul>\n<li>typeof的返回值，主要有五种： undefined, boolean, number, string, object。</li>\n<li>对于typeof的返回值，容易混淆object和null，因为null在js中指的是一个空对象。</li>\n<li>使用typeof的一个不好的地方就是它会把Array还有用户自定义函数都返回为object。</li>\n</ul>\n</li>\n<li>instanceof运算符<ul>\n<li>instanceof也是一个运算符，运算过程中也需要一个参数(Object, Boolean, Number, String, Function)，判断某一个对象是否是所给的构造函数的一个实例，返回值是true或者false。</li>\n</ul>\n</li>\n<li>object.constructor<ul>\n<li>constructor属性返回对创建此对象的数组函数的引用。</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"创建对象的方法\"><a href=\"#创建对象的方法\" class=\"headerlink\" title=\"创建对象的方法\"></a>创建对象的方法</h3><ul>\n<li>使用内置对象<ul>\n<li>JavaScript语言原生对象（语言级对象），如String、Object、Function等； </li>\n<li>JavaScript运行期的宿主对象（环境宿主级对象），如window、document、body等。 </li>\n</ul>\n</li>\n<li><p>使用JSON符号 </p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;name:<span class=\"string\">\"name\"</span>, key:<span class=\"string\">\"value\"</span>&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>自定义对象构造<br>方法很多，工厂方法、构造函数方法、原型方法、混合的构造函数/原型方法等。《javascript高级程序设计》里面讲得很详细，又或者大家可以上网自行谷哥。</p>\n<ul>\n<li>使用this关键字构造</li>\n<li>使用原型prototype构造</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h3><p><a href=\"http://www.w3school.com.cn/js/js_objects.asp\" target=\"_blank\" rel=\"external\">《JavaScript 对象》</a></p>\n<h2 id=\"js执行环境\"><a href=\"#js执行环境\" class=\"headerlink\" title=\"js执行环境\"></a>js执行环境</h2><hr>\n<p>执行环境定义了变量和函数有权访问的其他数据，决定了他们各自的行为。</p>\n<h3 id=\"全局执行环境\"><a href=\"#全局执行环境\" class=\"headerlink\" title=\"全局执行环境\"></a>全局执行环境</h3><ul>\n<li>在一个页面中，第一次载入JS代码时创建一个全局执行环境，全局执行环境是最外围的执行环境</li>\n<li>在Web浏览器中，全局执行环境被认为是window对象<ul>\n<li>因此，所有的全局变量和函数都是作为window对象的属性和方法创建的。</li>\n<li>全局执行环境直到应用程序退出后—例如关闭浏览器和网页—时才被销毁。</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"函数执行环境\"><a href=\"#函数执行环境\" class=\"headerlink\" title=\"函数执行环境\"></a>函数执行环境</h3><ul>\n<li>ECMAScript程序中的执行流<ul>\n<li>每个函数都有自己的执行环境，当执行进入一个函数时，函数的执行环境就会被推入一个执行环境栈的顶部并获取执行权。</li>\n<li>当这个函数执行完毕，它的执行环境又从这个栈的顶部被删除，并把执行权并还给之前执行环境。</li>\n<li>该执行环境中的所有代码执行完毕后，该环境被销毁，保存在其中的所有变量和函数定义也随之销毁。</li>\n</ul>\n</li>\n<li>定义期<ul>\n<li>全局函数A创建了一个A的[[scope]]属性，包含全局[[scope]]</li>\n<li>函数A里定义函数B，则B的[[scope]]包含全局[[scope]]和A的[[scope]]</li>\n</ul>\n</li>\n<li>执行期<br>当函数被执行的时候，就是进入这个函数的执行环境，首先会创一个它自己的活动对象，包含<ul>\n<li>this</li>\n<li>参数(arguments，全局对象没有arguments)</li>\n<li>局部变量(包括命名的参数)</li>\n<li>一个变量对象的作用域链[[scope chain]]</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"作用域\"><a href=\"#作用域\" class=\"headerlink\" title=\"作用域\"></a>作用域</h3><ul>\n<li>没有块级作用域</li>\n<li>延长作用域链<ul>\n<li>try-catch语句的catch块</li>\n<li>with语句</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"参考-1\"><a href=\"#参考-1\" class=\"headerlink\" title=\"参考\"></a>参考</h3><p><a href=\"http://www.cnblogs.com/pigtail/archive/2012/07/19/2570988.html\" target=\"_blank\" rel=\"external\">《javascript高级程序第三版学习笔记【执行环境、作用域】》</a></p>\n<h2 id=\"js的this\"><a href=\"#js的this\" class=\"headerlink\" title=\"js的this\"></a>js的this</h2><hr>\n<p>讲了那么多，终于来到本节的重点了。不过前面讲的也跟接下来的有关系的哦。</p>\n<h3 id=\"this指向什么\"><a href=\"#this指向什么\" class=\"headerlink\" title=\"this指向什么\"></a>this指向什么</h3><p>this指针代表的是执行当前代码的对象的所有者。即有以下两种：</p>\n<ul>\n<li>this指向全局变量</li>\n<li>this指向某个对象</li>\n</ul>\n<h3 id=\"this与全局变量\"><a href=\"#this与全局变量\" class=\"headerlink\" title=\"this与全局变量\"></a>this与全局变量</h3><p>我们来看以下代码（例1）：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> x;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">example</span>(<span class=\"params\">x</span>) </span>&#123; </span><br><span class=\"line\"> <span class=\"keyword\">this</span>.x = x; </span><br><span class=\"line\">&#125; </span><br><span class=\"line\">example(<span class=\"number\">5</span>); </span><br><span class=\"line\">alert(x); <span class=\"comment\">//5</span></span><br></pre></td></tr></table></figure></p>\n<p>在这里，x和函数example均是全局变量，因此它们的全局执行环境是window对象。所以在example中的this也是指向全局的window对象。</p>\n<h3 id=\"this与某个对象\"><a href=\"#this与某个对象\" class=\"headerlink\" title=\"this与某个对象\"></a>this与某个对象</h3><p>来看下面的代码（例2）<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> x;</span><br><span class=\"line\"><span class=\"keyword\">var</span> example = &#123;</span><br><span class=\"line\">  fun: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">x</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.x = x;</span><br><span class=\"line\">    alert(<span class=\"keyword\">this</span>.x); <span class=\"comment\">//5</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">example.fun(<span class=\"number\">5</span>); </span><br><span class=\"line\">alert(x); <span class=\"comment\">//undefined</span></span><br><span class=\"line\">alert(<span class=\"keyword\">this</span>.x); <span class=\"comment\">//undefined</span></span><br></pre></td></tr></table></figure></p>\n<p>在这里，我们定义了一个example对象，同时给该对象添加了x属性和fun方法，因此在调用fun方法时其执行环境为example的fun函数，而this指向该函数的所有者为example对象。<br>故最后全局变量x并没有改变，仍然是undefined。</p>\n<p>当然上面我们也提到过，js对象的创建办法有几种，刚才的是通过json创建，我们还可以使用其它自定义对象构造方法。<br>（例3）：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//构造函数，就是通过这个函数生成一个新对象（object），this就指这个新对象</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">obj</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.x = <span class=\"number\">5</span>;</span><br><span class=\"line\">  alert(<span class=\"keyword\">this</span>.x); <span class=\"comment\">//5</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> example = <span class=\"keyword\">new</span> obj();</span><br><span class=\"line\">alert(example.x); <span class=\"comment\">//5</span></span><br><span class=\"line\">alert(<span class=\"keyword\">this</span>.x); <span class=\"comment\">//undefined</span></span><br></pre></td></tr></table></figure></p>\n<p>现在我们再看看下面的代码（例4）：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> x;</span><br><span class=\"line\"><span class=\"keyword\">var</span> example = &#123;</span><br><span class=\"line\">  fun: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">x</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> fun2 = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">x</span>)</span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.x = x;</span><br><span class=\"line\">      alert(<span class=\"keyword\">this</span>.x); <span class=\"comment\">//5</span></span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    fun2(x);</span><br><span class=\"line\">    alert(<span class=\"keyword\">this</span>.x); <span class=\"comment\">//undefined</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">example.fun(<span class=\"number\">5</span>); </span><br><span class=\"line\">alert(example.x); <span class=\"comment\">//undefined</span></span><br><span class=\"line\">alert(<span class=\"keyword\">this</span>.x); <span class=\"comment\">//5</span></span><br></pre></td></tr></table></figure></p>\n<p>当我们在对象的方法内定义新的函数，这时候该函数内的this绑定到全局window对象。是不是有点不可思议？<br>这也是我们在写代码过程中容易遇到的一些问题，这里补充一下函数的调用方法一起说明吧。</p>\n<h3 id=\"JavaScript中函数的调用方式\"><a href=\"#JavaScript中函数的调用方式\" class=\"headerlink\" title=\"JavaScript中函数的调用方式\"></a>JavaScript中函数的调用方式</h3><ul>\n<li>作为对象方法调用<ul>\n<li>在JavaScript中，函数也是对象，因此函数可以作为一个对象的属性。</li>\n<li>此时该函数被称为该对象的方法，在使用这种调用方式时，this被自然绑定到该对象。</li>\n</ul>\n</li>\n<li>作为函数调用<br>这是我们刚才遇到的现象（例4），也即函数作为函数调用。<ul>\n<li>函数也可以直接被调用，此时this绑定到全局对象。</li>\n<li>在浏览器中，window就是该全局对象。<br>我们可以使用下面变量替代的方法规避这一缺陷：<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> x;</span><br><span class=\"line\"><span class=\"keyword\">var</span> example = &#123;</span><br><span class=\"line\">  fun: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">x</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> that = <span class=\"keyword\">this</span>;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> fun2 = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">x</span>)</span>&#123;</span><br><span class=\"line\">      that.x = x;</span><br><span class=\"line\">      alert(<span class=\"keyword\">this</span>.x); <span class=\"comment\">//undefined</span></span><br><span class=\"line\">      alert(that.x); <span class=\"comment\">//5</span></span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    fun2(x);</span><br><span class=\"line\">    alert(<span class=\"keyword\">this</span>.x); <span class=\"comment\">//5</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">example.fun(<span class=\"number\">5</span>); </span><br><span class=\"line\">alert(example.x); <span class=\"comment\">//5</span></span><br><span class=\"line\">alert(<span class=\"keyword\">this</span>.x); <span class=\"comment\">//undefined</span></span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n</ul>\n<p>同时，像setTimeout和setInterval这样的异步回调函数，经常也会遇到执行环境变更的问题，此时我们也可以使用该方法进行规避。</p>\n<ul>\n<li>作为构造函数调用（例3）<ul>\n<li>JavaScript并没有类（class）的概念，而是使用基于原型（prototype）的继承方式。</li>\n<li>JavaScript中的构造函数也很特殊，如果不使用new调用，则和普通函数一样。（例1）</li>\n</ul>\n</li>\n<li>使用apply或call调用<ul>\n<li>在JavaScript中函数也是对象，对象则有方法，apply和call就是函数对象的方法。</li>\n<li>这两个方法异常强大，他们允许切换函数执行的上下文环境（context），即this绑定的对象。<br>现在我们定义一个obj对象，并使它的一个方法等于全局函数：<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">example</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.x = <span class=\"number\">5</span>;</span><br><span class=\"line\">  alert(<span class=\"keyword\">this</span>.x); <span class=\"comment\">//5</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> obj = &#123;&#125;;</span><br><span class=\"line\">obj.x = <span class=\"number\">1</span>;</span><br><span class=\"line\">obj.fun = example;</span><br><span class=\"line\">alert(obj.x); <span class=\"comment\">//1</span></span><br><span class=\"line\">alert(<span class=\"keyword\">this</span>.x); <span class=\"comment\">//undefined</span></span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n</ul>\n<p>1.此时我们直接调用该方法，会修改该对象的属性值。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">obj.fun();</span><br><span class=\"line\">alert(obj.x); <span class=\"comment\">//5</span></span><br><span class=\"line\">alert(<span class=\"keyword\">this</span>.x); <span class=\"comment\">//undefined</span></span><br></pre></td></tr></table></figure></p>\n<p>2.如果我们在该方法上进行apply，则会出现以下结果。说明apply()的参数为空时，默认调用全局对象。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">obj.fun.apply();</span><br><span class=\"line\">alert(obj.x); <span class=\"comment\">//1</span></span><br><span class=\"line\">alert(<span class=\"keyword\">this</span>.x); <span class=\"comment\">//5</span></span><br></pre></td></tr></table></figure></p>\n<p>3.我们给apply添加该对象作为参数。apply()的作用是改变函数的调用对象，它的第一个参数就表示改变后的调用这个函数的对象。。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">obj.fun.apply(obj);</span><br><span class=\"line\">alert(obj.x); <span class=\"comment\">//5</span></span><br><span class=\"line\">alert(<span class=\"keyword\">this</span>.x); <span class=\"comment\">//undefined</span></span><br></pre></td></tr></table></figure></p>\n<p>另外，call方法可以用来代替另一个对象调用一个方法。call方法可将一个函数的对象上下文从初始的上下文改变为由thisObj指定的新对象。</p>\n<ul>\n<li>apply和call两者在作用上是相同的，但两者在参数上有区别的：<ul>\n<li>对于第一个参数意义都一样</li>\n<li>对第二个参数：apply传入的是一个参数数组，也就是将多个参数组合成为一个数组传入，而call则作为call的参数传入（从第二个参数开始</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"return-this链式调用\"><a href=\"#return-this链式调用\" class=\"headerlink\" title=\"return this链式调用\"></a>return this链式调用</h3><p>最后我们回到最开始的问题，为什么要在代码中使用return this呢？<br>其实这是个链式调用的小技巧，我们只需要在对象的方法最后return this，就可以返回该对象，继续调用该对象的其它方法。看以下代码：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> x;</span><br><span class=\"line\"><span class=\"keyword\">var</span> example = &#123;</span><br><span class=\"line\">  fun1: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">x</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.x = x;</span><br><span class=\"line\">    alert(<span class=\"string\">\"fun1: \"</span> + <span class=\"keyword\">this</span>.x);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  fun2: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.x += <span class=\"number\">1</span>;</span><br><span class=\"line\">    alert(<span class=\"string\">\"fun2: \"</span> + <span class=\"keyword\">this</span>.x);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">example.fun1(<span class=\"number\">5</span>).fun2().fun1(<span class=\"number\">2</span>).fun2(); <span class=\"comment\">//链式调用对象的方法</span></span><br><span class=\"line\"><span class=\"comment\">//fun1: 5</span></span><br><span class=\"line\"><span class=\"comment\">//fun2: 6</span></span><br><span class=\"line\"><span class=\"comment\">//fun1: 2</span></span><br><span class=\"line\"><span class=\"comment\">//fun2: 3</span></span><br><span class=\"line\">alert(example.x); <span class=\"comment\">//3</span></span><br><span class=\"line\">alert(<span class=\"keyword\">this</span>.x); <span class=\"comment\">//undefined</span></span><br></pre></td></tr></table></figure></p>\n<p>链式调用是个挺有趣的东西，本骚年当初也是在研究jQuery的源码的时候看到的呢。</p>\n<h3 id=\"参考-2\"><a href=\"#参考-2\" class=\"headerlink\" title=\"参考\"></a>参考</h3><p><a href=\"http://www.ibm.com/developerworks/cn/web/1207_wangqf_jsthis/\" target=\"_blank\" rel=\"external\">《深入浅出JavaScript中的this》</a><br><a href=\"http://www.ruanyifeng.com/blog/2010/04/using_this_keyword_in_javascript.html\" target=\"_blank\" rel=\"external\">《Javascript的this用法》</a></p>\n<h2 id=\"结束语\"><a href=\"#结束语\" class=\"headerlink\" title=\"结束语\"></a>结束语</h2><hr>\n<p>有些人觉得jQuery已经过时了，现在都流行像AngularJS/ReactJS/Backbone.js这些框架。<br>其实jQuery只是个库，它帮我们解决了很多兼容问题，也简化了js代码，跟框架不一样。而且本骚年认为jQuery库还是有很多精华的逻辑和思维呢，这些是永远都不会过时的呀。</p>\n","excerpt":"<p>有个同事一直问我代码里面为啥要return this。今天就简单聊聊关于javascript中的this吧。<br>","more":"</p>\n<p>首先，在js里面，this指针代表的是执行当前代码的对象的所有者。</p>\n<h2 id=\"js对象\"><a href=\"#js对象\" class=\"headerlink\" title=\"js对象\"></a>js对象</h2><hr>\n<h3 id=\"一切皆对象\"><a href=\"#一切皆对象\" class=\"headerlink\" title=\"一切皆对象\"></a>一切皆对象</h3><p>一切皆对象相信大家都很熟悉了吧。与其他面向对象语言不同的是，JS并没有Class的概念，在其他语言中，我们基本都需要实例化某个具体类的实例，但JS里却不同，它的做法是：任何函数都可以被实例化为一个对象。<br>JavaScript中的所有事物都是对象：字符串、数值、数组、函数…此外，JavaScript允许自定义对象。</p>\n<h3 id=\"javascript对象\"><a href=\"#javascript对象\" class=\"headerlink\" title=\"javascript对象\"></a>javascript对象</h3><p>JavaScript提供多个内建对象，比如 String、Date、Array等等。<br>对象只是带有属性和方法的特殊数据类型。</p>\n<ul>\n<li><p>访问对象的属性<br>属性是与对象相关的值。访问对象属性的语法是：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">objectName.propertyName</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>访问对象的方法<br>方法是能够在对象上执行的动作。可以通过以下语法来调用方法：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">objectName.methodName()</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3 id=\"判断对象类型\"><a href=\"#判断对象类型\" class=\"headerlink\" title=\"判断对象类型\"></a>判断对象类型</h3><ul>\n<li>typeof运算符<ul>\n<li>typeof的返回值，主要有五种： undefined, boolean, number, string, object。</li>\n<li>对于typeof的返回值，容易混淆object和null，因为null在js中指的是一个空对象。</li>\n<li>使用typeof的一个不好的地方就是它会把Array还有用户自定义函数都返回为object。</li>\n</ul>\n</li>\n<li>instanceof运算符<ul>\n<li>instanceof也是一个运算符，运算过程中也需要一个参数(Object, Boolean, Number, String, Function)，判断某一个对象是否是所给的构造函数的一个实例，返回值是true或者false。</li>\n</ul>\n</li>\n<li>object.constructor<ul>\n<li>constructor属性返回对创建此对象的数组函数的引用。</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"创建对象的方法\"><a href=\"#创建对象的方法\" class=\"headerlink\" title=\"创建对象的方法\"></a>创建对象的方法</h3><ul>\n<li>使用内置对象<ul>\n<li>JavaScript语言原生对象（语言级对象），如String、Object、Function等； </li>\n<li>JavaScript运行期的宿主对象（环境宿主级对象），如window、document、body等。 </li>\n</ul>\n</li>\n<li><p>使用JSON符号 </p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;name:<span class=\"string\">\"name\"</span>, key:<span class=\"string\">\"value\"</span>&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>自定义对象构造<br>方法很多，工厂方法、构造函数方法、原型方法、混合的构造函数/原型方法等。《javascript高级程序设计》里面讲得很详细，又或者大家可以上网自行谷哥。</p>\n<ul>\n<li>使用this关键字构造</li>\n<li>使用原型prototype构造</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h3><p><a href=\"http://www.w3school.com.cn/js/js_objects.asp\">《JavaScript 对象》</a></p>\n<h2 id=\"js执行环境\"><a href=\"#js执行环境\" class=\"headerlink\" title=\"js执行环境\"></a>js执行环境</h2><hr>\n<p>执行环境定义了变量和函数有权访问的其他数据，决定了他们各自的行为。</p>\n<h3 id=\"全局执行环境\"><a href=\"#全局执行环境\" class=\"headerlink\" title=\"全局执行环境\"></a>全局执行环境</h3><ul>\n<li>在一个页面中，第一次载入JS代码时创建一个全局执行环境，全局执行环境是最外围的执行环境</li>\n<li>在Web浏览器中，全局执行环境被认为是window对象<ul>\n<li>因此，所有的全局变量和函数都是作为window对象的属性和方法创建的。</li>\n<li>全局执行环境直到应用程序退出后—例如关闭浏览器和网页—时才被销毁。</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"函数执行环境\"><a href=\"#函数执行环境\" class=\"headerlink\" title=\"函数执行环境\"></a>函数执行环境</h3><ul>\n<li>ECMAScript程序中的执行流<ul>\n<li>每个函数都有自己的执行环境，当执行进入一个函数时，函数的执行环境就会被推入一个执行环境栈的顶部并获取执行权。</li>\n<li>当这个函数执行完毕，它的执行环境又从这个栈的顶部被删除，并把执行权并还给之前执行环境。</li>\n<li>该执行环境中的所有代码执行完毕后，该环境被销毁，保存在其中的所有变量和函数定义也随之销毁。</li>\n</ul>\n</li>\n<li>定义期<ul>\n<li>全局函数A创建了一个A的[[scope]]属性，包含全局[[scope]]</li>\n<li>函数A里定义函数B，则B的[[scope]]包含全局[[scope]]和A的[[scope]]</li>\n</ul>\n</li>\n<li>执行期<br>当函数被执行的时候，就是进入这个函数的执行环境，首先会创一个它自己的活动对象，包含<ul>\n<li>this</li>\n<li>参数(arguments，全局对象没有arguments)</li>\n<li>局部变量(包括命名的参数)</li>\n<li>一个变量对象的作用域链[[scope chain]]</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"作用域\"><a href=\"#作用域\" class=\"headerlink\" title=\"作用域\"></a>作用域</h3><ul>\n<li>没有块级作用域</li>\n<li>延长作用域链<ul>\n<li>try-catch语句的catch块</li>\n<li>with语句</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"参考-1\"><a href=\"#参考-1\" class=\"headerlink\" title=\"参考\"></a>参考</h3><p><a href=\"http://www.cnblogs.com/pigtail/archive/2012/07/19/2570988.html\">《javascript高级程序第三版学习笔记【执行环境、作用域】》</a></p>\n<h2 id=\"js的this\"><a href=\"#js的this\" class=\"headerlink\" title=\"js的this\"></a>js的this</h2><hr>\n<p>讲了那么多，终于来到本节的重点了。不过前面讲的也跟接下来的有关系的哦。</p>\n<h3 id=\"this指向什么\"><a href=\"#this指向什么\" class=\"headerlink\" title=\"this指向什么\"></a>this指向什么</h3><p>this指针代表的是执行当前代码的对象的所有者。即有以下两种：</p>\n<ul>\n<li>this指向全局变量</li>\n<li>this指向某个对象</li>\n</ul>\n<h3 id=\"this与全局变量\"><a href=\"#this与全局变量\" class=\"headerlink\" title=\"this与全局变量\"></a>this与全局变量</h3><p>我们来看以下代码（例1）：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> x;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">example</span>(<span class=\"params\">x</span>) </span>&#123; </span><br><span class=\"line\"> <span class=\"keyword\">this</span>.x = x; </span><br><span class=\"line\">&#125; </span><br><span class=\"line\">example(<span class=\"number\">5</span>); </span><br><span class=\"line\">alert(x); <span class=\"comment\">//5</span></span><br></pre></td></tr></table></figure></p>\n<p>在这里，x和函数example均是全局变量，因此它们的全局执行环境是window对象。所以在example中的this也是指向全局的window对象。</p>\n<h3 id=\"this与某个对象\"><a href=\"#this与某个对象\" class=\"headerlink\" title=\"this与某个对象\"></a>this与某个对象</h3><p>来看下面的代码（例2）<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> x;</span><br><span class=\"line\"><span class=\"keyword\">var</span> example = &#123;</span><br><span class=\"line\">  fun: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">x</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.x = x;</span><br><span class=\"line\">    alert(<span class=\"keyword\">this</span>.x); <span class=\"comment\">//5</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">example.fun(<span class=\"number\">5</span>); </span><br><span class=\"line\">alert(x); <span class=\"comment\">//undefined</span></span><br><span class=\"line\">alert(<span class=\"keyword\">this</span>.x); <span class=\"comment\">//undefined</span></span><br></pre></td></tr></table></figure></p>\n<p>在这里，我们定义了一个example对象，同时给该对象添加了x属性和fun方法，因此在调用fun方法时其执行环境为example的fun函数，而this指向该函数的所有者为example对象。<br>故最后全局变量x并没有改变，仍然是undefined。</p>\n<p>当然上面我们也提到过，js对象的创建办法有几种，刚才的是通过json创建，我们还可以使用其它自定义对象构造方法。<br>（例3）：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//构造函数，就是通过这个函数生成一个新对象（object），this就指这个新对象</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">obj</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.x = <span class=\"number\">5</span>;</span><br><span class=\"line\">  alert(<span class=\"keyword\">this</span>.x); <span class=\"comment\">//5</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> example = <span class=\"keyword\">new</span> obj();</span><br><span class=\"line\">alert(example.x); <span class=\"comment\">//5</span></span><br><span class=\"line\">alert(<span class=\"keyword\">this</span>.x); <span class=\"comment\">//undefined</span></span><br></pre></td></tr></table></figure></p>\n<p>现在我们再看看下面的代码（例4）：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> x;</span><br><span class=\"line\"><span class=\"keyword\">var</span> example = &#123;</span><br><span class=\"line\">  fun: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">x</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> fun2 = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">x</span>)</span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.x = x;</span><br><span class=\"line\">      alert(<span class=\"keyword\">this</span>.x); <span class=\"comment\">//5</span></span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    fun2(x);</span><br><span class=\"line\">    alert(<span class=\"keyword\">this</span>.x); <span class=\"comment\">//undefined</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">example.fun(<span class=\"number\">5</span>); </span><br><span class=\"line\">alert(example.x); <span class=\"comment\">//undefined</span></span><br><span class=\"line\">alert(<span class=\"keyword\">this</span>.x); <span class=\"comment\">//5</span></span><br></pre></td></tr></table></figure></p>\n<p>当我们在对象的方法内定义新的函数，这时候该函数内的this绑定到全局window对象。是不是有点不可思议？<br>这也是我们在写代码过程中容易遇到的一些问题，这里补充一下函数的调用方法一起说明吧。</p>\n<h3 id=\"JavaScript中函数的调用方式\"><a href=\"#JavaScript中函数的调用方式\" class=\"headerlink\" title=\"JavaScript中函数的调用方式\"></a>JavaScript中函数的调用方式</h3><ul>\n<li>作为对象方法调用<ul>\n<li>在JavaScript中，函数也是对象，因此函数可以作为一个对象的属性。</li>\n<li>此时该函数被称为该对象的方法，在使用这种调用方式时，this被自然绑定到该对象。</li>\n</ul>\n</li>\n<li>作为函数调用<br>这是我们刚才遇到的现象（例4），也即函数作为函数调用。<ul>\n<li>函数也可以直接被调用，此时this绑定到全局对象。</li>\n<li>在浏览器中，window就是该全局对象。<br>我们可以使用下面变量替代的方法规避这一缺陷：<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> x;</span><br><span class=\"line\"><span class=\"keyword\">var</span> example = &#123;</span><br><span class=\"line\">  fun: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">x</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> that = <span class=\"keyword\">this</span>;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> fun2 = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">x</span>)</span>&#123;</span><br><span class=\"line\">      that.x = x;</span><br><span class=\"line\">      alert(<span class=\"keyword\">this</span>.x); <span class=\"comment\">//undefined</span></span><br><span class=\"line\">      alert(that.x); <span class=\"comment\">//5</span></span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    fun2(x);</span><br><span class=\"line\">    alert(<span class=\"keyword\">this</span>.x); <span class=\"comment\">//5</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">example.fun(<span class=\"number\">5</span>); </span><br><span class=\"line\">alert(example.x); <span class=\"comment\">//5</span></span><br><span class=\"line\">alert(<span class=\"keyword\">this</span>.x); <span class=\"comment\">//undefined</span></span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n</ul>\n<p>同时，像setTimeout和setInterval这样的异步回调函数，经常也会遇到执行环境变更的问题，此时我们也可以使用该方法进行规避。</p>\n<ul>\n<li>作为构造函数调用（例3）<ul>\n<li>JavaScript并没有类（class）的概念，而是使用基于原型（prototype）的继承方式。</li>\n<li>JavaScript中的构造函数也很特殊，如果不使用new调用，则和普通函数一样。（例1）</li>\n</ul>\n</li>\n<li>使用apply或call调用<ul>\n<li>在JavaScript中函数也是对象，对象则有方法，apply和call就是函数对象的方法。</li>\n<li>这两个方法异常强大，他们允许切换函数执行的上下文环境（context），即this绑定的对象。<br>现在我们定义一个obj对象，并使它的一个方法等于全局函数：<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">example</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.x = <span class=\"number\">5</span>;</span><br><span class=\"line\">  alert(<span class=\"keyword\">this</span>.x); <span class=\"comment\">//5</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> obj = &#123;&#125;;</span><br><span class=\"line\">obj.x = <span class=\"number\">1</span>;</span><br><span class=\"line\">obj.fun = example;</span><br><span class=\"line\">alert(obj.x); <span class=\"comment\">//1</span></span><br><span class=\"line\">alert(<span class=\"keyword\">this</span>.x); <span class=\"comment\">//undefined</span></span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n</ul>\n<p>1.此时我们直接调用该方法，会修改该对象的属性值。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">obj.fun();</span><br><span class=\"line\">alert(obj.x); <span class=\"comment\">//5</span></span><br><span class=\"line\">alert(<span class=\"keyword\">this</span>.x); <span class=\"comment\">//undefined</span></span><br></pre></td></tr></table></figure></p>\n<p>2.如果我们在该方法上进行apply，则会出现以下结果。说明apply()的参数为空时，默认调用全局对象。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">obj.fun.apply();</span><br><span class=\"line\">alert(obj.x); <span class=\"comment\">//1</span></span><br><span class=\"line\">alert(<span class=\"keyword\">this</span>.x); <span class=\"comment\">//5</span></span><br></pre></td></tr></table></figure></p>\n<p>3.我们给apply添加该对象作为参数。apply()的作用是改变函数的调用对象，它的第一个参数就表示改变后的调用这个函数的对象。。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">obj.fun.apply(obj);</span><br><span class=\"line\">alert(obj.x); <span class=\"comment\">//5</span></span><br><span class=\"line\">alert(<span class=\"keyword\">this</span>.x); <span class=\"comment\">//undefined</span></span><br></pre></td></tr></table></figure></p>\n<p>另外，call方法可以用来代替另一个对象调用一个方法。call方法可将一个函数的对象上下文从初始的上下文改变为由thisObj指定的新对象。</p>\n<ul>\n<li>apply和call两者在作用上是相同的，但两者在参数上有区别的：<ul>\n<li>对于第一个参数意义都一样</li>\n<li>对第二个参数：apply传入的是一个参数数组，也就是将多个参数组合成为一个数组传入，而call则作为call的参数传入（从第二个参数开始</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"return-this链式调用\"><a href=\"#return-this链式调用\" class=\"headerlink\" title=\"return this链式调用\"></a>return this链式调用</h3><p>最后我们回到最开始的问题，为什么要在代码中使用return this呢？<br>其实这是个链式调用的小技巧，我们只需要在对象的方法最后return this，就可以返回该对象，继续调用该对象的其它方法。看以下代码：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> x;</span><br><span class=\"line\"><span class=\"keyword\">var</span> example = &#123;</span><br><span class=\"line\">  fun1: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">x</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.x = x;</span><br><span class=\"line\">    alert(<span class=\"string\">\"fun1: \"</span> + <span class=\"keyword\">this</span>.x);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  fun2: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.x += <span class=\"number\">1</span>;</span><br><span class=\"line\">    alert(<span class=\"string\">\"fun2: \"</span> + <span class=\"keyword\">this</span>.x);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">example.fun1(<span class=\"number\">5</span>).fun2().fun1(<span class=\"number\">2</span>).fun2(); <span class=\"comment\">//链式调用对象的方法</span></span><br><span class=\"line\"><span class=\"comment\">//fun1: 5</span></span><br><span class=\"line\"><span class=\"comment\">//fun2: 6</span></span><br><span class=\"line\"><span class=\"comment\">//fun1: 2</span></span><br><span class=\"line\"><span class=\"comment\">//fun2: 3</span></span><br><span class=\"line\">alert(example.x); <span class=\"comment\">//3</span></span><br><span class=\"line\">alert(<span class=\"keyword\">this</span>.x); <span class=\"comment\">//undefined</span></span><br></pre></td></tr></table></figure></p>\n<p>链式调用是个挺有趣的东西，本骚年当初也是在研究jQuery的源码的时候看到的呢。</p>\n<h3 id=\"参考-2\"><a href=\"#参考-2\" class=\"headerlink\" title=\"参考\"></a>参考</h3><p><a href=\"http://www.ibm.com/developerworks/cn/web/1207_wangqf_jsthis/\">《深入浅出JavaScript中的this》</a><br><a href=\"http://www.ruanyifeng.com/blog/2010/04/using_this_keyword_in_javascript.html\">《Javascript的this用法》</a></p>\n<h2 id=\"结束语\"><a href=\"#结束语\" class=\"headerlink\" title=\"结束语\"></a>结束语</h2><hr>\n<p>有些人觉得jQuery已经过时了，现在都流行像AngularJS/ReactJS/Backbone.js这些框架。<br>其实jQuery只是个库，它帮我们解决了很多兼容问题，也简化了js代码，跟框架不一样。而且本骚年认为jQuery库还是有很多精华的逻辑和思维呢，这些是永远都不会过时的呀。</p>"},{"title":"Angular使用笔记11-使用Karma和Jasmine进行单元测试","date":"2016-07-30T03:32:35.000Z","_content":"最近的一个项目使用AngularJS(v1.2.6)作为前端的框架，《Angular使用笔记》系列用于记录过程中的一些使用和解决方法。\n本文记录使用Karma和Jasmine搭建测试环境的过程。\n<!--more-->\n\n## TDD和BDD\n-----\n### TDD\nTest Drive Development，测试驱动开发。\n大概的流程是先针对每个功能点抽象出接口代码，然后编写单元测试代码，接下来实现接口，运行单元测试代码，循环此过程，直到整个单元测试都通过。\n- 优点：\n  - 1.能驱使系统最终的实现代码，都可以被测试代码所覆盖到，也即“每一行代码都可测”。\n  - 2.测试代码作为实现代码的正确导向，最终演变为正确系统的行为，能让整个开发过程更加高效。\n- 不足\n  - 1.项目的需求必须足够清晰。\n  - 2.对于一个业务模型及其复杂、内部模块之间的相互依赖性非常强的项目，采用TDD反而会得不尝失，这会导致程序员在拆分接口和写测试代码的时候工作量非常大。\n\n### BDD\nBehavior Drive Development，行为驱动开发。\n把TDD中模糊的那一部分给明确了，强调开发、测试、BA、客户等所有项目相关人员都用自然语言来描述系统的行为。\n大家看到的描述一致，读到的内容一致，于是最终测试驱动开发产出的结果也应该是最符合用户期望的。\n\n### 参考\n- [《[转]关于TDD、BDD和DDD的一些看法》](http://www.cnblogs.com/wangshenhe/archive/2013/02/16/2913431.html)\n\n### 单元测试\n单元测试是一种测试你的项目中每个最小单元代码的艺术，是使你的程序思路清晰的基础。一旦所有的测试通过，这些零散的单元组合在一起也会运行的很好，因为这些单元的行为已经被独立的验证过了。\n\n## Jasmine\n-----\nJasmine是一个用来编写Javascript测试的框架，它不依赖于任何其它的javascript框架，也不需要对DOM。它有拥有灵巧而明确的语法可以让你轻松的编写测试代码。\n\n### jasmine基础语法\njasmine单元测试有两个核心的部分：describe函数块和it函数块。\n\n- Suites\nSuites可以理解为一组测试用例，使用全局的Jasmin函数describe创建。describe函数接受两个参数，一个字符串和一个函数。字符串是这个Suites的名字或标题（通常描述下测试内容），函数是实现Suites的代码块。\n\n- Specs\nSpecs可以理解为一个测试用例，使用全局的Jasmin函数it创建。和describe一样接受两个参数，一个字符串和一个函数，函数就是要执行的测试代码，字符串就是测试用例的名字。一个Spec可以包含多个expectations来测试代码。\n\n- Expectations\nExpectations由expect函数创建。接受一个参数。和Matcher一起联用，设置测试的预期值。\n\n在分组(describe)中可以写多个测试用例(it)，也可以再进行分组(describe)，在测试用例(it)中定义期望表达式(expect)和匹配判断(toBe*)。\n\n- 内置Matchers\n\n``` javascript\nexpect(a).toBe(true);//期望变量a为true  \nexpect(a).toEqual(true);//期望变量a等于true  \nexpect(a).toMatch(/reg/);//期望变量a匹配reg正则表达式，也可以是字符串  \nexpect(a.foo).toBeDefined();//期望a.foo已定义  \nexpect(a.foo).toBeUndefined();//期望a.foo未定义  \nexpect(a).toBeNull();//期望变量a为null  \nexpect(a.isMale).toBeTruthy();//期望a.isMale为真  \nexpect(a.isMale).toBeFalsy();//期望a.isMale为假  \nexpect(true).toEqual(true);//期望true等于true  \nexpect(a).toBeLessThan(b);//期望a小于b  \nexpect(a).toBeGreaterThan(b);//期望a大于b  \nexpect(a).toThrowError(/reg/);//期望a方法抛出异常，异常信息可以是字符串、正则表达式、错误类型以及错误类型和错误信息  \nexpect(a).toThrow();//期望a方法抛出异常  \nexpect(a).toContain(b);//期望a(数组或者对象)包含b  \n```\n\n- Setup and Teardown\n为了在复杂的测试用例中更加便于组装和拆卸，Jasmine提供了四个函数：\n``` javascript\nbeforeEach(function)  //在每一个测试用例(it)执行之前都执行一遍beforeEach函数；  \nafterEach(function)  //在每一个测试用例(it)执行完成之后都执行一遍afterEach函数；  \nbeforeAll(function)  //在所有测试用例执行之前执行一遍beforeAll函数；  \nafterAll(function)  //在所有测试用例执行完成之后执行一遍afterAll函数；\n```\n\n- this关键字\n可以通过this关键字在beforeEach、afterEach和it之间共享变量，在beforeEach/afterEach/it中有一个共同的this对象。\n\n- 参考\n[《JavaScript单元测试框架——Jasmine入门》](http://ued.fanxing.com/javascriptdan-yuan-ce-shi-kuang-jia-jasmine/)\n\n### jasmine环境配置\njasmine运行需要4个部分：\n1.运行时环境：基于浏览器，通过HTML作为javascript载体\n2.源文件：用于实现某种业务逻辑的文件，就是我们平时写的js脚本\n3.测试文件：符合jasmineAPI的测试js脚本\n4.输出结果：jasmine提供了基于网页的输出结果\n\n## Karma\n-----\n### Karma介绍\nKarma是一个基于Node.js的JavaScript测试执行过程管理工具（Test Runner）。\n该工具可用于测试所有主流Web浏览器，也可集成到CI（Continuous integration）工具，也可和其他代码编辑器一起使用。\n这个测试工具的一个强大特性就是，它可以监控(Watch)文件的变化，然后自行执行，通过console.log显示测试结果。\n\n### Karma安装\n安装karma和相关插件。\n``` cmd\nnpm install karma --save-dev\nnpm install karma-jasmine karma-chrome-launcher --save-dev\n```\n\n## 编写测试代码\n-----\n项目中有关测试环境的搭建在我们之前[Yaomen](http://blog.jobbole.com/65399/)的时候就解决了呢。\n\n### 控制器测试\n这里我们简述一下编写IndexCtrl控制器的代码：\n``` javascript\ndescribe('Controller: IndexCtrl', function () {\n  beforeEach(module('angularTestApp')); //注入module\n  var IndexCtrl, scope, rootscope;\n  beforeEach(inject(function ($controller, $rootScope) { //注入控制器和作用域\n    scope = $rootScope.$new();\n    IndexCtrl = $controller('IndexCtrl', {\n      $scope: scope\n    });\n  }));\n  it('should have loading to be init', function () {\n    expect(scope.loading).toBe('init');\n  });\n  it('should have 4 asidemenus', function () {\n    expect(scope.asidemenus.length).toBe(4);\n  });\n  it('should load photo', function () {\n  \texpect(scope.avatar).toBeUndefined();\n    scope.loadphoto('123');\n    expect(scope.avatar.length).toBe(3);\n  });\n});\n```\n\n## 结束语\n-----\n其它像Directive、Service等也是可以进行单元测试的哦，测试方法跟控制器，注入服务然后测试，小伙伴们也可以试试。","source":"_posts/angular-note-11-karma-jasmine-test-create.md","raw":"---\ntitle: Angular使用笔记11-使用Karma和Jasmine进行单元测试\ndate: 2016-07-30 11:32:35\ncategories: angular混搭\ntags: 笔记\n---\n最近的一个项目使用AngularJS(v1.2.6)作为前端的框架，《Angular使用笔记》系列用于记录过程中的一些使用和解决方法。\n本文记录使用Karma和Jasmine搭建测试环境的过程。\n<!--more-->\n\n## TDD和BDD\n-----\n### TDD\nTest Drive Development，测试驱动开发。\n大概的流程是先针对每个功能点抽象出接口代码，然后编写单元测试代码，接下来实现接口，运行单元测试代码，循环此过程，直到整个单元测试都通过。\n- 优点：\n  - 1.能驱使系统最终的实现代码，都可以被测试代码所覆盖到，也即“每一行代码都可测”。\n  - 2.测试代码作为实现代码的正确导向，最终演变为正确系统的行为，能让整个开发过程更加高效。\n- 不足\n  - 1.项目的需求必须足够清晰。\n  - 2.对于一个业务模型及其复杂、内部模块之间的相互依赖性非常强的项目，采用TDD反而会得不尝失，这会导致程序员在拆分接口和写测试代码的时候工作量非常大。\n\n### BDD\nBehavior Drive Development，行为驱动开发。\n把TDD中模糊的那一部分给明确了，强调开发、测试、BA、客户等所有项目相关人员都用自然语言来描述系统的行为。\n大家看到的描述一致，读到的内容一致，于是最终测试驱动开发产出的结果也应该是最符合用户期望的。\n\n### 参考\n- [《[转]关于TDD、BDD和DDD的一些看法》](http://www.cnblogs.com/wangshenhe/archive/2013/02/16/2913431.html)\n\n### 单元测试\n单元测试是一种测试你的项目中每个最小单元代码的艺术，是使你的程序思路清晰的基础。一旦所有的测试通过，这些零散的单元组合在一起也会运行的很好，因为这些单元的行为已经被独立的验证过了。\n\n## Jasmine\n-----\nJasmine是一个用来编写Javascript测试的框架，它不依赖于任何其它的javascript框架，也不需要对DOM。它有拥有灵巧而明确的语法可以让你轻松的编写测试代码。\n\n### jasmine基础语法\njasmine单元测试有两个核心的部分：describe函数块和it函数块。\n\n- Suites\nSuites可以理解为一组测试用例，使用全局的Jasmin函数describe创建。describe函数接受两个参数，一个字符串和一个函数。字符串是这个Suites的名字或标题（通常描述下测试内容），函数是实现Suites的代码块。\n\n- Specs\nSpecs可以理解为一个测试用例，使用全局的Jasmin函数it创建。和describe一样接受两个参数，一个字符串和一个函数，函数就是要执行的测试代码，字符串就是测试用例的名字。一个Spec可以包含多个expectations来测试代码。\n\n- Expectations\nExpectations由expect函数创建。接受一个参数。和Matcher一起联用，设置测试的预期值。\n\n在分组(describe)中可以写多个测试用例(it)，也可以再进行分组(describe)，在测试用例(it)中定义期望表达式(expect)和匹配判断(toBe*)。\n\n- 内置Matchers\n\n``` javascript\nexpect(a).toBe(true);//期望变量a为true  \nexpect(a).toEqual(true);//期望变量a等于true  \nexpect(a).toMatch(/reg/);//期望变量a匹配reg正则表达式，也可以是字符串  \nexpect(a.foo).toBeDefined();//期望a.foo已定义  \nexpect(a.foo).toBeUndefined();//期望a.foo未定义  \nexpect(a).toBeNull();//期望变量a为null  \nexpect(a.isMale).toBeTruthy();//期望a.isMale为真  \nexpect(a.isMale).toBeFalsy();//期望a.isMale为假  \nexpect(true).toEqual(true);//期望true等于true  \nexpect(a).toBeLessThan(b);//期望a小于b  \nexpect(a).toBeGreaterThan(b);//期望a大于b  \nexpect(a).toThrowError(/reg/);//期望a方法抛出异常，异常信息可以是字符串、正则表达式、错误类型以及错误类型和错误信息  \nexpect(a).toThrow();//期望a方法抛出异常  \nexpect(a).toContain(b);//期望a(数组或者对象)包含b  \n```\n\n- Setup and Teardown\n为了在复杂的测试用例中更加便于组装和拆卸，Jasmine提供了四个函数：\n``` javascript\nbeforeEach(function)  //在每一个测试用例(it)执行之前都执行一遍beforeEach函数；  \nafterEach(function)  //在每一个测试用例(it)执行完成之后都执行一遍afterEach函数；  \nbeforeAll(function)  //在所有测试用例执行之前执行一遍beforeAll函数；  \nafterAll(function)  //在所有测试用例执行完成之后执行一遍afterAll函数；\n```\n\n- this关键字\n可以通过this关键字在beforeEach、afterEach和it之间共享变量，在beforeEach/afterEach/it中有一个共同的this对象。\n\n- 参考\n[《JavaScript单元测试框架——Jasmine入门》](http://ued.fanxing.com/javascriptdan-yuan-ce-shi-kuang-jia-jasmine/)\n\n### jasmine环境配置\njasmine运行需要4个部分：\n1.运行时环境：基于浏览器，通过HTML作为javascript载体\n2.源文件：用于实现某种业务逻辑的文件，就是我们平时写的js脚本\n3.测试文件：符合jasmineAPI的测试js脚本\n4.输出结果：jasmine提供了基于网页的输出结果\n\n## Karma\n-----\n### Karma介绍\nKarma是一个基于Node.js的JavaScript测试执行过程管理工具（Test Runner）。\n该工具可用于测试所有主流Web浏览器，也可集成到CI（Continuous integration）工具，也可和其他代码编辑器一起使用。\n这个测试工具的一个强大特性就是，它可以监控(Watch)文件的变化，然后自行执行，通过console.log显示测试结果。\n\n### Karma安装\n安装karma和相关插件。\n``` cmd\nnpm install karma --save-dev\nnpm install karma-jasmine karma-chrome-launcher --save-dev\n```\n\n## 编写测试代码\n-----\n项目中有关测试环境的搭建在我们之前[Yaomen](http://blog.jobbole.com/65399/)的时候就解决了呢。\n\n### 控制器测试\n这里我们简述一下编写IndexCtrl控制器的代码：\n``` javascript\ndescribe('Controller: IndexCtrl', function () {\n  beforeEach(module('angularTestApp')); //注入module\n  var IndexCtrl, scope, rootscope;\n  beforeEach(inject(function ($controller, $rootScope) { //注入控制器和作用域\n    scope = $rootScope.$new();\n    IndexCtrl = $controller('IndexCtrl', {\n      $scope: scope\n    });\n  }));\n  it('should have loading to be init', function () {\n    expect(scope.loading).toBe('init');\n  });\n  it('should have 4 asidemenus', function () {\n    expect(scope.asidemenus.length).toBe(4);\n  });\n  it('should load photo', function () {\n  \texpect(scope.avatar).toBeUndefined();\n    scope.loadphoto('123');\n    expect(scope.avatar.length).toBe(3);\n  });\n});\n```\n\n## 结束语\n-----\n其它像Directive、Service等也是可以进行单元测试的哦，测试方法跟控制器，注入服务然后测试，小伙伴们也可以试试。","slug":"angular-note-11-karma-jasmine-test-create","published":1,"updated":"2016-07-30T03:03:20.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cirrwvo4g001k38l5sk0mlaeu","content":"<p>最近的一个项目使用AngularJS(v1.2.6)作为前端的框架，《Angular使用笔记》系列用于记录过程中的一些使用和解决方法。<br>本文记录使用Karma和Jasmine搭建测试环境的过程。<br><a id=\"more\"></a></p>\n<h2 id=\"TDD和BDD\"><a href=\"#TDD和BDD\" class=\"headerlink\" title=\"TDD和BDD\"></a>TDD和BDD</h2><hr>\n<h3 id=\"TDD\"><a href=\"#TDD\" class=\"headerlink\" title=\"TDD\"></a>TDD</h3><p>Test Drive Development，测试驱动开发。<br>大概的流程是先针对每个功能点抽象出接口代码，然后编写单元测试代码，接下来实现接口，运行单元测试代码，循环此过程，直到整个单元测试都通过。</p>\n<ul>\n<li>优点：<ul>\n<li>1.能驱使系统最终的实现代码，都可以被测试代码所覆盖到，也即“每一行代码都可测”。</li>\n<li>2.测试代码作为实现代码的正确导向，最终演变为正确系统的行为，能让整个开发过程更加高效。</li>\n</ul>\n</li>\n<li>不足<ul>\n<li>1.项目的需求必须足够清晰。</li>\n<li>2.对于一个业务模型及其复杂、内部模块之间的相互依赖性非常强的项目，采用TDD反而会得不尝失，这会导致程序员在拆分接口和写测试代码的时候工作量非常大。</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"BDD\"><a href=\"#BDD\" class=\"headerlink\" title=\"BDD\"></a>BDD</h3><p>Behavior Drive Development，行为驱动开发。<br>把TDD中模糊的那一部分给明确了，强调开发、测试、BA、客户等所有项目相关人员都用自然语言来描述系统的行为。<br>大家看到的描述一致，读到的内容一致，于是最终测试驱动开发产出的结果也应该是最符合用户期望的。</p>\n<h3 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h3><ul>\n<li><a href=\"http://www.cnblogs.com/wangshenhe/archive/2013/02/16/2913431.html\" target=\"_blank\" rel=\"external\">《[转]关于TDD、BDD和DDD的一些看法》</a></li>\n</ul>\n<h3 id=\"单元测试\"><a href=\"#单元测试\" class=\"headerlink\" title=\"单元测试\"></a>单元测试</h3><p>单元测试是一种测试你的项目中每个最小单元代码的艺术，是使你的程序思路清晰的基础。一旦所有的测试通过，这些零散的单元组合在一起也会运行的很好，因为这些单元的行为已经被独立的验证过了。</p>\n<h2 id=\"Jasmine\"><a href=\"#Jasmine\" class=\"headerlink\" title=\"Jasmine\"></a>Jasmine</h2><hr>\n<p>Jasmine是一个用来编写Javascript测试的框架，它不依赖于任何其它的javascript框架，也不需要对DOM。它有拥有灵巧而明确的语法可以让你轻松的编写测试代码。</p>\n<h3 id=\"jasmine基础语法\"><a href=\"#jasmine基础语法\" class=\"headerlink\" title=\"jasmine基础语法\"></a>jasmine基础语法</h3><p>jasmine单元测试有两个核心的部分：describe函数块和it函数块。</p>\n<ul>\n<li><p>Suites<br>Suites可以理解为一组测试用例，使用全局的Jasmin函数describe创建。describe函数接受两个参数，一个字符串和一个函数。字符串是这个Suites的名字或标题（通常描述下测试内容），函数是实现Suites的代码块。</p>\n</li>\n<li><p>Specs<br>Specs可以理解为一个测试用例，使用全局的Jasmin函数it创建。和describe一样接受两个参数，一个字符串和一个函数，函数就是要执行的测试代码，字符串就是测试用例的名字。一个Spec可以包含多个expectations来测试代码。</p>\n</li>\n<li><p>Expectations<br>Expectations由expect函数创建。接受一个参数。和Matcher一起联用，设置测试的预期值。</p>\n</li>\n</ul>\n<p>在分组(describe)中可以写多个测试用例(it)，也可以再进行分组(describe)，在测试用例(it)中定义期望表达式(expect)和匹配判断(toBe*)。</p>\n<ul>\n<li>内置Matchers</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">expect(a).toBe(<span class=\"literal\">true</span>);<span class=\"comment\">//期望变量a为true  </span></span><br><span class=\"line\">expect(a).toEqual(<span class=\"literal\">true</span>);<span class=\"comment\">//期望变量a等于true  </span></span><br><span class=\"line\">expect(a).toMatch(<span class=\"regexp\">/reg/</span>);<span class=\"comment\">//期望变量a匹配reg正则表达式，也可以是字符串  </span></span><br><span class=\"line\">expect(a.foo).toBeDefined();<span class=\"comment\">//期望a.foo已定义  </span></span><br><span class=\"line\">expect(a.foo).toBeUndefined();<span class=\"comment\">//期望a.foo未定义  </span></span><br><span class=\"line\">expect(a).toBeNull();<span class=\"comment\">//期望变量a为null  </span></span><br><span class=\"line\">expect(a.isMale).toBeTruthy();<span class=\"comment\">//期望a.isMale为真  </span></span><br><span class=\"line\">expect(a.isMale).toBeFalsy();<span class=\"comment\">//期望a.isMale为假  </span></span><br><span class=\"line\">expect(<span class=\"literal\">true</span>).toEqual(<span class=\"literal\">true</span>);<span class=\"comment\">//期望true等于true  </span></span><br><span class=\"line\">expect(a).toBeLessThan(b);<span class=\"comment\">//期望a小于b  </span></span><br><span class=\"line\">expect(a).toBeGreaterThan(b);<span class=\"comment\">//期望a大于b  </span></span><br><span class=\"line\">expect(a).toThrowError(<span class=\"regexp\">/reg/</span>);<span class=\"comment\">//期望a方法抛出异常，异常信息可以是字符串、正则表达式、错误类型以及错误类型和错误信息  </span></span><br><span class=\"line\">expect(a).toThrow();<span class=\"comment\">//期望a方法抛出异常  </span></span><br><span class=\"line\">expect(a).toContain(b);<span class=\"comment\">//期望a(数组或者对象)包含b</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li><p>Setup and Teardown<br>为了在复杂的测试用例中更加便于组装和拆卸，Jasmine提供了四个函数：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">beforeEach(<span class=\"function\"><span class=\"keyword\">function</span>)  //在每一个测试用例(<span class=\"params\">it</span>)执行之前都执行一遍<span class=\"title\">beforeEach</span>函数；  </span><br><span class=\"line\"><span class=\"title\">afterEach</span>(<span class=\"params\">function</span>)  //在每一个测试用例(<span class=\"params\">it</span>)执行完成之后都执行一遍<span class=\"title\">afterEach</span>函数；  </span><br><span class=\"line\"><span class=\"title\">beforeAll</span>(<span class=\"params\">function</span>)  //在所有测试用例执行之前执行一遍<span class=\"title\">beforeAll</span>函数；  </span><br><span class=\"line\"><span class=\"title\">afterAll</span>(<span class=\"params\">function</span>)  //在所有测试用例执行完成之后执行一遍<span class=\"title\">afterAll</span>函数；</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>this关键字<br>可以通过this关键字在beforeEach、afterEach和it之间共享变量，在beforeEach/afterEach/it中有一个共同的this对象。</p>\n</li>\n<li><p>参考<br><a href=\"http://ued.fanxing.com/javascriptdan-yuan-ce-shi-kuang-jia-jasmine/\" target=\"_blank\" rel=\"external\">《JavaScript单元测试框架——Jasmine入门》</a></p>\n</li>\n</ul>\n<h3 id=\"jasmine环境配置\"><a href=\"#jasmine环境配置\" class=\"headerlink\" title=\"jasmine环境配置\"></a>jasmine环境配置</h3><p>jasmine运行需要4个部分：<br>1.运行时环境：基于浏览器，通过HTML作为javascript载体<br>2.源文件：用于实现某种业务逻辑的文件，就是我们平时写的js脚本<br>3.测试文件：符合jasmineAPI的测试js脚本<br>4.输出结果：jasmine提供了基于网页的输出结果</p>\n<h2 id=\"Karma\"><a href=\"#Karma\" class=\"headerlink\" title=\"Karma\"></a>Karma</h2><hr>\n<h3 id=\"Karma介绍\"><a href=\"#Karma介绍\" class=\"headerlink\" title=\"Karma介绍\"></a>Karma介绍</h3><p>Karma是一个基于Node.js的JavaScript测试执行过程管理工具（Test Runner）。<br>该工具可用于测试所有主流Web浏览器，也可集成到CI（Continuous integration）工具，也可和其他代码编辑器一起使用。<br>这个测试工具的一个强大特性就是，它可以监控(Watch)文件的变化，然后自行执行，通过console.log显示测试结果。</p>\n<h3 id=\"Karma安装\"><a href=\"#Karma安装\" class=\"headerlink\" title=\"Karma安装\"></a>Karma安装</h3><p>安装karma和相关插件。<br><figure class=\"highlight cmd\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install karma --save-dev</span><br><span class=\"line\">npm install karma-jasmine karma-chrome-launcher --save-dev</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"编写测试代码\"><a href=\"#编写测试代码\" class=\"headerlink\" title=\"编写测试代码\"></a>编写测试代码</h2><hr>\n<p>项目中有关测试环境的搭建在我们之前<a href=\"http://blog.jobbole.com/65399/\" target=\"_blank\" rel=\"external\">Yaomen</a>的时候就解决了呢。</p>\n<h3 id=\"控制器测试\"><a href=\"#控制器测试\" class=\"headerlink\" title=\"控制器测试\"></a>控制器测试</h3><p>这里我们简述一下编写IndexCtrl控制器的代码：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">describe(<span class=\"string\">'Controller: IndexCtrl'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  beforeEach(<span class=\"built_in\">module</span>(<span class=\"string\">'angularTestApp'</span>)); <span class=\"comment\">//注入module</span></span><br><span class=\"line\">  <span class=\"keyword\">var</span> IndexCtrl, scope, rootscope;</span><br><span class=\"line\">  beforeEach(inject(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">$controller, $rootScope</span>) </span>&#123; <span class=\"comment\">//注入控制器和作用域</span></span><br><span class=\"line\">    scope = $rootScope.$<span class=\"keyword\">new</span>();</span><br><span class=\"line\">    IndexCtrl = $controller(<span class=\"string\">'IndexCtrl'</span>, &#123;</span><br><span class=\"line\">      $scope: scope</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;));</span><br><span class=\"line\">  it(<span class=\"string\">'should have loading to be init'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    expect(scope.loading).toBe(<span class=\"string\">'init'</span>);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">  it(<span class=\"string\">'should have 4 asidemenus'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    expect(scope.asidemenus.length).toBe(<span class=\"number\">4</span>);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">  it(<span class=\"string\">'should load photo'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  \texpect(scope.avatar).toBeUndefined();</span><br><span class=\"line\">    scope.loadphoto(<span class=\"string\">'123'</span>);</span><br><span class=\"line\">    expect(scope.avatar.length).toBe(<span class=\"number\">3</span>);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"结束语\"><a href=\"#结束语\" class=\"headerlink\" title=\"结束语\"></a>结束语</h2><hr>\n<p>其它像Directive、Service等也是可以进行单元测试的哦，测试方法跟控制器，注入服务然后测试，小伙伴们也可以试试。</p>\n","excerpt":"<p>最近的一个项目使用AngularJS(v1.2.6)作为前端的框架，《Angular使用笔记》系列用于记录过程中的一些使用和解决方法。<br>本文记录使用Karma和Jasmine搭建测试环境的过程。<br>","more":"</p>\n<h2 id=\"TDD和BDD\"><a href=\"#TDD和BDD\" class=\"headerlink\" title=\"TDD和BDD\"></a>TDD和BDD</h2><hr>\n<h3 id=\"TDD\"><a href=\"#TDD\" class=\"headerlink\" title=\"TDD\"></a>TDD</h3><p>Test Drive Development，测试驱动开发。<br>大概的流程是先针对每个功能点抽象出接口代码，然后编写单元测试代码，接下来实现接口，运行单元测试代码，循环此过程，直到整个单元测试都通过。</p>\n<ul>\n<li>优点：<ul>\n<li>1.能驱使系统最终的实现代码，都可以被测试代码所覆盖到，也即“每一行代码都可测”。</li>\n<li>2.测试代码作为实现代码的正确导向，最终演变为正确系统的行为，能让整个开发过程更加高效。</li>\n</ul>\n</li>\n<li>不足<ul>\n<li>1.项目的需求必须足够清晰。</li>\n<li>2.对于一个业务模型及其复杂、内部模块之间的相互依赖性非常强的项目，采用TDD反而会得不尝失，这会导致程序员在拆分接口和写测试代码的时候工作量非常大。</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"BDD\"><a href=\"#BDD\" class=\"headerlink\" title=\"BDD\"></a>BDD</h3><p>Behavior Drive Development，行为驱动开发。<br>把TDD中模糊的那一部分给明确了，强调开发、测试、BA、客户等所有项目相关人员都用自然语言来描述系统的行为。<br>大家看到的描述一致，读到的内容一致，于是最终测试驱动开发产出的结果也应该是最符合用户期望的。</p>\n<h3 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h3><ul>\n<li><a href=\"http://www.cnblogs.com/wangshenhe/archive/2013/02/16/2913431.html\">《[转]关于TDD、BDD和DDD的一些看法》</a></li>\n</ul>\n<h3 id=\"单元测试\"><a href=\"#单元测试\" class=\"headerlink\" title=\"单元测试\"></a>单元测试</h3><p>单元测试是一种测试你的项目中每个最小单元代码的艺术，是使你的程序思路清晰的基础。一旦所有的测试通过，这些零散的单元组合在一起也会运行的很好，因为这些单元的行为已经被独立的验证过了。</p>\n<h2 id=\"Jasmine\"><a href=\"#Jasmine\" class=\"headerlink\" title=\"Jasmine\"></a>Jasmine</h2><hr>\n<p>Jasmine是一个用来编写Javascript测试的框架，它不依赖于任何其它的javascript框架，也不需要对DOM。它有拥有灵巧而明确的语法可以让你轻松的编写测试代码。</p>\n<h3 id=\"jasmine基础语法\"><a href=\"#jasmine基础语法\" class=\"headerlink\" title=\"jasmine基础语法\"></a>jasmine基础语法</h3><p>jasmine单元测试有两个核心的部分：describe函数块和it函数块。</p>\n<ul>\n<li><p>Suites<br>Suites可以理解为一组测试用例，使用全局的Jasmin函数describe创建。describe函数接受两个参数，一个字符串和一个函数。字符串是这个Suites的名字或标题（通常描述下测试内容），函数是实现Suites的代码块。</p>\n</li>\n<li><p>Specs<br>Specs可以理解为一个测试用例，使用全局的Jasmin函数it创建。和describe一样接受两个参数，一个字符串和一个函数，函数就是要执行的测试代码，字符串就是测试用例的名字。一个Spec可以包含多个expectations来测试代码。</p>\n</li>\n<li><p>Expectations<br>Expectations由expect函数创建。接受一个参数。和Matcher一起联用，设置测试的预期值。</p>\n</li>\n</ul>\n<p>在分组(describe)中可以写多个测试用例(it)，也可以再进行分组(describe)，在测试用例(it)中定义期望表达式(expect)和匹配判断(toBe*)。</p>\n<ul>\n<li>内置Matchers</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">expect(a).toBe(<span class=\"literal\">true</span>);<span class=\"comment\">//期望变量a为true  </span></span><br><span class=\"line\">expect(a).toEqual(<span class=\"literal\">true</span>);<span class=\"comment\">//期望变量a等于true  </span></span><br><span class=\"line\">expect(a).toMatch(<span class=\"regexp\">/reg/</span>);<span class=\"comment\">//期望变量a匹配reg正则表达式，也可以是字符串  </span></span><br><span class=\"line\">expect(a.foo).toBeDefined();<span class=\"comment\">//期望a.foo已定义  </span></span><br><span class=\"line\">expect(a.foo).toBeUndefined();<span class=\"comment\">//期望a.foo未定义  </span></span><br><span class=\"line\">expect(a).toBeNull();<span class=\"comment\">//期望变量a为null  </span></span><br><span class=\"line\">expect(a.isMale).toBeTruthy();<span class=\"comment\">//期望a.isMale为真  </span></span><br><span class=\"line\">expect(a.isMale).toBeFalsy();<span class=\"comment\">//期望a.isMale为假  </span></span><br><span class=\"line\">expect(<span class=\"literal\">true</span>).toEqual(<span class=\"literal\">true</span>);<span class=\"comment\">//期望true等于true  </span></span><br><span class=\"line\">expect(a).toBeLessThan(b);<span class=\"comment\">//期望a小于b  </span></span><br><span class=\"line\">expect(a).toBeGreaterThan(b);<span class=\"comment\">//期望a大于b  </span></span><br><span class=\"line\">expect(a).toThrowError(<span class=\"regexp\">/reg/</span>);<span class=\"comment\">//期望a方法抛出异常，异常信息可以是字符串、正则表达式、错误类型以及错误类型和错误信息  </span></span><br><span class=\"line\">expect(a).toThrow();<span class=\"comment\">//期望a方法抛出异常  </span></span><br><span class=\"line\">expect(a).toContain(b);<span class=\"comment\">//期望a(数组或者对象)包含b</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li><p>Setup and Teardown<br>为了在复杂的测试用例中更加便于组装和拆卸，Jasmine提供了四个函数：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">beforeEach(<span class=\"function\"><span class=\"keyword\">function</span>)  //在每一个测试用例(<span class=\"params\">it</span>)执行之前都执行一遍<span class=\"title\">beforeEach</span>函数；  </span><br><span class=\"line\"><span class=\"title\">afterEach</span>(<span class=\"params\">function</span>)  //在每一个测试用例(<span class=\"params\">it</span>)执行完成之后都执行一遍<span class=\"title\">afterEach</span>函数；  </span><br><span class=\"line\"><span class=\"title\">beforeAll</span>(<span class=\"params\">function</span>)  //在所有测试用例执行之前执行一遍<span class=\"title\">beforeAll</span>函数；  </span><br><span class=\"line\"><span class=\"title\">afterAll</span>(<span class=\"params\">function</span>)  //在所有测试用例执行完成之后执行一遍<span class=\"title\">afterAll</span>函数；</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>this关键字<br>可以通过this关键字在beforeEach、afterEach和it之间共享变量，在beforeEach/afterEach/it中有一个共同的this对象。</p>\n</li>\n<li><p>参考<br><a href=\"http://ued.fanxing.com/javascriptdan-yuan-ce-shi-kuang-jia-jasmine/\">《JavaScript单元测试框架——Jasmine入门》</a></p>\n</li>\n</ul>\n<h3 id=\"jasmine环境配置\"><a href=\"#jasmine环境配置\" class=\"headerlink\" title=\"jasmine环境配置\"></a>jasmine环境配置</h3><p>jasmine运行需要4个部分：<br>1.运行时环境：基于浏览器，通过HTML作为javascript载体<br>2.源文件：用于实现某种业务逻辑的文件，就是我们平时写的js脚本<br>3.测试文件：符合jasmineAPI的测试js脚本<br>4.输出结果：jasmine提供了基于网页的输出结果</p>\n<h2 id=\"Karma\"><a href=\"#Karma\" class=\"headerlink\" title=\"Karma\"></a>Karma</h2><hr>\n<h3 id=\"Karma介绍\"><a href=\"#Karma介绍\" class=\"headerlink\" title=\"Karma介绍\"></a>Karma介绍</h3><p>Karma是一个基于Node.js的JavaScript测试执行过程管理工具（Test Runner）。<br>该工具可用于测试所有主流Web浏览器，也可集成到CI（Continuous integration）工具，也可和其他代码编辑器一起使用。<br>这个测试工具的一个强大特性就是，它可以监控(Watch)文件的变化，然后自行执行，通过console.log显示测试结果。</p>\n<h3 id=\"Karma安装\"><a href=\"#Karma安装\" class=\"headerlink\" title=\"Karma安装\"></a>Karma安装</h3><p>安装karma和相关插件。<br><figure class=\"highlight cmd\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install karma --save-dev</span><br><span class=\"line\">npm install karma-jasmine karma-chrome-launcher --save-dev</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"编写测试代码\"><a href=\"#编写测试代码\" class=\"headerlink\" title=\"编写测试代码\"></a>编写测试代码</h2><hr>\n<p>项目中有关测试环境的搭建在我们之前<a href=\"http://blog.jobbole.com/65399/\">Yaomen</a>的时候就解决了呢。</p>\n<h3 id=\"控制器测试\"><a href=\"#控制器测试\" class=\"headerlink\" title=\"控制器测试\"></a>控制器测试</h3><p>这里我们简述一下编写IndexCtrl控制器的代码：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">describe(<span class=\"string\">'Controller: IndexCtrl'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  beforeEach(<span class=\"built_in\">module</span>(<span class=\"string\">'angularTestApp'</span>)); <span class=\"comment\">//注入module</span></span><br><span class=\"line\">  <span class=\"keyword\">var</span> IndexCtrl, scope, rootscope;</span><br><span class=\"line\">  beforeEach(inject(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">$controller, $rootScope</span>) </span>&#123; <span class=\"comment\">//注入控制器和作用域</span></span><br><span class=\"line\">    scope = $rootScope.$<span class=\"keyword\">new</span>();</span><br><span class=\"line\">    IndexCtrl = $controller(<span class=\"string\">'IndexCtrl'</span>, &#123;</span><br><span class=\"line\">      $scope: scope</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;));</span><br><span class=\"line\">  it(<span class=\"string\">'should have loading to be init'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    expect(scope.loading).toBe(<span class=\"string\">'init'</span>);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">  it(<span class=\"string\">'should have 4 asidemenus'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    expect(scope.asidemenus.length).toBe(<span class=\"number\">4</span>);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">  it(<span class=\"string\">'should load photo'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  \texpect(scope.avatar).toBeUndefined();</span><br><span class=\"line\">    scope.loadphoto(<span class=\"string\">'123'</span>);</span><br><span class=\"line\">    expect(scope.avatar.length).toBe(<span class=\"number\">3</span>);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"结束语\"><a href=\"#结束语\" class=\"headerlink\" title=\"结束语\"></a>结束语</h2><hr>\n<p>其它像Directive、Service等也是可以进行单元测试的哦，测试方法跟控制器，注入服务然后测试，小伙伴们也可以试试。</p>"},{"title":"Angular使用笔记7--使用File API编写预览图片的指令","date":"2016-07-22T13:53:23.000Z","_content":"最近的一个项目使用AngularJS(v1.2.6)作为前端的框架，《Angular使用笔记》系列用于记录过程中的一些使用和解决方法。\n本文记录使用File API编写预览图片的指令的过程。\n<!--more-->\n## File API\n-----\n上一节我们已经稍微介绍了一下。\n### 有关File API\n- File接口提供了文件的信息，以及文件内容的存取方法\n- 对象可以用来获取某个文件的信息,还可以用来读取这个文件的内容\n- 通常情况下,File对象是来自用户在一个`<input>`元素上选择文件后返回的FileList对象,也可以是来自由拖放操作生成的 DataTransfer对象\n\n### 检查File API兼容性\n- window.File&&window.FileReader&&window.FileList&&window.Blob\n\n### 参考\n- [《HTML 5中的文件处理之FileAPI》](http://bulaoge.net/topic.blg?dmn=g3g4&tid=2344378#Content)\n- 以下内容主要来自该文章\n\n### FileList接口\n可以用来代表一组文件的JS对象，比如用户通过`input[type=\"file\"]`元素选中的本地文件列表\n``` javascript\n#FileList[index] // 得到第index个文件\n```\n\n### Blob接口\n用来代表一段二进制数据，并且允许我们通过JS对其数据以字节为单位进行“切割”\n``` javascript\n#Blob.size // 只读特性，数据的字节数  \n#Blob.slice(start, length) // 将当前文件切割并将结果返回 \n```\n\n### File接口\n用来代步一个文件，是从Blob接口继承而来的，并在此基础上增加了诸如文件名、MIME类型之类的特性\n``` javascript\n#File.size // 继承自Blob，意义同上  \n#File.slice(start, length) // 继承自Blob，意义同上  \n#File.name // 只读属性，文件名  \n#File.type // 只读属性，文件的MIME类型  \n#File.urn // 只读属性，代表该文件的URN，几乎用不到，暂且无视 \n```\n\n### FileReader\n提供读取文件的方法和事件，大多数情况下我们主要使用FileReader。\n- FileReader方法\n\n``` javascript\n#FileReader.readAsBinaryString(blob/file) // 以二进制格式读取文件内容  \n#FileReader.readAsText(file, [encoding]) // 以文本(及字符串)格式读取文件内容，并且可以强制选择文件编码  \n#FileReader.readAsDataURL(file) // 以DataURL格式读取文件内容  \n#FileReader.abort() // 终止读取操作 \n```\n\n- FileReader事件\n\n``` javascript\n#FileReader.onloadstart // 读取操作开始时触发  \n#FileReader.onload // 读取操作成功时触发  \n#FileReader.onloadend // 读取操作完成时触发(不论成功还是失败)  \n#FileReader.onprogress // 读取操作过程中触发  \n#FileReader.onabort // 读取操作被中断时触发  \n#FileReader.onerror // 读取操作失败时触发 \n```\n\n- FileReader属性\n\n``` javascript\n#FileReader.result // 读取的结果(二进制、文本或DataURL格式)  \n#FileReader.readyState // 读取操作的状态(EMPTY、LOADING、DONE)\n```\n\n## 编写预览图片的指令\n-----\n我们知道，在AngularJS中不推荐在控制器中添加DOM操作，所以我们将要把DOM封装到指令里面。\n在directives文件夹里添加otherDir.js文件，并在index启动页面中引入。\n\n### 添加模板\n模板很简单，也就是一个按钮。\n- 按钮的字可以自定义，这里使用了text变量\n- 该按钮里面需要将file input隐藏，故使用了样式input{display: none;}\n- 该按钮绑定了click事件，来触发选择图片的动作\n\n``` javascript\ntemplate: '<div class=\"file-input\" ng-click=\"click()\">' +\n\t'<a class=\"btn btn-default\">{{ text }}</a>' +\n\t'</div>',\n```\n\n### 设置作用域\n指令设置单独作用域，传入两个参数：\n- text: 使用@进行单向绑定，设置按钮显示的值\n- loadphoto： 使用=进行双向绑定，传入函数用于获取返回的图片url\n\n``` javascript\nscope: {\n\tloadphoto: \"=loadphoto\",\n\ttext: \"@text\",\n},\n```\n有关作用域可以参照[《Angular使用笔记5--作用域简单分析以及制作index页面》](https://godbasin.github.io/2016/07/16/angular-note-5-fullfill-index/)\n\n### 设置link函数\nlink函数里面主要为绑定click事件的处理。\n主要逻辑：\n- 从该指令根节点元素element中查找file input\n- 如果不存在则创建新的file input，如果已经存在则先移除再创建（使得可后续触发点击和change事件）\n- 给input绑定change事件，选中图片之后触发加载FileReader读取图片地址\n- 通过函数loadphoto返回图片地址\n- 设置好上述事件之后，即刻触发点击\n\n``` javascript\nlink: function(scope, element, attrs) {\n\tscope.click = function() {\n\t\t//从该指令根节点元素element中查找input\n\t\tvar $input = element[0].getElementsByTagName(\"input\");\n\t\t//如果已经存在则先移除input\n\t\tif ($input.length) {\n\t\t\telement[0].removeChild($input[0]);\n\t\t}\n\t\t//创建新的file input\n\t\t$input = document.createElement(\"input\");\n\t\t$input.setAttribute(\"type\", \"file\");\n\t\t$input.setAttribute(\"name\", \"file\");\n\t\t$input.setAttribute(\"accept\", \"image/*\");\n\t\t//将input添加进该指令根节点元素element中\n\t\telement[0].appendChild($input);\n\t\t//绑定click事件，取消事件的传播\n\t\t$input.addEventListener(\"click\", function() {\n\t\t\tevent.stopPropagation();\n\t\t});\n\t\t//绑定change事件，分析获取图片url\n\t\t$input.addEventListener(\"change\", function(e) {\n\t\t\tvar fReader = new FileReader(),\n\t\t\t\tfile = e.target.files[0];\n\t\t\tfReader.readAsDataURL(file); //获取图片url\n\t\t\tfReader.onload = function(e) {\n\t\t\t\tvar url = e.target.result;\n\t\t\t\tscope.loadphoto(url); //返回图片url\n\t\t\t};\n\t\t}, false);\n\t\t//即刻触发点击\n\t\t$timeout(function() {\n\t\t\t$input.click();\n\t\t});\n\n\t};\n},\n```\n\n## 使用预览图片的指令\n-----\n### 在index页面中添加指令\n- 在该页面设置头像对应模块添加该指令\n- 传入text参数以及loadphoto函数\n- 添加img用于展示图片，该img绑定ng-src，参数为avatar\n\n``` html\n<a file-input text=\"上传头像\" loadphoto=\"loadphoto\"></a>\n<img ng-src=\"{{ avatar }}\"  />\n```\n\n### 在IndexCtrl控制器中添加loadphoto函数逻辑\n``` javascript\n$scope.loadphoto = function(url){\n\t$scope.avatar = url; //将avatar变量设置为url\n}\n```\n\n### 最终效果\n如图：\n![image](http://o905ne85q.bkt.clouddn.com/DC13.tmp.png)\n\n## 结束语\n-----\n用file API实现图片预览已经成为一种流行方式了，可能如今对兼容性要求也没有很高的，当然对自己要求高的小伙伴们可以把兼容也做了，哈哈。\n[此处查看项目代码（仅包含app部分）](https://github.com/godbasin/godbasin.github.io/tree/blog-codes/angular-notes/7-load-image)\n[此处查看页面效果](http://o9grhhyar.bkt.clouddn.com/7-load-image/index.html#/index)","source":"_posts/angular-note-7-load-image.md","raw":"---\ntitle: Angular使用笔记7--使用File API编写预览图片的指令\ndate: 2016-07-22 21:53:23\ncategories: angular混搭\ntags: 笔记\n---\n最近的一个项目使用AngularJS(v1.2.6)作为前端的框架，《Angular使用笔记》系列用于记录过程中的一些使用和解决方法。\n本文记录使用File API编写预览图片的指令的过程。\n<!--more-->\n## File API\n-----\n上一节我们已经稍微介绍了一下。\n### 有关File API\n- File接口提供了文件的信息，以及文件内容的存取方法\n- 对象可以用来获取某个文件的信息,还可以用来读取这个文件的内容\n- 通常情况下,File对象是来自用户在一个`<input>`元素上选择文件后返回的FileList对象,也可以是来自由拖放操作生成的 DataTransfer对象\n\n### 检查File API兼容性\n- window.File&&window.FileReader&&window.FileList&&window.Blob\n\n### 参考\n- [《HTML 5中的文件处理之FileAPI》](http://bulaoge.net/topic.blg?dmn=g3g4&tid=2344378#Content)\n- 以下内容主要来自该文章\n\n### FileList接口\n可以用来代表一组文件的JS对象，比如用户通过`input[type=\"file\"]`元素选中的本地文件列表\n``` javascript\n#FileList[index] // 得到第index个文件\n```\n\n### Blob接口\n用来代表一段二进制数据，并且允许我们通过JS对其数据以字节为单位进行“切割”\n``` javascript\n#Blob.size // 只读特性，数据的字节数  \n#Blob.slice(start, length) // 将当前文件切割并将结果返回 \n```\n\n### File接口\n用来代步一个文件，是从Blob接口继承而来的，并在此基础上增加了诸如文件名、MIME类型之类的特性\n``` javascript\n#File.size // 继承自Blob，意义同上  \n#File.slice(start, length) // 继承自Blob，意义同上  \n#File.name // 只读属性，文件名  \n#File.type // 只读属性，文件的MIME类型  \n#File.urn // 只读属性，代表该文件的URN，几乎用不到，暂且无视 \n```\n\n### FileReader\n提供读取文件的方法和事件，大多数情况下我们主要使用FileReader。\n- FileReader方法\n\n``` javascript\n#FileReader.readAsBinaryString(blob/file) // 以二进制格式读取文件内容  \n#FileReader.readAsText(file, [encoding]) // 以文本(及字符串)格式读取文件内容，并且可以强制选择文件编码  \n#FileReader.readAsDataURL(file) // 以DataURL格式读取文件内容  \n#FileReader.abort() // 终止读取操作 \n```\n\n- FileReader事件\n\n``` javascript\n#FileReader.onloadstart // 读取操作开始时触发  \n#FileReader.onload // 读取操作成功时触发  \n#FileReader.onloadend // 读取操作完成时触发(不论成功还是失败)  \n#FileReader.onprogress // 读取操作过程中触发  \n#FileReader.onabort // 读取操作被中断时触发  \n#FileReader.onerror // 读取操作失败时触发 \n```\n\n- FileReader属性\n\n``` javascript\n#FileReader.result // 读取的结果(二进制、文本或DataURL格式)  \n#FileReader.readyState // 读取操作的状态(EMPTY、LOADING、DONE)\n```\n\n## 编写预览图片的指令\n-----\n我们知道，在AngularJS中不推荐在控制器中添加DOM操作，所以我们将要把DOM封装到指令里面。\n在directives文件夹里添加otherDir.js文件，并在index启动页面中引入。\n\n### 添加模板\n模板很简单，也就是一个按钮。\n- 按钮的字可以自定义，这里使用了text变量\n- 该按钮里面需要将file input隐藏，故使用了样式input{display: none;}\n- 该按钮绑定了click事件，来触发选择图片的动作\n\n``` javascript\ntemplate: '<div class=\"file-input\" ng-click=\"click()\">' +\n\t'<a class=\"btn btn-default\">{{ text }}</a>' +\n\t'</div>',\n```\n\n### 设置作用域\n指令设置单独作用域，传入两个参数：\n- text: 使用@进行单向绑定，设置按钮显示的值\n- loadphoto： 使用=进行双向绑定，传入函数用于获取返回的图片url\n\n``` javascript\nscope: {\n\tloadphoto: \"=loadphoto\",\n\ttext: \"@text\",\n},\n```\n有关作用域可以参照[《Angular使用笔记5--作用域简单分析以及制作index页面》](https://godbasin.github.io/2016/07/16/angular-note-5-fullfill-index/)\n\n### 设置link函数\nlink函数里面主要为绑定click事件的处理。\n主要逻辑：\n- 从该指令根节点元素element中查找file input\n- 如果不存在则创建新的file input，如果已经存在则先移除再创建（使得可后续触发点击和change事件）\n- 给input绑定change事件，选中图片之后触发加载FileReader读取图片地址\n- 通过函数loadphoto返回图片地址\n- 设置好上述事件之后，即刻触发点击\n\n``` javascript\nlink: function(scope, element, attrs) {\n\tscope.click = function() {\n\t\t//从该指令根节点元素element中查找input\n\t\tvar $input = element[0].getElementsByTagName(\"input\");\n\t\t//如果已经存在则先移除input\n\t\tif ($input.length) {\n\t\t\telement[0].removeChild($input[0]);\n\t\t}\n\t\t//创建新的file input\n\t\t$input = document.createElement(\"input\");\n\t\t$input.setAttribute(\"type\", \"file\");\n\t\t$input.setAttribute(\"name\", \"file\");\n\t\t$input.setAttribute(\"accept\", \"image/*\");\n\t\t//将input添加进该指令根节点元素element中\n\t\telement[0].appendChild($input);\n\t\t//绑定click事件，取消事件的传播\n\t\t$input.addEventListener(\"click\", function() {\n\t\t\tevent.stopPropagation();\n\t\t});\n\t\t//绑定change事件，分析获取图片url\n\t\t$input.addEventListener(\"change\", function(e) {\n\t\t\tvar fReader = new FileReader(),\n\t\t\t\tfile = e.target.files[0];\n\t\t\tfReader.readAsDataURL(file); //获取图片url\n\t\t\tfReader.onload = function(e) {\n\t\t\t\tvar url = e.target.result;\n\t\t\t\tscope.loadphoto(url); //返回图片url\n\t\t\t};\n\t\t}, false);\n\t\t//即刻触发点击\n\t\t$timeout(function() {\n\t\t\t$input.click();\n\t\t});\n\n\t};\n},\n```\n\n## 使用预览图片的指令\n-----\n### 在index页面中添加指令\n- 在该页面设置头像对应模块添加该指令\n- 传入text参数以及loadphoto函数\n- 添加img用于展示图片，该img绑定ng-src，参数为avatar\n\n``` html\n<a file-input text=\"上传头像\" loadphoto=\"loadphoto\"></a>\n<img ng-src=\"{{ avatar }}\"  />\n```\n\n### 在IndexCtrl控制器中添加loadphoto函数逻辑\n``` javascript\n$scope.loadphoto = function(url){\n\t$scope.avatar = url; //将avatar变量设置为url\n}\n```\n\n### 最终效果\n如图：\n![image](http://o905ne85q.bkt.clouddn.com/DC13.tmp.png)\n\n## 结束语\n-----\n用file API实现图片预览已经成为一种流行方式了，可能如今对兼容性要求也没有很高的，当然对自己要求高的小伙伴们可以把兼容也做了，哈哈。\n[此处查看项目代码（仅包含app部分）](https://github.com/godbasin/godbasin.github.io/tree/blog-codes/angular-notes/7-load-image)\n[此处查看页面效果](http://o9grhhyar.bkt.clouddn.com/7-load-image/index.html#/index)","slug":"angular-note-7-load-image","published":1,"updated":"2016-07-29T13:22:16.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cirrwvo4j001n38l5gddpke5t","content":"<p>最近的一个项目使用AngularJS(v1.2.6)作为前端的框架，《Angular使用笔记》系列用于记录过程中的一些使用和解决方法。<br>本文记录使用File API编写预览图片的指令的过程。<br><a id=\"more\"></a></p>\n<h2 id=\"File-API\"><a href=\"#File-API\" class=\"headerlink\" title=\"File API\"></a>File API</h2><hr>\n<p>上一节我们已经稍微介绍了一下。</p>\n<h3 id=\"有关File-API\"><a href=\"#有关File-API\" class=\"headerlink\" title=\"有关File API\"></a>有关File API</h3><ul>\n<li>File接口提供了文件的信息，以及文件内容的存取方法</li>\n<li>对象可以用来获取某个文件的信息,还可以用来读取这个文件的内容</li>\n<li>通常情况下,File对象是来自用户在一个<code>&lt;input&gt;</code>元素上选择文件后返回的FileList对象,也可以是来自由拖放操作生成的 DataTransfer对象</li>\n</ul>\n<h3 id=\"检查File-API兼容性\"><a href=\"#检查File-API兼容性\" class=\"headerlink\" title=\"检查File API兼容性\"></a>检查File API兼容性</h3><ul>\n<li>window.File&amp;&amp;window.FileReader&amp;&amp;window.FileList&amp;&amp;window.Blob</li>\n</ul>\n<h3 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h3><ul>\n<li><a href=\"http://bulaoge.net/topic.blg?dmn=g3g4&amp;tid=2344378#Content\" target=\"_blank\" rel=\"external\">《HTML 5中的文件处理之FileAPI》</a></li>\n<li>以下内容主要来自该文章</li>\n</ul>\n<h3 id=\"FileList接口\"><a href=\"#FileList接口\" class=\"headerlink\" title=\"FileList接口\"></a>FileList接口</h3><p>可以用来代表一组文件的JS对象，比如用户通过<code>input[type=&quot;file&quot;]</code>元素选中的本地文件列表<br><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#FileList[index] // 得到第index个文件</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"Blob接口\"><a href=\"#Blob接口\" class=\"headerlink\" title=\"Blob接口\"></a>Blob接口</h3><p>用来代表一段二进制数据，并且允许我们通过JS对其数据以字节为单位进行“切割”<br><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#Blob.size // 只读特性，数据的字节数  </span><br><span class=\"line\">#Blob.slice(start, length) // 将当前文件切割并将结果返回</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"File接口\"><a href=\"#File接口\" class=\"headerlink\" title=\"File接口\"></a>File接口</h3><p>用来代步一个文件，是从Blob接口继承而来的，并在此基础上增加了诸如文件名、MIME类型之类的特性<br><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#File.size // 继承自Blob，意义同上  </span><br><span class=\"line\">#File.slice(start, length) // 继承自Blob，意义同上  </span><br><span class=\"line\">#File.name // 只读属性，文件名  </span><br><span class=\"line\">#File.type // 只读属性，文件的MIME类型  </span><br><span class=\"line\">#File.urn // 只读属性，代表该文件的URN，几乎用不到，暂且无视</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"FileReader\"><a href=\"#FileReader\" class=\"headerlink\" title=\"FileReader\"></a>FileReader</h3><p>提供读取文件的方法和事件，大多数情况下我们主要使用FileReader。</p>\n<ul>\n<li>FileReader方法</li>\n</ul>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#FileReader.readAsBinaryString(blob/file) // 以二进制格式读取文件内容  </span><br><span class=\"line\">#FileReader.readAsText(file, [encoding]) // 以文本(及字符串)格式读取文件内容，并且可以强制选择文件编码  </span><br><span class=\"line\">#FileReader.readAsDataURL(file) // 以DataURL格式读取文件内容  </span><br><span class=\"line\">#FileReader.abort() // 终止读取操作</span><br></pre></td></tr></table></figure>\n<ul>\n<li>FileReader事件</li>\n</ul>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#FileReader.onloadstart // 读取操作开始时触发  </span><br><span class=\"line\">#FileReader.onload // 读取操作成功时触发  </span><br><span class=\"line\">#FileReader.onloadend // 读取操作完成时触发(不论成功还是失败)  </span><br><span class=\"line\">#FileReader.onprogress // 读取操作过程中触发  </span><br><span class=\"line\">#FileReader.onabort // 读取操作被中断时触发  </span><br><span class=\"line\">#FileReader.onerror // 读取操作失败时触发</span><br></pre></td></tr></table></figure>\n<ul>\n<li>FileReader属性</li>\n</ul>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#FileReader.result // 读取的结果(二进制、文本或DataURL格式)  </span><br><span class=\"line\">#FileReader.readyState // 读取操作的状态(EMPTY、LOADING、DONE)</span><br></pre></td></tr></table></figure>\n<h2 id=\"编写预览图片的指令\"><a href=\"#编写预览图片的指令\" class=\"headerlink\" title=\"编写预览图片的指令\"></a>编写预览图片的指令</h2><hr>\n<p>我们知道，在AngularJS中不推荐在控制器中添加DOM操作，所以我们将要把DOM封装到指令里面。<br>在directives文件夹里添加otherDir.js文件，并在index启动页面中引入。</p>\n<h3 id=\"添加模板\"><a href=\"#添加模板\" class=\"headerlink\" title=\"添加模板\"></a>添加模板</h3><p>模板很简单，也就是一个按钮。</p>\n<ul>\n<li>按钮的字可以自定义，这里使用了text变量</li>\n<li>该按钮里面需要将file input隐藏，故使用了样式input{display: none;}</li>\n<li>该按钮绑定了click事件，来触发选择图片的动作</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">template: <span class=\"string\">'&lt;div class=\"file-input\" ng-click=\"click()\"&gt;'</span> +</span><br><span class=\"line\">  <span class=\"string\">'&lt;a class=\"btn btn-default\"&gt;&#123;&#123; text &#125;&#125;&lt;/a&gt;'</span> +</span><br><span class=\"line\">  <span class=\"string\">'&lt;/div&gt;'</span>,</span><br></pre></td></tr></table></figure>\n<h3 id=\"设置作用域\"><a href=\"#设置作用域\" class=\"headerlink\" title=\"设置作用域\"></a>设置作用域</h3><p>指令设置单独作用域，传入两个参数：</p>\n<ul>\n<li>text: 使用@进行单向绑定，设置按钮显示的值</li>\n<li>loadphoto： 使用=进行双向绑定，传入函数用于获取返回的图片url</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">scope: &#123;</span><br><span class=\"line\">  loadphoto: <span class=\"string\">\"=loadphoto\"</span>,</span><br><span class=\"line\">  text: <span class=\"string\">\"@text\"</span>,</span><br><span class=\"line\">&#125;,</span><br></pre></td></tr></table></figure>\n<p>有关作用域可以参照<a href=\"https://godbasin.github.io/2016/07/16/angular-note-5-fullfill-index/\">《Angular使用笔记5–作用域简单分析以及制作index页面》</a></p>\n<h3 id=\"设置link函数\"><a href=\"#设置link函数\" class=\"headerlink\" title=\"设置link函数\"></a>设置link函数</h3><p>link函数里面主要为绑定click事件的处理。<br>主要逻辑：</p>\n<ul>\n<li>从该指令根节点元素element中查找file input</li>\n<li>如果不存在则创建新的file input，如果已经存在则先移除再创建（使得可后续触发点击和change事件）</li>\n<li>给input绑定change事件，选中图片之后触发加载FileReader读取图片地址</li>\n<li>通过函数loadphoto返回图片地址</li>\n<li>设置好上述事件之后，即刻触发点击</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">link: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">scope, element, attrs</span>) </span>&#123;</span><br><span class=\"line\">  scope.click = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//从该指令根节点元素element中查找input</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> $input = element[<span class=\"number\">0</span>].getElementsByTagName(<span class=\"string\">\"input\"</span>);</span><br><span class=\"line\">    <span class=\"comment\">//如果已经存在则先移除input</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> ($input.length) &#123;</span><br><span class=\"line\">      element[<span class=\"number\">0</span>].removeChild($input[<span class=\"number\">0</span>]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//创建新的file input</span></span><br><span class=\"line\">    $input = <span class=\"built_in\">document</span>.createElement(<span class=\"string\">\"input\"</span>);</span><br><span class=\"line\">    $input.setAttribute(<span class=\"string\">\"type\"</span>, <span class=\"string\">\"file\"</span>);</span><br><span class=\"line\">    $input.setAttribute(<span class=\"string\">\"name\"</span>, <span class=\"string\">\"file\"</span>);</span><br><span class=\"line\">    $input.setAttribute(<span class=\"string\">\"accept\"</span>, <span class=\"string\">\"image/*\"</span>);</span><br><span class=\"line\">    <span class=\"comment\">//将input添加进该指令根节点元素element中</span></span><br><span class=\"line\">    element[<span class=\"number\">0</span>].appendChild($input);</span><br><span class=\"line\">    <span class=\"comment\">//绑定click事件，取消事件的传播</span></span><br><span class=\"line\">    $input.addEventListener(<span class=\"string\">\"click\"</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">      event.stopPropagation();</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">    <span class=\"comment\">//绑定change事件，分析获取图片url</span></span><br><span class=\"line\">    $input.addEventListener(<span class=\"string\">\"change\"</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">e</span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">var</span> fReader = <span class=\"keyword\">new</span> FileReader(),</span><br><span class=\"line\">        file = e.target.files[<span class=\"number\">0</span>];</span><br><span class=\"line\">      fReader.readAsDataURL(file); <span class=\"comment\">//获取图片url</span></span><br><span class=\"line\">      fReader.onload = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">e</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> url = e.target.result;</span><br><span class=\"line\">        scope.loadphoto(url); <span class=\"comment\">//返回图片url</span></span><br><span class=\"line\">      &#125;;</span><br><span class=\"line\">    &#125;, <span class=\"literal\">false</span>);</span><br><span class=\"line\">    <span class=\"comment\">//即刻触发点击</span></span><br><span class=\"line\">    $timeout(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">      $input.click();</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">&#125;,</span><br></pre></td></tr></table></figure>\n<h2 id=\"使用预览图片的指令\"><a href=\"#使用预览图片的指令\" class=\"headerlink\" title=\"使用预览图片的指令\"></a>使用预览图片的指令</h2><hr>\n<h3 id=\"在index页面中添加指令\"><a href=\"#在index页面中添加指令\" class=\"headerlink\" title=\"在index页面中添加指令\"></a>在index页面中添加指令</h3><ul>\n<li>在该页面设置头像对应模块添加该指令</li>\n<li>传入text参数以及loadphoto函数</li>\n<li>添加img用于展示图片，该img绑定ng-src，参数为avatar</li>\n</ul>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">file-input</span> <span class=\"attr\">text</span>=<span class=\"string\">\"上传头像\"</span> <span class=\"attr\">loadphoto</span>=<span class=\"string\">\"loadphoto\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">ng-src</span>=<span class=\"string\">\"&#123;&#123; avatar &#125;&#125;\"</span>  /&gt;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"在IndexCtrl控制器中添加loadphoto函数逻辑\"><a href=\"#在IndexCtrl控制器中添加loadphoto函数逻辑\" class=\"headerlink\" title=\"在IndexCtrl控制器中添加loadphoto函数逻辑\"></a>在IndexCtrl控制器中添加loadphoto函数逻辑</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$scope.loadphoto = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">url</span>)</span>&#123;</span><br><span class=\"line\">  $scope.avatar = url; <span class=\"comment\">//将avatar变量设置为url</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"最终效果\"><a href=\"#最终效果\" class=\"headerlink\" title=\"最终效果\"></a>最终效果</h3><p>如图：<br><img src=\"http://o905ne85q.bkt.clouddn.com/DC13.tmp.png\" alt=\"image\"></p>\n<h2 id=\"结束语\"><a href=\"#结束语\" class=\"headerlink\" title=\"结束语\"></a>结束语</h2><hr>\n<p>用file API实现图片预览已经成为一种流行方式了，可能如今对兼容性要求也没有很高的，当然对自己要求高的小伙伴们可以把兼容也做了，哈哈。<br><a href=\"https://github.com/godbasin/godbasin.github.io/tree/blog-codes/angular-notes/7-load-image\" target=\"_blank\" rel=\"external\">此处查看项目代码（仅包含app部分）</a><br><a href=\"http://o9grhhyar.bkt.clouddn.com/7-load-image/index.html#/index\" target=\"_blank\" rel=\"external\">此处查看页面效果</a></p>\n","excerpt":"<p>最近的一个项目使用AngularJS(v1.2.6)作为前端的框架，《Angular使用笔记》系列用于记录过程中的一些使用和解决方法。<br>本文记录使用File API编写预览图片的指令的过程。<br>","more":"</p>\n<h2 id=\"File-API\"><a href=\"#File-API\" class=\"headerlink\" title=\"File API\"></a>File API</h2><hr>\n<p>上一节我们已经稍微介绍了一下。</p>\n<h3 id=\"有关File-API\"><a href=\"#有关File-API\" class=\"headerlink\" title=\"有关File API\"></a>有关File API</h3><ul>\n<li>File接口提供了文件的信息，以及文件内容的存取方法</li>\n<li>对象可以用来获取某个文件的信息,还可以用来读取这个文件的内容</li>\n<li>通常情况下,File对象是来自用户在一个<code>&lt;input&gt;</code>元素上选择文件后返回的FileList对象,也可以是来自由拖放操作生成的 DataTransfer对象</li>\n</ul>\n<h3 id=\"检查File-API兼容性\"><a href=\"#检查File-API兼容性\" class=\"headerlink\" title=\"检查File API兼容性\"></a>检查File API兼容性</h3><ul>\n<li>window.File&amp;&amp;window.FileReader&amp;&amp;window.FileList&amp;&amp;window.Blob</li>\n</ul>\n<h3 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h3><ul>\n<li><a href=\"http://bulaoge.net/topic.blg?dmn=g3g4&amp;tid=2344378#Content\">《HTML 5中的文件处理之FileAPI》</a></li>\n<li>以下内容主要来自该文章</li>\n</ul>\n<h3 id=\"FileList接口\"><a href=\"#FileList接口\" class=\"headerlink\" title=\"FileList接口\"></a>FileList接口</h3><p>可以用来代表一组文件的JS对象，比如用户通过<code>input[type=&quot;file&quot;]</code>元素选中的本地文件列表<br><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#FileList[index] // 得到第index个文件</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"Blob接口\"><a href=\"#Blob接口\" class=\"headerlink\" title=\"Blob接口\"></a>Blob接口</h3><p>用来代表一段二进制数据，并且允许我们通过JS对其数据以字节为单位进行“切割”<br><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#Blob.size // 只读特性，数据的字节数  </span><br><span class=\"line\">#Blob.slice(start, length) // 将当前文件切割并将结果返回</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"File接口\"><a href=\"#File接口\" class=\"headerlink\" title=\"File接口\"></a>File接口</h3><p>用来代步一个文件，是从Blob接口继承而来的，并在此基础上增加了诸如文件名、MIME类型之类的特性<br><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#File.size // 继承自Blob，意义同上  </span><br><span class=\"line\">#File.slice(start, length) // 继承自Blob，意义同上  </span><br><span class=\"line\">#File.name // 只读属性，文件名  </span><br><span class=\"line\">#File.type // 只读属性，文件的MIME类型  </span><br><span class=\"line\">#File.urn // 只读属性，代表该文件的URN，几乎用不到，暂且无视</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"FileReader\"><a href=\"#FileReader\" class=\"headerlink\" title=\"FileReader\"></a>FileReader</h3><p>提供读取文件的方法和事件，大多数情况下我们主要使用FileReader。</p>\n<ul>\n<li>FileReader方法</li>\n</ul>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#FileReader.readAsBinaryString(blob/file) // 以二进制格式读取文件内容  </span><br><span class=\"line\">#FileReader.readAsText(file, [encoding]) // 以文本(及字符串)格式读取文件内容，并且可以强制选择文件编码  </span><br><span class=\"line\">#FileReader.readAsDataURL(file) // 以DataURL格式读取文件内容  </span><br><span class=\"line\">#FileReader.abort() // 终止读取操作</span><br></pre></td></tr></table></figure>\n<ul>\n<li>FileReader事件</li>\n</ul>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#FileReader.onloadstart // 读取操作开始时触发  </span><br><span class=\"line\">#FileReader.onload // 读取操作成功时触发  </span><br><span class=\"line\">#FileReader.onloadend // 读取操作完成时触发(不论成功还是失败)  </span><br><span class=\"line\">#FileReader.onprogress // 读取操作过程中触发  </span><br><span class=\"line\">#FileReader.onabort // 读取操作被中断时触发  </span><br><span class=\"line\">#FileReader.onerror // 读取操作失败时触发</span><br></pre></td></tr></table></figure>\n<ul>\n<li>FileReader属性</li>\n</ul>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#FileReader.result // 读取的结果(二进制、文本或DataURL格式)  </span><br><span class=\"line\">#FileReader.readyState // 读取操作的状态(EMPTY、LOADING、DONE)</span><br></pre></td></tr></table></figure>\n<h2 id=\"编写预览图片的指令\"><a href=\"#编写预览图片的指令\" class=\"headerlink\" title=\"编写预览图片的指令\"></a>编写预览图片的指令</h2><hr>\n<p>我们知道，在AngularJS中不推荐在控制器中添加DOM操作，所以我们将要把DOM封装到指令里面。<br>在directives文件夹里添加otherDir.js文件，并在index启动页面中引入。</p>\n<h3 id=\"添加模板\"><a href=\"#添加模板\" class=\"headerlink\" title=\"添加模板\"></a>添加模板</h3><p>模板很简单，也就是一个按钮。</p>\n<ul>\n<li>按钮的字可以自定义，这里使用了text变量</li>\n<li>该按钮里面需要将file input隐藏，故使用了样式input{display: none;}</li>\n<li>该按钮绑定了click事件，来触发选择图片的动作</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">template: <span class=\"string\">'&lt;div class=\"file-input\" ng-click=\"click()\"&gt;'</span> +</span><br><span class=\"line\">  <span class=\"string\">'&lt;a class=\"btn btn-default\"&gt;&#123;&#123; text &#125;&#125;&lt;/a&gt;'</span> +</span><br><span class=\"line\">  <span class=\"string\">'&lt;/div&gt;'</span>,</span><br></pre></td></tr></table></figure>\n<h3 id=\"设置作用域\"><a href=\"#设置作用域\" class=\"headerlink\" title=\"设置作用域\"></a>设置作用域</h3><p>指令设置单独作用域，传入两个参数：</p>\n<ul>\n<li>text: 使用@进行单向绑定，设置按钮显示的值</li>\n<li>loadphoto： 使用=进行双向绑定，传入函数用于获取返回的图片url</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">scope: &#123;</span><br><span class=\"line\">  loadphoto: <span class=\"string\">\"=loadphoto\"</span>,</span><br><span class=\"line\">  text: <span class=\"string\">\"@text\"</span>,</span><br><span class=\"line\">&#125;,</span><br></pre></td></tr></table></figure>\n<p>有关作用域可以参照<a href=\"https://godbasin.github.io/2016/07/16/angular-note-5-fullfill-index/\">《Angular使用笔记5–作用域简单分析以及制作index页面》</a></p>\n<h3 id=\"设置link函数\"><a href=\"#设置link函数\" class=\"headerlink\" title=\"设置link函数\"></a>设置link函数</h3><p>link函数里面主要为绑定click事件的处理。<br>主要逻辑：</p>\n<ul>\n<li>从该指令根节点元素element中查找file input</li>\n<li>如果不存在则创建新的file input，如果已经存在则先移除再创建（使得可后续触发点击和change事件）</li>\n<li>给input绑定change事件，选中图片之后触发加载FileReader读取图片地址</li>\n<li>通过函数loadphoto返回图片地址</li>\n<li>设置好上述事件之后，即刻触发点击</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">link: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">scope, element, attrs</span>) </span>&#123;</span><br><span class=\"line\">  scope.click = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//从该指令根节点元素element中查找input</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> $input = element[<span class=\"number\">0</span>].getElementsByTagName(<span class=\"string\">\"input\"</span>);</span><br><span class=\"line\">    <span class=\"comment\">//如果已经存在则先移除input</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> ($input.length) &#123;</span><br><span class=\"line\">      element[<span class=\"number\">0</span>].removeChild($input[<span class=\"number\">0</span>]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//创建新的file input</span></span><br><span class=\"line\">    $input = <span class=\"built_in\">document</span>.createElement(<span class=\"string\">\"input\"</span>);</span><br><span class=\"line\">    $input.setAttribute(<span class=\"string\">\"type\"</span>, <span class=\"string\">\"file\"</span>);</span><br><span class=\"line\">    $input.setAttribute(<span class=\"string\">\"name\"</span>, <span class=\"string\">\"file\"</span>);</span><br><span class=\"line\">    $input.setAttribute(<span class=\"string\">\"accept\"</span>, <span class=\"string\">\"image/*\"</span>);</span><br><span class=\"line\">    <span class=\"comment\">//将input添加进该指令根节点元素element中</span></span><br><span class=\"line\">    element[<span class=\"number\">0</span>].appendChild($input);</span><br><span class=\"line\">    <span class=\"comment\">//绑定click事件，取消事件的传播</span></span><br><span class=\"line\">    $input.addEventListener(<span class=\"string\">\"click\"</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">      event.stopPropagation();</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">    <span class=\"comment\">//绑定change事件，分析获取图片url</span></span><br><span class=\"line\">    $input.addEventListener(<span class=\"string\">\"change\"</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">e</span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">var</span> fReader = <span class=\"keyword\">new</span> FileReader(),</span><br><span class=\"line\">        file = e.target.files[<span class=\"number\">0</span>];</span><br><span class=\"line\">      fReader.readAsDataURL(file); <span class=\"comment\">//获取图片url</span></span><br><span class=\"line\">      fReader.onload = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">e</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> url = e.target.result;</span><br><span class=\"line\">        scope.loadphoto(url); <span class=\"comment\">//返回图片url</span></span><br><span class=\"line\">      &#125;;</span><br><span class=\"line\">    &#125;, <span class=\"literal\">false</span>);</span><br><span class=\"line\">    <span class=\"comment\">//即刻触发点击</span></span><br><span class=\"line\">    $timeout(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">      $input.click();</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">&#125;,</span><br></pre></td></tr></table></figure>\n<h2 id=\"使用预览图片的指令\"><a href=\"#使用预览图片的指令\" class=\"headerlink\" title=\"使用预览图片的指令\"></a>使用预览图片的指令</h2><hr>\n<h3 id=\"在index页面中添加指令\"><a href=\"#在index页面中添加指令\" class=\"headerlink\" title=\"在index页面中添加指令\"></a>在index页面中添加指令</h3><ul>\n<li>在该页面设置头像对应模块添加该指令</li>\n<li>传入text参数以及loadphoto函数</li>\n<li>添加img用于展示图片，该img绑定ng-src，参数为avatar</li>\n</ul>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">file-input</span> <span class=\"attr\">text</span>=<span class=\"string\">\"上传头像\"</span> <span class=\"attr\">loadphoto</span>=<span class=\"string\">\"loadphoto\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">ng-src</span>=<span class=\"string\">\"&#123;&#123; avatar &#125;&#125;\"</span>  /&gt;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"在IndexCtrl控制器中添加loadphoto函数逻辑\"><a href=\"#在IndexCtrl控制器中添加loadphoto函数逻辑\" class=\"headerlink\" title=\"在IndexCtrl控制器中添加loadphoto函数逻辑\"></a>在IndexCtrl控制器中添加loadphoto函数逻辑</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$scope.loadphoto = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">url</span>)</span>&#123;</span><br><span class=\"line\">  $scope.avatar = url; <span class=\"comment\">//将avatar变量设置为url</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"最终效果\"><a href=\"#最终效果\" class=\"headerlink\" title=\"最终效果\"></a>最终效果</h3><p>如图：<br><img src=\"http://o905ne85q.bkt.clouddn.com/DC13.tmp.png\" alt=\"image\"></p>\n<h2 id=\"结束语\"><a href=\"#结束语\" class=\"headerlink\" title=\"结束语\"></a>结束语</h2><hr>\n<p>用file API实现图片预览已经成为一种流行方式了，可能如今对兼容性要求也没有很高的，当然对自己要求高的小伙伴们可以把兼容也做了，哈哈。<br><a href=\"https://github.com/godbasin/godbasin.github.io/tree/blog-codes/angular-notes/7-load-image\">此处查看项目代码（仅包含app部分）</a><br><a href=\"http://o9grhhyar.bkt.clouddn.com/7-load-image/index.html#/index\">此处查看页面效果</a></p>"},{"title":"Angular使用笔记5--作用域简单分析以及制作index页面","date":"2016-07-16T00:49:21.000Z","_content":"最近的一个项目使用AngularJS(v1.2.6)作为前端的框架，《Angular使用笔记》系列用于记录过程中的一些使用和解决方法。\n本文记录简单介绍作用域，以及制作首页的过程。\n<!--more-->\n## 有关angularJS作用域\n-----\n### rootscope相关执行过程\n- 调用compile(element)(scope)\n- 开始编译dom树，传递的element是应用的根节点（有ng-app属性的节点或者手动bootstrap的节点）\n- 传递的scope则是唯一的根作用域rootscope，与根节点对应\n- 通过scope.$apply(..)进行digest进行脏检查，开始一些初始化工作\n\n### Scope对象\n- 简单的JavaScript对象\n- 可以像对其他对象一样添加属性\n- Scope对象是用构造函数创建的\n- 从原型方法包括$watch，$apply和$digest方法，以及处理自定义事件（消息传递）的$on, $emit和$broadcaset方法\n\n### 监控对象属性\n- $watch方法\n  - $watch方法监听作用域变化\n  - $watch函数所做的工作其实就是作用域中变量和关联的监听函数的存储\n  - $watch指定如下两个函数，就可以创建一个监听器\n    - 一个监控函数，用于指定所关注的那部分数据。\n    - 一个监听函数，用于在数据变更的时候接受提示\n\n- $digest方法\n  - $digest方法进行脏检查，它执行了所有在作用域上注册过的监听器\n  - 当作用域里的变量发生变化时，调用$digest方法便会执行该作用域以及它的所有子作用域上的相关的监听函数\n  - $digest函数的作用是调用这个监控函数，并且比较它返回的值和上一次返回值的差异\n  - 如果不相同，监听器就是脏的，它的监听函数就应当被调用\n  - 内置的directive和controller内部都已经做了$apply操作\n\n- $eval方法\n  - $eval在作用域的上下文上执行代码\n  - 使用一个函数作参数，所做的事情是立即执行这个传入的函数，并且把作用域自身当作参数传递给它，返回的是这个函数的返回值\n\n- $apply方法\n  - 使用一个函数作参数，用$eval执行这个函数，然后通过$digest触发digest循环\n  - 在$apply中，$digest的调用放置于finally块中，以确保即使函数抛出异常，也会执行digest\n\n### 作用域树\n- 普通的作用域通过原型链实现了继承关系，孤立作用域没有任何继承关系\n- 所有的作用域之间（也包括孤立作用域）根据自身所处的位置都存在以下这些关系\n  - $root来访问跟作用域\n  - $parent来访问父作用域\n  - $childHead（$childTail）访问头（尾）子作用域\n  - prevSibling（$nextSibling）访问前（后）一个兄弟作用域\n\n### 参考\n- [《构建自己的AngularJS，第一部分：作用域和digest》](http://www.ituring.com.cn/article/39865)\n- [《angularjs1.3.0源码解析之scope》](http://www.html-js.com/article/2365)\n\n## 制作index页面\n-----\n页面结构如下：\n![image](http://o905ne85q.bkt.clouddn.com/F3A2.tmp.png)\n\n### 添加index控制器\n- 在scripts文件夹内添加一个indexCtrl.js文件，并添加控制器\n\n``` javascript\napp.controller('IndexCtrl', ['$scope',function($scope) {}]);\n```\n- 在app.js文件中对应路由添加上控制器\n\n``` javascript\n.when('/index', {\n\ttemplateUrl: 'views/index.html', //index的html页面\n\tcontroller: 'IndexCtrl' //index的控制器，现在暂时不加\n})\n```\n- 在index.html页面内引入indexCtrl.js文件\n\n### 添加侧边菜单\n- 使用bootstrap的列表组作为侧边菜单\n- 使用bootstrap的Collapse插件实现展开和收缩菜单\n- 菜单使用ng-repeat遍历生成，故需在控制器中加入相关的内容使其生成相应菜单，此处使用scope.asidemenus\n\n### 添加页面内容\n- 在index页面中添加页面内容\n- 使用统一样式添加页面内容\n- 使用scope.loading设置当前内容\n- 使用ng-show绑定scope.loading设置相应显示内容\n- 使用ng-click绑定菜单事件，改变scope.loading来实现内容切换\n\n### 控制器逻辑\n- 使用$scope.loading储存当前位置\n- 使用$scope.asidemenus储存侧边菜单，包括以下参数\n  - title: string，一级菜单的名称\n  - click: function对象，点击菜单时绑定的事件\n  - menus: obj对象，一级菜单下的二级菜单\n    - title: string，二级菜单的名称\n    - click: function对象，点击菜单时绑定的事件\n``` javascript\napp.controller('IndexCtrl', ['$scope', function($scope) {\n\t$scope.loading = 'init'; //$scope.loading储存当前位置\n\t$scope.asidemenus = [{\n\t\ttitle: '', //一级菜单的名称\n\t\tclick: function() {}, //点击菜单时绑定的事件\n\t\tmenus: [{ //二级菜单\n\t\t\ttext: '', //二级菜单的名称\n\t\t\tclick: function() {} //点击菜单时绑定的事件\n\t\t}]\n\t}];\n}]);\n```\n\n## 结束语\n-----\nAngularJS中用得最爽的莫过于模板引擎的数据和事件绑定了，当你熟悉了angular之后你会喜欢上他的哦。\n[此处查看项目代码（仅包含app部分）](https://github.com/godbasin/godbasin.github.io/tree/blog-codes/angular-notes/5-fullfill-index)\n[此处查看页面效果](http://o9grhhyar.bkt.clouddn.com/5-fullfill-index/index.html#/index)","source":"_posts/angular-note-5-fullfill-index.md","raw":"---\ntitle: Angular使用笔记5--作用域简单分析以及制作index页面\ndate: 2016-07-16 08:49:21\ncategories: angular混搭\ntags: 笔记\n---\n最近的一个项目使用AngularJS(v1.2.6)作为前端的框架，《Angular使用笔记》系列用于记录过程中的一些使用和解决方法。\n本文记录简单介绍作用域，以及制作首页的过程。\n<!--more-->\n## 有关angularJS作用域\n-----\n### rootscope相关执行过程\n- 调用compile(element)(scope)\n- 开始编译dom树，传递的element是应用的根节点（有ng-app属性的节点或者手动bootstrap的节点）\n- 传递的scope则是唯一的根作用域rootscope，与根节点对应\n- 通过scope.$apply(..)进行digest进行脏检查，开始一些初始化工作\n\n### Scope对象\n- 简单的JavaScript对象\n- 可以像对其他对象一样添加属性\n- Scope对象是用构造函数创建的\n- 从原型方法包括$watch，$apply和$digest方法，以及处理自定义事件（消息传递）的$on, $emit和$broadcaset方法\n\n### 监控对象属性\n- $watch方法\n  - $watch方法监听作用域变化\n  - $watch函数所做的工作其实就是作用域中变量和关联的监听函数的存储\n  - $watch指定如下两个函数，就可以创建一个监听器\n    - 一个监控函数，用于指定所关注的那部分数据。\n    - 一个监听函数，用于在数据变更的时候接受提示\n\n- $digest方法\n  - $digest方法进行脏检查，它执行了所有在作用域上注册过的监听器\n  - 当作用域里的变量发生变化时，调用$digest方法便会执行该作用域以及它的所有子作用域上的相关的监听函数\n  - $digest函数的作用是调用这个监控函数，并且比较它返回的值和上一次返回值的差异\n  - 如果不相同，监听器就是脏的，它的监听函数就应当被调用\n  - 内置的directive和controller内部都已经做了$apply操作\n\n- $eval方法\n  - $eval在作用域的上下文上执行代码\n  - 使用一个函数作参数，所做的事情是立即执行这个传入的函数，并且把作用域自身当作参数传递给它，返回的是这个函数的返回值\n\n- $apply方法\n  - 使用一个函数作参数，用$eval执行这个函数，然后通过$digest触发digest循环\n  - 在$apply中，$digest的调用放置于finally块中，以确保即使函数抛出异常，也会执行digest\n\n### 作用域树\n- 普通的作用域通过原型链实现了继承关系，孤立作用域没有任何继承关系\n- 所有的作用域之间（也包括孤立作用域）根据自身所处的位置都存在以下这些关系\n  - $root来访问跟作用域\n  - $parent来访问父作用域\n  - $childHead（$childTail）访问头（尾）子作用域\n  - prevSibling（$nextSibling）访问前（后）一个兄弟作用域\n\n### 参考\n- [《构建自己的AngularJS，第一部分：作用域和digest》](http://www.ituring.com.cn/article/39865)\n- [《angularjs1.3.0源码解析之scope》](http://www.html-js.com/article/2365)\n\n## 制作index页面\n-----\n页面结构如下：\n![image](http://o905ne85q.bkt.clouddn.com/F3A2.tmp.png)\n\n### 添加index控制器\n- 在scripts文件夹内添加一个indexCtrl.js文件，并添加控制器\n\n``` javascript\napp.controller('IndexCtrl', ['$scope',function($scope) {}]);\n```\n- 在app.js文件中对应路由添加上控制器\n\n``` javascript\n.when('/index', {\n\ttemplateUrl: 'views/index.html', //index的html页面\n\tcontroller: 'IndexCtrl' //index的控制器，现在暂时不加\n})\n```\n- 在index.html页面内引入indexCtrl.js文件\n\n### 添加侧边菜单\n- 使用bootstrap的列表组作为侧边菜单\n- 使用bootstrap的Collapse插件实现展开和收缩菜单\n- 菜单使用ng-repeat遍历生成，故需在控制器中加入相关的内容使其生成相应菜单，此处使用scope.asidemenus\n\n### 添加页面内容\n- 在index页面中添加页面内容\n- 使用统一样式添加页面内容\n- 使用scope.loading设置当前内容\n- 使用ng-show绑定scope.loading设置相应显示内容\n- 使用ng-click绑定菜单事件，改变scope.loading来实现内容切换\n\n### 控制器逻辑\n- 使用$scope.loading储存当前位置\n- 使用$scope.asidemenus储存侧边菜单，包括以下参数\n  - title: string，一级菜单的名称\n  - click: function对象，点击菜单时绑定的事件\n  - menus: obj对象，一级菜单下的二级菜单\n    - title: string，二级菜单的名称\n    - click: function对象，点击菜单时绑定的事件\n``` javascript\napp.controller('IndexCtrl', ['$scope', function($scope) {\n\t$scope.loading = 'init'; //$scope.loading储存当前位置\n\t$scope.asidemenus = [{\n\t\ttitle: '', //一级菜单的名称\n\t\tclick: function() {}, //点击菜单时绑定的事件\n\t\tmenus: [{ //二级菜单\n\t\t\ttext: '', //二级菜单的名称\n\t\t\tclick: function() {} //点击菜单时绑定的事件\n\t\t}]\n\t}];\n}]);\n```\n\n## 结束语\n-----\nAngularJS中用得最爽的莫过于模板引擎的数据和事件绑定了，当你熟悉了angular之后你会喜欢上他的哦。\n[此处查看项目代码（仅包含app部分）](https://github.com/godbasin/godbasin.github.io/tree/blog-codes/angular-notes/5-fullfill-index)\n[此处查看页面效果](http://o9grhhyar.bkt.clouddn.com/5-fullfill-index/index.html#/index)","slug":"angular-note-5-fullfill-index","published":1,"updated":"2016-07-29T13:25:03.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cirrwvo4n001q38l5c7vfr9g6","content":"<p>最近的一个项目使用AngularJS(v1.2.6)作为前端的框架，《Angular使用笔记》系列用于记录过程中的一些使用和解决方法。<br>本文记录简单介绍作用域，以及制作首页的过程。<br><a id=\"more\"></a></p>\n<h2 id=\"有关angularJS作用域\"><a href=\"#有关angularJS作用域\" class=\"headerlink\" title=\"有关angularJS作用域\"></a>有关angularJS作用域</h2><hr>\n<h3 id=\"rootscope相关执行过程\"><a href=\"#rootscope相关执行过程\" class=\"headerlink\" title=\"rootscope相关执行过程\"></a>rootscope相关执行过程</h3><ul>\n<li>调用compile(element)(scope)</li>\n<li>开始编译dom树，传递的element是应用的根节点（有ng-app属性的节点或者手动bootstrap的节点）</li>\n<li>传递的scope则是唯一的根作用域rootscope，与根节点对应</li>\n<li>通过scope.$apply(..)进行digest进行脏检查，开始一些初始化工作</li>\n</ul>\n<h3 id=\"Scope对象\"><a href=\"#Scope对象\" class=\"headerlink\" title=\"Scope对象\"></a>Scope对象</h3><ul>\n<li>简单的JavaScript对象</li>\n<li>可以像对其他对象一样添加属性</li>\n<li>Scope对象是用构造函数创建的</li>\n<li>从原型方法包括$watch，$apply和$digest方法，以及处理自定义事件（消息传递）的$on, $emit和$broadcaset方法</li>\n</ul>\n<h3 id=\"监控对象属性\"><a href=\"#监控对象属性\" class=\"headerlink\" title=\"监控对象属性\"></a>监控对象属性</h3><ul>\n<li><p>$watch方法</p>\n<ul>\n<li>$watch方法监听作用域变化</li>\n<li>$watch函数所做的工作其实就是作用域中变量和关联的监听函数的存储</li>\n<li>$watch指定如下两个函数，就可以创建一个监听器<ul>\n<li>一个监控函数，用于指定所关注的那部分数据。</li>\n<li>一个监听函数，用于在数据变更的时候接受提示</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>$digest方法</p>\n<ul>\n<li>$digest方法进行脏检查，它执行了所有在作用域上注册过的监听器</li>\n<li>当作用域里的变量发生变化时，调用$digest方法便会执行该作用域以及它的所有子作用域上的相关的监听函数</li>\n<li>$digest函数的作用是调用这个监控函数，并且比较它返回的值和上一次返回值的差异</li>\n<li>如果不相同，监听器就是脏的，它的监听函数就应当被调用</li>\n<li>内置的directive和controller内部都已经做了$apply操作</li>\n</ul>\n</li>\n<li><p>$eval方法</p>\n<ul>\n<li>$eval在作用域的上下文上执行代码</li>\n<li>使用一个函数作参数，所做的事情是立即执行这个传入的函数，并且把作用域自身当作参数传递给它，返回的是这个函数的返回值</li>\n</ul>\n</li>\n<li><p>$apply方法</p>\n<ul>\n<li>使用一个函数作参数，用$eval执行这个函数，然后通过$digest触发digest循环</li>\n<li>在$apply中，$digest的调用放置于finally块中，以确保即使函数抛出异常，也会执行digest</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"作用域树\"><a href=\"#作用域树\" class=\"headerlink\" title=\"作用域树\"></a>作用域树</h3><ul>\n<li>普通的作用域通过原型链实现了继承关系，孤立作用域没有任何继承关系</li>\n<li>所有的作用域之间（也包括孤立作用域）根据自身所处的位置都存在以下这些关系<ul>\n<li>$root来访问跟作用域</li>\n<li>$parent来访问父作用域</li>\n<li>$childHead（$childTail）访问头（尾）子作用域</li>\n<li>prevSibling（$nextSibling）访问前（后）一个兄弟作用域</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h3><ul>\n<li><a href=\"http://www.ituring.com.cn/article/39865\" target=\"_blank\" rel=\"external\">《构建自己的AngularJS，第一部分：作用域和digest》</a></li>\n<li><a href=\"http://www.html-js.com/article/2365\" target=\"_blank\" rel=\"external\">《angularjs1.3.0源码解析之scope》</a></li>\n</ul>\n<h2 id=\"制作index页面\"><a href=\"#制作index页面\" class=\"headerlink\" title=\"制作index页面\"></a>制作index页面</h2><hr>\n<p>页面结构如下：<br><img src=\"http://o905ne85q.bkt.clouddn.com/F3A2.tmp.png\" alt=\"image\"></p>\n<h3 id=\"添加index控制器\"><a href=\"#添加index控制器\" class=\"headerlink\" title=\"添加index控制器\"></a>添加index控制器</h3><ul>\n<li>在scripts文件夹内添加一个indexCtrl.js文件，并添加控制器</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">app.controller(<span class=\"string\">'IndexCtrl'</span>, [<span class=\"string\">'$scope'</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">$scope</span>) </span>&#123;&#125;]);</span><br></pre></td></tr></table></figure>\n<ul>\n<li>在app.js文件中对应路由添加上控制器</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.when(<span class=\"string\">'/index'</span>, &#123;</span><br><span class=\"line\">  templateUrl: <span class=\"string\">'views/index.html'</span>, <span class=\"comment\">//index的html页面</span></span><br><span class=\"line\">  controller: <span class=\"string\">'IndexCtrl'</span> <span class=\"comment\">//index的控制器，现在暂时不加</span></span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<ul>\n<li>在index.html页面内引入indexCtrl.js文件</li>\n</ul>\n<h3 id=\"添加侧边菜单\"><a href=\"#添加侧边菜单\" class=\"headerlink\" title=\"添加侧边菜单\"></a>添加侧边菜单</h3><ul>\n<li>使用bootstrap的列表组作为侧边菜单</li>\n<li>使用bootstrap的Collapse插件实现展开和收缩菜单</li>\n<li>菜单使用ng-repeat遍历生成，故需在控制器中加入相关的内容使其生成相应菜单，此处使用scope.asidemenus</li>\n</ul>\n<h3 id=\"添加页面内容\"><a href=\"#添加页面内容\" class=\"headerlink\" title=\"添加页面内容\"></a>添加页面内容</h3><ul>\n<li>在index页面中添加页面内容</li>\n<li>使用统一样式添加页面内容</li>\n<li>使用scope.loading设置当前内容</li>\n<li>使用ng-show绑定scope.loading设置相应显示内容</li>\n<li>使用ng-click绑定菜单事件，改变scope.loading来实现内容切换</li>\n</ul>\n<h3 id=\"控制器逻辑\"><a href=\"#控制器逻辑\" class=\"headerlink\" title=\"控制器逻辑\"></a>控制器逻辑</h3><ul>\n<li>使用$scope.loading储存当前位置</li>\n<li>使用$scope.asidemenus储存侧边菜单，包括以下参数<ul>\n<li>title: string，一级菜单的名称</li>\n<li>click: function对象，点击菜单时绑定的事件</li>\n<li>menus: obj对象，一级菜单下的二级菜单<ul>\n<li>title: string，二级菜单的名称</li>\n<li>click: function对象，点击菜单时绑定的事件<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">app.controller(<span class=\"string\">'IndexCtrl'</span>, [<span class=\"string\">'$scope'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">$scope</span>) </span>&#123;</span><br><span class=\"line\">  $scope.loading = <span class=\"string\">'init'</span>; <span class=\"comment\">//$scope.loading储存当前位置</span></span><br><span class=\"line\">  $scope.asidemenus = [&#123;</span><br><span class=\"line\">    title: <span class=\"string\">''</span>, <span class=\"comment\">//一级菜单的名称</span></span><br><span class=\"line\">    click: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;&#125;, <span class=\"comment\">//点击菜单时绑定的事件</span></span><br><span class=\"line\">    menus: [&#123; <span class=\"comment\">//二级菜单</span></span><br><span class=\"line\">      text: <span class=\"string\">''</span>, <span class=\"comment\">//二级菜单的名称</span></span><br><span class=\"line\">      click: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;&#125; <span class=\"comment\">//点击菜单时绑定的事件</span></span><br><span class=\"line\">    &#125;]</span><br><span class=\"line\">  &#125;];</span><br><span class=\"line\">&#125;]);</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"结束语\"><a href=\"#结束语\" class=\"headerlink\" title=\"结束语\"></a>结束语</h2><hr>\n<p>AngularJS中用得最爽的莫过于模板引擎的数据和事件绑定了，当你熟悉了angular之后你会喜欢上他的哦。<br><a href=\"https://github.com/godbasin/godbasin.github.io/tree/blog-codes/angular-notes/5-fullfill-index\" target=\"_blank\" rel=\"external\">此处查看项目代码（仅包含app部分）</a><br><a href=\"http://o9grhhyar.bkt.clouddn.com/5-fullfill-index/index.html#/index\" target=\"_blank\" rel=\"external\">此处查看页面效果</a></p>\n","excerpt":"<p>最近的一个项目使用AngularJS(v1.2.6)作为前端的框架，《Angular使用笔记》系列用于记录过程中的一些使用和解决方法。<br>本文记录简单介绍作用域，以及制作首页的过程。<br>","more":"</p>\n<h2 id=\"有关angularJS作用域\"><a href=\"#有关angularJS作用域\" class=\"headerlink\" title=\"有关angularJS作用域\"></a>有关angularJS作用域</h2><hr>\n<h3 id=\"rootscope相关执行过程\"><a href=\"#rootscope相关执行过程\" class=\"headerlink\" title=\"rootscope相关执行过程\"></a>rootscope相关执行过程</h3><ul>\n<li>调用compile(element)(scope)</li>\n<li>开始编译dom树，传递的element是应用的根节点（有ng-app属性的节点或者手动bootstrap的节点）</li>\n<li>传递的scope则是唯一的根作用域rootscope，与根节点对应</li>\n<li>通过scope.$apply(..)进行digest进行脏检查，开始一些初始化工作</li>\n</ul>\n<h3 id=\"Scope对象\"><a href=\"#Scope对象\" class=\"headerlink\" title=\"Scope对象\"></a>Scope对象</h3><ul>\n<li>简单的JavaScript对象</li>\n<li>可以像对其他对象一样添加属性</li>\n<li>Scope对象是用构造函数创建的</li>\n<li>从原型方法包括$watch，$apply和$digest方法，以及处理自定义事件（消息传递）的$on, $emit和$broadcaset方法</li>\n</ul>\n<h3 id=\"监控对象属性\"><a href=\"#监控对象属性\" class=\"headerlink\" title=\"监控对象属性\"></a>监控对象属性</h3><ul>\n<li><p>$watch方法</p>\n<ul>\n<li>$watch方法监听作用域变化</li>\n<li>$watch函数所做的工作其实就是作用域中变量和关联的监听函数的存储</li>\n<li>$watch指定如下两个函数，就可以创建一个监听器<ul>\n<li>一个监控函数，用于指定所关注的那部分数据。</li>\n<li>一个监听函数，用于在数据变更的时候接受提示</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>$digest方法</p>\n<ul>\n<li>$digest方法进行脏检查，它执行了所有在作用域上注册过的监听器</li>\n<li>当作用域里的变量发生变化时，调用$digest方法便会执行该作用域以及它的所有子作用域上的相关的监听函数</li>\n<li>$digest函数的作用是调用这个监控函数，并且比较它返回的值和上一次返回值的差异</li>\n<li>如果不相同，监听器就是脏的，它的监听函数就应当被调用</li>\n<li>内置的directive和controller内部都已经做了$apply操作</li>\n</ul>\n</li>\n<li><p>$eval方法</p>\n<ul>\n<li>$eval在作用域的上下文上执行代码</li>\n<li>使用一个函数作参数，所做的事情是立即执行这个传入的函数，并且把作用域自身当作参数传递给它，返回的是这个函数的返回值</li>\n</ul>\n</li>\n<li><p>$apply方法</p>\n<ul>\n<li>使用一个函数作参数，用$eval执行这个函数，然后通过$digest触发digest循环</li>\n<li>在$apply中，$digest的调用放置于finally块中，以确保即使函数抛出异常，也会执行digest</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"作用域树\"><a href=\"#作用域树\" class=\"headerlink\" title=\"作用域树\"></a>作用域树</h3><ul>\n<li>普通的作用域通过原型链实现了继承关系，孤立作用域没有任何继承关系</li>\n<li>所有的作用域之间（也包括孤立作用域）根据自身所处的位置都存在以下这些关系<ul>\n<li>$root来访问跟作用域</li>\n<li>$parent来访问父作用域</li>\n<li>$childHead（$childTail）访问头（尾）子作用域</li>\n<li>prevSibling（$nextSibling）访问前（后）一个兄弟作用域</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h3><ul>\n<li><a href=\"http://www.ituring.com.cn/article/39865\">《构建自己的AngularJS，第一部分：作用域和digest》</a></li>\n<li><a href=\"http://www.html-js.com/article/2365\">《angularjs1.3.0源码解析之scope》</a></li>\n</ul>\n<h2 id=\"制作index页面\"><a href=\"#制作index页面\" class=\"headerlink\" title=\"制作index页面\"></a>制作index页面</h2><hr>\n<p>页面结构如下：<br><img src=\"http://o905ne85q.bkt.clouddn.com/F3A2.tmp.png\" alt=\"image\"></p>\n<h3 id=\"添加index控制器\"><a href=\"#添加index控制器\" class=\"headerlink\" title=\"添加index控制器\"></a>添加index控制器</h3><ul>\n<li>在scripts文件夹内添加一个indexCtrl.js文件，并添加控制器</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">app.controller(<span class=\"string\">'IndexCtrl'</span>, [<span class=\"string\">'$scope'</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">$scope</span>) </span>&#123;&#125;]);</span><br></pre></td></tr></table></figure>\n<ul>\n<li>在app.js文件中对应路由添加上控制器</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.when(<span class=\"string\">'/index'</span>, &#123;</span><br><span class=\"line\">  templateUrl: <span class=\"string\">'views/index.html'</span>, <span class=\"comment\">//index的html页面</span></span><br><span class=\"line\">  controller: <span class=\"string\">'IndexCtrl'</span> <span class=\"comment\">//index的控制器，现在暂时不加</span></span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<ul>\n<li>在index.html页面内引入indexCtrl.js文件</li>\n</ul>\n<h3 id=\"添加侧边菜单\"><a href=\"#添加侧边菜单\" class=\"headerlink\" title=\"添加侧边菜单\"></a>添加侧边菜单</h3><ul>\n<li>使用bootstrap的列表组作为侧边菜单</li>\n<li>使用bootstrap的Collapse插件实现展开和收缩菜单</li>\n<li>菜单使用ng-repeat遍历生成，故需在控制器中加入相关的内容使其生成相应菜单，此处使用scope.asidemenus</li>\n</ul>\n<h3 id=\"添加页面内容\"><a href=\"#添加页面内容\" class=\"headerlink\" title=\"添加页面内容\"></a>添加页面内容</h3><ul>\n<li>在index页面中添加页面内容</li>\n<li>使用统一样式添加页面内容</li>\n<li>使用scope.loading设置当前内容</li>\n<li>使用ng-show绑定scope.loading设置相应显示内容</li>\n<li>使用ng-click绑定菜单事件，改变scope.loading来实现内容切换</li>\n</ul>\n<h3 id=\"控制器逻辑\"><a href=\"#控制器逻辑\" class=\"headerlink\" title=\"控制器逻辑\"></a>控制器逻辑</h3><ul>\n<li>使用$scope.loading储存当前位置</li>\n<li>使用$scope.asidemenus储存侧边菜单，包括以下参数<ul>\n<li>title: string，一级菜单的名称</li>\n<li>click: function对象，点击菜单时绑定的事件</li>\n<li>menus: obj对象，一级菜单下的二级菜单<ul>\n<li>title: string，二级菜单的名称</li>\n<li>click: function对象，点击菜单时绑定的事件<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">app.controller(<span class=\"string\">'IndexCtrl'</span>, [<span class=\"string\">'$scope'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">$scope</span>) </span>&#123;</span><br><span class=\"line\">  $scope.loading = <span class=\"string\">'init'</span>; <span class=\"comment\">//$scope.loading储存当前位置</span></span><br><span class=\"line\">  $scope.asidemenus = [&#123;</span><br><span class=\"line\">    title: <span class=\"string\">''</span>, <span class=\"comment\">//一级菜单的名称</span></span><br><span class=\"line\">    click: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;&#125;, <span class=\"comment\">//点击菜单时绑定的事件</span></span><br><span class=\"line\">    menus: [&#123; <span class=\"comment\">//二级菜单</span></span><br><span class=\"line\">      text: <span class=\"string\">''</span>, <span class=\"comment\">//二级菜单的名称</span></span><br><span class=\"line\">      click: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;&#125; <span class=\"comment\">//点击菜单时绑定的事件</span></span><br><span class=\"line\">    &#125;]</span><br><span class=\"line\">  &#125;];</span><br><span class=\"line\">&#125;]);</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"结束语\"><a href=\"#结束语\" class=\"headerlink\" title=\"结束语\"></a>结束语</h2><hr>\n<p>AngularJS中用得最爽的莫过于模板引擎的数据和事件绑定了，当你熟悉了angular之后你会喜欢上他的哦。<br><a href=\"https://github.com/godbasin/godbasin.github.io/tree/blog-codes/angular-notes/5-fullfill-index\">此处查看项目代码（仅包含app部分）</a><br><a href=\"http://o9grhhyar.bkt.clouddn.com/5-fullfill-index/index.html#/index\">此处查看页面效果</a></p>"},{"title":"js判断某个位置是否特定元素","date":"2016-06-18T16:15:36.000Z","_content":"需要获取鼠标所在位置是否为某种特定元素，然后进行相关处理。本文介绍一种实现方法。\n<!--more-->\n\n## 常用坐标相关属性\n-----\n首先，获取鼠标坐标的兼容问题大家都很熟悉了。\n此处粘贴一些常用坐标相关属性：\n``` javascript\nscrollHeight //获取对象的滚动高度\nscrollLeft //设置或获取位于对象左边界和窗口中目前可见内容的最左端之间的距离\nscrollTop //设置或获取位于对象最顶端和窗口中可见内容的最顶端之间的距离\nscrollWidth //获取对象的滚动宽度\noffsetHeight //获取对象相对于版面或由父坐标 offsetParent 属性指定的父坐标的高度\noffsetLeft //获取对象相对于版面或由 offsetParent 属性指定的父坐标的计算左侧位置\noffsetTop //获取对象相对于版面或由 offsetTop 属性指定的父坐标的计算顶端位置\nevent.clientX //相对文档的水平座标\nevent.clientY //相对文档的垂直座标\nevent.offsetX //相对容器的水平坐标\nevent.offsetY //相对容器的垂直坐标\ndocument.documentElement.scrollTop 垂直方向滚动的值\nevent.clientX + document.documentElement.scrollTop //相对文档的水平座标+垂直方向滚动的量\n```\n\n## 绑定鼠标事件\n-----\n现在我们来获取鼠标位置\n此处需对IE事件、FireFox事件等兼容\n- 绑定方式有几种\n  - 1.在元素中，onXXX（事件）绑定\n  - 2.在Javascript代码中，获得元素并为元素的onXXX（事件）绑定\n\n``` javascript\nif (document.addEventListener) {\n\telement.addEventListener(event, eventFunction);//IE之外的绑定事件方法\n}else{\n\telement.attachEvent(event, eventFunction);//IE \n}\n```\n## 获取鼠标坐标\n-----\nIE中可以直接使用 event对象，而 FF中则不可以\n- 1.window.event || arguments.callee.caller.arguments[0]获取event对象\n- 2.将 event 作为参数来传递, function xxx(e){var e = e || window.event;}\n\n## 计算鼠标位置\n-----\n``` javascript\nvar eventX = e.pageX - scrollX || e.clientX ;\nvar eventY = e.pageY - scrollY || e.clientY ;\n```\n\n## 获取当前位置是否有特定元素\n-----\n- 给需要检测的元素绑定id或者自定义属性\n- 通过不断获取当前元素父元素，直至获取成功（通过自定义属性判断）或者元素为body\n\n```javascript\nfunction fnGetTable(oEl) {\n\twhile (null !== oEl && $(oEl).attr(\"自定义属性\") !== \"特定属性值\" && target.tagName !== \"BODY\") {\n\t\toEl = oEl.parentElement;\n\t}\n\treturn oEl;\n}\n```\n\n## 实例：下拉菜单点击外围自动关闭\n-----\n- 通过点击当前元素时绑定到事件\n\n``` javascript\nif (document.addEventListener) {\n\telement.addEventListener(event, clickOutside);//IE之外的绑定事件方法\n}else{\n\telement.attachEvent(event, clickOutside);//IE \n}\n```\n\n- clickOutside对象维护队列，该队列对象为id和callback事件\n\n``` javascript\nfunction clickOutside() {\t\n\tvar list = {}; //队列, 对象为id和callback事件\n\treturn function(id, cb) {\n\t\tlist.id.push(id); //id队列\n\t\tlist.cb[id] = cb; //callback事件队列\n\t\t//绑定点击事件\n\t\t$(document).off(\"click\").on(\"click\", function(e) {\n\t\t\tvar e = e || window.event,\n\t\t\t\teventX = e.pageX - scrollX || e.clientX,\n\t\t\t\teventY = e.pageY - scrollY || e.clientY,\n\t\t\t\ttarget = document.elementFromPoint(eventX, eventY),\n\t\t\t\tid = $(target).attr(\"id\");\n\t\t\t//判断当前事件位置是否有ID队列里元素\n\t\t\twhile (list.id.indexOf(id) == -1 && target.tagName != \"BODY\") {\n\t\t\t\ttarget = target.parentElement;\n\t\t\t\tid = $(target).attr(\"id\");\n\t\t\t}\n\t\t\t//若有相关元素，则调用对应callback事件，完了移出队列\n\t\t\tfor (i in list.id) {\n\t\t\t\tif (list.id[i] != id) {\n\t\t\t\t\tlist.cb[list.id[i]]();\n\t\t\t\t\tlist.cb.splice(list.id[i], 1);\n\t\t\t\t\tlist.id.splice(i, 1);\n\t\t\t\t}\n\t\t\t}\n\t\t\t//若队列为空，关闭事件绑定\n\t\t\tif (!list.id.length) $(document).off(\"click\");\n\t\t});\n\t};\n}\n```\n\n## 结束语\n-----\n解决办法很多，优化方法也很多，代码都是在一次又一次重构和提炼中变得出彩的呢。","source":"_posts/position-object.md","raw":"---\ntitle: js判断某个位置是否特定元素\ndate: 2016-06-19 00:15:36\ncategories: js什锦\ntags: 逻辑实现\n---\n需要获取鼠标所在位置是否为某种特定元素，然后进行相关处理。本文介绍一种实现方法。\n<!--more-->\n\n## 常用坐标相关属性\n-----\n首先，获取鼠标坐标的兼容问题大家都很熟悉了。\n此处粘贴一些常用坐标相关属性：\n``` javascript\nscrollHeight //获取对象的滚动高度\nscrollLeft //设置或获取位于对象左边界和窗口中目前可见内容的最左端之间的距离\nscrollTop //设置或获取位于对象最顶端和窗口中可见内容的最顶端之间的距离\nscrollWidth //获取对象的滚动宽度\noffsetHeight //获取对象相对于版面或由父坐标 offsetParent 属性指定的父坐标的高度\noffsetLeft //获取对象相对于版面或由 offsetParent 属性指定的父坐标的计算左侧位置\noffsetTop //获取对象相对于版面或由 offsetTop 属性指定的父坐标的计算顶端位置\nevent.clientX //相对文档的水平座标\nevent.clientY //相对文档的垂直座标\nevent.offsetX //相对容器的水平坐标\nevent.offsetY //相对容器的垂直坐标\ndocument.documentElement.scrollTop 垂直方向滚动的值\nevent.clientX + document.documentElement.scrollTop //相对文档的水平座标+垂直方向滚动的量\n```\n\n## 绑定鼠标事件\n-----\n现在我们来获取鼠标位置\n此处需对IE事件、FireFox事件等兼容\n- 绑定方式有几种\n  - 1.在元素中，onXXX（事件）绑定\n  - 2.在Javascript代码中，获得元素并为元素的onXXX（事件）绑定\n\n``` javascript\nif (document.addEventListener) {\n\telement.addEventListener(event, eventFunction);//IE之外的绑定事件方法\n}else{\n\telement.attachEvent(event, eventFunction);//IE \n}\n```\n## 获取鼠标坐标\n-----\nIE中可以直接使用 event对象，而 FF中则不可以\n- 1.window.event || arguments.callee.caller.arguments[0]获取event对象\n- 2.将 event 作为参数来传递, function xxx(e){var e = e || window.event;}\n\n## 计算鼠标位置\n-----\n``` javascript\nvar eventX = e.pageX - scrollX || e.clientX ;\nvar eventY = e.pageY - scrollY || e.clientY ;\n```\n\n## 获取当前位置是否有特定元素\n-----\n- 给需要检测的元素绑定id或者自定义属性\n- 通过不断获取当前元素父元素，直至获取成功（通过自定义属性判断）或者元素为body\n\n```javascript\nfunction fnGetTable(oEl) {\n\twhile (null !== oEl && $(oEl).attr(\"自定义属性\") !== \"特定属性值\" && target.tagName !== \"BODY\") {\n\t\toEl = oEl.parentElement;\n\t}\n\treturn oEl;\n}\n```\n\n## 实例：下拉菜单点击外围自动关闭\n-----\n- 通过点击当前元素时绑定到事件\n\n``` javascript\nif (document.addEventListener) {\n\telement.addEventListener(event, clickOutside);//IE之外的绑定事件方法\n}else{\n\telement.attachEvent(event, clickOutside);//IE \n}\n```\n\n- clickOutside对象维护队列，该队列对象为id和callback事件\n\n``` javascript\nfunction clickOutside() {\t\n\tvar list = {}; //队列, 对象为id和callback事件\n\treturn function(id, cb) {\n\t\tlist.id.push(id); //id队列\n\t\tlist.cb[id] = cb; //callback事件队列\n\t\t//绑定点击事件\n\t\t$(document).off(\"click\").on(\"click\", function(e) {\n\t\t\tvar e = e || window.event,\n\t\t\t\teventX = e.pageX - scrollX || e.clientX,\n\t\t\t\teventY = e.pageY - scrollY || e.clientY,\n\t\t\t\ttarget = document.elementFromPoint(eventX, eventY),\n\t\t\t\tid = $(target).attr(\"id\");\n\t\t\t//判断当前事件位置是否有ID队列里元素\n\t\t\twhile (list.id.indexOf(id) == -1 && target.tagName != \"BODY\") {\n\t\t\t\ttarget = target.parentElement;\n\t\t\t\tid = $(target).attr(\"id\");\n\t\t\t}\n\t\t\t//若有相关元素，则调用对应callback事件，完了移出队列\n\t\t\tfor (i in list.id) {\n\t\t\t\tif (list.id[i] != id) {\n\t\t\t\t\tlist.cb[list.id[i]]();\n\t\t\t\t\tlist.cb.splice(list.id[i], 1);\n\t\t\t\t\tlist.id.splice(i, 1);\n\t\t\t\t}\n\t\t\t}\n\t\t\t//若队列为空，关闭事件绑定\n\t\t\tif (!list.id.length) $(document).off(\"click\");\n\t\t});\n\t};\n}\n```\n\n## 结束语\n-----\n解决办法很多，优化方法也很多，代码都是在一次又一次重构和提炼中变得出彩的呢。","slug":"position-object","published":1,"updated":"2016-06-24T14:03:13.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cirrwvo4t001t38l51k65dw46","content":"<p>需要获取鼠标所在位置是否为某种特定元素，然后进行相关处理。本文介绍一种实现方法。<br><a id=\"more\"></a></p>\n<h2 id=\"常用坐标相关属性\"><a href=\"#常用坐标相关属性\" class=\"headerlink\" title=\"常用坐标相关属性\"></a>常用坐标相关属性</h2><hr>\n<p>首先，获取鼠标坐标的兼容问题大家都很熟悉了。<br>此处粘贴一些常用坐标相关属性：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">scrollHeight <span class=\"comment\">//获取对象的滚动高度</span></span><br><span class=\"line\">scrollLeft <span class=\"comment\">//设置或获取位于对象左边界和窗口中目前可见内容的最左端之间的距离</span></span><br><span class=\"line\">scrollTop <span class=\"comment\">//设置或获取位于对象最顶端和窗口中可见内容的最顶端之间的距离</span></span><br><span class=\"line\">scrollWidth <span class=\"comment\">//获取对象的滚动宽度</span></span><br><span class=\"line\">offsetHeight <span class=\"comment\">//获取对象相对于版面或由父坐标 offsetParent 属性指定的父坐标的高度</span></span><br><span class=\"line\">offsetLeft <span class=\"comment\">//获取对象相对于版面或由 offsetParent 属性指定的父坐标的计算左侧位置</span></span><br><span class=\"line\">offsetTop <span class=\"comment\">//获取对象相对于版面或由 offsetTop 属性指定的父坐标的计算顶端位置</span></span><br><span class=\"line\">event.clientX <span class=\"comment\">//相对文档的水平座标</span></span><br><span class=\"line\">event.clientY <span class=\"comment\">//相对文档的垂直座标</span></span><br><span class=\"line\">event.offsetX <span class=\"comment\">//相对容器的水平坐标</span></span><br><span class=\"line\">event.offsetY <span class=\"comment\">//相对容器的垂直坐标</span></span><br><span class=\"line\"><span class=\"built_in\">document</span>.documentElement.scrollTop 垂直方向滚动的值</span><br><span class=\"line\">event.clientX + <span class=\"built_in\">document</span>.documentElement.scrollTop <span class=\"comment\">//相对文档的水平座标+垂直方向滚动的量</span></span><br></pre></td></tr></table></figure></p>\n<h2 id=\"绑定鼠标事件\"><a href=\"#绑定鼠标事件\" class=\"headerlink\" title=\"绑定鼠标事件\"></a>绑定鼠标事件</h2><hr>\n<p>现在我们来获取鼠标位置<br>此处需对IE事件、FireFox事件等兼容</p>\n<ul>\n<li>绑定方式有几种<ul>\n<li>1.在元素中，onXXX（事件）绑定</li>\n<li>2.在Javascript代码中，获得元素并为元素的onXXX（事件）绑定</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (<span class=\"built_in\">document</span>.addEventListener) &#123;</span><br><span class=\"line\">  element.addEventListener(event, eventFunction);<span class=\"comment\">//IE之外的绑定事件方法</span></span><br><span class=\"line\">&#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">  element.attachEvent(event, eventFunction);<span class=\"comment\">//IE </span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"获取鼠标坐标\"><a href=\"#获取鼠标坐标\" class=\"headerlink\" title=\"获取鼠标坐标\"></a>获取鼠标坐标</h2><hr>\n<p>IE中可以直接使用 event对象，而 FF中则不可以</p>\n<ul>\n<li>1.window.event || arguments.callee.caller.arguments[0]获取event对象</li>\n<li>2.将 event 作为参数来传递, function xxx(e){var e = e || window.event;}</li>\n</ul>\n<h2 id=\"计算鼠标位置\"><a href=\"#计算鼠标位置\" class=\"headerlink\" title=\"计算鼠标位置\"></a>计算鼠标位置</h2><hr>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> eventX = e.pageX - scrollX || e.clientX ;</span><br><span class=\"line\"><span class=\"keyword\">var</span> eventY = e.pageY - scrollY || e.clientY ;</span><br></pre></td></tr></table></figure>\n<h2 id=\"获取当前位置是否有特定元素\"><a href=\"#获取当前位置是否有特定元素\" class=\"headerlink\" title=\"获取当前位置是否有特定元素\"></a>获取当前位置是否有特定元素</h2><hr>\n<ul>\n<li>给需要检测的元素绑定id或者自定义属性</li>\n<li>通过不断获取当前元素父元素，直至获取成功（通过自定义属性判断）或者元素为body</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fnGetTable</span>(<span class=\"params\">oEl</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">while</span> (<span class=\"literal\">null</span> !== oEl &amp;&amp; $(oEl).attr(<span class=\"string\">\"自定义属性\"</span>) !== <span class=\"string\">\"特定属性值\"</span> &amp;&amp; target.tagName !== <span class=\"string\">\"BODY\"</span>) &#123;</span><br><span class=\"line\">    oEl = oEl.parentElement;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> oEl;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"实例：下拉菜单点击外围自动关闭\"><a href=\"#实例：下拉菜单点击外围自动关闭\" class=\"headerlink\" title=\"实例：下拉菜单点击外围自动关闭\"></a>实例：下拉菜单点击外围自动关闭</h2><hr>\n<ul>\n<li>通过点击当前元素时绑定到事件</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (<span class=\"built_in\">document</span>.addEventListener) &#123;</span><br><span class=\"line\">  element.addEventListener(event, clickOutside);<span class=\"comment\">//IE之外的绑定事件方法</span></span><br><span class=\"line\">&#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">  element.attachEvent(event, clickOutside);<span class=\"comment\">//IE </span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>clickOutside对象维护队列，该队列对象为id和callback事件</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">clickOutside</span>(<span class=\"params\"></span>) </span>&#123;\t</span><br><span class=\"line\">  <span class=\"keyword\">var</span> list = &#123;&#125;; <span class=\"comment\">//队列, 对象为id和callback事件</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">id, cb</span>) </span>&#123;</span><br><span class=\"line\">    list.id.push(id); <span class=\"comment\">//id队列</span></span><br><span class=\"line\">    list.cb[id] = cb; <span class=\"comment\">//callback事件队列</span></span><br><span class=\"line\">    <span class=\"comment\">//绑定点击事件</span></span><br><span class=\"line\">    $(<span class=\"built_in\">document</span>).off(<span class=\"string\">\"click\"</span>).on(<span class=\"string\">\"click\"</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">e</span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">var</span> e = e || <span class=\"built_in\">window</span>.event,</span><br><span class=\"line\">        eventX = e.pageX - scrollX || e.clientX,</span><br><span class=\"line\">        eventY = e.pageY - scrollY || e.clientY,</span><br><span class=\"line\">        target = <span class=\"built_in\">document</span>.elementFromPoint(eventX, eventY),</span><br><span class=\"line\">        id = $(target).attr(<span class=\"string\">\"id\"</span>);</span><br><span class=\"line\">      <span class=\"comment\">//判断当前事件位置是否有ID队列里元素</span></span><br><span class=\"line\">      <span class=\"keyword\">while</span> (list.id.indexOf(id) == <span class=\"number\">-1</span> &amp;&amp; target.tagName != <span class=\"string\">\"BODY\"</span>) &#123;</span><br><span class=\"line\">        target = target.parentElement;</span><br><span class=\"line\">        id = $(target).attr(<span class=\"string\">\"id\"</span>);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"comment\">//若有相关元素，则调用对应callback事件，完了移出队列</span></span><br><span class=\"line\">      <span class=\"keyword\">for</span> (i <span class=\"keyword\">in</span> list.id) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (list.id[i] != id) &#123;</span><br><span class=\"line\">          list.cb[list.id[i]]();</span><br><span class=\"line\">          list.cb.splice(list.id[i], <span class=\"number\">1</span>);</span><br><span class=\"line\">          list.id.splice(i, <span class=\"number\">1</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"comment\">//若队列为空，关闭事件绑定</span></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (!list.id.length) $(<span class=\"built_in\">document</span>).off(<span class=\"string\">\"click\"</span>);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"结束语\"><a href=\"#结束语\" class=\"headerlink\" title=\"结束语\"></a>结束语</h2><hr>\n<p>解决办法很多，优化方法也很多，代码都是在一次又一次重构和提炼中变得出彩的呢。</p>\n","excerpt":"<p>需要获取鼠标所在位置是否为某种特定元素，然后进行相关处理。本文介绍一种实现方法。<br>","more":"</p>\n<h2 id=\"常用坐标相关属性\"><a href=\"#常用坐标相关属性\" class=\"headerlink\" title=\"常用坐标相关属性\"></a>常用坐标相关属性</h2><hr>\n<p>首先，获取鼠标坐标的兼容问题大家都很熟悉了。<br>此处粘贴一些常用坐标相关属性：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">scrollHeight <span class=\"comment\">//获取对象的滚动高度</span></span><br><span class=\"line\">scrollLeft <span class=\"comment\">//设置或获取位于对象左边界和窗口中目前可见内容的最左端之间的距离</span></span><br><span class=\"line\">scrollTop <span class=\"comment\">//设置或获取位于对象最顶端和窗口中可见内容的最顶端之间的距离</span></span><br><span class=\"line\">scrollWidth <span class=\"comment\">//获取对象的滚动宽度</span></span><br><span class=\"line\">offsetHeight <span class=\"comment\">//获取对象相对于版面或由父坐标 offsetParent 属性指定的父坐标的高度</span></span><br><span class=\"line\">offsetLeft <span class=\"comment\">//获取对象相对于版面或由 offsetParent 属性指定的父坐标的计算左侧位置</span></span><br><span class=\"line\">offsetTop <span class=\"comment\">//获取对象相对于版面或由 offsetTop 属性指定的父坐标的计算顶端位置</span></span><br><span class=\"line\">event.clientX <span class=\"comment\">//相对文档的水平座标</span></span><br><span class=\"line\">event.clientY <span class=\"comment\">//相对文档的垂直座标</span></span><br><span class=\"line\">event.offsetX <span class=\"comment\">//相对容器的水平坐标</span></span><br><span class=\"line\">event.offsetY <span class=\"comment\">//相对容器的垂直坐标</span></span><br><span class=\"line\"><span class=\"built_in\">document</span>.documentElement.scrollTop 垂直方向滚动的值</span><br><span class=\"line\">event.clientX + <span class=\"built_in\">document</span>.documentElement.scrollTop <span class=\"comment\">//相对文档的水平座标+垂直方向滚动的量</span></span><br></pre></td></tr></table></figure></p>\n<h2 id=\"绑定鼠标事件\"><a href=\"#绑定鼠标事件\" class=\"headerlink\" title=\"绑定鼠标事件\"></a>绑定鼠标事件</h2><hr>\n<p>现在我们来获取鼠标位置<br>此处需对IE事件、FireFox事件等兼容</p>\n<ul>\n<li>绑定方式有几种<ul>\n<li>1.在元素中，onXXX（事件）绑定</li>\n<li>2.在Javascript代码中，获得元素并为元素的onXXX（事件）绑定</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (<span class=\"built_in\">document</span>.addEventListener) &#123;</span><br><span class=\"line\">  element.addEventListener(event, eventFunction);<span class=\"comment\">//IE之外的绑定事件方法</span></span><br><span class=\"line\">&#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">  element.attachEvent(event, eventFunction);<span class=\"comment\">//IE </span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"获取鼠标坐标\"><a href=\"#获取鼠标坐标\" class=\"headerlink\" title=\"获取鼠标坐标\"></a>获取鼠标坐标</h2><hr>\n<p>IE中可以直接使用 event对象，而 FF中则不可以</p>\n<ul>\n<li>1.window.event || arguments.callee.caller.arguments[0]获取event对象</li>\n<li>2.将 event 作为参数来传递, function xxx(e){var e = e || window.event;}</li>\n</ul>\n<h2 id=\"计算鼠标位置\"><a href=\"#计算鼠标位置\" class=\"headerlink\" title=\"计算鼠标位置\"></a>计算鼠标位置</h2><hr>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> eventX = e.pageX - scrollX || e.clientX ;</span><br><span class=\"line\"><span class=\"keyword\">var</span> eventY = e.pageY - scrollY || e.clientY ;</span><br></pre></td></tr></table></figure>\n<h2 id=\"获取当前位置是否有特定元素\"><a href=\"#获取当前位置是否有特定元素\" class=\"headerlink\" title=\"获取当前位置是否有特定元素\"></a>获取当前位置是否有特定元素</h2><hr>\n<ul>\n<li>给需要检测的元素绑定id或者自定义属性</li>\n<li>通过不断获取当前元素父元素，直至获取成功（通过自定义属性判断）或者元素为body</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fnGetTable</span>(<span class=\"params\">oEl</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">while</span> (<span class=\"literal\">null</span> !== oEl &amp;&amp; $(oEl).attr(<span class=\"string\">\"自定义属性\"</span>) !== <span class=\"string\">\"特定属性值\"</span> &amp;&amp; target.tagName !== <span class=\"string\">\"BODY\"</span>) &#123;</span><br><span class=\"line\">    oEl = oEl.parentElement;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> oEl;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"实例：下拉菜单点击外围自动关闭\"><a href=\"#实例：下拉菜单点击外围自动关闭\" class=\"headerlink\" title=\"实例：下拉菜单点击外围自动关闭\"></a>实例：下拉菜单点击外围自动关闭</h2><hr>\n<ul>\n<li>通过点击当前元素时绑定到事件</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (<span class=\"built_in\">document</span>.addEventListener) &#123;</span><br><span class=\"line\">  element.addEventListener(event, clickOutside);<span class=\"comment\">//IE之外的绑定事件方法</span></span><br><span class=\"line\">&#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">  element.attachEvent(event, clickOutside);<span class=\"comment\">//IE </span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>clickOutside对象维护队列，该队列对象为id和callback事件</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">clickOutside</span>(<span class=\"params\"></span>) </span>&#123;\t</span><br><span class=\"line\">  <span class=\"keyword\">var</span> list = &#123;&#125;; <span class=\"comment\">//队列, 对象为id和callback事件</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">id, cb</span>) </span>&#123;</span><br><span class=\"line\">    list.id.push(id); <span class=\"comment\">//id队列</span></span><br><span class=\"line\">    list.cb[id] = cb; <span class=\"comment\">//callback事件队列</span></span><br><span class=\"line\">    <span class=\"comment\">//绑定点击事件</span></span><br><span class=\"line\">    $(<span class=\"built_in\">document</span>).off(<span class=\"string\">\"click\"</span>).on(<span class=\"string\">\"click\"</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">e</span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">var</span> e = e || <span class=\"built_in\">window</span>.event,</span><br><span class=\"line\">        eventX = e.pageX - scrollX || e.clientX,</span><br><span class=\"line\">        eventY = e.pageY - scrollY || e.clientY,</span><br><span class=\"line\">        target = <span class=\"built_in\">document</span>.elementFromPoint(eventX, eventY),</span><br><span class=\"line\">        id = $(target).attr(<span class=\"string\">\"id\"</span>);</span><br><span class=\"line\">      <span class=\"comment\">//判断当前事件位置是否有ID队列里元素</span></span><br><span class=\"line\">      <span class=\"keyword\">while</span> (list.id.indexOf(id) == <span class=\"number\">-1</span> &amp;&amp; target.tagName != <span class=\"string\">\"BODY\"</span>) &#123;</span><br><span class=\"line\">        target = target.parentElement;</span><br><span class=\"line\">        id = $(target).attr(<span class=\"string\">\"id\"</span>);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"comment\">//若有相关元素，则调用对应callback事件，完了移出队列</span></span><br><span class=\"line\">      <span class=\"keyword\">for</span> (i <span class=\"keyword\">in</span> list.id) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (list.id[i] != id) &#123;</span><br><span class=\"line\">          list.cb[list.id[i]]();</span><br><span class=\"line\">          list.cb.splice(list.id[i], <span class=\"number\">1</span>);</span><br><span class=\"line\">          list.id.splice(i, <span class=\"number\">1</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"comment\">//若队列为空，关闭事件绑定</span></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (!list.id.length) $(<span class=\"built_in\">document</span>).off(<span class=\"string\">\"click\"</span>);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"结束语\"><a href=\"#结束语\" class=\"headerlink\" title=\"结束语\"></a>结束语</h2><hr>\n<p>解决办法很多，优化方法也很多，代码都是在一次又一次重构和提炼中变得出彩的呢。</p>"},{"title":"jQuery插件--Canvas实现图片裁剪","date":"2016-06-22T11:44:20.000Z","_content":"需要对图片进行裁剪时，可使用该jQuery插件。本文介绍实现方法。\n<!--more-->\n\n代码放在github上，有兴趣的小伙伴可以下载看\n[picture-cut](https://github.com/godbasin/godbasin.github.io/tree/blog-codes/picture-cut)\n\n最终效果图如下[点击查看页面](http://o92md66rk.bkt.clouddn.com/index.html)\n![image](http://o905ne85q.bkt.clouddn.com/picture-cut.png)\n\n## 插件介绍\n-----\n### 使用方法\n- html\n``` html\n<img class=\"img-to-cut\" src=\"img/1.png\" />\n<img class=\"img-to-cut\" src=\"img/2.png\" />\n<img class=\"img-to-cut\" src=\"img/3.png\" />\n<!--需加上一个包裹的外壳-->\n<section id=\"bsphotocut-con\"></section>\n```\n- js\n``` javascript\n//初始化能进行裁剪的图片：此处使用class='img-to-cut'\n$(\".img-to-cut\").click(function() {\n\t$(this).bsPhotoCut({\n\t\t\"section\": \"#bsphotocut-con\", //外框\n\t\t\"ratio\": \"0\", //裁剪框宽度和高度比例n:m, 为0则不限比例\n\t\t\"success\": function(src, obj) { //src为返回图片src, obj为调用此插件的DOM对象this\n\t\t\tvar _img = $(\"<img src='\" + src + \"' />\");\n\t\t\t$(\"body\").append(_img);\n\t\t}\n\t});\n});\n```\n### 插件封装方法\n- 使用jQuery拓展属性$.fn.xxx来进行封装\n- 这里有超详细教程[《jQuery插件开发精品教程，让你的jQuery提升一个台阶》](http://www.cnblogs.com/Wayou/p/jquery_plugin_tutorial.html)\n- 本插件的封装不是特别完美，因为涉及事件绑定，当时还没想到很好的办法，欢迎小伙伴们提意见\n\n## 图片裁剪原理\n-----\n### 使用HTML5 Canvas实现裁剪过程\n- 创建两个canvas：canvas1--装载图片 canvas2--装载裁剪框\n### canvas1\n- 装载图片，实现图片居中处理，具体相关原理可参考[picture-align插件](https://github.com/godbasin/godbasin.github.io/blob/blog-codes/picture-align/js/style.js)\n\n### canvas2\n- 装载裁剪框，若有限制比例则按照比例缩放\n- 裁剪框溢出canvas1时候的处理\n\n### 获取裁剪后图片\n- 使用Canvas函数getImageData可读取特定区域的图片数据\n- 使用Canvas函数putImageData可导出图片数据至canvas\n- 使用Canvas函数toDataURL可将canvas导出为图片格式\n- 这里需要注意，getImageData可能产生跨域问题，解决办法可自行google（似乎没有特别好的解决方法）\n``` javascript\ncutOver: function(obj) {\n\tvar _options = obj.options,\n\t\t//获取canvas1图片数据\n\t\tcanvas1 = document.getElementById(_options.canvas_id + \"1\"),\n\t\tctx1 = canvas1.getContext('2d'),\n\t\t//导出canvas1图片数据，可能有跨域问题哦\n\t\timgData = ctx1.getImageData(_options.canvas_left, _options.canvas_top, _options.canvas_width, _options.canvas_height),\n\t\tcanvas3 = document.createElement(\"canvas\"),\n\t\tctx3 = canvas3.getContext('2d'),\n\t\t_image;\n\tcanvas3.width = _options.canvas_width;\n\tcanvas3.height = _options.canvas_height;\n\t//将图片数据输出到canvas3\n\tctx3.putImageData(imgData, 0, 0);\n\t//将canvas3转换成图片\n\t_image = canvas3.toDataURL(\"image/jpg\");\n\treturn _image;\n}\n```\n\n\n## 鼠标或者触屏事件处理\n-----\n- 鼠标事件为mousedown/mousemove/mouseup，相应js文件为mousestyle.js\n  - 鼠标获取坐标位置可参考[js判断某个位置是否特定元素]()\n- 触屏事件为touchstart/touchmove/touchend，相应js文件为touchstyle.js\n  - 触屏事件获取坐标位置为event.touches[0].clientX和event.touches[0].clientY\n- 在裁剪过程中，全程绑定开始事件（mousedown/touchstart）的检测\n``` javascript\n//此处为鼠标事件部分代码\nfunction mouseStart() {\n\t//getMousePos为获取鼠标坐标的方法，此处不详细讲解\n\tmousestartX = that.getMousePos(event).x - _l;\n\tmousestartY = that.getMousePos(event).y - _t;\n\t//判断鼠标位置是否为裁剪框的角，并针对不同角绑定不同的移动事件\n\tif (((_left - 20) < mousestartX && mousestartX < (_left + 20)) && ((_top - 20) < mousestartY && mousestartY < (_top + 20))) {\n\t\t//此处为裁剪框左上角，可调整裁剪框大小\n\t\tdocument.addEventListener(\"mousemove\", changeLeftTop, false);\n\t\tdocument.addEventListener(\"mouseup\", mouseEnd, false);\n\t} else if (((_right - 20) < mousestartX && mousestartX < (_right + 20)) && ((_bottom - 20) < mousestartY && mousestartY < (_bottom + 20))) {\n\t\t//此处为裁剪框右下角，可调整裁剪框大小\n\t\tdocument.addEventListener(\"mousemove\", changeRightBottom, false);\n\t\tdocument.addEventListener(\"mouseup\", mouseEnd, false);\n\t} else if ((_left + 20) < mousestartX && (_right - 20) > mousestartX && (_top + 20) < mousestartY && (_bottom - 20) > mousestartY) {\n\t\t//此处为裁剪框里面，可移动裁剪框\n\t\tdocument.addEventListener(\"mousemove\", changeMove, false);\n\t\tdocument.addEventListener(\"mouseup\", mouseEnd, false);\n\t} else {\n\t\treturn;\n\t}\n}\n```\n- 触发开始事件后，开始绑定移动（mousemove/touchmove）和结束事件（mouseup/touchend）的检测\n  - 具体的实现这里不详细说明，大家可查看源文件获取\n\n## 结束语\n-----\n曾经我很喜欢用下划线命名变量，被小伙伴们吐槽过很多遍，这些代码还处于那个时代的产物，小伙伴们请见谅呀。","source":"_posts/picture-cut.md","raw":"---\ntitle: jQuery插件--Canvas实现图片裁剪\ndate: 2016-06-22 19:44:20\ncategories: jQuery杂烩\ntags: 自制插件\n---\n需要对图片进行裁剪时，可使用该jQuery插件。本文介绍实现方法。\n<!--more-->\n\n代码放在github上，有兴趣的小伙伴可以下载看\n[picture-cut](https://github.com/godbasin/godbasin.github.io/tree/blog-codes/picture-cut)\n\n最终效果图如下[点击查看页面](http://o92md66rk.bkt.clouddn.com/index.html)\n![image](http://o905ne85q.bkt.clouddn.com/picture-cut.png)\n\n## 插件介绍\n-----\n### 使用方法\n- html\n``` html\n<img class=\"img-to-cut\" src=\"img/1.png\" />\n<img class=\"img-to-cut\" src=\"img/2.png\" />\n<img class=\"img-to-cut\" src=\"img/3.png\" />\n<!--需加上一个包裹的外壳-->\n<section id=\"bsphotocut-con\"></section>\n```\n- js\n``` javascript\n//初始化能进行裁剪的图片：此处使用class='img-to-cut'\n$(\".img-to-cut\").click(function() {\n\t$(this).bsPhotoCut({\n\t\t\"section\": \"#bsphotocut-con\", //外框\n\t\t\"ratio\": \"0\", //裁剪框宽度和高度比例n:m, 为0则不限比例\n\t\t\"success\": function(src, obj) { //src为返回图片src, obj为调用此插件的DOM对象this\n\t\t\tvar _img = $(\"<img src='\" + src + \"' />\");\n\t\t\t$(\"body\").append(_img);\n\t\t}\n\t});\n});\n```\n### 插件封装方法\n- 使用jQuery拓展属性$.fn.xxx来进行封装\n- 这里有超详细教程[《jQuery插件开发精品教程，让你的jQuery提升一个台阶》](http://www.cnblogs.com/Wayou/p/jquery_plugin_tutorial.html)\n- 本插件的封装不是特别完美，因为涉及事件绑定，当时还没想到很好的办法，欢迎小伙伴们提意见\n\n## 图片裁剪原理\n-----\n### 使用HTML5 Canvas实现裁剪过程\n- 创建两个canvas：canvas1--装载图片 canvas2--装载裁剪框\n### canvas1\n- 装载图片，实现图片居中处理，具体相关原理可参考[picture-align插件](https://github.com/godbasin/godbasin.github.io/blob/blog-codes/picture-align/js/style.js)\n\n### canvas2\n- 装载裁剪框，若有限制比例则按照比例缩放\n- 裁剪框溢出canvas1时候的处理\n\n### 获取裁剪后图片\n- 使用Canvas函数getImageData可读取特定区域的图片数据\n- 使用Canvas函数putImageData可导出图片数据至canvas\n- 使用Canvas函数toDataURL可将canvas导出为图片格式\n- 这里需要注意，getImageData可能产生跨域问题，解决办法可自行google（似乎没有特别好的解决方法）\n``` javascript\ncutOver: function(obj) {\n\tvar _options = obj.options,\n\t\t//获取canvas1图片数据\n\t\tcanvas1 = document.getElementById(_options.canvas_id + \"1\"),\n\t\tctx1 = canvas1.getContext('2d'),\n\t\t//导出canvas1图片数据，可能有跨域问题哦\n\t\timgData = ctx1.getImageData(_options.canvas_left, _options.canvas_top, _options.canvas_width, _options.canvas_height),\n\t\tcanvas3 = document.createElement(\"canvas\"),\n\t\tctx3 = canvas3.getContext('2d'),\n\t\t_image;\n\tcanvas3.width = _options.canvas_width;\n\tcanvas3.height = _options.canvas_height;\n\t//将图片数据输出到canvas3\n\tctx3.putImageData(imgData, 0, 0);\n\t//将canvas3转换成图片\n\t_image = canvas3.toDataURL(\"image/jpg\");\n\treturn _image;\n}\n```\n\n\n## 鼠标或者触屏事件处理\n-----\n- 鼠标事件为mousedown/mousemove/mouseup，相应js文件为mousestyle.js\n  - 鼠标获取坐标位置可参考[js判断某个位置是否特定元素]()\n- 触屏事件为touchstart/touchmove/touchend，相应js文件为touchstyle.js\n  - 触屏事件获取坐标位置为event.touches[0].clientX和event.touches[0].clientY\n- 在裁剪过程中，全程绑定开始事件（mousedown/touchstart）的检测\n``` javascript\n//此处为鼠标事件部分代码\nfunction mouseStart() {\n\t//getMousePos为获取鼠标坐标的方法，此处不详细讲解\n\tmousestartX = that.getMousePos(event).x - _l;\n\tmousestartY = that.getMousePos(event).y - _t;\n\t//判断鼠标位置是否为裁剪框的角，并针对不同角绑定不同的移动事件\n\tif (((_left - 20) < mousestartX && mousestartX < (_left + 20)) && ((_top - 20) < mousestartY && mousestartY < (_top + 20))) {\n\t\t//此处为裁剪框左上角，可调整裁剪框大小\n\t\tdocument.addEventListener(\"mousemove\", changeLeftTop, false);\n\t\tdocument.addEventListener(\"mouseup\", mouseEnd, false);\n\t} else if (((_right - 20) < mousestartX && mousestartX < (_right + 20)) && ((_bottom - 20) < mousestartY && mousestartY < (_bottom + 20))) {\n\t\t//此处为裁剪框右下角，可调整裁剪框大小\n\t\tdocument.addEventListener(\"mousemove\", changeRightBottom, false);\n\t\tdocument.addEventListener(\"mouseup\", mouseEnd, false);\n\t} else if ((_left + 20) < mousestartX && (_right - 20) > mousestartX && (_top + 20) < mousestartY && (_bottom - 20) > mousestartY) {\n\t\t//此处为裁剪框里面，可移动裁剪框\n\t\tdocument.addEventListener(\"mousemove\", changeMove, false);\n\t\tdocument.addEventListener(\"mouseup\", mouseEnd, false);\n\t} else {\n\t\treturn;\n\t}\n}\n```\n- 触发开始事件后，开始绑定移动（mousemove/touchmove）和结束事件（mouseup/touchend）的检测\n  - 具体的实现这里不详细说明，大家可查看源文件获取\n\n## 结束语\n-----\n曾经我很喜欢用下划线命名变量，被小伙伴们吐槽过很多遍，这些代码还处于那个时代的产物，小伙伴们请见谅呀。","slug":"picture-cut","published":1,"updated":"2016-06-24T14:14:14.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cirrwvo50001w38l5okxc94ie","content":"<p>需要对图片进行裁剪时，可使用该jQuery插件。本文介绍实现方法。<br><a id=\"more\"></a></p>\n<p>代码放在github上，有兴趣的小伙伴可以下载看<br><a href=\"https://github.com/godbasin/godbasin.github.io/tree/blog-codes/picture-cut\" target=\"_blank\" rel=\"external\">picture-cut</a></p>\n<p>最终效果图如下<a href=\"http://o92md66rk.bkt.clouddn.com/index.html\" target=\"_blank\" rel=\"external\">点击查看页面</a><br><img src=\"http://o905ne85q.bkt.clouddn.com/picture-cut.png\" alt=\"image\"></p>\n<h2 id=\"插件介绍\"><a href=\"#插件介绍\" class=\"headerlink\" title=\"插件介绍\"></a>插件介绍</h2><hr>\n<h3 id=\"使用方法\"><a href=\"#使用方法\" class=\"headerlink\" title=\"使用方法\"></a>使用方法</h3><ul>\n<li><p>html</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">class</span>=<span class=\"string\">\"img-to-cut\"</span> <span class=\"attr\">src</span>=<span class=\"string\">\"img/1.png\"</span> /&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">class</span>=<span class=\"string\">\"img-to-cut\"</span> <span class=\"attr\">src</span>=<span class=\"string\">\"img/2.png\"</span> /&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">class</span>=<span class=\"string\">\"img-to-cut\"</span> <span class=\"attr\">src</span>=<span class=\"string\">\"img/3.png\"</span> /&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!--需加上一个包裹的外壳--&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">section</span> <span class=\"attr\">id</span>=<span class=\"string\">\"bsphotocut-con\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">section</span>&gt;</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>js</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//初始化能进行裁剪的图片：此处使用class='img-to-cut'</span></span><br><span class=\"line\">$(<span class=\"string\">\".img-to-cut\"</span>).click(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  $(<span class=\"keyword\">this</span>).bsPhotoCut(&#123;</span><br><span class=\"line\">    <span class=\"string\">\"section\"</span>: <span class=\"string\">\"#bsphotocut-con\"</span>, <span class=\"comment\">//外框</span></span><br><span class=\"line\">    <span class=\"string\">\"ratio\"</span>: <span class=\"string\">\"0\"</span>, <span class=\"comment\">//裁剪框宽度和高度比例n:m, 为0则不限比例</span></span><br><span class=\"line\">    <span class=\"string\">\"success\"</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">src, obj</span>) </span>&#123; <span class=\"comment\">//src为返回图片src, obj为调用此插件的DOM对象this</span></span><br><span class=\"line\">      <span class=\"keyword\">var</span> _img = $(<span class=\"string\">\"&lt;img src='\"</span> + src + <span class=\"string\">\"' /&gt;\"</span>);</span><br><span class=\"line\">      $(<span class=\"string\">\"body\"</span>).append(_img);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3 id=\"插件封装方法\"><a href=\"#插件封装方法\" class=\"headerlink\" title=\"插件封装方法\"></a>插件封装方法</h3><ul>\n<li>使用jQuery拓展属性$.fn.xxx来进行封装</li>\n<li>这里有超详细教程<a href=\"http://www.cnblogs.com/Wayou/p/jquery_plugin_tutorial.html\" target=\"_blank\" rel=\"external\">《jQuery插件开发精品教程，让你的jQuery提升一个台阶》</a></li>\n<li>本插件的封装不是特别完美，因为涉及事件绑定，当时还没想到很好的办法，欢迎小伙伴们提意见</li>\n</ul>\n<h2 id=\"图片裁剪原理\"><a href=\"#图片裁剪原理\" class=\"headerlink\" title=\"图片裁剪原理\"></a>图片裁剪原理</h2><hr>\n<h3 id=\"使用HTML5-Canvas实现裁剪过程\"><a href=\"#使用HTML5-Canvas实现裁剪过程\" class=\"headerlink\" title=\"使用HTML5 Canvas实现裁剪过程\"></a>使用HTML5 Canvas实现裁剪过程</h3><ul>\n<li>创建两个canvas：canvas1–装载图片 canvas2–装载裁剪框<h3 id=\"canvas1\"><a href=\"#canvas1\" class=\"headerlink\" title=\"canvas1\"></a>canvas1</h3></li>\n<li>装载图片，实现图片居中处理，具体相关原理可参考<a href=\"https://github.com/godbasin/godbasin.github.io/blob/blog-codes/picture-align/js/style.js\" target=\"_blank\" rel=\"external\">picture-align插件</a></li>\n</ul>\n<h3 id=\"canvas2\"><a href=\"#canvas2\" class=\"headerlink\" title=\"canvas2\"></a>canvas2</h3><ul>\n<li>装载裁剪框，若有限制比例则按照比例缩放</li>\n<li>裁剪框溢出canvas1时候的处理</li>\n</ul>\n<h3 id=\"获取裁剪后图片\"><a href=\"#获取裁剪后图片\" class=\"headerlink\" title=\"获取裁剪后图片\"></a>获取裁剪后图片</h3><ul>\n<li>使用Canvas函数getImageData可读取特定区域的图片数据</li>\n<li>使用Canvas函数putImageData可导出图片数据至canvas</li>\n<li>使用Canvas函数toDataURL可将canvas导出为图片格式</li>\n<li>这里需要注意，getImageData可能产生跨域问题，解决办法可自行google（似乎没有特别好的解决方法）<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cutOver: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">obj</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> _options = obj.options,</span><br><span class=\"line\">    <span class=\"comment\">//获取canvas1图片数据</span></span><br><span class=\"line\">    canvas1 = <span class=\"built_in\">document</span>.getElementById(_options.canvas_id + <span class=\"string\">\"1\"</span>),</span><br><span class=\"line\">    ctx1 = canvas1.getContext(<span class=\"string\">'2d'</span>),</span><br><span class=\"line\">    <span class=\"comment\">//导出canvas1图片数据，可能有跨域问题哦</span></span><br><span class=\"line\">    imgData = ctx1.getImageData(_options.canvas_left, _options.canvas_top, _options.canvas_width, _options.canvas_height),</span><br><span class=\"line\">    canvas3 = <span class=\"built_in\">document</span>.createElement(<span class=\"string\">\"canvas\"</span>),</span><br><span class=\"line\">    ctx3 = canvas3.getContext(<span class=\"string\">'2d'</span>),</span><br><span class=\"line\">    _image;</span><br><span class=\"line\">  canvas3.width = _options.canvas_width;</span><br><span class=\"line\">  canvas3.height = _options.canvas_height;</span><br><span class=\"line\">  <span class=\"comment\">//将图片数据输出到canvas3</span></span><br><span class=\"line\">  ctx3.putImageData(imgData, <span class=\"number\">0</span>, <span class=\"number\">0</span>);</span><br><span class=\"line\">  <span class=\"comment\">//将canvas3转换成图片</span></span><br><span class=\"line\">  _image = canvas3.toDataURL(<span class=\"string\">\"image/jpg\"</span>);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> _image;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h2 id=\"鼠标或者触屏事件处理\"><a href=\"#鼠标或者触屏事件处理\" class=\"headerlink\" title=\"鼠标或者触屏事件处理\"></a>鼠标或者触屏事件处理</h2><hr>\n<ul>\n<li>鼠标事件为mousedown/mousemove/mouseup，相应js文件为mousestyle.js<ul>\n<li>鼠标获取坐标位置可参考<a href=\"\">js判断某个位置是否特定元素</a></li>\n</ul>\n</li>\n<li>触屏事件为touchstart/touchmove/touchend，相应js文件为touchstyle.js<ul>\n<li>触屏事件获取坐标位置为event.touches[0].clientX和event.touches[0].clientY</li>\n</ul>\n</li>\n<li><p>在裁剪过程中，全程绑定开始事件（mousedown/touchstart）的检测</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//此处为鼠标事件部分代码</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">mouseStart</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">//getMousePos为获取鼠标坐标的方法，此处不详细讲解</span></span><br><span class=\"line\">  mousestartX = that.getMousePos(event).x - _l;</span><br><span class=\"line\">  mousestartY = that.getMousePos(event).y - _t;</span><br><span class=\"line\">  <span class=\"comment\">//判断鼠标位置是否为裁剪框的角，并针对不同角绑定不同的移动事件</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (((_left - <span class=\"number\">20</span>) &lt; mousestartX &amp;&amp; mousestartX &lt; (_left + <span class=\"number\">20</span>)) &amp;&amp; ((_top - <span class=\"number\">20</span>) &lt; mousestartY &amp;&amp; mousestartY &lt; (_top + <span class=\"number\">20</span>))) &#123;</span><br><span class=\"line\">    <span class=\"comment\">//此处为裁剪框左上角，可调整裁剪框大小</span></span><br><span class=\"line\">    <span class=\"built_in\">document</span>.addEventListener(<span class=\"string\">\"mousemove\"</span>, changeLeftTop, <span class=\"literal\">false</span>);</span><br><span class=\"line\">    <span class=\"built_in\">document</span>.addEventListener(<span class=\"string\">\"mouseup\"</span>, mouseEnd, <span class=\"literal\">false</span>);</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (((_right - <span class=\"number\">20</span>) &lt; mousestartX &amp;&amp; mousestartX &lt; (_right + <span class=\"number\">20</span>)) &amp;&amp; ((_bottom - <span class=\"number\">20</span>) &lt; mousestartY &amp;&amp; mousestartY &lt; (_bottom + <span class=\"number\">20</span>))) &#123;</span><br><span class=\"line\">    <span class=\"comment\">//此处为裁剪框右下角，可调整裁剪框大小</span></span><br><span class=\"line\">    <span class=\"built_in\">document</span>.addEventListener(<span class=\"string\">\"mousemove\"</span>, changeRightBottom, <span class=\"literal\">false</span>);</span><br><span class=\"line\">    <span class=\"built_in\">document</span>.addEventListener(<span class=\"string\">\"mouseup\"</span>, mouseEnd, <span class=\"literal\">false</span>);</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> ((_left + <span class=\"number\">20</span>) &lt; mousestartX &amp;&amp; (_right - <span class=\"number\">20</span>) &gt; mousestartX &amp;&amp; (_top + <span class=\"number\">20</span>) &lt; mousestartY &amp;&amp; (_bottom - <span class=\"number\">20</span>) &gt; mousestartY) &#123;</span><br><span class=\"line\">    <span class=\"comment\">//此处为裁剪框里面，可移动裁剪框</span></span><br><span class=\"line\">    <span class=\"built_in\">document</span>.addEventListener(<span class=\"string\">\"mousemove\"</span>, changeMove, <span class=\"literal\">false</span>);</span><br><span class=\"line\">    <span class=\"built_in\">document</span>.addEventListener(<span class=\"string\">\"mouseup\"</span>, mouseEnd, <span class=\"literal\">false</span>);</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>触发开始事件后，开始绑定移动（mousemove/touchmove）和结束事件（mouseup/touchend）的检测</p>\n<ul>\n<li>具体的实现这里不详细说明，大家可查看源文件获取</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"结束语\"><a href=\"#结束语\" class=\"headerlink\" title=\"结束语\"></a>结束语</h2><hr>\n<p>曾经我很喜欢用下划线命名变量，被小伙伴们吐槽过很多遍，这些代码还处于那个时代的产物，小伙伴们请见谅呀。</p>\n","excerpt":"<p>需要对图片进行裁剪时，可使用该jQuery插件。本文介绍实现方法。<br>","more":"</p>\n<p>代码放在github上，有兴趣的小伙伴可以下载看<br><a href=\"https://github.com/godbasin/godbasin.github.io/tree/blog-codes/picture-cut\">picture-cut</a></p>\n<p>最终效果图如下<a href=\"http://o92md66rk.bkt.clouddn.com/index.html\">点击查看页面</a><br><img src=\"http://o905ne85q.bkt.clouddn.com/picture-cut.png\" alt=\"image\"></p>\n<h2 id=\"插件介绍\"><a href=\"#插件介绍\" class=\"headerlink\" title=\"插件介绍\"></a>插件介绍</h2><hr>\n<h3 id=\"使用方法\"><a href=\"#使用方法\" class=\"headerlink\" title=\"使用方法\"></a>使用方法</h3><ul>\n<li><p>html</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">class</span>=<span class=\"string\">\"img-to-cut\"</span> <span class=\"attr\">src</span>=<span class=\"string\">\"img/1.png\"</span> /&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">class</span>=<span class=\"string\">\"img-to-cut\"</span> <span class=\"attr\">src</span>=<span class=\"string\">\"img/2.png\"</span> /&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">class</span>=<span class=\"string\">\"img-to-cut\"</span> <span class=\"attr\">src</span>=<span class=\"string\">\"img/3.png\"</span> /&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!--需加上一个包裹的外壳--&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">section</span> <span class=\"attr\">id</span>=<span class=\"string\">\"bsphotocut-con\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">section</span>&gt;</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>js</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//初始化能进行裁剪的图片：此处使用class='img-to-cut'</span></span><br><span class=\"line\">$(<span class=\"string\">\".img-to-cut\"</span>).click(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  $(<span class=\"keyword\">this</span>).bsPhotoCut(&#123;</span><br><span class=\"line\">    <span class=\"string\">\"section\"</span>: <span class=\"string\">\"#bsphotocut-con\"</span>, <span class=\"comment\">//外框</span></span><br><span class=\"line\">    <span class=\"string\">\"ratio\"</span>: <span class=\"string\">\"0\"</span>, <span class=\"comment\">//裁剪框宽度和高度比例n:m, 为0则不限比例</span></span><br><span class=\"line\">    <span class=\"string\">\"success\"</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">src, obj</span>) </span>&#123; <span class=\"comment\">//src为返回图片src, obj为调用此插件的DOM对象this</span></span><br><span class=\"line\">      <span class=\"keyword\">var</span> _img = $(<span class=\"string\">\"&lt;img src='\"</span> + src + <span class=\"string\">\"' /&gt;\"</span>);</span><br><span class=\"line\">      $(<span class=\"string\">\"body\"</span>).append(_img);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3 id=\"插件封装方法\"><a href=\"#插件封装方法\" class=\"headerlink\" title=\"插件封装方法\"></a>插件封装方法</h3><ul>\n<li>使用jQuery拓展属性$.fn.xxx来进行封装</li>\n<li>这里有超详细教程<a href=\"http://www.cnblogs.com/Wayou/p/jquery_plugin_tutorial.html\">《jQuery插件开发精品教程，让你的jQuery提升一个台阶》</a></li>\n<li>本插件的封装不是特别完美，因为涉及事件绑定，当时还没想到很好的办法，欢迎小伙伴们提意见</li>\n</ul>\n<h2 id=\"图片裁剪原理\"><a href=\"#图片裁剪原理\" class=\"headerlink\" title=\"图片裁剪原理\"></a>图片裁剪原理</h2><hr>\n<h3 id=\"使用HTML5-Canvas实现裁剪过程\"><a href=\"#使用HTML5-Canvas实现裁剪过程\" class=\"headerlink\" title=\"使用HTML5 Canvas实现裁剪过程\"></a>使用HTML5 Canvas实现裁剪过程</h3><ul>\n<li>创建两个canvas：canvas1–装载图片 canvas2–装载裁剪框<h3 id=\"canvas1\"><a href=\"#canvas1\" class=\"headerlink\" title=\"canvas1\"></a>canvas1</h3></li>\n<li>装载图片，实现图片居中处理，具体相关原理可参考<a href=\"https://github.com/godbasin/godbasin.github.io/blob/blog-codes/picture-align/js/style.js\">picture-align插件</a></li>\n</ul>\n<h3 id=\"canvas2\"><a href=\"#canvas2\" class=\"headerlink\" title=\"canvas2\"></a>canvas2</h3><ul>\n<li>装载裁剪框，若有限制比例则按照比例缩放</li>\n<li>裁剪框溢出canvas1时候的处理</li>\n</ul>\n<h3 id=\"获取裁剪后图片\"><a href=\"#获取裁剪后图片\" class=\"headerlink\" title=\"获取裁剪后图片\"></a>获取裁剪后图片</h3><ul>\n<li>使用Canvas函数getImageData可读取特定区域的图片数据</li>\n<li>使用Canvas函数putImageData可导出图片数据至canvas</li>\n<li>使用Canvas函数toDataURL可将canvas导出为图片格式</li>\n<li>这里需要注意，getImageData可能产生跨域问题，解决办法可自行google（似乎没有特别好的解决方法）<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cutOver: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">obj</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> _options = obj.options,</span><br><span class=\"line\">    <span class=\"comment\">//获取canvas1图片数据</span></span><br><span class=\"line\">    canvas1 = <span class=\"built_in\">document</span>.getElementById(_options.canvas_id + <span class=\"string\">\"1\"</span>),</span><br><span class=\"line\">    ctx1 = canvas1.getContext(<span class=\"string\">'2d'</span>),</span><br><span class=\"line\">    <span class=\"comment\">//导出canvas1图片数据，可能有跨域问题哦</span></span><br><span class=\"line\">    imgData = ctx1.getImageData(_options.canvas_left, _options.canvas_top, _options.canvas_width, _options.canvas_height),</span><br><span class=\"line\">    canvas3 = <span class=\"built_in\">document</span>.createElement(<span class=\"string\">\"canvas\"</span>),</span><br><span class=\"line\">    ctx3 = canvas3.getContext(<span class=\"string\">'2d'</span>),</span><br><span class=\"line\">    _image;</span><br><span class=\"line\">  canvas3.width = _options.canvas_width;</span><br><span class=\"line\">  canvas3.height = _options.canvas_height;</span><br><span class=\"line\">  <span class=\"comment\">//将图片数据输出到canvas3</span></span><br><span class=\"line\">  ctx3.putImageData(imgData, <span class=\"number\">0</span>, <span class=\"number\">0</span>);</span><br><span class=\"line\">  <span class=\"comment\">//将canvas3转换成图片</span></span><br><span class=\"line\">  _image = canvas3.toDataURL(<span class=\"string\">\"image/jpg\"</span>);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> _image;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h2 id=\"鼠标或者触屏事件处理\"><a href=\"#鼠标或者触屏事件处理\" class=\"headerlink\" title=\"鼠标或者触屏事件处理\"></a>鼠标或者触屏事件处理</h2><hr>\n<ul>\n<li>鼠标事件为mousedown/mousemove/mouseup，相应js文件为mousestyle.js<ul>\n<li>鼠标获取坐标位置可参考<a href=\"\">js判断某个位置是否特定元素</a></li>\n</ul>\n</li>\n<li>触屏事件为touchstart/touchmove/touchend，相应js文件为touchstyle.js<ul>\n<li>触屏事件获取坐标位置为event.touches[0].clientX和event.touches[0].clientY</li>\n</ul>\n</li>\n<li><p>在裁剪过程中，全程绑定开始事件（mousedown/touchstart）的检测</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//此处为鼠标事件部分代码</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">mouseStart</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">//getMousePos为获取鼠标坐标的方法，此处不详细讲解</span></span><br><span class=\"line\">  mousestartX = that.getMousePos(event).x - _l;</span><br><span class=\"line\">  mousestartY = that.getMousePos(event).y - _t;</span><br><span class=\"line\">  <span class=\"comment\">//判断鼠标位置是否为裁剪框的角，并针对不同角绑定不同的移动事件</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (((_left - <span class=\"number\">20</span>) &lt; mousestartX &amp;&amp; mousestartX &lt; (_left + <span class=\"number\">20</span>)) &amp;&amp; ((_top - <span class=\"number\">20</span>) &lt; mousestartY &amp;&amp; mousestartY &lt; (_top + <span class=\"number\">20</span>))) &#123;</span><br><span class=\"line\">    <span class=\"comment\">//此处为裁剪框左上角，可调整裁剪框大小</span></span><br><span class=\"line\">    <span class=\"built_in\">document</span>.addEventListener(<span class=\"string\">\"mousemove\"</span>, changeLeftTop, <span class=\"literal\">false</span>);</span><br><span class=\"line\">    <span class=\"built_in\">document</span>.addEventListener(<span class=\"string\">\"mouseup\"</span>, mouseEnd, <span class=\"literal\">false</span>);</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (((_right - <span class=\"number\">20</span>) &lt; mousestartX &amp;&amp; mousestartX &lt; (_right + <span class=\"number\">20</span>)) &amp;&amp; ((_bottom - <span class=\"number\">20</span>) &lt; mousestartY &amp;&amp; mousestartY &lt; (_bottom + <span class=\"number\">20</span>))) &#123;</span><br><span class=\"line\">    <span class=\"comment\">//此处为裁剪框右下角，可调整裁剪框大小</span></span><br><span class=\"line\">    <span class=\"built_in\">document</span>.addEventListener(<span class=\"string\">\"mousemove\"</span>, changeRightBottom, <span class=\"literal\">false</span>);</span><br><span class=\"line\">    <span class=\"built_in\">document</span>.addEventListener(<span class=\"string\">\"mouseup\"</span>, mouseEnd, <span class=\"literal\">false</span>);</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> ((_left + <span class=\"number\">20</span>) &lt; mousestartX &amp;&amp; (_right - <span class=\"number\">20</span>) &gt; mousestartX &amp;&amp; (_top + <span class=\"number\">20</span>) &lt; mousestartY &amp;&amp; (_bottom - <span class=\"number\">20</span>) &gt; mousestartY) &#123;</span><br><span class=\"line\">    <span class=\"comment\">//此处为裁剪框里面，可移动裁剪框</span></span><br><span class=\"line\">    <span class=\"built_in\">document</span>.addEventListener(<span class=\"string\">\"mousemove\"</span>, changeMove, <span class=\"literal\">false</span>);</span><br><span class=\"line\">    <span class=\"built_in\">document</span>.addEventListener(<span class=\"string\">\"mouseup\"</span>, mouseEnd, <span class=\"literal\">false</span>);</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>触发开始事件后，开始绑定移动（mousemove/touchmove）和结束事件（mouseup/touchend）的检测</p>\n<ul>\n<li>具体的实现这里不详细说明，大家可查看源文件获取</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"结束语\"><a href=\"#结束语\" class=\"headerlink\" title=\"结束语\"></a>结束语</h2><hr>\n<p>曾经我很喜欢用下划线命名变量，被小伙伴们吐槽过很多遍，这些代码还处于那个时代的产物，小伙伴们请见谅呀。</p>"},{"title":"jQuery插件--图片居中对齐","date":"2016-06-21T12:41:05.000Z","_content":"需要将不同尺寸的图片居中放置时，可使用该jQuery插件。本文介绍实现方法。\n<!--more-->\n\n代码放在github上，有兴趣的小伙伴可以下载看\n[picture-align](https://github.com/godbasin/godbasin.github.io/tree/blog-codes/picture-align)\n\n最终效果图如下[点击查看页面](http://o92lwol8p.bkt.clouddn.com/index.html)\n![image](http://o905ne85q.bkt.clouddn.com/picture-align.png)\n\n## 插件介绍\n-----\n### 使用方法\n- html\n``` html\n<!--img元素外层裹一层div-->\n<div class=\"fill\">\n\t<img src=\"img/2.png\" />\n</div>\n```\n- js\n``` javascript\n//使用jQuery获取需要的外层容器\n$(\".fill\").bsPictureAlign({\n\t\"img_dom\": \".img\", //img的class/id/其他属性，为0则选中该容器内所有img（tagName === \"img\"）图片\n\t\"style\": \"fill\", //两种style：full为最短边对齐，过长剪裁；fill为最长边对齐，填充背景\n\t\"width\": \"100%\", //容器宽度，默认为100%\n\t\"height\": \"300px\", //容器高度，默认为300px\n\t\"background\": \"#000\" //背景填充颜色，默认为#000黑色\n});\n```\n### 插件封装方法\n- 使用jQuery拓展属性$.fn.xxx来进行封装\n- 这里有超详细教程[《jQuery插件开发精品教程，让你的jQuery提升一个台阶》](http://www.cnblogs.com/Wayou/p/jquery_plugin_tutorial.html)\n\n## 图片居中原理\n-----\n- 使用img.load()确保图片加载完成，此时可精确图片比例\n- 获取图片宽高比例，与容器比例进行比较\n\n### 最短边对齐，过长隐藏：full方法\n- 容器宽高比大于图片时，图片高度100%，宽度按比例缩放按比例缩放\n- 容器宽高比小于图片时，图片宽度100%，高度按比例缩放按比例缩放\n- 使用绝对定位将容器内图片居中\n- 设置容器overflow: hidden;隐藏图片过长部分\n\n### 最长边对齐，填充背景：fill方法\n- 容器宽高比大于图片时，图片宽度100%，高度按比例缩放\n- 容器宽高比小于图片时，图片高度100%，宽度按比例缩放\n- 使用绝对定位将容器内图片居中\n- 设置容器background，填充背景\n\n## 待完善的地方\n-----\n- 需要在图片加载完之后回调，可自行增加回调函数\n- 去到哪里都别忘了优化代码哦\n\n## 插件代码\n-----\n请别叫我下划线狂魔^_^\n``` javascript\n;\n(function($, window, document, undefined) {\n\t$.fn.bsPictureAlign = function(options) {\n\t\tvar num = this.length,\n\t\t\tloadnum = 0;\n\t\t//若为多个容器，分别初始化每个容器\n\t\tfor (i = 0; i < this.length; i++) {\n\t\t\tvar _this = this[i];\n\t\t\t//创建bsPictureAlign实体\n\t\t\tvar bsPictureAlign = new BsPictureAlign(_this, options);\n\t\t\t//调用其方法\n\t\t\tif (options.style == \"full\") bsPictureAlign.full();\n\t\t\tif (options.style == \"fill\") bsPictureAlign.fill({\n\t\t\t\t//这里增加了回调函数，确保所有图片处理完毕后进行回调\n\t\t\t\tcallback: function() {\n\t\t\t\t\tloadnum++;\n\t\t\t\t\tif (num == loadnum && options.loadover) {\n\t\t\t\t\t\toptions.loadover();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t};\n\t//定义原型\n\tvar BsPictureAlign = function(ele, opt) {\n\t\tthis.$ele = ele;\n\t\t//若无定义宽高背景，使用默认值\n\t\t\tthis.defaults = {\n\t\t\t\t\"width\": \"100%\",\n\t\t\t\t\"height\": \"300px\",\n\t\t\t\t\"background\": \"#000\"\n\t\t\t};\n\t\t\tthis.options = $.extend({}, this.defaults, opt);\n\t};\n\tBsPictureAlign.prototype = {\n\t\t//定义fill方法\n\t\tfill: function(opc) {\n\t\t\tvar that = this,\n\t\t\t\t_options = that.options,\n\t\t\t\t_ele = $(this.$ele),\n\t\t\t\t_dom = _options.img_dom,\n\t\t\t\t_img = _dom ? _ele.find(_dom) : _ele.find(\"img\"),\n\t\t\t\t_this, _width, _height, _ratio, _w, _h, _r, _wider;\n\t\t\t//修改图片容器宽高\n\t\t\t_ele.css({\n\t\t\t\t\"width\": _options.width,\n\t\t\t\t\"height\": _options.height,\n\t\t\t\t\"overflow\": \"hidden\",\n\t\t\t\t\"background\": _options.background,\n\t\t\t\t\"position\": \"relative\"\n\t\t\t});\n\t\t\t//容器比例\n\t\t\t_width = _ele.width();\n\t\t\t_height = _ele.height();\n\t\t\t_ratio = _width / _height;\n\t\t\t//每张所选图片进行处理\n\t\t\t_img.each(function() {\n\t\t\t\t_this = $(this);\n\t\t\t\t//此处可选，用来保证图片加载完之前不可见\n\t\t\t\t_this.css({\n\t\t\t\t\t'opacity': 0,\n\t\t\t\t});\n\t\t\t\t//此处确保图片加载完毕\n\t\t\t\t_this.load(function() {\n\t\t\t\t\t_w = _this.width();\n\t\t\t\t\t_h = _this.height();\n\t\t\t\t\t_r = _w / _h;\n\t\t\t\t\t_wider = _r > _ratio ? true : false;\n\t\t\t\t\t//容器宽高比小于图片时，图片高度100%，宽度按比例缩放\n\t\t\t\t\tif (_wider) {\n\t\t\t\t\t\t_this.css({\n\t\t\t\t\t\t\t\"width\": \"100%\",\n\t\t\t\t\t\t\t\"height\": \"auto\"\n\t\t\t\t\t\t});\n\t\t\t\t\t\tvar _top = (_height - _this.height()) / 2;\n\t\t\t\t\t\t_this.css({\n\t\t\t\t\t\t\t\"position\": \"absolute\",\n\t\t\t\t\t\t\t\"top\": _top + \"px\",\n\t\t\t\t\t\t\t\"left\": 0\n\t\t\t\t\t\t});\n\t\t\t\t\t//容器宽高比大于图片时，图片宽度100%，高度按比例缩放\n\t\t\t\t\t} else {\n\t\t\t\t\t\t_this.css({\n\t\t\t\t\t\t\t\"width\": \"auto\",\n\t\t\t\t\t\t\t\"height\": \"100%\"\n\t\t\t\t\t\t});\n\t\t\t\t\t\tvar _left = (_width - _this.width()) / 2;\n\t\t\t\t\t\t_this.css({\n\t\t\t\t\t\t\t\"position\": \"absolute\",\n\t\t\t\t\t\t\t\"top\": 0,\n\t\t\t\t\t\t\t\"left\": _left + \"px\"\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\t\t\t\t_this.css({\n\t\t\t\t\t\t'opacity': 1,\n\t\t\t\t\t});\n\t\t\t\t\tif (opc.callback) opc.callback();\n\t\t\t\t});\n\t\t\t\t//此处图片加载失败处理\n\t\t\t\t_this.error(function() {\n\t\t\t\t\tif (opc.callback) opc.callback();\n\t\t\t\t\t_this.css({\n\t\t\t\t\t\t'opacity': 1,\n\t\t\t\t\t});\n\t\t\t\t});\n\t\t\t});\n\t\t\t//链式回调\n\t\t\treturn this;\n\t\t},\n\t\t//定义full方法\n\t\tfull: function() {\n\t\t\tvar that = this,\n\t\t\t\t_options = that.options,\n\t\t\t\t_ele = $(this.$ele),\n\t\t\t\t_img = _ele.find(\"img\"),\n\t\t\t\t_this, _width, _height, _ratio, _w, _h, _r, _wider;\n\t\t\t//修改图片外壳宽高\n\t\t\t_ele.css({\n\t\t\t\t\"width\": _options.width,\n\t\t\t\t\"height\": _options.height,\n\t\t\t\t\"overflow\": \"hidden\",\n\t\t\t\t\"background\": \"#000\",\n\t\t\t\t\"position\": \"relative\"\n\t\t\t});\n\t\t\t//容器比例\n\t\t\t_width = _ele.width();\n\t\t\t_height = _ele.height();\n\t\t\t_ratio = _width / _height;\n\t\t\t//每张所选图片进行处理\n\t\t\t_img.each(function() {\n\t\t\t\t_this = $(this);\n\t\t\t\t//此处确保图片加载完毕\n\t\t\t\t_this.load(function() {\n\t\t\t\t\t_w = _this.width();\n\t\t\t\t\t_h = _this.height();\n\t\t\t\t\t_r = _w / _h;\n\t\t\t\t\t_wider = _r > _ratio ? true : false;\n\t\t\t\t\t//容器宽高比大于图片时，图片高度100%，宽度按比例缩放按比例缩放\n\t\t\t\t\tif (_wider) {\n\t\t\t\t\t\t_this.css({\n\t\t\t\t\t\t\t\"width\": \"auto\",\n\t\t\t\t\t\t\t\"height\": \"100%\"\n\t\t\t\t\t\t});\n\t\t\t\t\t\tvar _left = (_width - _this.width()) / 2;\n\t\t\t\t\t\t_this.css({\n\t\t\t\t\t\t\t\"position\": \"absolute\",\n\t\t\t\t\t\t\t\"top\": 0,\n\t\t\t\t\t\t\t\"left\": _left + \"px\"\n\t\t\t\t\t\t});\n\t\t\t\t\t//容器宽高比小于图片时，图片宽度100%，高度按比例缩放按比例缩放\n\t\t\t\t\t} else {\n\t\t\t\t\t\t_this.css({\n\t\t\t\t\t\t\t\"width\": \"100%\",\n\t\t\t\t\t\t\t\"height\": \"auto\"\n\t\t\t\t\t\t});\n\t\t\t\t\t\tvar _top = (_height - _this.height()) / 2;\n\t\t\t\t\t\t_this.css({\n\t\t\t\t\t\t\t\"position\": \"absolute\",\n\t\t\t\t\t\t\t\"top\": _top + \"px\",\n\t\t\t\t\t\t\t\"left\": 0\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t});\n\t\t\t//链式回调\n\t\t\treturn this;\n\t\t},\n\t}\n})(jQuery, window, document);\n```\n\n## 结束语\n-----\n插件封装也是个有趣的事情哦，当然有兴趣也可以将逻辑封装成原生js插件哒。","source":"_posts/picture-align.md","raw":"---\ntitle: jQuery插件--图片居中对齐\ndate: 2016-06-21 20:41:05\ncategories: jQuery杂烩\ntags: 自制插件\n---\n需要将不同尺寸的图片居中放置时，可使用该jQuery插件。本文介绍实现方法。\n<!--more-->\n\n代码放在github上，有兴趣的小伙伴可以下载看\n[picture-align](https://github.com/godbasin/godbasin.github.io/tree/blog-codes/picture-align)\n\n最终效果图如下[点击查看页面](http://o92lwol8p.bkt.clouddn.com/index.html)\n![image](http://o905ne85q.bkt.clouddn.com/picture-align.png)\n\n## 插件介绍\n-----\n### 使用方法\n- html\n``` html\n<!--img元素外层裹一层div-->\n<div class=\"fill\">\n\t<img src=\"img/2.png\" />\n</div>\n```\n- js\n``` javascript\n//使用jQuery获取需要的外层容器\n$(\".fill\").bsPictureAlign({\n\t\"img_dom\": \".img\", //img的class/id/其他属性，为0则选中该容器内所有img（tagName === \"img\"）图片\n\t\"style\": \"fill\", //两种style：full为最短边对齐，过长剪裁；fill为最长边对齐，填充背景\n\t\"width\": \"100%\", //容器宽度，默认为100%\n\t\"height\": \"300px\", //容器高度，默认为300px\n\t\"background\": \"#000\" //背景填充颜色，默认为#000黑色\n});\n```\n### 插件封装方法\n- 使用jQuery拓展属性$.fn.xxx来进行封装\n- 这里有超详细教程[《jQuery插件开发精品教程，让你的jQuery提升一个台阶》](http://www.cnblogs.com/Wayou/p/jquery_plugin_tutorial.html)\n\n## 图片居中原理\n-----\n- 使用img.load()确保图片加载完成，此时可精确图片比例\n- 获取图片宽高比例，与容器比例进行比较\n\n### 最短边对齐，过长隐藏：full方法\n- 容器宽高比大于图片时，图片高度100%，宽度按比例缩放按比例缩放\n- 容器宽高比小于图片时，图片宽度100%，高度按比例缩放按比例缩放\n- 使用绝对定位将容器内图片居中\n- 设置容器overflow: hidden;隐藏图片过长部分\n\n### 最长边对齐，填充背景：fill方法\n- 容器宽高比大于图片时，图片宽度100%，高度按比例缩放\n- 容器宽高比小于图片时，图片高度100%，宽度按比例缩放\n- 使用绝对定位将容器内图片居中\n- 设置容器background，填充背景\n\n## 待完善的地方\n-----\n- 需要在图片加载完之后回调，可自行增加回调函数\n- 去到哪里都别忘了优化代码哦\n\n## 插件代码\n-----\n请别叫我下划线狂魔^_^\n``` javascript\n;\n(function($, window, document, undefined) {\n\t$.fn.bsPictureAlign = function(options) {\n\t\tvar num = this.length,\n\t\t\tloadnum = 0;\n\t\t//若为多个容器，分别初始化每个容器\n\t\tfor (i = 0; i < this.length; i++) {\n\t\t\tvar _this = this[i];\n\t\t\t//创建bsPictureAlign实体\n\t\t\tvar bsPictureAlign = new BsPictureAlign(_this, options);\n\t\t\t//调用其方法\n\t\t\tif (options.style == \"full\") bsPictureAlign.full();\n\t\t\tif (options.style == \"fill\") bsPictureAlign.fill({\n\t\t\t\t//这里增加了回调函数，确保所有图片处理完毕后进行回调\n\t\t\t\tcallback: function() {\n\t\t\t\t\tloadnum++;\n\t\t\t\t\tif (num == loadnum && options.loadover) {\n\t\t\t\t\t\toptions.loadover();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t};\n\t//定义原型\n\tvar BsPictureAlign = function(ele, opt) {\n\t\tthis.$ele = ele;\n\t\t//若无定义宽高背景，使用默认值\n\t\t\tthis.defaults = {\n\t\t\t\t\"width\": \"100%\",\n\t\t\t\t\"height\": \"300px\",\n\t\t\t\t\"background\": \"#000\"\n\t\t\t};\n\t\t\tthis.options = $.extend({}, this.defaults, opt);\n\t};\n\tBsPictureAlign.prototype = {\n\t\t//定义fill方法\n\t\tfill: function(opc) {\n\t\t\tvar that = this,\n\t\t\t\t_options = that.options,\n\t\t\t\t_ele = $(this.$ele),\n\t\t\t\t_dom = _options.img_dom,\n\t\t\t\t_img = _dom ? _ele.find(_dom) : _ele.find(\"img\"),\n\t\t\t\t_this, _width, _height, _ratio, _w, _h, _r, _wider;\n\t\t\t//修改图片容器宽高\n\t\t\t_ele.css({\n\t\t\t\t\"width\": _options.width,\n\t\t\t\t\"height\": _options.height,\n\t\t\t\t\"overflow\": \"hidden\",\n\t\t\t\t\"background\": _options.background,\n\t\t\t\t\"position\": \"relative\"\n\t\t\t});\n\t\t\t//容器比例\n\t\t\t_width = _ele.width();\n\t\t\t_height = _ele.height();\n\t\t\t_ratio = _width / _height;\n\t\t\t//每张所选图片进行处理\n\t\t\t_img.each(function() {\n\t\t\t\t_this = $(this);\n\t\t\t\t//此处可选，用来保证图片加载完之前不可见\n\t\t\t\t_this.css({\n\t\t\t\t\t'opacity': 0,\n\t\t\t\t});\n\t\t\t\t//此处确保图片加载完毕\n\t\t\t\t_this.load(function() {\n\t\t\t\t\t_w = _this.width();\n\t\t\t\t\t_h = _this.height();\n\t\t\t\t\t_r = _w / _h;\n\t\t\t\t\t_wider = _r > _ratio ? true : false;\n\t\t\t\t\t//容器宽高比小于图片时，图片高度100%，宽度按比例缩放\n\t\t\t\t\tif (_wider) {\n\t\t\t\t\t\t_this.css({\n\t\t\t\t\t\t\t\"width\": \"100%\",\n\t\t\t\t\t\t\t\"height\": \"auto\"\n\t\t\t\t\t\t});\n\t\t\t\t\t\tvar _top = (_height - _this.height()) / 2;\n\t\t\t\t\t\t_this.css({\n\t\t\t\t\t\t\t\"position\": \"absolute\",\n\t\t\t\t\t\t\t\"top\": _top + \"px\",\n\t\t\t\t\t\t\t\"left\": 0\n\t\t\t\t\t\t});\n\t\t\t\t\t//容器宽高比大于图片时，图片宽度100%，高度按比例缩放\n\t\t\t\t\t} else {\n\t\t\t\t\t\t_this.css({\n\t\t\t\t\t\t\t\"width\": \"auto\",\n\t\t\t\t\t\t\t\"height\": \"100%\"\n\t\t\t\t\t\t});\n\t\t\t\t\t\tvar _left = (_width - _this.width()) / 2;\n\t\t\t\t\t\t_this.css({\n\t\t\t\t\t\t\t\"position\": \"absolute\",\n\t\t\t\t\t\t\t\"top\": 0,\n\t\t\t\t\t\t\t\"left\": _left + \"px\"\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\t\t\t\t_this.css({\n\t\t\t\t\t\t'opacity': 1,\n\t\t\t\t\t});\n\t\t\t\t\tif (opc.callback) opc.callback();\n\t\t\t\t});\n\t\t\t\t//此处图片加载失败处理\n\t\t\t\t_this.error(function() {\n\t\t\t\t\tif (opc.callback) opc.callback();\n\t\t\t\t\t_this.css({\n\t\t\t\t\t\t'opacity': 1,\n\t\t\t\t\t});\n\t\t\t\t});\n\t\t\t});\n\t\t\t//链式回调\n\t\t\treturn this;\n\t\t},\n\t\t//定义full方法\n\t\tfull: function() {\n\t\t\tvar that = this,\n\t\t\t\t_options = that.options,\n\t\t\t\t_ele = $(this.$ele),\n\t\t\t\t_img = _ele.find(\"img\"),\n\t\t\t\t_this, _width, _height, _ratio, _w, _h, _r, _wider;\n\t\t\t//修改图片外壳宽高\n\t\t\t_ele.css({\n\t\t\t\t\"width\": _options.width,\n\t\t\t\t\"height\": _options.height,\n\t\t\t\t\"overflow\": \"hidden\",\n\t\t\t\t\"background\": \"#000\",\n\t\t\t\t\"position\": \"relative\"\n\t\t\t});\n\t\t\t//容器比例\n\t\t\t_width = _ele.width();\n\t\t\t_height = _ele.height();\n\t\t\t_ratio = _width / _height;\n\t\t\t//每张所选图片进行处理\n\t\t\t_img.each(function() {\n\t\t\t\t_this = $(this);\n\t\t\t\t//此处确保图片加载完毕\n\t\t\t\t_this.load(function() {\n\t\t\t\t\t_w = _this.width();\n\t\t\t\t\t_h = _this.height();\n\t\t\t\t\t_r = _w / _h;\n\t\t\t\t\t_wider = _r > _ratio ? true : false;\n\t\t\t\t\t//容器宽高比大于图片时，图片高度100%，宽度按比例缩放按比例缩放\n\t\t\t\t\tif (_wider) {\n\t\t\t\t\t\t_this.css({\n\t\t\t\t\t\t\t\"width\": \"auto\",\n\t\t\t\t\t\t\t\"height\": \"100%\"\n\t\t\t\t\t\t});\n\t\t\t\t\t\tvar _left = (_width - _this.width()) / 2;\n\t\t\t\t\t\t_this.css({\n\t\t\t\t\t\t\t\"position\": \"absolute\",\n\t\t\t\t\t\t\t\"top\": 0,\n\t\t\t\t\t\t\t\"left\": _left + \"px\"\n\t\t\t\t\t\t});\n\t\t\t\t\t//容器宽高比小于图片时，图片宽度100%，高度按比例缩放按比例缩放\n\t\t\t\t\t} else {\n\t\t\t\t\t\t_this.css({\n\t\t\t\t\t\t\t\"width\": \"100%\",\n\t\t\t\t\t\t\t\"height\": \"auto\"\n\t\t\t\t\t\t});\n\t\t\t\t\t\tvar _top = (_height - _this.height()) / 2;\n\t\t\t\t\t\t_this.css({\n\t\t\t\t\t\t\t\"position\": \"absolute\",\n\t\t\t\t\t\t\t\"top\": _top + \"px\",\n\t\t\t\t\t\t\t\"left\": 0\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t});\n\t\t\t//链式回调\n\t\t\treturn this;\n\t\t},\n\t}\n})(jQuery, window, document);\n```\n\n## 结束语\n-----\n插件封装也是个有趣的事情哦，当然有兴趣也可以将逻辑封装成原生js插件哒。","slug":"picture-align","published":1,"updated":"2016-06-24T14:15:33.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cirrwvo59002038l5pytwqrwq","content":"<p>需要将不同尺寸的图片居中放置时，可使用该jQuery插件。本文介绍实现方法。<br><a id=\"more\"></a></p>\n<p>代码放在github上，有兴趣的小伙伴可以下载看<br><a href=\"https://github.com/godbasin/godbasin.github.io/tree/blog-codes/picture-align\" target=\"_blank\" rel=\"external\">picture-align</a></p>\n<p>最终效果图如下<a href=\"http://o92lwol8p.bkt.clouddn.com/index.html\" target=\"_blank\" rel=\"external\">点击查看页面</a><br><img src=\"http://o905ne85q.bkt.clouddn.com/picture-align.png\" alt=\"image\"></p>\n<h2 id=\"插件介绍\"><a href=\"#插件介绍\" class=\"headerlink\" title=\"插件介绍\"></a>插件介绍</h2><hr>\n<h3 id=\"使用方法\"><a href=\"#使用方法\" class=\"headerlink\" title=\"使用方法\"></a>使用方法</h3><ul>\n<li><p>html</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!--img元素外层裹一层div--&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"fill\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">src</span>=<span class=\"string\">\"img/2.png\"</span> /&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>js</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//使用jQuery获取需要的外层容器</span></span><br><span class=\"line\">$(<span class=\"string\">\".fill\"</span>).bsPictureAlign(&#123;</span><br><span class=\"line\">  <span class=\"string\">\"img_dom\"</span>: <span class=\"string\">\".img\"</span>, <span class=\"comment\">//img的class/id/其他属性，为0则选中该容器内所有img（tagName === \"img\"）图片</span></span><br><span class=\"line\">  <span class=\"string\">\"style\"</span>: <span class=\"string\">\"fill\"</span>, <span class=\"comment\">//两种style：full为最短边对齐，过长剪裁；fill为最长边对齐，填充背景</span></span><br><span class=\"line\">  <span class=\"string\">\"width\"</span>: <span class=\"string\">\"100%\"</span>, <span class=\"comment\">//容器宽度，默认为100%</span></span><br><span class=\"line\">  <span class=\"string\">\"height\"</span>: <span class=\"string\">\"300px\"</span>, <span class=\"comment\">//容器高度，默认为300px</span></span><br><span class=\"line\">  <span class=\"string\">\"background\"</span>: <span class=\"string\">\"#000\"</span> <span class=\"comment\">//背景填充颜色，默认为#000黑色</span></span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3 id=\"插件封装方法\"><a href=\"#插件封装方法\" class=\"headerlink\" title=\"插件封装方法\"></a>插件封装方法</h3><ul>\n<li>使用jQuery拓展属性$.fn.xxx来进行封装</li>\n<li>这里有超详细教程<a href=\"http://www.cnblogs.com/Wayou/p/jquery_plugin_tutorial.html\" target=\"_blank\" rel=\"external\">《jQuery插件开发精品教程，让你的jQuery提升一个台阶》</a></li>\n</ul>\n<h2 id=\"图片居中原理\"><a href=\"#图片居中原理\" class=\"headerlink\" title=\"图片居中原理\"></a>图片居中原理</h2><hr>\n<ul>\n<li>使用img.load()确保图片加载完成，此时可精确图片比例</li>\n<li>获取图片宽高比例，与容器比例进行比较</li>\n</ul>\n<h3 id=\"最短边对齐，过长隐藏：full方法\"><a href=\"#最短边对齐，过长隐藏：full方法\" class=\"headerlink\" title=\"最短边对齐，过长隐藏：full方法\"></a>最短边对齐，过长隐藏：full方法</h3><ul>\n<li>容器宽高比大于图片时，图片高度100%，宽度按比例缩放按比例缩放</li>\n<li>容器宽高比小于图片时，图片宽度100%，高度按比例缩放按比例缩放</li>\n<li>使用绝对定位将容器内图片居中</li>\n<li>设置容器overflow: hidden;隐藏图片过长部分</li>\n</ul>\n<h3 id=\"最长边对齐，填充背景：fill方法\"><a href=\"#最长边对齐，填充背景：fill方法\" class=\"headerlink\" title=\"最长边对齐，填充背景：fill方法\"></a>最长边对齐，填充背景：fill方法</h3><ul>\n<li>容器宽高比大于图片时，图片宽度100%，高度按比例缩放</li>\n<li>容器宽高比小于图片时，图片高度100%，宽度按比例缩放</li>\n<li>使用绝对定位将容器内图片居中</li>\n<li>设置容器background，填充背景</li>\n</ul>\n<h2 id=\"待完善的地方\"><a href=\"#待完善的地方\" class=\"headerlink\" title=\"待完善的地方\"></a>待完善的地方</h2><hr>\n<ul>\n<li>需要在图片加载完之后回调，可自行增加回调函数</li>\n<li>去到哪里都别忘了优化代码哦</li>\n</ul>\n<h2 id=\"插件代码\"><a href=\"#插件代码\" class=\"headerlink\" title=\"插件代码\"></a>插件代码</h2><hr>\n<p>请别叫我下划线狂魔^_^<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">;</span><br><span class=\"line\">(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">$, window, document, undefined</span>) </span>&#123;</span><br><span class=\"line\">  $.fn.bsPictureAlign = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">options</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> num = <span class=\"keyword\">this</span>.length,</span><br><span class=\"line\">      loadnum = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"comment\">//若为多个容器，分别初始化每个容器</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (i = <span class=\"number\">0</span>; i &lt; <span class=\"keyword\">this</span>.length; i++) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">var</span> _this = <span class=\"keyword\">this</span>[i];</span><br><span class=\"line\">      <span class=\"comment\">//创建bsPictureAlign实体</span></span><br><span class=\"line\">      <span class=\"keyword\">var</span> bsPictureAlign = <span class=\"keyword\">new</span> BsPictureAlign(_this, options);</span><br><span class=\"line\">      <span class=\"comment\">//调用其方法</span></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (options.style == <span class=\"string\">\"full\"</span>) bsPictureAlign.full();</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (options.style == <span class=\"string\">\"fill\"</span>) bsPictureAlign.fill(&#123;</span><br><span class=\"line\">        <span class=\"comment\">//这里增加了回调函数，确保所有图片处理完毕后进行回调</span></span><br><span class=\"line\">        callback: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">          loadnum++;</span><br><span class=\"line\">          <span class=\"keyword\">if</span> (num == loadnum &amp;&amp; options.loadover) &#123;</span><br><span class=\"line\">            options.loadover();</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">  <span class=\"comment\">//定义原型</span></span><br><span class=\"line\">  <span class=\"keyword\">var</span> BsPictureAlign = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">ele, opt</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.$ele = ele;</span><br><span class=\"line\">    <span class=\"comment\">//若无定义宽高背景，使用默认值</span></span><br><span class=\"line\">      <span class=\"keyword\">this</span>.defaults = &#123;</span><br><span class=\"line\">        <span class=\"string\">\"width\"</span>: <span class=\"string\">\"100%\"</span>,</span><br><span class=\"line\">        <span class=\"string\">\"height\"</span>: <span class=\"string\">\"300px\"</span>,</span><br><span class=\"line\">        <span class=\"string\">\"background\"</span>: <span class=\"string\">\"#000\"</span></span><br><span class=\"line\">      &#125;;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.options = $.extend(&#123;&#125;, <span class=\"keyword\">this</span>.defaults, opt);</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">  BsPictureAlign.prototype = &#123;</span><br><span class=\"line\">    <span class=\"comment\">//定义fill方法</span></span><br><span class=\"line\">    fill: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">opc</span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">var</span> that = <span class=\"keyword\">this</span>,</span><br><span class=\"line\">        _options = that.options,</span><br><span class=\"line\">        _ele = $(<span class=\"keyword\">this</span>.$ele),</span><br><span class=\"line\">        _dom = _options.img_dom,</span><br><span class=\"line\">        _img = _dom ? _ele.find(_dom) : _ele.find(<span class=\"string\">\"img\"</span>),</span><br><span class=\"line\">        _this, _width, _height, _ratio, _w, _h, _r, _wider;</span><br><span class=\"line\">      <span class=\"comment\">//修改图片容器宽高</span></span><br><span class=\"line\">      _ele.css(&#123;</span><br><span class=\"line\">        <span class=\"string\">\"width\"</span>: _options.width,</span><br><span class=\"line\">        <span class=\"string\">\"height\"</span>: _options.height,</span><br><span class=\"line\">        <span class=\"string\">\"overflow\"</span>: <span class=\"string\">\"hidden\"</span>,</span><br><span class=\"line\">        <span class=\"string\">\"background\"</span>: _options.background,</span><br><span class=\"line\">        <span class=\"string\">\"position\"</span>: <span class=\"string\">\"relative\"</span></span><br><span class=\"line\">      &#125;);</span><br><span class=\"line\">      <span class=\"comment\">//容器比例</span></span><br><span class=\"line\">      _width = _ele.width();</span><br><span class=\"line\">      _height = _ele.height();</span><br><span class=\"line\">      _ratio = _width / _height;</span><br><span class=\"line\">      <span class=\"comment\">//每张所选图片进行处理</span></span><br><span class=\"line\">      _img.each(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        _this = $(<span class=\"keyword\">this</span>);</span><br><span class=\"line\">        <span class=\"comment\">//此处可选，用来保证图片加载完之前不可见</span></span><br><span class=\"line\">        _this.css(&#123;</span><br><span class=\"line\">          <span class=\"string\">'opacity'</span>: <span class=\"number\">0</span>,</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">        <span class=\"comment\">//此处确保图片加载完毕</span></span><br><span class=\"line\">        _this.load(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">          _w = _this.width();</span><br><span class=\"line\">          _h = _this.height();</span><br><span class=\"line\">          _r = _w / _h;</span><br><span class=\"line\">          _wider = _r &gt; _ratio ? <span class=\"literal\">true</span> : <span class=\"literal\">false</span>;</span><br><span class=\"line\">          <span class=\"comment\">//容器宽高比小于图片时，图片高度100%，宽度按比例缩放</span></span><br><span class=\"line\">          <span class=\"keyword\">if</span> (_wider) &#123;</span><br><span class=\"line\">            _this.css(&#123;</span><br><span class=\"line\">              <span class=\"string\">\"width\"</span>: <span class=\"string\">\"100%\"</span>,</span><br><span class=\"line\">              <span class=\"string\">\"height\"</span>: <span class=\"string\">\"auto\"</span></span><br><span class=\"line\">            &#125;);</span><br><span class=\"line\">            <span class=\"keyword\">var</span> _top = (_height - _this.height()) / <span class=\"number\">2</span>;</span><br><span class=\"line\">            _this.css(&#123;</span><br><span class=\"line\">              <span class=\"string\">\"position\"</span>: <span class=\"string\">\"absolute\"</span>,</span><br><span class=\"line\">              <span class=\"string\">\"top\"</span>: _top + <span class=\"string\">\"px\"</span>,</span><br><span class=\"line\">              <span class=\"string\">\"left\"</span>: <span class=\"number\">0</span></span><br><span class=\"line\">            &#125;);</span><br><span class=\"line\">          <span class=\"comment\">//容器宽高比大于图片时，图片宽度100%，高度按比例缩放</span></span><br><span class=\"line\">          &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            _this.css(&#123;</span><br><span class=\"line\">              <span class=\"string\">\"width\"</span>: <span class=\"string\">\"auto\"</span>,</span><br><span class=\"line\">              <span class=\"string\">\"height\"</span>: <span class=\"string\">\"100%\"</span></span><br><span class=\"line\">            &#125;);</span><br><span class=\"line\">            <span class=\"keyword\">var</span> _left = (_width - _this.width()) / <span class=\"number\">2</span>;</span><br><span class=\"line\">            _this.css(&#123;</span><br><span class=\"line\">              <span class=\"string\">\"position\"</span>: <span class=\"string\">\"absolute\"</span>,</span><br><span class=\"line\">              <span class=\"string\">\"top\"</span>: <span class=\"number\">0</span>,</span><br><span class=\"line\">              <span class=\"string\">\"left\"</span>: _left + <span class=\"string\">\"px\"</span></span><br><span class=\"line\">            &#125;);</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">          _this.css(&#123;</span><br><span class=\"line\">            <span class=\"string\">'opacity'</span>: <span class=\"number\">1</span>,</span><br><span class=\"line\">          &#125;);</span><br><span class=\"line\">          <span class=\"keyword\">if</span> (opc.callback) opc.callback();</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">        <span class=\"comment\">//此处图片加载失败处理</span></span><br><span class=\"line\">        _this.error(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">          <span class=\"keyword\">if</span> (opc.callback) opc.callback();</span><br><span class=\"line\">          _this.css(&#123;</span><br><span class=\"line\">            <span class=\"string\">'opacity'</span>: <span class=\"number\">1</span>,</span><br><span class=\"line\">          &#125;);</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">      &#125;);</span><br><span class=\"line\">      <span class=\"comment\">//链式回调</span></span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"comment\">//定义full方法</span></span><br><span class=\"line\">    full: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">var</span> that = <span class=\"keyword\">this</span>,</span><br><span class=\"line\">        _options = that.options,</span><br><span class=\"line\">        _ele = $(<span class=\"keyword\">this</span>.$ele),</span><br><span class=\"line\">        _img = _ele.find(<span class=\"string\">\"img\"</span>),</span><br><span class=\"line\">        _this, _width, _height, _ratio, _w, _h, _r, _wider;</span><br><span class=\"line\">      <span class=\"comment\">//修改图片外壳宽高</span></span><br><span class=\"line\">      _ele.css(&#123;</span><br><span class=\"line\">        <span class=\"string\">\"width\"</span>: _options.width,</span><br><span class=\"line\">        <span class=\"string\">\"height\"</span>: _options.height,</span><br><span class=\"line\">        <span class=\"string\">\"overflow\"</span>: <span class=\"string\">\"hidden\"</span>,</span><br><span class=\"line\">        <span class=\"string\">\"background\"</span>: <span class=\"string\">\"#000\"</span>,</span><br><span class=\"line\">        <span class=\"string\">\"position\"</span>: <span class=\"string\">\"relative\"</span></span><br><span class=\"line\">      &#125;);</span><br><span class=\"line\">      <span class=\"comment\">//容器比例</span></span><br><span class=\"line\">      _width = _ele.width();</span><br><span class=\"line\">      _height = _ele.height();</span><br><span class=\"line\">      _ratio = _width / _height;</span><br><span class=\"line\">      <span class=\"comment\">//每张所选图片进行处理</span></span><br><span class=\"line\">      _img.each(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        _this = $(<span class=\"keyword\">this</span>);</span><br><span class=\"line\">        <span class=\"comment\">//此处确保图片加载完毕</span></span><br><span class=\"line\">        _this.load(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">          _w = _this.width();</span><br><span class=\"line\">          _h = _this.height();</span><br><span class=\"line\">          _r = _w / _h;</span><br><span class=\"line\">          _wider = _r &gt; _ratio ? <span class=\"literal\">true</span> : <span class=\"literal\">false</span>;</span><br><span class=\"line\">          <span class=\"comment\">//容器宽高比大于图片时，图片高度100%，宽度按比例缩放按比例缩放</span></span><br><span class=\"line\">          <span class=\"keyword\">if</span> (_wider) &#123;</span><br><span class=\"line\">            _this.css(&#123;</span><br><span class=\"line\">              <span class=\"string\">\"width\"</span>: <span class=\"string\">\"auto\"</span>,</span><br><span class=\"line\">              <span class=\"string\">\"height\"</span>: <span class=\"string\">\"100%\"</span></span><br><span class=\"line\">            &#125;);</span><br><span class=\"line\">            <span class=\"keyword\">var</span> _left = (_width - _this.width()) / <span class=\"number\">2</span>;</span><br><span class=\"line\">            _this.css(&#123;</span><br><span class=\"line\">              <span class=\"string\">\"position\"</span>: <span class=\"string\">\"absolute\"</span>,</span><br><span class=\"line\">              <span class=\"string\">\"top\"</span>: <span class=\"number\">0</span>,</span><br><span class=\"line\">              <span class=\"string\">\"left\"</span>: _left + <span class=\"string\">\"px\"</span></span><br><span class=\"line\">            &#125;);</span><br><span class=\"line\">          <span class=\"comment\">//容器宽高比小于图片时，图片宽度100%，高度按比例缩放按比例缩放</span></span><br><span class=\"line\">          &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            _this.css(&#123;</span><br><span class=\"line\">              <span class=\"string\">\"width\"</span>: <span class=\"string\">\"100%\"</span>,</span><br><span class=\"line\">              <span class=\"string\">\"height\"</span>: <span class=\"string\">\"auto\"</span></span><br><span class=\"line\">            &#125;);</span><br><span class=\"line\">            <span class=\"keyword\">var</span> _top = (_height - _this.height()) / <span class=\"number\">2</span>;</span><br><span class=\"line\">            _this.css(&#123;</span><br><span class=\"line\">              <span class=\"string\">\"position\"</span>: <span class=\"string\">\"absolute\"</span>,</span><br><span class=\"line\">              <span class=\"string\">\"top\"</span>: _top + <span class=\"string\">\"px\"</span>,</span><br><span class=\"line\">              <span class=\"string\">\"left\"</span>: <span class=\"number\">0</span></span><br><span class=\"line\">            &#125;);</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">      &#125;);</span><br><span class=\"line\">      <span class=\"comment\">//链式回调</span></span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)(jQuery, <span class=\"built_in\">window</span>, <span class=\"built_in\">document</span>);</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"结束语\"><a href=\"#结束语\" class=\"headerlink\" title=\"结束语\"></a>结束语</h2><hr>\n<p>插件封装也是个有趣的事情哦，当然有兴趣也可以将逻辑封装成原生js插件哒。</p>\n","excerpt":"<p>需要将不同尺寸的图片居中放置时，可使用该jQuery插件。本文介绍实现方法。<br>","more":"</p>\n<p>代码放在github上，有兴趣的小伙伴可以下载看<br><a href=\"https://github.com/godbasin/godbasin.github.io/tree/blog-codes/picture-align\">picture-align</a></p>\n<p>最终效果图如下<a href=\"http://o92lwol8p.bkt.clouddn.com/index.html\">点击查看页面</a><br><img src=\"http://o905ne85q.bkt.clouddn.com/picture-align.png\" alt=\"image\"></p>\n<h2 id=\"插件介绍\"><a href=\"#插件介绍\" class=\"headerlink\" title=\"插件介绍\"></a>插件介绍</h2><hr>\n<h3 id=\"使用方法\"><a href=\"#使用方法\" class=\"headerlink\" title=\"使用方法\"></a>使用方法</h3><ul>\n<li><p>html</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!--img元素外层裹一层div--&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"fill\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">src</span>=<span class=\"string\">\"img/2.png\"</span> /&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>js</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//使用jQuery获取需要的外层容器</span></span><br><span class=\"line\">$(<span class=\"string\">\".fill\"</span>).bsPictureAlign(&#123;</span><br><span class=\"line\">  <span class=\"string\">\"img_dom\"</span>: <span class=\"string\">\".img\"</span>, <span class=\"comment\">//img的class/id/其他属性，为0则选中该容器内所有img（tagName === \"img\"）图片</span></span><br><span class=\"line\">  <span class=\"string\">\"style\"</span>: <span class=\"string\">\"fill\"</span>, <span class=\"comment\">//两种style：full为最短边对齐，过长剪裁；fill为最长边对齐，填充背景</span></span><br><span class=\"line\">  <span class=\"string\">\"width\"</span>: <span class=\"string\">\"100%\"</span>, <span class=\"comment\">//容器宽度，默认为100%</span></span><br><span class=\"line\">  <span class=\"string\">\"height\"</span>: <span class=\"string\">\"300px\"</span>, <span class=\"comment\">//容器高度，默认为300px</span></span><br><span class=\"line\">  <span class=\"string\">\"background\"</span>: <span class=\"string\">\"#000\"</span> <span class=\"comment\">//背景填充颜色，默认为#000黑色</span></span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3 id=\"插件封装方法\"><a href=\"#插件封装方法\" class=\"headerlink\" title=\"插件封装方法\"></a>插件封装方法</h3><ul>\n<li>使用jQuery拓展属性$.fn.xxx来进行封装</li>\n<li>这里有超详细教程<a href=\"http://www.cnblogs.com/Wayou/p/jquery_plugin_tutorial.html\">《jQuery插件开发精品教程，让你的jQuery提升一个台阶》</a></li>\n</ul>\n<h2 id=\"图片居中原理\"><a href=\"#图片居中原理\" class=\"headerlink\" title=\"图片居中原理\"></a>图片居中原理</h2><hr>\n<ul>\n<li>使用img.load()确保图片加载完成，此时可精确图片比例</li>\n<li>获取图片宽高比例，与容器比例进行比较</li>\n</ul>\n<h3 id=\"最短边对齐，过长隐藏：full方法\"><a href=\"#最短边对齐，过长隐藏：full方法\" class=\"headerlink\" title=\"最短边对齐，过长隐藏：full方法\"></a>最短边对齐，过长隐藏：full方法</h3><ul>\n<li>容器宽高比大于图片时，图片高度100%，宽度按比例缩放按比例缩放</li>\n<li>容器宽高比小于图片时，图片宽度100%，高度按比例缩放按比例缩放</li>\n<li>使用绝对定位将容器内图片居中</li>\n<li>设置容器overflow: hidden;隐藏图片过长部分</li>\n</ul>\n<h3 id=\"最长边对齐，填充背景：fill方法\"><a href=\"#最长边对齐，填充背景：fill方法\" class=\"headerlink\" title=\"最长边对齐，填充背景：fill方法\"></a>最长边对齐，填充背景：fill方法</h3><ul>\n<li>容器宽高比大于图片时，图片宽度100%，高度按比例缩放</li>\n<li>容器宽高比小于图片时，图片高度100%，宽度按比例缩放</li>\n<li>使用绝对定位将容器内图片居中</li>\n<li>设置容器background，填充背景</li>\n</ul>\n<h2 id=\"待完善的地方\"><a href=\"#待完善的地方\" class=\"headerlink\" title=\"待完善的地方\"></a>待完善的地方</h2><hr>\n<ul>\n<li>需要在图片加载完之后回调，可自行增加回调函数</li>\n<li>去到哪里都别忘了优化代码哦</li>\n</ul>\n<h2 id=\"插件代码\"><a href=\"#插件代码\" class=\"headerlink\" title=\"插件代码\"></a>插件代码</h2><hr>\n<p>请别叫我下划线狂魔^_^<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">;</span><br><span class=\"line\">(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">$, window, document, undefined</span>) </span>&#123;</span><br><span class=\"line\">  $.fn.bsPictureAlign = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">options</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> num = <span class=\"keyword\">this</span>.length,</span><br><span class=\"line\">      loadnum = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"comment\">//若为多个容器，分别初始化每个容器</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (i = <span class=\"number\">0</span>; i &lt; <span class=\"keyword\">this</span>.length; i++) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">var</span> _this = <span class=\"keyword\">this</span>[i];</span><br><span class=\"line\">      <span class=\"comment\">//创建bsPictureAlign实体</span></span><br><span class=\"line\">      <span class=\"keyword\">var</span> bsPictureAlign = <span class=\"keyword\">new</span> BsPictureAlign(_this, options);</span><br><span class=\"line\">      <span class=\"comment\">//调用其方法</span></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (options.style == <span class=\"string\">\"full\"</span>) bsPictureAlign.full();</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (options.style == <span class=\"string\">\"fill\"</span>) bsPictureAlign.fill(&#123;</span><br><span class=\"line\">        <span class=\"comment\">//这里增加了回调函数，确保所有图片处理完毕后进行回调</span></span><br><span class=\"line\">        callback: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">          loadnum++;</span><br><span class=\"line\">          <span class=\"keyword\">if</span> (num == loadnum &amp;&amp; options.loadover) &#123;</span><br><span class=\"line\">            options.loadover();</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">  <span class=\"comment\">//定义原型</span></span><br><span class=\"line\">  <span class=\"keyword\">var</span> BsPictureAlign = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">ele, opt</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.$ele = ele;</span><br><span class=\"line\">    <span class=\"comment\">//若无定义宽高背景，使用默认值</span></span><br><span class=\"line\">      <span class=\"keyword\">this</span>.defaults = &#123;</span><br><span class=\"line\">        <span class=\"string\">\"width\"</span>: <span class=\"string\">\"100%\"</span>,</span><br><span class=\"line\">        <span class=\"string\">\"height\"</span>: <span class=\"string\">\"300px\"</span>,</span><br><span class=\"line\">        <span class=\"string\">\"background\"</span>: <span class=\"string\">\"#000\"</span></span><br><span class=\"line\">      &#125;;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.options = $.extend(&#123;&#125;, <span class=\"keyword\">this</span>.defaults, opt);</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">  BsPictureAlign.prototype = &#123;</span><br><span class=\"line\">    <span class=\"comment\">//定义fill方法</span></span><br><span class=\"line\">    fill: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">opc</span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">var</span> that = <span class=\"keyword\">this</span>,</span><br><span class=\"line\">        _options = that.options,</span><br><span class=\"line\">        _ele = $(<span class=\"keyword\">this</span>.$ele),</span><br><span class=\"line\">        _dom = _options.img_dom,</span><br><span class=\"line\">        _img = _dom ? _ele.find(_dom) : _ele.find(<span class=\"string\">\"img\"</span>),</span><br><span class=\"line\">        _this, _width, _height, _ratio, _w, _h, _r, _wider;</span><br><span class=\"line\">      <span class=\"comment\">//修改图片容器宽高</span></span><br><span class=\"line\">      _ele.css(&#123;</span><br><span class=\"line\">        <span class=\"string\">\"width\"</span>: _options.width,</span><br><span class=\"line\">        <span class=\"string\">\"height\"</span>: _options.height,</span><br><span class=\"line\">        <span class=\"string\">\"overflow\"</span>: <span class=\"string\">\"hidden\"</span>,</span><br><span class=\"line\">        <span class=\"string\">\"background\"</span>: _options.background,</span><br><span class=\"line\">        <span class=\"string\">\"position\"</span>: <span class=\"string\">\"relative\"</span></span><br><span class=\"line\">      &#125;);</span><br><span class=\"line\">      <span class=\"comment\">//容器比例</span></span><br><span class=\"line\">      _width = _ele.width();</span><br><span class=\"line\">      _height = _ele.height();</span><br><span class=\"line\">      _ratio = _width / _height;</span><br><span class=\"line\">      <span class=\"comment\">//每张所选图片进行处理</span></span><br><span class=\"line\">      _img.each(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        _this = $(<span class=\"keyword\">this</span>);</span><br><span class=\"line\">        <span class=\"comment\">//此处可选，用来保证图片加载完之前不可见</span></span><br><span class=\"line\">        _this.css(&#123;</span><br><span class=\"line\">          <span class=\"string\">'opacity'</span>: <span class=\"number\">0</span>,</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">        <span class=\"comment\">//此处确保图片加载完毕</span></span><br><span class=\"line\">        _this.load(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">          _w = _this.width();</span><br><span class=\"line\">          _h = _this.height();</span><br><span class=\"line\">          _r = _w / _h;</span><br><span class=\"line\">          _wider = _r &gt; _ratio ? <span class=\"literal\">true</span> : <span class=\"literal\">false</span>;</span><br><span class=\"line\">          <span class=\"comment\">//容器宽高比小于图片时，图片高度100%，宽度按比例缩放</span></span><br><span class=\"line\">          <span class=\"keyword\">if</span> (_wider) &#123;</span><br><span class=\"line\">            _this.css(&#123;</span><br><span class=\"line\">              <span class=\"string\">\"width\"</span>: <span class=\"string\">\"100%\"</span>,</span><br><span class=\"line\">              <span class=\"string\">\"height\"</span>: <span class=\"string\">\"auto\"</span></span><br><span class=\"line\">            &#125;);</span><br><span class=\"line\">            <span class=\"keyword\">var</span> _top = (_height - _this.height()) / <span class=\"number\">2</span>;</span><br><span class=\"line\">            _this.css(&#123;</span><br><span class=\"line\">              <span class=\"string\">\"position\"</span>: <span class=\"string\">\"absolute\"</span>,</span><br><span class=\"line\">              <span class=\"string\">\"top\"</span>: _top + <span class=\"string\">\"px\"</span>,</span><br><span class=\"line\">              <span class=\"string\">\"left\"</span>: <span class=\"number\">0</span></span><br><span class=\"line\">            &#125;);</span><br><span class=\"line\">          <span class=\"comment\">//容器宽高比大于图片时，图片宽度100%，高度按比例缩放</span></span><br><span class=\"line\">          &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            _this.css(&#123;</span><br><span class=\"line\">              <span class=\"string\">\"width\"</span>: <span class=\"string\">\"auto\"</span>,</span><br><span class=\"line\">              <span class=\"string\">\"height\"</span>: <span class=\"string\">\"100%\"</span></span><br><span class=\"line\">            &#125;);</span><br><span class=\"line\">            <span class=\"keyword\">var</span> _left = (_width - _this.width()) / <span class=\"number\">2</span>;</span><br><span class=\"line\">            _this.css(&#123;</span><br><span class=\"line\">              <span class=\"string\">\"position\"</span>: <span class=\"string\">\"absolute\"</span>,</span><br><span class=\"line\">              <span class=\"string\">\"top\"</span>: <span class=\"number\">0</span>,</span><br><span class=\"line\">              <span class=\"string\">\"left\"</span>: _left + <span class=\"string\">\"px\"</span></span><br><span class=\"line\">            &#125;);</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">          _this.css(&#123;</span><br><span class=\"line\">            <span class=\"string\">'opacity'</span>: <span class=\"number\">1</span>,</span><br><span class=\"line\">          &#125;);</span><br><span class=\"line\">          <span class=\"keyword\">if</span> (opc.callback) opc.callback();</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">        <span class=\"comment\">//此处图片加载失败处理</span></span><br><span class=\"line\">        _this.error(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">          <span class=\"keyword\">if</span> (opc.callback) opc.callback();</span><br><span class=\"line\">          _this.css(&#123;</span><br><span class=\"line\">            <span class=\"string\">'opacity'</span>: <span class=\"number\">1</span>,</span><br><span class=\"line\">          &#125;);</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">      &#125;);</span><br><span class=\"line\">      <span class=\"comment\">//链式回调</span></span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"comment\">//定义full方法</span></span><br><span class=\"line\">    full: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">var</span> that = <span class=\"keyword\">this</span>,</span><br><span class=\"line\">        _options = that.options,</span><br><span class=\"line\">        _ele = $(<span class=\"keyword\">this</span>.$ele),</span><br><span class=\"line\">        _img = _ele.find(<span class=\"string\">\"img\"</span>),</span><br><span class=\"line\">        _this, _width, _height, _ratio, _w, _h, _r, _wider;</span><br><span class=\"line\">      <span class=\"comment\">//修改图片外壳宽高</span></span><br><span class=\"line\">      _ele.css(&#123;</span><br><span class=\"line\">        <span class=\"string\">\"width\"</span>: _options.width,</span><br><span class=\"line\">        <span class=\"string\">\"height\"</span>: _options.height,</span><br><span class=\"line\">        <span class=\"string\">\"overflow\"</span>: <span class=\"string\">\"hidden\"</span>,</span><br><span class=\"line\">        <span class=\"string\">\"background\"</span>: <span class=\"string\">\"#000\"</span>,</span><br><span class=\"line\">        <span class=\"string\">\"position\"</span>: <span class=\"string\">\"relative\"</span></span><br><span class=\"line\">      &#125;);</span><br><span class=\"line\">      <span class=\"comment\">//容器比例</span></span><br><span class=\"line\">      _width = _ele.width();</span><br><span class=\"line\">      _height = _ele.height();</span><br><span class=\"line\">      _ratio = _width / _height;</span><br><span class=\"line\">      <span class=\"comment\">//每张所选图片进行处理</span></span><br><span class=\"line\">      _img.each(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        _this = $(<span class=\"keyword\">this</span>);</span><br><span class=\"line\">        <span class=\"comment\">//此处确保图片加载完毕</span></span><br><span class=\"line\">        _this.load(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">          _w = _this.width();</span><br><span class=\"line\">          _h = _this.height();</span><br><span class=\"line\">          _r = _w / _h;</span><br><span class=\"line\">          _wider = _r &gt; _ratio ? <span class=\"literal\">true</span> : <span class=\"literal\">false</span>;</span><br><span class=\"line\">          <span class=\"comment\">//容器宽高比大于图片时，图片高度100%，宽度按比例缩放按比例缩放</span></span><br><span class=\"line\">          <span class=\"keyword\">if</span> (_wider) &#123;</span><br><span class=\"line\">            _this.css(&#123;</span><br><span class=\"line\">              <span class=\"string\">\"width\"</span>: <span class=\"string\">\"auto\"</span>,</span><br><span class=\"line\">              <span class=\"string\">\"height\"</span>: <span class=\"string\">\"100%\"</span></span><br><span class=\"line\">            &#125;);</span><br><span class=\"line\">            <span class=\"keyword\">var</span> _left = (_width - _this.width()) / <span class=\"number\">2</span>;</span><br><span class=\"line\">            _this.css(&#123;</span><br><span class=\"line\">              <span class=\"string\">\"position\"</span>: <span class=\"string\">\"absolute\"</span>,</span><br><span class=\"line\">              <span class=\"string\">\"top\"</span>: <span class=\"number\">0</span>,</span><br><span class=\"line\">              <span class=\"string\">\"left\"</span>: _left + <span class=\"string\">\"px\"</span></span><br><span class=\"line\">            &#125;);</span><br><span class=\"line\">          <span class=\"comment\">//容器宽高比小于图片时，图片宽度100%，高度按比例缩放按比例缩放</span></span><br><span class=\"line\">          &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            _this.css(&#123;</span><br><span class=\"line\">              <span class=\"string\">\"width\"</span>: <span class=\"string\">\"100%\"</span>,</span><br><span class=\"line\">              <span class=\"string\">\"height\"</span>: <span class=\"string\">\"auto\"</span></span><br><span class=\"line\">            &#125;);</span><br><span class=\"line\">            <span class=\"keyword\">var</span> _top = (_height - _this.height()) / <span class=\"number\">2</span>;</span><br><span class=\"line\">            _this.css(&#123;</span><br><span class=\"line\">              <span class=\"string\">\"position\"</span>: <span class=\"string\">\"absolute\"</span>,</span><br><span class=\"line\">              <span class=\"string\">\"top\"</span>: _top + <span class=\"string\">\"px\"</span>,</span><br><span class=\"line\">              <span class=\"string\">\"left\"</span>: <span class=\"number\">0</span></span><br><span class=\"line\">            &#125;);</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">      &#125;);</span><br><span class=\"line\">      <span class=\"comment\">//链式回调</span></span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)(jQuery, <span class=\"built_in\">window</span>, <span class=\"built_in\">document</span>);</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"结束语\"><a href=\"#结束语\" class=\"headerlink\" title=\"结束语\"></a>结束语</h2><hr>\n<p>插件封装也是个有趣的事情哦，当然有兴趣也可以将逻辑封装成原生js插件哒。</p>"},{"title":"Angular使用笔记13-对指令Directive进行单元测试","date":"2016-08-05T14:30:27.000Z","_content":"最近的一个项目使用AngularJS(v1.2.6)作为前端的框架，《Angular使用笔记》系列用于记录过程中的一些使用和解决方法。\n本文记录对指令Directive进行单元测试的过程。\n<!--more-->\n\n## Directive的单元测试\n-----\n### 注入模块和依赖\n首先我们需要注入模块和依赖，在这里分别是angularTestApp和$compile/$rootScope：\n``` js\n//注入应用\nbeforeEach(module('angularTestApp'));\nvar element, scope;\n//注入依赖（指令）\nbeforeEach(inject(function ($compile, $rootScope) {\n\tscope = $rootScope.$new();\n\t// 使用compile编译指令\n\telement =  $compile(\"<header app-header></header>\")(scope);    \n\t// 作用域运行\n\tscope.$digest();\n}));\n```\n\n### 测试指令生成的模板\n对指令生成的模板，可对其包含元素进行测试，例如多少个按钮、有什么文字、等等。\n``` js\n// 头部指令中，有一个样式为navbar-brand的元素，其内容为Godbasin\nit('should contains 1 Godbasin brand', function () {\n\t// Check that the compiled element contains the templated content\n\texpect(element[0].querySelectorAll('.navbar-brand').length).toEqual(1);\n\texpect(element.html()).toContain(\"Godbasin\");\n});\n// 头部指令中，有一个样式为navbar-header和一个样式为navbar-collapse的元素\nit('should have 1 navbar-header and 1 navbar-collapse', function () {    \n\texpect(element[0].querySelectorAll('.navbar-header').length).toEqual(1);\n\texpect(element[0].querySelectorAll('.navbar-collapse').length).toEqual(1);\n});\n```\n\n### 使用jasmine-jquery测试元素\n- 安装jasmine-jquery\n使用[jasmine-jquery插件](https://github.com/velesin/jasmine-jquery)将有效帮助我们测试指令的元素。这里我们使用bower安装：\n``` cmd\nbower install jasmine-jquery --save\n```\n注意：安装jasmine-jquery对jquery的版本有一定要求（jasmine-jquery依赖jquery），可能导致安装失败，提示如下：\n![image](http://o905ne85q.bkt.clouddn.com/2B17.tmp.png)\n这里我们将bower文件中的jquery版本修改一下：\n``` cmd\n\"jquery\": \">=2.0.0\",\n```\n然后重新执行`bower install`，此时便可以成功安装jasmine-jquery了。\n\n- 配置karma.conf.js\nKarma的配置很简单，只需要将相关的文件添加进加载的文件中便可以：\n``` cmd\nfiles: [\n\t...\n\t'app/bower_components/jquery/dist/jquery.min.js',\n\t'app/bower_components/jasmine-jquery/lib/jasmine-jquery.js',\n\t...\n],\n```\n\n- 使用jasmine-jquery\n这样，我们的元素相关操作变得简单了。\n``` javascript\nit('should contains 1 Godbasin brand', function () {\n\texpect($(element).find('.navbar-brand').length).toEqual(1);\n\texpect($(element).find('.navbar-brand').text()).toContain(\"Godbasin\");\n});\nit('should have 1 navbar-header and 1 navbar-collapse', function () {    \n\texpect($(element).find('.navbar-header').length).toEqual(1);\n\texpect($(element).find('.navbar-collapse').length).toEqual(1);\n});\n```\n\n### 测试作用域scope\n这里我们简单测试Header指令的菜单。\n``` javascript\nit('should have 2 menus and 1 usermenu', function () {\n\texpect(scope.menus.length).toEqual(2);\n\texpect(scope.usermenus.length).toEqual(1);\n});\n```\n\n### 测试事件触发\n这里我们测试按钮的点击。\n``` javascript\nit('should show asidemenus when click .dropdown-toggle', function () {\n\tvar toggle = $(element).find('.dropdown-toggle');\n\tvar spyEvent = spyOnEvent(toggle, 'click');\n\t$(element).find('.dropdown-toggle').trigger('click');\n\texpect(spyEvent).toHaveBeenTriggered();\n});\n```\n\n## 使用ng-html2js测试指令\n-----\n当我们的指令中模板使用templateUrl时，我们进行测试会得到以下结果：\n![image](http://o905ne85q.bkt.clouddn.com/430D.tmp.png)\n这时候我们可以使用ng-html2js进行处理。\n\n### 安装配置\n这里使用插件[karma-ng-html2js-preprocessor](https://github.com/karma-runner/karma-ng-html2js-preprocessor)。\n- 安装依赖\n``` cmd\nnpm install karma-ng-html2js-preprocessor --save-dev\n```\n- karma.conf.js配置\n我们需要在karma配置文件中添加相关的配置：\n\n``` javascript\n// 添加加载的文件\nfiles: [\n\t...\n\t'app/views/**/*.html',\n\t'app/views/*.html'\n],\n// 添加预处理\npreprocessors: {\n\t...\n\t'app/views/*.html': 'ng-html2js',\n\t'app/views/**/*.html': 'ng-html2js'\n},\n// 预处理相关配置\nngHtml2JsPreprocessor: { \n\tstripPrefix: 'app/', \n\tmoduleName: 'views' // 生成的模块名字\n},\n// 添加插件\nplugins: [\n\t...\n\t'karma-ng-html2js-preprocessor'\n],\n```\n\n### 注入模块\n测试文件中，我们可以在注入模块的同时注入指令模板，这里使用名字注入：\n``` javascript\nbeforeEach(module('views'));\n```\n现在运行我们的测试，可以看到测试结果如下：\n![image](http://o905ne85q.bkt.clouddn.com/7334.tmp.png)\n完成！\n\n## 结束语\n-----\n刚开始接触Karma的配置也很是复杂呢，用多了之后就好多啦，自动化和工程化也是个不简单的事情呢。\n[此处查看项目代码（包含app以及test部分）](https://github.com/godbasin/godbasin.github.io/tree/blog-codes/angular-notes/13-unit-test-directive)\n\n","source":"_posts/angular-note-13-unit-test-directive.md","raw":"---\ntitle: Angular使用笔记13-对指令Directive进行单元测试\ndate: 2016-08-05 22:30:27\ncategories: angular混搭\ntags: 笔记\n---\n最近的一个项目使用AngularJS(v1.2.6)作为前端的框架，《Angular使用笔记》系列用于记录过程中的一些使用和解决方法。\n本文记录对指令Directive进行单元测试的过程。\n<!--more-->\n\n## Directive的单元测试\n-----\n### 注入模块和依赖\n首先我们需要注入模块和依赖，在这里分别是angularTestApp和$compile/$rootScope：\n``` js\n//注入应用\nbeforeEach(module('angularTestApp'));\nvar element, scope;\n//注入依赖（指令）\nbeforeEach(inject(function ($compile, $rootScope) {\n\tscope = $rootScope.$new();\n\t// 使用compile编译指令\n\telement =  $compile(\"<header app-header></header>\")(scope);    \n\t// 作用域运行\n\tscope.$digest();\n}));\n```\n\n### 测试指令生成的模板\n对指令生成的模板，可对其包含元素进行测试，例如多少个按钮、有什么文字、等等。\n``` js\n// 头部指令中，有一个样式为navbar-brand的元素，其内容为Godbasin\nit('should contains 1 Godbasin brand', function () {\n\t// Check that the compiled element contains the templated content\n\texpect(element[0].querySelectorAll('.navbar-brand').length).toEqual(1);\n\texpect(element.html()).toContain(\"Godbasin\");\n});\n// 头部指令中，有一个样式为navbar-header和一个样式为navbar-collapse的元素\nit('should have 1 navbar-header and 1 navbar-collapse', function () {    \n\texpect(element[0].querySelectorAll('.navbar-header').length).toEqual(1);\n\texpect(element[0].querySelectorAll('.navbar-collapse').length).toEqual(1);\n});\n```\n\n### 使用jasmine-jquery测试元素\n- 安装jasmine-jquery\n使用[jasmine-jquery插件](https://github.com/velesin/jasmine-jquery)将有效帮助我们测试指令的元素。这里我们使用bower安装：\n``` cmd\nbower install jasmine-jquery --save\n```\n注意：安装jasmine-jquery对jquery的版本有一定要求（jasmine-jquery依赖jquery），可能导致安装失败，提示如下：\n![image](http://o905ne85q.bkt.clouddn.com/2B17.tmp.png)\n这里我们将bower文件中的jquery版本修改一下：\n``` cmd\n\"jquery\": \">=2.0.0\",\n```\n然后重新执行`bower install`，此时便可以成功安装jasmine-jquery了。\n\n- 配置karma.conf.js\nKarma的配置很简单，只需要将相关的文件添加进加载的文件中便可以：\n``` cmd\nfiles: [\n\t...\n\t'app/bower_components/jquery/dist/jquery.min.js',\n\t'app/bower_components/jasmine-jquery/lib/jasmine-jquery.js',\n\t...\n],\n```\n\n- 使用jasmine-jquery\n这样，我们的元素相关操作变得简单了。\n``` javascript\nit('should contains 1 Godbasin brand', function () {\n\texpect($(element).find('.navbar-brand').length).toEqual(1);\n\texpect($(element).find('.navbar-brand').text()).toContain(\"Godbasin\");\n});\nit('should have 1 navbar-header and 1 navbar-collapse', function () {    \n\texpect($(element).find('.navbar-header').length).toEqual(1);\n\texpect($(element).find('.navbar-collapse').length).toEqual(1);\n});\n```\n\n### 测试作用域scope\n这里我们简单测试Header指令的菜单。\n``` javascript\nit('should have 2 menus and 1 usermenu', function () {\n\texpect(scope.menus.length).toEqual(2);\n\texpect(scope.usermenus.length).toEqual(1);\n});\n```\n\n### 测试事件触发\n这里我们测试按钮的点击。\n``` javascript\nit('should show asidemenus when click .dropdown-toggle', function () {\n\tvar toggle = $(element).find('.dropdown-toggle');\n\tvar spyEvent = spyOnEvent(toggle, 'click');\n\t$(element).find('.dropdown-toggle').trigger('click');\n\texpect(spyEvent).toHaveBeenTriggered();\n});\n```\n\n## 使用ng-html2js测试指令\n-----\n当我们的指令中模板使用templateUrl时，我们进行测试会得到以下结果：\n![image](http://o905ne85q.bkt.clouddn.com/430D.tmp.png)\n这时候我们可以使用ng-html2js进行处理。\n\n### 安装配置\n这里使用插件[karma-ng-html2js-preprocessor](https://github.com/karma-runner/karma-ng-html2js-preprocessor)。\n- 安装依赖\n``` cmd\nnpm install karma-ng-html2js-preprocessor --save-dev\n```\n- karma.conf.js配置\n我们需要在karma配置文件中添加相关的配置：\n\n``` javascript\n// 添加加载的文件\nfiles: [\n\t...\n\t'app/views/**/*.html',\n\t'app/views/*.html'\n],\n// 添加预处理\npreprocessors: {\n\t...\n\t'app/views/*.html': 'ng-html2js',\n\t'app/views/**/*.html': 'ng-html2js'\n},\n// 预处理相关配置\nngHtml2JsPreprocessor: { \n\tstripPrefix: 'app/', \n\tmoduleName: 'views' // 生成的模块名字\n},\n// 添加插件\nplugins: [\n\t...\n\t'karma-ng-html2js-preprocessor'\n],\n```\n\n### 注入模块\n测试文件中，我们可以在注入模块的同时注入指令模板，这里使用名字注入：\n``` javascript\nbeforeEach(module('views'));\n```\n现在运行我们的测试，可以看到测试结果如下：\n![image](http://o905ne85q.bkt.clouddn.com/7334.tmp.png)\n完成！\n\n## 结束语\n-----\n刚开始接触Karma的配置也很是复杂呢，用多了之后就好多啦，自动化和工程化也是个不简单的事情呢。\n[此处查看项目代码（包含app以及test部分）](https://github.com/godbasin/godbasin.github.io/tree/blog-codes/angular-notes/13-unit-test-directive)\n\n","slug":"angular-note-13-unit-test-directive","published":1,"updated":"2016-08-05T14:37:55.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cirrwvo5m002338l58pkh8dvu","content":"<p>最近的一个项目使用AngularJS(v1.2.6)作为前端的框架，《Angular使用笔记》系列用于记录过程中的一些使用和解决方法。<br>本文记录对指令Directive进行单元测试的过程。<br><a id=\"more\"></a></p>\n<h2 id=\"Directive的单元测试\"><a href=\"#Directive的单元测试\" class=\"headerlink\" title=\"Directive的单元测试\"></a>Directive的单元测试</h2><hr>\n<h3 id=\"注入模块和依赖\"><a href=\"#注入模块和依赖\" class=\"headerlink\" title=\"注入模块和依赖\"></a>注入模块和依赖</h3><p>首先我们需要注入模块和依赖，在这里分别是angularTestApp和$compile/$rootScope：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//注入应用</span></span><br><span class=\"line\">beforeEach(<span class=\"built_in\">module</span>(<span class=\"string\">'angularTestApp'</span>));</span><br><span class=\"line\"><span class=\"keyword\">var</span> element, scope;</span><br><span class=\"line\"><span class=\"comment\">//注入依赖（指令）</span></span><br><span class=\"line\">beforeEach(inject(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">$compile, $rootScope</span>) </span>&#123;</span><br><span class=\"line\">  scope = $rootScope.$<span class=\"keyword\">new</span>();</span><br><span class=\"line\">  <span class=\"comment\">// 使用compile编译指令</span></span><br><span class=\"line\">  element =  $compile(<span class=\"string\">\"&lt;header app-header&gt;&lt;/header&gt;\"</span>)(scope);    </span><br><span class=\"line\">  <span class=\"comment\">// 作用域运行</span></span><br><span class=\"line\">  scope.$digest();</span><br><span class=\"line\">&#125;));</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"测试指令生成的模板\"><a href=\"#测试指令生成的模板\" class=\"headerlink\" title=\"测试指令生成的模板\"></a>测试指令生成的模板</h3><p>对指令生成的模板，可对其包含元素进行测试，例如多少个按钮、有什么文字、等等。<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 头部指令中，有一个样式为navbar-brand的元素，其内容为Godbasin</span></span><br><span class=\"line\">it(<span class=\"string\">'should contains 1 Godbasin brand'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// Check that the compiled element contains the templated content</span></span><br><span class=\"line\">  expect(element[<span class=\"number\">0</span>].querySelectorAll(<span class=\"string\">'.navbar-brand'</span>).length).toEqual(<span class=\"number\">1</span>);</span><br><span class=\"line\">  expect(element.html()).toContain(<span class=\"string\">\"Godbasin\"</span>);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"comment\">// 头部指令中，有一个样式为navbar-header和一个样式为navbar-collapse的元素</span></span><br><span class=\"line\">it(<span class=\"string\">'should have 1 navbar-header and 1 navbar-collapse'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;    </span><br><span class=\"line\">  expect(element[<span class=\"number\">0</span>].querySelectorAll(<span class=\"string\">'.navbar-header'</span>).length).toEqual(<span class=\"number\">1</span>);</span><br><span class=\"line\">  expect(element[<span class=\"number\">0</span>].querySelectorAll(<span class=\"string\">'.navbar-collapse'</span>).length).toEqual(<span class=\"number\">1</span>);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"使用jasmine-jquery测试元素\"><a href=\"#使用jasmine-jquery测试元素\" class=\"headerlink\" title=\"使用jasmine-jquery测试元素\"></a>使用jasmine-jquery测试元素</h3><ul>\n<li>安装jasmine-jquery<br>使用<a href=\"https://github.com/velesin/jasmine-jquery\" target=\"_blank\" rel=\"external\">jasmine-jquery插件</a>将有效帮助我们测试指令的元素。这里我们使用bower安装：<figure class=\"highlight cmd\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">bower install jasmine-jquery --save</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>注意：安装jasmine-jquery对jquery的版本有一定要求（jasmine-jquery依赖jquery），可能导致安装失败，提示如下：<br><img src=\"http://o905ne85q.bkt.clouddn.com/2B17.tmp.png\" alt=\"image\"><br>这里我们将bower文件中的jquery版本修改一下：<br><figure class=\"highlight cmd\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">\"jquery\": \"&gt;=<span class=\"number\">2</span>.<span class=\"number\">0</span>.<span class=\"number\">0</span>\",</span><br></pre></td></tr></table></figure></p>\n<p>然后重新执行<code>bower install</code>，此时便可以成功安装jasmine-jquery了。</p>\n<ul>\n<li><p>配置karma.conf.js<br>Karma的配置很简单，只需要将相关的文件添加进加载的文件中便可以：</p>\n<figure class=\"highlight cmd\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\">files: [</span><br><span class=\"line\">  ...</span><br><span class=\"line\">  '<span class=\"title\">app</span>/<span class=\"title\">bower_components</span>/<span class=\"title\">jquery</span>/<span class=\"title\">dist</span>/<span class=\"title\">jquery.min.js</span>',</span><br><span class=\"line\">  '<span class=\"title\">app</span>/<span class=\"title\">bower_components</span>/<span class=\"title\">jasmine</span>-<span class=\"title\">jquery</span>/<span class=\"title\">lib</span>/<span class=\"title\">jasmine</span>-<span class=\"title\">jquery.js</span>',</span><br><span class=\"line\">  ...</span><br><span class=\"line\">],</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>使用jasmine-jquery<br>这样，我们的元素相关操作变得简单了。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">it(<span class=\"string\">'should contains 1 Godbasin brand'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  expect($(element).find(<span class=\"string\">'.navbar-brand'</span>).length).toEqual(<span class=\"number\">1</span>);</span><br><span class=\"line\">  expect($(element).find(<span class=\"string\">'.navbar-brand'</span>).text()).toContain(<span class=\"string\">\"Godbasin\"</span>);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">it(<span class=\"string\">'should have 1 navbar-header and 1 navbar-collapse'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;    </span><br><span class=\"line\">  expect($(element).find(<span class=\"string\">'.navbar-header'</span>).length).toEqual(<span class=\"number\">1</span>);</span><br><span class=\"line\">  expect($(element).find(<span class=\"string\">'.navbar-collapse'</span>).length).toEqual(<span class=\"number\">1</span>);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3 id=\"测试作用域scope\"><a href=\"#测试作用域scope\" class=\"headerlink\" title=\"测试作用域scope\"></a>测试作用域scope</h3><p>这里我们简单测试Header指令的菜单。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">it(<span class=\"string\">'should have 2 menus and 1 usermenu'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  expect(scope.menus.length).toEqual(<span class=\"number\">2</span>);</span><br><span class=\"line\">  expect(scope.usermenus.length).toEqual(<span class=\"number\">1</span>);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"测试事件触发\"><a href=\"#测试事件触发\" class=\"headerlink\" title=\"测试事件触发\"></a>测试事件触发</h3><p>这里我们测试按钮的点击。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">it(<span class=\"string\">'should show asidemenus when click .dropdown-toggle'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> toggle = $(element).find(<span class=\"string\">'.dropdown-toggle'</span>);</span><br><span class=\"line\">  <span class=\"keyword\">var</span> spyEvent = spyOnEvent(toggle, <span class=\"string\">'click'</span>);</span><br><span class=\"line\">  $(element).find(<span class=\"string\">'.dropdown-toggle'</span>).trigger(<span class=\"string\">'click'</span>);</span><br><span class=\"line\">  expect(spyEvent).toHaveBeenTriggered();</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"使用ng-html2js测试指令\"><a href=\"#使用ng-html2js测试指令\" class=\"headerlink\" title=\"使用ng-html2js测试指令\"></a>使用ng-html2js测试指令</h2><hr>\n<p>当我们的指令中模板使用templateUrl时，我们进行测试会得到以下结果：<br><img src=\"http://o905ne85q.bkt.clouddn.com/430D.tmp.png\" alt=\"image\"><br>这时候我们可以使用ng-html2js进行处理。</p>\n<h3 id=\"安装配置\"><a href=\"#安装配置\" class=\"headerlink\" title=\"安装配置\"></a>安装配置</h3><p>这里使用插件<a href=\"https://github.com/karma-runner/karma-ng-html2js-preprocessor\" target=\"_blank\" rel=\"external\">karma-ng-html2js-preprocessor</a>。</p>\n<ul>\n<li><p>安装依赖</p>\n<figure class=\"highlight cmd\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install karma-ng-html2js-preprocessor --save-dev</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>karma.conf.js配置<br>我们需要在karma配置文件中添加相关的配置：</p>\n</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 添加加载的文件</span></span><br><span class=\"line\">files: [</span><br><span class=\"line\">  ...</span><br><span class=\"line\">  <span class=\"string\">'app/views/**/*.html'</span>,</span><br><span class=\"line\">  <span class=\"string\">'app/views/*.html'</span></span><br><span class=\"line\">],</span><br><span class=\"line\"><span class=\"comment\">// 添加预处理</span></span><br><span class=\"line\">preprocessors: &#123;</span><br><span class=\"line\">  ...</span><br><span class=\"line\">  <span class=\"string\">'app/views/*.html'</span>: <span class=\"string\">'ng-html2js'</span>,</span><br><span class=\"line\">  <span class=\"string\">'app/views/**/*.html'</span>: <span class=\"string\">'ng-html2js'</span></span><br><span class=\"line\">&#125;,</span><br><span class=\"line\"><span class=\"comment\">// 预处理相关配置</span></span><br><span class=\"line\">ngHtml2JsPreprocessor: &#123; </span><br><span class=\"line\">  stripPrefix: <span class=\"string\">'app/'</span>, </span><br><span class=\"line\">  moduleName: <span class=\"string\">'views'</span> <span class=\"comment\">// 生成的模块名字</span></span><br><span class=\"line\">&#125;,</span><br><span class=\"line\"><span class=\"comment\">// 添加插件</span></span><br><span class=\"line\">plugins: [</span><br><span class=\"line\">  ...</span><br><span class=\"line\">  <span class=\"string\">'karma-ng-html2js-preprocessor'</span></span><br><span class=\"line\">],</span><br></pre></td></tr></table></figure>\n<h3 id=\"注入模块\"><a href=\"#注入模块\" class=\"headerlink\" title=\"注入模块\"></a>注入模块</h3><p>测试文件中，我们可以在注入模块的同时注入指令模板，这里使用名字注入：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">beforeEach(<span class=\"built_in\">module</span>(<span class=\"string\">'views'</span>));</span><br></pre></td></tr></table></figure></p>\n<p>现在运行我们的测试，可以看到测试结果如下：<br><img src=\"http://o905ne85q.bkt.clouddn.com/7334.tmp.png\" alt=\"image\"><br>完成！</p>\n<h2 id=\"结束语\"><a href=\"#结束语\" class=\"headerlink\" title=\"结束语\"></a>结束语</h2><hr>\n<p>刚开始接触Karma的配置也很是复杂呢，用多了之后就好多啦，自动化和工程化也是个不简单的事情呢。<br><a href=\"https://github.com/godbasin/godbasin.github.io/tree/blog-codes/angular-notes/13-unit-test-directive\" target=\"_blank\" rel=\"external\">此处查看项目代码（包含app以及test部分）</a></p>\n","excerpt":"<p>最近的一个项目使用AngularJS(v1.2.6)作为前端的框架，《Angular使用笔记》系列用于记录过程中的一些使用和解决方法。<br>本文记录对指令Directive进行单元测试的过程。<br>","more":"</p>\n<h2 id=\"Directive的单元测试\"><a href=\"#Directive的单元测试\" class=\"headerlink\" title=\"Directive的单元测试\"></a>Directive的单元测试</h2><hr>\n<h3 id=\"注入模块和依赖\"><a href=\"#注入模块和依赖\" class=\"headerlink\" title=\"注入模块和依赖\"></a>注入模块和依赖</h3><p>首先我们需要注入模块和依赖，在这里分别是angularTestApp和$compile/$rootScope：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//注入应用</span></span><br><span class=\"line\">beforeEach(<span class=\"built_in\">module</span>(<span class=\"string\">'angularTestApp'</span>));</span><br><span class=\"line\"><span class=\"keyword\">var</span> element, scope;</span><br><span class=\"line\"><span class=\"comment\">//注入依赖（指令）</span></span><br><span class=\"line\">beforeEach(inject(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">$compile, $rootScope</span>) </span>&#123;</span><br><span class=\"line\">  scope = $rootScope.$<span class=\"keyword\">new</span>();</span><br><span class=\"line\">  <span class=\"comment\">// 使用compile编译指令</span></span><br><span class=\"line\">  element =  $compile(<span class=\"string\">\"&lt;header app-header&gt;&lt;/header&gt;\"</span>)(scope);    </span><br><span class=\"line\">  <span class=\"comment\">// 作用域运行</span></span><br><span class=\"line\">  scope.$digest();</span><br><span class=\"line\">&#125;));</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"测试指令生成的模板\"><a href=\"#测试指令生成的模板\" class=\"headerlink\" title=\"测试指令生成的模板\"></a>测试指令生成的模板</h3><p>对指令生成的模板，可对其包含元素进行测试，例如多少个按钮、有什么文字、等等。<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 头部指令中，有一个样式为navbar-brand的元素，其内容为Godbasin</span></span><br><span class=\"line\">it(<span class=\"string\">'should contains 1 Godbasin brand'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// Check that the compiled element contains the templated content</span></span><br><span class=\"line\">  expect(element[<span class=\"number\">0</span>].querySelectorAll(<span class=\"string\">'.navbar-brand'</span>).length).toEqual(<span class=\"number\">1</span>);</span><br><span class=\"line\">  expect(element.html()).toContain(<span class=\"string\">\"Godbasin\"</span>);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"comment\">// 头部指令中，有一个样式为navbar-header和一个样式为navbar-collapse的元素</span></span><br><span class=\"line\">it(<span class=\"string\">'should have 1 navbar-header and 1 navbar-collapse'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;    </span><br><span class=\"line\">  expect(element[<span class=\"number\">0</span>].querySelectorAll(<span class=\"string\">'.navbar-header'</span>).length).toEqual(<span class=\"number\">1</span>);</span><br><span class=\"line\">  expect(element[<span class=\"number\">0</span>].querySelectorAll(<span class=\"string\">'.navbar-collapse'</span>).length).toEqual(<span class=\"number\">1</span>);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"使用jasmine-jquery测试元素\"><a href=\"#使用jasmine-jquery测试元素\" class=\"headerlink\" title=\"使用jasmine-jquery测试元素\"></a>使用jasmine-jquery测试元素</h3><ul>\n<li>安装jasmine-jquery<br>使用<a href=\"https://github.com/velesin/jasmine-jquery\">jasmine-jquery插件</a>将有效帮助我们测试指令的元素。这里我们使用bower安装：<figure class=\"highlight cmd\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">bower install jasmine-jquery --save</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>注意：安装jasmine-jquery对jquery的版本有一定要求（jasmine-jquery依赖jquery），可能导致安装失败，提示如下：<br><img src=\"http://o905ne85q.bkt.clouddn.com/2B17.tmp.png\" alt=\"image\"><br>这里我们将bower文件中的jquery版本修改一下：<br><figure class=\"highlight cmd\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">\"jquery\": \"&gt;=<span class=\"number\">2</span>.<span class=\"number\">0</span>.<span class=\"number\">0</span>\",</span><br></pre></td></tr></table></figure></p>\n<p>然后重新执行<code>bower install</code>，此时便可以成功安装jasmine-jquery了。</p>\n<ul>\n<li><p>配置karma.conf.js<br>Karma的配置很简单，只需要将相关的文件添加进加载的文件中便可以：</p>\n<figure class=\"highlight cmd\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\">files: [</span><br><span class=\"line\">  ...</span><br><span class=\"line\">  '<span class=\"title\">app</span>/<span class=\"title\">bower_components</span>/<span class=\"title\">jquery</span>/<span class=\"title\">dist</span>/<span class=\"title\">jquery.min.js</span>',</span><br><span class=\"line\">  '<span class=\"title\">app</span>/<span class=\"title\">bower_components</span>/<span class=\"title\">jasmine</span>-<span class=\"title\">jquery</span>/<span class=\"title\">lib</span>/<span class=\"title\">jasmine</span>-<span class=\"title\">jquery.js</span>',</span><br><span class=\"line\">  ...</span><br><span class=\"line\">],</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>使用jasmine-jquery<br>这样，我们的元素相关操作变得简单了。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">it(<span class=\"string\">'should contains 1 Godbasin brand'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  expect($(element).find(<span class=\"string\">'.navbar-brand'</span>).length).toEqual(<span class=\"number\">1</span>);</span><br><span class=\"line\">  expect($(element).find(<span class=\"string\">'.navbar-brand'</span>).text()).toContain(<span class=\"string\">\"Godbasin\"</span>);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">it(<span class=\"string\">'should have 1 navbar-header and 1 navbar-collapse'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;    </span><br><span class=\"line\">  expect($(element).find(<span class=\"string\">'.navbar-header'</span>).length).toEqual(<span class=\"number\">1</span>);</span><br><span class=\"line\">  expect($(element).find(<span class=\"string\">'.navbar-collapse'</span>).length).toEqual(<span class=\"number\">1</span>);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3 id=\"测试作用域scope\"><a href=\"#测试作用域scope\" class=\"headerlink\" title=\"测试作用域scope\"></a>测试作用域scope</h3><p>这里我们简单测试Header指令的菜单。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">it(<span class=\"string\">'should have 2 menus and 1 usermenu'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  expect(scope.menus.length).toEqual(<span class=\"number\">2</span>);</span><br><span class=\"line\">  expect(scope.usermenus.length).toEqual(<span class=\"number\">1</span>);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"测试事件触发\"><a href=\"#测试事件触发\" class=\"headerlink\" title=\"测试事件触发\"></a>测试事件触发</h3><p>这里我们测试按钮的点击。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">it(<span class=\"string\">'should show asidemenus when click .dropdown-toggle'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> toggle = $(element).find(<span class=\"string\">'.dropdown-toggle'</span>);</span><br><span class=\"line\">  <span class=\"keyword\">var</span> spyEvent = spyOnEvent(toggle, <span class=\"string\">'click'</span>);</span><br><span class=\"line\">  $(element).find(<span class=\"string\">'.dropdown-toggle'</span>).trigger(<span class=\"string\">'click'</span>);</span><br><span class=\"line\">  expect(spyEvent).toHaveBeenTriggered();</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"使用ng-html2js测试指令\"><a href=\"#使用ng-html2js测试指令\" class=\"headerlink\" title=\"使用ng-html2js测试指令\"></a>使用ng-html2js测试指令</h2><hr>\n<p>当我们的指令中模板使用templateUrl时，我们进行测试会得到以下结果：<br><img src=\"http://o905ne85q.bkt.clouddn.com/430D.tmp.png\" alt=\"image\"><br>这时候我们可以使用ng-html2js进行处理。</p>\n<h3 id=\"安装配置\"><a href=\"#安装配置\" class=\"headerlink\" title=\"安装配置\"></a>安装配置</h3><p>这里使用插件<a href=\"https://github.com/karma-runner/karma-ng-html2js-preprocessor\">karma-ng-html2js-preprocessor</a>。</p>\n<ul>\n<li><p>安装依赖</p>\n<figure class=\"highlight cmd\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install karma-ng-html2js-preprocessor --save-dev</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>karma.conf.js配置<br>我们需要在karma配置文件中添加相关的配置：</p>\n</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 添加加载的文件</span></span><br><span class=\"line\">files: [</span><br><span class=\"line\">  ...</span><br><span class=\"line\">  <span class=\"string\">'app/views/**/*.html'</span>,</span><br><span class=\"line\">  <span class=\"string\">'app/views/*.html'</span></span><br><span class=\"line\">],</span><br><span class=\"line\"><span class=\"comment\">// 添加预处理</span></span><br><span class=\"line\">preprocessors: &#123;</span><br><span class=\"line\">  ...</span><br><span class=\"line\">  <span class=\"string\">'app/views/*.html'</span>: <span class=\"string\">'ng-html2js'</span>,</span><br><span class=\"line\">  <span class=\"string\">'app/views/**/*.html'</span>: <span class=\"string\">'ng-html2js'</span></span><br><span class=\"line\">&#125;,</span><br><span class=\"line\"><span class=\"comment\">// 预处理相关配置</span></span><br><span class=\"line\">ngHtml2JsPreprocessor: &#123; </span><br><span class=\"line\">  stripPrefix: <span class=\"string\">'app/'</span>, </span><br><span class=\"line\">  moduleName: <span class=\"string\">'views'</span> <span class=\"comment\">// 生成的模块名字</span></span><br><span class=\"line\">&#125;,</span><br><span class=\"line\"><span class=\"comment\">// 添加插件</span></span><br><span class=\"line\">plugins: [</span><br><span class=\"line\">  ...</span><br><span class=\"line\">  <span class=\"string\">'karma-ng-html2js-preprocessor'</span></span><br><span class=\"line\">],</span><br></pre></td></tr></table></figure>\n<h3 id=\"注入模块\"><a href=\"#注入模块\" class=\"headerlink\" title=\"注入模块\"></a>注入模块</h3><p>测试文件中，我们可以在注入模块的同时注入指令模板，这里使用名字注入：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">beforeEach(<span class=\"built_in\">module</span>(<span class=\"string\">'views'</span>));</span><br></pre></td></tr></table></figure></p>\n<p>现在运行我们的测试，可以看到测试结果如下：<br><img src=\"http://o905ne85q.bkt.clouddn.com/7334.tmp.png\" alt=\"image\"><br>完成！</p>\n<h2 id=\"结束语\"><a href=\"#结束语\" class=\"headerlink\" title=\"结束语\"></a>结束语</h2><hr>\n<p>刚开始接触Karma的配置也很是复杂呢，用多了之后就好多啦，自动化和工程化也是个不简单的事情呢。<br><a href=\"https://github.com/godbasin/godbasin.github.io/tree/blog-codes/angular-notes/13-unit-test-directive\">此处查看项目代码（包含app以及test部分）</a></p>"},{"title":"Angular使用笔记1--搭建Angular项目","date":"2016-07-01T11:52:43.000Z","_content":"最近的一个项目使用AngularJS(v1.2.6)作为前端的框架，《Angular使用笔记》系列用于记录过程中的一些使用和解决方法。\n本文记录初步搭建项目的过程。\n<!--more-->\n\n## 使用Yeoman自动生成初步完整功能的AngularJS应用\n\n### 使用AngularJS的方法\n- 1.下载AngularJS源代码，引入到页面内，然后按照[官方教程](http://www.apjs.net/)进行启动app。\n- 2.使用自动化构建Grunt/Gulp搭建项目。\n\n### 自动化搭建\n- 本骚念使用的是Yeoman自动搭建，这里有详细教程[《Yeoman官方教程：用Yeoman和AngularJS做Web应用》](http://blog.jobbole.com/65399/)\n- 自动化搭建的好处：\n  - 1.对框架的目录组织有个大概的了解\n  - 2.可选择自动引入Bootstrap或者SASS\n  - 3.可选择自动引入需要使用的Angular模块，如下\n![image](http://o905ne85q.bkt.clouddn.com/CF95.tmp.png)\n  - 4.对首次使用AngularJS的小伙伴们来说，可以直观看到如何启用ng-app，以及路由ng-route的使用方式\n  - 5.启动一个基于Node的http服务，通过一系列的Grunt任务来监视你的文件的更改情况，一旦发现文件被改动了，'live reloading'就会自动刷新应用，并更新到浏览器上\n  - 6.可使用grunt命令自动执行规范代码、跑测试、压缩JS和CSS代码（减少网络请求）、优化图片还有编译使用了预处理的代码\n\n### Gulp/Grunt/Bower/NPM/Yeoman\n这里简单介绍一下这些工具\n- Grunt: Javascript任务运行器。常用来执行需要重复执行的任务，例如压缩、编译、单元测试等。\n- Gulp: gulp.js是一种基于流的，代码优于配置的新一代构建工具。Gulp和Grunt 类似。但相比于Grunt的频繁的IO操作，Gulp的流操作，能更快地完成构建。\n- Bower: Bower是一个客户端技术的软件包管理器，它可用于搜索、安装和卸载如JavaScript、HTML、CSS之类的网络资源。如YeoMan和Grunt等开发工具则是建立在Bower基础之上。\n- NPM: NPM是随同NodeJS一起安装的包管理工具，能解决NodeJS代码部署上的很多问题。是node.js常用来下载以及安装套件的工具。\n- Node.js: Node.js是一个事件驱动I/O服务端JavaScript环境，基于Google的V8引擎，简单的说就是运行在服务端的JavaScript。\n- Yeoman: Yeoman的目标是通过Grunt和Bower的包装为开发者创建一个易用的工作流，同时可解决前端开发所面临的诸多严重问题，例如零散的依赖关系。主要有三部分组成：yo（脚手架工具）、grunt（构建工具）、bower（包管理器）。\n- yo是一个用于构建特定框架的生态系统的代码工具，我们称之为生成器(generator)。\n\n## 目录组织\n-----\n搭建好初始化的项目，目录组织如下：\n![image](http://o905ne85q.bkt.clouddn.com/5C4E.tmp.png)\n当然，涉及angular项目的文件在app目录下，其他主要用于自动化构建、生成的环境和管理包引用。\n现在我们查看一下app目录下文件：\n![image](http://o905ne85q.bkt.clouddn.com/E558.tmp.png)\n\n当然项目发展文件数量肯定多很多的呢，在js文件成倍增长的时候，该怎么去管理呢？\n\n### 按照功能分类\n- 将directive/controller/service/filter等不同功能的js放置不同的文件夹管理\n![image](http://o905ne85q.bkt.clouddn.com/1350.tmp.png)\n\n### 按模块分类\n- 将每个模块的文件放置在一个文件夹内管理\n![image](http://o905ne85q.bkt.clouddn.com/14A2.tmp.png)\n\n本骚年用的是按照功能划分的，这种方式相对本骚年来说比较容易管理。\n或者你们如果有更好的管理目录组织方式，当然也欢迎分享啦。\n\n## Angular基本概念\n-----\n此处稍微介绍一下本骚年用的比较多的angular部分\n\n### AngularJS模块\n- ng-app: 模块用于单独的逻辑表示服务，控制器，应用程序等，并保持代码的整洁\n- 一般一个项目中只会用到一个ng-app，而angular自动启动也仅限于第一个ng-app，故使用多个模块的小伙伴们需要手动启动剩余的模块啦\n- 使用angular.bootstrap()可启用多个ng-app，[参考](http://www.cnblogs.com/whitewolf/archive/2012/08/13/2637262.html)\n\n### AngualrJS视图\n- ng-view: 标记只是简单地创建一个占位符，是一个相应的视图(HTML或ng-template视图)，可以根据配置来放置\n- 配合ng-route路由可以实现单页应用哦\n\n### AngularJS表达式\n``` html\n{{ expression | filter }}\n```\n- 其中filter为过滤器，常用于格式转换等\n- ng-bind与双大括号表达式差不多，但可以防止页面未加载完全时出现不必要的字符\n\n### AngularJS控制器\n- ng-controller: 控制AngularJS应用程序的数据\n- 常配合路由使用，也可以创建局部作用域来管理其中数据\n\n### AngularJS指令\n- angular.directive: 常用来拓展HTML\n- 对可复用的控件可进行封装，可创建独立作用域，可管理特定DOM事件\n- DOM操作尽量封装在指令内部哦\n\n### AngularJS HTML DOM常用事件和指令\n- ng-repeat: 通过数组来循环HTML代码\n- ng-show/ng-hide: 隐藏和显示相应元素\n- ng-if: 是否加载相应元素\n- ng-click: 绑定元素点击事件\n- ng-model: 双向绑定，多用于表单\n- ng-change/ng-keyup/ng-focus: 绑定事件，多用于表单\n\n此外还有路由、表单验证、作用域等，这里就不详细介绍啦。\n虽然说配合实践是高效学习的一种方式，但是基础和概念也是很重要的哦。\n下面是一些教程：\n[《AngularJS中文网》](http://www.apjs.net/)\n[《w3c菜鸟：AngularJS教程》](http://www.runoob.com/angularjs/angularjs-tutorial.html)\n\n## 结束语\n-----\n自动化搭建对AngularJS应用整体上的了解很有帮助哦，不妨尝试一下啦。\n[此处查看项目代码（仅包含app部分）](https://github.com/godbasin/godbasin.github.io/tree/blog-codes/angular-notes/1-create-angular-project)\n[此处查看页面效果](http://o9grhhyar.bkt.clouddn.com/1-create-angular-project/index.html#/)","source":"_posts/angular-note-1-create-angular-project.md","raw":"---\ntitle: Angular使用笔记1--搭建Angular项目\ndate: 2016-07-01 19:52:43\ncategories: angular混搭\ntags: 笔记\n---\n最近的一个项目使用AngularJS(v1.2.6)作为前端的框架，《Angular使用笔记》系列用于记录过程中的一些使用和解决方法。\n本文记录初步搭建项目的过程。\n<!--more-->\n\n## 使用Yeoman自动生成初步完整功能的AngularJS应用\n\n### 使用AngularJS的方法\n- 1.下载AngularJS源代码，引入到页面内，然后按照[官方教程](http://www.apjs.net/)进行启动app。\n- 2.使用自动化构建Grunt/Gulp搭建项目。\n\n### 自动化搭建\n- 本骚念使用的是Yeoman自动搭建，这里有详细教程[《Yeoman官方教程：用Yeoman和AngularJS做Web应用》](http://blog.jobbole.com/65399/)\n- 自动化搭建的好处：\n  - 1.对框架的目录组织有个大概的了解\n  - 2.可选择自动引入Bootstrap或者SASS\n  - 3.可选择自动引入需要使用的Angular模块，如下\n![image](http://o905ne85q.bkt.clouddn.com/CF95.tmp.png)\n  - 4.对首次使用AngularJS的小伙伴们来说，可以直观看到如何启用ng-app，以及路由ng-route的使用方式\n  - 5.启动一个基于Node的http服务，通过一系列的Grunt任务来监视你的文件的更改情况，一旦发现文件被改动了，'live reloading'就会自动刷新应用，并更新到浏览器上\n  - 6.可使用grunt命令自动执行规范代码、跑测试、压缩JS和CSS代码（减少网络请求）、优化图片还有编译使用了预处理的代码\n\n### Gulp/Grunt/Bower/NPM/Yeoman\n这里简单介绍一下这些工具\n- Grunt: Javascript任务运行器。常用来执行需要重复执行的任务，例如压缩、编译、单元测试等。\n- Gulp: gulp.js是一种基于流的，代码优于配置的新一代构建工具。Gulp和Grunt 类似。但相比于Grunt的频繁的IO操作，Gulp的流操作，能更快地完成构建。\n- Bower: Bower是一个客户端技术的软件包管理器，它可用于搜索、安装和卸载如JavaScript、HTML、CSS之类的网络资源。如YeoMan和Grunt等开发工具则是建立在Bower基础之上。\n- NPM: NPM是随同NodeJS一起安装的包管理工具，能解决NodeJS代码部署上的很多问题。是node.js常用来下载以及安装套件的工具。\n- Node.js: Node.js是一个事件驱动I/O服务端JavaScript环境，基于Google的V8引擎，简单的说就是运行在服务端的JavaScript。\n- Yeoman: Yeoman的目标是通过Grunt和Bower的包装为开发者创建一个易用的工作流，同时可解决前端开发所面临的诸多严重问题，例如零散的依赖关系。主要有三部分组成：yo（脚手架工具）、grunt（构建工具）、bower（包管理器）。\n- yo是一个用于构建特定框架的生态系统的代码工具，我们称之为生成器(generator)。\n\n## 目录组织\n-----\n搭建好初始化的项目，目录组织如下：\n![image](http://o905ne85q.bkt.clouddn.com/5C4E.tmp.png)\n当然，涉及angular项目的文件在app目录下，其他主要用于自动化构建、生成的环境和管理包引用。\n现在我们查看一下app目录下文件：\n![image](http://o905ne85q.bkt.clouddn.com/E558.tmp.png)\n\n当然项目发展文件数量肯定多很多的呢，在js文件成倍增长的时候，该怎么去管理呢？\n\n### 按照功能分类\n- 将directive/controller/service/filter等不同功能的js放置不同的文件夹管理\n![image](http://o905ne85q.bkt.clouddn.com/1350.tmp.png)\n\n### 按模块分类\n- 将每个模块的文件放置在一个文件夹内管理\n![image](http://o905ne85q.bkt.clouddn.com/14A2.tmp.png)\n\n本骚年用的是按照功能划分的，这种方式相对本骚年来说比较容易管理。\n或者你们如果有更好的管理目录组织方式，当然也欢迎分享啦。\n\n## Angular基本概念\n-----\n此处稍微介绍一下本骚年用的比较多的angular部分\n\n### AngularJS模块\n- ng-app: 模块用于单独的逻辑表示服务，控制器，应用程序等，并保持代码的整洁\n- 一般一个项目中只会用到一个ng-app，而angular自动启动也仅限于第一个ng-app，故使用多个模块的小伙伴们需要手动启动剩余的模块啦\n- 使用angular.bootstrap()可启用多个ng-app，[参考](http://www.cnblogs.com/whitewolf/archive/2012/08/13/2637262.html)\n\n### AngualrJS视图\n- ng-view: 标记只是简单地创建一个占位符，是一个相应的视图(HTML或ng-template视图)，可以根据配置来放置\n- 配合ng-route路由可以实现单页应用哦\n\n### AngularJS表达式\n``` html\n{{ expression | filter }}\n```\n- 其中filter为过滤器，常用于格式转换等\n- ng-bind与双大括号表达式差不多，但可以防止页面未加载完全时出现不必要的字符\n\n### AngularJS控制器\n- ng-controller: 控制AngularJS应用程序的数据\n- 常配合路由使用，也可以创建局部作用域来管理其中数据\n\n### AngularJS指令\n- angular.directive: 常用来拓展HTML\n- 对可复用的控件可进行封装，可创建独立作用域，可管理特定DOM事件\n- DOM操作尽量封装在指令内部哦\n\n### AngularJS HTML DOM常用事件和指令\n- ng-repeat: 通过数组来循环HTML代码\n- ng-show/ng-hide: 隐藏和显示相应元素\n- ng-if: 是否加载相应元素\n- ng-click: 绑定元素点击事件\n- ng-model: 双向绑定，多用于表单\n- ng-change/ng-keyup/ng-focus: 绑定事件，多用于表单\n\n此外还有路由、表单验证、作用域等，这里就不详细介绍啦。\n虽然说配合实践是高效学习的一种方式，但是基础和概念也是很重要的哦。\n下面是一些教程：\n[《AngularJS中文网》](http://www.apjs.net/)\n[《w3c菜鸟：AngularJS教程》](http://www.runoob.com/angularjs/angularjs-tutorial.html)\n\n## 结束语\n-----\n自动化搭建对AngularJS应用整体上的了解很有帮助哦，不妨尝试一下啦。\n[此处查看项目代码（仅包含app部分）](https://github.com/godbasin/godbasin.github.io/tree/blog-codes/angular-notes/1-create-angular-project)\n[此处查看页面效果](http://o9grhhyar.bkt.clouddn.com/1-create-angular-project/index.html#/)","slug":"angular-note-1-create-angular-project","published":1,"updated":"2016-07-01T13:21:20.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cirrwvo6l002638l5vatga27p","content":"<p>最近的一个项目使用AngularJS(v1.2.6)作为前端的框架，《Angular使用笔记》系列用于记录过程中的一些使用和解决方法。<br>本文记录初步搭建项目的过程。<br><a id=\"more\"></a></p>\n<h2 id=\"使用Yeoman自动生成初步完整功能的AngularJS应用\"><a href=\"#使用Yeoman自动生成初步完整功能的AngularJS应用\" class=\"headerlink\" title=\"使用Yeoman自动生成初步完整功能的AngularJS应用\"></a>使用Yeoman自动生成初步完整功能的AngularJS应用</h2><h3 id=\"使用AngularJS的方法\"><a href=\"#使用AngularJS的方法\" class=\"headerlink\" title=\"使用AngularJS的方法\"></a>使用AngularJS的方法</h3><ul>\n<li>1.下载AngularJS源代码，引入到页面内，然后按照<a href=\"http://www.apjs.net/\" target=\"_blank\" rel=\"external\">官方教程</a>进行启动app。</li>\n<li>2.使用自动化构建Grunt/Gulp搭建项目。</li>\n</ul>\n<h3 id=\"自动化搭建\"><a href=\"#自动化搭建\" class=\"headerlink\" title=\"自动化搭建\"></a>自动化搭建</h3><ul>\n<li>本骚念使用的是Yeoman自动搭建，这里有详细教程<a href=\"http://blog.jobbole.com/65399/\" target=\"_blank\" rel=\"external\">《Yeoman官方教程：用Yeoman和AngularJS做Web应用》</a></li>\n<li>自动化搭建的好处：<ul>\n<li>1.对框架的目录组织有个大概的了解</li>\n<li>2.可选择自动引入Bootstrap或者SASS</li>\n<li>3.可选择自动引入需要使用的Angular模块，如下<br><img src=\"http://o905ne85q.bkt.clouddn.com/CF95.tmp.png\" alt=\"image\"></li>\n<li>4.对首次使用AngularJS的小伙伴们来说，可以直观看到如何启用ng-app，以及路由ng-route的使用方式</li>\n<li>5.启动一个基于Node的http服务，通过一系列的Grunt任务来监视你的文件的更改情况，一旦发现文件被改动了，’live reloading’就会自动刷新应用，并更新到浏览器上</li>\n<li>6.可使用grunt命令自动执行规范代码、跑测试、压缩JS和CSS代码（减少网络请求）、优化图片还有编译使用了预处理的代码</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"Gulp-Grunt-Bower-NPM-Yeoman\"><a href=\"#Gulp-Grunt-Bower-NPM-Yeoman\" class=\"headerlink\" title=\"Gulp/Grunt/Bower/NPM/Yeoman\"></a>Gulp/Grunt/Bower/NPM/Yeoman</h3><p>这里简单介绍一下这些工具</p>\n<ul>\n<li>Grunt: Javascript任务运行器。常用来执行需要重复执行的任务，例如压缩、编译、单元测试等。</li>\n<li>Gulp: gulp.js是一种基于流的，代码优于配置的新一代构建工具。Gulp和Grunt 类似。但相比于Grunt的频繁的IO操作，Gulp的流操作，能更快地完成构建。</li>\n<li>Bower: Bower是一个客户端技术的软件包管理器，它可用于搜索、安装和卸载如JavaScript、HTML、CSS之类的网络资源。如YeoMan和Grunt等开发工具则是建立在Bower基础之上。</li>\n<li>NPM: NPM是随同NodeJS一起安装的包管理工具，能解决NodeJS代码部署上的很多问题。是node.js常用来下载以及安装套件的工具。</li>\n<li>Node.js: Node.js是一个事件驱动I/O服务端JavaScript环境，基于Google的V8引擎，简单的说就是运行在服务端的JavaScript。</li>\n<li>Yeoman: Yeoman的目标是通过Grunt和Bower的包装为开发者创建一个易用的工作流，同时可解决前端开发所面临的诸多严重问题，例如零散的依赖关系。主要有三部分组成：yo（脚手架工具）、grunt（构建工具）、bower（包管理器）。</li>\n<li>yo是一个用于构建特定框架的生态系统的代码工具，我们称之为生成器(generator)。</li>\n</ul>\n<h2 id=\"目录组织\"><a href=\"#目录组织\" class=\"headerlink\" title=\"目录组织\"></a>目录组织</h2><hr>\n<p>搭建好初始化的项目，目录组织如下：<br><img src=\"http://o905ne85q.bkt.clouddn.com/5C4E.tmp.png\" alt=\"image\"><br>当然，涉及angular项目的文件在app目录下，其他主要用于自动化构建、生成的环境和管理包引用。<br>现在我们查看一下app目录下文件：<br><img src=\"http://o905ne85q.bkt.clouddn.com/E558.tmp.png\" alt=\"image\"></p>\n<p>当然项目发展文件数量肯定多很多的呢，在js文件成倍增长的时候，该怎么去管理呢？</p>\n<h3 id=\"按照功能分类\"><a href=\"#按照功能分类\" class=\"headerlink\" title=\"按照功能分类\"></a>按照功能分类</h3><ul>\n<li>将directive/controller/service/filter等不同功能的js放置不同的文件夹管理<br><img src=\"http://o905ne85q.bkt.clouddn.com/1350.tmp.png\" alt=\"image\"></li>\n</ul>\n<h3 id=\"按模块分类\"><a href=\"#按模块分类\" class=\"headerlink\" title=\"按模块分类\"></a>按模块分类</h3><ul>\n<li>将每个模块的文件放置在一个文件夹内管理<br><img src=\"http://o905ne85q.bkt.clouddn.com/14A2.tmp.png\" alt=\"image\"></li>\n</ul>\n<p>本骚年用的是按照功能划分的，这种方式相对本骚年来说比较容易管理。<br>或者你们如果有更好的管理目录组织方式，当然也欢迎分享啦。</p>\n<h2 id=\"Angular基本概念\"><a href=\"#Angular基本概念\" class=\"headerlink\" title=\"Angular基本概念\"></a>Angular基本概念</h2><hr>\n<p>此处稍微介绍一下本骚年用的比较多的angular部分</p>\n<h3 id=\"AngularJS模块\"><a href=\"#AngularJS模块\" class=\"headerlink\" title=\"AngularJS模块\"></a>AngularJS模块</h3><ul>\n<li>ng-app: 模块用于单独的逻辑表示服务，控制器，应用程序等，并保持代码的整洁</li>\n<li>一般一个项目中只会用到一个ng-app，而angular自动启动也仅限于第一个ng-app，故使用多个模块的小伙伴们需要手动启动剩余的模块啦</li>\n<li>使用angular.bootstrap()可启用多个ng-app，<a href=\"http://www.cnblogs.com/whitewolf/archive/2012/08/13/2637262.html\" target=\"_blank\" rel=\"external\">参考</a></li>\n</ul>\n<h3 id=\"AngualrJS视图\"><a href=\"#AngualrJS视图\" class=\"headerlink\" title=\"AngualrJS视图\"></a>AngualrJS视图</h3><ul>\n<li>ng-view: 标记只是简单地创建一个占位符，是一个相应的视图(HTML或ng-template视图)，可以根据配置来放置</li>\n<li>配合ng-route路由可以实现单页应用哦</li>\n</ul>\n<h3 id=\"AngularJS表达式\"><a href=\"#AngularJS表达式\" class=\"headerlink\" title=\"AngularJS表达式\"></a>AngularJS表达式</h3><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;&#123; expression | filter &#125;&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>其中filter为过滤器，常用于格式转换等</li>\n<li>ng-bind与双大括号表达式差不多，但可以防止页面未加载完全时出现不必要的字符</li>\n</ul>\n<h3 id=\"AngularJS控制器\"><a href=\"#AngularJS控制器\" class=\"headerlink\" title=\"AngularJS控制器\"></a>AngularJS控制器</h3><ul>\n<li>ng-controller: 控制AngularJS应用程序的数据</li>\n<li>常配合路由使用，也可以创建局部作用域来管理其中数据</li>\n</ul>\n<h3 id=\"AngularJS指令\"><a href=\"#AngularJS指令\" class=\"headerlink\" title=\"AngularJS指令\"></a>AngularJS指令</h3><ul>\n<li>angular.directive: 常用来拓展HTML</li>\n<li>对可复用的控件可进行封装，可创建独立作用域，可管理特定DOM事件</li>\n<li>DOM操作尽量封装在指令内部哦</li>\n</ul>\n<h3 id=\"AngularJS-HTML-DOM常用事件和指令\"><a href=\"#AngularJS-HTML-DOM常用事件和指令\" class=\"headerlink\" title=\"AngularJS HTML DOM常用事件和指令\"></a>AngularJS HTML DOM常用事件和指令</h3><ul>\n<li>ng-repeat: 通过数组来循环HTML代码</li>\n<li>ng-show/ng-hide: 隐藏和显示相应元素</li>\n<li>ng-if: 是否加载相应元素</li>\n<li>ng-click: 绑定元素点击事件</li>\n<li>ng-model: 双向绑定，多用于表单</li>\n<li>ng-change/ng-keyup/ng-focus: 绑定事件，多用于表单</li>\n</ul>\n<p>此外还有路由、表单验证、作用域等，这里就不详细介绍啦。<br>虽然说配合实践是高效学习的一种方式，但是基础和概念也是很重要的哦。<br>下面是一些教程：<br><a href=\"http://www.apjs.net/\" target=\"_blank\" rel=\"external\">《AngularJS中文网》</a><br><a href=\"http://www.runoob.com/angularjs/angularjs-tutorial.html\" target=\"_blank\" rel=\"external\">《w3c菜鸟：AngularJS教程》</a></p>\n<h2 id=\"结束语\"><a href=\"#结束语\" class=\"headerlink\" title=\"结束语\"></a>结束语</h2><hr>\n<p>自动化搭建对AngularJS应用整体上的了解很有帮助哦，不妨尝试一下啦。<br><a href=\"https://github.com/godbasin/godbasin.github.io/tree/blog-codes/angular-notes/1-create-angular-project\" target=\"_blank\" rel=\"external\">此处查看项目代码（仅包含app部分）</a><br><a href=\"http://o9grhhyar.bkt.clouddn.com/1-create-angular-project/index.html#/\" target=\"_blank\" rel=\"external\">此处查看页面效果</a></p>\n","excerpt":"<p>最近的一个项目使用AngularJS(v1.2.6)作为前端的框架，《Angular使用笔记》系列用于记录过程中的一些使用和解决方法。<br>本文记录初步搭建项目的过程。<br>","more":"</p>\n<h2 id=\"使用Yeoman自动生成初步完整功能的AngularJS应用\"><a href=\"#使用Yeoman自动生成初步完整功能的AngularJS应用\" class=\"headerlink\" title=\"使用Yeoman自动生成初步完整功能的AngularJS应用\"></a>使用Yeoman自动生成初步完整功能的AngularJS应用</h2><h3 id=\"使用AngularJS的方法\"><a href=\"#使用AngularJS的方法\" class=\"headerlink\" title=\"使用AngularJS的方法\"></a>使用AngularJS的方法</h3><ul>\n<li>1.下载AngularJS源代码，引入到页面内，然后按照<a href=\"http://www.apjs.net/\">官方教程</a>进行启动app。</li>\n<li>2.使用自动化构建Grunt/Gulp搭建项目。</li>\n</ul>\n<h3 id=\"自动化搭建\"><a href=\"#自动化搭建\" class=\"headerlink\" title=\"自动化搭建\"></a>自动化搭建</h3><ul>\n<li>本骚念使用的是Yeoman自动搭建，这里有详细教程<a href=\"http://blog.jobbole.com/65399/\">《Yeoman官方教程：用Yeoman和AngularJS做Web应用》</a></li>\n<li>自动化搭建的好处：<ul>\n<li>1.对框架的目录组织有个大概的了解</li>\n<li>2.可选择自动引入Bootstrap或者SASS</li>\n<li>3.可选择自动引入需要使用的Angular模块，如下<br><img src=\"http://o905ne85q.bkt.clouddn.com/CF95.tmp.png\" alt=\"image\"></li>\n<li>4.对首次使用AngularJS的小伙伴们来说，可以直观看到如何启用ng-app，以及路由ng-route的使用方式</li>\n<li>5.启动一个基于Node的http服务，通过一系列的Grunt任务来监视你的文件的更改情况，一旦发现文件被改动了，’live reloading’就会自动刷新应用，并更新到浏览器上</li>\n<li>6.可使用grunt命令自动执行规范代码、跑测试、压缩JS和CSS代码（减少网络请求）、优化图片还有编译使用了预处理的代码</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"Gulp-Grunt-Bower-NPM-Yeoman\"><a href=\"#Gulp-Grunt-Bower-NPM-Yeoman\" class=\"headerlink\" title=\"Gulp/Grunt/Bower/NPM/Yeoman\"></a>Gulp/Grunt/Bower/NPM/Yeoman</h3><p>这里简单介绍一下这些工具</p>\n<ul>\n<li>Grunt: Javascript任务运行器。常用来执行需要重复执行的任务，例如压缩、编译、单元测试等。</li>\n<li>Gulp: gulp.js是一种基于流的，代码优于配置的新一代构建工具。Gulp和Grunt 类似。但相比于Grunt的频繁的IO操作，Gulp的流操作，能更快地完成构建。</li>\n<li>Bower: Bower是一个客户端技术的软件包管理器，它可用于搜索、安装和卸载如JavaScript、HTML、CSS之类的网络资源。如YeoMan和Grunt等开发工具则是建立在Bower基础之上。</li>\n<li>NPM: NPM是随同NodeJS一起安装的包管理工具，能解决NodeJS代码部署上的很多问题。是node.js常用来下载以及安装套件的工具。</li>\n<li>Node.js: Node.js是一个事件驱动I/O服务端JavaScript环境，基于Google的V8引擎，简单的说就是运行在服务端的JavaScript。</li>\n<li>Yeoman: Yeoman的目标是通过Grunt和Bower的包装为开发者创建一个易用的工作流，同时可解决前端开发所面临的诸多严重问题，例如零散的依赖关系。主要有三部分组成：yo（脚手架工具）、grunt（构建工具）、bower（包管理器）。</li>\n<li>yo是一个用于构建特定框架的生态系统的代码工具，我们称之为生成器(generator)。</li>\n</ul>\n<h2 id=\"目录组织\"><a href=\"#目录组织\" class=\"headerlink\" title=\"目录组织\"></a>目录组织</h2><hr>\n<p>搭建好初始化的项目，目录组织如下：<br><img src=\"http://o905ne85q.bkt.clouddn.com/5C4E.tmp.png\" alt=\"image\"><br>当然，涉及angular项目的文件在app目录下，其他主要用于自动化构建、生成的环境和管理包引用。<br>现在我们查看一下app目录下文件：<br><img src=\"http://o905ne85q.bkt.clouddn.com/E558.tmp.png\" alt=\"image\"></p>\n<p>当然项目发展文件数量肯定多很多的呢，在js文件成倍增长的时候，该怎么去管理呢？</p>\n<h3 id=\"按照功能分类\"><a href=\"#按照功能分类\" class=\"headerlink\" title=\"按照功能分类\"></a>按照功能分类</h3><ul>\n<li>将directive/controller/service/filter等不同功能的js放置不同的文件夹管理<br><img src=\"http://o905ne85q.bkt.clouddn.com/1350.tmp.png\" alt=\"image\"></li>\n</ul>\n<h3 id=\"按模块分类\"><a href=\"#按模块分类\" class=\"headerlink\" title=\"按模块分类\"></a>按模块分类</h3><ul>\n<li>将每个模块的文件放置在一个文件夹内管理<br><img src=\"http://o905ne85q.bkt.clouddn.com/14A2.tmp.png\" alt=\"image\"></li>\n</ul>\n<p>本骚年用的是按照功能划分的，这种方式相对本骚年来说比较容易管理。<br>或者你们如果有更好的管理目录组织方式，当然也欢迎分享啦。</p>\n<h2 id=\"Angular基本概念\"><a href=\"#Angular基本概念\" class=\"headerlink\" title=\"Angular基本概念\"></a>Angular基本概念</h2><hr>\n<p>此处稍微介绍一下本骚年用的比较多的angular部分</p>\n<h3 id=\"AngularJS模块\"><a href=\"#AngularJS模块\" class=\"headerlink\" title=\"AngularJS模块\"></a>AngularJS模块</h3><ul>\n<li>ng-app: 模块用于单独的逻辑表示服务，控制器，应用程序等，并保持代码的整洁</li>\n<li>一般一个项目中只会用到一个ng-app，而angular自动启动也仅限于第一个ng-app，故使用多个模块的小伙伴们需要手动启动剩余的模块啦</li>\n<li>使用angular.bootstrap()可启用多个ng-app，<a href=\"http://www.cnblogs.com/whitewolf/archive/2012/08/13/2637262.html\">参考</a></li>\n</ul>\n<h3 id=\"AngualrJS视图\"><a href=\"#AngualrJS视图\" class=\"headerlink\" title=\"AngualrJS视图\"></a>AngualrJS视图</h3><ul>\n<li>ng-view: 标记只是简单地创建一个占位符，是一个相应的视图(HTML或ng-template视图)，可以根据配置来放置</li>\n<li>配合ng-route路由可以实现单页应用哦</li>\n</ul>\n<h3 id=\"AngularJS表达式\"><a href=\"#AngularJS表达式\" class=\"headerlink\" title=\"AngularJS表达式\"></a>AngularJS表达式</h3><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;&#123; expression | filter &#125;&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>其中filter为过滤器，常用于格式转换等</li>\n<li>ng-bind与双大括号表达式差不多，但可以防止页面未加载完全时出现不必要的字符</li>\n</ul>\n<h3 id=\"AngularJS控制器\"><a href=\"#AngularJS控制器\" class=\"headerlink\" title=\"AngularJS控制器\"></a>AngularJS控制器</h3><ul>\n<li>ng-controller: 控制AngularJS应用程序的数据</li>\n<li>常配合路由使用，也可以创建局部作用域来管理其中数据</li>\n</ul>\n<h3 id=\"AngularJS指令\"><a href=\"#AngularJS指令\" class=\"headerlink\" title=\"AngularJS指令\"></a>AngularJS指令</h3><ul>\n<li>angular.directive: 常用来拓展HTML</li>\n<li>对可复用的控件可进行封装，可创建独立作用域，可管理特定DOM事件</li>\n<li>DOM操作尽量封装在指令内部哦</li>\n</ul>\n<h3 id=\"AngularJS-HTML-DOM常用事件和指令\"><a href=\"#AngularJS-HTML-DOM常用事件和指令\" class=\"headerlink\" title=\"AngularJS HTML DOM常用事件和指令\"></a>AngularJS HTML DOM常用事件和指令</h3><ul>\n<li>ng-repeat: 通过数组来循环HTML代码</li>\n<li>ng-show/ng-hide: 隐藏和显示相应元素</li>\n<li>ng-if: 是否加载相应元素</li>\n<li>ng-click: 绑定元素点击事件</li>\n<li>ng-model: 双向绑定，多用于表单</li>\n<li>ng-change/ng-keyup/ng-focus: 绑定事件，多用于表单</li>\n</ul>\n<p>此外还有路由、表单验证、作用域等，这里就不详细介绍啦。<br>虽然说配合实践是高效学习的一种方式，但是基础和概念也是很重要的哦。<br>下面是一些教程：<br><a href=\"http://www.apjs.net/\">《AngularJS中文网》</a><br><a href=\"http://www.runoob.com/angularjs/angularjs-tutorial.html\">《w3c菜鸟：AngularJS教程》</a></p>\n<h2 id=\"结束语\"><a href=\"#结束语\" class=\"headerlink\" title=\"结束语\"></a>结束语</h2><hr>\n<p>自动化搭建对AngularJS应用整体上的了解很有帮助哦，不妨尝试一下啦。<br><a href=\"https://github.com/godbasin/godbasin.github.io/tree/blog-codes/angular-notes/1-create-angular-project\">此处查看项目代码（仅包含app部分）</a><br><a href=\"http://o9grhhyar.bkt.clouddn.com/1-create-angular-project/index.html#/\">此处查看页面效果</a></p>"},{"title":"Angular使用笔记10-有关路由以及控制器间通信","date":"2016-07-29T14:02:47.000Z","_content":"最近的一个项目使用AngularJS(v1.2.6)作为前端的框架，《Angular使用笔记》系列用于记录过程中的一些使用和解决方法。\n本文记录使用有关路由以及控制器间通信的过程。\n<!--more-->\n\n## ngRoute\n-----\n前面篇章我们已经讲述过路由的简单使用方法，这里我们将对路由传参等进行更详细的介绍。\n### ngRoute包括的内容\nng的路由机制是靠ngRoute提供的，通过hash和history两种方式实现了路由，可以检测浏览器是否支持history来灵活调用相应的方式。\n- 服务$routeProvider用来定义一个路由表，即地址栏与视图模板的映射\n- 服务$routeParams保存了地址栏中的参数，例如{id : 1, name : 'tom'}\n- 服务$route完成路由匹配，并且提供路由相关的属性访问及事件，如访问当前路由对应的controller\n- 指令ngView用来在主视图中指定加载子视图的区域\nng-view的实现原理，是根据路由的切换，动态编译html模板——$compile(html)(scope)\n\n以上内容再加上$location服务，则可实现一个单页面应用。\n\n### $routeProvider\n$routeProvider服务提供两种方法：\n- when()：配置路径和参数\n  - when的第二个参数\n    - controller： 对应路径的控制器函数，或者名称\n    - controllerAs： 给控制器起个别名\n    - template： 对应路径的页面模板，会出现在ng-view处\n    - templateUrl： 对应模板的路径\n    - resolve： 该属性会以键值对对象的形式，给路由相关的控制器绑定服务或者值。然后把执行的结果值或者对应的服务引用，注入到控制器中。如果resolve中是一个promise对象，那么会等它执行成功后，才注入到控制器中，此时控制器会等待resolve中的执行结果\n    - redirectTo：重定向地址\n    - reloadOnSearch：设置是否在只有地址改变时，才加载对应的模板;search和params改变都不会加载模板\n    - caseInsensitiveMatch ：路径区分大小写\n\n``` javascript\nresolve: {\n\t//设置三秒的延迟Promise，该页面在3秒后才会加载成功\n\tdelay: function($q, $timeout) {\n\t\tvar delay = $q.defer();\n\t\t$timeout(delay.resolve, 3000);\n\t\treturn delay.promise;\n\t}\n}\n```\n- otherwise：配置其他的路径跳转，即default\n\n### $route\n- $route.reload()方法可以实现刷新路由\n- $route服务提供了current和routes属性\n- $route服务提供以下几个事件：\n使用$on来调用事件\n  - $routeChangeStart 路由发生变化时被触发\n  - $routeChangesSuccess 路由成功时被触发\n  - $routeChangeError 路由异常时被触发\n  - $routeUpdate 路由更新时被触发\n\n### $routeParams\n$routeParams服务可获取路由中的参数，当路由成功后才能获取。\n``` javascript\n.when('/example/:id',{}) //设置路由参数id\n//控制器中获取参数\napp.controller('ExampleController', ['$routeParams', function($routeParams){\n    var id = $routeParams.id;\n    //使用id获取相关id值\n}]);\n```\n- $routeParams和$route.current.params\n\t> $route.current.params在路由发生变化时会改变\n\t> $routeParams只有当路由成功时才会改变\n\t> 这里有个很好的[例子](https://docs.angularjs.org/api/ngRoute/service/$route#example)\n\n### $location\n$location服务解析地址栏中的URL（基于window.location），可在应用代码中获取到。\n- 暴露当前地址栏的URL，可获取并监听或改变URL\n- 当出现以下情况时同步URL\n  - 改变地址栏\n  - 点击了后退按钮（或者点击了历史链接）\n  - 点击了一个链接\n- 可用（protocol, host, port, path, search, hash）获取URL对象的具体内容\n\n### 参考\n- [《走进AngularJs(八) ng的路由机制》](http://www.2cto.com/kf/201312/265979.html)\n- [《AngularJs ng-route路由详解》](http://www.cnblogs.com/xing901022/p/5154358.html?utm_source=tuicool&utm_medium=referral)\n- [《AngularJS开发指南27：使用$location》](http://www.angularjs.cn/A00M)\n\n## Controller间通信\n-----\n### angular控制器通信的方式\n- 1.利用作用域继承的方式\n即子控制器继承父控制器中的内容。\n- 2.基于事件的方式\n即$on,$emit,$boardcast这三种方式。\n- 3.服务方式\n写一个服务的单例然后通过注入来使用。\n\n### 利用作用域的继承方式\n作用域的继承是基于javascript的原型继承方式。\n- 当作用域上面的值为基本类型的时候，修改父作用域上面的值会影响到子作用域，修改子作用域只会影响子作用域的值，不会影响父作用域上面的值\n- 作用域上的值为对象（引用类型），任何一方的修改都能影响另一方\n\n### 基于事件的方式\nAngularjs为在scope中为我们提供了冒泡和隧道机制。\n- $broadcast会把事件广播给所有子级以下的作用域\n- $emit则会将事件冒泡传递给父级以上的作用域\n- $on则是angularjs的事件注册函数，表示事件监听\n> 兄弟控制间进行通信：\n> 兄弟控制中向父作用域触发一个事件，然后在父作用域中监听事件，再广播给子作用域。\n\n### angular服务的方式\nangular服务中生成一个对象，该对象就可以利用依赖注入的方式在所有的控制器中共享。\n\n### 参考\n[《AngularJS控制器controller如何通信？》](https://segmentfault.com/a/1190000000639592)\n\n## 结束语\n-----\n路由参数的传递以及控制器直接的通信，配合使用能获得更多的功能呢。","source":"_posts/angular-note-10-route-and-controller-conmunitaion.md","raw":"---\ntitle: Angular使用笔记10-有关路由以及控制器间通信\ndate: 2016-07-29 22:02:47\ncategories: angular混搭\ntags: 笔记\n---\n最近的一个项目使用AngularJS(v1.2.6)作为前端的框架，《Angular使用笔记》系列用于记录过程中的一些使用和解决方法。\n本文记录使用有关路由以及控制器间通信的过程。\n<!--more-->\n\n## ngRoute\n-----\n前面篇章我们已经讲述过路由的简单使用方法，这里我们将对路由传参等进行更详细的介绍。\n### ngRoute包括的内容\nng的路由机制是靠ngRoute提供的，通过hash和history两种方式实现了路由，可以检测浏览器是否支持history来灵活调用相应的方式。\n- 服务$routeProvider用来定义一个路由表，即地址栏与视图模板的映射\n- 服务$routeParams保存了地址栏中的参数，例如{id : 1, name : 'tom'}\n- 服务$route完成路由匹配，并且提供路由相关的属性访问及事件，如访问当前路由对应的controller\n- 指令ngView用来在主视图中指定加载子视图的区域\nng-view的实现原理，是根据路由的切换，动态编译html模板——$compile(html)(scope)\n\n以上内容再加上$location服务，则可实现一个单页面应用。\n\n### $routeProvider\n$routeProvider服务提供两种方法：\n- when()：配置路径和参数\n  - when的第二个参数\n    - controller： 对应路径的控制器函数，或者名称\n    - controllerAs： 给控制器起个别名\n    - template： 对应路径的页面模板，会出现在ng-view处\n    - templateUrl： 对应模板的路径\n    - resolve： 该属性会以键值对对象的形式，给路由相关的控制器绑定服务或者值。然后把执行的结果值或者对应的服务引用，注入到控制器中。如果resolve中是一个promise对象，那么会等它执行成功后，才注入到控制器中，此时控制器会等待resolve中的执行结果\n    - redirectTo：重定向地址\n    - reloadOnSearch：设置是否在只有地址改变时，才加载对应的模板;search和params改变都不会加载模板\n    - caseInsensitiveMatch ：路径区分大小写\n\n``` javascript\nresolve: {\n\t//设置三秒的延迟Promise，该页面在3秒后才会加载成功\n\tdelay: function($q, $timeout) {\n\t\tvar delay = $q.defer();\n\t\t$timeout(delay.resolve, 3000);\n\t\treturn delay.promise;\n\t}\n}\n```\n- otherwise：配置其他的路径跳转，即default\n\n### $route\n- $route.reload()方法可以实现刷新路由\n- $route服务提供了current和routes属性\n- $route服务提供以下几个事件：\n使用$on来调用事件\n  - $routeChangeStart 路由发生变化时被触发\n  - $routeChangesSuccess 路由成功时被触发\n  - $routeChangeError 路由异常时被触发\n  - $routeUpdate 路由更新时被触发\n\n### $routeParams\n$routeParams服务可获取路由中的参数，当路由成功后才能获取。\n``` javascript\n.when('/example/:id',{}) //设置路由参数id\n//控制器中获取参数\napp.controller('ExampleController', ['$routeParams', function($routeParams){\n    var id = $routeParams.id;\n    //使用id获取相关id值\n}]);\n```\n- $routeParams和$route.current.params\n\t> $route.current.params在路由发生变化时会改变\n\t> $routeParams只有当路由成功时才会改变\n\t> 这里有个很好的[例子](https://docs.angularjs.org/api/ngRoute/service/$route#example)\n\n### $location\n$location服务解析地址栏中的URL（基于window.location），可在应用代码中获取到。\n- 暴露当前地址栏的URL，可获取并监听或改变URL\n- 当出现以下情况时同步URL\n  - 改变地址栏\n  - 点击了后退按钮（或者点击了历史链接）\n  - 点击了一个链接\n- 可用（protocol, host, port, path, search, hash）获取URL对象的具体内容\n\n### 参考\n- [《走进AngularJs(八) ng的路由机制》](http://www.2cto.com/kf/201312/265979.html)\n- [《AngularJs ng-route路由详解》](http://www.cnblogs.com/xing901022/p/5154358.html?utm_source=tuicool&utm_medium=referral)\n- [《AngularJS开发指南27：使用$location》](http://www.angularjs.cn/A00M)\n\n## Controller间通信\n-----\n### angular控制器通信的方式\n- 1.利用作用域继承的方式\n即子控制器继承父控制器中的内容。\n- 2.基于事件的方式\n即$on,$emit,$boardcast这三种方式。\n- 3.服务方式\n写一个服务的单例然后通过注入来使用。\n\n### 利用作用域的继承方式\n作用域的继承是基于javascript的原型继承方式。\n- 当作用域上面的值为基本类型的时候，修改父作用域上面的值会影响到子作用域，修改子作用域只会影响子作用域的值，不会影响父作用域上面的值\n- 作用域上的值为对象（引用类型），任何一方的修改都能影响另一方\n\n### 基于事件的方式\nAngularjs为在scope中为我们提供了冒泡和隧道机制。\n- $broadcast会把事件广播给所有子级以下的作用域\n- $emit则会将事件冒泡传递给父级以上的作用域\n- $on则是angularjs的事件注册函数，表示事件监听\n> 兄弟控制间进行通信：\n> 兄弟控制中向父作用域触发一个事件，然后在父作用域中监听事件，再广播给子作用域。\n\n### angular服务的方式\nangular服务中生成一个对象，该对象就可以利用依赖注入的方式在所有的控制器中共享。\n\n### 参考\n[《AngularJS控制器controller如何通信？》](https://segmentfault.com/a/1190000000639592)\n\n## 结束语\n-----\n路由参数的传递以及控制器直接的通信，配合使用能获得更多的功能呢。","slug":"angular-note-10-route-and-controller-conmunitaion","published":1,"updated":"2016-07-29T13:10:58.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cirrwvo6r002938l518fa61pk","content":"<p>最近的一个项目使用AngularJS(v1.2.6)作为前端的框架，《Angular使用笔记》系列用于记录过程中的一些使用和解决方法。<br>本文记录使用有关路由以及控制器间通信的过程。<br><a id=\"more\"></a></p>\n<h2 id=\"ngRoute\"><a href=\"#ngRoute\" class=\"headerlink\" title=\"ngRoute\"></a>ngRoute</h2><hr>\n<p>前面篇章我们已经讲述过路由的简单使用方法，这里我们将对路由传参等进行更详细的介绍。</p>\n<h3 id=\"ngRoute包括的内容\"><a href=\"#ngRoute包括的内容\" class=\"headerlink\" title=\"ngRoute包括的内容\"></a>ngRoute包括的内容</h3><p>ng的路由机制是靠ngRoute提供的，通过hash和history两种方式实现了路由，可以检测浏览器是否支持history来灵活调用相应的方式。</p>\n<ul>\n<li>服务$routeProvider用来定义一个路由表，即地址栏与视图模板的映射</li>\n<li>服务$routeParams保存了地址栏中的参数，例如{id : 1, name : ‘tom’}</li>\n<li>服务$route完成路由匹配，并且提供路由相关的属性访问及事件，如访问当前路由对应的controller</li>\n<li>指令ngView用来在主视图中指定加载子视图的区域<br>ng-view的实现原理，是根据路由的切换，动态编译html模板——$compile(html)(scope)</li>\n</ul>\n<p>以上内容再加上$location服务，则可实现一个单页面应用。</p>\n<h3 id=\"routeProvider\"><a href=\"#routeProvider\" class=\"headerlink\" title=\"$routeProvider\"></a>$routeProvider</h3><p>$routeProvider服务提供两种方法：</p>\n<ul>\n<li>when()：配置路径和参数<ul>\n<li>when的第二个参数<ul>\n<li>controller： 对应路径的控制器函数，或者名称</li>\n<li>controllerAs： 给控制器起个别名</li>\n<li>template： 对应路径的页面模板，会出现在ng-view处</li>\n<li>templateUrl： 对应模板的路径</li>\n<li>resolve： 该属性会以键值对对象的形式，给路由相关的控制器绑定服务或者值。然后把执行的结果值或者对应的服务引用，注入到控制器中。如果resolve中是一个promise对象，那么会等它执行成功后，才注入到控制器中，此时控制器会等待resolve中的执行结果</li>\n<li>redirectTo：重定向地址</li>\n<li>reloadOnSearch：设置是否在只有地址改变时，才加载对应的模板;search和params改变都不会加载模板</li>\n<li>caseInsensitiveMatch ：路径区分大小写</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">resolve: &#123;</span><br><span class=\"line\">  <span class=\"comment\">//设置三秒的延迟Promise，该页面在3秒后才会加载成功</span></span><br><span class=\"line\">  delay: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">$q, $timeout</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> delay = $q.defer();</span><br><span class=\"line\">    $timeout(delay.resolve, <span class=\"number\">3000</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> delay.promise;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>otherwise：配置其他的路径跳转，即default</li>\n</ul>\n<h3 id=\"route\"><a href=\"#route\" class=\"headerlink\" title=\"$route\"></a>$route</h3><ul>\n<li>$route.reload()方法可以实现刷新路由</li>\n<li>$route服务提供了current和routes属性</li>\n<li>$route服务提供以下几个事件：<br>使用$on来调用事件<ul>\n<li>$routeChangeStart 路由发生变化时被触发</li>\n<li>$routeChangesSuccess 路由成功时被触发</li>\n<li>$routeChangeError 路由异常时被触发</li>\n<li>$routeUpdate 路由更新时被触发</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"routeParams\"><a href=\"#routeParams\" class=\"headerlink\" title=\"$routeParams\"></a>$routeParams</h3><p>$routeParams服务可获取路由中的参数，当路由成功后才能获取。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.when(<span class=\"string\">'/example/:id'</span>,&#123;&#125;) <span class=\"comment\">//设置路由参数id</span></span><br><span class=\"line\"><span class=\"comment\">//控制器中获取参数</span></span><br><span class=\"line\">app.controller(<span class=\"string\">'ExampleController'</span>, [<span class=\"string\">'$routeParams'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">$routeParams</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> id = $routeParams.id;</span><br><span class=\"line\">    <span class=\"comment\">//使用id获取相关id值</span></span><br><span class=\"line\">&#125;]);</span><br></pre></td></tr></table></figure></p>\n<ul>\n<li>$routeParams和$route.current.params<blockquote>\n<p>$route.current.params在路由发生变化时会改变<br>$routeParams只有当路由成功时才会改变<br>这里有个很好的<a href=\"https://docs.angularjs.org/api/ngRoute/service/$route#example\" target=\"_blank\" rel=\"external\">例子</a></p>\n</blockquote>\n</li>\n</ul>\n<h3 id=\"location\"><a href=\"#location\" class=\"headerlink\" title=\"$location\"></a>$location</h3><p>$location服务解析地址栏中的URL（基于window.location），可在应用代码中获取到。</p>\n<ul>\n<li>暴露当前地址栏的URL，可获取并监听或改变URL</li>\n<li>当出现以下情况时同步URL<ul>\n<li>改变地址栏</li>\n<li>点击了后退按钮（或者点击了历史链接）</li>\n<li>点击了一个链接</li>\n</ul>\n</li>\n<li>可用（protocol, host, port, path, search, hash）获取URL对象的具体内容</li>\n</ul>\n<h3 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h3><ul>\n<li><a href=\"http://www.2cto.com/kf/201312/265979.html\" target=\"_blank\" rel=\"external\">《走进AngularJs(八) ng的路由机制》</a></li>\n<li><a href=\"http://www.cnblogs.com/xing901022/p/5154358.html?utm_source=tuicool&amp;utm_medium=referral\" target=\"_blank\" rel=\"external\">《AngularJs ng-route路由详解》</a></li>\n<li><a href=\"http://www.angularjs.cn/A00M\" target=\"_blank\" rel=\"external\">《AngularJS开发指南27：使用$location》</a></li>\n</ul>\n<h2 id=\"Controller间通信\"><a href=\"#Controller间通信\" class=\"headerlink\" title=\"Controller间通信\"></a>Controller间通信</h2><hr>\n<h3 id=\"angular控制器通信的方式\"><a href=\"#angular控制器通信的方式\" class=\"headerlink\" title=\"angular控制器通信的方式\"></a>angular控制器通信的方式</h3><ul>\n<li>1.利用作用域继承的方式<br>即子控制器继承父控制器中的内容。</li>\n<li>2.基于事件的方式<br>即$on,$emit,$boardcast这三种方式。</li>\n<li>3.服务方式<br>写一个服务的单例然后通过注入来使用。</li>\n</ul>\n<h3 id=\"利用作用域的继承方式\"><a href=\"#利用作用域的继承方式\" class=\"headerlink\" title=\"利用作用域的继承方式\"></a>利用作用域的继承方式</h3><p>作用域的继承是基于javascript的原型继承方式。</p>\n<ul>\n<li>当作用域上面的值为基本类型的时候，修改父作用域上面的值会影响到子作用域，修改子作用域只会影响子作用域的值，不会影响父作用域上面的值</li>\n<li>作用域上的值为对象（引用类型），任何一方的修改都能影响另一方</li>\n</ul>\n<h3 id=\"基于事件的方式\"><a href=\"#基于事件的方式\" class=\"headerlink\" title=\"基于事件的方式\"></a>基于事件的方式</h3><p>Angularjs为在scope中为我们提供了冒泡和隧道机制。</p>\n<ul>\n<li>$broadcast会把事件广播给所有子级以下的作用域</li>\n<li>$emit则会将事件冒泡传递给父级以上的作用域</li>\n<li>$on则是angularjs的事件注册函数，表示事件监听<blockquote>\n<p>兄弟控制间进行通信：<br>兄弟控制中向父作用域触发一个事件，然后在父作用域中监听事件，再广播给子作用域。</p>\n</blockquote>\n</li>\n</ul>\n<h3 id=\"angular服务的方式\"><a href=\"#angular服务的方式\" class=\"headerlink\" title=\"angular服务的方式\"></a>angular服务的方式</h3><p>angular服务中生成一个对象，该对象就可以利用依赖注入的方式在所有的控制器中共享。</p>\n<h3 id=\"参考-1\"><a href=\"#参考-1\" class=\"headerlink\" title=\"参考\"></a>参考</h3><p><a href=\"https://segmentfault.com/a/1190000000639592\" target=\"_blank\" rel=\"external\">《AngularJS控制器controller如何通信？》</a></p>\n<h2 id=\"结束语\"><a href=\"#结束语\" class=\"headerlink\" title=\"结束语\"></a>结束语</h2><hr>\n<p>路由参数的传递以及控制器直接的通信，配合使用能获得更多的功能呢。</p>\n","excerpt":"<p>最近的一个项目使用AngularJS(v1.2.6)作为前端的框架，《Angular使用笔记》系列用于记录过程中的一些使用和解决方法。<br>本文记录使用有关路由以及控制器间通信的过程。<br>","more":"</p>\n<h2 id=\"ngRoute\"><a href=\"#ngRoute\" class=\"headerlink\" title=\"ngRoute\"></a>ngRoute</h2><hr>\n<p>前面篇章我们已经讲述过路由的简单使用方法，这里我们将对路由传参等进行更详细的介绍。</p>\n<h3 id=\"ngRoute包括的内容\"><a href=\"#ngRoute包括的内容\" class=\"headerlink\" title=\"ngRoute包括的内容\"></a>ngRoute包括的内容</h3><p>ng的路由机制是靠ngRoute提供的，通过hash和history两种方式实现了路由，可以检测浏览器是否支持history来灵活调用相应的方式。</p>\n<ul>\n<li>服务$routeProvider用来定义一个路由表，即地址栏与视图模板的映射</li>\n<li>服务$routeParams保存了地址栏中的参数，例如{id : 1, name : ‘tom’}</li>\n<li>服务$route完成路由匹配，并且提供路由相关的属性访问及事件，如访问当前路由对应的controller</li>\n<li>指令ngView用来在主视图中指定加载子视图的区域<br>ng-view的实现原理，是根据路由的切换，动态编译html模板——$compile(html)(scope)</li>\n</ul>\n<p>以上内容再加上$location服务，则可实现一个单页面应用。</p>\n<h3 id=\"routeProvider\"><a href=\"#routeProvider\" class=\"headerlink\" title=\"$routeProvider\"></a>$routeProvider</h3><p>$routeProvider服务提供两种方法：</p>\n<ul>\n<li>when()：配置路径和参数<ul>\n<li>when的第二个参数<ul>\n<li>controller： 对应路径的控制器函数，或者名称</li>\n<li>controllerAs： 给控制器起个别名</li>\n<li>template： 对应路径的页面模板，会出现在ng-view处</li>\n<li>templateUrl： 对应模板的路径</li>\n<li>resolve： 该属性会以键值对对象的形式，给路由相关的控制器绑定服务或者值。然后把执行的结果值或者对应的服务引用，注入到控制器中。如果resolve中是一个promise对象，那么会等它执行成功后，才注入到控制器中，此时控制器会等待resolve中的执行结果</li>\n<li>redirectTo：重定向地址</li>\n<li>reloadOnSearch：设置是否在只有地址改变时，才加载对应的模板;search和params改变都不会加载模板</li>\n<li>caseInsensitiveMatch ：路径区分大小写</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">resolve: &#123;</span><br><span class=\"line\">  <span class=\"comment\">//设置三秒的延迟Promise，该页面在3秒后才会加载成功</span></span><br><span class=\"line\">  delay: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">$q, $timeout</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> delay = $q.defer();</span><br><span class=\"line\">    $timeout(delay.resolve, <span class=\"number\">3000</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> delay.promise;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>otherwise：配置其他的路径跳转，即default</li>\n</ul>\n<h3 id=\"route\"><a href=\"#route\" class=\"headerlink\" title=\"$route\"></a>$route</h3><ul>\n<li>$route.reload()方法可以实现刷新路由</li>\n<li>$route服务提供了current和routes属性</li>\n<li>$route服务提供以下几个事件：<br>使用$on来调用事件<ul>\n<li>$routeChangeStart 路由发生变化时被触发</li>\n<li>$routeChangesSuccess 路由成功时被触发</li>\n<li>$routeChangeError 路由异常时被触发</li>\n<li>$routeUpdate 路由更新时被触发</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"routeParams\"><a href=\"#routeParams\" class=\"headerlink\" title=\"$routeParams\"></a>$routeParams</h3><p>$routeParams服务可获取路由中的参数，当路由成功后才能获取。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.when(<span class=\"string\">'/example/:id'</span>,&#123;&#125;) <span class=\"comment\">//设置路由参数id</span></span><br><span class=\"line\"><span class=\"comment\">//控制器中获取参数</span></span><br><span class=\"line\">app.controller(<span class=\"string\">'ExampleController'</span>, [<span class=\"string\">'$routeParams'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">$routeParams</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> id = $routeParams.id;</span><br><span class=\"line\">    <span class=\"comment\">//使用id获取相关id值</span></span><br><span class=\"line\">&#125;]);</span><br></pre></td></tr></table></figure></p>\n<ul>\n<li>$routeParams和$route.current.params<blockquote>\n<p>$route.current.params在路由发生变化时会改变<br>$routeParams只有当路由成功时才会改变<br>这里有个很好的<a href=\"https://docs.angularjs.org/api/ngRoute/service/$route#example\">例子</a></p>\n</blockquote>\n</li>\n</ul>\n<h3 id=\"location\"><a href=\"#location\" class=\"headerlink\" title=\"$location\"></a>$location</h3><p>$location服务解析地址栏中的URL（基于window.location），可在应用代码中获取到。</p>\n<ul>\n<li>暴露当前地址栏的URL，可获取并监听或改变URL</li>\n<li>当出现以下情况时同步URL<ul>\n<li>改变地址栏</li>\n<li>点击了后退按钮（或者点击了历史链接）</li>\n<li>点击了一个链接</li>\n</ul>\n</li>\n<li>可用（protocol, host, port, path, search, hash）获取URL对象的具体内容</li>\n</ul>\n<h3 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h3><ul>\n<li><a href=\"http://www.2cto.com/kf/201312/265979.html\">《走进AngularJs(八) ng的路由机制》</a></li>\n<li><a href=\"http://www.cnblogs.com/xing901022/p/5154358.html?utm_source=tuicool&amp;utm_medium=referral\">《AngularJs ng-route路由详解》</a></li>\n<li><a href=\"http://www.angularjs.cn/A00M\">《AngularJS开发指南27：使用$location》</a></li>\n</ul>\n<h2 id=\"Controller间通信\"><a href=\"#Controller间通信\" class=\"headerlink\" title=\"Controller间通信\"></a>Controller间通信</h2><hr>\n<h3 id=\"angular控制器通信的方式\"><a href=\"#angular控制器通信的方式\" class=\"headerlink\" title=\"angular控制器通信的方式\"></a>angular控制器通信的方式</h3><ul>\n<li>1.利用作用域继承的方式<br>即子控制器继承父控制器中的内容。</li>\n<li>2.基于事件的方式<br>即$on,$emit,$boardcast这三种方式。</li>\n<li>3.服务方式<br>写一个服务的单例然后通过注入来使用。</li>\n</ul>\n<h3 id=\"利用作用域的继承方式\"><a href=\"#利用作用域的继承方式\" class=\"headerlink\" title=\"利用作用域的继承方式\"></a>利用作用域的继承方式</h3><p>作用域的继承是基于javascript的原型继承方式。</p>\n<ul>\n<li>当作用域上面的值为基本类型的时候，修改父作用域上面的值会影响到子作用域，修改子作用域只会影响子作用域的值，不会影响父作用域上面的值</li>\n<li>作用域上的值为对象（引用类型），任何一方的修改都能影响另一方</li>\n</ul>\n<h3 id=\"基于事件的方式\"><a href=\"#基于事件的方式\" class=\"headerlink\" title=\"基于事件的方式\"></a>基于事件的方式</h3><p>Angularjs为在scope中为我们提供了冒泡和隧道机制。</p>\n<ul>\n<li>$broadcast会把事件广播给所有子级以下的作用域</li>\n<li>$emit则会将事件冒泡传递给父级以上的作用域</li>\n<li>$on则是angularjs的事件注册函数，表示事件监听<blockquote>\n<p>兄弟控制间进行通信：<br>兄弟控制中向父作用域触发一个事件，然后在父作用域中监听事件，再广播给子作用域。</p>\n</blockquote>\n</li>\n</ul>\n<h3 id=\"angular服务的方式\"><a href=\"#angular服务的方式\" class=\"headerlink\" title=\"angular服务的方式\"></a>angular服务的方式</h3><p>angular服务中生成一个对象，该对象就可以利用依赖注入的方式在所有的控制器中共享。</p>\n<h3 id=\"参考-1\"><a href=\"#参考-1\" class=\"headerlink\" title=\"参考\"></a>参考</h3><p><a href=\"https://segmentfault.com/a/1190000000639592\">《AngularJS控制器controller如何通信？》</a></p>\n<h2 id=\"结束语\"><a href=\"#结束语\" class=\"headerlink\" title=\"结束语\"></a>结束语</h2><hr>\n<p>路由参数的传递以及控制器直接的通信，配合使用能获得更多的功能呢。</p>"},{"title":"Angular使用笔记12-Karma的一些配置项","date":"2016-07-31T02:32:41.000Z","_content":"最近的一个项目使用AngularJS(v1.2.6)作为前端的框架，《Angular使用笔记》系列用于记录过程中的一些使用和解决方法。\n本文记录Angular中会使用到Karma的一些配置项。\n<!--more-->\n\n## Karma基本配置\n-----\n### karma.conf.js\n这里我们先直接查看yaomen工程生成的配置文件：\n``` js\nmodule.exports = function(config) {\n  'use strict';\n\n  config.set({\n    // 是否启动热部署，且当文件改变时自动进行测试\n    autoWatch: true,\n\n    // 解析文件和运行的根地址\n    basePath: '../',\n\n    // 使用的测试框架，如jasmine/mocha/qunit/...\n    // 以及其他框架，如requirejs/chai/sinon/...\n    frameworks: [\n      'jasmine'\n    ],\n\n    // 在浏览器中加载的文件/模式\n    files: [\n   'app/bower_components/angular/angular.js',\n   'app/bower_components/angular-mocks/angular-mocks.js',\n   'app/scripts/*.js',\n   'app/scripts/**/*.js',\n   //'test/mock/**/*.js',\n   'test/spec/**/*.js',\n   'app/bower_components/angular-resource/angular-resource.js',\n   'app/bower_components/angular-cookies/angular-cookies.js',\n   'app/bower_components/angular-sanitize/angular-sanitize.js',\n   'app/bower_components/angular-route/angular-route.js'\n    ],\n\n    // 运行的文件/模式\n    exclude: [\n    ],\n\n    // 服务端口\n    port: 8080,\n\n    // 启动的浏览器，可选如下:\n    // - Chrome\n    // - ChromeCanary\n    // - Firefox\n    // - Opera\n    // - Safari (only Mac)\n    // - PhantomJS\n    // - IE (only Windows)\n    browsers: [\n      'PhantomJS'\n    ],\n\n    // 启用的插件\n    plugins: [\n      'karma-phantomjs-launcher',\n      'karma-jasmine'\n    ],\n\n    // 持续积累模式\n    // 若为true捕获浏览器运行测试然后离开\n    singleRun: false,\n\n\t// 输出的日志和报告是启用颜色标注\n    colors: true,\n\n    // 日志的级别\n    // 可使用的值: LOG_DISABLE || LOG_ERROR || LOG_WARN || LOG_INFO || LOG_DEBUG\n    logLevel: config.LOG_INFO,\n\n    // 如果你在使用grunt服务进行测试，可取消注释以下的代码\n    // proxies: {\n    //   '/': 'http://localhost:9000/'\n    // },\n    // 根路径，防止与站点根目录冲突\n    // urlRoot: '_karma_'\n  });\n};\n```\n\n## 完善Angular单元测试\n-----\n\n### 优化测试报告\n上一节我们已经简单说过控制器的单元测试了，运行结果如下：\n![image](http://o905ne85q.bkt.clouddn.com/F184.tmp.png)\n这样的结果显示并不是很清晰，我们下面将使用mocha的测试报告，这里使用插件[karma-mocha-reporter](https://github.com/litixsoft/karma-mocha-reporter)。\n- 安装依赖\n\n``` cmd\nnpm install karma-mocha-reporter --save-dev\n```\n- karma.conf.js配置\n我们需要在karma配置文件中添加相关的配置：\n\n``` js\n// 使用的测试结果报告\n// 可选的值: 'dots', 'progress', 'mocha'\nreporters: ['mocha'],\n// 添加插件\nplugins: [\n\t'karma-phantomjs-launcher',\n\t'karma-jasmine'，\n\t'karma-mocha-reporter'\n],\n```\n\n现在运行我们的测试，可以看到测试结果如下：\n![image](http://o905ne85q.bkt.clouddn.com/36EE.tmp.png)\n这样的测试报告会比之前的清晰多了呢。\n\n### 测试覆盖率\nkarma的插件[karma-coverage](https://github.com/karma-runner/karma-coverage)提供了测试代码覆盖率的支持。\n- 安装依赖\n\n``` cmd\nnpm install karma karma-coverage --save-dev\n```\n- karma.conf.js配置\n我们需要在karma配置文件中添加相关的配置：\n\n``` js\n// 激活覆盖率报告器\nreporters: ['mocha', 'coverage'],\n// 配置预处理器\npreprocessors: {\n\t// 需要统计测试覆盖率的源文件\n\t// 不要添加测试文件和库文件\n\t'app/scripts/*.js': ['coverage'],\n\t'app/scripts/**/*.js': ['coverage']\n},\n// 配置报告选项\ncoverageReporter: {\n\ttype : 'html',\n\tdir : 'test/coverage/' // 生成报告的位置\n},\n// 添加插件\nplugins: [\n\t'karma-coverage',\n\t'karma-phantomjs-launcher',\n\t'karma-jasmine'，\n\t'karma-mocha-reporter'\n],\n```\n运行`grunt test`进行测试之后，会自动生成代码覆盖率测试报告：\n![image](http://o905ne85q.bkt.clouddn.com/40E2.tmp.png)\n生成的目录如下：\n![image](http://o905ne85q.bkt.clouddn.com/80EB.tmp.png)\n\n### 添加Chrome浏览器测试\n如果需要增加对不同浏览器的测试，需要按照对应的插件，以及进行一些配置。\n这里我们介绍一下添加Chrome浏览器测试的步骤，这里使用[karma-chrome-launcher](https://github.com/karma-runner/karma-chrome-launcher)。\n- 安装依赖\n\n``` cmd\nnpm install karma-chrome-launcher --save-dev\n```\n- karma.conf.js配置\n我们需要在karma配置文件中添加相关的配置：\n\n``` js\n// 添加测试的浏览器\nbrowsers: [\n\t'PhantomJS',\n\t'Chrome'\n],\n// 添加插件\nplugins: [\n\t'karma-phantomjs-launcher',\n\t'karma-chrome-launcher',\n\t'karma-jasmine'，\n\t'karma-mocha-reporter'\n],\n```\n测试中，chrome浏览器会自动打开并运行测试，完毕之后自动关闭。我们可以看到coverage中也新增了Chrome的测试覆盖率报告。\n![image](http://o905ne85q.bkt.clouddn.com/4B40.tmp.png)\n\n## 结束语\n-----\n这里我们介绍了一些Karma相关的配置，karma.conf.js这个文件也需要耐心折腾呢。不过对核心代码进行单元测试的确是个不错的选择，这样我们就能放心去优化代码，知道产品的功能是否受损了呢。\n[此处查看项目代码（仅包含test部分）](https://github.com/godbasin/godbasin.github.io/tree/blog-codes/angular-notes/12-karma-config)\n","source":"_posts/angular-note-12-karma-config.md","raw":"---\ntitle: Angular使用笔记12-Karma的一些配置项\ndate: 2016-07-31 10:32:41\ncategories: angular混搭\ntags: 笔记\n---\n最近的一个项目使用AngularJS(v1.2.6)作为前端的框架，《Angular使用笔记》系列用于记录过程中的一些使用和解决方法。\n本文记录Angular中会使用到Karma的一些配置项。\n<!--more-->\n\n## Karma基本配置\n-----\n### karma.conf.js\n这里我们先直接查看yaomen工程生成的配置文件：\n``` js\nmodule.exports = function(config) {\n  'use strict';\n\n  config.set({\n    // 是否启动热部署，且当文件改变时自动进行测试\n    autoWatch: true,\n\n    // 解析文件和运行的根地址\n    basePath: '../',\n\n    // 使用的测试框架，如jasmine/mocha/qunit/...\n    // 以及其他框架，如requirejs/chai/sinon/...\n    frameworks: [\n      'jasmine'\n    ],\n\n    // 在浏览器中加载的文件/模式\n    files: [\n   'app/bower_components/angular/angular.js',\n   'app/bower_components/angular-mocks/angular-mocks.js',\n   'app/scripts/*.js',\n   'app/scripts/**/*.js',\n   //'test/mock/**/*.js',\n   'test/spec/**/*.js',\n   'app/bower_components/angular-resource/angular-resource.js',\n   'app/bower_components/angular-cookies/angular-cookies.js',\n   'app/bower_components/angular-sanitize/angular-sanitize.js',\n   'app/bower_components/angular-route/angular-route.js'\n    ],\n\n    // 运行的文件/模式\n    exclude: [\n    ],\n\n    // 服务端口\n    port: 8080,\n\n    // 启动的浏览器，可选如下:\n    // - Chrome\n    // - ChromeCanary\n    // - Firefox\n    // - Opera\n    // - Safari (only Mac)\n    // - PhantomJS\n    // - IE (only Windows)\n    browsers: [\n      'PhantomJS'\n    ],\n\n    // 启用的插件\n    plugins: [\n      'karma-phantomjs-launcher',\n      'karma-jasmine'\n    ],\n\n    // 持续积累模式\n    // 若为true捕获浏览器运行测试然后离开\n    singleRun: false,\n\n\t// 输出的日志和报告是启用颜色标注\n    colors: true,\n\n    // 日志的级别\n    // 可使用的值: LOG_DISABLE || LOG_ERROR || LOG_WARN || LOG_INFO || LOG_DEBUG\n    logLevel: config.LOG_INFO,\n\n    // 如果你在使用grunt服务进行测试，可取消注释以下的代码\n    // proxies: {\n    //   '/': 'http://localhost:9000/'\n    // },\n    // 根路径，防止与站点根目录冲突\n    // urlRoot: '_karma_'\n  });\n};\n```\n\n## 完善Angular单元测试\n-----\n\n### 优化测试报告\n上一节我们已经简单说过控制器的单元测试了，运行结果如下：\n![image](http://o905ne85q.bkt.clouddn.com/F184.tmp.png)\n这样的结果显示并不是很清晰，我们下面将使用mocha的测试报告，这里使用插件[karma-mocha-reporter](https://github.com/litixsoft/karma-mocha-reporter)。\n- 安装依赖\n\n``` cmd\nnpm install karma-mocha-reporter --save-dev\n```\n- karma.conf.js配置\n我们需要在karma配置文件中添加相关的配置：\n\n``` js\n// 使用的测试结果报告\n// 可选的值: 'dots', 'progress', 'mocha'\nreporters: ['mocha'],\n// 添加插件\nplugins: [\n\t'karma-phantomjs-launcher',\n\t'karma-jasmine'，\n\t'karma-mocha-reporter'\n],\n```\n\n现在运行我们的测试，可以看到测试结果如下：\n![image](http://o905ne85q.bkt.clouddn.com/36EE.tmp.png)\n这样的测试报告会比之前的清晰多了呢。\n\n### 测试覆盖率\nkarma的插件[karma-coverage](https://github.com/karma-runner/karma-coverage)提供了测试代码覆盖率的支持。\n- 安装依赖\n\n``` cmd\nnpm install karma karma-coverage --save-dev\n```\n- karma.conf.js配置\n我们需要在karma配置文件中添加相关的配置：\n\n``` js\n// 激活覆盖率报告器\nreporters: ['mocha', 'coverage'],\n// 配置预处理器\npreprocessors: {\n\t// 需要统计测试覆盖率的源文件\n\t// 不要添加测试文件和库文件\n\t'app/scripts/*.js': ['coverage'],\n\t'app/scripts/**/*.js': ['coverage']\n},\n// 配置报告选项\ncoverageReporter: {\n\ttype : 'html',\n\tdir : 'test/coverage/' // 生成报告的位置\n},\n// 添加插件\nplugins: [\n\t'karma-coverage',\n\t'karma-phantomjs-launcher',\n\t'karma-jasmine'，\n\t'karma-mocha-reporter'\n],\n```\n运行`grunt test`进行测试之后，会自动生成代码覆盖率测试报告：\n![image](http://o905ne85q.bkt.clouddn.com/40E2.tmp.png)\n生成的目录如下：\n![image](http://o905ne85q.bkt.clouddn.com/80EB.tmp.png)\n\n### 添加Chrome浏览器测试\n如果需要增加对不同浏览器的测试，需要按照对应的插件，以及进行一些配置。\n这里我们介绍一下添加Chrome浏览器测试的步骤，这里使用[karma-chrome-launcher](https://github.com/karma-runner/karma-chrome-launcher)。\n- 安装依赖\n\n``` cmd\nnpm install karma-chrome-launcher --save-dev\n```\n- karma.conf.js配置\n我们需要在karma配置文件中添加相关的配置：\n\n``` js\n// 添加测试的浏览器\nbrowsers: [\n\t'PhantomJS',\n\t'Chrome'\n],\n// 添加插件\nplugins: [\n\t'karma-phantomjs-launcher',\n\t'karma-chrome-launcher',\n\t'karma-jasmine'，\n\t'karma-mocha-reporter'\n],\n```\n测试中，chrome浏览器会自动打开并运行测试，完毕之后自动关闭。我们可以看到coverage中也新增了Chrome的测试覆盖率报告。\n![image](http://o905ne85q.bkt.clouddn.com/4B40.tmp.png)\n\n## 结束语\n-----\n这里我们介绍了一些Karma相关的配置，karma.conf.js这个文件也需要耐心折腾呢。不过对核心代码进行单元测试的确是个不错的选择，这样我们就能放心去优化代码，知道产品的功能是否受损了呢。\n[此处查看项目代码（仅包含test部分）](https://github.com/godbasin/godbasin.github.io/tree/blog-codes/angular-notes/12-karma-config)\n","slug":"angular-note-12-karma-config","published":1,"updated":"2016-07-31T02:34:30.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cirrwvo6w002c38l5dqj5048n","content":"<p>最近的一个项目使用AngularJS(v1.2.6)作为前端的框架，《Angular使用笔记》系列用于记录过程中的一些使用和解决方法。<br>本文记录Angular中会使用到Karma的一些配置项。<br><a id=\"more\"></a></p>\n<h2 id=\"Karma基本配置\"><a href=\"#Karma基本配置\" class=\"headerlink\" title=\"Karma基本配置\"></a>Karma基本配置</h2><hr>\n<h3 id=\"karma-conf-js\"><a href=\"#karma-conf-js\" class=\"headerlink\" title=\"karma.conf.js\"></a>karma.conf.js</h3><p>这里我们先直接查看yaomen工程生成的配置文件：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">module</span>.exports = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">config</span>) </span>&#123;</span><br><span class=\"line\"><span class=\"meta\">  'use strict'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  config.set(&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 是否启动热部署，且当文件改变时自动进行测试</span></span><br><span class=\"line\">    autoWatch: <span class=\"literal\">true</span>,</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 解析文件和运行的根地址</span></span><br><span class=\"line\">    basePath: <span class=\"string\">'../'</span>,</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 使用的测试框架，如jasmine/mocha/qunit/...</span></span><br><span class=\"line\">    <span class=\"comment\">// 以及其他框架，如requirejs/chai/sinon/...</span></span><br><span class=\"line\">    frameworks: [</span><br><span class=\"line\">      <span class=\"string\">'jasmine'</span></span><br><span class=\"line\">    ],</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 在浏览器中加载的文件/模式</span></span><br><span class=\"line\">    files: [</span><br><span class=\"line\">   <span class=\"string\">'app/bower_components/angular/angular.js'</span>,</span><br><span class=\"line\">   <span class=\"string\">'app/bower_components/angular-mocks/angular-mocks.js'</span>,</span><br><span class=\"line\">   <span class=\"string\">'app/scripts/*.js'</span>,</span><br><span class=\"line\">   <span class=\"string\">'app/scripts/**/*.js'</span>,</span><br><span class=\"line\">   <span class=\"comment\">//'test/mock/**/*.js',</span></span><br><span class=\"line\">   <span class=\"string\">'test/spec/**/*.js'</span>,</span><br><span class=\"line\">   <span class=\"string\">'app/bower_components/angular-resource/angular-resource.js'</span>,</span><br><span class=\"line\">   <span class=\"string\">'app/bower_components/angular-cookies/angular-cookies.js'</span>,</span><br><span class=\"line\">   <span class=\"string\">'app/bower_components/angular-sanitize/angular-sanitize.js'</span>,</span><br><span class=\"line\">   <span class=\"string\">'app/bower_components/angular-route/angular-route.js'</span></span><br><span class=\"line\">    ],</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 运行的文件/模式</span></span><br><span class=\"line\">    exclude: [</span><br><span class=\"line\">    ],</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 服务端口</span></span><br><span class=\"line\">    port: <span class=\"number\">8080</span>,</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 启动的浏览器，可选如下:</span></span><br><span class=\"line\">    <span class=\"comment\">// - Chrome</span></span><br><span class=\"line\">    <span class=\"comment\">// - ChromeCanary</span></span><br><span class=\"line\">    <span class=\"comment\">// - Firefox</span></span><br><span class=\"line\">    <span class=\"comment\">// - Opera</span></span><br><span class=\"line\">    <span class=\"comment\">// - Safari (only Mac)</span></span><br><span class=\"line\">    <span class=\"comment\">// - PhantomJS</span></span><br><span class=\"line\">    <span class=\"comment\">// - IE (only Windows)</span></span><br><span class=\"line\">    browsers: [</span><br><span class=\"line\">      <span class=\"string\">'PhantomJS'</span></span><br><span class=\"line\">    ],</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 启用的插件</span></span><br><span class=\"line\">    plugins: [</span><br><span class=\"line\">      <span class=\"string\">'karma-phantomjs-launcher'</span>,</span><br><span class=\"line\">      <span class=\"string\">'karma-jasmine'</span></span><br><span class=\"line\">    ],</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 持续积累模式</span></span><br><span class=\"line\">    <span class=\"comment\">// 若为true捕获浏览器运行测试然后离开</span></span><br><span class=\"line\">    singleRun: <span class=\"literal\">false</span>,</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 输出的日志和报告是启用颜色标注</span></span><br><span class=\"line\">    colors: <span class=\"literal\">true</span>,</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 日志的级别</span></span><br><span class=\"line\">    <span class=\"comment\">// 可使用的值: LOG_DISABLE || LOG_ERROR || LOG_WARN || LOG_INFO || LOG_DEBUG</span></span><br><span class=\"line\">    logLevel: config.LOG_INFO,</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 如果你在使用grunt服务进行测试，可取消注释以下的代码</span></span><br><span class=\"line\">    <span class=\"comment\">// proxies: &#123;</span></span><br><span class=\"line\">    <span class=\"comment\">//   '/': 'http://localhost:9000/'</span></span><br><span class=\"line\">    <span class=\"comment\">// &#125;,</span></span><br><span class=\"line\">    <span class=\"comment\">// 根路径，防止与站点根目录冲突</span></span><br><span class=\"line\">    <span class=\"comment\">// urlRoot: '_karma_'</span></span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"完善Angular单元测试\"><a href=\"#完善Angular单元测试\" class=\"headerlink\" title=\"完善Angular单元测试\"></a>完善Angular单元测试</h2><hr>\n<h3 id=\"优化测试报告\"><a href=\"#优化测试报告\" class=\"headerlink\" title=\"优化测试报告\"></a>优化测试报告</h3><p>上一节我们已经简单说过控制器的单元测试了，运行结果如下：<br><img src=\"http://o905ne85q.bkt.clouddn.com/F184.tmp.png\" alt=\"image\"><br>这样的结果显示并不是很清晰，我们下面将使用mocha的测试报告，这里使用插件<a href=\"https://github.com/litixsoft/karma-mocha-reporter\" target=\"_blank\" rel=\"external\">karma-mocha-reporter</a>。</p>\n<ul>\n<li>安装依赖</li>\n</ul>\n<figure class=\"highlight cmd\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install karma-mocha-reporter --save-dev</span><br></pre></td></tr></table></figure>\n<ul>\n<li>karma.conf.js配置<br>我们需要在karma配置文件中添加相关的配置：</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 使用的测试结果报告</span></span><br><span class=\"line\"><span class=\"comment\">// 可选的值: 'dots', 'progress', 'mocha'</span></span><br><span class=\"line\">reporters: [<span class=\"string\">'mocha'</span>],</span><br><span class=\"line\"><span class=\"comment\">// 添加插件</span></span><br><span class=\"line\">plugins: [</span><br><span class=\"line\">  <span class=\"string\">'karma-phantomjs-launcher'</span>,</span><br><span class=\"line\">  <span class=\"string\">'karma-jasmine'</span>，</span><br><span class=\"line\">  <span class=\"string\">'karma-mocha-reporter'</span></span><br><span class=\"line\">],</span><br></pre></td></tr></table></figure>\n<p>现在运行我们的测试，可以看到测试结果如下：<br><img src=\"http://o905ne85q.bkt.clouddn.com/36EE.tmp.png\" alt=\"image\"><br>这样的测试报告会比之前的清晰多了呢。</p>\n<h3 id=\"测试覆盖率\"><a href=\"#测试覆盖率\" class=\"headerlink\" title=\"测试覆盖率\"></a>测试覆盖率</h3><p>karma的插件<a href=\"https://github.com/karma-runner/karma-coverage\" target=\"_blank\" rel=\"external\">karma-coverage</a>提供了测试代码覆盖率的支持。</p>\n<ul>\n<li>安装依赖</li>\n</ul>\n<figure class=\"highlight cmd\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install karma karma-coverage --save-dev</span><br></pre></td></tr></table></figure>\n<ul>\n<li>karma.conf.js配置<br>我们需要在karma配置文件中添加相关的配置：</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 激活覆盖率报告器</span></span><br><span class=\"line\">reporters: [<span class=\"string\">'mocha'</span>, <span class=\"string\">'coverage'</span>],</span><br><span class=\"line\"><span class=\"comment\">// 配置预处理器</span></span><br><span class=\"line\">preprocessors: &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 需要统计测试覆盖率的源文件</span></span><br><span class=\"line\">  <span class=\"comment\">// 不要添加测试文件和库文件</span></span><br><span class=\"line\">  <span class=\"string\">'app/scripts/*.js'</span>: [<span class=\"string\">'coverage'</span>],</span><br><span class=\"line\">  <span class=\"string\">'app/scripts/**/*.js'</span>: [<span class=\"string\">'coverage'</span>]</span><br><span class=\"line\">&#125;,</span><br><span class=\"line\"><span class=\"comment\">// 配置报告选项</span></span><br><span class=\"line\">coverageReporter: &#123;</span><br><span class=\"line\">  type : <span class=\"string\">'html'</span>,</span><br><span class=\"line\">  dir : <span class=\"string\">'test/coverage/'</span> <span class=\"comment\">// 生成报告的位置</span></span><br><span class=\"line\">&#125;,</span><br><span class=\"line\"><span class=\"comment\">// 添加插件</span></span><br><span class=\"line\">plugins: [</span><br><span class=\"line\">  <span class=\"string\">'karma-coverage'</span>,</span><br><span class=\"line\">  <span class=\"string\">'karma-phantomjs-launcher'</span>,</span><br><span class=\"line\">  <span class=\"string\">'karma-jasmine'</span>，</span><br><span class=\"line\">  <span class=\"string\">'karma-mocha-reporter'</span></span><br><span class=\"line\">],</span><br></pre></td></tr></table></figure>\n<p>运行<code>grunt test</code>进行测试之后，会自动生成代码覆盖率测试报告：<br><img src=\"http://o905ne85q.bkt.clouddn.com/40E2.tmp.png\" alt=\"image\"><br>生成的目录如下：<br><img src=\"http://o905ne85q.bkt.clouddn.com/80EB.tmp.png\" alt=\"image\"></p>\n<h3 id=\"添加Chrome浏览器测试\"><a href=\"#添加Chrome浏览器测试\" class=\"headerlink\" title=\"添加Chrome浏览器测试\"></a>添加Chrome浏览器测试</h3><p>如果需要增加对不同浏览器的测试，需要按照对应的插件，以及进行一些配置。<br>这里我们介绍一下添加Chrome浏览器测试的步骤，这里使用<a href=\"https://github.com/karma-runner/karma-chrome-launcher\" target=\"_blank\" rel=\"external\">karma-chrome-launcher</a>。</p>\n<ul>\n<li>安装依赖</li>\n</ul>\n<figure class=\"highlight cmd\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install karma-chrome-launcher --save-dev</span><br></pre></td></tr></table></figure>\n<ul>\n<li>karma.conf.js配置<br>我们需要在karma配置文件中添加相关的配置：</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 添加测试的浏览器</span></span><br><span class=\"line\">browsers: [</span><br><span class=\"line\">  <span class=\"string\">'PhantomJS'</span>,</span><br><span class=\"line\">  <span class=\"string\">'Chrome'</span></span><br><span class=\"line\">],</span><br><span class=\"line\"><span class=\"comment\">// 添加插件</span></span><br><span class=\"line\">plugins: [</span><br><span class=\"line\">  <span class=\"string\">'karma-phantomjs-launcher'</span>,</span><br><span class=\"line\">  <span class=\"string\">'karma-chrome-launcher'</span>,</span><br><span class=\"line\">  <span class=\"string\">'karma-jasmine'</span>，</span><br><span class=\"line\">  <span class=\"string\">'karma-mocha-reporter'</span></span><br><span class=\"line\">],</span><br></pre></td></tr></table></figure>\n<p>测试中，chrome浏览器会自动打开并运行测试，完毕之后自动关闭。我们可以看到coverage中也新增了Chrome的测试覆盖率报告。<br><img src=\"http://o905ne85q.bkt.clouddn.com/4B40.tmp.png\" alt=\"image\"></p>\n<h2 id=\"结束语\"><a href=\"#结束语\" class=\"headerlink\" title=\"结束语\"></a>结束语</h2><hr>\n<p>这里我们介绍了一些Karma相关的配置，karma.conf.js这个文件也需要耐心折腾呢。不过对核心代码进行单元测试的确是个不错的选择，这样我们就能放心去优化代码，知道产品的功能是否受损了呢。<br><a href=\"https://github.com/godbasin/godbasin.github.io/tree/blog-codes/angular-notes/12-karma-config\" target=\"_blank\" rel=\"external\">此处查看项目代码（仅包含test部分）</a></p>\n","excerpt":"<p>最近的一个项目使用AngularJS(v1.2.6)作为前端的框架，《Angular使用笔记》系列用于记录过程中的一些使用和解决方法。<br>本文记录Angular中会使用到Karma的一些配置项。<br>","more":"</p>\n<h2 id=\"Karma基本配置\"><a href=\"#Karma基本配置\" class=\"headerlink\" title=\"Karma基本配置\"></a>Karma基本配置</h2><hr>\n<h3 id=\"karma-conf-js\"><a href=\"#karma-conf-js\" class=\"headerlink\" title=\"karma.conf.js\"></a>karma.conf.js</h3><p>这里我们先直接查看yaomen工程生成的配置文件：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">module</span>.exports = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">config</span>) </span>&#123;</span><br><span class=\"line\"><span class=\"meta\">  'use strict'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  config.set(&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 是否启动热部署，且当文件改变时自动进行测试</span></span><br><span class=\"line\">    autoWatch: <span class=\"literal\">true</span>,</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 解析文件和运行的根地址</span></span><br><span class=\"line\">    basePath: <span class=\"string\">'../'</span>,</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 使用的测试框架，如jasmine/mocha/qunit/...</span></span><br><span class=\"line\">    <span class=\"comment\">// 以及其他框架，如requirejs/chai/sinon/...</span></span><br><span class=\"line\">    frameworks: [</span><br><span class=\"line\">      <span class=\"string\">'jasmine'</span></span><br><span class=\"line\">    ],</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 在浏览器中加载的文件/模式</span></span><br><span class=\"line\">    files: [</span><br><span class=\"line\">   <span class=\"string\">'app/bower_components/angular/angular.js'</span>,</span><br><span class=\"line\">   <span class=\"string\">'app/bower_components/angular-mocks/angular-mocks.js'</span>,</span><br><span class=\"line\">   <span class=\"string\">'app/scripts/*.js'</span>,</span><br><span class=\"line\">   <span class=\"string\">'app/scripts/**/*.js'</span>,</span><br><span class=\"line\">   <span class=\"comment\">//'test/mock/**/*.js',</span></span><br><span class=\"line\">   <span class=\"string\">'test/spec/**/*.js'</span>,</span><br><span class=\"line\">   <span class=\"string\">'app/bower_components/angular-resource/angular-resource.js'</span>,</span><br><span class=\"line\">   <span class=\"string\">'app/bower_components/angular-cookies/angular-cookies.js'</span>,</span><br><span class=\"line\">   <span class=\"string\">'app/bower_components/angular-sanitize/angular-sanitize.js'</span>,</span><br><span class=\"line\">   <span class=\"string\">'app/bower_components/angular-route/angular-route.js'</span></span><br><span class=\"line\">    ],</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 运行的文件/模式</span></span><br><span class=\"line\">    exclude: [</span><br><span class=\"line\">    ],</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 服务端口</span></span><br><span class=\"line\">    port: <span class=\"number\">8080</span>,</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 启动的浏览器，可选如下:</span></span><br><span class=\"line\">    <span class=\"comment\">// - Chrome</span></span><br><span class=\"line\">    <span class=\"comment\">// - ChromeCanary</span></span><br><span class=\"line\">    <span class=\"comment\">// - Firefox</span></span><br><span class=\"line\">    <span class=\"comment\">// - Opera</span></span><br><span class=\"line\">    <span class=\"comment\">// - Safari (only Mac)</span></span><br><span class=\"line\">    <span class=\"comment\">// - PhantomJS</span></span><br><span class=\"line\">    <span class=\"comment\">// - IE (only Windows)</span></span><br><span class=\"line\">    browsers: [</span><br><span class=\"line\">      <span class=\"string\">'PhantomJS'</span></span><br><span class=\"line\">    ],</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 启用的插件</span></span><br><span class=\"line\">    plugins: [</span><br><span class=\"line\">      <span class=\"string\">'karma-phantomjs-launcher'</span>,</span><br><span class=\"line\">      <span class=\"string\">'karma-jasmine'</span></span><br><span class=\"line\">    ],</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 持续积累模式</span></span><br><span class=\"line\">    <span class=\"comment\">// 若为true捕获浏览器运行测试然后离开</span></span><br><span class=\"line\">    singleRun: <span class=\"literal\">false</span>,</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 输出的日志和报告是启用颜色标注</span></span><br><span class=\"line\">    colors: <span class=\"literal\">true</span>,</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 日志的级别</span></span><br><span class=\"line\">    <span class=\"comment\">// 可使用的值: LOG_DISABLE || LOG_ERROR || LOG_WARN || LOG_INFO || LOG_DEBUG</span></span><br><span class=\"line\">    logLevel: config.LOG_INFO,</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 如果你在使用grunt服务进行测试，可取消注释以下的代码</span></span><br><span class=\"line\">    <span class=\"comment\">// proxies: &#123;</span></span><br><span class=\"line\">    <span class=\"comment\">//   '/': 'http://localhost:9000/'</span></span><br><span class=\"line\">    <span class=\"comment\">// &#125;,</span></span><br><span class=\"line\">    <span class=\"comment\">// 根路径，防止与站点根目录冲突</span></span><br><span class=\"line\">    <span class=\"comment\">// urlRoot: '_karma_'</span></span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"完善Angular单元测试\"><a href=\"#完善Angular单元测试\" class=\"headerlink\" title=\"完善Angular单元测试\"></a>完善Angular单元测试</h2><hr>\n<h3 id=\"优化测试报告\"><a href=\"#优化测试报告\" class=\"headerlink\" title=\"优化测试报告\"></a>优化测试报告</h3><p>上一节我们已经简单说过控制器的单元测试了，运行结果如下：<br><img src=\"http://o905ne85q.bkt.clouddn.com/F184.tmp.png\" alt=\"image\"><br>这样的结果显示并不是很清晰，我们下面将使用mocha的测试报告，这里使用插件<a href=\"https://github.com/litixsoft/karma-mocha-reporter\">karma-mocha-reporter</a>。</p>\n<ul>\n<li>安装依赖</li>\n</ul>\n<figure class=\"highlight cmd\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install karma-mocha-reporter --save-dev</span><br></pre></td></tr></table></figure>\n<ul>\n<li>karma.conf.js配置<br>我们需要在karma配置文件中添加相关的配置：</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 使用的测试结果报告</span></span><br><span class=\"line\"><span class=\"comment\">// 可选的值: 'dots', 'progress', 'mocha'</span></span><br><span class=\"line\">reporters: [<span class=\"string\">'mocha'</span>],</span><br><span class=\"line\"><span class=\"comment\">// 添加插件</span></span><br><span class=\"line\">plugins: [</span><br><span class=\"line\">  <span class=\"string\">'karma-phantomjs-launcher'</span>,</span><br><span class=\"line\">  <span class=\"string\">'karma-jasmine'</span>，</span><br><span class=\"line\">  <span class=\"string\">'karma-mocha-reporter'</span></span><br><span class=\"line\">],</span><br></pre></td></tr></table></figure>\n<p>现在运行我们的测试，可以看到测试结果如下：<br><img src=\"http://o905ne85q.bkt.clouddn.com/36EE.tmp.png\" alt=\"image\"><br>这样的测试报告会比之前的清晰多了呢。</p>\n<h3 id=\"测试覆盖率\"><a href=\"#测试覆盖率\" class=\"headerlink\" title=\"测试覆盖率\"></a>测试覆盖率</h3><p>karma的插件<a href=\"https://github.com/karma-runner/karma-coverage\">karma-coverage</a>提供了测试代码覆盖率的支持。</p>\n<ul>\n<li>安装依赖</li>\n</ul>\n<figure class=\"highlight cmd\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install karma karma-coverage --save-dev</span><br></pre></td></tr></table></figure>\n<ul>\n<li>karma.conf.js配置<br>我们需要在karma配置文件中添加相关的配置：</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 激活覆盖率报告器</span></span><br><span class=\"line\">reporters: [<span class=\"string\">'mocha'</span>, <span class=\"string\">'coverage'</span>],</span><br><span class=\"line\"><span class=\"comment\">// 配置预处理器</span></span><br><span class=\"line\">preprocessors: &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 需要统计测试覆盖率的源文件</span></span><br><span class=\"line\">  <span class=\"comment\">// 不要添加测试文件和库文件</span></span><br><span class=\"line\">  <span class=\"string\">'app/scripts/*.js'</span>: [<span class=\"string\">'coverage'</span>],</span><br><span class=\"line\">  <span class=\"string\">'app/scripts/**/*.js'</span>: [<span class=\"string\">'coverage'</span>]</span><br><span class=\"line\">&#125;,</span><br><span class=\"line\"><span class=\"comment\">// 配置报告选项</span></span><br><span class=\"line\">coverageReporter: &#123;</span><br><span class=\"line\">  type : <span class=\"string\">'html'</span>,</span><br><span class=\"line\">  dir : <span class=\"string\">'test/coverage/'</span> <span class=\"comment\">// 生成报告的位置</span></span><br><span class=\"line\">&#125;,</span><br><span class=\"line\"><span class=\"comment\">// 添加插件</span></span><br><span class=\"line\">plugins: [</span><br><span class=\"line\">  <span class=\"string\">'karma-coverage'</span>,</span><br><span class=\"line\">  <span class=\"string\">'karma-phantomjs-launcher'</span>,</span><br><span class=\"line\">  <span class=\"string\">'karma-jasmine'</span>，</span><br><span class=\"line\">  <span class=\"string\">'karma-mocha-reporter'</span></span><br><span class=\"line\">],</span><br></pre></td></tr></table></figure>\n<p>运行<code>grunt test</code>进行测试之后，会自动生成代码覆盖率测试报告：<br><img src=\"http://o905ne85q.bkt.clouddn.com/40E2.tmp.png\" alt=\"image\"><br>生成的目录如下：<br><img src=\"http://o905ne85q.bkt.clouddn.com/80EB.tmp.png\" alt=\"image\"></p>\n<h3 id=\"添加Chrome浏览器测试\"><a href=\"#添加Chrome浏览器测试\" class=\"headerlink\" title=\"添加Chrome浏览器测试\"></a>添加Chrome浏览器测试</h3><p>如果需要增加对不同浏览器的测试，需要按照对应的插件，以及进行一些配置。<br>这里我们介绍一下添加Chrome浏览器测试的步骤，这里使用<a href=\"https://github.com/karma-runner/karma-chrome-launcher\">karma-chrome-launcher</a>。</p>\n<ul>\n<li>安装依赖</li>\n</ul>\n<figure class=\"highlight cmd\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install karma-chrome-launcher --save-dev</span><br></pre></td></tr></table></figure>\n<ul>\n<li>karma.conf.js配置<br>我们需要在karma配置文件中添加相关的配置：</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 添加测试的浏览器</span></span><br><span class=\"line\">browsers: [</span><br><span class=\"line\">  <span class=\"string\">'PhantomJS'</span>,</span><br><span class=\"line\">  <span class=\"string\">'Chrome'</span></span><br><span class=\"line\">],</span><br><span class=\"line\"><span class=\"comment\">// 添加插件</span></span><br><span class=\"line\">plugins: [</span><br><span class=\"line\">  <span class=\"string\">'karma-phantomjs-launcher'</span>,</span><br><span class=\"line\">  <span class=\"string\">'karma-chrome-launcher'</span>,</span><br><span class=\"line\">  <span class=\"string\">'karma-jasmine'</span>，</span><br><span class=\"line\">  <span class=\"string\">'karma-mocha-reporter'</span></span><br><span class=\"line\">],</span><br></pre></td></tr></table></figure>\n<p>测试中，chrome浏览器会自动打开并运行测试，完毕之后自动关闭。我们可以看到coverage中也新增了Chrome的测试覆盖率报告。<br><img src=\"http://o905ne85q.bkt.clouddn.com/4B40.tmp.png\" alt=\"image\"></p>\n<h2 id=\"结束语\"><a href=\"#结束语\" class=\"headerlink\" title=\"结束语\"></a>结束语</h2><hr>\n<p>这里我们介绍了一些Karma相关的配置，karma.conf.js这个文件也需要耐心折腾呢。不过对核心代码进行单元测试的确是个不错的选择，这样我们就能放心去优化代码，知道产品的功能是否受损了呢。<br><a href=\"https://github.com/godbasin/godbasin.github.io/tree/blog-codes/angular-notes/12-karma-config\">此处查看项目代码（仅包含test部分）</a></p>"},{"title":"谈谈js的闭包","date":"2016-07-02T20:21:32.000Z","_content":"上一篇我们讲js的this，里面提到了执行环境，今天我们就结合执行环境一起讲一下闭包吧。\n<!--more-->\n\n要理解闭包，这里我们补充一下js的作用域和作用域链吧，[上一篇](https://godbasin.github.io/2016/07/02/js-this/)也只是稍微略过。\n\n## 变量的作用域\n-----\n### 全局作用域和局部作用域\n在JS当中一个变量的作用域（scope）是程序中定义这个变量的区域。变量分为两类：全局（global）的和局部的。\n- 全局变量的作用域是全局性的，即在JavaScript代码中，它处处都有定义\n- 在函数之内声明的变量，就只在函数体内部有定义。它们是局部变量，作用域是局部性的。函数的参数也是局部变量，它们只在函数体内部有定义\n\n``` javascript\nvar a; //全局变量，作用域全局性\nfunction example(){\n\tvar b; //局部变量，作用域局部性\n\tc = 1; //全局变量，作用域全局性\n}\n```\n变量没有在函数内声明或者声明的时候没有带var就是全局变量，拥有全局作用域，window对象的所有属性拥有全局作用域，在代码任何地方都可以访问。函数内部声明并且以var修饰的变量就是局部变量，只能在函数体内使用。\n\n### 作用域链\n- 作用域链是什么\n每个JavaScript执行环境都有一个和它关联在一起的作用域链。这个作用域链是一个对象列表或对象链。\n- 作用域链的创建\n当代码在一个环境中执行时，会创建变量对象的一个作用域链，来保证对执行环境有权访问的变量和函数的有序访问。作用域第一个对象始终是当前执行代码所在环境的变量对象。\n- 搜索标识符\n在函数运行过程中标识符的解析是沿着作用域链一级一级搜索的过程，从第一个对象开始，逐级向后回溯，直到找到同名标识符为止，找到后不再继续遍历，找不到就报错。\n``` javascript\n//作用域链[全局]\nvar a = 1; \nfunction fun1(){\n\t//作用域链[fun1，全局]\n\tvar b = 2; \n\tfunction fun2(){\n\t\t//作用域链[fun2, fun1，全局]\n\t\tvar c = 3; \n\t\talert(c); //查找fun2，有结果，返回3\n\t\talert(b); //查找fun2，无结果，查找fun1，有结果，返回2\n\t\talert(a); //查找fun2，无结果，查找fun1，无结果，查找全局，有结果，返回1\n\t\talert(abc); //查找fun2，无结果，查找fun1，无结果，查找全局，无结果，返回undefined，若此处为函数调用，则报错\n\t}\n}\n```\n\n### with语句\nwith语句用于设置代码在特定对象中的作用域，主要用来临时扩展作用域链，将语句中的对象添加到作用域的头部。\n下面引用[w3c](http://www.w3school.com.cn/js/pro_js_statements_with.asp)上的例子进行说明：\n``` javascript\nvar sMessage = \"hello\";\nwith(sMessage) {\n  alert(toUpperCase());\t//输出 \"HELLO\"\n}\n```\n\n## js闭包\n-----\n铺垫了这么多，下面我们开始讲闭包。\n官方的解释是：闭包是一个拥有许多变量和绑定了这些变量的环境的表达式（通常是一个函数），因而这些变量也是该表达式的一部分。\n这句话很难懂，我们还是从闭包的出现开始讲起吧。\n\n### 闭包的出现\n在Javascript语言中，只有函数内部的子函数才能读取局部变量。我们看下面的例子：\n``` javascript\nfunction B(){\n\tvar b = 2;\n}\nB();\nalert(b); //undefined\n```\n在全局环境下无法访问函数B内的变量，这可以用前面的作用域和作用域链来解释，即全局函数的作用域链里不含有函数B内的作用域。现在如果我们想要访问内部函数的变量，可以这样做：\n``` javascript\nfunction B(){\n\tvar b = 2;\n\tfunction C(){\n\t\talert(b); //2\n\t}\n\treturn C;\n}\nvar A = B();\nA(); //2\n```\n也就是说，我们在函数B内定义了另外一个函数C，用于输出函数B内变量b的值。而当在函数B内把函数C返回，且被外部引用了的时候，我们就可以在函数B外面获得函数B里面的变量了，此时也创建了一个闭包。\n在本质上，闭包就是将函数内部和函数外部连接起来的一座桥梁。\n\n### 再理解闭包\n我们看下面代码：\n``` javascript\nfunction B(){\n\tvar b = (b === undefined) ? 1 : b;\n\tfunction C(){\n\t\tb++;\n\t\talert(b);\n\t};\n\treturn C;\n}\nvar A = B();\nA(); //2\nA(); //3\nvar D = B();\nD(); //2\nD(); //3\nD(); //4\nA(); //4\nA(); //5\n```\n当我们使用闭包把函数B里面的函数C返回并赋值给函数外的变量A，在每次调用A时函数B里面的变量b都会增加1，即该变量b并没有被销毁，此时我们可以继续使用或改变该变量b。\n并且，当我们再次使用闭包把函数B里面的函数C返回并赋值给函数外的变量D时，里面的变量b会重新被赋值。觉得别扭吗？\n\n其实想要更好地理解我们需要配合[上节](https://godbasin.github.io/2016/07/02/js-this/)说过的执行环境来讲，这里我再贴一下执行环境有关的说明：\n- 定义期\n  - 全局函数A创建了一个A的[[scope]]属性，包含全局[[scope]]\n  - 函数A里定义函数B，则B的[[scope]]包含全局[[scope]]和A的[[scope]]\n- 执行期\n当函数被执行的时候，就是进入这个函数的执行环境，首先会创一个它自己的活动对象，包含\n  - this\n  - 参数(arguments，全局对象没有arguments)\n  - 局部变量(包括命名的参数)\n  - 一个变量对象的作用域链[[scope chain]]\n\n我们把上面的代码执行过程再重新理一下：\n1.变量声明和函数声明（声明的提升），此时进行函数B的定义期\n2.变量A赋值第一步，此时进入函数B的执行期，进入B函数的执行环境，创建相关的this对象(window对象)、局部变量、作用域链等，我们称该变量b为b1，b1被赋值1\n3.变量A赋值第二步，此时函数B执行完毕，返回函数B内的函数C，并引用变量b1，故变量b1并没有被回收\n4.变量A调用，此时引用了变量b1并增加1，因为b1仍然在内存中，故可以实现b1的自增\n5.进行变量D赋值，步骤和2一致，重新进入函数B的执行期，再次创建了B函数执行环境相关的this对象(window对象)、局部变量、作用域链等，这里我们可以看到，这个变量b是重新创建的，我们称之为b2，b2被赋值1\n6.变量D调用，此时引用了变量b2并增加1，因为b2仍然在内存中，故可以实现b2的自增\n\n### 闭包的用途\n闭包可以用在许多地方，它的最大用处有两个：\n- 用于读取其他函数内部变量的函数\n- 让这些变量的值始终保持在内存中\n接下来我们结合js的垃圾回收机制谈谈为什么闭包使变量保存在内存中吧。\n\n### js垃圾回收机制\njs垃圾回收机制原理就是找出那些不在被使用的变量，然后释放其所占有的内存。回收器一般是按照固定的时间间隔或者预设的时间进行处理的。\n对于其他语言来说，需要开发者手动的来跟踪内存，而JS的垃圾回收机制使得JS开发人员无需再关系内存的情况，所有的内存分配以及回收都会由垃圾回收器自动完成，执行环境会对执行过程中占有的内存负责。\n- 垃圾回收机制的种类\n  - 标记清除\n    - 在和执行上下文类似的的环境中当变量名称进入环境的时候，那么变量会被打上YES。一般来说是绝对不会释放被打上YES标签的变量内存的，一旦变量在出了该环境时，变会被打上NO标签（和作用域貌似有点像），JS引擎会在一定时间间隔或者设置的时间来进行扫描，对NO标签的进行剔除以释放其内存。\n  - 引用计数\n    - 一般来说，引用计数的含义是跟踪记录每个值被引用的次数。当声明一个变量并将一个引用类型值赋给该变量时，则这个值的引用次数便是1，如果同一个值又被赋给另一个变量，则该值的引用次数加1，相反，如果包含对这个值引用的变量又取得了另一个值，则这个值的引用次数减1。当这个值的引用次数为0时，说明没有办法访问到它了，因而可以将其占用的内存空间回收。\n除了一些极老版本的IE，目前市面上的JS引擎基本采用标记清除来除了垃圾回收。\n可见，当我们在函数外引用了函数里面的变量时，即使该函数已经执行完毕，但由于其内部变量仍被引用，便不会被内存空间回收。若带目的性地使用这个特点，则是闭包的一种用途。但是如果不是针对性地用于保存变量，则可能会导致内存泄露哦。\n\n### 参考\n[《学习Javascript闭包（Closure）》](http://www.ruanyifeng.com/blog/2009/08/learning_javascript_closures.html)\n[《JS 垃圾回收机制简介~ 》](http://blog.chinaunix.net/uid-26672038-id-3522560.html)\n\n## 结束语\n-----\n有人说闭包很方便，这话不假，我们可以利用闭包创建一些服务，用来保存需要的变量。但是闭包会使子函数保持其作用域链的所有变量及函数与内存中，内存消耗很大，所以不能滥用，并且在使用的时候尽量销毁父函数不再使用的变量哦。","source":"_posts/js-closure.md","raw":"---\ntitle: 谈谈js的闭包\ndate: 2016-07-03 04:21:32\ncategories: js什锦\ntags: 逻辑实现\n---\n上一篇我们讲js的this，里面提到了执行环境，今天我们就结合执行环境一起讲一下闭包吧。\n<!--more-->\n\n要理解闭包，这里我们补充一下js的作用域和作用域链吧，[上一篇](https://godbasin.github.io/2016/07/02/js-this/)也只是稍微略过。\n\n## 变量的作用域\n-----\n### 全局作用域和局部作用域\n在JS当中一个变量的作用域（scope）是程序中定义这个变量的区域。变量分为两类：全局（global）的和局部的。\n- 全局变量的作用域是全局性的，即在JavaScript代码中，它处处都有定义\n- 在函数之内声明的变量，就只在函数体内部有定义。它们是局部变量，作用域是局部性的。函数的参数也是局部变量，它们只在函数体内部有定义\n\n``` javascript\nvar a; //全局变量，作用域全局性\nfunction example(){\n\tvar b; //局部变量，作用域局部性\n\tc = 1; //全局变量，作用域全局性\n}\n```\n变量没有在函数内声明或者声明的时候没有带var就是全局变量，拥有全局作用域，window对象的所有属性拥有全局作用域，在代码任何地方都可以访问。函数内部声明并且以var修饰的变量就是局部变量，只能在函数体内使用。\n\n### 作用域链\n- 作用域链是什么\n每个JavaScript执行环境都有一个和它关联在一起的作用域链。这个作用域链是一个对象列表或对象链。\n- 作用域链的创建\n当代码在一个环境中执行时，会创建变量对象的一个作用域链，来保证对执行环境有权访问的变量和函数的有序访问。作用域第一个对象始终是当前执行代码所在环境的变量对象。\n- 搜索标识符\n在函数运行过程中标识符的解析是沿着作用域链一级一级搜索的过程，从第一个对象开始，逐级向后回溯，直到找到同名标识符为止，找到后不再继续遍历，找不到就报错。\n``` javascript\n//作用域链[全局]\nvar a = 1; \nfunction fun1(){\n\t//作用域链[fun1，全局]\n\tvar b = 2; \n\tfunction fun2(){\n\t\t//作用域链[fun2, fun1，全局]\n\t\tvar c = 3; \n\t\talert(c); //查找fun2，有结果，返回3\n\t\talert(b); //查找fun2，无结果，查找fun1，有结果，返回2\n\t\talert(a); //查找fun2，无结果，查找fun1，无结果，查找全局，有结果，返回1\n\t\talert(abc); //查找fun2，无结果，查找fun1，无结果，查找全局，无结果，返回undefined，若此处为函数调用，则报错\n\t}\n}\n```\n\n### with语句\nwith语句用于设置代码在特定对象中的作用域，主要用来临时扩展作用域链，将语句中的对象添加到作用域的头部。\n下面引用[w3c](http://www.w3school.com.cn/js/pro_js_statements_with.asp)上的例子进行说明：\n``` javascript\nvar sMessage = \"hello\";\nwith(sMessage) {\n  alert(toUpperCase());\t//输出 \"HELLO\"\n}\n```\n\n## js闭包\n-----\n铺垫了这么多，下面我们开始讲闭包。\n官方的解释是：闭包是一个拥有许多变量和绑定了这些变量的环境的表达式（通常是一个函数），因而这些变量也是该表达式的一部分。\n这句话很难懂，我们还是从闭包的出现开始讲起吧。\n\n### 闭包的出现\n在Javascript语言中，只有函数内部的子函数才能读取局部变量。我们看下面的例子：\n``` javascript\nfunction B(){\n\tvar b = 2;\n}\nB();\nalert(b); //undefined\n```\n在全局环境下无法访问函数B内的变量，这可以用前面的作用域和作用域链来解释，即全局函数的作用域链里不含有函数B内的作用域。现在如果我们想要访问内部函数的变量，可以这样做：\n``` javascript\nfunction B(){\n\tvar b = 2;\n\tfunction C(){\n\t\talert(b); //2\n\t}\n\treturn C;\n}\nvar A = B();\nA(); //2\n```\n也就是说，我们在函数B内定义了另外一个函数C，用于输出函数B内变量b的值。而当在函数B内把函数C返回，且被外部引用了的时候，我们就可以在函数B外面获得函数B里面的变量了，此时也创建了一个闭包。\n在本质上，闭包就是将函数内部和函数外部连接起来的一座桥梁。\n\n### 再理解闭包\n我们看下面代码：\n``` javascript\nfunction B(){\n\tvar b = (b === undefined) ? 1 : b;\n\tfunction C(){\n\t\tb++;\n\t\talert(b);\n\t};\n\treturn C;\n}\nvar A = B();\nA(); //2\nA(); //3\nvar D = B();\nD(); //2\nD(); //3\nD(); //4\nA(); //4\nA(); //5\n```\n当我们使用闭包把函数B里面的函数C返回并赋值给函数外的变量A，在每次调用A时函数B里面的变量b都会增加1，即该变量b并没有被销毁，此时我们可以继续使用或改变该变量b。\n并且，当我们再次使用闭包把函数B里面的函数C返回并赋值给函数外的变量D时，里面的变量b会重新被赋值。觉得别扭吗？\n\n其实想要更好地理解我们需要配合[上节](https://godbasin.github.io/2016/07/02/js-this/)说过的执行环境来讲，这里我再贴一下执行环境有关的说明：\n- 定义期\n  - 全局函数A创建了一个A的[[scope]]属性，包含全局[[scope]]\n  - 函数A里定义函数B，则B的[[scope]]包含全局[[scope]]和A的[[scope]]\n- 执行期\n当函数被执行的时候，就是进入这个函数的执行环境，首先会创一个它自己的活动对象，包含\n  - this\n  - 参数(arguments，全局对象没有arguments)\n  - 局部变量(包括命名的参数)\n  - 一个变量对象的作用域链[[scope chain]]\n\n我们把上面的代码执行过程再重新理一下：\n1.变量声明和函数声明（声明的提升），此时进行函数B的定义期\n2.变量A赋值第一步，此时进入函数B的执行期，进入B函数的执行环境，创建相关的this对象(window对象)、局部变量、作用域链等，我们称该变量b为b1，b1被赋值1\n3.变量A赋值第二步，此时函数B执行完毕，返回函数B内的函数C，并引用变量b1，故变量b1并没有被回收\n4.变量A调用，此时引用了变量b1并增加1，因为b1仍然在内存中，故可以实现b1的自增\n5.进行变量D赋值，步骤和2一致，重新进入函数B的执行期，再次创建了B函数执行环境相关的this对象(window对象)、局部变量、作用域链等，这里我们可以看到，这个变量b是重新创建的，我们称之为b2，b2被赋值1\n6.变量D调用，此时引用了变量b2并增加1，因为b2仍然在内存中，故可以实现b2的自增\n\n### 闭包的用途\n闭包可以用在许多地方，它的最大用处有两个：\n- 用于读取其他函数内部变量的函数\n- 让这些变量的值始终保持在内存中\n接下来我们结合js的垃圾回收机制谈谈为什么闭包使变量保存在内存中吧。\n\n### js垃圾回收机制\njs垃圾回收机制原理就是找出那些不在被使用的变量，然后释放其所占有的内存。回收器一般是按照固定的时间间隔或者预设的时间进行处理的。\n对于其他语言来说，需要开发者手动的来跟踪内存，而JS的垃圾回收机制使得JS开发人员无需再关系内存的情况，所有的内存分配以及回收都会由垃圾回收器自动完成，执行环境会对执行过程中占有的内存负责。\n- 垃圾回收机制的种类\n  - 标记清除\n    - 在和执行上下文类似的的环境中当变量名称进入环境的时候，那么变量会被打上YES。一般来说是绝对不会释放被打上YES标签的变量内存的，一旦变量在出了该环境时，变会被打上NO标签（和作用域貌似有点像），JS引擎会在一定时间间隔或者设置的时间来进行扫描，对NO标签的进行剔除以释放其内存。\n  - 引用计数\n    - 一般来说，引用计数的含义是跟踪记录每个值被引用的次数。当声明一个变量并将一个引用类型值赋给该变量时，则这个值的引用次数便是1，如果同一个值又被赋给另一个变量，则该值的引用次数加1，相反，如果包含对这个值引用的变量又取得了另一个值，则这个值的引用次数减1。当这个值的引用次数为0时，说明没有办法访问到它了，因而可以将其占用的内存空间回收。\n除了一些极老版本的IE，目前市面上的JS引擎基本采用标记清除来除了垃圾回收。\n可见，当我们在函数外引用了函数里面的变量时，即使该函数已经执行完毕，但由于其内部变量仍被引用，便不会被内存空间回收。若带目的性地使用这个特点，则是闭包的一种用途。但是如果不是针对性地用于保存变量，则可能会导致内存泄露哦。\n\n### 参考\n[《学习Javascript闭包（Closure）》](http://www.ruanyifeng.com/blog/2009/08/learning_javascript_closures.html)\n[《JS 垃圾回收机制简介~ 》](http://blog.chinaunix.net/uid-26672038-id-3522560.html)\n\n## 结束语\n-----\n有人说闭包很方便，这话不假，我们可以利用闭包创建一些服务，用来保存需要的变量。但是闭包会使子函数保持其作用域链的所有变量及函数与内存中，内存消耗很大，所以不能滥用，并且在使用的时候尽量销毁父函数不再使用的变量哦。","slug":"js-closure","published":1,"updated":"2016-07-29T13:30:31.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cirrwvo73002f38l5zvt7ut70","content":"<p>上一篇我们讲js的this，里面提到了执行环境，今天我们就结合执行环境一起讲一下闭包吧。<br><a id=\"more\"></a></p>\n<p>要理解闭包，这里我们补充一下js的作用域和作用域链吧，<a href=\"https://godbasin.github.io/2016/07/02/js-this/\">上一篇</a>也只是稍微略过。</p>\n<h2 id=\"变量的作用域\"><a href=\"#变量的作用域\" class=\"headerlink\" title=\"变量的作用域\"></a>变量的作用域</h2><hr>\n<h3 id=\"全局作用域和局部作用域\"><a href=\"#全局作用域和局部作用域\" class=\"headerlink\" title=\"全局作用域和局部作用域\"></a>全局作用域和局部作用域</h3><p>在JS当中一个变量的作用域（scope）是程序中定义这个变量的区域。变量分为两类：全局（global）的和局部的。</p>\n<ul>\n<li>全局变量的作用域是全局性的，即在JavaScript代码中，它处处都有定义</li>\n<li>在函数之内声明的变量，就只在函数体内部有定义。它们是局部变量，作用域是局部性的。函数的参数也是局部变量，它们只在函数体内部有定义</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> a; <span class=\"comment\">//全局变量，作用域全局性</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">example</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> b; <span class=\"comment\">//局部变量，作用域局部性</span></span><br><span class=\"line\">  c = <span class=\"number\">1</span>; <span class=\"comment\">//全局变量，作用域全局性</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>变量没有在函数内声明或者声明的时候没有带var就是全局变量，拥有全局作用域，window对象的所有属性拥有全局作用域，在代码任何地方都可以访问。函数内部声明并且以var修饰的变量就是局部变量，只能在函数体内使用。</p>\n<h3 id=\"作用域链\"><a href=\"#作用域链\" class=\"headerlink\" title=\"作用域链\"></a>作用域链</h3><ul>\n<li>作用域链是什么<br>每个JavaScript执行环境都有一个和它关联在一起的作用域链。这个作用域链是一个对象列表或对象链。</li>\n<li>作用域链的创建<br>当代码在一个环境中执行时，会创建变量对象的一个作用域链，来保证对执行环境有权访问的变量和函数的有序访问。作用域第一个对象始终是当前执行代码所在环境的变量对象。</li>\n<li>搜索标识符<br>在函数运行过程中标识符的解析是沿着作用域链一级一级搜索的过程，从第一个对象开始，逐级向后回溯，直到找到同名标识符为止，找到后不再继续遍历，找不到就报错。<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//作用域链[全局]</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"number\">1</span>; </span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fun1</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">//作用域链[fun1，全局]</span></span><br><span class=\"line\">  <span class=\"keyword\">var</span> b = <span class=\"number\">2</span>; </span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fun2</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//作用域链[fun2, fun1，全局]</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> c = <span class=\"number\">3</span>; </span><br><span class=\"line\">    alert(c); <span class=\"comment\">//查找fun2，有结果，返回3</span></span><br><span class=\"line\">    alert(b); <span class=\"comment\">//查找fun2，无结果，查找fun1，有结果，返回2</span></span><br><span class=\"line\">    alert(a); <span class=\"comment\">//查找fun2，无结果，查找fun1，无结果，查找全局，有结果，返回1</span></span><br><span class=\"line\">    alert(abc); <span class=\"comment\">//查找fun2，无结果，查找fun1，无结果，查找全局，无结果，返回undefined，若此处为函数调用，则报错</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3 id=\"with语句\"><a href=\"#with语句\" class=\"headerlink\" title=\"with语句\"></a>with语句</h3><p>with语句用于设置代码在特定对象中的作用域，主要用来临时扩展作用域链，将语句中的对象添加到作用域的头部。<br>下面引用<a href=\"http://www.w3school.com.cn/js/pro_js_statements_with.asp\" target=\"_blank\" rel=\"external\">w3c</a>上的例子进行说明：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> sMessage = <span class=\"string\">\"hello\"</span>;</span><br><span class=\"line\"><span class=\"keyword\">with</span>(sMessage) &#123;</span><br><span class=\"line\">  alert(toUpperCase());\t<span class=\"comment\">//输出 \"HELLO\"</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"js闭包\"><a href=\"#js闭包\" class=\"headerlink\" title=\"js闭包\"></a>js闭包</h2><hr>\n<p>铺垫了这么多，下面我们开始讲闭包。<br>官方的解释是：闭包是一个拥有许多变量和绑定了这些变量的环境的表达式（通常是一个函数），因而这些变量也是该表达式的一部分。<br>这句话很难懂，我们还是从闭包的出现开始讲起吧。</p>\n<h3 id=\"闭包的出现\"><a href=\"#闭包的出现\" class=\"headerlink\" title=\"闭包的出现\"></a>闭包的出现</h3><p>在Javascript语言中，只有函数内部的子函数才能读取局部变量。我们看下面的例子：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">B</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> b = <span class=\"number\">2</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">B();</span><br><span class=\"line\">alert(b); <span class=\"comment\">//undefined</span></span><br></pre></td></tr></table></figure></p>\n<p>在全局环境下无法访问函数B内的变量，这可以用前面的作用域和作用域链来解释，即全局函数的作用域链里不含有函数B内的作用域。现在如果我们想要访问内部函数的变量，可以这样做：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">B</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> b = <span class=\"number\">2</span>;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">C</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    alert(b); <span class=\"comment\">//2</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> C;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> A = B();</span><br><span class=\"line\">A(); <span class=\"comment\">//2</span></span><br></pre></td></tr></table></figure></p>\n<p>也就是说，我们在函数B内定义了另外一个函数C，用于输出函数B内变量b的值。而当在函数B内把函数C返回，且被外部引用了的时候，我们就可以在函数B外面获得函数B里面的变量了，此时也创建了一个闭包。<br>在本质上，闭包就是将函数内部和函数外部连接起来的一座桥梁。</p>\n<h3 id=\"再理解闭包\"><a href=\"#再理解闭包\" class=\"headerlink\" title=\"再理解闭包\"></a>再理解闭包</h3><p>我们看下面代码：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">B</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> b = (b === <span class=\"literal\">undefined</span>) ? <span class=\"number\">1</span> : b;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">C</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    b++;</span><br><span class=\"line\">    alert(b);</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> C;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> A = B();</span><br><span class=\"line\">A(); <span class=\"comment\">//2</span></span><br><span class=\"line\">A(); <span class=\"comment\">//3</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> D = B();</span><br><span class=\"line\">D(); <span class=\"comment\">//2</span></span><br><span class=\"line\">D(); <span class=\"comment\">//3</span></span><br><span class=\"line\">D(); <span class=\"comment\">//4</span></span><br><span class=\"line\">A(); <span class=\"comment\">//4</span></span><br><span class=\"line\">A(); <span class=\"comment\">//5</span></span><br></pre></td></tr></table></figure></p>\n<p>当我们使用闭包把函数B里面的函数C返回并赋值给函数外的变量A，在每次调用A时函数B里面的变量b都会增加1，即该变量b并没有被销毁，此时我们可以继续使用或改变该变量b。<br>并且，当我们再次使用闭包把函数B里面的函数C返回并赋值给函数外的变量D时，里面的变量b会重新被赋值。觉得别扭吗？</p>\n<p>其实想要更好地理解我们需要配合<a href=\"https://godbasin.github.io/2016/07/02/js-this/\">上节</a>说过的执行环境来讲，这里我再贴一下执行环境有关的说明：</p>\n<ul>\n<li>定义期<ul>\n<li>全局函数A创建了一个A的[[scope]]属性，包含全局[[scope]]</li>\n<li>函数A里定义函数B，则B的[[scope]]包含全局[[scope]]和A的[[scope]]</li>\n</ul>\n</li>\n<li>执行期<br>当函数被执行的时候，就是进入这个函数的执行环境，首先会创一个它自己的活动对象，包含<ul>\n<li>this</li>\n<li>参数(arguments，全局对象没有arguments)</li>\n<li>局部变量(包括命名的参数)</li>\n<li>一个变量对象的作用域链[[scope chain]]</li>\n</ul>\n</li>\n</ul>\n<p>我们把上面的代码执行过程再重新理一下：<br>1.变量声明和函数声明（声明的提升），此时进行函数B的定义期<br>2.变量A赋值第一步，此时进入函数B的执行期，进入B函数的执行环境，创建相关的this对象(window对象)、局部变量、作用域链等，我们称该变量b为b1，b1被赋值1<br>3.变量A赋值第二步，此时函数B执行完毕，返回函数B内的函数C，并引用变量b1，故变量b1并没有被回收<br>4.变量A调用，此时引用了变量b1并增加1，因为b1仍然在内存中，故可以实现b1的自增<br>5.进行变量D赋值，步骤和2一致，重新进入函数B的执行期，再次创建了B函数执行环境相关的this对象(window对象)、局部变量、作用域链等，这里我们可以看到，这个变量b是重新创建的，我们称之为b2，b2被赋值1<br>6.变量D调用，此时引用了变量b2并增加1，因为b2仍然在内存中，故可以实现b2的自增</p>\n<h3 id=\"闭包的用途\"><a href=\"#闭包的用途\" class=\"headerlink\" title=\"闭包的用途\"></a>闭包的用途</h3><p>闭包可以用在许多地方，它的最大用处有两个：</p>\n<ul>\n<li>用于读取其他函数内部变量的函数</li>\n<li>让这些变量的值始终保持在内存中<br>接下来我们结合js的垃圾回收机制谈谈为什么闭包使变量保存在内存中吧。</li>\n</ul>\n<h3 id=\"js垃圾回收机制\"><a href=\"#js垃圾回收机制\" class=\"headerlink\" title=\"js垃圾回收机制\"></a>js垃圾回收机制</h3><p>js垃圾回收机制原理就是找出那些不在被使用的变量，然后释放其所占有的内存。回收器一般是按照固定的时间间隔或者预设的时间进行处理的。<br>对于其他语言来说，需要开发者手动的来跟踪内存，而JS的垃圾回收机制使得JS开发人员无需再关系内存的情况，所有的内存分配以及回收都会由垃圾回收器自动完成，执行环境会对执行过程中占有的内存负责。</p>\n<ul>\n<li>垃圾回收机制的种类<ul>\n<li>标记清除<ul>\n<li>在和执行上下文类似的的环境中当变量名称进入环境的时候，那么变量会被打上YES。一般来说是绝对不会释放被打上YES标签的变量内存的，一旦变量在出了该环境时，变会被打上NO标签（和作用域貌似有点像），JS引擎会在一定时间间隔或者设置的时间来进行扫描，对NO标签的进行剔除以释放其内存。</li>\n</ul>\n</li>\n<li>引用计数<ul>\n<li>一般来说，引用计数的含义是跟踪记录每个值被引用的次数。当声明一个变量并将一个引用类型值赋给该变量时，则这个值的引用次数便是1，如果同一个值又被赋给另一个变量，则该值的引用次数加1，相反，如果包含对这个值引用的变量又取得了另一个值，则这个值的引用次数减1。当这个值的引用次数为0时，说明没有办法访问到它了，因而可以将其占用的内存空间回收。<br>除了一些极老版本的IE，目前市面上的JS引擎基本采用标记清除来除了垃圾回收。<br>可见，当我们在函数外引用了函数里面的变量时，即使该函数已经执行完毕，但由于其内部变量仍被引用，便不会被内存空间回收。若带目的性地使用这个特点，则是闭包的一种用途。但是如果不是针对性地用于保存变量，则可能会导致内存泄露哦。</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h3><p><a href=\"http://www.ruanyifeng.com/blog/2009/08/learning_javascript_closures.html\" target=\"_blank\" rel=\"external\">《学习Javascript闭包（Closure）》</a><br><a href=\"http://blog.chinaunix.net/uid-26672038-id-3522560.html\" target=\"_blank\" rel=\"external\">《JS 垃圾回收机制简介~ 》</a></p>\n<h2 id=\"结束语\"><a href=\"#结束语\" class=\"headerlink\" title=\"结束语\"></a>结束语</h2><hr>\n<p>有人说闭包很方便，这话不假，我们可以利用闭包创建一些服务，用来保存需要的变量。但是闭包会使子函数保持其作用域链的所有变量及函数与内存中，内存消耗很大，所以不能滥用，并且在使用的时候尽量销毁父函数不再使用的变量哦。</p>\n","excerpt":"<p>上一篇我们讲js的this，里面提到了执行环境，今天我们就结合执行环境一起讲一下闭包吧。<br>","more":"</p>\n<p>要理解闭包，这里我们补充一下js的作用域和作用域链吧，<a href=\"https://godbasin.github.io/2016/07/02/js-this/\">上一篇</a>也只是稍微略过。</p>\n<h2 id=\"变量的作用域\"><a href=\"#变量的作用域\" class=\"headerlink\" title=\"变量的作用域\"></a>变量的作用域</h2><hr>\n<h3 id=\"全局作用域和局部作用域\"><a href=\"#全局作用域和局部作用域\" class=\"headerlink\" title=\"全局作用域和局部作用域\"></a>全局作用域和局部作用域</h3><p>在JS当中一个变量的作用域（scope）是程序中定义这个变量的区域。变量分为两类：全局（global）的和局部的。</p>\n<ul>\n<li>全局变量的作用域是全局性的，即在JavaScript代码中，它处处都有定义</li>\n<li>在函数之内声明的变量，就只在函数体内部有定义。它们是局部变量，作用域是局部性的。函数的参数也是局部变量，它们只在函数体内部有定义</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> a; <span class=\"comment\">//全局变量，作用域全局性</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">example</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> b; <span class=\"comment\">//局部变量，作用域局部性</span></span><br><span class=\"line\">  c = <span class=\"number\">1</span>; <span class=\"comment\">//全局变量，作用域全局性</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>变量没有在函数内声明或者声明的时候没有带var就是全局变量，拥有全局作用域，window对象的所有属性拥有全局作用域，在代码任何地方都可以访问。函数内部声明并且以var修饰的变量就是局部变量，只能在函数体内使用。</p>\n<h3 id=\"作用域链\"><a href=\"#作用域链\" class=\"headerlink\" title=\"作用域链\"></a>作用域链</h3><ul>\n<li>作用域链是什么<br>每个JavaScript执行环境都有一个和它关联在一起的作用域链。这个作用域链是一个对象列表或对象链。</li>\n<li>作用域链的创建<br>当代码在一个环境中执行时，会创建变量对象的一个作用域链，来保证对执行环境有权访问的变量和函数的有序访问。作用域第一个对象始终是当前执行代码所在环境的变量对象。</li>\n<li>搜索标识符<br>在函数运行过程中标识符的解析是沿着作用域链一级一级搜索的过程，从第一个对象开始，逐级向后回溯，直到找到同名标识符为止，找到后不再继续遍历，找不到就报错。<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//作用域链[全局]</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"number\">1</span>; </span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fun1</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">//作用域链[fun1，全局]</span></span><br><span class=\"line\">  <span class=\"keyword\">var</span> b = <span class=\"number\">2</span>; </span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fun2</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//作用域链[fun2, fun1，全局]</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> c = <span class=\"number\">3</span>; </span><br><span class=\"line\">    alert(c); <span class=\"comment\">//查找fun2，有结果，返回3</span></span><br><span class=\"line\">    alert(b); <span class=\"comment\">//查找fun2，无结果，查找fun1，有结果，返回2</span></span><br><span class=\"line\">    alert(a); <span class=\"comment\">//查找fun2，无结果，查找fun1，无结果，查找全局，有结果，返回1</span></span><br><span class=\"line\">    alert(abc); <span class=\"comment\">//查找fun2，无结果，查找fun1，无结果，查找全局，无结果，返回undefined，若此处为函数调用，则报错</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3 id=\"with语句\"><a href=\"#with语句\" class=\"headerlink\" title=\"with语句\"></a>with语句</h3><p>with语句用于设置代码在特定对象中的作用域，主要用来临时扩展作用域链，将语句中的对象添加到作用域的头部。<br>下面引用<a href=\"http://www.w3school.com.cn/js/pro_js_statements_with.asp\">w3c</a>上的例子进行说明：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> sMessage = <span class=\"string\">\"hello\"</span>;</span><br><span class=\"line\"><span class=\"keyword\">with</span>(sMessage) &#123;</span><br><span class=\"line\">  alert(toUpperCase());\t<span class=\"comment\">//输出 \"HELLO\"</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"js闭包\"><a href=\"#js闭包\" class=\"headerlink\" title=\"js闭包\"></a>js闭包</h2><hr>\n<p>铺垫了这么多，下面我们开始讲闭包。<br>官方的解释是：闭包是一个拥有许多变量和绑定了这些变量的环境的表达式（通常是一个函数），因而这些变量也是该表达式的一部分。<br>这句话很难懂，我们还是从闭包的出现开始讲起吧。</p>\n<h3 id=\"闭包的出现\"><a href=\"#闭包的出现\" class=\"headerlink\" title=\"闭包的出现\"></a>闭包的出现</h3><p>在Javascript语言中，只有函数内部的子函数才能读取局部变量。我们看下面的例子：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">B</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> b = <span class=\"number\">2</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">B();</span><br><span class=\"line\">alert(b); <span class=\"comment\">//undefined</span></span><br></pre></td></tr></table></figure></p>\n<p>在全局环境下无法访问函数B内的变量，这可以用前面的作用域和作用域链来解释，即全局函数的作用域链里不含有函数B内的作用域。现在如果我们想要访问内部函数的变量，可以这样做：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">B</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> b = <span class=\"number\">2</span>;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">C</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    alert(b); <span class=\"comment\">//2</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> C;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> A = B();</span><br><span class=\"line\">A(); <span class=\"comment\">//2</span></span><br></pre></td></tr></table></figure></p>\n<p>也就是说，我们在函数B内定义了另外一个函数C，用于输出函数B内变量b的值。而当在函数B内把函数C返回，且被外部引用了的时候，我们就可以在函数B外面获得函数B里面的变量了，此时也创建了一个闭包。<br>在本质上，闭包就是将函数内部和函数外部连接起来的一座桥梁。</p>\n<h3 id=\"再理解闭包\"><a href=\"#再理解闭包\" class=\"headerlink\" title=\"再理解闭包\"></a>再理解闭包</h3><p>我们看下面代码：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">B</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> b = (b === <span class=\"literal\">undefined</span>) ? <span class=\"number\">1</span> : b;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">C</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    b++;</span><br><span class=\"line\">    alert(b);</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> C;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> A = B();</span><br><span class=\"line\">A(); <span class=\"comment\">//2</span></span><br><span class=\"line\">A(); <span class=\"comment\">//3</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> D = B();</span><br><span class=\"line\">D(); <span class=\"comment\">//2</span></span><br><span class=\"line\">D(); <span class=\"comment\">//3</span></span><br><span class=\"line\">D(); <span class=\"comment\">//4</span></span><br><span class=\"line\">A(); <span class=\"comment\">//4</span></span><br><span class=\"line\">A(); <span class=\"comment\">//5</span></span><br></pre></td></tr></table></figure></p>\n<p>当我们使用闭包把函数B里面的函数C返回并赋值给函数外的变量A，在每次调用A时函数B里面的变量b都会增加1，即该变量b并没有被销毁，此时我们可以继续使用或改变该变量b。<br>并且，当我们再次使用闭包把函数B里面的函数C返回并赋值给函数外的变量D时，里面的变量b会重新被赋值。觉得别扭吗？</p>\n<p>其实想要更好地理解我们需要配合<a href=\"https://godbasin.github.io/2016/07/02/js-this/\">上节</a>说过的执行环境来讲，这里我再贴一下执行环境有关的说明：</p>\n<ul>\n<li>定义期<ul>\n<li>全局函数A创建了一个A的[[scope]]属性，包含全局[[scope]]</li>\n<li>函数A里定义函数B，则B的[[scope]]包含全局[[scope]]和A的[[scope]]</li>\n</ul>\n</li>\n<li>执行期<br>当函数被执行的时候，就是进入这个函数的执行环境，首先会创一个它自己的活动对象，包含<ul>\n<li>this</li>\n<li>参数(arguments，全局对象没有arguments)</li>\n<li>局部变量(包括命名的参数)</li>\n<li>一个变量对象的作用域链[[scope chain]]</li>\n</ul>\n</li>\n</ul>\n<p>我们把上面的代码执行过程再重新理一下：<br>1.变量声明和函数声明（声明的提升），此时进行函数B的定义期<br>2.变量A赋值第一步，此时进入函数B的执行期，进入B函数的执行环境，创建相关的this对象(window对象)、局部变量、作用域链等，我们称该变量b为b1，b1被赋值1<br>3.变量A赋值第二步，此时函数B执行完毕，返回函数B内的函数C，并引用变量b1，故变量b1并没有被回收<br>4.变量A调用，此时引用了变量b1并增加1，因为b1仍然在内存中，故可以实现b1的自增<br>5.进行变量D赋值，步骤和2一致，重新进入函数B的执行期，再次创建了B函数执行环境相关的this对象(window对象)、局部变量、作用域链等，这里我们可以看到，这个变量b是重新创建的，我们称之为b2，b2被赋值1<br>6.变量D调用，此时引用了变量b2并增加1，因为b2仍然在内存中，故可以实现b2的自增</p>\n<h3 id=\"闭包的用途\"><a href=\"#闭包的用途\" class=\"headerlink\" title=\"闭包的用途\"></a>闭包的用途</h3><p>闭包可以用在许多地方，它的最大用处有两个：</p>\n<ul>\n<li>用于读取其他函数内部变量的函数</li>\n<li>让这些变量的值始终保持在内存中<br>接下来我们结合js的垃圾回收机制谈谈为什么闭包使变量保存在内存中吧。</li>\n</ul>\n<h3 id=\"js垃圾回收机制\"><a href=\"#js垃圾回收机制\" class=\"headerlink\" title=\"js垃圾回收机制\"></a>js垃圾回收机制</h3><p>js垃圾回收机制原理就是找出那些不在被使用的变量，然后释放其所占有的内存。回收器一般是按照固定的时间间隔或者预设的时间进行处理的。<br>对于其他语言来说，需要开发者手动的来跟踪内存，而JS的垃圾回收机制使得JS开发人员无需再关系内存的情况，所有的内存分配以及回收都会由垃圾回收器自动完成，执行环境会对执行过程中占有的内存负责。</p>\n<ul>\n<li>垃圾回收机制的种类<ul>\n<li>标记清除<ul>\n<li>在和执行上下文类似的的环境中当变量名称进入环境的时候，那么变量会被打上YES。一般来说是绝对不会释放被打上YES标签的变量内存的，一旦变量在出了该环境时，变会被打上NO标签（和作用域貌似有点像），JS引擎会在一定时间间隔或者设置的时间来进行扫描，对NO标签的进行剔除以释放其内存。</li>\n</ul>\n</li>\n<li>引用计数<ul>\n<li>一般来说，引用计数的含义是跟踪记录每个值被引用的次数。当声明一个变量并将一个引用类型值赋给该变量时，则这个值的引用次数便是1，如果同一个值又被赋给另一个变量，则该值的引用次数加1，相反，如果包含对这个值引用的变量又取得了另一个值，则这个值的引用次数减1。当这个值的引用次数为0时，说明没有办法访问到它了，因而可以将其占用的内存空间回收。<br>除了一些极老版本的IE，目前市面上的JS引擎基本采用标记清除来除了垃圾回收。<br>可见，当我们在函数外引用了函数里面的变量时，即使该函数已经执行完毕，但由于其内部变量仍被引用，便不会被内存空间回收。若带目的性地使用这个特点，则是闭包的一种用途。但是如果不是针对性地用于保存变量，则可能会导致内存泄露哦。</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h3><p><a href=\"http://www.ruanyifeng.com/blog/2009/08/learning_javascript_closures.html\">《学习Javascript闭包（Closure）》</a><br><a href=\"http://blog.chinaunix.net/uid-26672038-id-3522560.html\">《JS 垃圾回收机制简介~ 》</a></p>\n<h2 id=\"结束语\"><a href=\"#结束语\" class=\"headerlink\" title=\"结束语\"></a>结束语</h2><hr>\n<p>有人说闭包很方便，这话不假，我们可以利用闭包创建一些服务，用来保存需要的变量。但是闭包会使子函数保持其作用域链的所有变量及函数与内存中，内存消耗很大，所以不能滥用，并且在使用的时候尽量销毁父函数不再使用的变量哦。</p>"},{"title":"React使用笔记2--创建登录组件","date":"2016-08-12T15:34:32.000Z","_content":"最近在学习使用React作为前端的框架，《React使用笔记》系列用于记录过程中的一些使用和解决方法。\n本文记录搭建登录页面的过程。\n<!--more-->\n\n## 根据产品规划划分模块\n-----\n### 主要页面逻辑\n在这里，本骚年就建一个比较简单的项目。该项目与之前的Angular使用笔记项目长得完全一致，但我们这里用React来实现吧。\n- 我们的主要页面逻辑如下：\n  - 1.登录页面，输入账号和密码即可\n  - 2.模块页面\n\n### 创建登录页面\n- 首先我们在components文件夹内添加一个login.jsx\n\n``` jsx\nimport React from 'react';\nconst Login = React.createClass({\n\trender() {\n\t\treturn (\n\t\t\t<div className=\"container\" id=\"login\">\n\t\t\t\t<form id=\"login-form\">\n\t\t\t\t\t<h3 className=\"text-center\">login</h3>\n\t\t\t\t\t<div className=\"form-group\">\n\t\t\t\t\t\t<label>account</label>\n\t\t\t\t\t\t<input type=\"text\" className=\"form-control\" placeholder=\"Account\" ref=\"loginName\" required />\n\t\t\t\t\t</div>\n\t\t\t\t\t<div className=\"form-group\">\n\t\t\t\t\t\t<label>Password</label>\n\t\t\t\t\t\t<input type=\"password\" className=\"form-control\" placeholder=\"Password\" ref=\"loginPwd\" required />\n\t\t\t\t\t</div>\n\t\t\t\t\t<button type=\"submit\"  className=\"btn btn-default\" onClick={this.loginSubmit}>登录</button>\n\t\t\t\t</form>\n\t\t\t</div>\n\t\t)\n\t}\n});\n\nmodule.exports = Login;\n```\n- 在jsx中，因为js中class为保留字，所以要写成className\n- 此处引用了Bootstrap的样式，在templates/index.ejs中添加\n\n``` html\n<link rel=\"stylesheet\" href=\"https://maxcdn.bootstrapcdn.com/bootstrap/latest/css/bootstrap.min.css\">\n```\n\n## React Router\n-----\n### 安装使用\n- 通过npm安装\n\n``` bash\n$ npm install history react-router@latest\n```\n- 还需要安装history，它也是React Router的依赖，且在npm 3+下不会自动安装\n\n``` bash\n$ npm install --save history\n```\n- 添加Route组件\n\n``` javascript\nimport { Router, Route, Link, hashHistory, IndexRoute } from 'react-router';\n```\n\n### React Router组件\n- Router组件\nRouter组件本身只是一个容器，真正的路由要通过Route组件定义。\n- Route组件\nRoute组件还可以嵌套。\n``` html\n<Router history={hashHistory}>\n  <Route path=\"/\" component={App}>\n    <Route path=\"/repos\" component={Repos}/>\n  </Route>\n</Router>\n```\n- Link组件\nLink组件用于取代<a>元素，生成一个链接，允许用户点击后跳转到另一个路由，可接收Router的状态。\n- IndexLink组件\n如果链接到根路由/，不要使用Link组件，而要使用IndexLink组件。\n- IndexRoute组件\nIndexRoute显式指定Home是根路由的子组件，即指定默认情况下加载的子组件，即该路径的index.html。\n- Redirect组件\nRedirect组件用于路由的跳转，即用户访问一个路由，会自动跳转到另一个路由。\n- IndexRedirect组件\nIndexRedirect组件用于访问根路由的时候，将用户重定向到某个子组件。\n\n### path属性\nRoute组件的path属性指定路由的匹配规则。\npath属性可以使用相对路径（不以/开头），匹配时就会相对于父组件的路径。\n- :paramName\n - 匹配URL的一个部分，直到遇到下一个/、?、#为止。\n - 这个路径参数可以通过this.props.params.paramName取出。\n- ()\n - ()表示URL的这个部分是可选的。\n- *\n*匹配任意字符，直到模式里面的下一个字符为止。匹配方式是非贪婪模式。\n- **\n**匹配任意字符，直到下一个/、?、#为止。匹配方式是贪婪模式。\n\n### Histories\nReact Router是建立在history之上的。 简而言之，一个history知道如何去监听浏览器地址栏的变化，并解析这个URL转化为location对象，然后router使用它匹配到路由，最后正确地渲染对应的组件。\n- createHashHistory\n - 这是一个你会获取到的默认history，如果你不指定某个history（即 <Router>{/* your routes */}</Router>）。\n - 它用到的是URL 的hash（#）部分去创建形如example.com/#/some/path的路由。\n - ?_k=ckuvup是每一个location创建的一个唯一的key，并把它们的状态存储在session storage中。当访客点击“后退”和“前进”时，我们就会有一个机制去恢复这些location state。可使用queryKey: false关闭。\n- createBrowserHistory\n - Browser history使用History API在浏览器中被创建用于处理URL，新建一个像这样真实的URL example.com/some/path。\n - 使用Browser history需要在服务器进行配置。\n- createMemoryHistory\n - Memory history不会在地址栏被操作或读取。\n\n### js中设置跳转\n- 使用browserHistory.push\n\n``` javascript\nimport { browserHistory } from 'react-router';\nexample(event) {\n\tbrowserHistory.push(path);\n}\n```\n- 使用context对象\n\n``` javascript\nexport example React.createClass({\n  // ask for `router` from context\n  contextTypes: {\n    router: React.PropTypes.object\n  },\n  example(event) {\n    this.context.router.push(path)\n  },\n})\n```\n\n## 添加路由\n-----\n### 在index.js设置路由\n``` javascript\nimport { Router, Route, Link, hashHistory, IndexRoute, useRouterHistory } from 'react-router'; //router组件\nimport { createHistory, createHashHistory } from 'history'; //history组件\nimport Login from  './components/login.jsx'; //login自定义组件\nimport Index from  './components/index.jsx'; //index自定义组件\nlet history = useRouterHistory(createHashHistory)({ queryKey: false });\n//将其渲染到页面上id为test的DOM元素内\nReactDOM.render(<Router history={history}>\n    <Route path=\"/\">\n      <Route path=\"index\" component={Index} />\n      <IndexRoute component={Login} />\n    </Route>\n  </Router>, \ndocument.body);\n```\n\n### 在components里login.ejs添加路由跳转\n- 添加登录按钮的click事件\n- 添加loginSubmit属性以及跳转\n\n``` jsx\nimport React from 'react'; //导入react组件\nconst Login = React.createClass({\n\tcontextTypes: {\n\t\trouter: React.PropTypes.object\n\t},\n\tloginSubmit: function() {\n\t\tthis.context.router.push('/index'); //使用this.content进行跳转\n\t},\n\trender() {\n\t\treturn (\n\t\t\t<div className=\"container\" id=\"login\">\n\t\t\t\t<form id=\"login-form\">\n\t\t\t\t\t<h3 className=\"text-center\">login</h3>\n\t\t\t\t\t<div className=\"form-group\">\n\t\t\t\t\t\t<label>account</label>\n\t\t\t\t\t\t<input type=\"text\" className=\"form-control\" placeholder=\"Account\" ref=\"loginName\" required />\n\t\t\t\t\t</div>\n\t\t\t\t\t<div className=\"form-group\">\n\t\t\t\t\t\t<label>Password</label>\n\t\t\t\t\t\t<input type=\"password\" className=\"form-control\" placeholder=\"Password\" ref=\"loginPwd\" required />\n\t\t\t\t\t</div>\n\t\t\t\t\t<button type=\"submit\"  className=\"btn btn-default\" onClick={this.loginSubmit}>登录</button>\n\t\t\t\t</form>\n\t\t\t</div>\n\t\t)\n\t}\n});\nmodule.exports = Login;\n```\n\n## 结束语\n-----\n从Angular转React中遇到不少问题呢，毕竟两者很多概念和使用方法都很不一样，使用过程中也是大开眼界了呀。\n[此处查看项目代码（仅包含app部分）](https://github.com/godbasin/godbasin.github.io/tree/blog-codes/react-notes/2-create-login)\n[此处查看页面效果](http://o9j9owc7b.bkt.clouddn.com/2-create-login/index.html)\n","source":"_posts/react-notes-2-create-login.md","raw":"---\ntitle:  React使用笔记2--创建登录组件\ndate: 2016-08-12 23:34:32\ncategories: react沙拉\ntags: 笔记\n---\n最近在学习使用React作为前端的框架，《React使用笔记》系列用于记录过程中的一些使用和解决方法。\n本文记录搭建登录页面的过程。\n<!--more-->\n\n## 根据产品规划划分模块\n-----\n### 主要页面逻辑\n在这里，本骚年就建一个比较简单的项目。该项目与之前的Angular使用笔记项目长得完全一致，但我们这里用React来实现吧。\n- 我们的主要页面逻辑如下：\n  - 1.登录页面，输入账号和密码即可\n  - 2.模块页面\n\n### 创建登录页面\n- 首先我们在components文件夹内添加一个login.jsx\n\n``` jsx\nimport React from 'react';\nconst Login = React.createClass({\n\trender() {\n\t\treturn (\n\t\t\t<div className=\"container\" id=\"login\">\n\t\t\t\t<form id=\"login-form\">\n\t\t\t\t\t<h3 className=\"text-center\">login</h3>\n\t\t\t\t\t<div className=\"form-group\">\n\t\t\t\t\t\t<label>account</label>\n\t\t\t\t\t\t<input type=\"text\" className=\"form-control\" placeholder=\"Account\" ref=\"loginName\" required />\n\t\t\t\t\t</div>\n\t\t\t\t\t<div className=\"form-group\">\n\t\t\t\t\t\t<label>Password</label>\n\t\t\t\t\t\t<input type=\"password\" className=\"form-control\" placeholder=\"Password\" ref=\"loginPwd\" required />\n\t\t\t\t\t</div>\n\t\t\t\t\t<button type=\"submit\"  className=\"btn btn-default\" onClick={this.loginSubmit}>登录</button>\n\t\t\t\t</form>\n\t\t\t</div>\n\t\t)\n\t}\n});\n\nmodule.exports = Login;\n```\n- 在jsx中，因为js中class为保留字，所以要写成className\n- 此处引用了Bootstrap的样式，在templates/index.ejs中添加\n\n``` html\n<link rel=\"stylesheet\" href=\"https://maxcdn.bootstrapcdn.com/bootstrap/latest/css/bootstrap.min.css\">\n```\n\n## React Router\n-----\n### 安装使用\n- 通过npm安装\n\n``` bash\n$ npm install history react-router@latest\n```\n- 还需要安装history，它也是React Router的依赖，且在npm 3+下不会自动安装\n\n``` bash\n$ npm install --save history\n```\n- 添加Route组件\n\n``` javascript\nimport { Router, Route, Link, hashHistory, IndexRoute } from 'react-router';\n```\n\n### React Router组件\n- Router组件\nRouter组件本身只是一个容器，真正的路由要通过Route组件定义。\n- Route组件\nRoute组件还可以嵌套。\n``` html\n<Router history={hashHistory}>\n  <Route path=\"/\" component={App}>\n    <Route path=\"/repos\" component={Repos}/>\n  </Route>\n</Router>\n```\n- Link组件\nLink组件用于取代<a>元素，生成一个链接，允许用户点击后跳转到另一个路由，可接收Router的状态。\n- IndexLink组件\n如果链接到根路由/，不要使用Link组件，而要使用IndexLink组件。\n- IndexRoute组件\nIndexRoute显式指定Home是根路由的子组件，即指定默认情况下加载的子组件，即该路径的index.html。\n- Redirect组件\nRedirect组件用于路由的跳转，即用户访问一个路由，会自动跳转到另一个路由。\n- IndexRedirect组件\nIndexRedirect组件用于访问根路由的时候，将用户重定向到某个子组件。\n\n### path属性\nRoute组件的path属性指定路由的匹配规则。\npath属性可以使用相对路径（不以/开头），匹配时就会相对于父组件的路径。\n- :paramName\n - 匹配URL的一个部分，直到遇到下一个/、?、#为止。\n - 这个路径参数可以通过this.props.params.paramName取出。\n- ()\n - ()表示URL的这个部分是可选的。\n- *\n*匹配任意字符，直到模式里面的下一个字符为止。匹配方式是非贪婪模式。\n- **\n**匹配任意字符，直到下一个/、?、#为止。匹配方式是贪婪模式。\n\n### Histories\nReact Router是建立在history之上的。 简而言之，一个history知道如何去监听浏览器地址栏的变化，并解析这个URL转化为location对象，然后router使用它匹配到路由，最后正确地渲染对应的组件。\n- createHashHistory\n - 这是一个你会获取到的默认history，如果你不指定某个history（即 <Router>{/* your routes */}</Router>）。\n - 它用到的是URL 的hash（#）部分去创建形如example.com/#/some/path的路由。\n - ?_k=ckuvup是每一个location创建的一个唯一的key，并把它们的状态存储在session storage中。当访客点击“后退”和“前进”时，我们就会有一个机制去恢复这些location state。可使用queryKey: false关闭。\n- createBrowserHistory\n - Browser history使用History API在浏览器中被创建用于处理URL，新建一个像这样真实的URL example.com/some/path。\n - 使用Browser history需要在服务器进行配置。\n- createMemoryHistory\n - Memory history不会在地址栏被操作或读取。\n\n### js中设置跳转\n- 使用browserHistory.push\n\n``` javascript\nimport { browserHistory } from 'react-router';\nexample(event) {\n\tbrowserHistory.push(path);\n}\n```\n- 使用context对象\n\n``` javascript\nexport example React.createClass({\n  // ask for `router` from context\n  contextTypes: {\n    router: React.PropTypes.object\n  },\n  example(event) {\n    this.context.router.push(path)\n  },\n})\n```\n\n## 添加路由\n-----\n### 在index.js设置路由\n``` javascript\nimport { Router, Route, Link, hashHistory, IndexRoute, useRouterHistory } from 'react-router'; //router组件\nimport { createHistory, createHashHistory } from 'history'; //history组件\nimport Login from  './components/login.jsx'; //login自定义组件\nimport Index from  './components/index.jsx'; //index自定义组件\nlet history = useRouterHistory(createHashHistory)({ queryKey: false });\n//将其渲染到页面上id为test的DOM元素内\nReactDOM.render(<Router history={history}>\n    <Route path=\"/\">\n      <Route path=\"index\" component={Index} />\n      <IndexRoute component={Login} />\n    </Route>\n  </Router>, \ndocument.body);\n```\n\n### 在components里login.ejs添加路由跳转\n- 添加登录按钮的click事件\n- 添加loginSubmit属性以及跳转\n\n``` jsx\nimport React from 'react'; //导入react组件\nconst Login = React.createClass({\n\tcontextTypes: {\n\t\trouter: React.PropTypes.object\n\t},\n\tloginSubmit: function() {\n\t\tthis.context.router.push('/index'); //使用this.content进行跳转\n\t},\n\trender() {\n\t\treturn (\n\t\t\t<div className=\"container\" id=\"login\">\n\t\t\t\t<form id=\"login-form\">\n\t\t\t\t\t<h3 className=\"text-center\">login</h3>\n\t\t\t\t\t<div className=\"form-group\">\n\t\t\t\t\t\t<label>account</label>\n\t\t\t\t\t\t<input type=\"text\" className=\"form-control\" placeholder=\"Account\" ref=\"loginName\" required />\n\t\t\t\t\t</div>\n\t\t\t\t\t<div className=\"form-group\">\n\t\t\t\t\t\t<label>Password</label>\n\t\t\t\t\t\t<input type=\"password\" className=\"form-control\" placeholder=\"Password\" ref=\"loginPwd\" required />\n\t\t\t\t\t</div>\n\t\t\t\t\t<button type=\"submit\"  className=\"btn btn-default\" onClick={this.loginSubmit}>登录</button>\n\t\t\t\t</form>\n\t\t\t</div>\n\t\t)\n\t}\n});\nmodule.exports = Login;\n```\n\n## 结束语\n-----\n从Angular转React中遇到不少问题呢，毕竟两者很多概念和使用方法都很不一样，使用过程中也是大开眼界了呀。\n[此处查看项目代码（仅包含app部分）](https://github.com/godbasin/godbasin.github.io/tree/blog-codes/react-notes/2-create-login)\n[此处查看页面效果](http://o9j9owc7b.bkt.clouddn.com/2-create-login/index.html)\n","slug":"react-notes-2-create-login","published":1,"updated":"2016-08-12T15:39:16.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cirrx8r8y0000pcl53wiovy6s","content":"<p>最近在学习使用React作为前端的框架，《React使用笔记》系列用于记录过程中的一些使用和解决方法。<br>本文记录搭建登录页面的过程。<br><a id=\"more\"></a></p>\n<h2 id=\"根据产品规划划分模块\"><a href=\"#根据产品规划划分模块\" class=\"headerlink\" title=\"根据产品规划划分模块\"></a>根据产品规划划分模块</h2><hr>\n<h3 id=\"主要页面逻辑\"><a href=\"#主要页面逻辑\" class=\"headerlink\" title=\"主要页面逻辑\"></a>主要页面逻辑</h3><p>在这里，本骚年就建一个比较简单的项目。该项目与之前的Angular使用笔记项目长得完全一致，但我们这里用React来实现吧。</p>\n<ul>\n<li>我们的主要页面逻辑如下：<ul>\n<li>1.登录页面，输入账号和密码即可</li>\n<li>2.模块页面</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"创建登录页面\"><a href=\"#创建登录页面\" class=\"headerlink\" title=\"创建登录页面\"></a>创建登录页面</h3><ul>\n<li>首先我们在components文件夹内添加一个login.jsx</li>\n</ul>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> React <span class=\"keyword\">from</span> <span class=\"string\">'react'</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> Login = React.createClass(&#123;</span><br><span class=\"line\">  render() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (</span><br><span class=\"line\">      &lt;div className=\"container\" id=\"login\"&gt;</span><br><span class=\"line\">        &lt;form id=\"login-form\"&gt;</span><br><span class=\"line\">          &lt;h3 className=\"text-center\"&gt;login&lt;/h3&gt;</span><br><span class=\"line\">          &lt;div className=\"form-group\"&gt;</span><br><span class=\"line\">            &lt;label&gt;account&lt;/label&gt;</span><br><span class=\"line\">            &lt;input type=\"text\" className=\"form-control\" placeholder=\"Account\" ref=\"loginName\" required /&gt;</span><br><span class=\"line\">          &lt;/div&gt;</span><br><span class=\"line\">          &lt;div className=\"form-group\"&gt;</span><br><span class=\"line\">            &lt;label&gt;Password&lt;/label&gt;</span><br><span class=\"line\">            &lt;input type=\"password\" className=\"form-control\" placeholder=\"Password\" ref=\"loginPwd\" required /&gt;</span><br><span class=\"line\">          &lt;/div&gt;</span><br><span class=\"line\">          &lt;button type=\"submit\"  className=\"btn btn-default\" onClick=&#123;this.loginSubmit&#125;&gt;登录&lt;/button&gt;</span><br><span class=\"line\">        &lt;/form&gt;</span><br><span class=\"line\">      &lt;/div&gt;</span><br><span class=\"line\">    )</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">module.exports = Login;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>在jsx中，因为js中class为保留字，所以要写成className</li>\n<li>此处引用了Bootstrap的样式，在templates/index.ejs中添加</li>\n</ul>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">link</span> <span class=\"attr\">rel</span>=<span class=\"string\">\"stylesheet\"</span> <span class=\"attr\">href</span>=<span class=\"string\">\"https://maxcdn.bootstrapcdn.com/bootstrap/latest/css/bootstrap.min.css\"</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"React-Router\"><a href=\"#React-Router\" class=\"headerlink\" title=\"React Router\"></a>React Router</h2><hr>\n<h3 id=\"安装使用\"><a href=\"#安装使用\" class=\"headerlink\" title=\"安装使用\"></a>安装使用</h3><ul>\n<li>通过npm安装</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ npm install <span class=\"built_in\">history</span> react-router@latest</span><br></pre></td></tr></table></figure>\n<ul>\n<li>还需要安装history，它也是React Router的依赖，且在npm 3+下不会自动安装</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ npm install --save <span class=\"built_in\">history</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li>添加Route组件</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; Router, Route, Link, hashHistory, IndexRoute &#125; <span class=\"keyword\">from</span> <span class=\"string\">'react-router'</span>;</span><br></pre></td></tr></table></figure>\n<h3 id=\"React-Router组件\"><a href=\"#React-Router组件\" class=\"headerlink\" title=\"React Router组件\"></a>React Router组件</h3><ul>\n<li>Router组件<br>Router组件本身只是一个容器，真正的路由要通过Route组件定义。</li>\n<li><p>Route组件<br>Route组件还可以嵌套。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">Router</span> <span class=\"attr\">history</span>=<span class=\"string\">&#123;hashHistory&#125;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">Route</span> <span class=\"attr\">path</span>=<span class=\"string\">\"/\"</span> <span class=\"attr\">component</span>=<span class=\"string\">&#123;App&#125;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">Route</span> <span class=\"attr\">path</span>=<span class=\"string\">\"/repos\"</span> <span class=\"attr\">component</span>=<span class=\"string\">&#123;Repos&#125;/</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">Route</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">Router</span>&gt;</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>Link组件<br>Link组件用于取代<a>元素，生成一个链接，允许用户点击后跳转到另一个路由，可接收Router的状态。</a></p>\n</li>\n<li>IndexLink组件<br>如果链接到根路由/，不要使用Link组件，而要使用IndexLink组件。</li>\n<li>IndexRoute组件<br>IndexRoute显式指定Home是根路由的子组件，即指定默认情况下加载的子组件，即该路径的index.html。</li>\n<li>Redirect组件<br>Redirect组件用于路由的跳转，即用户访问一个路由，会自动跳转到另一个路由。</li>\n<li>IndexRedirect组件<br>IndexRedirect组件用于访问根路由的时候，将用户重定向到某个子组件。</li>\n</ul>\n<h3 id=\"path属性\"><a href=\"#path属性\" class=\"headerlink\" title=\"path属性\"></a>path属性</h3><p>Route组件的path属性指定路由的匹配规则。<br>path属性可以使用相对路径（不以/开头），匹配时就会相对于父组件的路径。</p>\n<ul>\n<li>:paramName<ul>\n<li>匹配URL的一个部分，直到遇到下一个/、?、#为止。</li>\n<li>这个路径参数可以通过this.props.params.paramName取出。</li>\n</ul>\n</li>\n<li>()<ul>\n<li>()表示URL的这个部分是可选的。</li>\n</ul>\n</li>\n<li><em>\n</em>匹配任意字符，直到模式里面的下一个字符为止。匹配方式是非贪婪模式。</li>\n</ul>\n<hr>\n<p>**匹配任意字符，直到下一个/、?、#为止。匹配方式是贪婪模式。</p>\n<h3 id=\"Histories\"><a href=\"#Histories\" class=\"headerlink\" title=\"Histories\"></a>Histories</h3><p>React Router是建立在history之上的。 简而言之，一个history知道如何去监听浏览器地址栏的变化，并解析这个URL转化为location对象，然后router使用它匹配到路由，最后正确地渲染对应的组件。</p>\n<ul>\n<li>createHashHistory<ul>\n<li>这是一个你会获取到的默认history，如果你不指定某个history（即 <router>{/<em> your routes </em>/}</router>）。</li>\n<li>它用到的是URL 的hash（#）部分去创建形如example.com/#/some/path的路由。</li>\n<li>?_k=ckuvup是每一个location创建的一个唯一的key，并把它们的状态存储在session storage中。当访客点击“后退”和“前进”时，我们就会有一个机制去恢复这些location state。可使用queryKey: false关闭。</li>\n</ul>\n</li>\n<li>createBrowserHistory<ul>\n<li>Browser history使用History API在浏览器中被创建用于处理URL，新建一个像这样真实的URL example.com/some/path。</li>\n<li>使用Browser history需要在服务器进行配置。</li>\n</ul>\n</li>\n<li>createMemoryHistory<ul>\n<li>Memory history不会在地址栏被操作或读取。</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"js中设置跳转\"><a href=\"#js中设置跳转\" class=\"headerlink\" title=\"js中设置跳转\"></a>js中设置跳转</h3><ul>\n<li>使用browserHistory.push</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; browserHistory &#125; <span class=\"keyword\">from</span> <span class=\"string\">'react-router'</span>;</span><br><span class=\"line\">example(event) &#123;</span><br><span class=\"line\">  browserHistory.push(path);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>使用context对象</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> example React.createClass(&#123;</span><br><span class=\"line\">  <span class=\"comment\">// ask for `router` from context</span></span><br><span class=\"line\">  contextTypes: &#123;</span><br><span class=\"line\">    router: React.PropTypes.object</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  example(event) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.context.router.push(path)</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<h2 id=\"添加路由\"><a href=\"#添加路由\" class=\"headerlink\" title=\"添加路由\"></a>添加路由</h2><hr>\n<h3 id=\"在index-js设置路由\"><a href=\"#在index-js设置路由\" class=\"headerlink\" title=\"在index.js设置路由\"></a>在index.js设置路由</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; Router, Route, Link, hashHistory, IndexRoute, useRouterHistory &#125; <span class=\"keyword\">from</span> <span class=\"string\">'react-router'</span>; <span class=\"comment\">//router组件</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; createHistory, createHashHistory &#125; <span class=\"keyword\">from</span> <span class=\"string\">'history'</span>; <span class=\"comment\">//history组件</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> Login <span class=\"keyword\">from</span>  <span class=\"string\">'./components/login.jsx'</span>; <span class=\"comment\">//login自定义组件</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> Index <span class=\"keyword\">from</span>  <span class=\"string\">'./components/index.jsx'</span>; <span class=\"comment\">//index自定义组件</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> history = useRouterHistory(createHashHistory)(&#123; queryKey: <span class=\"literal\">false</span> &#125;);</span><br><span class=\"line\"><span class=\"comment\">//将其渲染到页面上id为test的DOM元素内</span></span><br><span class=\"line\">ReactDOM.render(&lt;Router history=&#123;history&#125;&gt;</span><br><span class=\"line\">    &lt;Route path=\"/\"&gt;</span><br><span class=\"line\">      &lt;Route path=\"index\" component=&#123;Index&#125; /&gt;</span><br><span class=\"line\">      &lt;IndexRoute component=&#123;Login&#125; /&gt;</span><br><span class=\"line\">    &lt;/Route&gt;</span><br><span class=\"line\">  &lt;/Router&gt;, </span><br><span class=\"line\">document.body);</span><br></pre></td></tr></table></figure>\n<h3 id=\"在components里login-ejs添加路由跳转\"><a href=\"#在components里login-ejs添加路由跳转\" class=\"headerlink\" title=\"在components里login.ejs添加路由跳转\"></a>在components里login.ejs添加路由跳转</h3><ul>\n<li>添加登录按钮的click事件</li>\n<li>添加loginSubmit属性以及跳转</li>\n</ul>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> React <span class=\"keyword\">from</span> <span class=\"string\">'react'</span>; <span class=\"comment\">//导入react组件</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> Login = React.createClass(&#123;</span><br><span class=\"line\">  contextTypes: &#123;</span><br><span class=\"line\">    router: React.PropTypes.object</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  loginSubmit: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.context.router.push(<span class=\"string\">'/index'</span>); <span class=\"comment\">//使用this.content进行跳转</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  render() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (</span><br><span class=\"line\">      &lt;div className=\"container\" id=\"login\"&gt;</span><br><span class=\"line\">        &lt;form id=\"login-form\"&gt;</span><br><span class=\"line\">          &lt;h3 className=\"text-center\"&gt;login&lt;/h3&gt;</span><br><span class=\"line\">          &lt;div className=\"form-group\"&gt;</span><br><span class=\"line\">            &lt;label&gt;account&lt;/label&gt;</span><br><span class=\"line\">            &lt;input type=\"text\" className=\"form-control\" placeholder=\"Account\" ref=\"loginName\" required /&gt;</span><br><span class=\"line\">          &lt;/div&gt;</span><br><span class=\"line\">          &lt;div className=\"form-group\"&gt;</span><br><span class=\"line\">            &lt;label&gt;Password&lt;/label&gt;</span><br><span class=\"line\">            &lt;input type=\"password\" className=\"form-control\" placeholder=\"Password\" ref=\"loginPwd\" required /&gt;</span><br><span class=\"line\">          &lt;/div&gt;</span><br><span class=\"line\">          &lt;button type=\"submit\"  className=\"btn btn-default\" onClick=&#123;this.loginSubmit&#125;&gt;登录&lt;/button&gt;</span><br><span class=\"line\">        &lt;/form&gt;</span><br><span class=\"line\">      &lt;/div&gt;</span><br><span class=\"line\">    )</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">module.exports = Login;</span><br></pre></td></tr></table></figure>\n<h2 id=\"结束语\"><a href=\"#结束语\" class=\"headerlink\" title=\"结束语\"></a>结束语</h2><hr>\n<p>从Angular转React中遇到不少问题呢，毕竟两者很多概念和使用方法都很不一样，使用过程中也是大开眼界了呀。<br><a href=\"https://github.com/godbasin/godbasin.github.io/tree/blog-codes/react-notes/2-create-login\" target=\"_blank\" rel=\"external\">此处查看项目代码（仅包含app部分）</a><br><a href=\"http://o9j9owc7b.bkt.clouddn.com/2-create-login/index.html\" target=\"_blank\" rel=\"external\">此处查看页面效果</a></p>\n","excerpt":"<p>最近在学习使用React作为前端的框架，《React使用笔记》系列用于记录过程中的一些使用和解决方法。<br>本文记录搭建登录页面的过程。<br>","more":"</p>\n<h2 id=\"根据产品规划划分模块\"><a href=\"#根据产品规划划分模块\" class=\"headerlink\" title=\"根据产品规划划分模块\"></a>根据产品规划划分模块</h2><hr>\n<h3 id=\"主要页面逻辑\"><a href=\"#主要页面逻辑\" class=\"headerlink\" title=\"主要页面逻辑\"></a>主要页面逻辑</h3><p>在这里，本骚年就建一个比较简单的项目。该项目与之前的Angular使用笔记项目长得完全一致，但我们这里用React来实现吧。</p>\n<ul>\n<li>我们的主要页面逻辑如下：<ul>\n<li>1.登录页面，输入账号和密码即可</li>\n<li>2.模块页面</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"创建登录页面\"><a href=\"#创建登录页面\" class=\"headerlink\" title=\"创建登录页面\"></a>创建登录页面</h3><ul>\n<li>首先我们在components文件夹内添加一个login.jsx</li>\n</ul>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> React <span class=\"keyword\">from</span> <span class=\"string\">'react'</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> Login = React.createClass(&#123;</span><br><span class=\"line\">  render() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (</span><br><span class=\"line\">      &lt;div className=\"container\" id=\"login\"&gt;</span><br><span class=\"line\">        &lt;form id=\"login-form\"&gt;</span><br><span class=\"line\">          &lt;h3 className=\"text-center\"&gt;login&lt;/h3&gt;</span><br><span class=\"line\">          &lt;div className=\"form-group\"&gt;</span><br><span class=\"line\">            &lt;label&gt;account&lt;/label&gt;</span><br><span class=\"line\">            &lt;input type=\"text\" className=\"form-control\" placeholder=\"Account\" ref=\"loginName\" required /&gt;</span><br><span class=\"line\">          &lt;/div&gt;</span><br><span class=\"line\">          &lt;div className=\"form-group\"&gt;</span><br><span class=\"line\">            &lt;label&gt;Password&lt;/label&gt;</span><br><span class=\"line\">            &lt;input type=\"password\" className=\"form-control\" placeholder=\"Password\" ref=\"loginPwd\" required /&gt;</span><br><span class=\"line\">          &lt;/div&gt;</span><br><span class=\"line\">          &lt;button type=\"submit\"  className=\"btn btn-default\" onClick=&#123;this.loginSubmit&#125;&gt;登录&lt;/button&gt;</span><br><span class=\"line\">        &lt;/form&gt;</span><br><span class=\"line\">      &lt;/div&gt;</span><br><span class=\"line\">    )</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">module.exports = Login;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>在jsx中，因为js中class为保留字，所以要写成className</li>\n<li>此处引用了Bootstrap的样式，在templates/index.ejs中添加</li>\n</ul>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">link</span> <span class=\"attr\">rel</span>=<span class=\"string\">\"stylesheet\"</span> <span class=\"attr\">href</span>=<span class=\"string\">\"https://maxcdn.bootstrapcdn.com/bootstrap/latest/css/bootstrap.min.css\"</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"React-Router\"><a href=\"#React-Router\" class=\"headerlink\" title=\"React Router\"></a>React Router</h2><hr>\n<h3 id=\"安装使用\"><a href=\"#安装使用\" class=\"headerlink\" title=\"安装使用\"></a>安装使用</h3><ul>\n<li>通过npm安装</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ npm install <span class=\"built_in\">history</span> react-router@latest</span><br></pre></td></tr></table></figure>\n<ul>\n<li>还需要安装history，它也是React Router的依赖，且在npm 3+下不会自动安装</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ npm install --save <span class=\"built_in\">history</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li>添加Route组件</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; Router, Route, Link, hashHistory, IndexRoute &#125; <span class=\"keyword\">from</span> <span class=\"string\">'react-router'</span>;</span><br></pre></td></tr></table></figure>\n<h3 id=\"React-Router组件\"><a href=\"#React-Router组件\" class=\"headerlink\" title=\"React Router组件\"></a>React Router组件</h3><ul>\n<li>Router组件<br>Router组件本身只是一个容器，真正的路由要通过Route组件定义。</li>\n<li><p>Route组件<br>Route组件还可以嵌套。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">Router</span> <span class=\"attr\">history</span>=<span class=\"string\">&#123;hashHistory&#125;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">Route</span> <span class=\"attr\">path</span>=<span class=\"string\">\"/\"</span> <span class=\"attr\">component</span>=<span class=\"string\">&#123;App&#125;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">Route</span> <span class=\"attr\">path</span>=<span class=\"string\">\"/repos\"</span> <span class=\"attr\">component</span>=<span class=\"string\">&#123;Repos&#125;/</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">Route</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">Router</span>&gt;</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>Link组件<br>Link组件用于取代<a>元素，生成一个链接，允许用户点击后跳转到另一个路由，可接收Router的状态。</p>\n</li>\n<li>IndexLink组件<br>如果链接到根路由/，不要使用Link组件，而要使用IndexLink组件。</li>\n<li>IndexRoute组件<br>IndexRoute显式指定Home是根路由的子组件，即指定默认情况下加载的子组件，即该路径的index.html。</li>\n<li>Redirect组件<br>Redirect组件用于路由的跳转，即用户访问一个路由，会自动跳转到另一个路由。</li>\n<li>IndexRedirect组件<br>IndexRedirect组件用于访问根路由的时候，将用户重定向到某个子组件。</li>\n</ul>\n<h3 id=\"path属性\"><a href=\"#path属性\" class=\"headerlink\" title=\"path属性\"></a>path属性</h3><p>Route组件的path属性指定路由的匹配规则。<br>path属性可以使用相对路径（不以/开头），匹配时就会相对于父组件的路径。</p>\n<ul>\n<li>:paramName<ul>\n<li>匹配URL的一个部分，直到遇到下一个/、?、#为止。</li>\n<li>这个路径参数可以通过this.props.params.paramName取出。</li>\n</ul>\n</li>\n<li>()<ul>\n<li>()表示URL的这个部分是可选的。</li>\n</ul>\n</li>\n<li><em>\n</em>匹配任意字符，直到模式里面的下一个字符为止。匹配方式是非贪婪模式。</li>\n</ul>\n<hr>\n<p>**匹配任意字符，直到下一个/、?、#为止。匹配方式是贪婪模式。</p>\n<h3 id=\"Histories\"><a href=\"#Histories\" class=\"headerlink\" title=\"Histories\"></a>Histories</h3><p>React Router是建立在history之上的。 简而言之，一个history知道如何去监听浏览器地址栏的变化，并解析这个URL转化为location对象，然后router使用它匹配到路由，最后正确地渲染对应的组件。</p>\n<ul>\n<li>createHashHistory<ul>\n<li>这是一个你会获取到的默认history，如果你不指定某个history（即 <Router>{/<em> your routes </em>/}</Router>）。</li>\n<li>它用到的是URL 的hash（#）部分去创建形如example.com/#/some/path的路由。</li>\n<li>?_k=ckuvup是每一个location创建的一个唯一的key，并把它们的状态存储在session storage中。当访客点击“后退”和“前进”时，我们就会有一个机制去恢复这些location state。可使用queryKey: false关闭。</li>\n</ul>\n</li>\n<li>createBrowserHistory<ul>\n<li>Browser history使用History API在浏览器中被创建用于处理URL，新建一个像这样真实的URL example.com/some/path。</li>\n<li>使用Browser history需要在服务器进行配置。</li>\n</ul>\n</li>\n<li>createMemoryHistory<ul>\n<li>Memory history不会在地址栏被操作或读取。</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"js中设置跳转\"><a href=\"#js中设置跳转\" class=\"headerlink\" title=\"js中设置跳转\"></a>js中设置跳转</h3><ul>\n<li>使用browserHistory.push</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; browserHistory &#125; <span class=\"keyword\">from</span> <span class=\"string\">'react-router'</span>;</span><br><span class=\"line\">example(event) &#123;</span><br><span class=\"line\">  browserHistory.push(path);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>使用context对象</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> example React.createClass(&#123;</span><br><span class=\"line\">  <span class=\"comment\">// ask for `router` from context</span></span><br><span class=\"line\">  contextTypes: &#123;</span><br><span class=\"line\">    router: React.PropTypes.object</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  example(event) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.context.router.push(path)</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<h2 id=\"添加路由\"><a href=\"#添加路由\" class=\"headerlink\" title=\"添加路由\"></a>添加路由</h2><hr>\n<h3 id=\"在index-js设置路由\"><a href=\"#在index-js设置路由\" class=\"headerlink\" title=\"在index.js设置路由\"></a>在index.js设置路由</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; Router, Route, Link, hashHistory, IndexRoute, useRouterHistory &#125; <span class=\"keyword\">from</span> <span class=\"string\">'react-router'</span>; <span class=\"comment\">//router组件</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; createHistory, createHashHistory &#125; <span class=\"keyword\">from</span> <span class=\"string\">'history'</span>; <span class=\"comment\">//history组件</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> Login <span class=\"keyword\">from</span>  <span class=\"string\">'./components/login.jsx'</span>; <span class=\"comment\">//login自定义组件</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> Index <span class=\"keyword\">from</span>  <span class=\"string\">'./components/index.jsx'</span>; <span class=\"comment\">//index自定义组件</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> history = useRouterHistory(createHashHistory)(&#123; queryKey: <span class=\"literal\">false</span> &#125;);</span><br><span class=\"line\"><span class=\"comment\">//将其渲染到页面上id为test的DOM元素内</span></span><br><span class=\"line\">ReactDOM.render(&lt;Router history=&#123;history&#125;&gt;</span><br><span class=\"line\">    &lt;Route path=\"/\"&gt;</span><br><span class=\"line\">      &lt;Route path=\"index\" component=&#123;Index&#125; /&gt;</span><br><span class=\"line\">      &lt;IndexRoute component=&#123;Login&#125; /&gt;</span><br><span class=\"line\">    &lt;/Route&gt;</span><br><span class=\"line\">  &lt;/Router&gt;, </span><br><span class=\"line\">document.body);</span><br></pre></td></tr></table></figure>\n<h3 id=\"在components里login-ejs添加路由跳转\"><a href=\"#在components里login-ejs添加路由跳转\" class=\"headerlink\" title=\"在components里login.ejs添加路由跳转\"></a>在components里login.ejs添加路由跳转</h3><ul>\n<li>添加登录按钮的click事件</li>\n<li>添加loginSubmit属性以及跳转</li>\n</ul>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> React <span class=\"keyword\">from</span> <span class=\"string\">'react'</span>; <span class=\"comment\">//导入react组件</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> Login = React.createClass(&#123;</span><br><span class=\"line\">  contextTypes: &#123;</span><br><span class=\"line\">    router: React.PropTypes.object</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  loginSubmit: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.context.router.push(<span class=\"string\">'/index'</span>); <span class=\"comment\">//使用this.content进行跳转</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  render() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (</span><br><span class=\"line\">      &lt;div className=\"container\" id=\"login\"&gt;</span><br><span class=\"line\">        &lt;form id=\"login-form\"&gt;</span><br><span class=\"line\">          &lt;h3 className=\"text-center\"&gt;login&lt;/h3&gt;</span><br><span class=\"line\">          &lt;div className=\"form-group\"&gt;</span><br><span class=\"line\">            &lt;label&gt;account&lt;/label&gt;</span><br><span class=\"line\">            &lt;input type=\"text\" className=\"form-control\" placeholder=\"Account\" ref=\"loginName\" required /&gt;</span><br><span class=\"line\">          &lt;/div&gt;</span><br><span class=\"line\">          &lt;div className=\"form-group\"&gt;</span><br><span class=\"line\">            &lt;label&gt;Password&lt;/label&gt;</span><br><span class=\"line\">            &lt;input type=\"password\" className=\"form-control\" placeholder=\"Password\" ref=\"loginPwd\" required /&gt;</span><br><span class=\"line\">          &lt;/div&gt;</span><br><span class=\"line\">          &lt;button type=\"submit\"  className=\"btn btn-default\" onClick=&#123;this.loginSubmit&#125;&gt;登录&lt;/button&gt;</span><br><span class=\"line\">        &lt;/form&gt;</span><br><span class=\"line\">      &lt;/div&gt;</span><br><span class=\"line\">    )</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">module.exports = Login;</span><br></pre></td></tr></table></figure>\n<h2 id=\"结束语\"><a href=\"#结束语\" class=\"headerlink\" title=\"结束语\"></a>结束语</h2><hr>\n<p>从Angular转React中遇到不少问题呢，毕竟两者很多概念和使用方法都很不一样，使用过程中也是大开眼界了呀。<br><a href=\"https://github.com/godbasin/godbasin.github.io/tree/blog-codes/react-notes/2-create-login\">此处查看项目代码（仅包含app部分）</a><br><a href=\"http://o9j9owc7b.bkt.clouddn.com/2-create-login/index.html\">此处查看页面效果</a></p>"}],"PostAsset":[],"PostCategory":[{"post_id":"cirrwvo1z000338l5ga82zxk9","category_id":"cirrwvo28000538l5x8elmc4a","_id":"cirrwvo2a000738l5o9etsknk"},{"post_id":"cirrwvo2e000838l56jn6fjek","category_id":"cirrwvo2g000a38l5tyo4u0zp","_id":"cirrwvo2h000c38l57v6q67ls"},{"post_id":"cirrwvo2i000d38l5tdmgq7ih","category_id":"cirrwvo2g000a38l5tyo4u0zp","_id":"cirrwvo2l000f38l5uhxjx82v"},{"post_id":"cirrwvo2p000g38l5m2zczksq","category_id":"cirrwvo28000538l5x8elmc4a","_id":"cirrwvo2r000i38l5qmzdo2uf"},{"post_id":"cirrwvo2t000j38l5j50wgtih","category_id":"cirrwvo2w000l38l5vcok5s2q","_id":"cirrwvo2x000n38l5hkhp9duf"},{"post_id":"cirrwvo2y000o38l568ocpy64","category_id":"cirrwvo31000q38l57ts65qmu","_id":"cirrwvo32000s38l5auu65152"},{"post_id":"cirrwvo35000t38l5rfoc146d","category_id":"cirrwvo2w000l38l5vcok5s2q","_id":"cirrwvo3a000v38l508e2qn1q"},{"post_id":"cirrwvo3d000w38l54tztt6nj","category_id":"cirrwvo2g000a38l5tyo4u0zp","_id":"cirrwvo3g000y38l5g76szx5r"},{"post_id":"cirrwvo3i000z38l5o0q3v2sp","category_id":"cirrwvo3k001138l5prdzu51o","_id":"cirrwvo3l001238l5zb3tvwyp"},{"post_id":"cirrwvo3m001338l54azv90gs","category_id":"cirrwvo3o001538l5t1d2qn46","_id":"cirrwvo3p001738l54nz89y3t"},{"post_id":"cirrwvo3r001838l5dof66xgn","category_id":"cirrwvo2g000a38l5tyo4u0zp","_id":"cirrwvo3u001a38l5cutkmp75"},{"post_id":"cirrwvo3w001b38l5i9kfvdz4","category_id":"cirrwvo2g000a38l5tyo4u0zp","_id":"cirrwvo3y001d38l5avyvg6k4"},{"post_id":"cirrwvo41001e38l5ssuatx4r","category_id":"cirrwvo2g000a38l5tyo4u0zp","_id":"cirrwvo47001g38l5jgjbvt72"},{"post_id":"cirrwvo4b001h38l5o6nlor7u","category_id":"cirrwvo3o001538l5t1d2qn46","_id":"cirrwvo4e001j38l5d7dpd4ar"},{"post_id":"cirrwvo4g001k38l5sk0mlaeu","category_id":"cirrwvo2g000a38l5tyo4u0zp","_id":"cirrwvo4j001m38l5ud7elrr8"},{"post_id":"cirrwvo4j001n38l5gddpke5t","category_id":"cirrwvo2g000a38l5tyo4u0zp","_id":"cirrwvo4m001p38l5otwxpkgc"},{"post_id":"cirrwvo4n001q38l5c7vfr9g6","category_id":"cirrwvo2g000a38l5tyo4u0zp","_id":"cirrwvo4r001s38l589ivst8z"},{"post_id":"cirrwvo4t001t38l51k65dw46","category_id":"cirrwvo3o001538l5t1d2qn46","_id":"cirrwvo4y001v38l5jxtf1qak"},{"post_id":"cirrwvo50001w38l5okxc94ie","category_id":"cirrwvo31000q38l57ts65qmu","_id":"cirrwvo53001y38l5xvfh2he4"},{"post_id":"cirrwvo59002038l5pytwqrwq","category_id":"cirrwvo31000q38l57ts65qmu","_id":"cirrwvo5b002238l5b5a082hh"},{"post_id":"cirrwvo5m002338l58pkh8dvu","category_id":"cirrwvo2g000a38l5tyo4u0zp","_id":"cirrwvo5o002538l5tmvr8c5a"},{"post_id":"cirrwvo6l002638l5vatga27p","category_id":"cirrwvo2g000a38l5tyo4u0zp","_id":"cirrwvo6o002838l530zczwsw"},{"post_id":"cirrwvo6r002938l518fa61pk","category_id":"cirrwvo2g000a38l5tyo4u0zp","_id":"cirrwvo6t002b38l5hmyuxxm9"},{"post_id":"cirrwvo6w002c38l5dqj5048n","category_id":"cirrwvo2g000a38l5tyo4u0zp","_id":"cirrwvo6z002e38l579eaqe7d"},{"post_id":"cirrwvo73002f38l5zvt7ut70","category_id":"cirrwvo3o001538l5t1d2qn46","_id":"cirrwvo75002h38l5qzhb739j"},{"post_id":"cirrx8r8y0000pcl53wiovy6s","category_id":"cirrwvo3k001138l5prdzu51o","_id":"cirrx8r950002pcl5spd1mvvs"}],"PostTag":[{"post_id":"cirrwvo1z000338l5ga82zxk9","tag_id":"cirrwvo26000438l5bb1gsz80","_id":"cirrwvo29000638l530kimxr8"},{"post_id":"cirrwvo2e000838l56jn6fjek","tag_id":"cirrwvo2f000938l5ojqthp4b","_id":"cirrwvo2g000b38l5md56nghp"},{"post_id":"cirrwvo2i000d38l5tdmgq7ih","tag_id":"cirrwvo2f000938l5ojqthp4b","_id":"cirrwvo2l000e38l5mez08zou"},{"post_id":"cirrwvo2p000g38l5m2zczksq","tag_id":"cirrwvo26000438l5bb1gsz80","_id":"cirrwvo2q000h38l5g4f5359u"},{"post_id":"cirrwvo2t000j38l5j50wgtih","tag_id":"cirrwvo2v000k38l589ynw20y","_id":"cirrwvo2x000m38l5gwuzlgoi"},{"post_id":"cirrwvo2y000o38l568ocpy64","tag_id":"cirrwvo30000p38l52l44mhu2","_id":"cirrwvo31000r38l5xlrc87x7"},{"post_id":"cirrwvo35000t38l5rfoc146d","tag_id":"cirrwvo26000438l5bb1gsz80","_id":"cirrwvo39000u38l583hziuru"},{"post_id":"cirrwvo3d000w38l54tztt6nj","tag_id":"cirrwvo2f000938l5ojqthp4b","_id":"cirrwvo3g000x38l50hrsjg23"},{"post_id":"cirrwvo3i000z38l5o0q3v2sp","tag_id":"cirrwvo2f000938l5ojqthp4b","_id":"cirrwvo3k001038l5s34km4wc"},{"post_id":"cirrwvo3m001338l54azv90gs","tag_id":"cirrwvo3o001438l5ogpti2tk","_id":"cirrwvo3p001638l5zg5ib3ak"},{"post_id":"cirrwvo3r001838l5dof66xgn","tag_id":"cirrwvo2f000938l5ojqthp4b","_id":"cirrwvo3u001938l5cq78xyge"},{"post_id":"cirrwvo3w001b38l5i9kfvdz4","tag_id":"cirrwvo2f000938l5ojqthp4b","_id":"cirrwvo3x001c38l5jspl4wyo"},{"post_id":"cirrwvo41001e38l5ssuatx4r","tag_id":"cirrwvo2f000938l5ojqthp4b","_id":"cirrwvo47001f38l5ome6c62g"},{"post_id":"cirrwvo4b001h38l5o6nlor7u","tag_id":"cirrwvo2f000938l5ojqthp4b","_id":"cirrwvo4e001i38l53cz6jqfa"},{"post_id":"cirrwvo4g001k38l5sk0mlaeu","tag_id":"cirrwvo2f000938l5ojqthp4b","_id":"cirrwvo4i001l38l56vl5wek0"},{"post_id":"cirrwvo4j001n38l5gddpke5t","tag_id":"cirrwvo2f000938l5ojqthp4b","_id":"cirrwvo4l001o38l5oluf31io"},{"post_id":"cirrwvo4n001q38l5c7vfr9g6","tag_id":"cirrwvo2f000938l5ojqthp4b","_id":"cirrwvo4r001r38l5vubmmiai"},{"post_id":"cirrwvo4t001t38l51k65dw46","tag_id":"cirrwvo30000p38l52l44mhu2","_id":"cirrwvo4v001u38l566mbs5nz"},{"post_id":"cirrwvo50001w38l5okxc94ie","tag_id":"cirrwvo52001x38l5uthyoque","_id":"cirrwvo54001z38l5d04i40m0"},{"post_id":"cirrwvo59002038l5pytwqrwq","tag_id":"cirrwvo52001x38l5uthyoque","_id":"cirrwvo5b002138l5s95vzu6c"},{"post_id":"cirrwvo5m002338l58pkh8dvu","tag_id":"cirrwvo2f000938l5ojqthp4b","_id":"cirrwvo5o002438l5w8f4q0p5"},{"post_id":"cirrwvo6l002638l5vatga27p","tag_id":"cirrwvo2f000938l5ojqthp4b","_id":"cirrwvo6o002738l58e21cfsr"},{"post_id":"cirrwvo6r002938l518fa61pk","tag_id":"cirrwvo2f000938l5ojqthp4b","_id":"cirrwvo6s002a38l5fwrv8djt"},{"post_id":"cirrwvo6w002c38l5dqj5048n","tag_id":"cirrwvo2f000938l5ojqthp4b","_id":"cirrwvo6y002d38l5fcbz0swd"},{"post_id":"cirrwvo73002f38l5zvt7ut70","tag_id":"cirrwvo30000p38l52l44mhu2","_id":"cirrwvo75002g38l5kmctd8p4"},{"post_id":"cirrx8r8y0000pcl53wiovy6s","tag_id":"cirrwvo2f000938l5ojqthp4b","_id":"cirrx8r940001pcl5gsgyrdp8"}],"Tag":[{"name":"分享","_id":"cirrwvo26000438l5bb1gsz80"},{"name":"笔记","_id":"cirrwvo2f000938l5ojqthp4b"},{"name":"教程","_id":"cirrwvo2v000k38l589ynw20y"},{"name":"逻辑实现","_id":"cirrwvo30000p38l52l44mhu2"},{"name":"原创部件","_id":"cirrwvo3o001438l5ogpti2tk"},{"name":"自制插件","_id":"cirrwvo52001x38l5uthyoque"}]}}